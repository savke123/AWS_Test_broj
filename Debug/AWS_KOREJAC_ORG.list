
AWS_KOREJAC_ORG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b7f8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c35c  0802b9a8  0802b9a8  0003b9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037d04  08037d04  000500b8  2**0
                  CONTENTS
  4 .ARM          00000008  08037d04  08037d04  00047d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08037d0c  08037d0c  000500b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037d0c  08037d0c  00047d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037d10  08037d10  00047d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08037d14  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018968  200000b8  08037dcc  000500b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018a20  08037dcc  00058a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ccbe6  00000000  00000000  000500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00015fe6  00000000  00000000  0011ccce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00072262  00000000  00000000  00132cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003bb0  00000000  00000000  001a4f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006950  00000000  00000000  001a8ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00042ea8  00000000  00000000  001af418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007fcf7  00000000  00000000  001f22c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00121cf1  00000000  00000000  00271fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00393ca8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c91c  00000000  00000000  00393cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  003a0618  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  003a063c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802b990 	.word	0x0802b990

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000bc 	.word	0x200000bc
 80001ec:	0802b990 	.word	0x0802b990

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <HAL_Init+0x30>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f82f 	bl	8000638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	2000      	movs	r0, #0
 80005dc:	f029 fcc4 	bl	8029f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f029 fca0 	bl	8029f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005e4:	2000      	movs	r0, #0
 80005e6:	bd08      	pop	{r3, pc}
 80005e8:	40023c00 	.word	0x40023c00

080005ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <HAL_IncTick+0x10>)
 80005ee:	6811      	ldr	r1, [r2, #0]
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_IncTick+0x14>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	440b      	add	r3, r1
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20010d50 	.word	0x20010d50
 8000600:	20000000 	.word	0x20000000

08000604 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000604:	4b01      	ldr	r3, [pc, #4]	; (800060c <HAL_GetTick+0x8>)
 8000606:	6818      	ldr	r0, [r3, #0]
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20010d50 	.word	0x20010d50

08000610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000610:	b538      	push	{r3, r4, r5, lr}
 8000612:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff fff6 	bl	8000604 <HAL_GetTick>
 8000618:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800061e:	d002      	beq.n	8000626 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_Delay+0x24>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000626:	f7ff ffed 	bl	8000604 <HAL_GetTick>
 800062a:	1b40      	subs	r0, r0, r5
 800062c:	42a0      	cmp	r0, r4
 800062e:	d3fa      	bcc.n	8000626 <HAL_Delay+0x16>
  {
  }
}
 8000630:	bd38      	pop	{r3, r4, r5, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800063a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063c:	0203      	lsls	r3, r0, #8
 800063e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000646:	0412      	lsls	r2, r2, #16
 8000648:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000654:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800065c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_NVIC_SetPriority+0x5c>)
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000666:	f1c3 0407 	rsb	r4, r3, #7
 800066a:	2c04      	cmp	r4, #4
 800066c:	bf28      	it	cs
 800066e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000670:	1d1d      	adds	r5, r3, #4
 8000672:	2d06      	cmp	r5, #6
 8000674:	bf8c      	ite	hi
 8000676:	3b03      	subhi	r3, #3
 8000678:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067a:	f04f 35ff 	mov.w	r5, #4294967295
 800067e:	fa05 f404 	lsl.w	r4, r5, r4
 8000682:	ea21 0104 	bic.w	r1, r1, r4
 8000686:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000692:	2800      	cmp	r0, #0
 8000694:	db09      	blt.n	80006aa <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	0109      	lsls	r1, r1, #4
 8000698:	b2c9      	uxtb	r1, r1
 800069a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800069e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006a2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006a6:	bc30      	pop	{r4, r5}
 80006a8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	and.w	r0, r0, #15
 80006ae:	0109      	lsls	r1, r1, #4
 80006b0:	b2c9      	uxtb	r1, r1
 80006b2:	4b02      	ldr	r3, [pc, #8]	; (80006bc <HAL_NVIC_SetPriority+0x60>)
 80006b4:	5419      	strb	r1, [r3, r0]
 80006b6:	e7f6      	b.n	80006a6 <HAL_NVIC_SetPriority+0x4a>
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	e000ed14 	.word	0xe000ed14

080006c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006c0:	2800      	cmp	r0, #0
 80006c2:	db08      	blt.n	80006d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c4:	0942      	lsrs	r2, r0, #5
 80006c6:	f000 001f 	and.w	r0, r0, #31
 80006ca:	2301      	movs	r3, #1
 80006cc:	fa03 f000 	lsl.w	r0, r3, r0
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <HAL_NVIC_EnableIRQ+0x18>)
 80006d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100

080006dc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80006dc:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <ETH_Delay+0x24>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <ETH_Delay+0x28>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	0a5b      	lsrs	r3, r3, #9
 80006ea:	fb00 f303 	mul.w	r3, r0, r3
 80006ee:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 80006f0:	bf00      	nop
  } 
  while (Delay --);
 80006f2:	9b01      	ldr	r3, [sp, #4]
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	9201      	str	r2, [sp, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f9      	bne.n	80006f0 <ETH_Delay+0x14>
}
 80006fc:	b002      	add	sp, #8
 80006fe:	4770      	bx	lr
 8000700:	20000050 	.word	0x20000050
 8000704:	10624dd3 	.word	0x10624dd3

08000708 <ETH_FlushTransmitFIFO>:
{
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 800070e:	2300      	movs	r3, #0
 8000710:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000712:	6802      	ldr	r2, [r0, #0]
 8000714:	f241 0518 	movw	r5, #4120	; 0x1018
 8000718:	5953      	ldr	r3, [r2, r5]
 800071a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071e:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000720:	6803      	ldr	r3, [r0, #0]
 8000722:	595b      	ldr	r3, [r3, r5]
 8000724:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff ffd8 	bl	80006dc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	9a01      	ldr	r2, [sp, #4]
 8000730:	515a      	str	r2, [r3, r5]
}
 8000732:	b003      	add	sp, #12
 8000734:	bd30      	pop	{r4, r5, pc}
	...

08000738 <ETH_MACDMAConfig>:
{
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800073c:	b129      	cbz	r1, 800074a <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800073e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000742:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000748:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800074a:	69e3      	ldr	r3, [r4, #28]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf0c      	ite	eq
 8000750:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 8000754:	2200      	movne	r2, #0
  tmpreg1 = (heth->Instance)->MACCR;
 8000756:	6821      	ldr	r1, [r4, #0]
 8000758:	6808      	ldr	r0, [r1, #0]
                       macinit.LoopbackMode |
 800075a:	68a3      	ldr	r3, [r4, #8]
 800075c:	68e5      	ldr	r5, [r4, #12]
 800075e:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 8000760:	4313      	orrs	r3, r2
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000762:	4a3c      	ldr	r2, [pc, #240]	; (8000854 <ETH_MACDMAConfig+0x11c>)
 8000764:	4002      	ands	r2, r0
 8000766:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800076c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff4c 	bl	8000610 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff42 	bl	8000610 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	2500      	movs	r5, #0
 8000794:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800079a:	6822      	ldr	r2, [r4, #0]
 800079c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800079e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007aa:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ff2d 	bl	8000610 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff24 	bl	8000610 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	f241 0518 	movw	r5, #4120	; 0x1018
 80007d2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <ETH_MACDMAConfig+0x120>)
 80007d6:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007d8:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007dc:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007e0:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff12 	bl	8000610 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <ETH_MACDMAConfig+0x124>)
 80007f8:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ff04 	bl	8000610 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d013      	beq.n	800083e <ETH_MACDMAConfig+0x106>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000816:	6962      	ldr	r2, [r4, #20]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000818:	7951      	ldrb	r1, [r2, #5]
 800081a:	7913      	ldrb	r3, [r2, #4]
 800081c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <ETH_MACDMAConfig+0x128>)
 8000822:	600b      	str	r3, [r1, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000824:	78d1      	ldrb	r1, [r2, #3]
 8000826:	7893      	ldrb	r3, [r2, #2]
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800082e:	7811      	ldrb	r1, [r2, #0]
 8000830:	430b      	orrs	r3, r1
 8000832:	7852      	ldrb	r2, [r2, #1]
 8000834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <ETH_MACDMAConfig+0x12c>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800083e:	6821      	ldr	r1, [r4, #0]
 8000840:	f241 021c 	movw	r2, #4124	; 0x101c
 8000844:	588b      	ldr	r3, [r1, r2]
 8000846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800084a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084e:	508b      	str	r3, [r1, r2]
 8000850:	e7e1      	b.n	8000816 <ETH_MACDMAConfig+0xde>
 8000852:	bf00      	nop
 8000854:	ff20810f 	.word	0xff20810f
 8000858:	f8de3f23 	.word	0xf8de3f23
 800085c:	02c12080 	.word	0x02c12080
 8000860:	40028040 	.word	0x40028040
 8000864:	40028044 	.word	0x40028044

08000868 <HAL_ETH_DMATxDescListInit>:
{
 8000868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800086c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000870:	2c01      	cmp	r4, #1
 8000872:	d034      	beq.n	80008de <HAL_ETH_DMATxDescListInit+0x76>
 8000874:	2401      	movs	r4, #1
 8000876:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800087a:	2402      	movs	r4, #2
 800087c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000880:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000882:	b1fb      	cbz	r3, 80008c4 <HAL_ETH_DMATxDescListInit+0x5c>
 8000884:	460c      	mov	r4, r1
 8000886:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000888:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
    if(i < (TxBuffCount-1U))
 800088c:	f103 3cff 	add.w	ip, r3, #4294967295
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000890:	4688      	mov	r8, r1
 8000892:	e00b      	b.n	80008ac <HAL_ETH_DMATxDescListInit+0x44>
    if(i < (TxBuffCount-1U))
 8000894:	45ac      	cmp	ip, r5
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000896:	bf8c      	ite	hi
 8000898:	f104 0720 	addhi.w	r7, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800089c:	4647      	movls	r7, r8
 800089e:	60f7      	str	r7, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 80008a0:	3501      	adds	r5, #1
 80008a2:	3420      	adds	r4, #32
 80008a4:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80008a8:	42ab      	cmp	r3, r5
 80008aa:	d00b      	beq.n	80008c4 <HAL_ETH_DMATxDescListInit+0x5c>
    dmatxdesc = DMATxDescTab + i;
 80008ac:	4626      	mov	r6, r4
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80008ae:	f8c4 e000 	str.w	lr, [r4]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80008b2:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80008b4:	69c7      	ldr	r7, [r0, #28]
 80008b6:	2f00      	cmp	r7, #0
 80008b8:	d1ec      	bne.n	8000894 <HAL_ETH_DMATxDescListInit+0x2c>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80008ba:	6827      	ldr	r7, [r4, #0]
 80008bc:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 80008c0:	6027      	str	r7, [r4, #0]
 80008c2:	e7e7      	b.n	8000894 <HAL_ETH_DMATxDescListInit+0x2c>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008c4:	6802      	ldr	r2, [r0, #0]
 80008c6:	f241 0310 	movw	r3, #4112	; 0x1010
 80008ca:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008d2:	2300      	movs	r3, #0
 80008d4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008d8:	4618      	mov	r0, r3
}
 80008da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 80008de:	2002      	movs	r0, #2
 80008e0:	e7fb      	b.n	80008da <HAL_ETH_DMATxDescListInit+0x72>

080008e2 <HAL_ETH_DMARxDescListInit>:
{
 80008e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008e6:	468e      	mov	lr, r1
  __HAL_LOCK(heth);
 80008e8:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
 80008ec:	2901      	cmp	r1, #1
 80008ee:	d02f      	beq.n	8000950 <HAL_ETH_DMARxDescListInit+0x6e>
 80008f0:	2101      	movs	r1, #1
 80008f2:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008f6:	2102      	movs	r1, #2
 80008f8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008fc:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8000900:	b1c3      	cbz	r3, 8000934 <HAL_ETH_DMARxDescListInit+0x52>
 8000902:	4674      	mov	r4, lr
 8000904:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000906:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800090a:	f244 51f4 	movw	r1, #17908	; 0x45f4
    if(i < (RxBuffCount-1U))
 800090e:	f103 3cff 	add.w	ip, r3, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000912:	46f1      	mov	r9, lr
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000914:	f8c4 8000 	str.w	r8, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000918:	6061      	str	r1, [r4, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800091a:	60a2      	str	r2, [r4, #8]
    if(i < (RxBuffCount-1U))
 800091c:	45ac      	cmp	ip, r5
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800091e:	bf8c      	ite	hi
 8000920:	f104 0720 	addhi.w	r7, r4, #32
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000924:	464f      	movls	r7, r9
 8000926:	60e7      	str	r7, [r4, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000928:	3501      	adds	r5, #1
 800092a:	3420      	adds	r4, #32
 800092c:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8000930:	42ab      	cmp	r3, r5
 8000932:	d1ef      	bne.n	8000914 <HAL_ETH_DMARxDescListInit+0x32>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000934:	6802      	ldr	r2, [r0, #0]
 8000936:	f241 030c 	movw	r3, #4108	; 0x100c
 800093a:	f842 e003 	str.w	lr, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800093e:	2301      	movs	r3, #1
 8000940:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000944:	2300      	movs	r3, #0
 8000946:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800094a:	4618      	mov	r0, r3
}
 800094c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(heth);
 8000950:	2002      	movs	r0, #2
 8000952:	e7fb      	b.n	800094c <HAL_ETH_DMARxDescListInit+0x6a>

08000954 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000954:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000958:	2b01      	cmp	r3, #1
 800095a:	f000 8086 	beq.w	8000a6a <HAL_ETH_TransmitFrame+0x116>
 800095e:	2301      	movs	r3, #1
 8000960:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000964:	2302      	movs	r3, #2
 8000966:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 800096a:	b1f1      	cbz	r1, 80009aa <HAL_ETH_TransmitFrame+0x56>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800096c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2a00      	cmp	r2, #0
 8000972:	db22      	blt.n	80009ba <HAL_ETH_TransmitFrame+0x66>
{
 8000974:	b4f0      	push	{r4, r5, r6, r7}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000976:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800097a:	4291      	cmp	r1, r2
 800097c:	d927      	bls.n	80009ce <HAL_ETH_TransmitFrame+0x7a>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800097e:	4d3c      	ldr	r5, [pc, #240]	; (8000a70 <HAL_ETH_TransmitFrame+0x11c>)
 8000980:	fba5 2501 	umull	r2, r5, r5, r1
 8000984:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000986:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800098a:	fb02 1215 	mls	r2, r2, r5, r1
 800098e:	b1e2      	cbz	r2, 80009ca <HAL_ETH_TransmitFrame+0x76>
      bufcount++;
 8000990:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000992:	f201 53f4 	addw	r3, r1, #1524	; 0x5f4
 8000996:	4937      	ldr	r1, [pc, #220]	; (8000a74 <HAL_ETH_TransmitFrame+0x120>)
 8000998:	fb01 3105 	mla	r1, r1, r5, r3
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800099c:	f3c1 010c 	ubfx	r1, r1, #0, #13
    for (i=0U; i< bufcount; i++)
 80009a0:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009a2:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80009a6:	1e6f      	subs	r7, r5, #1
 80009a8:	e04c      	b.n	8000a44 <HAL_ETH_TransmitFrame+0xf0>
    heth->State = HAL_ETH_STATE_READY;
 80009aa:	2301      	movs	r3, #1
 80009ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 80009b6:	4618      	mov	r0, r3
 80009b8:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80009ba:	2312      	movs	r3, #18
 80009bc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80009c0:	2300      	movs	r3, #0
 80009c2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 80009c6:	2001      	movs	r0, #1
 80009c8:	4770      	bx	lr
  if (bufcount == 1U)
 80009ca:	2d01      	cmp	r5, #1
 80009cc:	d1e1      	bne.n	8000992 <HAL_ETH_TransmitFrame+0x3e>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009d4:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009d8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009dc:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e6:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009ee:	6803      	ldr	r3, [r0, #0]
 80009f0:	f241 0214 	movw	r2, #4116	; 0x1014
 80009f4:	589a      	ldr	r2, [r3, r2]
 80009f6:	f012 0f04 	tst.w	r2, #4
 80009fa:	d008      	beq.n	8000a0e <HAL_ETH_TransmitFrame+0xba>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009fc:	f241 0214 	movw	r2, #4116	; 0x1014
 8000a00:	2104      	movs	r1, #4
 8000a02:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8000a04:	6802      	ldr	r2, [r0, #0]
 8000a06:	f241 0304 	movw	r3, #4100	; 0x1004
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a14:	2300      	movs	r3, #0
 8000a16:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000a1a:	4618      	mov	r0, r3
}
 8000a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000a1e:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000a20:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a22:	6813      	ldr	r3, [r2, #0]
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6013      	str	r3, [r2, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a2c:	605e      	str	r6, [r3, #4]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000a2e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a36:	6013      	str	r3, [r2, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000a38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	62c3      	str	r3, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a3e:	3401      	adds	r4, #1
 8000a40:	42ac      	cmp	r4, r5
 8000a42:	d0d4      	beq.n	80009ee <HAL_ETH_TransmitFrame+0x9a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000a4c:	6013      	str	r3, [r2, #0]
      if (i == 0U) 
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d0e6      	beq.n	8000a20 <HAL_ETH_TransmitFrame+0xcc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a54:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1U))
 8000a56:	42a7      	cmp	r7, r4
 8000a58:	d1e9      	bne.n	8000a2e <HAL_ETH_TransmitFrame+0xda>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a5a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a5c:	6813      	ldr	r3, [r2, #0]
 8000a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a62:	6013      	str	r3, [r2, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a66:	6059      	str	r1, [r3, #4]
 8000a68:	e7e1      	b.n	8000a2e <HAL_ETH_TransmitFrame+0xda>
  __HAL_LOCK(heth);
 8000a6a:	2002      	movs	r0, #2
}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	ac02b00b 	.word	0xac02b00b
 8000a74:	fffffa0c 	.word	0xfffffa0c

08000a78 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d04a      	beq.n	8000b16 <HAL_ETH_GetReceivedFrame_IT+0x9e>
{
 8000a80:	b410      	push	{r4}
  __HAL_LOCK(heth);
 8000a82:	2301      	movs	r3, #1
 8000a84:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	db35      	blt.n	8000b02 <HAL_ETH_GetReceivedFrame_IT+0x8a>
 8000a96:	2104      	movs	r1, #4
      heth->RxFrameInfos.SegCount = 1U;   
 8000a98:	2401      	movs	r4, #1
 8000a9a:	e009      	b.n	8000ab0 <HAL_ETH_GetReceivedFrame_IT+0x38>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a9c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a9e:	6384      	str	r4, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000aa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	db2a      	blt.n	8000b02 <HAL_ETH_GetReceivedFrame_IT+0x8a>
 8000aac:	3901      	subs	r1, #1
 8000aae:	d028      	beq.n	8000b02 <HAL_ETH_GetReceivedFrame_IT+0x8a>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ab6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000aba:	d0ef      	beq.n	8000a9c <HAL_ETH_GetReceivedFrame_IT+0x24>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000ac2:	d105      	bne.n	8000ad0 <HAL_ETH_GetReceivedFrame_IT+0x58>
      (heth->RxFrameInfos.SegCount)++;
 8000ac4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000ac6:	3201      	adds	r2, #1
 8000ac8:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	6283      	str	r3, [r0, #40]	; 0x28
 8000ace:	e7e9      	b.n	8000aa4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000ad0:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000ad2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000ad4:	3201      	adds	r2, #1
 8000ad6:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000ad8:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ada:	bf08      	it	eq
 8000adc:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ae4:	3a04      	subs	r2, #4
 8000ae6:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ae8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000aea:	6892      	ldr	r2, [r2, #8]
 8000aec:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000af8:	2300      	movs	r3, #0
 8000afa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000afe:	4618      	mov	r0, r3
 8000b00:	e006      	b.n	8000b10 <HAL_ETH_GetReceivedFrame_IT+0x98>
  heth->State = HAL_ETH_STATE_READY;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000b0e:	4618      	mov	r0, r3
}
 8000b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b14:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000b16:	2002      	movs	r0, #2
}
 8000b18:	4770      	bx	lr

08000b1a <HAL_ETH_TxCpltCallback>:
}
 8000b1a:	4770      	bx	lr

08000b1c <HAL_ETH_ErrorCallback>:
}
 8000b1c:	4770      	bx	lr

08000b1e <HAL_ETH_IRQHandler>:
{
 8000b1e:	b510      	push	{r4, lr}
 8000b20:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000b22:	6803      	ldr	r3, [r0, #0]
 8000b24:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b28:	589a      	ldr	r2, [r3, r2]
 8000b2a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000b2e:	d111      	bne.n	8000b54 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000b30:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b34:	589b      	ldr	r3, [r3, r2]
 8000b36:	f013 0f01 	tst.w	r3, #1
 8000b3a:	d119      	bne.n	8000b70 <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b46:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b48:	6822      	ldr	r2, [r4, #0]
 8000b4a:	58d3      	ldr	r3, [r2, r3]
 8000b4c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b50:	d11b      	bne.n	8000b8a <HAL_ETH_IRQHandler+0x6c>
}
 8000b52:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b54:	f028 fccc 	bl	80294f0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b5e:	2140      	movs	r1, #64	; 0x40
 8000b60:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b62:	2301      	movs	r3, #1
 8000b64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b6e:	e7e5      	b.n	8000b3c <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b70:	f7ff ffd3 	bl	8000b1a <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b7c:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b82:	2300      	movs	r3, #0
 8000b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b88:	e7d8      	b.n	8000b3c <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f7ff ffc6 	bl	8000b1c <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b90:	6822      	ldr	r2, [r4, #0]
 8000b92:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ba8:	e7d3      	b.n	8000b52 <HAL_ETH_IRQHandler+0x34>

08000baa <HAL_ETH_ReadPHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000baa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b82      	cmp	r3, #130	; 0x82
 8000bb2:	d032      	beq.n	8000c1a <HAL_ETH_ReadPHYRegister+0x70>
{
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4615      	mov	r5, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000bba:	2382      	movs	r3, #130	; 0x82
 8000bbc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bc0:	6800      	ldr	r0, [r0, #0]
 8000bc2:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bc4:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bc8:	8a23      	ldrh	r3, [r4, #16]
 8000bca:	02db      	lsls	r3, r3, #11
 8000bcc:	b29b      	uxth	r3, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000bce:	0189      	lsls	r1, r1, #6
 8000bd0:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bdc:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8000bde:	f7ff fd11 	bl	8000604 <HAL_GetTick>
 8000be2:	4606      	mov	r6, r0
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000be4:	f7ff fd0e 	bl	8000604 <HAL_GetTick>
 8000be8:	1b83      	subs	r3, r0, r6
 8000bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bee:	d20c      	bcs.n	8000c0a <HAL_ETH_ReadPHYRegister+0x60>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	6919      	ldr	r1, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bf4:	f011 0f01 	tst.w	r1, #1
 8000bf8:	d1f4      	bne.n	8000be4 <HAL_ETH_ReadPHYRegister+0x3a>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000c06:	2000      	movs	r0, #0
}
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
      heth->State= HAL_ETH_STATE_READY;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c10:	2300      	movs	r3, #0
 8000c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c16:	2003      	movs	r0, #3
 8000c18:	e7f6      	b.n	8000c08 <HAL_ETH_ReadPHYRegister+0x5e>
    return HAL_BUSY;
 8000c1a:	2002      	movs	r0, #2
}
 8000c1c:	4770      	bx	lr

08000c1e <HAL_ETH_WritePHYRegister>:
{
 8000c1e:	b538      	push	{r3, r4, r5, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000c20:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b42      	cmp	r3, #66	; 0x42
 8000c28:	d030      	beq.n	8000c8c <HAL_ETH_WritePHYRegister+0x6e>
 8000c2a:	4604      	mov	r4, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c2c:	2342      	movs	r3, #66	; 0x42
 8000c2e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c32:	6805      	ldr	r5, [r0, #0]
 8000c34:	6928      	ldr	r0, [r5, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c36:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c3a:	8a23      	ldrh	r3, [r4, #16]
 8000c3c:	02db      	lsls	r3, r3, #11
 8000c3e:	b29b      	uxth	r3, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c40:	0189      	lsls	r1, r1, #6
 8000c42:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c46:	430b      	orrs	r3, r1
 8000c48:	4303      	orrs	r3, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c4a:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	616a      	str	r2, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c52:	6822      	ldr	r2, [r4, #0]
 8000c54:	6113      	str	r3, [r2, #16]
  tickstart = HAL_GetTick();
 8000c56:	f7ff fcd5 	bl	8000604 <HAL_GetTick>
 8000c5a:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c5c:	f7ff fcd2 	bl	8000604 <HAL_GetTick>
 8000c60:	1b43      	subs	r3, r0, r5
 8000c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c66:	d209      	bcs.n	8000c7c <HAL_ETH_WritePHYRegister+0x5e>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c6c:	f013 0f01 	tst.w	r3, #1
 8000c70:	d1f4      	bne.n	8000c5c <HAL_ETH_WritePHYRegister+0x3e>
  heth->State = HAL_ETH_STATE_READY;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK; 
 8000c78:	2000      	movs	r0, #0
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
      heth->State= HAL_ETH_STATE_READY;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c82:	2300      	movs	r3, #0
 8000c84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c88:	2003      	movs	r0, #3
 8000c8a:	e7f6      	b.n	8000c7a <HAL_ETH_WritePHYRegister+0x5c>
    return HAL_BUSY;
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	e7f4      	b.n	8000c7a <HAL_ETH_WritePHYRegister+0x5c>

08000c90 <HAL_ETH_Init>:
{
 8000c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c94:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	f000 810c 	beq.w	8000eb8 <HAL_ETH_Init+0x228>
 8000ca0:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ca2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d035      	beq.n	8000d16 <HAL_ETH_Init+0x86>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4b83      	ldr	r3, [pc, #524]	; (8000ebc <HAL_ETH_Init+0x22c>)
 8000cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cc2:	4b7f      	ldr	r3, [pc, #508]	; (8000ec0 <HAL_ETH_Init+0x230>)
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000cca:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	6a21      	ldr	r1, [r4, #32]
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f042 0201 	orr.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000ce2:	f7ff fc8f 	bl	8000604 <HAL_GetTick>
 8000ce6:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	f012 0f01 	tst.w	r2, #1
 8000cf4:	d014      	beq.n	8000d20 <HAL_ETH_Init+0x90>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cf6:	f7ff fc85 	bl	8000604 <HAL_GetTick>
 8000cfa:	1b40      	subs	r0, r0, r5
 8000cfc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000d00:	d9f2      	bls.n	8000ce8 <HAL_ETH_Init+0x58>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d02:	2503      	movs	r5, #3
 8000d04:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000d0e:	4628      	mov	r0, r5
 8000d10:	b002      	add	sp, #8
 8000d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    heth->Lock = HAL_UNLOCKED;
 8000d16:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000d1a:	f028 fb51 	bl	80293c0 <HAL_ETH_MspInit>
 8000d1e:	e7c4      	b.n	8000caa <HAL_ETH_Init+0x1a>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d20:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000d22:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000d26:	f000 fe15 	bl	8001954 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <HAL_ETH_Init+0x234>)
 8000d2c:	4403      	add	r3, r0
 8000d2e:	4a66      	ldr	r2, [pc, #408]	; (8000ec8 <HAL_ETH_Init+0x238>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d25b      	bcs.n	8000dec <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d34:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d40:	2100      	movs	r1, #0
 8000d42:	4620      	mov	r0, r4
 8000d44:	f7ff ff6b 	bl	8000c1e <HAL_ETH_WritePHYRegister>
 8000d48:	4605      	mov	r5, r0
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d165      	bne.n	8000e1a <HAL_ETH_Init+0x18a>
  HAL_Delay(PHY_RESET_DELAY);
 8000d4e:	20ff      	movs	r0, #255	; 0xff
 8000d50:	f7ff fc5e 	bl	8000610 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 808f 	beq.w	8000e7a <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d5c:	f7ff fc52 	bl	8000604 <HAL_GetTick>
 8000d60:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d62:	f04f 0801 	mov.w	r8, #1
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d66:	f241 3788 	movw	r7, #5000	; 0x1388
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d6a:	aa01      	add	r2, sp, #4
 8000d6c:	4641      	mov	r1, r8
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff ff1b 	bl	8000baa <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d74:	f7ff fc46 	bl	8000604 <HAL_GetTick>
 8000d78:	1b80      	subs	r0, r0, r6
 8000d7a:	42b8      	cmp	r0, r7
 8000d7c:	d855      	bhi.n	8000e2a <HAL_ETH_Init+0x19a>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d7e:	9b01      	ldr	r3, [sp, #4]
 8000d80:	f013 0f04 	tst.w	r3, #4
 8000d84:	d0f1      	beq.n	8000d6a <HAL_ETH_Init+0xda>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff ff46 	bl	8000c1e <HAL_ETH_WritePHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d155      	bne.n	8000e42 <HAL_ETH_Init+0x1b2>
    tickstart = HAL_GetTick();
 8000d96:	f7ff fc35 	bl	8000604 <HAL_GetTick>
 8000d9a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d9c:	f04f 0801 	mov.w	r8, #1
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000da0:	f241 3788 	movw	r7, #5000	; 0x1388
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000da4:	aa01      	add	r2, sp, #4
 8000da6:	4641      	mov	r1, r8
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff fefe 	bl	8000baa <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000dae:	f7ff fc29 	bl	8000604 <HAL_GetTick>
 8000db2:	1b80      	subs	r0, r0, r6
 8000db4:	42b8      	cmp	r0, r7
 8000db6:	d84c      	bhi.n	8000e52 <HAL_ETH_Init+0x1c2>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000db8:	9b01      	ldr	r3, [sp, #4]
 8000dba:	f013 0f20 	tst.w	r3, #32
 8000dbe:	d0f1      	beq.n	8000da4 <HAL_ETH_Init+0x114>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000dc0:	aa01      	add	r2, sp, #4
 8000dc2:	211f      	movs	r1, #31
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f7ff fef0 	bl	8000baa <HAL_ETH_ReadPHYRegister>
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d14d      	bne.n	8000e6a <HAL_ETH_Init+0x1da>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000dce:	9b01      	ldr	r3, [sp, #4]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000dd0:	f013 0210 	ands.w	r2, r3, #16
 8000dd4:	bf18      	it	ne
 8000dd6:	f44f 6200 	movne.w	r2, #2048	; 0x800
 8000dda:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ddc:	f013 0f04 	tst.w	r3, #4
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000de0:	bf14      	ite	ne
 8000de2:	2300      	movne	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000de4:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000de8:	60a3      	str	r3, [r4, #8]
 8000dea:	e055      	b.n	8000e98 <HAL_ETH_Init+0x208>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <HAL_ETH_Init+0x23c>)
 8000dee:	4403      	add	r3, r0
 8000df0:	4a37      	ldr	r2, [pc, #220]	; (8000ed0 <HAL_ETH_Init+0x240>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d802      	bhi.n	8000dfc <HAL_ETH_Init+0x16c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000df6:	f045 050c 	orr.w	r5, r5, #12
 8000dfa:	e79d      	b.n	8000d38 <HAL_ETH_Init+0xa8>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <HAL_ETH_Init+0x244>)
 8000dfe:	4403      	add	r3, r0
 8000e00:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <HAL_ETH_Init+0x248>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d398      	bcc.n	8000d38 <HAL_ETH_Init+0xa8>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <HAL_ETH_Init+0x24c>)
 8000e08:	4403      	add	r3, r0
 8000e0a:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <HAL_ETH_Init+0x250>)
 8000e0c:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e0e:	bf94      	ite	ls
 8000e10:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e14:	f045 0510 	orrhi.w	r5, r5, #16
 8000e18:	e78e      	b.n	8000d38 <HAL_ETH_Init+0xa8>
    ETH_MACDMAConfig(heth, err);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff fc8b 	bl	8000738 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000e22:	2501      	movs	r5, #1
 8000e24:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000e28:	e771      	b.n	8000d0e <HAL_ETH_Init+0x7e>
        ETH_MACDMAConfig(heth, err);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fc83 	bl	8000738 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e3e:	2503      	movs	r5, #3
 8000e40:	e765      	b.n	8000d0e <HAL_ETH_Init+0x7e>
      ETH_MACDMAConfig(heth, err);
 8000e42:	2101      	movs	r1, #1
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff fc77 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e50:	e75d      	b.n	8000d0e <HAL_ETH_Init+0x7e>
        ETH_MACDMAConfig(heth, err);
 8000e52:	2101      	movs	r1, #1
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff fc6f 	bl	8000738 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e60:	2300      	movs	r3, #0
 8000e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e66:	2503      	movs	r5, #3
 8000e68:	e751      	b.n	8000d0e <HAL_ETH_Init+0x7e>
      ETH_MACDMAConfig(heth, err);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff fc63 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e72:	2501      	movs	r5, #1
 8000e74:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e78:	e749      	b.n	8000d0e <HAL_ETH_Init+0x7e>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e7a:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e7c:	68a3      	ldr	r3, [r4, #8]
 8000e7e:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e80:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000e84:	b292      	uxth	r2, r2
 8000e86:	2100      	movs	r1, #0
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fec8 	bl	8000c1e <HAL_ETH_WritePHYRegister>
 8000e8e:	b958      	cbnz	r0, 8000ea8 <HAL_ETH_Init+0x218>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e90:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e94:	f7ff fbbc 	bl	8000610 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f7ff fc4c 	bl	8000738 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000ea6:	e732      	b.n	8000d0e <HAL_ETH_Init+0x7e>
      ETH_MACDMAConfig(heth, err);
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f7ff fc44 	bl	8000738 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000eb0:	2501      	movs	r5, #1
 8000eb2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000eb6:	e72a      	b.n	8000d0e <HAL_ETH_Init+0x7e>
    return HAL_ERROR;
 8000eb8:	2501      	movs	r5, #1
 8000eba:	e728      	b.n	8000d0e <HAL_ETH_Init+0x7e>
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	feced300 	.word	0xfeced300
 8000ec8:	00e4e1c0 	.word	0x00e4e1c0
 8000ecc:	fde9f140 	.word	0xfde9f140
 8000ed0:	017d783f 	.word	0x017d783f
 8000ed4:	fc6c7900 	.word	0xfc6c7900
 8000ed8:	02625a00 	.word	0x02625a00
 8000edc:	fa0a1f00 	.word	0xfa0a1f00
 8000ee0:	02faf07f 	.word	0x02faf07f

08000ee4 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000ee4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d03d      	beq.n	8000f68 <HAL_ETH_Start+0x84>
{  
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ef2:	2601      	movs	r6, #1
 8000ef4:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000efe:	2500      	movs	r5, #0
 8000f00:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000f02:	6802      	ldr	r2, [r0, #0]
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f12:	4630      	mov	r0, r6
 8000f14:	f7ff fbe2 	bl	80006dc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000f1e:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000f20:	6822      	ldr	r2, [r4, #0]
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f30:	4630      	mov	r0, r6
 8000f32:	f7ff fbd3 	bl	80006dc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	9a00      	ldr	r2, [sp, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff fbe3 	bl	8000708 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000f42:	6821      	ldr	r1, [r4, #0]
 8000f44:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f48:	58ca      	ldr	r2, [r1, r3]
 8000f4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f4e:	50ca      	str	r2, [r1, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000f50:	6821      	ldr	r1, [r4, #0]
 8000f52:	58ca      	ldr	r2, [r1, r3]
 8000f54:	f042 0202 	orr.w	r2, r2, #2
 8000f58:	50ca      	str	r2, [r1, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000f5a:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000f5e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  return HAL_OK;
 8000f62:	4628      	mov	r0, r5
}
 8000f64:	b002      	add	sp, #8
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8000f68:	2002      	movs	r0, #2
}
 8000f6a:	4770      	bx	lr

08000f6c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8000f6c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d03d      	beq.n	8000ff0 <HAL_ETH_Stop+0x84>
{  
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000f7a:	2601      	movs	r6, #1
 8000f7c:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8000f86:	6801      	ldr	r1, [r0, #0]
 8000f88:	f241 0318 	movw	r3, #4120	; 0x1018
 8000f8c:	58ca      	ldr	r2, [r1, r3]
 8000f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f92:	50ca      	str	r2, [r1, r3]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8000f94:	6801      	ldr	r1, [r0, #0]
 8000f96:	58ca      	ldr	r2, [r1, r3]
 8000f98:	f022 0202 	bic.w	r2, r2, #2
 8000f9c:	50ca      	str	r2, [r1, r3]
  __IO uint32_t tmpreg1 = 0U;
 8000f9e:	2500      	movs	r5, #0
 8000fa0:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8000fa2:	6802      	ldr	r2, [r0, #0]
 8000fa4:	6813      	ldr	r3, [r2, #0]
 8000fa6:	f023 0304 	bic.w	r3, r3, #4
 8000faa:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fac:	6803      	ldr	r3, [r0, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f7ff fb92 	bl	80006dc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	9a01      	ldr	r2, [sp, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f7ff fba2 	bl	8000708 <ETH_FlushTransmitFIFO>
  __IO uint32_t tmpreg1 = 0U;
 8000fc4:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 0308 	bic.w	r3, r3, #8
 8000fce:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fd0:	6823      	ldr	r3, [r4, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f7ff fb80 	bl	80006dc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	9a00      	ldr	r2, [sp, #0]
 8000fe0:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000fe2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000fe6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  return HAL_OK;
 8000fea:	4628      	mov	r0, r5
}
 8000fec:	b002      	add	sp, #8
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8000ff0:	2002      	movs	r0, #2
}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8000ff4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f000 808e 	beq.w	800111a <HAL_ETH_ConfigMAC+0x126>
{
 8000ffe:	b570      	push	{r4, r5, r6, lr}
 8001000:	4605      	mov	r5, r0
 8001002:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8001004:	2301      	movs	r3, #1
 8001006:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800100a:	2302      	movs	r3, #2
 800100c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 8001010:	2900      	cmp	r1, #0
 8001012:	d071      	beq.n	80010f8 <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 8001014:	6802      	ldr	r2, [r0, #0]
 8001016:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001018:	4941      	ldr	r1, [pc, #260]	; (8001120 <HAL_ETH_ConfigMAC+0x12c>)
 800101a:	4019      	ands	r1, r3
                         macconf->BackOffLimit | 
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	6860      	ldr	r0, [r4, #4]
 8001020:	4303      	orrs	r3, r0
 8001022:	68a0      	ldr	r0, [r4, #8]
 8001024:	4303      	orrs	r3, r0
 8001026:	68e0      	ldr	r0, [r4, #12]
 8001028:	4303      	orrs	r3, r0
 800102a:	6920      	ldr	r0, [r4, #16]
 800102c:	4303      	orrs	r3, r0
 800102e:	6960      	ldr	r0, [r4, #20]
 8001030:	4303      	orrs	r3, r0
 8001032:	69a0      	ldr	r0, [r4, #24]
 8001034:	4303      	orrs	r3, r0
 8001036:	69e0      	ldr	r0, [r4, #28]
 8001038:	4303      	orrs	r3, r0
 800103a:	6a20      	ldr	r0, [r4, #32]
 800103c:	4303      	orrs	r3, r0
 800103e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001040:	4303      	orrs	r3, r0
 8001042:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001044:	4303      	orrs	r3, r0
 8001046:	68a8      	ldr	r0, [r5, #8]
 8001048:	4303      	orrs	r3, r0
 800104a:	68e8      	ldr	r0, [r5, #12]
 800104c:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800104e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001050:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001052:	682b      	ldr	r3, [r5, #0]
 8001054:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff fada 	bl	8000610 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800105c:	682b      	ldr	r3, [r5, #0]
 800105e:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001060:	682a      	ldr	r2, [r5, #0]
 8001062:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001064:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001066:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8001068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800106a:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800106c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800106e:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8001070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001072:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8001074:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001076:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 8001078:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800107a:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800107c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800107e:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001080:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fac2 	bl	8000610 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001094:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800109a:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 800109c:	6829      	ldr	r1, [r5, #0]
 800109e:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80010a0:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80010a4:	0412      	lsls	r2, r2, #16
 80010a6:	0c12      	lsrs	r2, r2, #16
                          macconf->ReceiveFlowControl |
 80010a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010aa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80010ac:	4303      	orrs	r3, r0
 80010ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80010b0:	4303      	orrs	r3, r0
 80010b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80010b4:	4303      	orrs	r3, r0
 80010b6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80010b8:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80010ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 80010bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80010c0:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80010c2:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f7ff faa1 	bl	8000610 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80010ce:	682b      	ldr	r3, [r5, #0]
 80010d0:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80010d2:	682a      	ldr	r2, [r5, #0]
 80010d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80010d6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80010d8:	430b      	orrs	r3, r1
 80010da:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fa95 	bl	8000610 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 80010f6:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 80010f8:	6801      	ldr	r1, [r0, #0]
 80010fa:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 80010fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001100:	6883      	ldr	r3, [r0, #8]
 8001102:	68c0      	ldr	r0, [r0, #12]
 8001104:	4303      	orrs	r3, r0
 8001106:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001108:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800110a:	682b      	ldr	r3, [r5, #0]
 800110c:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff fa7e 	bl	8000610 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	601c      	str	r4, [r3, #0]
 8001118:	e7e7      	b.n	80010ea <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 800111a:	2002      	movs	r0, #2
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	ff20810f 	.word	0xff20810f

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001128:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112c:	4f76      	ldr	r7, [pc, #472]	; (8001308 <HAL_GPIO_Init+0x1e4>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 8001314 <HAL_GPIO_Init+0x1f0>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001132:	4e76      	ldr	r6, [pc, #472]	; (800130c <HAL_GPIO_Init+0x1e8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001134:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8001318 <HAL_GPIO_Init+0x1f4>
 8001138:	e046      	b.n	80011c8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800113a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800113e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001142:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	f003 0407 	and.w	r4, r3, #7
 800114a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800114e:	240f      	movs	r4, #15
 8001150:	fa04 f40b 	lsl.w	r4, r4, fp
 8001154:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001158:	690c      	ldr	r4, [r1, #16]
 800115a:	fa04 f40b 	lsl.w	r4, r4, fp
 800115e:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001162:	f8c9 4020 	str.w	r4, [r9, #32]
 8001166:	e06c      	b.n	8001242 <HAL_GPIO_Init+0x11e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001168:	2400      	movs	r4, #0
 800116a:	fa04 f409 	lsl.w	r4, r4, r9
 800116e:	ea44 040a 	orr.w	r4, r4, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001172:	6094      	str	r4, [r2, #8]
        temp = EXTI->IMR;
 8001174:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001176:	ea6f 0805 	mvn.w	r8, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117a:	684c      	ldr	r4, [r1, #4]
 800117c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001180:	bf0c      	ite	eq
 8001182:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001186:	432a      	orrne	r2, r5
        }
        EXTI->IMR = temp;
 8001188:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 800118a:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	684c      	ldr	r4, [r1, #4]
 800118e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001192:	bf0c      	ite	eq
 8001194:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 8001198:	432a      	orrne	r2, r5
        }
        EXTI->EMR = temp;
 800119a:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119c:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119e:	684c      	ldr	r4, [r1, #4]
 80011a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011a4:	bf0c      	ite	eq
 80011a6:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80011aa:	432a      	orrne	r2, r5
        }
        EXTI->RTSR = temp;
 80011ac:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80011ae:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b0:	684c      	ldr	r4, [r1, #4]
 80011b2:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80011b6:	bf0c      	ite	eq
 80011b8:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80011bc:	432a      	orrne	r2, r5
        }
        EXTI->FTSR = temp;
 80011be:	60f2      	str	r2, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c0:	3301      	adds	r3, #1
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	f000 809d 	beq.w	8001302 <HAL_GPIO_Init+0x1de>
    ioposition = 0x01U << position;
 80011c8:	2201      	movs	r2, #1
 80011ca:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011cc:	680c      	ldr	r4, [r1, #0]
 80011ce:	ea02 0504 	and.w	r5, r2, r4
    if(iocurrent == ioposition)
 80011d2:	ea32 0404 	bics.w	r4, r2, r4
 80011d6:	d1f3      	bne.n	80011c0 <HAL_GPIO_Init+0x9c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d8:	684c      	ldr	r4, [r1, #4]
 80011da:	f024 0410 	bic.w	r4, r4, #16
 80011de:	3c01      	subs	r4, #1
 80011e0:	2c01      	cmp	r4, #1
 80011e2:	d818      	bhi.n	8001216 <HAL_GPIO_Init+0xf2>
        temp = GPIOx->OSPEEDR; 
 80011e4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80011ea:	f04f 0803 	mov.w	r8, #3
 80011ee:	fa08 f809 	lsl.w	r8, r8, r9
 80011f2:	ea24 0808 	bic.w	r8, r4, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	68cc      	ldr	r4, [r1, #12]
 80011f8:	fa04 f409 	lsl.w	r4, r4, r9
 80011fc:	ea44 0408 	orr.w	r4, r4, r8
        GPIOx->OSPEEDR = temp;
 8001200:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001202:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	ea24 0802 	bic.w	r8, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001208:	684c      	ldr	r4, [r1, #4]
 800120a:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 8001214:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001216:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800121e:	2403      	movs	r4, #3
 8001220:	fa04 f408 	lsl.w	r4, r4, r8
 8001224:	43e2      	mvns	r2, r4
 8001226:	ea29 0904 	bic.w	r9, r9, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	688c      	ldr	r4, [r1, #8]
 800122c:	fa04 f408 	lsl.w	r4, r4, r8
 8001230:	ea44 0409 	orr.w	r4, r4, r9
      GPIOx->PUPDR = temp;
 8001234:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001236:	684c      	ldr	r4, [r1, #4]
 8001238:	f024 0410 	bic.w	r4, r4, #16
 800123c:	2c02      	cmp	r4, #2
 800123e:	f43f af7c 	beq.w	800113a <HAL_GPIO_Init+0x16>
      temp = GPIOx->MODER;
 8001242:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001244:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001246:	684a      	ldr	r2, [r1, #4]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	fa02 f208 	lsl.w	r2, r2, r8
 8001250:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001252:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001254:	684a      	ldr	r2, [r1, #4]
 8001256:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800125a:	d0b1      	beq.n	80011c0 <HAL_GPIO_Init+0x9c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	2200      	movs	r2, #0
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001266:	647a      	str	r2, [r7, #68]	; 0x44
 8001268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800126a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	f023 0203 	bic.w	r2, r3, #3
 8001276:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800127a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800127e:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001282:	f003 0403 	and.w	r4, r3, #3
 8001286:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800128a:	240f      	movs	r4, #15
 800128c:	fa04 f409 	lsl.w	r4, r4, r9
 8001290:	ea2a 0a04 	bic.w	sl, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001294:	4560      	cmp	r0, ip
 8001296:	f43f af67 	beq.w	8001168 <HAL_GPIO_Init+0x44>
 800129a:	4570      	cmp	r0, lr
 800129c:	d021      	beq.n	80012e2 <HAL_GPIO_Init+0x1be>
 800129e:	4c1c      	ldr	r4, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x1ec>)
 80012a0:	42a0      	cmp	r0, r4
 80012a2:	d020      	beq.n	80012e6 <HAL_GPIO_Init+0x1c2>
 80012a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012a8:	42a0      	cmp	r0, r4
 80012aa:	d01e      	beq.n	80012ea <HAL_GPIO_Init+0x1c6>
 80012ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012b0:	42a0      	cmp	r0, r4
 80012b2:	d01c      	beq.n	80012ee <HAL_GPIO_Init+0x1ca>
 80012b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012b8:	42a0      	cmp	r0, r4
 80012ba:	d01a      	beq.n	80012f2 <HAL_GPIO_Init+0x1ce>
 80012bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012c0:	42a0      	cmp	r0, r4
 80012c2:	d018      	beq.n	80012f6 <HAL_GPIO_Init+0x1d2>
 80012c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	d016      	beq.n	80012fa <HAL_GPIO_Init+0x1d6>
 80012cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012d0:	42a0      	cmp	r0, r4
 80012d2:	d014      	beq.n	80012fe <HAL_GPIO_Init+0x1da>
 80012d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80012d8:	42a0      	cmp	r0, r4
 80012da:	bf0c      	ite	eq
 80012dc:	2409      	moveq	r4, #9
 80012de:	240a      	movne	r4, #10
 80012e0:	e743      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012e2:	2401      	movs	r4, #1
 80012e4:	e741      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012e6:	2402      	movs	r4, #2
 80012e8:	e73f      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012ea:	2403      	movs	r4, #3
 80012ec:	e73d      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012ee:	2404      	movs	r4, #4
 80012f0:	e73b      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012f2:	2405      	movs	r4, #5
 80012f4:	e739      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012f6:	2406      	movs	r4, #6
 80012f8:	e737      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012fa:	2407      	movs	r4, #7
 80012fc:	e735      	b.n	800116a <HAL_GPIO_Init+0x46>
 80012fe:	2408      	movs	r4, #8
 8001300:	e733      	b.n	800116a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001302:	b003      	add	sp, #12
 8001304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40013c00 	.word	0x40013c00
 8001310:	40020800 	.word	0x40020800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400

0800131c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	b10a      	cbz	r2, 8001322 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	6181      	str	r1, [r0, #24]
 8001320:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001322:	0409      	lsls	r1, r1, #16
 8001324:	6181      	str	r1, [r0, #24]
  }
}
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001328:	6943      	ldr	r3, [r0, #20]
 800132a:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800132e:	bf08      	it	eq
 8001330:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001332:	6181      	str	r1, [r0, #24]
  }
}
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	2800      	cmp	r0, #0
 800133a:	f000 81db 	beq.w	80016f4 <HAL_RCC_OscConfig+0x3bc>
{
 800133e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	6803      	ldr	r3, [r0, #0]
 8001348:	f013 0f01 	tst.w	r3, #1
 800134c:	d03b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800134e:	4ba7      	ldr	r3, [pc, #668]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d02c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135a:	4ba4      	ldr	r3, [pc, #656]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d021      	beq.n	80013aa <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d04f      	beq.n	800140e <HAL_RCC_OscConfig+0xd6>
 800136e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001372:	d052      	beq.n	800141a <HAL_RCC_OscConfig+0xe2>
 8001374:	4b9d      	ldr	r3, [pc, #628]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001384:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d050      	beq.n	800142e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff f93a 	bl	8000604 <HAL_GetTick>
 8001390:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4e96      	ldr	r6, [pc, #600]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001394:	6833      	ldr	r3, [r6, #0]
 8001396:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800139a:	d114      	bne.n	80013c6 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff f932 	bl	8000604 <HAL_GetTick>
 80013a0:	1b40      	subs	r0, r0, r5
 80013a2:	2864      	cmp	r0, #100	; 0x64
 80013a4:	d9f6      	bls.n	8001394 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e1ab      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b90      	ldr	r3, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80013b2:	d0d8      	beq.n	8001366 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	4b8d      	ldr	r3, [pc, #564]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_OscConfig+0x8e>
 80013be:	6863      	ldr	r3, [r4, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8199 	beq.w	80016f8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f013 0f02 	tst.w	r3, #2
 80013cc:	d054      	beq.n	8001478 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b87      	ldr	r3, [pc, #540]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f013 0f0c 	tst.w	r3, #12
 80013d6:	d03e      	beq.n	8001456 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d033      	beq.n	800144c <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e4:	68e3      	ldr	r3, [r4, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d067      	beq.n	80014ba <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ea:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x2b8>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f908 	bl	8000604 <HAL_GetTick>
 80013f4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4e7d      	ldr	r6, [pc, #500]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80013f8:	6833      	ldr	r3, [r6, #0]
 80013fa:	f013 0f02 	tst.w	r3, #2
 80013fe:	d153      	bne.n	80014a8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff f900 	bl	8000604 <HAL_GetTick>
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	2802      	cmp	r0, #2
 8001408:	d9f6      	bls.n	80013f8 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800140a:	2003      	movs	r0, #3
 800140c:	e179      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001410:	6813      	ldr	r3, [r2, #0]
 8001412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e7b5      	b.n	8001386 <HAL_RCC_OscConfig+0x4e>
 800141a:	4b74      	ldr	r3, [pc, #464]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e7ab      	b.n	8001386 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800142e:	f7ff f8e9 	bl	8000604 <HAL_GetTick>
 8001432:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001434:	4e6d      	ldr	r6, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001436:	6833      	ldr	r3, [r6, #0]
 8001438:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800143c:	d0c3      	beq.n	80013c6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff f8e1 	bl	8000604 <HAL_GetTick>
 8001442:	1b40      	subs	r0, r0, r5
 8001444:	2864      	cmp	r0, #100	; 0x64
 8001446:	d9f6      	bls.n	8001436 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8001448:	2003      	movs	r0, #3
 800144a:	e15a      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144c:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001454:	d1c6      	bne.n	80013e4 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f013 0f02 	tst.w	r3, #2
 800145e:	d003      	beq.n	8001468 <HAL_RCC_OscConfig+0x130>
 8001460:	68e3      	ldr	r3, [r4, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	f040 814a 	bne.w	80016fc <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4a60      	ldr	r2, [pc, #384]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	6921      	ldr	r1, [r4, #16]
 800146e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001472:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001476:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f013 0f08 	tst.w	r3, #8
 800147e:	d040      	beq.n	8001502 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001480:	6963      	ldr	r3, [r4, #20]
 8001482:	b363      	cbz	r3, 80014de <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001484:	4b5b      	ldr	r3, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x2bc>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7ff f8bb 	bl	8000604 <HAL_GetTick>
 800148e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001490:	4e56      	ldr	r6, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001492:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001494:	f013 0f02 	tst.w	r3, #2
 8001498:	d133      	bne.n	8001502 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff f8b3 	bl	8000604 <HAL_GetTick>
 800149e:	1b40      	subs	r0, r0, r5
 80014a0:	2802      	cmp	r0, #2
 80014a2:	d9f6      	bls.n	8001492 <HAL_RCC_OscConfig+0x15a>
        {
          return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
 80014a6:	e12c      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4a50      	ldr	r2, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	6921      	ldr	r1, [r4, #16]
 80014ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e7de      	b.n	8001478 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <HAL_RCC_OscConfig+0x2b8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c0:	f7ff f8a0 	bl	8000604 <HAL_GetTick>
 80014c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4e49      	ldr	r6, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80014c8:	6833      	ldr	r3, [r6, #0]
 80014ca:	f013 0f02 	tst.w	r3, #2
 80014ce:	d0d3      	beq.n	8001478 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff f898 	bl	8000604 <HAL_GetTick>
 80014d4:	1b40      	subs	r0, r0, r5
 80014d6:	2802      	cmp	r0, #2
 80014d8:	d9f6      	bls.n	80014c8 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
 80014dc:	e111      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_RCC_OscConfig+0x2bc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f88e 	bl	8000604 <HAL_GetTick>
 80014e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ea:	4e40      	ldr	r6, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80014ec:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80014ee:	f013 0f02 	tst.w	r3, #2
 80014f2:	d006      	beq.n	8001502 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff f886 	bl	8000604 <HAL_GetTick>
 80014f8:	1b40      	subs	r0, r0, r5
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9f6      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80014fe:	2003      	movs	r0, #3
 8001500:	e0ff      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f013 0f04 	tst.w	r3, #4
 8001508:	d079      	beq.n	80015fe <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x1f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 800151a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800152c:	2501      	movs	r5, #1
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x1fa>
    FlagStatus       pwrclkchanged = RESET;
 8001530:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x2c0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f413 7f80 	tst.w	r3, #256	; 0x100
 800153a:	d021      	beq.n	8001580 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	68a3      	ldr	r3, [r4, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d032      	beq.n	80015a8 <HAL_RCC_OscConfig+0x270>
 8001542:	2b05      	cmp	r3, #5
 8001544:	d036      	beq.n	80015b4 <HAL_RCC_OscConfig+0x27c>
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 8001548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	671a      	str	r2, [r3, #112]	; 0x70
 8001550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	68a3      	ldr	r3, [r4, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d034      	beq.n	80015c8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff f851 	bl	8000604 <HAL_GetTick>
 8001562:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4f21      	ldr	r7, [pc, #132]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800156c:	f013 0f02 	tst.w	r3, #2
 8001570:	d144      	bne.n	80015fc <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff f847 	bl	8000604 <HAL_GetTick>
 8001576:	1b80      	subs	r0, r0, r6
 8001578:	4540      	cmp	r0, r8
 800157a:	d9f6      	bls.n	800156a <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 800157c:	2003      	movs	r0, #3
 800157e:	e0c0      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_RCC_OscConfig+0x2c0>)
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800158a:	f7ff f83b 	bl	8000604 <HAL_GetTick>
 800158e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4f19      	ldr	r7, [pc, #100]	; (80015f8 <HAL_RCC_OscConfig+0x2c0>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001598:	d1d0      	bne.n	800153c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff f833 	bl	8000604 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	2802      	cmp	r0, #2
 80015a2:	d9f6      	bls.n	8001592 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80015a4:	2003      	movs	r0, #3
 80015a6:	e0ac      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80015aa:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e7d1      	b.n	8001558 <HAL_RCC_OscConfig+0x220>
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
 80015b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015b8:	f042 0204 	orr.w	r2, r2, #4
 80015bc:	671a      	str	r2, [r3, #112]	; 0x70
 80015be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	671a      	str	r2, [r3, #112]	; 0x70
 80015c6:	e7c7      	b.n	8001558 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff f81c 	bl	8000604 <HAL_GetTick>
 80015cc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	4f07      	ldr	r7, [pc, #28]	; (80015ec <HAL_RCC_OscConfig+0x2b4>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d6:	f013 0f02 	tst.w	r3, #2
 80015da:	d00f      	beq.n	80015fc <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015dc:	f7ff f812 	bl	8000604 <HAL_GetTick>
 80015e0:	1b80      	subs	r0, r0, r6
 80015e2:	4540      	cmp	r0, r8
 80015e4:	d9f6      	bls.n	80015d4 <HAL_RCC_OscConfig+0x29c>
        {
          return HAL_TIMEOUT;
 80015e6:	2003      	movs	r0, #3
 80015e8:	e08b      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
 80015f8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015fc:	b9e5      	cbnz	r5, 8001638 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fe:	69a3      	ldr	r3, [r4, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d07d      	beq.n	8001700 <HAL_RCC_OscConfig+0x3c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001604:	4a45      	ldr	r2, [pc, #276]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 8001606:	6892      	ldr	r2, [r2, #8]
 8001608:	f002 020c 	and.w	r2, r2, #12
 800160c:	2a08      	cmp	r2, #8
 800160e:	d051      	beq.n	80016b4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	2b02      	cmp	r3, #2
 8001612:	d017      	beq.n	8001644 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <HAL_RCC_OscConfig+0x3e8>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7fe fff3 	bl	8000604 <HAL_GetTick>
 800161e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4d3e      	ldr	r5, [pc, #248]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001628:	d042      	beq.n	80016b0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe ffeb 	bl	8000604 <HAL_GetTick>
 800162e:	1b00      	subs	r0, r0, r4
 8001630:	2802      	cmp	r0, #2
 8001632:	d9f6      	bls.n	8001622 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001634:	2003      	movs	r0, #3
 8001636:	e064      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001638:	4a38      	ldr	r2, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 800163a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800163c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	e7dc      	b.n	80015fe <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x3e8>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800164a:	f7fe ffdb 	bl	8000604 <HAL_GetTick>
 800164e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	4e32      	ldr	r6, [pc, #200]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 8001652:	6833      	ldr	r3, [r6, #0]
 8001654:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001658:	d006      	beq.n	8001668 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7fe ffd3 	bl	8000604 <HAL_GetTick>
 800165e:	1b40      	subs	r0, r0, r5
 8001660:	2802      	cmp	r0, #2
 8001662:	d9f6      	bls.n	8001652 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8001664:	2003      	movs	r0, #3
 8001666:	e04c      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001668:	69e3      	ldr	r3, [r4, #28]
 800166a:	6a22      	ldr	r2, [r4, #32]
 800166c:	4313      	orrs	r3, r2
 800166e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001670:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001676:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800167a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800167c:	0852      	lsrs	r2, r2, #1
 800167e:	3a01      	subs	r2, #1
 8001680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001684:	4a25      	ldr	r2, [pc, #148]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 8001686:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_RCC_OscConfig+0x3e8>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800168e:	f7fe ffb9 	bl	8000604 <HAL_GetTick>
 8001692:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001694:	4d21      	ldr	r5, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169e:	f7fe ffb1 	bl	8000604 <HAL_GetTick>
 80016a2:	1b00      	subs	r0, r0, r4
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d9f6      	bls.n	8001696 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 80016a8:	2003      	movs	r0, #3
 80016aa:	e02a      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
 80016ae:	e028      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 80016b0:	2000      	movs	r0, #0
 80016b2:	e026      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d027      	beq.n	8001708 <HAL_RCC_OscConfig+0x3d0>
        pll_config = RCC->PLLCFGR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x3e4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80016c0:	69e2      	ldr	r2, [r4, #28]
 80016c2:	4291      	cmp	r1, r2
 80016c4:	d122      	bne.n	800170c <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	6a21      	ldr	r1, [r4, #32]
 80016cc:	428a      	cmp	r2, r1
 80016ce:	d11f      	bne.n	8001710 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016d2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80016d6:	401a      	ands	r2, r3
 80016d8:	428a      	cmp	r2, r1
 80016da:	d11b      	bne.n	8001714 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80016e2:	428a      	cmp	r2, r1
 80016e4:	d118      	bne.n	8001718 <HAL_RCC_OscConfig+0x3e0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016e6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        return HAL_ERROR;
 80016ec:	1a18      	subs	r0, r3, r0
 80016ee:	bf18      	it	ne
 80016f0:	2001      	movne	r0, #1
 80016f2:	e006      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
    return HAL_ERROR;
 80016f4:	2001      	movs	r0, #1
}
 80016f6:	4770      	bx	lr
        return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e002      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 80016fc:	2001      	movs	r0, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
}
 8001702:	b002      	add	sp, #8
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
 800170a:	e7fa      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
          return HAL_ERROR;
 800170c:	2001      	movs	r0, #1
 800170e:	e7f8      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 8001710:	2001      	movs	r0, #1
 8001712:	e7f6      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 8001714:	2001      	movs	r0, #1
 8001716:	e7f4      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 8001718:	2001      	movs	r0, #1
 800171a:	e7f2      	b.n	8001702 <HAL_RCC_OscConfig+0x3ca>
 800171c:	40023800 	.word	0x40023800
 8001720:	42470060 	.word	0x42470060

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d053      	beq.n	80017da <HAL_RCC_GetSysClockFreq+0xb6>
 8001732:	2b08      	cmp	r3, #8
 8001734:	d153      	bne.n	80017de <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001744:	d028      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800174e:	0158      	lsls	r0, r3, #5
 8001750:	2100      	movs	r1, #0
 8001752:	1ac0      	subs	r0, r0, r3
 8001754:	f161 0100 	sbc.w	r1, r1, #0
 8001758:	018e      	lsls	r6, r1, #6
 800175a:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 800175e:	0187      	lsls	r7, r0, #6
 8001760:	1a3c      	subs	r4, r7, r0
 8001762:	eb66 0501 	sbc.w	r5, r6, r1
 8001766:	00e9      	lsls	r1, r5, #3
 8001768:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800176c:	00e0      	lsls	r0, r4, #3
 800176e:	18c0      	adds	r0, r0, r3
 8001770:	f141 0100 	adc.w	r1, r1, #0
 8001774:	024b      	lsls	r3, r1, #9
 8001776:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800177a:	0244      	lsls	r4, r0, #9
 800177c:	4620      	mov	r0, r4
 800177e:	4619      	mov	r1, r3
 8001780:	2300      	movs	r3, #0
 8001782:	f7fe fd9d 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800178e:	3301      	adds	r3, #1
 8001790:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001792:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001796:	e023      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80017a0:	015c      	lsls	r4, r3, #5
 80017a2:	2500      	movs	r5, #0
 80017a4:	1ae4      	subs	r4, r4, r3
 80017a6:	f165 0500 	sbc.w	r5, r5, #0
 80017aa:	01ae      	lsls	r6, r5, #6
 80017ac:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80017b0:	01a7      	lsls	r7, r4, #6
 80017b2:	1b38      	subs	r0, r7, r4
 80017b4:	eb66 0105 	sbc.w	r1, r6, r5
 80017b8:	00cc      	lsls	r4, r1, #3
 80017ba:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80017be:	00c5      	lsls	r5, r0, #3
 80017c0:	18e8      	adds	r0, r5, r3
 80017c2:	f144 0100 	adc.w	r1, r4, #0
 80017c6:	028b      	lsls	r3, r1, #10
 80017c8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80017cc:	0284      	lsls	r4, r0, #10
 80017ce:	4620      	mov	r0, r4
 80017d0:	4619      	mov	r1, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	f7fe fd74 	bl	80002c0 <__aeabi_uldivmod>
 80017d8:	e7d5      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x62>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0xbc>
      sysclockfreq = HSI_VALUE;
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80017e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	00f42400 	.word	0x00f42400

080017f0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80017f0:	2800      	cmp	r0, #0
 80017f2:	f000 809d 	beq.w	8001930 <HAL_RCC_ClockConfig+0x140>
{
 80017f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017fa:	460d      	mov	r5, r1
 80017fc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fe:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_ClockConfig+0x150>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	428b      	cmp	r3, r1
 8001808:	d208      	bcs.n	800181c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	b2cb      	uxtb	r3, r1
 800180c:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <HAL_RCC_ClockConfig+0x150>)
 800180e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	6813      	ldr	r3, [r2, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	428b      	cmp	r3, r1
 8001818:	f040 808c 	bne.w	8001934 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f013 0f02 	tst.w	r3, #2
 8001822:	d017      	beq.n	8001854 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	f013 0f04 	tst.w	r3, #4
 8001828:	d004      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182a:	4a46      	ldr	r2, [pc, #280]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 800182c:	6893      	ldr	r3, [r2, #8]
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	f013 0f08 	tst.w	r3, #8
 800183a:	d004      	beq.n	8001846 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800183c:	4a41      	ldr	r2, [pc, #260]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 800183e:	6893      	ldr	r3, [r2, #8]
 8001840:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001844:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001846:	4a3f      	ldr	r2, [pc, #252]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 8001848:	6893      	ldr	r3, [r2, #8]
 800184a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800184e:	68a1      	ldr	r1, [r4, #8]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	f013 0f01 	tst.w	r3, #1
 800185a:	d032      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185c:	6862      	ldr	r2, [r4, #4]
 800185e:	2a01      	cmp	r2, #1
 8001860:	d021      	beq.n	80018a6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	1e93      	subs	r3, r2, #2
 8001864:	2b01      	cmp	r3, #1
 8001866:	d925      	bls.n	80018b4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f013 0f02 	tst.w	r3, #2
 8001870:	d062      	beq.n	8001938 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4934      	ldr	r1, [pc, #208]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 8001874:	688b      	ldr	r3, [r1, #8]
 8001876:	f023 0303 	bic.w	r3, r3, #3
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800187e:	f7fe fec1 	bl	8000604 <HAL_GetTick>
 8001882:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001884:	4f2f      	ldr	r7, [pc, #188]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	6862      	ldr	r2, [r4, #4]
 8001892:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001896:	d014      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001898:	f7fe feb4 	bl	8000604 <HAL_GetTick>
 800189c:	1b80      	subs	r0, r0, r6
 800189e:	4540      	cmp	r0, r8
 80018a0:	d9f3      	bls.n	800188a <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80018a2:	2003      	movs	r0, #3
 80018a4:	e042      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018ae:	d1e0      	bne.n	8001872 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80018b0:	2001      	movs	r0, #1
 80018b2:	e03b      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018bc:	d1d9      	bne.n	8001872 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e034      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_ClockConfig+0x150>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	42ab      	cmp	r3, r5
 80018cc:	d907      	bls.n	80018de <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	b2ea      	uxtb	r2, r5
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_ClockConfig+0x150>)
 80018d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	42ab      	cmp	r3, r5
 80018dc:	d12e      	bne.n	800193c <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	f013 0f04 	tst.w	r3, #4
 80018e4:	d006      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 80018e8:	6893      	ldr	r3, [r2, #8]
 80018ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018ee:	68e1      	ldr	r1, [r4, #12]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f013 0f08 	tst.w	r3, #8
 80018fa:	d007      	beq.n	800190c <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fc:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 80018fe:	6893      	ldr	r3, [r2, #8]
 8001900:	6921      	ldr	r1, [r4, #16]
 8001902:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001906:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800190a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190c:	f7ff ff0a 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_RCC_ClockConfig+0x154>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x158>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	40d8      	lsrs	r0, r3
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x15c>)
 8001920:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x160>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	f028 fb1f 	bl	8029f68 <HAL_InitTick>
  return HAL_OK;
 800192a:	2000      	movs	r0, #0
}
 800192c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001930:	2001      	movs	r0, #1
}
 8001932:	4770      	bx	lr
      return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
 8001936:	e7f9      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	e7f7      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
 800193e:	e7f5      	b.n	800192c <HAL_RCC_ClockConfig+0x13c>
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	08037a9c 	.word	0x08037a9c
 800194c:	20000050 	.word	0x20000050
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <HAL_RCC_GetHCLKFreq+0x8>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000050 	.word	0x20000050

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x18>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800196e:	6810      	ldr	r0, [r2, #0]
}
 8001970:	40d8      	lsrs	r0, r3
 8001972:	4770      	bx	lr
 8001974:	40023800 	.word	0x40023800
 8001978:	08037aac 	.word	0x08037aac
 800197c:	20000050 	.word	0x20000050

08001980 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001980:	230f      	movs	r3, #15
 8001982:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetClockConfig+0x34>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001994:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800199c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80019a6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_GetClockConfig+0x38>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	600b      	str	r3, [r1, #0]
}
 80019b2:	4770      	bx	lr
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80019bc:	b198      	cbz	r0, 80019e6 <HAL_RNG_Init+0x2a>
{
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80019c2:	7943      	ldrb	r3, [r0, #5]
 80019c4:	b15b      	cbz	r3, 80019de <HAL_RNG_Init+0x22>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	7163      	strb	r3, [r4, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	7163      	strb	r3, [r4, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80019d8:	2000      	movs	r0, #0
 80019da:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
}
 80019dc:	bd10      	pop	{r4, pc}
    hrng->Lock = HAL_UNLOCKED;
 80019de:	7103      	strb	r3, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80019e0:	f028 fa88 	bl	8029ef4 <HAL_RNG_MspInit>
 80019e4:	e7ef      	b.n	80019c6 <HAL_RNG_Init+0xa>
    return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
}
 80019e8:	4770      	bx	lr

080019ea <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80019ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80019ec:	7903      	ldrb	r3, [r0, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d02b      	beq.n	8001a4a <HAL_RNG_GenerateRandomNumber+0x60>
 80019f2:	4604      	mov	r4, r0
 80019f4:	460e      	mov	r6, r1
 80019f6:	2301      	movs	r3, #1
 80019f8:	7103      	strb	r3, [r0, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80019fa:	7945      	ldrb	r5, [r0, #5]
 80019fc:	b2ed      	uxtb	r5, r5
 80019fe:	429d      	cmp	r5, r3
 8001a00:	d006      	beq.n	8001a10 <HAL_RNG_GenerateRandomNumber+0x26>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001a02:	2304      	movs	r3, #4
 8001a04:	6083      	str	r3, [r0, #8]
    status = HAL_ERROR;
 8001a06:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	7123      	strb	r3, [r4, #4]

  return status;
}
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8001a10:	2302      	movs	r3, #2
 8001a12:	7143      	strb	r3, [r0, #5]
    tickstart = HAL_GetTick();
 8001a14:	f7fe fdf6 	bl	8000604 <HAL_GetTick>
 8001a18:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	f012 0f01 	tst.w	r2, #1
 8001a22:	d10b      	bne.n	8001a3c <HAL_RNG_GenerateRandomNumber+0x52>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8001a24:	f7fe fdee 	bl	8000604 <HAL_GetTick>
 8001a28:	1bc0      	subs	r0, r0, r7
 8001a2a:	2802      	cmp	r0, #2
 8001a2c:	d9f5      	bls.n	8001a1a <HAL_RNG_GenerateRandomNumber+0x30>
        hrng->State = HAL_RNG_STATE_READY;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	7163      	strb	r3, [r4, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001a32:	2302      	movs	r3, #2
 8001a34:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(hrng);
 8001a36:	2300      	movs	r3, #0
 8001a38:	7123      	strb	r3, [r4, #4]
        return HAL_ERROR;
 8001a3a:	e7e7      	b.n	8001a0c <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8001a40:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8001a42:	2301      	movs	r3, #1
 8001a44:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2500      	movs	r5, #0
 8001a48:	e7de      	b.n	8001a08 <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8001a4a:	2502      	movs	r5, #2
 8001a4c:	e7de      	b.n	8001a0c <HAL_RNG_GenerateRandomNumber+0x22>

08001a4e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	6802      	ldr	r2, [r0, #0]
 8001a52:	68d3      	ldr	r3, [r2, #12]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a5a:	6802      	ldr	r2, [r0, #0]
 8001a5c:	6893      	ldr	r3, [r2, #8]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d003      	beq.n	8001a6e <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	4770      	bx	lr

08001a72 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a72:	4770      	bx	lr

08001a74 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a74:	4770      	bx	lr

08001a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a78:	4770      	bx	lr

08001a7a <HAL_TIM_IRQHandler>:
{
 8001a7a:	b510      	push	{r4, lr}
 8001a7c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a7e:	6803      	ldr	r3, [r0, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	f012 0f02 	tst.w	r2, #2
 8001a86:	d011      	beq.n	8001aac <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	f012 0f02 	tst.w	r2, #2
 8001a8e:	d00d      	beq.n	8001aac <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a90:	f06f 0202 	mvn.w	r2, #2
 8001a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a9a:	6803      	ldr	r3, [r0, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f013 0f03 	tst.w	r3, #3
 8001aa2:	d070      	beq.n	8001b86 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa4:	f7ff ffe6 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	f012 0f04 	tst.w	r2, #4
 8001ab4:	d012      	beq.n	8001adc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	f012 0f04 	tst.w	r2, #4
 8001abc:	d00e      	beq.n	8001adc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001abe:	f06f 0204 	mvn.w	r2, #4
 8001ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ad0:	d05f      	beq.n	8001b92 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ffce 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	f012 0f08 	tst.w	r2, #8
 8001ae4:	d012      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	f012 0f08 	tst.w	r2, #8
 8001aec:	d00e      	beq.n	8001b0c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001aee:	f06f 0208 	mvn.w	r2, #8
 8001af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001af4:	2304      	movs	r3, #4
 8001af6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f013 0f03 	tst.w	r3, #3
 8001b00:	d04e      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ffb6 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b0c:	6823      	ldr	r3, [r4, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	f012 0f10 	tst.w	r2, #16
 8001b14:	d012      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	f012 0f10 	tst.w	r2, #16
 8001b1c:	d00e      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b1e:	f06f 0210 	mvn.w	r2, #16
 8001b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b24:	2308      	movs	r3, #8
 8001b26:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001b30:	d03d      	beq.n	8001bae <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ff9e 	bl	8001a74 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	f012 0f01 	tst.w	r2, #1
 8001b44:	d003      	beq.n	8001b4e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	f012 0f01 	tst.w	r2, #1
 8001b4c:	d136      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b56:	d003      	beq.n	8001b60 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b5e:	d134      	bne.n	8001bca <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001b70:	d132      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	f012 0f20 	tst.w	r2, #32
 8001b7a:	d003      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	f012 0f20 	tst.w	r2, #32
 8001b82:	d130      	bne.n	8001be6 <HAL_TIM_IRQHandler+0x16c>
}
 8001b84:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	f7ff ff74 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff ff73 	bl	8001a76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b90:	e78a      	b.n	8001aa8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7ff ff6d 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff ff6c 	bl	8001a76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b9e:	e79b      	b.n	8001ad8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff ff66 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7ff ff65 	bl	8001a76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bac:	e7ac      	b.n	8001b08 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ff5f 	bl	8001a72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f7ff ff5e 	bl	8001a76 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bba:	e7bd      	b.n	8001b38 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bbc:	f06f 0201 	mvn.w	r2, #1
 8001bc0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f027 ffc2 	bl	8029b4c <HAL_TIM_PeriodElapsedCallback>
 8001bc8:	e7c1      	b.n	8001b4e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f000 f8ae 	bl	8001d32 <HAL_TIMEx_BreakCallback>
 8001bd6:	e7c3      	b.n	8001b60 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bdc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff ff4a 	bl	8001a78 <HAL_TIM_TriggerCallback>
 8001be4:	e7c5      	b.n	8001b72 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001be6:	f06f 0220 	mvn.w	r2, #32
 8001bea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 f89f 	bl	8001d30 <HAL_TIMEx_CommutCallback>
}
 8001bf2:	e7c7      	b.n	8001b84 <HAL_TIM_IRQHandler+0x10a>

08001bf4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bf4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <TIM_Base_SetConfig+0x104>)
 8001bf8:	4290      	cmp	r0, r2
 8001bfa:	d05d      	beq.n	8001cb8 <TIM_Base_SetConfig+0xc4>
 8001bfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c00:	d031      	beq.n	8001c66 <TIM_Base_SetConfig+0x72>
 8001c02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c06:	4290      	cmp	r0, r2
 8001c08:	d051      	beq.n	8001cae <TIM_Base_SetConfig+0xba>
 8001c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c0e:	4290      	cmp	r0, r2
 8001c10:	d06d      	beq.n	8001cee <TIM_Base_SetConfig+0xfa>
 8001c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c16:	4290      	cmp	r0, r2
 8001c18:	d064      	beq.n	8001ce4 <TIM_Base_SetConfig+0xf0>
 8001c1a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c1e:	4290      	cmp	r0, r2
 8001c20:	d033      	beq.n	8001c8a <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c22:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001c26:	4290      	cmp	r0, r2
 8001c28:	d021      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c2e:	4290      	cmp	r0, r2
 8001c30:	d01d      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d019      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001c3a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d015      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d011      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d00d      	beq.n	8001c6e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c56:	694a      	ldr	r2, [r1, #20]
 8001c58:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001c5a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5c:	688b      	ldr	r3, [r1, #8]
 8001c5e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c60:	680b      	ldr	r3, [r1, #0]
 8001c62:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c64:	e03b      	b.n	8001cde <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c6a:	684a      	ldr	r2, [r1, #4]
 8001c6c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c72:	68ca      	ldr	r2, [r1, #12]
 8001c74:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c7a:	694a      	ldr	r2, [r1, #20]
 8001c7c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c7e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c80:	688b      	ldr	r3, [r1, #8]
 8001c82:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001c84:	680b      	ldr	r3, [r1, #0]
 8001c86:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c88:	e029      	b.n	8001cde <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c8e:	684a      	ldr	r2, [r1, #4]
 8001c90:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c96:	68ca      	ldr	r2, [r1, #12]
 8001c98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c9e:	694a      	ldr	r2, [r1, #20]
 8001ca0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ca2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca4:	688b      	ldr	r3, [r1, #8]
 8001ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001ca8:	680b      	ldr	r3, [r1, #0]
 8001caa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cac:	e015      	b.n	8001cda <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cb2:	684a      	ldr	r2, [r1, #4]
 8001cb4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cb6:	e7da      	b.n	8001c6e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cbc:	684a      	ldr	r2, [r1, #4]
 8001cbe:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc4:	68ca      	ldr	r2, [r1, #12]
 8001cc6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ccc:	694a      	ldr	r2, [r1, #20]
 8001cce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001cd0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd2:	688b      	ldr	r3, [r1, #8]
 8001cd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001cd6:	680b      	ldr	r3, [r1, #0]
 8001cd8:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cda:	690b      	ldr	r3, [r1, #16]
 8001cdc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6143      	str	r3, [r0, #20]
}
 8001ce2:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ce8:	684a      	ldr	r2, [r1, #4]
 8001cea:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cec:	e7bf      	b.n	8001c6e <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cf2:	684a      	ldr	r2, [r1, #4]
 8001cf4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf6:	e7ba      	b.n	8001c6e <TIM_Base_SetConfig+0x7a>
 8001cf8:	40010000 	.word	0x40010000

08001cfc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001cfc:	b1b0      	cbz	r0, 8001d2c <HAL_TIM_Base_Init+0x30>
{
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001d02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d06:	b163      	cbz	r3, 8001d22 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f851 0b04 	ldr.w	r0, [r1], #4
 8001d14:	f7ff ff6e 	bl	8001bf4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001d1e:	2000      	movs	r0, #0
}
 8001d20:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001d22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001d26:	f7ff fe92 	bl	8001a4e <HAL_TIM_Base_MspInit>
 8001d2a:	e7ed      	b.n	8001d08 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d30:	4770      	bx	lr

08001d32 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d32:	4770      	bx	lr

08001d34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d34:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001d36:	f001 f923 	bl	8002f80 <vTaskStartScheduler>
  
  return osOK;
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd08      	pop	{r3, pc}

08001d3e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8001d3e:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d40:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001d44:	b113      	cbz	r3, 8001d4c <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
 8001d46:	f001 f95f 	bl	8003008 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
  }
}
 8001d4a:	bd08      	pop	{r3, pc}
    return xTaskGetTickCount();
 8001d4c:	f001 f956 	bl	8002ffc <xTaskGetTickCount>
 8001d50:	e7fb      	b.n	8001d4a <osKernelSysTick+0xc>

08001d52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d52:	b570      	push	{r4, r5, r6, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	4604      	mov	r4, r0
 8001d58:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d5a:	6945      	ldr	r5, [r0, #20]
 8001d5c:	b19d      	cbz	r5, 8001d86 <osThreadCreate+0x34>
 8001d5e:	6986      	ldr	r6, [r0, #24]
 8001d60:	b18e      	cbz	r6, 8001d86 <osThreadCreate+0x34>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d62:	6840      	ldr	r0, [r0, #4]
 8001d64:	6821      	ldr	r1, [r4, #0]
 8001d66:	6922      	ldr	r2, [r4, #16]
 8001d68:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8001d6c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001d6e:	bf14      	ite	ne
 8001d70:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d72:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d74:	9602      	str	r6, [sp, #8]
 8001d76:	9501      	str	r5, [sp, #4]
 8001d78:	9400      	str	r4, [sp, #0]
 8001d7a:	f001 f895 	bl	8002ea8 <xTaskCreateStatic>
 8001d7e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001d80:	9805      	ldr	r0, [sp, #20]
}
 8001d82:	b006      	add	sp, #24
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d86:	6860      	ldr	r0, [r4, #4]
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	8a22      	ldrh	r2, [r4, #16]
 8001d8c:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8001d90:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001d92:	bf14      	ite	ne
 8001d94:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d96:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d98:	ad05      	add	r5, sp, #20
 8001d9a:	9501      	str	r5, [sp, #4]
 8001d9c:	9400      	str	r4, [sp, #0]
 8001d9e:	f001 f8bd 	bl	8002f1c <xTaskCreate>
 8001da2:	2801      	cmp	r0, #1
 8001da4:	d0ec      	beq.n	8001d80 <osThreadCreate+0x2e>
      return NULL;
 8001da6:	2000      	movs	r0, #0
 8001da8:	e7eb      	b.n	8001d82 <osThreadCreate+0x30>

08001daa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001daa:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001dac:	2801      	cmp	r0, #1
 8001dae:	bf38      	it	cc
 8001db0:	2001      	movcc	r0, #1
 8001db2:	f001 fa4f 	bl	8003254 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001db6:	2000      	movs	r0, #0
 8001db8:	bd08      	pop	{r3, pc}

08001dba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001dba:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001dbc:	6841      	ldr	r1, [r0, #4]
 8001dbe:	b119      	cbz	r1, 8001dc8 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f000 fbe4 	bl	800258e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8001dc6:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 fbd5 	bl	8002578 <xQueueCreateMutex>
 8001dce:	e7fa      	b.n	8001dc6 <osMutexCreate+0xc>

08001dd0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001dd8:	b1e0      	cbz	r0, 8001e14 <osMutexWait+0x44>
 8001dda:	f3ef 8405 	mrs	r4, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001dde:	b18c      	cbz	r4, 8001e04 <osMutexWait+0x34>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001de0:	aa01      	add	r2, sp, #4
 8001de2:	2100      	movs	r1, #0
 8001de4:	f000 fe28 	bl	8002a38 <xQueueReceiveFromISR>
 8001de8:	2801      	cmp	r0, #1
 8001dea:	d115      	bne.n	8001e18 <osMutexWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001dec:	9b01      	ldr	r3, [sp, #4]
 8001dee:	b1ab      	cbz	r3, 8001e1c <osMutexWait+0x4c>
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <osMutexWait+0x50>)
 8001df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001e00:	2400      	movs	r4, #0
 8001e02:	e004      	b.n	8001e0e <osMutexWait+0x3e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001e04:	f000 fd42 	bl	800288c <xQueueSemaphoreTake>
    return osErrorOS;
 8001e08:	2801      	cmp	r0, #1
 8001e0a:	bf18      	it	ne
 8001e0c:	24ff      	movne	r4, #255	; 0xff
}
 8001e0e:	4620      	mov	r0, r4
 8001e10:	b002      	add	sp, #8
 8001e12:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8001e14:	2480      	movs	r4, #128	; 0x80
 8001e16:	e7fa      	b.n	8001e0e <osMutexWait+0x3e>
      return osErrorOS;
 8001e18:	24ff      	movs	r4, #255	; 0xff
 8001e1a:	e7f8      	b.n	8001e0e <osMutexWait+0x3e>
  return osOK;
 8001e1c:	2400      	movs	r4, #0
 8001e1e:	e7f6      	b.n	8001e0e <osMutexWait+0x3e>
 8001e20:	e000ed04 	.word	0xe000ed04

08001e24 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8001e24:	b510      	push	{r4, lr}
 8001e26:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f3ef 8405 	mrs	r4, IPSR
  
  if (inHandlerMode()) {
 8001e30:	b184      	cbz	r4, 8001e54 <osMutexRelease+0x30>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001e32:	a901      	add	r1, sp, #4
 8001e34:	f000 fc21 	bl	800267a <xQueueGiveFromISR>
 8001e38:	2801      	cmp	r0, #1
 8001e3a:	d116      	bne.n	8001e6a <osMutexRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e3c:	9b01      	ldr	r3, [sp, #4]
 8001e3e:	b1b3      	cbz	r3, 8001e6e <osMutexRelease+0x4a>
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <osMutexRelease+0x50>)
 8001e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001e50:	2400      	movs	r4, #0
 8001e52:	e007      	b.n	8001e64 <osMutexRelease+0x40>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8001e54:	2300      	movs	r3, #0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f000 fabb 	bl	80023d4 <xQueueGenericSend>
  {
    result = osErrorOS;
 8001e5e:	2801      	cmp	r0, #1
 8001e60:	bf18      	it	ne
 8001e62:	24ff      	movne	r4, #255	; 0xff
  }
  return result;
}
 8001e64:	4620      	mov	r0, r4
 8001e66:	b002      	add	sp, #8
 8001e68:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8001e6a:	24ff      	movs	r4, #255	; 0xff
 8001e6c:	e7fa      	b.n	8001e64 <osMutexRelease+0x40>
  osStatus result = osOK;
 8001e6e:	2400      	movs	r4, #0
 8001e70:	e7f8      	b.n	8001e64 <osMutexRelease+0x40>
 8001e72:	bf00      	nop
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001e7c:	6844      	ldr	r4, [r0, #4]
 8001e7e:	b17c      	cbz	r4, 8001ea0 <osSemaphoreCreate+0x28>
    if (count == 1) {
 8001e80:	2901      	cmp	r1, #1
 8001e82:	d003      	beq.n	8001e8c <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001e84:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001e86:	4620      	mov	r0, r4
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4623      	mov	r3, r4
 8001e92:	2200      	movs	r2, #0
 8001e94:	4611      	mov	r1, r2
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 fa22 	bl	80022e0 <xQueueGenericCreateStatic>
 8001e9c:	4604      	mov	r4, r0
 8001e9e:	e7f2      	b.n	8001e86 <osSemaphoreCreate+0xe>
    if (count == 1) {
 8001ea0:	2901      	cmp	r1, #1
 8001ea2:	d1f0      	bne.n	8001e86 <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 fa6d 	bl	8002388 <xQueueGenericCreate>
 8001eae:	4604      	mov	r4, r0
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d0e8      	beq.n	8001e86 <osSemaphoreCreate+0xe>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f000 fa8b 	bl	80023d4 <xQueueGenericSend>
 8001ebe:	e7e2      	b.n	8001e86 <osSemaphoreCreate+0xe>

08001ec0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001ec0:	b500      	push	{lr}
 8001ec2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001ec8:	b1e8      	cbz	r0, 8001f06 <osSemaphoreWait+0x46>
 8001eca:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001ece:	b18a      	cbz	r2, 8001ef4 <osSemaphoreWait+0x34>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ed0:	aa01      	add	r2, sp, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f000 fdb0 	bl	8002a38 <xQueueReceiveFromISR>
 8001ed8:	2801      	cmp	r0, #1
 8001eda:	d116      	bne.n	8001f0a <osSemaphoreWait+0x4a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001edc:	9801      	ldr	r0, [sp, #4]
 8001ede:	b178      	cbz	r0, 8001f00 <osSemaphoreWait+0x40>
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <osSemaphoreWait+0x50>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e005      	b.n	8001f00 <osSemaphoreWait+0x40>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001ef4:	f000 fcca 	bl	800288c <xQueueSemaphoreTake>
    return osErrorOS;
 8001ef8:	2801      	cmp	r0, #1
 8001efa:	bf0c      	ite	eq
 8001efc:	2000      	moveq	r0, #0
 8001efe:	20ff      	movne	r0, #255	; 0xff
}
 8001f00:	b003      	add	sp, #12
 8001f02:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 8001f06:	2080      	movs	r0, #128	; 0x80
 8001f08:	e7fa      	b.n	8001f00 <osSemaphoreWait+0x40>
      return osErrorOS;
 8001f0a:	20ff      	movs	r0, #255	; 0xff
 8001f0c:	e7f8      	b.n	8001f00 <osSemaphoreWait+0x40>
 8001f0e:	bf00      	nop
 8001f10:	e000ed04 	.word	0xe000ed04

08001f14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001f14:	b510      	push	{r4, lr}
 8001f16:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 8001f20:	b184      	cbz	r4, 8001f44 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001f22:	a901      	add	r1, sp, #4
 8001f24:	f000 fba9 	bl	800267a <xQueueGiveFromISR>
 8001f28:	2801      	cmp	r0, #1
 8001f2a:	d116      	bne.n	8001f5a <osSemaphoreRelease+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f2c:	9b01      	ldr	r3, [sp, #4]
 8001f2e:	b1b3      	cbz	r3, 8001f5e <osSemaphoreRelease+0x4a>
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <osSemaphoreRelease+0x50>)
 8001f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001f40:	2400      	movs	r4, #0
 8001f42:	e007      	b.n	8001f54 <osSemaphoreRelease+0x40>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f000 fa43 	bl	80023d4 <xQueueGenericSend>
      result = osErrorOS;
 8001f4e:	2801      	cmp	r0, #1
 8001f50:	bf18      	it	ne
 8001f52:	24ff      	movne	r4, #255	; 0xff
    }
  }
  
  return result;
}
 8001f54:	4620      	mov	r0, r4
 8001f56:	b002      	add	sp, #8
 8001f58:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8001f5a:	24ff      	movs	r4, #255	; 0xff
 8001f5c:	e7fa      	b.n	8001f54 <osSemaphoreRelease+0x40>
  osStatus result = osOK;
 8001f5e:	2400      	movs	r4, #0
 8001f60:	e7f8      	b.n	8001f54 <osSemaphoreRelease+0x40>
 8001f62:	bf00      	nop
 8001f64:	e000ed04 	.word	0xe000ed04

08001f68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8001f68:	b510      	push	{r4, lr}
 8001f6a:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8001f6e:	b91c      	cbnz	r4, 8001f78 <osSemaphoreDelete+0x10>
    return osErrorISR;
  }

  vSemaphoreDelete(semaphore_id);
 8001f70:	f000 fdee 	bl	8002b50 <vQueueDelete>

  return osOK; 
}
 8001f74:	4620      	mov	r0, r4
 8001f76:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8001f78:	2482      	movs	r4, #130	; 0x82
 8001f7a:	e7fb      	b.n	8001f74 <osSemaphoreDelete+0xc>

08001f7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001f80:	6882      	ldr	r2, [r0, #8]
 8001f82:	b142      	cbz	r2, 8001f96 <osMessageCreate+0x1a>
 8001f84:	68c3      	ldr	r3, [r0, #12]
 8001f86:	b133      	cbz	r3, 8001f96 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	9100      	str	r1, [sp, #0]
 8001f8c:	6841      	ldr	r1, [r0, #4]
 8001f8e:	6800      	ldr	r0, [r0, #0]
 8001f90:	f000 f9a6 	bl	80022e0 <xQueueGenericCreateStatic>
 8001f94:	e004      	b.n	8001fa0 <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001f96:	2200      	movs	r2, #0
 8001f98:	6841      	ldr	r1, [r0, #4]
 8001f9a:	6800      	ldr	r0, [r0, #0]
 8001f9c:	f000 f9f4 	bl	8002388 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001fa0:	b003      	add	sp, #12
 8001fa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001fa8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9303      	str	r3, [sp, #12]
 8001fb2:	f3ef 8405 	mrs	r4, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8001fb6:	b18c      	cbz	r4, 8001fdc <osMessagePut+0x34>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001fb8:	aa03      	add	r2, sp, #12
 8001fba:	a901      	add	r1, sp, #4
 8001fbc:	f000 faf6 	bl	80025ac <xQueueGenericSendFromISR>
 8001fc0:	2801      	cmp	r0, #1
 8001fc2:	d118      	bne.n	8001ff6 <osMessagePut+0x4e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001fc4:	9b03      	ldr	r3, [sp, #12]
 8001fc6:	b1c3      	cbz	r3, 8001ffa <osMessagePut+0x52>
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <osMessagePut+0x58>)
 8001fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8001fd8:	2400      	movs	r4, #0
 8001fda:	e009      	b.n	8001ff0 <osMessagePut+0x48>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	bf38      	it	cc
 8001fe2:	2201      	movcc	r2, #1
 8001fe4:	a901      	add	r1, sp, #4
 8001fe6:	f000 f9f5 	bl	80023d4 <xQueueGenericSend>
      return osErrorOS;
 8001fea:	2801      	cmp	r0, #1
 8001fec:	bf18      	it	ne
 8001fee:	24ff      	movne	r4, #255	; 0xff
}
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8001ff6:	24ff      	movs	r4, #255	; 0xff
 8001ff8:	e7fa      	b.n	8001ff0 <osMessagePut+0x48>
  return osOK;
 8001ffa:	2400      	movs	r4, #0
 8001ffc:	e7f8      	b.n	8001ff0 <osMessagePut+0x48>
 8001ffe:	bf00      	nop
 8002000:	e000ed04 	.word	0xe000ed04

08002004 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002004:	b530      	push	{r4, r5, lr}
 8002006:	b085      	sub	sp, #20
 8002008:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800200a:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002010:	b1d1      	cbz	r1, 8002048 <osMessageGet+0x44>
 8002012:	4608      	mov	r0, r1
 8002014:	4615      	mov	r5, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8002016:	2300      	movs	r3, #0
 8002018:	9303      	str	r3, [sp, #12]
 800201a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800201e:	b1db      	cbz	r3, 8002058 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002020:	aa03      	add	r2, sp, #12
 8002022:	a901      	add	r1, sp, #4
 8002024:	f000 fd08 	bl	8002a38 <xQueueReceiveFromISR>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002028:	2801      	cmp	r0, #1
 800202a:	bf0c      	ite	eq
 800202c:	2310      	moveq	r3, #16
 800202e:	2300      	movne	r3, #0
 8002030:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002032:	9b03      	ldr	r3, [sp, #12]
 8002034:	b1cb      	cbz	r3, 800206a <osMessageGet+0x66>
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <osMessageGet+0x7c>)
 8002038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	f3bf 8f4f 	dsb	sy
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	e010      	b.n	800206a <osMessageGet+0x66>
    event.status = osErrorParameter;
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	9300      	str	r3, [sp, #0]
    return event;
 800204c:	466b      	mov	r3, sp
 800204e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002056:	e00d      	b.n	8002074 <osMessageGet+0x70>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002058:	a901      	add	r1, sp, #4
 800205a:	f000 fb67 	bl	800272c <xQueueReceive>
 800205e:	2801      	cmp	r0, #1
 8002060:	d00b      	beq.n	800207a <osMessageGet+0x76>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002062:	2d00      	cmp	r5, #0
 8002064:	bf18      	it	ne
 8002066:	2540      	movne	r5, #64	; 0x40
 8002068:	9500      	str	r5, [sp, #0]
    }
  }
  
  return event;
 800206a:	466b      	mov	r3, sp
 800206c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002074:	4620      	mov	r0, r4
 8002076:	b005      	add	sp, #20
 8002078:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 800207a:	2310      	movs	r3, #16
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	e7f4      	b.n	800206a <osMessageGet+0x66>
 8002080:	e000ed04 	.word	0xe000ed04

08002084 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8002084:	b508      	push	{r3, lr}
 8002086:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800208a:	b113      	cbz	r3, 8002092 <osMessageWaiting+0xe>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800208c:	f000 fd3d 	bl	8002b0a <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
  }
}
 8002090:	bd08      	pop	{r3, pc}
    return uxQueueMessagesWaiting(queue_id);
 8002092:	f000 fd27 	bl	8002ae4 <uxQueueMessagesWaiting>
 8002096:	e7fb      	b.n	8002090 <osMessageWaiting+0xc>

08002098 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8002098:	b510      	push	{r4, lr}
 800209a:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800209e:	b91c      	cbnz	r4, 80020a8 <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 80020a0:	f000 fd56 	bl	8002b50 <vQueueDelete>

  return osOK; 
}
 80020a4:	4620      	mov	r0, r4
 80020a6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80020a8:	2482      	movs	r4, #130	; 0x82
 80020aa:	e7fb      	b.n	80020a4 <osMessageDelete+0xc>

080020ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ac:	f100 0308 	add.w	r3, r0, #8
 80020b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295
 80020b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c0:	4770      	bx	lr

080020c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c6:	4770      	bx	lr

080020c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80020c8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020d0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020d2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80020d6:	6803      	ldr	r3, [r0, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	6003      	str	r3, [r0, #0]
}
 80020dc:	4770      	bx	lr

080020de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020de:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020e0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80020e6:	d011      	beq.n	800210c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020e8:	f100 0308 	add.w	r3, r0, #8
 80020ec:	461c      	mov	r4, r3
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	42aa      	cmp	r2, r5
 80020f4:	d9fa      	bls.n	80020ec <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020f6:	6863      	ldr	r3, [r4, #4]
 80020f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020fc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80020fe:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002100:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002102:	6803      	ldr	r3, [r0, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	6003      	str	r3, [r0, #0]
}
 8002108:	bc30      	pop	{r4, r5}
 800210a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800210c:	6904      	ldr	r4, [r0, #16]
 800210e:	e7f2      	b.n	80020f6 <vListInsert+0x18>

08002110 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002110:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002112:	6841      	ldr	r1, [r0, #4]
 8002114:	6882      	ldr	r2, [r0, #8]
 8002116:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002118:	6841      	ldr	r1, [r0, #4]
 800211a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002120:	bf04      	itt	eq
 8002122:	6882      	ldreq	r2, [r0, #8]
 8002124:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002126:	2200      	movs	r2, #0
 8002128:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	3a01      	subs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002130:	6818      	ldr	r0, [r3, #0]
}
 8002132:	4770      	bx	lr

08002134 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002134:	b510      	push	{r4, lr}
 8002136:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002138:	f001 fb64 	bl	8003804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800213c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800213e:	f001 fb83 	bl	8003848 <vPortExitCritical>

	return xReturn;
}
 8002142:	fab4 f084 	clz	r0, r4
 8002146:	0940      	lsrs	r0, r0, #5
 8002148:	bd10      	pop	{r4, pc}

0800214a <prvCopyDataToQueue>:
{
 800214a:	b570      	push	{r4, r5, r6, lr}
 800214c:	4604      	mov	r4, r0
 800214e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002150:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002152:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002154:	b95a      	cbnz	r2, 800216e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	b11b      	cbz	r3, 8002162 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800215a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800215c:	3601      	adds	r6, #1
 800215e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002160:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002162:	6880      	ldr	r0, [r0, #8]
 8002164:	f001 fa1c 	bl	80035a0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	60a3      	str	r3, [r4, #8]
 800216c:	e7f6      	b.n	800215c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800216e:	b96d      	cbnz	r5, 800218c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002170:	6840      	ldr	r0, [r0, #4]
 8002172:	f028 f9e2 	bl	802a53a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800217a:	4413      	add	r3, r2
 800217c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800217e:	68a2      	ldr	r2, [r4, #8]
 8002180:	4293      	cmp	r3, r2
 8002182:	d319      	bcc.n	80021b8 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8002188:	4628      	mov	r0, r5
 800218a:	e7e7      	b.n	800215c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800218c:	68c0      	ldr	r0, [r0, #12]
 800218e:	f028 f9d4 	bl	802a53a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002192:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002194:	4251      	negs	r1, r2
 8002196:	68e3      	ldr	r3, [r4, #12]
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	4293      	cmp	r3, r2
 80021a0:	d202      	bcs.n	80021a8 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80021a2:	68a3      	ldr	r3, [r4, #8]
 80021a4:	440b      	add	r3, r1
 80021a6:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80021a8:	2d02      	cmp	r5, #2
 80021aa:	d001      	beq.n	80021b0 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80021ac:	2000      	movs	r0, #0
 80021ae:	e7d5      	b.n	800215c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021b0:	b126      	cbz	r6, 80021bc <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80021b2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80021b4:	2000      	movs	r0, #0
 80021b6:	e7d1      	b.n	800215c <prvCopyDataToQueue+0x12>
 80021b8:	4628      	mov	r0, r5
 80021ba:	e7cf      	b.n	800215c <prvCopyDataToQueue+0x12>
 80021bc:	2000      	movs	r0, #0
 80021be:	e7cd      	b.n	800215c <prvCopyDataToQueue+0x12>

080021c0 <prvCopyDataFromQueue>:
{
 80021c0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80021c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80021c4:	b16a      	cbz	r2, 80021e2 <prvCopyDataFromQueue+0x22>
{
 80021c6:	b510      	push	{r4, lr}
 80021c8:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021ca:	68d9      	ldr	r1, [r3, #12]
 80021cc:	4411      	add	r1, r2
 80021ce:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80021d0:	689c      	ldr	r4, [r3, #8]
 80021d2:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021d4:	bf24      	itt	cs
 80021d6:	6819      	ldrcs	r1, [r3, #0]
 80021d8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021da:	68d9      	ldr	r1, [r3, #12]
 80021dc:	f028 f9ad 	bl	802a53a <memcpy>
}
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	4770      	bx	lr

080021e4 <prvUnlockQueue>:
{
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80021e8:	f001 fb0c 	bl	8003804 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80021ec:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80021f0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	dd0f      	ble.n	8002216 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80021fa:	e004      	b.n	8002206 <prvUnlockQueue+0x22>
						vTaskMissedYield();
 80021fc:	f001 f95e 	bl	80034bc <vTaskMissedYield>
			--cTxLock;
 8002200:	3c01      	subs	r4, #1
 8002202:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002204:	b13c      	cbz	r4, 8002216 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002208:	b12b      	cbz	r3, 8002216 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800220a:	4630      	mov	r0, r6
 800220c:	f001 f8c4 	bl	8003398 <xTaskRemoveFromEventList>
 8002210:	2800      	cmp	r0, #0
 8002212:	d0f5      	beq.n	8002200 <prvUnlockQueue+0x1c>
 8002214:	e7f2      	b.n	80021fc <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8002216:	23ff      	movs	r3, #255	; 0xff
 8002218:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800221c:	f001 fb14 	bl	8003848 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002220:	f001 faf0 	bl	8003804 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002224:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002228:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800222a:	2c00      	cmp	r4, #0
 800222c:	dd0f      	ble.n	800224e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222e:	f105 0610 	add.w	r6, r5, #16
 8002232:	e004      	b.n	800223e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8002234:	f001 f942 	bl	80034bc <vTaskMissedYield>
				--cRxLock;
 8002238:	3c01      	subs	r4, #1
 800223a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800223c:	b13c      	cbz	r4, 800224e <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800223e:	692b      	ldr	r3, [r5, #16]
 8002240:	b12b      	cbz	r3, 800224e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002242:	4630      	mov	r0, r6
 8002244:	f001 f8a8 	bl	8003398 <xTaskRemoveFromEventList>
 8002248:	2800      	cmp	r0, #0
 800224a:	d0f5      	beq.n	8002238 <prvUnlockQueue+0x54>
 800224c:	e7f2      	b.n	8002234 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800224e:	23ff      	movs	r3, #255	; 0xff
 8002250:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002254:	f001 faf8 	bl	8003848 <vPortExitCritical>
}
 8002258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800225c <xQueueGenericReset>:
{
 800225c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800225e:	b1e0      	cbz	r0, 800229a <xQueueGenericReset+0x3e>
 8002260:	460d      	mov	r5, r1
 8002262:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002264:	f001 face 	bl	8003804 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800226c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800226e:	fb03 f301 	mul.w	r3, r3, r1
 8002272:	18d0      	adds	r0, r2, r3
 8002274:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002276:	2000      	movs	r0, #0
 8002278:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800227a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800227c:	1a5b      	subs	r3, r3, r1
 800227e:	4413      	add	r3, r2
 8002280:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002282:	23ff      	movs	r3, #255	; 0xff
 8002284:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800228c:	b9ed      	cbnz	r5, 80022ca <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800228e:	6923      	ldr	r3, [r4, #16]
 8002290:	b963      	cbnz	r3, 80022ac <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8002292:	f001 fad9 	bl	8003848 <vPortExitCritical>
}
 8002296:	2001      	movs	r0, #1
 8002298:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80022aa:	e7fe      	b.n	80022aa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ac:	f104 0010 	add.w	r0, r4, #16
 80022b0:	f001 f872 	bl	8003398 <xTaskRemoveFromEventList>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d0ec      	beq.n	8002292 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <xQueueGenericReset+0x80>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	e7e3      	b.n	8002292 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022ca:	f104 0010 	add.w	r0, r4, #16
 80022ce:	f7ff feed 	bl	80020ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80022d6:	f7ff fee9 	bl	80020ac <vListInitialise>
 80022da:	e7da      	b.n	8002292 <xQueueGenericReset+0x36>
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022e0:	b940      	cbnz	r0, 80022f4 <xQueueGenericCreateStatic+0x14>
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	e7fe      	b.n	80022f2 <xQueueGenericCreateStatic+0x12>
	{
 80022f4:	b510      	push	{r4, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	461c      	mov	r4, r3
 80022fa:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 80022fc:	b154      	cbz	r4, 8002314 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022fe:	b192      	cbz	r2, 8002326 <xQueueGenericCreateStatic+0x46>
 8002300:	b9d9      	cbnz	r1, 800233a <xQueueGenericCreateStatic+0x5a>
 8002302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	e7fe      	b.n	8002312 <xQueueGenericCreateStatic+0x32>
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8002324:	e7fe      	b.n	8002324 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002326:	b321      	cbz	r1, 8002372 <xQueueGenericCreateStatic+0x92>
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	e7fe      	b.n	8002338 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800233a:	2048      	movs	r0, #72	; 0x48
 800233c:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800233e:	9801      	ldr	r0, [sp, #4]
 8002340:	2848      	cmp	r0, #72	; 0x48
 8002342:	d008      	beq.n	8002356 <xQueueGenericCreateStatic+0x76>
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	e7fe      	b.n	8002354 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002356:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002358:	2001      	movs	r0, #1
 800235a:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800235e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002360:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002362:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002364:	2101      	movs	r1, #1
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff ff78 	bl	800225c <xQueueGenericReset>
	}
 800236c:	4620      	mov	r0, r4
 800236e:	b002      	add	sp, #8
 8002370:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002372:	2248      	movs	r2, #72	; 0x48
 8002374:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002376:	9a01      	ldr	r2, [sp, #4]
 8002378:	2a48      	cmp	r2, #72	; 0x48
 800237a:	d1e3      	bne.n	8002344 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800237c:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800237e:	2201      	movs	r2, #1
 8002380:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002384:	4622      	mov	r2, r4
 8002386:	e7ea      	b.n	800235e <xQueueGenericCreateStatic+0x7e>

08002388 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002388:	b940      	cbnz	r0, 800239c <xQueueGenericCreate+0x14>
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	e7fe      	b.n	800239a <xQueueGenericCreate+0x12>
	{
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	460d      	mov	r5, r1
 80023a0:	4606      	mov	r6, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023a6:	3048      	adds	r0, #72	; 0x48
 80023a8:	f001 fbb2 	bl	8003b10 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80023ac:	4604      	mov	r4, r0
 80023ae:	b170      	cbz	r0, 80023ce <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80023b6:	b115      	cbz	r5, 80023be <xQueueGenericCreate+0x36>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b8:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023bc:	e000      	b.n	80023c0 <xQueueGenericCreate+0x38>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023be:	4603      	mov	r3, r0
 80023c0:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80023c2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023c4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023c6:	2101      	movs	r1, #1
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff ff47 	bl	800225c <xQueueGenericReset>
	}
 80023ce:	4620      	mov	r0, r4
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080023d4 <xQueueGenericSend>:
{
 80023d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80023dc:	b188      	cbz	r0, 8002402 <xQueueGenericSend+0x2e>
 80023de:	460e      	mov	r6, r1
 80023e0:	461d      	mov	r5, r3
 80023e2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023e4:	b1b1      	cbz	r1, 8002414 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023e6:	2d02      	cmp	r5, #2
 80023e8:	d120      	bne.n	800242c <xQueueGenericSend+0x58>
 80023ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d01d      	beq.n	800242c <xQueueGenericSend+0x58>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	e7fe      	b.n	8002400 <xQueueGenericSend+0x2c>
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002412:	e7fe      	b.n	8002412 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002414:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0e5      	beq.n	80023e6 <xQueueGenericSend+0x12>
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	e7fe      	b.n	800242a <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800242c:	f001 f84c 	bl	80034c8 <xTaskGetSchedulerState>
 8002430:	b950      	cbnz	r0, 8002448 <xQueueGenericSend+0x74>
 8002432:	9b01      	ldr	r3, [sp, #4]
 8002434:	b173      	cbz	r3, 8002454 <xQueueGenericSend+0x80>
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	e7fe      	b.n	8002446 <xQueueGenericSend+0x72>
 8002448:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800244a:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800244e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800255c <xQueueGenericSend+0x188>
 8002452:	e034      	b.n	80024be <xQueueGenericSend+0xea>
 8002454:	2700      	movs	r7, #0
 8002456:	e7f8      	b.n	800244a <xQueueGenericSend+0x76>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002458:	462a      	mov	r2, r5
 800245a:	4631      	mov	r1, r6
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff fe74 	bl	800214a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002462:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002464:	b972      	cbnz	r2, 8002484 <xQueueGenericSend+0xb0>
					else if( xYieldRequired != pdFALSE )
 8002466:	b138      	cbz	r0, 8002478 <xQueueGenericSend+0xa4>
						queueYIELD_IF_USING_PREEMPTION();
 8002468:	4b3c      	ldr	r3, [pc, #240]	; (800255c <xQueueGenericSend+0x188>)
 800246a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002478:	f001 f9e6 	bl	8003848 <vPortExitCritical>
				return pdPASS;
 800247c:	2001      	movs	r0, #1
}
 800247e:	b004      	add	sp, #16
 8002480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002488:	f000 ff86 	bl	8003398 <xTaskRemoveFromEventList>
 800248c:	2800      	cmp	r0, #0
 800248e:	d0f3      	beq.n	8002478 <xQueueGenericSend+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <xQueueGenericSend+0x188>)
 8002492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	e7ea      	b.n	8002478 <xQueueGenericSend+0xa4>
					taskEXIT_CRITICAL();
 80024a2:	f001 f9d1 	bl	8003848 <vPortExitCritical>
					return errQUEUE_FULL;
 80024a6:	2000      	movs	r0, #0
 80024a8:	e7e9      	b.n	800247e <xQueueGenericSend+0xaa>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024aa:	a802      	add	r0, sp, #8
 80024ac:	f000 ffb8 	bl	8003420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024b0:	e012      	b.n	80024d8 <xQueueGenericSend+0x104>
				prvUnlockQueue( pxQueue );
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7ff fe96 	bl	80021e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024b8:	f000 fe48 	bl	800314c <xTaskResumeAll>
 80024bc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80024be:	f001 f9a1 	bl	8003804 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d3c6      	bcc.n	8002458 <xQueueGenericSend+0x84>
 80024ca:	2d02      	cmp	r5, #2
 80024cc:	d0c4      	beq.n	8002458 <xQueueGenericSend+0x84>
				if( xTicksToWait == ( TickType_t ) 0 )
 80024ce:	9b01      	ldr	r3, [sp, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0e6      	beq.n	80024a2 <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	d0e8      	beq.n	80024aa <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 80024d8:	f001 f9b6 	bl	8003848 <vPortExitCritical>
		vTaskSuspendAll();
 80024dc:	f000 fd86 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024e0:	f001 f990 	bl	8003804 <vPortEnterCritical>
 80024e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	bf08      	it	eq
 80024f0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80024f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fe:	bf08      	it	eq
 8002500:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002504:	f001 f9a0 	bl	8003848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002508:	a901      	add	r1, sp, #4
 800250a:	a802      	add	r0, sp, #8
 800250c:	f000 ff94 	bl	8003438 <xTaskCheckForTimeOut>
 8002510:	b9e8      	cbnz	r0, 800254e <xQueueGenericSend+0x17a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002512:	f001 f977 	bl	8003804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002516:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 800251a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800251c:	f001 f994 	bl	8003848 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002520:	45ba      	cmp	sl, r7
 8002522:	d1c6      	bne.n	80024b2 <xQueueGenericSend+0xde>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002524:	9901      	ldr	r1, [sp, #4]
 8002526:	f104 0010 	add.w	r0, r4, #16
 800252a:	f000 ff1d 	bl	8003368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fe58 	bl	80021e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002534:	f000 fe0a 	bl	800314c <xTaskResumeAll>
 8002538:	2800      	cmp	r0, #0
 800253a:	d1bf      	bne.n	80024bc <xQueueGenericSend+0xe8>
					portYIELD_WITHIN_API();
 800253c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002540:	f8c9 3000 	str.w	r3, [r9]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	e7b6      	b.n	80024bc <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff fe48 	bl	80021e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002554:	f000 fdfa 	bl	800314c <xTaskResumeAll>
			return errQUEUE_FULL;
 8002558:	2000      	movs	r0, #0
 800255a:	e790      	b.n	800247e <xQueueGenericSend+0xaa>
 800255c:	e000ed04 	.word	0xe000ed04

08002560 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002560:	b148      	cbz	r0, 8002576 <prvInitialiseMutex+0x16>
	{
 8002562:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002564:	2100      	movs	r1, #0
 8002566:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002568:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800256a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800256c:	460b      	mov	r3, r1
 800256e:	460a      	mov	r2, r1
 8002570:	f7ff ff30 	bl	80023d4 <xQueueGenericSend>
	}
 8002574:	bd10      	pop	{r4, pc}
 8002576:	4770      	bx	lr

08002578 <xQueueCreateMutex>:
	{
 8002578:	b510      	push	{r4, lr}
 800257a:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800257c:	2100      	movs	r1, #0
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff ff02 	bl	8002388 <xQueueGenericCreate>
 8002584:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002586:	f7ff ffeb 	bl	8002560 <prvInitialiseMutex>
	}
 800258a:	4620      	mov	r0, r4
 800258c:	bd10      	pop	{r4, pc}

0800258e <xQueueCreateMutexStatic>:
	{
 800258e:	b510      	push	{r4, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002594:	9000      	str	r0, [sp, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	4611      	mov	r1, r2
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff fea0 	bl	80022e0 <xQueueGenericCreateStatic>
 80025a0:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80025a2:	f7ff ffdd 	bl	8002560 <prvInitialiseMutex>
	}
 80025a6:	4620      	mov	r0, r4
 80025a8:	b002      	add	sp, #8
 80025aa:	bd10      	pop	{r4, pc}

080025ac <xQueueGenericSendFromISR>:
{
 80025ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80025b0:	b190      	cbz	r0, 80025d8 <xQueueGenericSendFromISR+0x2c>
 80025b2:	4689      	mov	r9, r1
 80025b4:	4690      	mov	r8, r2
 80025b6:	461f      	mov	r7, r3
 80025b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ba:	b1b1      	cbz	r1, 80025ea <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025bc:	2f02      	cmp	r7, #2
 80025be:	d120      	bne.n	8002602 <xQueueGenericSendFromISR+0x56>
 80025c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d01d      	beq.n	8002602 <xQueueGenericSendFromISR+0x56>
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	e7fe      	b.n	80025d6 <xQueueGenericSendFromISR+0x2a>
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0e5      	beq.n	80025bc <xQueueGenericSendFromISR+0x10>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	e7fe      	b.n	8002600 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002602:	f001 fa2b 	bl	8003a5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002606:	f3ef 8611 	mrs	r6, BASEPRI
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800261a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800261c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800261e:	429a      	cmp	r2, r3
 8002620:	d306      	bcc.n	8002630 <xQueueGenericSendFromISR+0x84>
 8002622:	2f02      	cmp	r7, #2
 8002624:	d004      	beq.n	8002630 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8002626:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002628:	f386 8811 	msr	BASEPRI, r6
}
 800262c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8002630:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002634:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002636:	463a      	mov	r2, r7
 8002638:	4649      	mov	r1, r9
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff fd85 	bl	800214a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002640:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002644:	d005      	beq.n	8002652 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002646:	1c6b      	adds	r3, r5, #1
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800264e:	2001      	movs	r0, #1
 8002650:	e7ea      	b.n	8002628 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002654:	b90b      	cbnz	r3, 800265a <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
 8002656:	2001      	movs	r0, #1
 8002658:	e7e6      	b.n	8002628 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800265a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800265e:	f000 fe9b 	bl	8003398 <xTaskRemoveFromEventList>
 8002662:	b130      	cbz	r0, 8002672 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8002664:	f1b8 0f00 	cmp.w	r8, #0
 8002668:	d005      	beq.n	8002676 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800266a:	2001      	movs	r0, #1
 800266c:	f8c8 0000 	str.w	r0, [r8]
 8002670:	e7da      	b.n	8002628 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8002672:	2001      	movs	r0, #1
 8002674:	e7d8      	b.n	8002628 <xQueueGenericSendFromISR+0x7c>
 8002676:	2001      	movs	r0, #1
 8002678:	e7d6      	b.n	8002628 <xQueueGenericSendFromISR+0x7c>

0800267a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800267a:	b168      	cbz	r0, 8002698 <xQueueGiveFromISR+0x1e>
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	460e      	mov	r6, r1
 8002680:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8002682:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002684:	b18b      	cbz	r3, 80026aa <xQueueGiveFromISR+0x30>
	__asm volatile
 8002686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268a:	f383 8811 	msr	BASEPRI, r3
 800268e:	f3bf 8f6f 	isb	sy
 8002692:	f3bf 8f4f 	dsb	sy
 8002696:	e7fe      	b.n	8002696 <xQueueGiveFromISR+0x1c>
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80026a8:	e7fe      	b.n	80026a8 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	b1eb      	cbz	r3, 80026ea <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ae:	f001 f9d5 	bl	8003a5c <vPortValidateInterruptPriority>
	__asm volatile
 80026b2:	f3ef 8511 	mrs	r5, BASEPRI
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80026c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d926      	bls.n	800271c <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80026ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80026d2:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026d4:	3201      	adds	r2, #1
 80026d6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d011      	beq.n	8002702 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026de:	3301      	adds	r3, #1
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80026e6:	2001      	movs	r0, #1
 80026e8:	e019      	b.n	800271e <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80026ea:	6883      	ldr	r3, [r0, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0de      	beq.n	80026ae <xQueueGiveFromISR+0x34>
	__asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	e7fe      	b.n	8002700 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002704:	b90b      	cbnz	r3, 800270a <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8002706:	2001      	movs	r0, #1
 8002708:	e009      	b.n	800271e <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800270a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800270e:	f000 fe43 	bl	8003398 <xTaskRemoveFromEventList>
 8002712:	b138      	cbz	r0, 8002724 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8002714:	b146      	cbz	r6, 8002728 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002716:	2001      	movs	r0, #1
 8002718:	6030      	str	r0, [r6, #0]
 800271a:	e000      	b.n	800271e <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800271c:	2000      	movs	r0, #0
	__asm volatile
 800271e:	f385 8811 	msr	BASEPRI, r5
}
 8002722:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8002724:	2001      	movs	r0, #1
 8002726:	e7fa      	b.n	800271e <xQueueGiveFromISR+0xa4>
 8002728:	2001      	movs	r0, #1
 800272a:	e7f8      	b.n	800271e <xQueueGiveFromISR+0xa4>

0800272c <xQueueReceive>:
{
 800272c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002730:	b085      	sub	sp, #20
 8002732:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002734:	b180      	cbz	r0, 8002758 <xQueueReceive+0x2c>
 8002736:	460e      	mov	r6, r1
 8002738:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800273a:	b1b1      	cbz	r1, 800276a <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273c:	f000 fec4 	bl	80034c8 <xTaskGetSchedulerState>
 8002740:	b9f8      	cbnz	r0, 8002782 <xQueueReceive+0x56>
 8002742:	9b01      	ldr	r3, [sp, #4]
 8002744:	b31b      	cbz	r3, 800278e <xQueueReceive+0x62>
	__asm volatile
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	e7fe      	b.n	8002756 <xQueueReceive+0x2a>
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002768:	e7fe      	b.n	8002768 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800276a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0e5      	beq.n	800273c <xQueueReceive+0x10>
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	e7fe      	b.n	8002780 <xQueueReceive+0x54>
 8002782:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8002784:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002788:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002888 <xQueueReceive+0x15c>
 800278c:	e037      	b.n	80027fe <xQueueReceive+0xd2>
 800278e:	2700      	movs	r7, #0
 8002790:	e7f8      	b.n	8002784 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002792:	4631      	mov	r1, r6
 8002794:	4620      	mov	r0, r4
 8002796:	f7ff fd13 	bl	80021c0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800279a:	3d01      	subs	r5, #1
 800279c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279e:	6923      	ldr	r3, [r4, #16]
 80027a0:	b92b      	cbnz	r3, 80027ae <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 80027a2:	f001 f851 	bl	8003848 <vPortExitCritical>
				return pdPASS;
 80027a6:	2001      	movs	r0, #1
}
 80027a8:	b005      	add	sp, #20
 80027aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ae:	f104 0010 	add.w	r0, r4, #16
 80027b2:	f000 fdf1 	bl	8003398 <xTaskRemoveFromEventList>
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d0f3      	beq.n	80027a2 <xQueueReceive+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <xQueueReceive+0x15c>)
 80027bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	e7ea      	b.n	80027a2 <xQueueReceive+0x76>
					taskEXIT_CRITICAL();
 80027cc:	f001 f83c 	bl	8003848 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80027d0:	2000      	movs	r0, #0
 80027d2:	e7e9      	b.n	80027a8 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d4:	a802      	add	r0, sp, #8
 80027d6:	f000 fe23 	bl	8003420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027da:	e01a      	b.n	8002812 <xQueueReceive+0xe6>
				prvUnlockQueue( pxQueue );
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff fd01 	bl	80021e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027e2:	f000 fcb3 	bl	800314c <xTaskResumeAll>
 80027e6:	e009      	b.n	80027fc <xQueueReceive+0xd0>
			prvUnlockQueue( pxQueue );
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff fcfb 	bl	80021e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027ee:	f000 fcad 	bl	800314c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fc9e 	bl	8002134 <prvIsQueueEmpty>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d142      	bne.n	8002882 <xQueueReceive+0x156>
 80027fc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80027fe:	f001 f801 	bl	8003804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002802:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002804:	2d00      	cmp	r5, #0
 8002806:	d1c4      	bne.n	8002792 <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002808:	9b01      	ldr	r3, [sp, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0de      	beq.n	80027cc <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800280e:	2f00      	cmp	r7, #0
 8002810:	d0e0      	beq.n	80027d4 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
 8002812:	f001 f819 	bl	8003848 <vPortExitCritical>
		vTaskSuspendAll();
 8002816:	f000 fbe9 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800281a:	f000 fff3 	bl	8003804 <vPortEnterCritical>
 800281e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002822:	b25b      	sxtb	r3, r3
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	bf08      	it	eq
 800282a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800282e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	bf08      	it	eq
 800283a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800283e:	f001 f803 	bl	8003848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002842:	a901      	add	r1, sp, #4
 8002844:	a802      	add	r0, sp, #8
 8002846:	f000 fdf7 	bl	8003438 <xTaskCheckForTimeOut>
 800284a:	2800      	cmp	r0, #0
 800284c:	d1cc      	bne.n	80027e8 <xQueueReceive+0xbc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fc70 	bl	8002134 <prvIsQueueEmpty>
 8002854:	2800      	cmp	r0, #0
 8002856:	d0c1      	beq.n	80027dc <xQueueReceive+0xb0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002858:	9901      	ldr	r1, [sp, #4]
 800285a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800285e:	f000 fd83 	bl	8003368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff fcbe 	bl	80021e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002868:	f000 fc70 	bl	800314c <xTaskResumeAll>
 800286c:	2800      	cmp	r0, #0
 800286e:	d1c5      	bne.n	80027fc <xQueueReceive+0xd0>
					portYIELD_WITHIN_API();
 8002870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002874:	f8c9 3000 	str.w	r3, [r9]
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	e7bc      	b.n	80027fc <xQueueReceive+0xd0>
				return errQUEUE_EMPTY;
 8002882:	2000      	movs	r0, #0
 8002884:	e790      	b.n	80027a8 <xQueueReceive+0x7c>
 8002886:	bf00      	nop
 8002888:	e000ed04 	.word	0xe000ed04

0800288c <xQueueSemaphoreTake>:
{
 800288c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002894:	b158      	cbz	r0, 80028ae <xQueueSemaphoreTake+0x22>
 8002896:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8002898:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800289a:	b18b      	cbz	r3, 80028c0 <xQueueSemaphoreTake+0x34>
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	e7fe      	b.n	80028ac <xQueueSemaphoreTake+0x20>
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80028be:	e7fe      	b.n	80028be <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c0:	f000 fe02 	bl	80034c8 <xTaskGetSchedulerState>
 80028c4:	b950      	cbnz	r0, 80028dc <xQueueSemaphoreTake+0x50>
 80028c6:	9b01      	ldr	r3, [sp, #4]
 80028c8:	b173      	cbz	r3, 80028e8 <xQueueSemaphoreTake+0x5c>
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	e7fe      	b.n	80028da <xQueueSemaphoreTake+0x4e>
 80028dc:	2500      	movs	r5, #0
 80028de:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80028e0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80028e2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8002a34 <xQueueSemaphoreTake+0x1a8>
 80028e6:	e04d      	b.n	8002984 <xQueueSemaphoreTake+0xf8>
 80028e8:	2500      	movs	r5, #0
 80028ea:	462e      	mov	r6, r5
 80028ec:	e7f8      	b.n	80028e0 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80028ee:	3b01      	subs	r3, #1
 80028f0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	b143      	cbz	r3, 8002908 <xQueueSemaphoreTake+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f6:	6923      	ldr	r3, [r4, #16]
 80028f8:	b953      	cbnz	r3, 8002910 <xQueueSemaphoreTake+0x84>
				taskEXIT_CRITICAL();
 80028fa:	f000 ffa5 	bl	8003848 <vPortExitCritical>
				return pdPASS;
 80028fe:	2501      	movs	r5, #1
}
 8002900:	4628      	mov	r0, r5
 8002902:	b004      	add	sp, #16
 8002904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002908:	f000 ff02 	bl	8003710 <pvTaskIncrementMutexHeldCount>
 800290c:	60a0      	str	r0, [r4, #8]
 800290e:	e7f2      	b.n	80028f6 <xQueueSemaphoreTake+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002910:	f104 0010 	add.w	r0, r4, #16
 8002914:	f000 fd40 	bl	8003398 <xTaskRemoveFromEventList>
 8002918:	2800      	cmp	r0, #0
 800291a:	d0ee      	beq.n	80028fa <xQueueSemaphoreTake+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
 800291c:	4b45      	ldr	r3, [pc, #276]	; (8002a34 <xQueueSemaphoreTake+0x1a8>)
 800291e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	e7e5      	b.n	80028fa <xQueueSemaphoreTake+0x6e>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800292e:	b145      	cbz	r5, 8002942 <xQueueSemaphoreTake+0xb6>
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	e7fe      	b.n	8002940 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 8002942:	f000 ff81 	bl	8003848 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002946:	e7db      	b.n	8002900 <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002948:	a802      	add	r0, sp, #8
 800294a:	f000 fd69 	bl	8003420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800294e:	e023      	b.n	8002998 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8002950:	f000 ff58 	bl	8003804 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002954:	68a0      	ldr	r0, [r4, #8]
 8002956:	f000 fdc7 	bl	80034e8 <xTaskPriorityInherit>
 800295a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800295c:	f000 ff74 	bl	8003848 <vPortExitCritical>
 8002960:	e040      	b.n	80029e4 <xQueueSemaphoreTake+0x158>
				prvUnlockQueue( pxQueue );
 8002962:	4620      	mov	r0, r4
 8002964:	f7ff fc3e 	bl	80021e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002968:	f000 fbf0 	bl	800314c <xTaskResumeAll>
 800296c:	e009      	b.n	8002982 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff fc38 	bl	80021e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002974:	f000 fbea 	bl	800314c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002978:	4620      	mov	r0, r4
 800297a:	f7ff fbdb 	bl	8002134 <prvIsQueueEmpty>
 800297e:	2800      	cmp	r0, #0
 8002980:	d145      	bne.n	8002a0e <xQueueSemaphoreTake+0x182>
 8002982:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002984:	f000 ff3e 	bl	8003804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1af      	bne.n	80028ee <xQueueSemaphoreTake+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0cc      	beq.n	800292e <xQueueSemaphoreTake+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8002994:	2e00      	cmp	r6, #0
 8002996:	d0d7      	beq.n	8002948 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 8002998:	f000 ff56 	bl	8003848 <vPortExitCritical>
		vTaskSuspendAll();
 800299c:	f000 fb26 	bl	8002fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029a0:	f000 ff30 	bl	8003804 <vPortEnterCritical>
 80029a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029a8:	b25b      	sxtb	r3, r3
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	bf08      	it	eq
 80029b0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80029b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80029b8:	b25b      	sxtb	r3, r3
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	bf08      	it	eq
 80029c0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80029c4:	f000 ff40 	bl	8003848 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029c8:	a901      	add	r1, sp, #4
 80029ca:	a802      	add	r0, sp, #8
 80029cc:	f000 fd34 	bl	8003438 <xTaskCheckForTimeOut>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d1cc      	bne.n	800296e <xQueueSemaphoreTake+0xe2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fbad 	bl	8002134 <prvIsQueueEmpty>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d0c1      	beq.n	8002962 <xQueueSemaphoreTake+0xd6>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0b5      	beq.n	8002950 <xQueueSemaphoreTake+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029e4:	9901      	ldr	r1, [sp, #4]
 80029e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029ea:	f000 fcbd 	bl	8003368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ee:	4620      	mov	r0, r4
 80029f0:	f7ff fbf8 	bl	80021e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029f4:	f000 fbaa 	bl	800314c <xTaskResumeAll>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d1c2      	bne.n	8002982 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 80029fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a00:	f8c8 3000 	str.w	r3, [r8]
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	e7b9      	b.n	8002982 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	f43f af76 	beq.w	8002900 <xQueueSemaphoreTake+0x74>
						taskENTER_CRITICAL();
 8002a14:	f000 fef6 	bl	8003804 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002a18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a1a:	b119      	cbz	r1, 8002a24 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a1e:	6819      	ldr	r1, [r3, #0]
 8002a20:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002a24:	68a0      	ldr	r0, [r4, #8]
 8002a26:	f000 fe13 	bl	8003650 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8002a2a:	f000 ff0d 	bl	8003848 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002a2e:	2500      	movs	r5, #0
 8002a30:	e766      	b.n	8002900 <xQueueSemaphoreTake+0x74>
 8002a32:	bf00      	nop
 8002a34:	e000ed04 	.word	0xe000ed04

08002a38 <xQueueReceiveFromISR>:
{
 8002a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002a3c:	b1c8      	cbz	r0, 8002a72 <xQueueReceiveFromISR+0x3a>
 8002a3e:	4689      	mov	r9, r1
 8002a40:	4617      	mov	r7, r2
 8002a42:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a44:	b1f1      	cbz	r1, 8002a84 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a46:	f001 f809 	bl	8003a5c <vPortValidateInterruptPriority>
	__asm volatile
 8002a4a:	f3ef 8611 	mrs	r6, BASEPRI
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a62:	f1b8 0f00 	cmp.w	r8, #0
 8002a66:	d119      	bne.n	8002a9c <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 8002a68:	2000      	movs	r0, #0
	__asm volatile
 8002a6a:	f386 8811 	msr	BASEPRI, r6
}
 8002a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002a82:	e7fe      	b.n	8002a82 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a84:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0dd      	beq.n	8002a46 <xQueueReceiveFromISR+0xe>
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	e7fe      	b.n	8002a9a <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a9c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002aa0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f7ff fb8b 	bl	80021c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002aaa:	f108 33ff 	add.w	r3, r8, #4294967295
 8002aae:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002ab0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ab4:	d005      	beq.n	8002ac2 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002ab6:	1c6b      	adds	r3, r5, #1
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8002abe:	2001      	movs	r0, #1
 8002ac0:	e7d3      	b.n	8002a6a <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac2:	6923      	ldr	r3, [r4, #16]
 8002ac4:	b90b      	cbnz	r3, 8002aca <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	e7cf      	b.n	8002a6a <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aca:	f104 0010 	add.w	r0, r4, #16
 8002ace:	f000 fc63 	bl	8003398 <xTaskRemoveFromEventList>
 8002ad2:	b118      	cbz	r0, 8002adc <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 8002ad4:	b127      	cbz	r7, 8002ae0 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	6038      	str	r0, [r7, #0]
 8002ada:	e7c6      	b.n	8002a6a <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 8002adc:	2001      	movs	r0, #1
 8002ade:	e7c4      	b.n	8002a6a <xQueueReceiveFromISR+0x32>
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e7c2      	b.n	8002a6a <xQueueReceiveFromISR+0x32>

08002ae4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8002ae4:	b140      	cbz	r0, 8002af8 <uxQueueMessagesWaiting+0x14>
{
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002aea:	f000 fe8b 	bl	8003804 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002aee:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8002af0:	f000 feaa 	bl	8003848 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002af4:	4620      	mov	r0, r4
 8002af6:	bd10      	pop	{r4, pc}
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8002b08:	e7fe      	b.n	8002b08 <uxQueueMessagesWaiting+0x24>

08002b0a <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8002b0a:	b108      	cbz	r0, 8002b10 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8002b0c:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002b0e:	4770      	bx	lr
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002b20:	e7fe      	b.n	8002b20 <uxQueueMessagesWaitingFromISR+0x16>
	...

08002b24 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b24:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <vQueueUnregisterQueue+0x24>)
 8002b28:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8002b2c:	4282      	cmp	r2, r0
 8002b2e:	d003      	beq.n	8002b38 <vQueueUnregisterQueue+0x14>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b30:	3301      	adds	r3, #1
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d1f8      	bne.n	8002b28 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002b36:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <vQueueUnregisterQueue+0x28>)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002b44:	6059      	str	r1, [r3, #4]
				break;
 8002b46:	4770      	bx	lr
 8002b48:	20010d58 	.word	0x20010d58
 8002b4c:	20010d54 	.word	0x20010d54

08002b50 <vQueueDelete>:
	configASSERT( pxQueue );
 8002b50:	b138      	cbz	r0, 8002b62 <vQueueDelete+0x12>
{
 8002b52:	b510      	push	{r4, lr}
 8002b54:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8002b56:	f7ff ffe5 	bl	8002b24 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002b5a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002b5e:	b14b      	cbz	r3, 8002b74 <vQueueDelete+0x24>
}
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002b72:	e7fe      	b.n	8002b72 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8002b74:	4620      	mov	r0, r4
 8002b76:	f001 f863 	bl	8003c40 <vPortFree>
}
 8002b7a:	e7f1      	b.n	8002b60 <vQueueDelete+0x10>

08002b7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <prvResetNextTaskUnblockTime+0x24>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b923      	cbnz	r3, 8002b8e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <prvResetNextTaskUnblockTime+0x28>)
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <prvResetNextTaskUnblockTime+0x24>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <prvResetNextTaskUnblockTime+0x28>)
 8002b9a:	601a      	str	r2, [r3, #0]
	}
}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200000d8 	.word	0x200000d8
 8002ba4:	200001ac 	.word	0x200001ac

08002ba8 <prvInitialiseNewTask>:
{
 8002ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	4607      	mov	r7, r0
 8002bae:	468a      	mov	sl, r1
 8002bb0:	4698      	mov	r8, r3
 8002bb2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8002bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bb8:	0096      	lsls	r6, r2, #2
 8002bba:	4632      	mov	r2, r6
 8002bbc:	21a5      	movs	r1, #165	; 0xa5
 8002bbe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bc0:	f027 fce3 	bl	802a58a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bc4:	3e04      	subs	r6, #4
 8002bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bc8:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bca:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8002bce:	f1ba 0f00 	cmp.w	sl, #0
 8002bd2:	d036      	beq.n	8002c42 <prvInitialiseNewTask+0x9a>
 8002bd4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8002bd8:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8002bdc:	f10a 030f 	add.w	r3, sl, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002be0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002be4:	f805 1f01 	strb.w	r1, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002be8:	b109      	cbz	r1, 8002bee <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d1f8      	bne.n	8002be0 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bf4:	9d08      	ldr	r5, [sp, #32]
 8002bf6:	2d06      	cmp	r5, #6
 8002bf8:	bf28      	it	cs
 8002bfa:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8002bfc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002bfe:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c00:	f04f 0a00 	mov.w	sl, #0
 8002c04:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c08:	1d20      	adds	r0, r4, #4
 8002c0a:	f7ff fa5a 	bl	80020c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c0e:	f104 0018 	add.w	r0, r4, #24
 8002c12:	f7ff fa56 	bl	80020c2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c16:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c18:	f1c5 0507 	rsb	r5, r5, #7
 8002c1c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c1e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002c20:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c24:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c28:	4642      	mov	r2, r8
 8002c2a:	4639      	mov	r1, r7
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	f000 fdbb 	bl	80037a8 <pxPortInitialiseStack>
 8002c32:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8002c34:	f1b9 0f00 	cmp.w	r9, #0
 8002c38:	d001      	beq.n	8002c3e <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c3a:	f8c9 4000 	str.w	r4, [r9]
}
 8002c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002c48:	e7d4      	b.n	8002bf4 <prvInitialiseNewTask+0x4c>
	...

08002c4c <prvAddNewTaskToReadyList>:
{
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002c50:	f000 fdd8 	bl	8003804 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <prvAddNewTaskToReadyList+0xec>)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <prvAddNewTaskToReadyList+0xf0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d031      	beq.n	8002cc8 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <prvAddNewTaskToReadyList+0xf4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b93b      	cbnz	r3, 8002c7a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <prvAddNewTaskToReadyList+0xf0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c72:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002c74:	bf9c      	itt	ls
 8002c76:	4b31      	ldrls	r3, [pc, #196]	; (8002d3c <prvAddNewTaskToReadyList+0xf0>)
 8002c78:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 8002c7a:	4a32      	ldr	r2, [pc, #200]	; (8002d44 <prvAddNewTaskToReadyList+0xf8>)
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002c84:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <prvAddNewTaskToReadyList+0xfc>)
 8002c86:	6811      	ldr	r1, [r2, #0]
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4083      	lsls	r3, r0
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c94:	1d21      	adds	r1, r4, #4
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <prvAddNewTaskToReadyList+0x100>)
 8002c98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c9c:	f7ff fa14 	bl	80020c8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002ca0:	f000 fdd2 	bl	8003848 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <prvAddNewTaskToReadyList+0xf4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b16b      	cbz	r3, 8002cc6 <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <prvAddNewTaskToReadyList+0xf0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d207      	bcs.n	8002cc6 <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <prvAddNewTaskToReadyList+0x104>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
}
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <prvAddNewTaskToReadyList+0xf0>)
 8002cca:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d1d3      	bne.n	8002c7a <prvAddNewTaskToReadyList+0x2e>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cd2:	4d1e      	ldr	r5, [pc, #120]	; (8002d4c <prvAddNewTaskToReadyList+0x100>)
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	f7ff f9e9 	bl	80020ac <vListInitialise>
 8002cda:	f105 0014 	add.w	r0, r5, #20
 8002cde:	f7ff f9e5 	bl	80020ac <vListInitialise>
 8002ce2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8002ce6:	f7ff f9e1 	bl	80020ac <vListInitialise>
 8002cea:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002cee:	f7ff f9dd 	bl	80020ac <vListInitialise>
 8002cf2:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8002cf6:	f7ff f9d9 	bl	80020ac <vListInitialise>
 8002cfa:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8002cfe:	f7ff f9d5 	bl	80020ac <vListInitialise>
 8002d02:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8002d06:	f7ff f9d1 	bl	80020ac <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8002d0a:	4e12      	ldr	r6, [pc, #72]	; (8002d54 <prvAddNewTaskToReadyList+0x108>)
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	f7ff f9cd 	bl	80020ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d12:	4d11      	ldr	r5, [pc, #68]	; (8002d58 <prvAddNewTaskToReadyList+0x10c>)
 8002d14:	4628      	mov	r0, r5
 8002d16:	f7ff f9c9 	bl	80020ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d1a:	4810      	ldr	r0, [pc, #64]	; (8002d5c <prvAddNewTaskToReadyList+0x110>)
 8002d1c:	f7ff f9c6 	bl	80020ac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002d20:	480f      	ldr	r0, [pc, #60]	; (8002d60 <prvAddNewTaskToReadyList+0x114>)
 8002d22:	f7ff f9c3 	bl	80020ac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002d26:	480f      	ldr	r0, [pc, #60]	; (8002d64 <prvAddNewTaskToReadyList+0x118>)
 8002d28:	f7ff f9c0 	bl	80020ac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <prvAddNewTaskToReadyList+0x11c>)
 8002d2e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <prvAddNewTaskToReadyList+0x120>)
 8002d32:	601d      	str	r5, [r3, #0]
}
 8002d34:	e7a1      	b.n	8002c7a <prvAddNewTaskToReadyList+0x2e>
 8002d36:	bf00      	nop
 8002d38:	2000016c 	.word	0x2000016c
 8002d3c:	200000d4 	.word	0x200000d4
 8002d40:	200001c8 	.word	0x200001c8
 8002d44:	2000017c 	.word	0x2000017c
 8002d48:	20000180 	.word	0x20000180
 8002d4c:	200000e0 	.word	0x200000e0
 8002d50:	e000ed04 	.word	0xe000ed04
 8002d54:	20000184 	.word	0x20000184
 8002d58:	20000198 	.word	0x20000198
 8002d5c:	200001b4 	.word	0x200001b4
 8002d60:	200001e0 	.word	0x200001e0
 8002d64:	200001cc 	.word	0x200001cc
 8002d68:	200000d8 	.word	0x200000d8
 8002d6c:	200000dc 	.word	0x200000dc

08002d70 <prvDeleteTCB>:
	{
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d74:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002d78:	b163      	cbz	r3, 8002d94 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d011      	beq.n	8002da2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d00e      	beq.n	8002da0 <prvDeleteTCB+0x30>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	e7fe      	b.n	8002d92 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8002d94:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002d96:	f000 ff53 	bl	8003c40 <vPortFree>
				vPortFree( pxTCB );
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f000 ff50 	bl	8003c40 <vPortFree>
	}
 8002da0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8002da2:	f000 ff4d 	bl	8003c40 <vPortFree>
 8002da6:	e7fb      	b.n	8002da0 <prvDeleteTCB+0x30>

08002da8 <prvIdleTask>:
{
 8002da8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002daa:	4c14      	ldr	r4, [pc, #80]	; (8002dfc <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dac:	4f14      	ldr	r7, [pc, #80]	; (8002e00 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8002dae:	4e15      	ldr	r6, [pc, #84]	; (8002e04 <prvIdleTask+0x5c>)
				taskYIELD();
 8002db0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8002e0c <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	b1a3      	cbz	r3, 8002de2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8002db8:	f000 fd24 	bl	8003804 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc0:	1d28      	adds	r0, r5, #4
 8002dc2:	f7ff f9a5 	bl	8002110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002dc6:	6833      	ldr	r3, [r6, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002dd2:	f000 fd39 	bl	8003848 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f7ff ffca 	bl	8002d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ea      	bne.n	8002db8 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <prvIdleTask+0x60>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d9e4      	bls.n	8002db4 <prvIdleTask+0xc>
				taskYIELD();
 8002dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dee:	f8c8 3000 	str.w	r3, [r8]
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	e7db      	b.n	8002db4 <prvIdleTask+0xc>
 8002dfc:	20000170 	.word	0x20000170
 8002e00:	200001e0 	.word	0x200001e0
 8002e04:	2000016c 	.word	0x2000016c
 8002e08:	200000e0 	.word	0x200000e0
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	4604      	mov	r4, r0
 8002e14:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002e18:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	3004      	adds	r0, #4
 8002e20:	f7ff f976 	bl	8002110 <uxListRemove>
 8002e24:	b948      	cbnz	r0, 8002e3a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	491a      	ldr	r1, [pc, #104]	; (8002e94 <prvAddCurrentTaskToDelayedList+0x84>)
 8002e2c:	680b      	ldr	r3, [r1, #0]
 8002e2e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8002e30:	2201      	movs	r2, #1
 8002e32:	4082      	lsls	r2, r0
 8002e34:	ea23 0302 	bic.w	r3, r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e3a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002e3e:	d00d      	beq.n	8002e5c <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e40:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d910      	bls.n	8002e6e <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x88>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	3104      	adds	r1, #4
 8002e56:	f7ff f942 	bl	80020de <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e5c:	2d00      	cmp	r5, #0
 8002e5e:	d0ef      	beq.n	8002e40 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	3104      	adds	r1, #4
 8002e66:	480d      	ldr	r0, [pc, #52]	; (8002e9c <prvAddCurrentTaskToDelayedList+0x8c>)
 8002e68:	f7ff f92e 	bl	80020c8 <vListInsertEnd>
 8002e6c:	e7f5      	b.n	8002e5a <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <prvAddCurrentTaskToDelayedList+0x80>)
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	3104      	adds	r1, #4
 8002e78:	f7ff f931 	bl	80020de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002e82:	bf84      	itt	hi
 8002e84:	4b07      	ldrhi	r3, [pc, #28]	; (8002ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8002e86:	601c      	strhi	r4, [r3, #0]
}
 8002e88:	e7e7      	b.n	8002e5a <prvAddCurrentTaskToDelayedList+0x4a>
 8002e8a:	bf00      	nop
 8002e8c:	200001f4 	.word	0x200001f4
 8002e90:	200000d4 	.word	0x200000d4
 8002e94:	20000180 	.word	0x20000180
 8002e98:	200000dc 	.word	0x200000dc
 8002e9c:	200001cc 	.word	0x200001cc
 8002ea0:	200000d8 	.word	0x200000d8
 8002ea4:	200001ac 	.word	0x200001ac

08002ea8 <xTaskCreateStatic>:
	{
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002eae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002eb0:	b175      	cbz	r5, 8002ed0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002eb2:	b1b4      	cbz	r4, 8002ee2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002eb4:	2654      	movs	r6, #84	; 0x54
 8002eb6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002eb8:	9e04      	ldr	r6, [sp, #16]
 8002eba:	2e54      	cmp	r6, #84	; 0x54
 8002ebc:	d01a      	beq.n	8002ef4 <xTaskCreateStatic+0x4c>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	e7fe      	b.n	8002ece <xTaskCreateStatic+0x26>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002ee0:	e7fe      	b.n	8002ee0 <xTaskCreateStatic+0x38>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002ef2:	e7fe      	b.n	8002ef2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ef4:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ef6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ef8:	2502      	movs	r5, #2
 8002efa:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002efe:	2500      	movs	r5, #0
 8002f00:	9503      	str	r5, [sp, #12]
 8002f02:	9402      	str	r4, [sp, #8]
 8002f04:	ad05      	add	r5, sp, #20
 8002f06:	9501      	str	r5, [sp, #4]
 8002f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002f0a:	9500      	str	r5, [sp, #0]
 8002f0c:	f7ff fe4c 	bl	8002ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7ff fe9b 	bl	8002c4c <prvAddNewTaskToReadyList>
	}
 8002f16:	9805      	ldr	r0, [sp, #20]
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}

08002f1c <xTaskCreate>:
	{
 8002f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f20:	b085      	sub	sp, #20
 8002f22:	4607      	mov	r7, r0
 8002f24:	4688      	mov	r8, r1
 8002f26:	4614      	mov	r4, r2
 8002f28:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f2a:	0090      	lsls	r0, r2, #2
 8002f2c:	f000 fdf0 	bl	8003b10 <pvPortMalloc>
			if( pxStack != NULL )
 8002f30:	b308      	cbz	r0, 8002f76 <xTaskCreate+0x5a>
 8002f32:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f34:	2054      	movs	r0, #84	; 0x54
 8002f36:	f000 fdeb 	bl	8003b10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	b1a8      	cbz	r0, 8002f6a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8002f3e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f48:	9303      	str	r3, [sp, #12]
 8002f4a:	9002      	str	r0, [sp, #8]
 8002f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4633      	mov	r3, r6
 8002f56:	4622      	mov	r2, r4
 8002f58:	4641      	mov	r1, r8
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	f7ff fe24 	bl	8002ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7ff fe73 	bl	8002c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f66:	2001      	movs	r0, #1
 8002f68:	e007      	b.n	8002f7a <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8002f6a:	4648      	mov	r0, r9
 8002f6c:	f000 fe68 	bl	8003c40 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e001      	b.n	8002f7a <xTaskCreate+0x5e>
 8002f76:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8002f7a:	b005      	add	sp, #20
 8002f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002f80 <vTaskStartScheduler>:
{
 8002f80:	b510      	push	{r4, lr}
 8002f82:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f84:	2400      	movs	r4, #0
 8002f86:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f88:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f8a:	aa07      	add	r2, sp, #28
 8002f8c:	a906      	add	r1, sp, #24
 8002f8e:	a805      	add	r0, sp, #20
 8002f90:	f026 fc50 	bl	8029834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f94:	9b05      	ldr	r3, [sp, #20]
 8002f96:	9302      	str	r3, [sp, #8]
 8002f98:	9b06      	ldr	r3, [sp, #24]
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	9400      	str	r4, [sp, #0]
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	9a07      	ldr	r2, [sp, #28]
 8002fa2:	490d      	ldr	r1, [pc, #52]	; (8002fd8 <vTaskStartScheduler+0x58>)
 8002fa4:	480d      	ldr	r0, [pc, #52]	; (8002fdc <vTaskStartScheduler+0x5c>)
 8002fa6:	f7ff ff7f 	bl	8002ea8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002faa:	b190      	cbz	r0, 8002fd2 <vTaskStartScheduler+0x52>
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <vTaskStartScheduler+0x60>)
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <vTaskStartScheduler+0x64>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <vTaskStartScheduler+0x68>)
 8002fcc:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002fce:	f000 fcbb 	bl	8003948 <xPortStartScheduler>
}
 8002fd2:	b008      	add	sp, #32
 8002fd4:	bd10      	pop	{r4, pc}
 8002fd6:	bf00      	nop
 8002fd8:	0802bbe8 	.word	0x0802bbe8
 8002fdc:	08002da9 	.word	0x08002da9
 8002fe0:	200001ac 	.word	0x200001ac
 8002fe4:	200001c8 	.word	0x200001c8
 8002fe8:	200001f4 	.word	0x200001f4

08002fec <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <vTaskSuspendAll+0xc>)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000178 	.word	0x20000178

08002ffc <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002ffc:	4b01      	ldr	r3, [pc, #4]	; (8003004 <xTaskGetTickCount+0x8>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200001f4 	.word	0x200001f4

08003008 <xTaskGetTickCountFromISR>:
{
 8003008:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800300a:	f000 fd27 	bl	8003a5c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800300e:	4b01      	ldr	r3, [pc, #4]	; (8003014 <xTaskGetTickCountFromISR+0xc>)
 8003010:	6818      	ldr	r0, [r3, #0]
}
 8003012:	bd08      	pop	{r3, pc}
 8003014:	200001f4 	.word	0x200001f4

08003018 <xTaskIncrementTick>:
{
 8003018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301c:	4b40      	ldr	r3, [pc, #256]	; (8003120 <xTaskIncrementTick+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d16f      	bne.n	8003104 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <xTaskIncrementTick+0x10c>)
 8003026:	681d      	ldr	r5, [r3, #0]
 8003028:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800302a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800302c:	b9c5      	cbnz	r5, 8003060 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <xTaskIncrementTick+0x110>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b143      	cbz	r3, 8003048 <xTaskIncrementTick+0x30>
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	e7fe      	b.n	8003046 <xTaskIncrementTick+0x2e>
 8003048:	4a37      	ldr	r2, [pc, #220]	; (8003128 <xTaskIncrementTick+0x110>)
 800304a:	6811      	ldr	r1, [r2, #0]
 800304c:	4b37      	ldr	r3, [pc, #220]	; (800312c <xTaskIncrementTick+0x114>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	6010      	str	r0, [r2, #0]
 8003052:	6019      	str	r1, [r3, #0]
 8003054:	4a36      	ldr	r2, [pc, #216]	; (8003130 <xTaskIncrementTick+0x118>)
 8003056:	6813      	ldr	r3, [r2, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	f7ff fd8e 	bl	8002b7c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <xTaskIncrementTick+0x11c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	42ab      	cmp	r3, r5
 8003066:	d840      	bhi.n	80030ea <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <xTaskIncrementTick+0x110>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b133      	cbz	r3, 800307e <xTaskIncrementTick+0x66>
BaseType_t xSwitchRequired = pdFALSE;
 8003070:	2400      	movs	r4, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003072:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003128 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8003076:	4f30      	ldr	r7, [pc, #192]	; (8003138 <xTaskIncrementTick+0x120>)
 8003078:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003140 <xTaskIncrementTick+0x128>
 800307c:	e021      	b.n	80030c2 <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800307e:	2400      	movs	r4, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003080:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <xTaskIncrementTick+0x11c>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
					break;
 8003088:	e030      	b.n	80030ec <xTaskIncrementTick+0xd4>
						xNextTaskUnblockTime = xItemValue;
 800308a:	4a2a      	ldr	r2, [pc, #168]	; (8003134 <xTaskIncrementTick+0x11c>)
 800308c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800308e:	e02d      	b.n	80030ec <xTaskIncrementTick+0xd4>
					prvAddTaskToReadyList( pxTCB );
 8003090:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	2301      	movs	r3, #1
 8003096:	4083      	lsls	r3, r0
 8003098:	4313      	orrs	r3, r2
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80030a0:	4649      	mov	r1, r9
 80030a2:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80030a6:	f7ff f80f 	bl	80020c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <xTaskIncrementTick+0x124>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80030b2:	429a      	cmp	r2, r3
 80030b4:	bf28      	it	cs
 80030b6:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b8:	f8d8 3000 	ldr.w	r3, [r8]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0de      	beq.n	8003080 <xTaskIncrementTick+0x68>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c2:	f8d8 3000 	ldr.w	r3, [r8]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ca:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80030cc:	429d      	cmp	r5, r3
 80030ce:	d3dc      	bcc.n	800308a <xTaskIncrementTick+0x72>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d0:	f106 0904 	add.w	r9, r6, #4
 80030d4:	4648      	mov	r0, r9
 80030d6:	f7ff f81b 	bl	8002110 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030da:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0d7      	beq.n	8003090 <xTaskIncrementTick+0x78>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e0:	f106 0018 	add.w	r0, r6, #24
 80030e4:	f7ff f814 	bl	8002110 <uxListRemove>
 80030e8:	e7d2      	b.n	8003090 <xTaskIncrementTick+0x78>
BaseType_t xSwitchRequired = pdFALSE;
 80030ea:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <xTaskIncrementTick+0x124>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4a11      	ldr	r2, [pc, #68]	; (8003140 <xTaskIncrementTick+0x128>)
 80030fa:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	bf28      	it	cs
 8003100:	2401      	movcs	r4, #1
 8003102:	e004      	b.n	800310e <xTaskIncrementTick+0xf6>
		++uxPendedTicks;
 8003104:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <xTaskIncrementTick+0x12c>)
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800310c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <xTaskIncrementTick+0x130>)
 8003110:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8003112:	2b00      	cmp	r3, #0
}
 8003114:	bf0c      	ite	eq
 8003116:	4620      	moveq	r0, r4
 8003118:	2001      	movne	r0, #1
 800311a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311e:	bf00      	nop
 8003120:	20000178 	.word	0x20000178
 8003124:	200001f4 	.word	0x200001f4
 8003128:	200000d8 	.word	0x200000d8
 800312c:	200000dc 	.word	0x200000dc
 8003130:	200001b0 	.word	0x200001b0
 8003134:	200001ac 	.word	0x200001ac
 8003138:	20000180 	.word	0x20000180
 800313c:	200000d4 	.word	0x200000d4
 8003140:	200000e0 	.word	0x200000e0
 8003144:	20000174 	.word	0x20000174
 8003148:	200001f8 	.word	0x200001f8

0800314c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <xTaskResumeAll+0xe4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	b943      	cbnz	r3, 8003164 <xTaskResumeAll+0x18>
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	e7fe      	b.n	8003162 <xTaskResumeAll+0x16>
{
 8003164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8003168:	f000 fb4c 	bl	8003804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800316c:	4b30      	ldr	r3, [pc, #192]	; (8003230 <xTaskResumeAll+0xe4>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	3a01      	subs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d148      	bne.n	800320c <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800317a:	4b2e      	ldr	r3, [pc, #184]	; (8003234 <xTaskResumeAll+0xe8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04a      	beq.n	8003218 <xTaskResumeAll+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <xTaskResumeAll+0xec>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04a      	beq.n	8003220 <xTaskResumeAll+0xd4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800318a:	4e2b      	ldr	r6, [pc, #172]	; (8003238 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 800318c:	4d2b      	ldr	r5, [pc, #172]	; (800323c <xTaskResumeAll+0xf0>)
 800318e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003250 <xTaskResumeAll+0x104>
 8003192:	e002      	b.n	800319a <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003194:	6833      	ldr	r3, [r6, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <xTaskResumeAll+0xd0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800319a:	68f3      	ldr	r3, [r6, #12]
 800319c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800319e:	f104 0018 	add.w	r0, r4, #24
 80031a2:	f7fe ffb5 	bl	8002110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031a6:	1d27      	adds	r7, r4, #4
 80031a8:	4638      	mov	r0, r7
 80031aa:	f7fe ffb1 	bl	8002110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80031b0:	682a      	ldr	r2, [r5, #0]
 80031b2:	2301      	movs	r3, #1
 80031b4:	4083      	lsls	r3, r0
 80031b6:	4313      	orrs	r3, r2
 80031b8:	602b      	str	r3, [r5, #0]
 80031ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80031be:	4639      	mov	r1, r7
 80031c0:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80031c4:	f7fe ff80 	bl	80020c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <xTaskResumeAll+0xf4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3df      	bcc.n	8003194 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <xTaskResumeAll+0xf8>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e7db      	b.n	8003194 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031dc:	3c01      	subs	r4, #1
 80031de:	d005      	beq.n	80031ec <xTaskResumeAll+0xa0>
							if( xTaskIncrementTick() != pdFALSE )
 80031e0:	f7ff ff1a 	bl	8003018 <xTaskIncrementTick>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0f9      	beq.n	80031dc <xTaskResumeAll+0x90>
								xYieldPending = pdTRUE;
 80031e8:	6035      	str	r5, [r6, #0]
 80031ea:	e7f7      	b.n	80031dc <xTaskResumeAll+0x90>
						uxPendedTicks = 0;
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <xTaskResumeAll+0xfc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80031f2:	4b14      	ldr	r3, [pc, #80]	; (8003244 <xTaskResumeAll+0xf8>)
 80031f4:	681c      	ldr	r4, [r3, #0]
 80031f6:	b154      	cbz	r4, 800320e <xTaskResumeAll+0xc2>
					taskYIELD_IF_USING_PREEMPTION();
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <xTaskResumeAll+0x100>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003208:	2401      	movs	r4, #1
 800320a:	e000      	b.n	800320e <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800320c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800320e:	f000 fb1b 	bl	8003848 <vPortExitCritical>
}
 8003212:	4620      	mov	r0, r4
 8003214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8003218:	2400      	movs	r4, #0
 800321a:	e7f8      	b.n	800320e <xTaskResumeAll+0xc2>
					prvResetNextTaskUnblockTime();
 800321c:	f7ff fcae 	bl	8002b7c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <xTaskResumeAll+0xfc>)
 8003222:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003224:	2c00      	cmp	r4, #0
 8003226:	d0e4      	beq.n	80031f2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8003228:	4e06      	ldr	r6, [pc, #24]	; (8003244 <xTaskResumeAll+0xf8>)
 800322a:	2501      	movs	r5, #1
 800322c:	e7d8      	b.n	80031e0 <xTaskResumeAll+0x94>
 800322e:	bf00      	nop
 8003230:	20000178 	.word	0x20000178
 8003234:	2000016c 	.word	0x2000016c
 8003238:	200001b4 	.word	0x200001b4
 800323c:	20000180 	.word	0x20000180
 8003240:	200000d4 	.word	0x200000d4
 8003244:	200001f8 	.word	0x200001f8
 8003248:	20000174 	.word	0x20000174
 800324c:	e000ed04 	.word	0xe000ed04
 8003250:	200000e0 	.word	0x200000e0

08003254 <vTaskDelay>:
	{
 8003254:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003256:	b1a8      	cbz	r0, 8003284 <vTaskDelay+0x30>
 8003258:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <vTaskDelay+0x44>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	b143      	cbz	r3, 8003272 <vTaskDelay+0x1e>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	e7fe      	b.n	8003270 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003272:	f7ff febb 	bl	8002fec <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003276:	2100      	movs	r1, #0
 8003278:	4620      	mov	r0, r4
 800327a:	f7ff fdc9 	bl	8002e10 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800327e:	f7ff ff65 	bl	800314c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003282:	b938      	cbnz	r0, 8003294 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <vTaskDelay+0x48>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
	}
 8003294:	bd10      	pop	{r4, pc}
 8003296:	bf00      	nop
 8003298:	20000178 	.word	0x20000178
 800329c:	e000ed04 	.word	0xe000ed04

080032a0 <vTaskSwitchContext>:
{
 80032a0:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <vTaskSwitchContext+0xb4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b11b      	cbz	r3, 80032b0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <vTaskSwitchContext+0xb8>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <vTaskSwitchContext+0xb8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80032b6:	4b29      	ldr	r3, [pc, #164]	; (800335c <vTaskSwitchContext+0xbc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80032c2:	d103      	bne.n	80032cc <vTaskSwitchContext+0x2c>
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80032ca:	d01b      	beq.n	8003304 <vTaskSwitchContext+0x64>
 80032cc:	4b23      	ldr	r3, [pc, #140]	; (800335c <vTaskSwitchContext+0xbc>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	3134      	adds	r1, #52	; 0x34
 80032d4:	f026 faa4 	bl	8029820 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <vTaskSwitchContext+0xc0>)
 80032da:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f1c3 031f 	rsb	r3, r3, #31
 80032e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80032ea:	0092      	lsls	r2, r2, #2
 80032ec:	491d      	ldr	r1, [pc, #116]	; (8003364 <vTaskSwitchContext+0xc4>)
 80032ee:	588a      	ldr	r2, [r1, r2]
 80032f0:	b98a      	cbnz	r2, 8003316 <vTaskSwitchContext+0x76>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	e7fe      	b.n	8003302 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800330a:	d1df      	bne.n	80032cc <vTaskSwitchContext+0x2c>
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8003312:	d1db      	bne.n	80032cc <vTaskSwitchContext+0x2c>
 8003314:	e7e0      	b.n	80032d8 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <vTaskSwitchContext+0xc4>)
 8003318:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800331c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8003320:	6848      	ldr	r0, [r1, #4]
 8003322:	6840      	ldr	r0, [r0, #4]
 8003324:	6048      	str	r0, [r1, #4]
 8003326:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800332a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800332e:	3208      	adds	r2, #8
 8003330:	4290      	cmp	r0, r2
 8003332:	d009      	beq.n	8003348 <vTaskSwitchContext+0xa8>
 8003334:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <vTaskSwitchContext+0xc4>)
 800333a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <vTaskSwitchContext+0xbc>)
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	e7b2      	b.n	80032ae <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003348:	6840      	ldr	r0, [r0, #4]
 800334a:	4a06      	ldr	r2, [pc, #24]	; (8003364 <vTaskSwitchContext+0xc4>)
 800334c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003350:	6050      	str	r0, [r2, #4]
 8003352:	e7ef      	b.n	8003334 <vTaskSwitchContext+0x94>
 8003354:	20000178 	.word	0x20000178
 8003358:	200001f8 	.word	0x200001f8
 800335c:	200000d4 	.word	0x200000d4
 8003360:	20000180 	.word	0x20000180
 8003364:	200000e0 	.word	0x200000e0

08003368 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003368:	b158      	cbz	r0, 8003382 <vTaskPlaceOnEventList+0x1a>
{
 800336a:	b510      	push	{r4, lr}
 800336c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <vTaskPlaceOnEventList+0x2c>)
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	3118      	adds	r1, #24
 8003374:	f7fe feb3 	bl	80020de <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003378:	2101      	movs	r1, #1
 800337a:	4620      	mov	r0, r4
 800337c:	f7ff fd48 	bl	8002e10 <prvAddCurrentTaskToDelayedList>
}
 8003380:	bd10      	pop	{r4, pc}
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003392:	e7fe      	b.n	8003392 <vTaskPlaceOnEventList+0x2a>
 8003394:	200000d4 	.word	0x200000d4

08003398 <xTaskRemoveFromEventList>:
{
 8003398:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800339a:	68c3      	ldr	r3, [r0, #12]
 800339c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800339e:	b32c      	cbz	r4, 80033ec <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033a0:	f104 0518 	add.w	r5, r4, #24
 80033a4:	4628      	mov	r0, r5
 80033a6:	f7fe feb3 	bl	8002110 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033aa:	4b17      	ldr	r3, [pc, #92]	; (8003408 <xTaskRemoveFromEventList+0x70>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	bb33      	cbnz	r3, 80033fe <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033b0:	1d25      	adds	r5, r4, #4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f7fe feac 	bl	8002110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80033ba:	4a14      	ldr	r2, [pc, #80]	; (800340c <xTaskRemoveFromEventList+0x74>)
 80033bc:	6811      	ldr	r1, [r2, #0]
 80033be:	2301      	movs	r3, #1
 80033c0:	4083      	lsls	r3, r0
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033ca:	4629      	mov	r1, r5
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <xTaskRemoveFromEventList+0x78>)
 80033ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80033d2:	f7fe fe79 	bl	80020c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <xTaskRemoveFromEventList+0x7c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80033e0:	bf83      	ittte	hi
 80033e2:	2001      	movhi	r0, #1
 80033e4:	4b0c      	ldrhi	r3, [pc, #48]	; (8003418 <xTaskRemoveFromEventList+0x80>)
 80033e6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80033e8:	2000      	movls	r0, #0
}
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80033fc:	e7fe      	b.n	80033fc <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033fe:	4629      	mov	r1, r5
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <xTaskRemoveFromEventList+0x84>)
 8003402:	f7fe fe61 	bl	80020c8 <vListInsertEnd>
 8003406:	e7e6      	b.n	80033d6 <xTaskRemoveFromEventList+0x3e>
 8003408:	20000178 	.word	0x20000178
 800340c:	20000180 	.word	0x20000180
 8003410:	200000e0 	.word	0x200000e0
 8003414:	200000d4 	.word	0x200000d4
 8003418:	200001f8 	.word	0x200001f8
 800341c:	200001b4 	.word	0x200001b4

08003420 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <vTaskInternalSetTimeOutState+0x10>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003426:	4b03      	ldr	r3, [pc, #12]	; (8003434 <vTaskInternalSetTimeOutState+0x14>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6043      	str	r3, [r0, #4]
}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	200001b0 	.word	0x200001b0
 8003434:	200001f4 	.word	0x200001f4

08003438 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003438:	b1d0      	cbz	r0, 8003470 <xTaskCheckForTimeOut+0x38>
{
 800343a:	b570      	push	{r4, r5, r6, lr}
 800343c:	460c      	mov	r4, r1
 800343e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003440:	b1f9      	cbz	r1, 8003482 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8003442:	f000 f9df 	bl	8003804 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <xTaskCheckForTimeOut+0x7c>)
 8003448:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d028      	beq.n	80034a4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003452:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003454:	4818      	ldr	r0, [pc, #96]	; (80034b8 <xTaskCheckForTimeOut+0x80>)
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	682e      	ldr	r6, [r5, #0]
 800345a:	4286      	cmp	r6, r0
 800345c:	d001      	beq.n	8003462 <xTaskCheckForTimeOut+0x2a>
 800345e:	428a      	cmp	r2, r1
 8003460:	d925      	bls.n	80034ae <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003462:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003464:	4283      	cmp	r3, r0
 8003466:	d815      	bhi.n	8003494 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800346c:	2401      	movs	r4, #1
 800346e:	e01a      	b.n	80034a6 <xTaskCheckForTimeOut+0x6e>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8003480:	e7fe      	b.n	8003480 <xTaskCheckForTimeOut+0x48>
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003492:	e7fe      	b.n	8003492 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8003494:	1a5b      	subs	r3, r3, r1
 8003496:	4413      	add	r3, r2
 8003498:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800349a:	4628      	mov	r0, r5
 800349c:	f7ff ffc0 	bl	8003420 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80034a0:	2400      	movs	r4, #0
 80034a2:	e000      	b.n	80034a6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 80034a4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80034a6:	f000 f9cf 	bl	8003848 <vPortExitCritical>
}
 80034aa:	4620      	mov	r0, r4
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 80034ae:	2401      	movs	r4, #1
 80034b0:	e7f9      	b.n	80034a6 <xTaskCheckForTimeOut+0x6e>
 80034b2:	bf00      	nop
 80034b4:	200001f4 	.word	0x200001f4
 80034b8:	200001b0 	.word	0x200001b0

080034bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <vTaskMissedYield+0x8>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	4770      	bx	lr
 80034c4:	200001f8 	.word	0x200001f8

080034c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <xTaskGetSchedulerState+0x18>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	b133      	cbz	r3, 80034dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <xTaskGetSchedulerState+0x1c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf0c      	ite	eq
 80034d6:	2002      	moveq	r0, #2
 80034d8:	2000      	movne	r0, #0
 80034da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034dc:	2001      	movs	r0, #1
	}
 80034de:	4770      	bx	lr
 80034e0:	200001c8 	.word	0x200001c8
 80034e4:	20000178 	.word	0x20000178

080034e8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d050      	beq.n	800358e <xTaskPriorityInherit+0xa6>
	{
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034f2:	4a28      	ldr	r2, [pc, #160]	; (8003594 <xTaskPriorityInherit+0xac>)
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d23f      	bcs.n	800357c <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034fc:	6982      	ldr	r2, [r0, #24]
 80034fe:	2a00      	cmp	r2, #0
 8003500:	db05      	blt.n	800350e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003502:	4a24      	ldr	r2, [pc, #144]	; (8003594 <xTaskPriorityInherit+0xac>)
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003508:	f1c2 0207 	rsb	r2, r2, #7
 800350c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800350e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <xTaskPriorityInherit+0xb0>)
 8003514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003518:	6962      	ldr	r2, [r4, #20]
 800351a:	429a      	cmp	r2, r3
 800351c:	d005      	beq.n	800352a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <xTaskPriorityInherit+0xac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003526:	2001      	movs	r0, #1
 8003528:	e030      	b.n	800358c <xTaskPriorityInherit+0xa4>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800352a:	1d25      	adds	r5, r4, #4
 800352c:	4628      	mov	r0, r5
 800352e:	f7fe fdef 	bl	8002110 <uxListRemove>
 8003532:	b970      	cbnz	r0, 8003552 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003534:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003536:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <xTaskPriorityInherit+0xb0>)
 800353e:	58cb      	ldr	r3, [r1, r3]
 8003540:	b93b      	cbnz	r3, 8003552 <xTaskPriorityInherit+0x6a>
 8003542:	4816      	ldr	r0, [pc, #88]	; (800359c <xTaskPriorityInherit+0xb4>)
 8003544:	6803      	ldr	r3, [r0, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f202 	lsl.w	r2, r1, r2
 800354c:	ea23 0302 	bic.w	r3, r3, r2
 8003550:	6003      	str	r3, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <xTaskPriorityInherit+0xac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003558:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800355a:	4a10      	ldr	r2, [pc, #64]	; (800359c <xTaskPriorityInherit+0xb4>)
 800355c:	6811      	ldr	r1, [r2, #0]
 800355e:	2401      	movs	r4, #1
 8003560:	fa04 f300 	lsl.w	r3, r4, r0
 8003564:	430b      	orrs	r3, r1
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800356c:	4629      	mov	r1, r5
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <xTaskPriorityInherit+0xb0>)
 8003570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003574:	f7fe fda8 	bl	80020c8 <vListInsertEnd>
				xReturn = pdTRUE;
 8003578:	4620      	mov	r0, r4
 800357a:	e007      	b.n	800358c <xTaskPriorityInherit+0xa4>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <xTaskPriorityInherit+0xac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	4298      	cmp	r0, r3
 8003586:	bf2c      	ite	cs
 8003588:	2000      	movcs	r0, #0
 800358a:	2001      	movcc	r0, #1
	}
 800358c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800358e:	2000      	movs	r0, #0
	}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200000d4 	.word	0x200000d4
 8003598:	200000e0 	.word	0x200000e0
 800359c:	20000180 	.word	0x20000180

080035a0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d04b      	beq.n	800363c <xTaskPriorityDisinherit+0x9c>
	{
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <xTaskPriorityDisinherit+0xa4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4283      	cmp	r3, r0
 80035ae:	d008      	beq.n	80035c2 <xTaskPriorityDisinherit+0x22>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	e7fe      	b.n	80035c0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80035c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80035c4:	b943      	cbnz	r3, 80035d8 <xTaskPriorityDisinherit+0x38>
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	e7fe      	b.n	80035d6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80035d8:	3b01      	subs	r3, #1
 80035da:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80035e0:	4291      	cmp	r1, r2
 80035e2:	d02d      	beq.n	8003640 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035e4:	b10b      	cbz	r3, 80035ea <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80035e6:	2000      	movs	r0, #0
	}
 80035e8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035ea:	1d05      	adds	r5, r0, #4
 80035ec:	4628      	mov	r0, r5
 80035ee:	f7fe fd8f 	bl	8002110 <uxListRemove>
 80035f2:	b968      	cbnz	r0, 8003610 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80035f6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4a12      	ldr	r2, [pc, #72]	; (8003648 <xTaskPriorityDisinherit+0xa8>)
 80035fe:	58d3      	ldr	r3, [r2, r3]
 8003600:	b933      	cbnz	r3, 8003610 <xTaskPriorityDisinherit+0x70>
 8003602:	4812      	ldr	r0, [pc, #72]	; (800364c <xTaskPriorityDisinherit+0xac>)
 8003604:	6803      	ldr	r3, [r0, #0]
 8003606:	2201      	movs	r2, #1
 8003608:	408a      	lsls	r2, r1
 800360a:	ea23 0302 	bic.w	r3, r3, r2
 800360e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003610:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003612:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003614:	f1c0 0307 	rsb	r3, r0, #7
 8003618:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <xTaskPriorityDisinherit+0xac>)
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	2401      	movs	r4, #1
 8003620:	fa04 f300 	lsl.w	r3, r4, r0
 8003624:	430b      	orrs	r3, r1
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800362c:	4629      	mov	r1, r5
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <xTaskPriorityDisinherit+0xa8>)
 8003630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003634:	f7fe fd48 	bl	80020c8 <vListInsertEnd>
					xReturn = pdTRUE;
 8003638:	4620      	mov	r0, r4
 800363a:	e7d5      	b.n	80035e8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800363c:	2000      	movs	r0, #0
	}
 800363e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8003640:	2000      	movs	r0, #0
 8003642:	e7d1      	b.n	80035e8 <xTaskPriorityDisinherit+0x48>
 8003644:	200000d4 	.word	0x200000d4
 8003648:	200000e0 	.word	0x200000e0
 800364c:	20000180 	.word	0x20000180

08003650 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003650:	2800      	cmp	r0, #0
 8003652:	d056      	beq.n	8003702 <vTaskPriorityDisinheritAfterTimeout+0xb2>
	{
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	460b      	mov	r3, r1
 8003658:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800365a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800365c:	b941      	cbnz	r1, 8003670 <vTaskPriorityDisinheritAfterTimeout+0x20>
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	e7fe      	b.n	800366e <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003672:	4293      	cmp	r3, r2
 8003674:	bf38      	it	cc
 8003676:	4613      	movcc	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003678:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800367e:	2901      	cmp	r1, #1
 8003680:	d000      	beq.n	8003684 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8003682:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8003684:	491f      	ldr	r1, [pc, #124]	; (8003704 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8003686:	6809      	ldr	r1, [r1, #0]
 8003688:	4281      	cmp	r1, r0
 800368a:	d031      	beq.n	80036f0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					pxTCB->uxPriority = uxPriorityToUse;
 800368c:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800368e:	6981      	ldr	r1, [r0, #24]
 8003690:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003692:	bfa4      	itt	ge
 8003694:	f1c3 0307 	rsbge	r3, r3, #7
 8003698:	6183      	strge	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800369a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80036a0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80036a4:	6943      	ldr	r3, [r0, #20]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d1eb      	bne.n	8003682 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036aa:	1d05      	adds	r5, r0, #4
 80036ac:	4628      	mov	r0, r5
 80036ae:	f7fe fd2f 	bl	8002110 <uxListRemove>
 80036b2:	b968      	cbnz	r0, 80036d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80036b6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80036be:	58d3      	ldr	r3, [r2, r3]
 80036c0:	b933      	cbnz	r3, 80036d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 80036c2:	4812      	ldr	r0, [pc, #72]	; (800370c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80036c4:	6803      	ldr	r3, [r0, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	408a      	lsls	r2, r1
 80036ca:	ea23 0302 	bic.w	r3, r3, r2
 80036ce:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
 80036d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	2301      	movs	r3, #1
 80036d8:	4083      	lsls	r3, r0
 80036da:	430b      	orrs	r3, r1
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80036e2:	4629      	mov	r1, r5
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 80036e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80036ea:	f7fe fced 	bl	80020c8 <vListInsertEnd>
	}
 80036ee:	e7c8      	b.n	8003682 <vTaskPriorityDisinheritAfterTimeout+0x32>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8003700:	e7fe      	b.n	8003700 <vTaskPriorityDisinheritAfterTimeout+0xb0>
 8003702:	4770      	bx	lr
 8003704:	200000d4 	.word	0x200000d4
 8003708:	200000e0 	.word	0x200000e0
 800370c:	20000180 	.word	0x20000180

08003710 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <pvTaskIncrementMutexHeldCount+0x18>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	b123      	cbz	r3, 8003720 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003716:	4b04      	ldr	r3, [pc, #16]	; (8003728 <pvTaskIncrementMutexHeldCount+0x18>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800371c:	3301      	adds	r3, #1
 800371e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <pvTaskIncrementMutexHeldCount+0x18>)
 8003722:	6818      	ldr	r0, [r3, #0]
	}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	200000d4 	.word	0x200000d4

0800372c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800372c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <prvTaskExitError+0x3c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d008      	beq.n	800374e <prvTaskExitError+0x22>
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	e7fe      	b.n	800374c <prvTaskExitError+0x20>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800375e:	9b01      	ldr	r3, [sp, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0fc      	beq.n	800375e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003764:	b002      	add	sp, #8
 8003766:	4770      	bx	lr
 8003768:	20000008 	.word	0x20000008

0800376c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800376c:	4808      	ldr	r0, [pc, #32]	; (8003790 <prvPortStartFirstTask+0x24>)
 800376e:	6800      	ldr	r0, [r0, #0]
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	f380 8808 	msr	MSP, r0
 8003776:	f04f 0000 	mov.w	r0, #0
 800377a:	f380 8814 	msr	CONTROL, r0
 800377e:	b662      	cpsie	i
 8003780:	b661      	cpsie	f
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	df00      	svc	0
 800378c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800378e:	0000      	.short	0x0000
 8003790:	e000ed08 	.word	0xe000ed08

08003794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037a4 <vPortEnableVFP+0x10>
 8003798:	6801      	ldr	r1, [r0, #0]
 800379a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800379e:	6001      	str	r1, [r0, #0]
 80037a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037a2:	0000      	.short	0x0000
 80037a4:	e000ed88 	.word	0xe000ed88

080037a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037b0:	f021 0101 	bic.w	r1, r1, #1
 80037b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <pxPortInitialiseStack+0x28>)
 80037ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80037c2:	f06f 0302 	mvn.w	r3, #2
 80037c6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80037ca:	3844      	subs	r0, #68	; 0x44
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	0800372d 	.word	0x0800372d
	...

080037e0 <SVC_Handler>:
	__asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	4770      	bx	lr
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst2>:
 8003800:	200000d4 	.word	0x200000d4

08003804 <vPortEnterCritical>:
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <vPortEnterCritical+0x3c>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800381c:	2b01      	cmp	r3, #1
 800381e:	d000      	beq.n	8003822 <vPortEnterCritical+0x1e>
}
 8003820:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <vPortEnterCritical+0x40>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f013 0fff 	tst.w	r3, #255	; 0xff
 800382a:	d0f9      	beq.n	8003820 <vPortEnterCritical+0x1c>
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	e7fe      	b.n	800383c <vPortEnterCritical+0x38>
 800383e:	bf00      	nop
 8003840:	20000008 	.word	0x20000008
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <vPortExitCritical+0x28>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b943      	cbnz	r3, 8003860 <vPortExitCritical+0x18>
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	e7fe      	b.n	800385e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003860:	3b01      	subs	r3, #1
 8003862:	4a03      	ldr	r2, [pc, #12]	; (8003870 <vPortExitCritical+0x28>)
 8003864:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003866:	b90b      	cbnz	r3, 800386c <vPortExitCritical+0x24>
	__asm volatile
 8003868:	f383 8811 	msr	BASEPRI, r3
}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000008 	.word	0x20000008
	...

08003880 <PendSV_Handler>:
	__asm volatile
 8003880:	f3ef 8009 	mrs	r0, PSP
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <pxCurrentTCBConst>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f01e 0f10 	tst.w	lr, #16
 8003890:	bf08      	it	eq
 8003892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389a:	6010      	str	r0, [r2, #0]
 800389c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038a4:	f380 8811 	msr	BASEPRI, r0
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f7ff fcf6 	bl	80032a0 <vTaskSwitchContext>
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f380 8811 	msr	BASEPRI, r0
 80038bc:	bc09      	pop	{r0, r3}
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	6808      	ldr	r0, [r1, #0]
 80038c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c6:	f01e 0f10 	tst.w	lr, #16
 80038ca:	bf08      	it	eq
 80038cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038d0:	f380 8809 	msr	PSP, r0
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	f3af 8000 	nop.w

080038e0 <pxCurrentTCBConst>:
 80038e0:	200000d4 	.word	0x200000d4

080038e4 <SysTick_Handler>:
{
 80038e4:	b508      	push	{r3, lr}
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80038f6:	f7ff fb8f 	bl	8003018 <xTaskIncrementTick>
 80038fa:	b118      	cbz	r0, 8003904 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <SysTick_Handler+0x28>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003904:	2300      	movs	r3, #0
 8003906:	f383 8811 	msr	BASEPRI, r3
}
 800390a:	bd08      	pop	{r3, pc}
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <vPortSetupTimerInterrupt+0x24>)
 8003912:	2300      	movs	r3, #0
 8003914:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003916:	4908      	ldr	r1, [pc, #32]	; (8003938 <vPortSetupTimerInterrupt+0x28>)
 8003918:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <vPortSetupTimerInterrupt+0x2c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <vPortSetupTimerInterrupt+0x30>)
 8003920:	fba1 1303 	umull	r1, r3, r1, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	3b01      	subs	r3, #1
 8003928:	4906      	ldr	r1, [pc, #24]	; (8003944 <vPortSetupTimerInterrupt+0x34>)
 800392a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800392c:	2307      	movs	r3, #7
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010
 8003938:	e000e018 	.word	0xe000e018
 800393c:	20000050 	.word	0x20000050
 8003940:	10624dd3 	.word	0x10624dd3
 8003944:	e000e014 	.word	0xe000e014

08003948 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003948:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <xPortStartScheduler+0xf0>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <xPortStartScheduler+0xf4>)
 800394e:	429a      	cmp	r2, r3
 8003950:	d039      	beq.n	80039c6 <xPortStartScheduler+0x7e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <xPortStartScheduler+0xf0>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <xPortStartScheduler+0xf8>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d03d      	beq.n	80039d8 <xPortStartScheduler+0x90>
{
 800395c:	b510      	push	{r4, lr}
 800395e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <xPortStartScheduler+0xfc>)
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003974:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003978:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800397c:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <xPortStartScheduler+0x100>)
 800397e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <xPortStartScheduler+0x104>)
 8003982:	2207      	movs	r2, #7
 8003984:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003986:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800398a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800398e:	d011      	beq.n	80039b4 <xPortStartScheduler+0x6c>
 8003990:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003992:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800399e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80039a2:	4613      	mov	r3, r2
 80039a4:	3a01      	subs	r2, #1
 80039a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039aa:	d1f2      	bne.n	8003992 <xPortStartScheduler+0x4a>
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <xPortStartScheduler+0x104>)
 80039ae:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d01a      	beq.n	80039ea <xPortStartScheduler+0xa2>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	e7fe      	b.n	80039c4 <xPortStartScheduler+0x7c>
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039d6:	e7fe      	b.n	80039d6 <xPortStartScheduler+0x8e>
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039e8:	e7fe      	b.n	80039e8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <xPortStartScheduler+0x104>)
 80039ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80039f0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039f2:	9b01      	ldr	r3, [sp, #4]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <xPortStartScheduler+0xfc>)
 80039f8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <xPortStartScheduler+0x108>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003a0a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003a0c:	f7ff ff80 	bl	8003910 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003a10:	2400      	movs	r4, #0
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <xPortStartScheduler+0x10c>)
 8003a14:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8003a16:	f7ff febd 	bl	8003794 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a1a:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <xPortStartScheduler+0x110>)
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a22:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8003a24:	f7ff fea2 	bl	800376c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003a28:	f7ff fc3a 	bl	80032a0 <vTaskSwitchContext>
	prvTaskExitError();
 8003a2c:	f7ff fe7e 	bl	800372c <prvTaskExitError>
}
 8003a30:	4620      	mov	r0, r4
 8003a32:	b002      	add	sp, #8
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	bf00      	nop
 8003a38:	e000ed00 	.word	0xe000ed00
 8003a3c:	410fc271 	.word	0x410fc271
 8003a40:	410fc270 	.word	0x410fc270
 8003a44:	e000e400 	.word	0xe000e400
 8003a48:	200001fc 	.word	0x200001fc
 8003a4c:	20000200 	.word	0x20000200
 8003a50:	e000ed20 	.word	0xe000ed20
 8003a54:	20000008 	.word	0x20000008
 8003a58:	e000ef34 	.word	0xe000ef34

08003a5c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a5c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d90f      	bls.n	8003a84 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a64:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <vPortValidateInterruptPriority+0x4c>)
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <vPortValidateInterruptPriority+0x50>)
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d908      	bls.n	8003a84 <vPortValidateInterruptPriority+0x28>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	e7fe      	b.n	8003a82 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <vPortValidateInterruptPriority+0x54>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <vPortValidateInterruptPriority+0x58>)
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d908      	bls.n	8003aa6 <vPortValidateInterruptPriority+0x4a>
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	e7fe      	b.n	8003aa4 <vPortValidateInterruptPriority+0x48>
	}
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e3f0 	.word	0xe000e3f0
 8003aac:	200001fc 	.word	0x200001fc
 8003ab0:	e000ed0c 	.word	0xe000ed0c
 8003ab4:	20000200 	.word	0x20000200

08003ab8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ab8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <prvInsertBlockIntoFreeList+0x50>)
 8003abc:	461a      	mov	r2, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4283      	cmp	r3, r0
 8003ac2:	d3fb      	bcc.n	8003abc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ac4:	6851      	ldr	r1, [r2, #4]
 8003ac6:	1854      	adds	r4, r2, r1
 8003ac8:	42a0      	cmp	r0, r4
 8003aca:	d00a      	beq.n	8003ae2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003acc:	6841      	ldr	r1, [r0, #4]
 8003ace:	1844      	adds	r4, r0, r1
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d00b      	beq.n	8003aec <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ad4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ad6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ad8:	bf18      	it	ne
 8003ada:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003adc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ae0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ae2:	6840      	ldr	r0, [r0, #4]
 8003ae4:	4401      	add	r1, r0
 8003ae6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003ae8:	4610      	mov	r0, r2
 8003aea:	e7ef      	b.n	8003acc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aec:	4c07      	ldr	r4, [pc, #28]	; (8003b0c <prvInsertBlockIntoFreeList+0x54>)
 8003aee:	6824      	ldr	r4, [r4, #0]
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d006      	beq.n	8003b02 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4419      	add	r1, r3
 8003af8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6003      	str	r3, [r0, #0]
 8003b00:	e7e9      	b.n	8003ad6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b02:	6004      	str	r4, [r0, #0]
 8003b04:	e7e7      	b.n	8003ad6 <prvInsertBlockIntoFreeList+0x1e>
 8003b06:	bf00      	nop
 8003b08:	20010214 	.word	0x20010214
 8003b0c:	20000204 	.word	0x20000204

08003b10 <pvPortMalloc>:
{
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003b14:	f7ff fa6a 	bl	8002fec <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <pvPortMalloc+0x118>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b1b3      	cbz	r3, 8003b4c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <pvPortMalloc+0x11c>)
 8003b20:	681e      	ldr	r6, [r3, #0]
 8003b22:	4226      	tst	r6, r4
 8003b24:	d17a      	bne.n	8003c1c <pvPortMalloc+0x10c>
			if( xWantedSize > 0 )
 8003b26:	2c00      	cmp	r4, #0
 8003b28:	d078      	beq.n	8003c1c <pvPortMalloc+0x10c>
				xWantedSize += xHeapStructSize;
 8003b2a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b2e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b32:	bf1c      	itt	ne
 8003b34:	f023 0307 	bicne.w	r3, r3, #7
 8003b38:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d06e      	beq.n	8003c1c <pvPortMalloc+0x10c>
 8003b3e:	4a3c      	ldr	r2, [pc, #240]	; (8003c30 <pvPortMalloc+0x120>)
 8003b40:	6815      	ldr	r5, [r2, #0]
 8003b42:	429d      	cmp	r5, r3
 8003b44:	d36a      	bcc.n	8003c1c <pvPortMalloc+0x10c>
				pxBlock = xStart.pxNextFreeBlock;
 8003b46:	4a3b      	ldr	r2, [pc, #236]	; (8003c34 <pvPortMalloc+0x124>)
 8003b48:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b4a:	e028      	b.n	8003b9e <pvPortMalloc+0x8e>
	uxAddress = ( size_t ) ucHeap;
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <pvPortMalloc+0x128>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b4e:	f013 0f07 	tst.w	r3, #7
 8003b52:	d01f      	beq.n	8003b94 <pvPortMalloc+0x84>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b54:	1dd9      	adds	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b56:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b5a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003b5e:	33ff      	adds	r3, #255	; 0xff
 8003b60:	1a5a      	subs	r2, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b62:	460b      	mov	r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b64:	4833      	ldr	r0, [pc, #204]	; (8003c34 <pvPortMalloc+0x124>)
 8003b66:	6003      	str	r3, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b6c:	441a      	add	r2, r3
	uxAddress -= xHeapStructSize;
 8003b6e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b70:	f022 0207 	bic.w	r2, r2, #7
	pxEnd = ( void * ) uxAddress;
 8003b74:	482c      	ldr	r0, [pc, #176]	; (8003c28 <pvPortMalloc+0x118>)
 8003b76:	6002      	str	r2, [r0, #0]
	pxEnd->xBlockSize = 0;
 8003b78:	6051      	str	r1, [r2, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b7a:	6011      	str	r1, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b7c:	1ad1      	subs	r1, r2, r3
 8003b7e:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b80:	601a      	str	r2, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b82:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <pvPortMalloc+0x12c>)
 8003b84:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <pvPortMalloc+0x120>)
 8003b88:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <pvPortMalloc+0x11c>)
 8003b8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b90:	601a      	str	r2, [r3, #0]
}
 8003b92:	e7c4      	b.n	8003b1e <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b98:	e7e4      	b.n	8003b64 <pvPortMalloc+0x54>
 8003b9a:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b9c:	460c      	mov	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b9e:	6861      	ldr	r1, [r4, #4]
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d202      	bcs.n	8003baa <pvPortMalloc+0x9a>
 8003ba4:	6821      	ldr	r1, [r4, #0]
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	d1f7      	bne.n	8003b9a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003baa:	491f      	ldr	r1, [pc, #124]	; (8003c28 <pvPortMalloc+0x118>)
 8003bac:	6809      	ldr	r1, [r1, #0]
 8003bae:	42a1      	cmp	r1, r4
 8003bb0:	d034      	beq.n	8003c1c <pvPortMalloc+0x10c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bb2:	6817      	ldr	r7, [r2, #0]
 8003bb4:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bb6:	6821      	ldr	r1, [r4, #0]
 8003bb8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	1ad2      	subs	r2, r2, r3
 8003bbe:	2a10      	cmp	r2, #16
 8003bc0:	d910      	bls.n	8003be4 <pvPortMalloc+0xd4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bc2:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bc4:	f010 0f07 	tst.w	r0, #7
 8003bc8:	d008      	beq.n	8003bdc <pvPortMalloc+0xcc>
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	e7fe      	b.n	8003bda <pvPortMalloc+0xca>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bdc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bde:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003be0:	f7ff ff6a 	bl	8003ab8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003be4:	6862      	ldr	r2, [r4, #4]
 8003be6:	1aad      	subs	r5, r5, r2
 8003be8:	4911      	ldr	r1, [pc, #68]	; (8003c30 <pvPortMalloc+0x120>)
 8003bea:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bec:	4913      	ldr	r1, [pc, #76]	; (8003c3c <pvPortMalloc+0x12c>)
 8003bee:	6809      	ldr	r1, [r1, #0]
 8003bf0:	428d      	cmp	r5, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bf2:	bf3c      	itt	cc
 8003bf4:	4911      	ldrcc	r1, [pc, #68]	; (8003c3c <pvPortMalloc+0x12c>)
 8003bf6:	600d      	strcc	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bf8:	4316      	orrs	r6, r2
 8003bfa:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8003c00:	f7ff faa4 	bl	800314c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c04:	f017 0f07 	tst.w	r7, #7
 8003c08:	d00b      	beq.n	8003c22 <pvPortMalloc+0x112>
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	e7fe      	b.n	8003c1a <pvPortMalloc+0x10a>
	( void ) xTaskResumeAll();
 8003c1c:	f7ff fa96 	bl	800314c <xTaskResumeAll>
 8003c20:	2700      	movs	r7, #0
}
 8003c22:	4638      	mov	r0, r7
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000204 	.word	0x20000204
 8003c2c:	20010208 	.word	0x20010208
 8003c30:	2001020c 	.word	0x2001020c
 8003c34:	20010214 	.word	0x20010214
 8003c38:	20000208 	.word	0x20000208
 8003c3c:	20010210 	.word	0x20010210

08003c40 <vPortFree>:
	if( pv != NULL )
 8003c40:	b378      	cbz	r0, 8003ca2 <vPortFree+0x62>
{
 8003c42:	b510      	push	{r4, lr}
 8003c44:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <vPortFree+0x64>)
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	4213      	tst	r3, r2
 8003c50:	d108      	bne.n	8003c64 <vPortFree+0x24>
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	e7fe      	b.n	8003c62 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c64:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003c68:	b141      	cbz	r1, 8003c7c <vPortFree+0x3c>
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	e7fe      	b.n	8003c7a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c7c:	ea23 0302 	bic.w	r3, r3, r2
 8003c80:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003c84:	f7ff f9b2 	bl	8002fec <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c88:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <vPortFree+0x68>)
 8003c8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	440b      	add	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c94:	f1a4 0008 	sub.w	r0, r4, #8
 8003c98:	f7ff ff0e 	bl	8003ab8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8003c9c:	f7ff fa56 	bl	800314c <xTaskResumeAll>
}
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	4770      	bx	lr
 8003ca4:	20010208 	.word	0x20010208
 8003ca8:	2001020c 	.word	0x2001020c

08003cac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8003cb0:	680a      	ldr	r2, [r1, #0]
 8003cb2:	320c      	adds	r2, #12
 8003cb4:	f002 fcb2 	bl	800661c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8003cb8:	b100      	cbz	r0, 8003cbc <netconn_apimsg+0x10>
    return apimsg->err;
  }
  return err;
}
 8003cba:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8003cbc:	f994 0004 	ldrsb.w	r0, [r4, #4]
 8003cc0:	e7fb      	b.n	8003cba <netconn_apimsg+0xe>
	...

08003cc4 <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8003cc4:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8003cc6:	b160      	cbz	r0, 8003ce2 <netconn_tcp_recvd_msg+0x1e>
 8003cc8:	460c      	mov	r4, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	7803      	ldrb	r3, [r0, #0]
 8003cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d105      	bne.n	8003ce2 <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8003cd6:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8003cd8:	6094      	str	r4, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8003cda:	4807      	ldr	r0, [pc, #28]	; (8003cf8 <netconn_tcp_recvd_msg+0x34>)
 8003cdc:	f7ff ffe6 	bl	8003cac <netconn_apimsg>
}
 8003ce0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <netconn_tcp_recvd_msg+0x38>)
 8003ce4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8003ce8:	4905      	ldr	r1, [pc, #20]	; (8003d00 <netconn_tcp_recvd_msg+0x3c>)
 8003cea:	4806      	ldr	r0, [pc, #24]	; (8003d04 <netconn_tcp_recvd_msg+0x40>)
 8003cec:	f026 ffee 	bl	802accc <iprintf>
 8003cf0:	f06f 000f 	mvn.w	r0, #15
 8003cf4:	e7f4      	b.n	8003ce0 <netconn_tcp_recvd_msg+0x1c>
 8003cf6:	bf00      	nop
 8003cf8:	080053f7 	.word	0x080053f7
 8003cfc:	0802bbf0 	.word	0x0802bbf0
 8003d00:	0802bc24 	.word	0x0802bc24
 8003d04:	0802bc48 	.word	0x0802bc48

08003d08 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8003d08:	b500      	push	{lr}
 8003d0a:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003d0c:	b160      	cbz	r0, 8003d28 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8003d0e:	9000      	str	r0, [sp, #0]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8003d10:	f88d 1008 	strb.w	r1, [sp, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003d14:	2329      	movs	r3, #41	; 0x29
 8003d16:	f88d 3009 	strb.w	r3, [sp, #9]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8003d1a:	4669      	mov	r1, sp
 8003d1c:	4807      	ldr	r0, [pc, #28]	; (8003d3c <netconn_close_shutdown+0x34>)
 8003d1e:	f7ff ffc5 	bl	8003cac <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8003d22:	b009      	add	sp, #36	; 0x24
 8003d24:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <netconn_close_shutdown+0x38>)
 8003d2a:	f240 4247 	movw	r2, #1095	; 0x447
 8003d2e:	4905      	ldr	r1, [pc, #20]	; (8003d44 <netconn_close_shutdown+0x3c>)
 8003d30:	4805      	ldr	r0, [pc, #20]	; (8003d48 <netconn_close_shutdown+0x40>)
 8003d32:	f026 ffcb 	bl	802accc <iprintf>
 8003d36:	f06f 000f 	mvn.w	r0, #15
 8003d3a:	e7f2      	b.n	8003d22 <netconn_close_shutdown+0x1a>
 8003d3c:	080055a1 	.word	0x080055a1
 8003d40:	0802bbf0 	.word	0x0802bbf0
 8003d44:	0802bc70 	.word	0x0802bc70
 8003d48:	0802bc48 	.word	0x0802bc48

08003d4c <netconn_new_with_proto_and_callback>:
{
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	460c      	mov	r4, r1
  conn = netconn_alloc(t, callback);
 8003d52:	4611      	mov	r1, r2
 8003d54:	f001 f92a 	bl	8004fac <netconn_alloc>
  if (conn != NULL) {
 8003d58:	4605      	mov	r5, r0
 8003d5a:	b138      	cbz	r0, 8003d6c <netconn_new_with_proto_and_callback+0x20>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8003d5c:	f88d 4008 	strb.w	r4, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8003d60:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8003d62:	4669      	mov	r1, sp
 8003d64:	4820      	ldr	r0, [pc, #128]	; (8003de8 <netconn_new_with_proto_and_callback+0x9c>)
 8003d66:	f7ff ffa1 	bl	8003cac <netconn_apimsg>
    if (err != ERR_OK) {
 8003d6a:	b910      	cbnz	r0, 8003d72 <netconn_new_with_proto_and_callback+0x26>
}
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	b008      	add	sp, #32
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8003d72:	686b      	ldr	r3, [r5, #4]
 8003d74:	b12b      	cbz	r3, 8003d82 <netconn_new_with_proto_and_callback+0x36>
 8003d76:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <netconn_new_with_proto_and_callback+0xa0>)
 8003d78:	22a3      	movs	r2, #163	; 0xa3
 8003d7a:	491d      	ldr	r1, [pc, #116]	; (8003df0 <netconn_new_with_proto_and_callback+0xa4>)
 8003d7c:	481d      	ldr	r0, [pc, #116]	; (8003df4 <netconn_new_with_proto_and_callback+0xa8>)
 8003d7e:	f026 ffa5 	bl	802accc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003d82:	f105 0410 	add.w	r4, r5, #16
 8003d86:	4620      	mov	r0, r4
 8003d88:	f00c f8e7 	bl	800ff5a <sys_mbox_valid>
 8003d8c:	b1b0      	cbz	r0, 8003dbc <netconn_new_with_proto_and_callback+0x70>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003d8e:	f105 0014 	add.w	r0, r5, #20
 8003d92:	f00c f8e2 	bl	800ff5a <sys_mbox_valid>
 8003d96:	b9c0      	cbnz	r0, 8003dca <netconn_new_with_proto_and_callback+0x7e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003d98:	f105 060c 	add.w	r6, r5, #12
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f00c f926 	bl	800ffee <sys_sem_valid>
 8003da2:	b1c8      	cbz	r0, 8003dd8 <netconn_new_with_proto_and_callback+0x8c>
      sys_sem_free(&conn->op_completed);
 8003da4:	4630      	mov	r0, r6
 8003da6:	f00c f91d 	bl	800ffe4 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8003daa:	4620      	mov	r0, r4
 8003dac:	f00c f889 	bl	800fec2 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8003db0:	4629      	mov	r1, r5
 8003db2:	2007      	movs	r0, #7
 8003db4:	f003 fd0e 	bl	80077d4 <memp_free>
      return NULL;
 8003db8:	2500      	movs	r5, #0
 8003dba:	e7d7      	b.n	8003d6c <netconn_new_with_proto_and_callback+0x20>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <netconn_new_with_proto_and_callback+0xa0>)
 8003dbe:	22a4      	movs	r2, #164	; 0xa4
 8003dc0:	490d      	ldr	r1, [pc, #52]	; (8003df8 <netconn_new_with_proto_and_callback+0xac>)
 8003dc2:	480c      	ldr	r0, [pc, #48]	; (8003df4 <netconn_new_with_proto_and_callback+0xa8>)
 8003dc4:	f026 ff82 	bl	802accc <iprintf>
 8003dc8:	e7e1      	b.n	8003d8e <netconn_new_with_proto_and_callback+0x42>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <netconn_new_with_proto_and_callback+0xa0>)
 8003dcc:	22a6      	movs	r2, #166	; 0xa6
 8003dce:	490b      	ldr	r1, [pc, #44]	; (8003dfc <netconn_new_with_proto_and_callback+0xb0>)
 8003dd0:	4808      	ldr	r0, [pc, #32]	; (8003df4 <netconn_new_with_proto_and_callback+0xa8>)
 8003dd2:	f026 ff7b 	bl	802accc <iprintf>
 8003dd6:	e7df      	b.n	8003d98 <netconn_new_with_proto_and_callback+0x4c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <netconn_new_with_proto_and_callback+0xa0>)
 8003dda:	22a9      	movs	r2, #169	; 0xa9
 8003ddc:	4908      	ldr	r1, [pc, #32]	; (8003e00 <netconn_new_with_proto_and_callback+0xb4>)
 8003dde:	4805      	ldr	r0, [pc, #20]	; (8003df4 <netconn_new_with_proto_and_callback+0xa8>)
 8003de0:	f026 ff74 	bl	802accc <iprintf>
 8003de4:	e7de      	b.n	8003da4 <netconn_new_with_proto_and_callback+0x58>
 8003de6:	bf00      	nop
 8003de8:	08004f3d 	.word	0x08004f3d
 8003dec:	0802bbf0 	.word	0x0802bbf0
 8003df0:	0802bc8c 	.word	0x0802bc8c
 8003df4:	0802bc48 	.word	0x0802bc48
 8003df8:	0802bcb0 	.word	0x0802bcb0
 8003dfc:	0802bcc8 	.word	0x0802bcc8
 8003e00:	0802bcec 	.word	0x0802bcec

08003e04 <netconn_prepare_delete>:
  if (conn == NULL) {
 8003e04:	b160      	cbz	r0, 8003e20 <netconn_prepare_delete+0x1c>
{
 8003e06:	b500      	push	{lr}
 8003e08:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_REF(msg).conn = conn;
 8003e0a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8003e0c:	2329      	movs	r3, #41	; 0x29
 8003e0e:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8003e12:	4669      	mov	r1, sp
 8003e14:	4803      	ldr	r0, [pc, #12]	; (8003e24 <netconn_prepare_delete+0x20>)
 8003e16:	f7ff ff49 	bl	8003cac <netconn_apimsg>
}
 8003e1a:	b009      	add	sp, #36	; 0x24
 8003e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    return ERR_OK;
 8003e20:	2000      	movs	r0, #0
}
 8003e22:	4770      	bx	lr
 8003e24:	08005165 	.word	0x08005165

08003e28 <netconn_delete>:
{
 8003e28:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8003e2a:	b150      	cbz	r0, 8003e42 <netconn_delete+0x1a>
 8003e2c:	4605      	mov	r5, r0
    err = netconn_prepare_delete(conn);
 8003e2e:	f7ff ffe9 	bl	8003e04 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8003e32:	4604      	mov	r4, r0
 8003e34:	b108      	cbz	r0, 8003e3a <netconn_delete+0x12>
}
 8003e36:	4620      	mov	r0, r4
 8003e38:	bd38      	pop	{r3, r4, r5, pc}
    netconn_free(conn);
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f001 f900 	bl	8005040 <netconn_free>
 8003e40:	e7f9      	b.n	8003e36 <netconn_delete+0xe>
    return ERR_OK;
 8003e42:	2400      	movs	r4, #0
 8003e44:	e7f7      	b.n	8003e36 <netconn_delete+0xe>
	...

08003e48 <netconn_getaddr>:
{
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8003e4c:	b160      	cbz	r0, 8003e68 <netconn_getaddr+0x20>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8003e4e:	b1a9      	cbz	r1, 8003e7c <netconn_getaddr+0x34>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8003e50:	b1f2      	cbz	r2, 8003e90 <netconn_getaddr+0x48>
  API_MSG_VAR_REF(msg).conn = conn;
 8003e52:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8003e54:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.ipaddr = addr;
 8003e58:	9102      	str	r1, [sp, #8]
  msg.msg.ad.port = port;
 8003e5a:	9203      	str	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8003e5c:	4669      	mov	r1, sp
 8003e5e:	4811      	ldr	r0, [pc, #68]	; (8003ea4 <netconn_getaddr+0x5c>)
 8003e60:	f7ff ff24 	bl	8003cac <netconn_apimsg>
}
 8003e64:	b008      	add	sp, #32
 8003e66:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <netconn_getaddr+0x60>)
 8003e6a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003e6e:	490f      	ldr	r1, [pc, #60]	; (8003eac <netconn_getaddr+0x64>)
 8003e70:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <netconn_getaddr+0x68>)
 8003e72:	f026 ff2b 	bl	802accc <iprintf>
 8003e76:	f06f 000f 	mvn.w	r0, #15
 8003e7a:	e7f3      	b.n	8003e64 <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <netconn_getaddr+0x60>)
 8003e7e:	f240 1213 	movw	r2, #275	; 0x113
 8003e82:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <netconn_getaddr+0x6c>)
 8003e84:	480a      	ldr	r0, [pc, #40]	; (8003eb0 <netconn_getaddr+0x68>)
 8003e86:	f026 ff21 	bl	802accc <iprintf>
 8003e8a:	f06f 000f 	mvn.w	r0, #15
 8003e8e:	e7e9      	b.n	8003e64 <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <netconn_getaddr+0x60>)
 8003e92:	f44f 728a 	mov.w	r2, #276	; 0x114
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <netconn_getaddr+0x70>)
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <netconn_getaddr+0x68>)
 8003e9a:	f026 ff17 	bl	802accc <iprintf>
 8003e9e:	f06f 000f 	mvn.w	r0, #15
 8003ea2:	e7df      	b.n	8003e64 <netconn_getaddr+0x1c>
 8003ea4:	08005509 	.word	0x08005509
 8003ea8:	0802bbf0 	.word	0x0802bbf0
 8003eac:	0802bd08 	.word	0x0802bd08
 8003eb0:	0802bc48 	.word	0x0802bc48
 8003eb4:	0802bd28 	.word	0x0802bd28
 8003eb8:	0802bd48 	.word	0x0802bd48

08003ebc <netconn_connect>:
{
 8003ebc:	b500      	push	{lr}
 8003ebe:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ec0:	b178      	cbz	r0, 8003ee2 <netconn_connect+0x26>
 8003ec2:	4603      	mov	r3, r0
    addr = IP4_ADDR_ANY;
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <netconn_connect+0x3c>)
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	bf08      	it	eq
 8003eca:	4601      	moveq	r1, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8003ecc:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8003ece:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8003ed0:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8003ed4:	4669      	mov	r1, sp
 8003ed6:	4809      	ldr	r0, [pc, #36]	; (8003efc <netconn_connect+0x40>)
 8003ed8:	f7ff fee8 	bl	8003cac <netconn_apimsg>
}
 8003edc:	b009      	add	sp, #36	; 0x24
 8003ede:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <netconn_connect+0x44>)
 8003ee4:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8003ee8:	4906      	ldr	r1, [pc, #24]	; (8003f04 <netconn_connect+0x48>)
 8003eea:	4807      	ldr	r0, [pc, #28]	; (8003f08 <netconn_connect+0x4c>)
 8003eec:	f026 feee 	bl	802accc <iprintf>
 8003ef0:	f06f 000f 	mvn.w	r0, #15
 8003ef4:	e7f2      	b.n	8003edc <netconn_connect+0x20>
 8003ef6:	bf00      	nop
 8003ef8:	0802ec50 	.word	0x0802ec50
 8003efc:	08005285 	.word	0x08005285
 8003f00:	0802bbf0 	.word	0x0802bbf0
 8003f04:	0802bd68 	.word	0x0802bd68
 8003f08:	0802bc48 	.word	0x0802bc48

08003f0c <netconn_disconnect>:
{
 8003f0c:	b500      	push	{lr}
 8003f0e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f10:	b138      	cbz	r0, 8003f22 <netconn_disconnect+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8003f12:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8003f14:	4669      	mov	r1, sp
 8003f16:	4808      	ldr	r0, [pc, #32]	; (8003f38 <netconn_disconnect+0x2c>)
 8003f18:	f7ff fec8 	bl	8003cac <netconn_apimsg>
}
 8003f1c:	b009      	add	sp, #36	; 0x24
 8003f1e:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <netconn_disconnect+0x30>)
 8003f24:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8003f28:	4905      	ldr	r1, [pc, #20]	; (8003f40 <netconn_disconnect+0x34>)
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <netconn_disconnect+0x38>)
 8003f2c:	f026 fece 	bl	802accc <iprintf>
 8003f30:	f06f 000f 	mvn.w	r0, #15
 8003f34:	e7f2      	b.n	8003f1c <netconn_disconnect+0x10>
 8003f36:	bf00      	nop
 8003f38:	08005389 	.word	0x08005389
 8003f3c:	0802bbf0 	.word	0x0802bbf0
 8003f40:	0802bd88 	.word	0x0802bd88
 8003f44:	0802bc48 	.word	0x0802bc48

08003f48 <netconn_tcp_recvd>:
{
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8003f4c:	b148      	cbz	r0, 8003f62 <netconn_tcp_recvd+0x1a>
 8003f4e:	7803      	ldrb	r3, [r0, #0]
 8003f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d104      	bne.n	8003f62 <netconn_tcp_recvd+0x1a>
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8003f58:	466a      	mov	r2, sp
 8003f5a:	f7ff feb3 	bl	8003cc4 <netconn_tcp_recvd_msg>
}
 8003f5e:	b008      	add	sp, #32
 8003f60:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <netconn_tcp_recvd+0x30>)
 8003f64:	f240 22b5 	movw	r2, #693	; 0x2b5
 8003f68:	4904      	ldr	r1, [pc, #16]	; (8003f7c <netconn_tcp_recvd+0x34>)
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <netconn_tcp_recvd+0x38>)
 8003f6c:	f026 feae 	bl	802accc <iprintf>
 8003f70:	f06f 000f 	mvn.w	r0, #15
 8003f74:	e7f3      	b.n	8003f5e <netconn_tcp_recvd+0x16>
 8003f76:	bf00      	nop
 8003f78:	0802bbf0 	.word	0x0802bbf0
 8003f7c:	0802bc24 	.word	0x0802bc24
 8003f80:	0802bc48 	.word	0x0802bc48

08003f84 <netconn_send>:
{
 8003f84:	b500      	push	{lr}
 8003f86:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003f88:	b140      	cbz	r0, 8003f9c <netconn_send+0x18>
  API_MSG_VAR_REF(msg).conn = conn;
 8003f8a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8003f8c:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8003f8e:	4669      	mov	r1, sp
 8003f90:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <netconn_send+0x2c>)
 8003f92:	f7ff fe8b 	bl	8003cac <netconn_apimsg>
}
 8003f96:	b009      	add	sp, #36	; 0x24
 8003f98:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <netconn_send+0x30>)
 8003f9e:	f240 32b2 	movw	r2, #946	; 0x3b2
 8003fa2:	4905      	ldr	r1, [pc, #20]	; (8003fb8 <netconn_send+0x34>)
 8003fa4:	4805      	ldr	r0, [pc, #20]	; (8003fbc <netconn_send+0x38>)
 8003fa6:	f026 fe91 	bl	802accc <iprintf>
 8003faa:	f06f 000f 	mvn.w	r0, #15
 8003fae:	e7f2      	b.n	8003f96 <netconn_send+0x12>
 8003fb0:	080053ab 	.word	0x080053ab
 8003fb4:	0802bbf0 	.word	0x0802bbf0
 8003fb8:	0802bdac 	.word	0x0802bdac
 8003fbc:	0802bc48 	.word	0x0802bc48

08003fc0 <netconn_write_vectors_partly>:
{
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8003fc6:	b338      	cbz	r0, 8004018 <netconn_write_vectors_partly+0x58>
 8003fc8:	469c      	mov	ip, r3
 8003fca:	4603      	mov	r3, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8003fcc:	7800      	ldrb	r0, [r0, #0]
 8003fce:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003fd2:	2810      	cmp	r0, #16
 8003fd4:	d12a      	bne.n	800402c <netconn_write_vectors_partly+0x6c>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8003fd6:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 8003fda:	f010 0f02 	tst.w	r0, #2
 8003fde:	d12f      	bne.n	8004040 <netconn_write_vectors_partly+0x80>
 8003fe0:	f00c 0004 	and.w	r0, ip, #4
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	bf14      	ite	ne
 8003fe8:	f04f 0801 	movne.w	r8, #1
 8003fec:	f04f 0800 	moveq.w	r8, #0
  if (dontblock && !bytes_written) {
 8003ff0:	d128      	bne.n	8004044 <netconn_write_vectors_partly+0x84>
  for (i = 0; i < vectorcnt; i++) {
 8003ff2:	4617      	mov	r7, r2
    return ERR_OK;
 8003ff4:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8003ff6:	b162      	cbz	r2, 8004012 <netconn_write_vectors_partly+0x52>
    size += vectors[i].len;
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8003ffe:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8004000:	3001      	adds	r0, #1
 8004002:	42b8      	cmp	r0, r7
 8004004:	d024      	beq.n	8004050 <netconn_write_vectors_partly+0x90>
    if (size < vectors[i].len) {
 8004006:	f856 5030 	ldr.w	r5, [r6, r0, lsl #3]
 800400a:	1964      	adds	r4, r4, r5
 800400c:	d3f8      	bcc.n	8004000 <netconn_write_vectors_partly+0x40>
      return ERR_VAL;
 800400e:	f06f 0005 	mvn.w	r0, #5
}
 8004012:	b008      	add	sp, #32
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <netconn_write_vectors_partly+0x124>)
 800401a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800401e:	4932      	ldr	r1, [pc, #200]	; (80040e8 <netconn_write_vectors_partly+0x128>)
 8004020:	4832      	ldr	r0, [pc, #200]	; (80040ec <netconn_write_vectors_partly+0x12c>)
 8004022:	f026 fe53 	bl	802accc <iprintf>
 8004026:	f06f 000f 	mvn.w	r0, #15
 800402a:	e7f2      	b.n	8004012 <netconn_write_vectors_partly+0x52>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800402c:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <netconn_write_vectors_partly+0x124>)
 800402e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004032:	492f      	ldr	r1, [pc, #188]	; (80040f0 <netconn_write_vectors_partly+0x130>)
 8004034:	482d      	ldr	r0, [pc, #180]	; (80040ec <netconn_write_vectors_partly+0x12c>)
 8004036:	f026 fe49 	bl	802accc <iprintf>
 800403a:	f06f 0005 	mvn.w	r0, #5
 800403e:	e7e8      	b.n	8004012 <netconn_write_vectors_partly+0x52>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004040:	f04f 0801 	mov.w	r8, #1
  if (dontblock && !bytes_written) {
 8004044:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004046:	2800      	cmp	r0, #0
 8004048:	d1d3      	bne.n	8003ff2 <netconn_write_vectors_partly+0x32>
    return ERR_VAL;
 800404a:	f06f 0005 	mvn.w	r0, #5
 800404e:	e7e0      	b.n	8004012 <netconn_write_vectors_partly+0x52>
  if (size == 0) {
 8004050:	2c00      	cmp	r4, #0
 8004052:	d040      	beq.n	80040d6 <netconn_write_vectors_partly+0x116>
  } else if (size > SSIZE_MAX) {
 8004054:	2c00      	cmp	r4, #0
 8004056:	da21      	bge.n	800409c <netconn_write_vectors_partly+0xdc>
    if (!bytes_written) {
 8004058:	980e      	ldr	r0, [sp, #56]	; 0x38
 800405a:	2800      	cmp	r0, #0
 800405c:	d03d      	beq.n	80040da <netconn_write_vectors_partly+0x11a>
  API_MSG_VAR_REF(msg).conn = conn;
 800405e:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8004060:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8004062:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	9304      	str	r3, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800406a:	f88d c01c 	strb.w	ip, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800406e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004072:	9205      	str	r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8004074:	9306      	str	r3, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004076:	4669      	mov	r1, sp
 8004078:	481e      	ldr	r0, [pc, #120]	; (80040f4 <netconn_write_vectors_partly+0x134>)
 800407a:	f7ff fe17 	bl	8003cac <netconn_apimsg>
  if (err == ERR_OK) {
 800407e:	2800      	cmp	r0, #0
 8004080:	d1c7      	bne.n	8004012 <netconn_write_vectors_partly+0x52>
    size = (size_t)limited;
 8004082:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8004086:	9b06      	ldr	r3, [sp, #24]
 8004088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800408a:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 800408c:	f1b8 0f00 	cmp.w	r8, #0
 8004090:	d126      	bne.n	80040e0 <netconn_write_vectors_partly+0x120>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8004092:	9b06      	ldr	r3, [sp, #24]
 8004094:	42a3      	cmp	r3, r4
 8004096:	d115      	bne.n	80040c4 <netconn_write_vectors_partly+0x104>
  return err;
 8004098:	2000      	movs	r0, #0
 800409a:	e7ba      	b.n	8004012 <netconn_write_vectors_partly+0x52>
  API_MSG_VAR_REF(msg).conn = conn;
 800409c:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800409e:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80040a0:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	9304      	str	r3, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80040a8:	f88d c01c 	strb.w	ip, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80040ac:	9405      	str	r4, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80040ae:	9306      	str	r3, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80040b0:	4669      	mov	r1, sp
 80040b2:	4810      	ldr	r0, [pc, #64]	; (80040f4 <netconn_write_vectors_partly+0x134>)
 80040b4:	f7ff fdfa 	bl	8003cac <netconn_apimsg>
  if (err == ERR_OK) {
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d1aa      	bne.n	8004012 <netconn_write_vectors_partly+0x52>
    if (bytes_written != NULL) {
 80040bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0e4      	beq.n	800408c <netconn_write_vectors_partly+0xcc>
 80040c2:	e7e0      	b.n	8004086 <netconn_write_vectors_partly+0xc6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80040c4:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <netconn_write_vectors_partly+0x124>)
 80040c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80040ca:	490b      	ldr	r1, [pc, #44]	; (80040f8 <netconn_write_vectors_partly+0x138>)
 80040cc:	4807      	ldr	r0, [pc, #28]	; (80040ec <netconn_write_vectors_partly+0x12c>)
 80040ce:	f026 fdfd 	bl	802accc <iprintf>
  return err;
 80040d2:	2000      	movs	r0, #0
 80040d4:	e79d      	b.n	8004012 <netconn_write_vectors_partly+0x52>
    return ERR_OK;
 80040d6:	2000      	movs	r0, #0
 80040d8:	e79b      	b.n	8004012 <netconn_write_vectors_partly+0x52>
      return ERR_VAL;
 80040da:	f06f 0005 	mvn.w	r0, #5
 80040de:	e798      	b.n	8004012 <netconn_write_vectors_partly+0x52>
  return err;
 80040e0:	2000      	movs	r0, #0
 80040e2:	e796      	b.n	8004012 <netconn_write_vectors_partly+0x52>
 80040e4:	0802bbf0 	.word	0x0802bbf0
 80040e8:	0802bdc8 	.word	0x0802bdc8
 80040ec:	0802bc48 	.word	0x0802bc48
 80040f0:	0802bde4 	.word	0x0802bde4
 80040f4:	08005431 	.word	0x08005431
 80040f8:	0802be08 	.word	0x0802be08

080040fc <netconn_write_partly>:
{
 80040fc:	b500      	push	{lr}
 80040fe:	b085      	sub	sp, #20
  vector.ptr = dataptr;
 8004100:	9102      	str	r1, [sp, #8]
  vector.len = size;
 8004102:	9203      	str	r2, [sp, #12]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8004104:	9a06      	ldr	r2, [sp, #24]
 8004106:	9200      	str	r2, [sp, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	a902      	add	r1, sp, #8
 800410c:	f7ff ff58 	bl	8003fc0 <netconn_write_vectors_partly>
}
 8004110:	b005      	add	sp, #20
 8004112:	f85d fb04 	ldr.w	pc, [sp], #4

08004116 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8004116:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8004118:	b150      	cbz	r0, 8004130 <netconn_err+0x1a>
 800411a:	4604      	mov	r4, r0
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800411c:	f00b ffac 	bl	8010078 <sys_arch_protect>
  err = conn->pending_err;
 8004120:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8004128:	f00b ffb2 	bl	8010090 <sys_arch_unprotect>
  return err;
}
 800412c:	4628      	mov	r0, r5
 800412e:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004130:	2500      	movs	r5, #0
 8004132:	e7fb      	b.n	800412c <netconn_err+0x16>

08004134 <netconn_recv_data>:
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	b083      	sub	sp, #12
  void *buf = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800413c:	2900      	cmp	r1, #0
 800413e:	d03d      	beq.n	80041bc <netconn_recv_data+0x88>
 8004140:	4604      	mov	r4, r0
 8004142:	4617      	mov	r7, r2
 8004144:	460e      	mov	r6, r1
  *new_buf = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800414a:	2800      	cmp	r0, #0
 800414c:	d040      	beq.n	80041d0 <netconn_recv_data+0x9c>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800414e:	f100 0510 	add.w	r5, r0, #16
 8004152:	4628      	mov	r0, r5
 8004154:	f00b ff01 	bl	800ff5a <sys_mbox_valid>
 8004158:	2800      	cmp	r0, #0
 800415a:	d043      	beq.n	80041e4 <netconn_recv_data+0xb0>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800415c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	f007 0204 	and.w	r2, r7, #4
 8004168:	4313      	orrs	r3, r2
 800416a:	d103      	bne.n	8004174 <netconn_recv_data+0x40>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800416c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d04e      	beq.n	8004212 <netconn_recv_data+0xde>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004174:	a901      	add	r1, sp, #4
 8004176:	4628      	mov	r0, r5
 8004178:	f00b fedd 	bl	800ff36 <sys_arch_mbox_tryfetch>
 800417c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004180:	d038      	beq.n	80041f4 <netconn_recv_data+0xc0>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004182:	7823      	ldrb	r3, [r4, #0]
 8004184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004188:	2b10      	cmp	r3, #16
 800418a:	d048      	beq.n	800421e <netconn_recv_data+0xea>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d055      	beq.n	800423e <netconn_recv_data+0x10a>
    len = netbuf_len((struct netbuf *)buf);
 8004192:	9b01      	ldr	r3, [sp, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	891d      	ldrh	r5, [r3, #8]
  SYS_ARCH_DEC(conn->recv_avail, len);
 8004198:	f00b ff6e 	bl	8010078 <sys_arch_protect>
 800419c:	6a23      	ldr	r3, [r4, #32]
 800419e:	1b5b      	subs	r3, r3, r5
 80041a0:	6223      	str	r3, [r4, #32]
 80041a2:	f00b ff75 	bl	8010090 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80041a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041a8:	b11b      	cbz	r3, 80041b2 <netconn_recv_data+0x7e>
 80041aa:	462a      	mov	r2, r5
 80041ac:	2101      	movs	r1, #1
 80041ae:	4620      	mov	r0, r4
 80041b0:	4798      	blx	r3
  *new_buf = buf;
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80041b6:	2000      	movs	r0, #0
}
 80041b8:	b003      	add	sp, #12
 80041ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <netconn_recv_data+0x11c>)
 80041be:	f44f 7212 	mov.w	r2, #584	; 0x248
 80041c2:	4924      	ldr	r1, [pc, #144]	; (8004254 <netconn_recv_data+0x120>)
 80041c4:	4824      	ldr	r0, [pc, #144]	; (8004258 <netconn_recv_data+0x124>)
 80041c6:	f026 fd81 	bl	802accc <iprintf>
 80041ca:	f06f 000f 	mvn.w	r0, #15
 80041ce:	e7f3      	b.n	80041b8 <netconn_recv_data+0x84>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <netconn_recv_data+0x11c>)
 80041d2:	f240 224a 	movw	r2, #586	; 0x24a
 80041d6:	4921      	ldr	r1, [pc, #132]	; (800425c <netconn_recv_data+0x128>)
 80041d8:	481f      	ldr	r0, [pc, #124]	; (8004258 <netconn_recv_data+0x124>)
 80041da:	f026 fd77 	bl	802accc <iprintf>
 80041de:	f06f 000f 	mvn.w	r0, #15
 80041e2:	e7e9      	b.n	80041b8 <netconn_recv_data+0x84>
    err_t err = netconn_err(conn);
 80041e4:	4620      	mov	r0, r4
 80041e6:	f7ff ff96 	bl	8004116 <netconn_err>
    return ERR_CONN;
 80041ea:	2800      	cmp	r0, #0
 80041ec:	bf08      	it	eq
 80041ee:	f06f 000a 	mvneq.w	r0, #10
 80041f2:	e7e1      	b.n	80041b8 <netconn_recv_data+0x84>
      err = netconn_err(conn);
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff ff8e 	bl	8004116 <netconn_err>
      if (err != ERR_OK) {
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1dc      	bne.n	80041b8 <netconn_recv_data+0x84>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80041fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      return ERR_WOULDBLOCK;
 8004202:	f013 0f01 	tst.w	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	f06f 000a 	mvnne.w	r0, #10
 800420c:	f06f 0006 	mvneq.w	r0, #6
 8004210:	e7d2      	b.n	80041b8 <netconn_recv_data+0x84>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	a901      	add	r1, sp, #4
 8004216:	4628      	mov	r0, r5
 8004218:	f00b fe66 	bl	800fee8 <sys_arch_mbox_fetch>
 800421c:	e7b1      	b.n	8004182 <netconn_recv_data+0x4e>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800421e:	f10d 0103 	add.w	r1, sp, #3
 8004222:	9801      	ldr	r0, [sp, #4]
 8004224:	f000 fe5c 	bl	8004ee0 <lwip_netconn_is_err_msg>
 8004228:	b130      	cbz	r0, 8004238 <netconn_recv_data+0x104>
      if (err == ERR_CLSD) {
 800422a:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800422e:	f110 0f0f 	cmn.w	r0, #15
 8004232:	bf08      	it	eq
 8004234:	2000      	moveq	r0, #0
 8004236:	e7bf      	b.n	80041b8 <netconn_recv_data+0x84>
    len = ((struct pbuf *)buf)->tot_len;
 8004238:	9b01      	ldr	r3, [sp, #4]
 800423a:	891d      	ldrh	r5, [r3, #8]
 800423c:	e7ac      	b.n	8004198 <netconn_recv_data+0x64>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800423e:	4b04      	ldr	r3, [pc, #16]	; (8004250 <netconn_recv_data+0x11c>)
 8004240:	f240 2291 	movw	r2, #657	; 0x291
 8004244:	4906      	ldr	r1, [pc, #24]	; (8004260 <netconn_recv_data+0x12c>)
 8004246:	4804      	ldr	r0, [pc, #16]	; (8004258 <netconn_recv_data+0x124>)
 8004248:	f026 fd40 	bl	802accc <iprintf>
 800424c:	e7a1      	b.n	8004192 <netconn_recv_data+0x5e>
 800424e:	bf00      	nop
 8004250:	0802bbf0 	.word	0x0802bbf0
 8004254:	0802be2c 	.word	0x0802be2c
 8004258:	0802bc48 	.word	0x0802bc48
 800425c:	0802be4c 	.word	0x0802be4c
 8004260:	0802be68 	.word	0x0802be68

08004264 <netconn_recv_udp_raw_netbuf_flags>:
{
 8004264:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8004266:	b138      	cbz	r0, 8004278 <netconn_recv_udp_raw_netbuf_flags+0x14>
 8004268:	7803      	ldrb	r3, [r0, #0]
 800426a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800426e:	2b10      	cmp	r3, #16
 8004270:	d002      	beq.n	8004278 <netconn_recv_udp_raw_netbuf_flags+0x14>
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004272:	f7ff ff5f 	bl	8004134 <netconn_recv_data>
}
 8004276:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <netconn_recv_udp_raw_netbuf_flags+0x28>)
 800427a:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800427e:	4904      	ldr	r1, [pc, #16]	; (8004290 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 8004280:	4804      	ldr	r0, [pc, #16]	; (8004294 <netconn_recv_udp_raw_netbuf_flags+0x30>)
 8004282:	f026 fd23 	bl	802accc <iprintf>
 8004286:	f06f 000f 	mvn.w	r0, #15
 800428a:	e7f4      	b.n	8004276 <netconn_recv_udp_raw_netbuf_flags+0x12>
 800428c:	0802bbf0 	.word	0x0802bbf0
 8004290:	0802be74 	.word	0x0802be74
 8004294:	0802bc48 	.word	0x0802bc48

08004298 <netconn_recv_data_tcp>:
{
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	4604      	mov	r4, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80042a2:	3010      	adds	r0, #16
 80042a4:	f00b fe59 	bl	800ff5a <sys_mbox_valid>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d042      	beq.n	8004332 <netconn_recv_data_tcp+0x9a>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80042ac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80042b0:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	db1d      	blt.n	80042f4 <netconn_recv_data_tcp+0x5c>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80042b8:	4632      	mov	r2, r6
 80042ba:	4639      	mov	r1, r7
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff ff39 	bl	8004134 <netconn_recv_data>
  if (err != ERR_OK) {
 80042c2:	4605      	mov	r5, r0
 80042c4:	bb48      	cbnz	r0, 800431a <netconn_recv_data_tcp+0x82>
  buf = *new_buf;
 80042c6:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80042c8:	f016 0f08 	tst.w	r6, #8
 80042cc:	d105      	bne.n	80042da <netconn_recv_data_tcp+0x42>
    u16_t len = buf ? buf->tot_len : 1;
 80042ce:	b33f      	cbz	r7, 8004320 <netconn_recv_data_tcp+0x88>
 80042d0:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80042d2:	466a      	mov	r2, sp
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fcf5 	bl	8003cc4 <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 80042da:	b9f7      	cbnz	r7, 800431a <netconn_recv_data_tcp+0x82>
    if (apiflags & NETCONN_NOFIN) {
 80042dc:	f016 0f10 	tst.w	r6, #16
 80042e0:	d00c      	beq.n	80042fc <netconn_recv_data_tcp+0x64>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80042e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80042e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      return ERR_WOULDBLOCK;
 80042ee:	f06f 0506 	mvn.w	r5, #6
 80042f2:	e012      	b.n	800431a <netconn_recv_data_tcp+0x82>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80042f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80042fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042fe:	b11b      	cbz	r3, 8004308 <netconn_recv_data_tcp+0x70>
 8004300:	2200      	movs	r2, #0
 8004302:	2101      	movs	r1, #1
 8004304:	4620      	mov	r0, r4
 8004306:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	b95b      	cbnz	r3, 8004324 <netconn_recv_data_tcp+0x8c>
        err = netconn_err(conn);
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff ff02 	bl	8004116 <netconn_err>
        return ERR_RST;
 8004312:	1e05      	subs	r5, r0, #0
 8004314:	bf08      	it	eq
 8004316:	f06f 050d 	mvneq.w	r5, #13
}
 800431a:	4628      	mov	r0, r5
 800431c:	b009      	add	sp, #36	; 0x24
 800431e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8004320:	2101      	movs	r1, #1
 8004322:	e7d6      	b.n	80042d2 <netconn_recv_data_tcp+0x3a>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004324:	2101      	movs	r1, #1
 8004326:	4620      	mov	r0, r4
 8004328:	f7ff fcee 	bl	8003d08 <netconn_close_shutdown>
      return ERR_CLSD;
 800432c:	f06f 050e 	mvn.w	r5, #14
 8004330:	e7f3      	b.n	800431a <netconn_recv_data_tcp+0x82>
    return ERR_CONN;
 8004332:	f06f 050a 	mvn.w	r5, #10
 8004336:	e7f0      	b.n	800431a <netconn_recv_data_tcp+0x82>

08004338 <netconn_recv_tcp_pbuf_flags>:
{
 8004338:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800433a:	b138      	cbz	r0, 800434c <netconn_recv_tcp_pbuf_flags+0x14>
 800433c:	7803      	ldrb	r3, [r0, #0]
 800433e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004342:	2b10      	cmp	r3, #16
 8004344:	d102      	bne.n	800434c <netconn_recv_tcp_pbuf_flags+0x14>
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8004346:	f7ff ffa7 	bl	8004298 <netconn_recv_data_tcp>
}
 800434a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <netconn_recv_tcp_pbuf_flags+0x28>)
 800434e:	f240 3225 	movw	r2, #805	; 0x325
 8004352:	4904      	ldr	r1, [pc, #16]	; (8004364 <netconn_recv_tcp_pbuf_flags+0x2c>)
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <netconn_recv_tcp_pbuf_flags+0x30>)
 8004356:	f026 fcb9 	bl	802accc <iprintf>
 800435a:	f06f 000f 	mvn.w	r0, #15
 800435e:	e7f4      	b.n	800434a <netconn_recv_tcp_pbuf_flags+0x12>
 8004360:	0802bbf0 	.word	0x0802bbf0
 8004364:	0802bc24 	.word	0x0802bc24
 8004368:	0802bc48 	.word	0x0802bc48

0800436c <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
 800436c:	b508      	push	{r3, lr}
  return netconn_close_shutdown(conn, (u8_t)((shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0)));
 800436e:	2a00      	cmp	r2, #0
 8004370:	bf14      	ite	ne
 8004372:	2302      	movne	r3, #2
 8004374:	2300      	moveq	r3, #0
 8004376:	2900      	cmp	r1, #0
 8004378:	bf0c      	ite	eq
 800437a:	4619      	moveq	r1, r3
 800437c:	f043 0101 	orrne.w	r1, r3, #1
 8004380:	f7ff fcc2 	bl	8003d08 <netconn_close_shutdown>
}
 8004384:	bd08      	pop	{r3, pc}
	...

08004388 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 8004388:	b510      	push	{r4, lr}
 800438a:	b086      	sub	sp, #24
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 800438c:	b190      	cbz	r0, 80043b4 <netconn_gethostbyname+0x2c>
 800438e:	4603      	mov	r3, r0
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 8004390:	b1d1      	cbz	r1, 80043c8 <netconn_gethostbyname+0x40>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 8004392:	f10d 0203 	add.w	r2, sp, #3
 8004396:	9205      	str	r2, [sp, #20]
  msg.sem = &sem;
 8004398:	a801      	add	r0, sp, #4
 800439a:	9004      	str	r0, [sp, #16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 800439c:	9103      	str	r1, [sp, #12]
  API_VAR_REF(msg).name = name;
 800439e:	9302      	str	r3, [sp, #8]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 80043a0:	2100      	movs	r1, #0
 80043a2:	f00b fde2 	bl	800ff6a <sys_sem_new>
 80043a6:	4604      	mov	r4, r0
 80043a8:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 80043ac:	b1b0      	cbz	r0, 80043dc <netconn_gethostbyname+0x54>
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
}
 80043ae:	4620      	mov	r0, r4
 80043b0:	b006      	add	sp, #24
 80043b2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <netconn_gethostbyname+0x70>)
 80043b6:	f240 5204 	movw	r2, #1284	; 0x504
 80043ba:	4910      	ldr	r1, [pc, #64]	; (80043fc <netconn_gethostbyname+0x74>)
 80043bc:	4810      	ldr	r0, [pc, #64]	; (8004400 <netconn_gethostbyname+0x78>)
 80043be:	f026 fc85 	bl	802accc <iprintf>
 80043c2:	f06f 040f 	mvn.w	r4, #15
 80043c6:	e7f2      	b.n	80043ae <netconn_gethostbyname+0x26>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <netconn_gethostbyname+0x70>)
 80043ca:	f240 5205 	movw	r2, #1285	; 0x505
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <netconn_gethostbyname+0x7c>)
 80043d0:	480b      	ldr	r0, [pc, #44]	; (8004400 <netconn_gethostbyname+0x78>)
 80043d2:	f026 fc7b 	bl	802accc <iprintf>
 80043d6:	f06f 040f 	mvn.w	r4, #15
 80043da:	e7e8      	b.n	80043ae <netconn_gethostbyname+0x26>
  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 80043dc:	9a04      	ldr	r2, [sp, #16]
 80043de:	a902      	add	r1, sp, #8
 80043e0:	4809      	ldr	r0, [pc, #36]	; (8004408 <netconn_gethostbyname+0x80>)
 80043e2:	f002 f91b 	bl	800661c <tcpip_send_msg_wait_sem>
 80043e6:	4604      	mov	r4, r0
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 80043e8:	9804      	ldr	r0, [sp, #16]
 80043ea:	f00b fdfb 	bl	800ffe4 <sys_sem_free>
  if (cberr != ERR_OK) {
 80043ee:	2c00      	cmp	r4, #0
 80043f0:	d1dd      	bne.n	80043ae <netconn_gethostbyname+0x26>
  return err;
 80043f2:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 80043f6:	e7da      	b.n	80043ae <netconn_gethostbyname+0x26>
 80043f8:	0802bbf0 	.word	0x0802bbf0
 80043fc:	0802bea0 	.word	0x0802bea0
 8004400:	0802bc48 	.word	0x0802bc48
 8004404:	0802bec4 	.word	0x0802bec4
 8004408:	0800566d 	.word	0x0800566d

0800440c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	4604      	mov	r4, r0
 8004412:	4615      	mov	r5, r2
 8004414:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004416:	460e      	mov	r6, r1
 8004418:	b1f1      	cbz	r1, 8004458 <recv_udp+0x4c>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800441a:	b324      	cbz	r4, 8004466 <recv_udp+0x5a>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	42b3      	cmp	r3, r6
 8004420:	d005      	beq.n	800442e <recv_udp+0x22>
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <recv_udp+0xcc>)
 8004424:	22ee      	movs	r2, #238	; 0xee
 8004426:	492d      	ldr	r1, [pc, #180]	; (80044dc <recv_udp+0xd0>)
 8004428:	482d      	ldr	r0, [pc, #180]	; (80044e0 <recv_udp+0xd4>)
 800442a:	f026 fc4f 	bl	802accc <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 800442e:	f00b fe23 	bl	8010078 <sys_arch_protect>
 8004432:	6a27      	ldr	r7, [r4, #32]
 8004434:	f00b fe2c 	bl	8010090 <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8004438:	f104 0610 	add.w	r6, r4, #16
 800443c:	4630      	mov	r0, r6
 800443e:	f00b fd8c 	bl	800ff5a <sys_mbox_valid>
 8004442:	b120      	cbz	r0, 800444e <recv_udp+0x42>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 8004444:	892a      	ldrh	r2, [r5, #8]
 8004446:	443a      	add	r2, r7
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8004448:	69e3      	ldr	r3, [r4, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	dd15      	ble.n	800447a <recv_udp+0x6e>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800444e:	4628      	mov	r0, r5
 8004450:	f003 fc94 	bl	8007d7c <pbuf_free>
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8004454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <recv_udp+0xcc>)
 800445a:	22e5      	movs	r2, #229	; 0xe5
 800445c:	4921      	ldr	r1, [pc, #132]	; (80044e4 <recv_udp+0xd8>)
 800445e:	4820      	ldr	r0, [pc, #128]	; (80044e0 <recv_udp+0xd4>)
 8004460:	f026 fc34 	bl	802accc <iprintf>
 8004464:	e7d9      	b.n	800441a <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004466:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <recv_udp+0xcc>)
 8004468:	22e6      	movs	r2, #230	; 0xe6
 800446a:	491f      	ldr	r1, [pc, #124]	; (80044e8 <recv_udp+0xdc>)
 800446c:	481c      	ldr	r0, [pc, #112]	; (80044e0 <recv_udp+0xd4>)
 800446e:	f026 fc2d 	bl	802accc <iprintf>
    pbuf_free(p);
 8004472:	4628      	mov	r0, r5
 8004474:	f003 fc82 	bl	8007d7c <pbuf_free>
    return;
 8004478:	e7ec      	b.n	8004454 <recv_udp+0x48>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800447a:	2006      	movs	r0, #6
 800447c:	f003 f990 	bl	80077a0 <memp_malloc>
  if (buf == NULL) {
 8004480:	4607      	mov	r7, r0
 8004482:	b1f8      	cbz	r0, 80044c4 <recv_udp+0xb8>
    buf->p = p;
 8004484:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 8004486:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8004488:	f1b8 0f00 	cmp.w	r8, #0
 800448c:	d01e      	beq.n	80044cc <recv_udp+0xc0>
 800448e:	f8d8 3000 	ldr.w	r3, [r8]
 8004492:	60bb      	str	r3, [r7, #8]
    buf->port = port;
 8004494:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004498:	81bb      	strh	r3, [r7, #12]
  len = p->tot_len;
 800449a:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800449c:	4639      	mov	r1, r7
 800449e:	4630      	mov	r0, r6
 80044a0:	f00b fd18 	bl	800fed4 <sys_mbox_trypost>
 80044a4:	b9a0      	cbnz	r0, 80044d0 <recv_udp+0xc4>
    SYS_ARCH_INC(conn->recv_avail, len);
 80044a6:	f00b fde7 	bl	8010078 <sys_arch_protect>
 80044aa:	6a23      	ldr	r3, [r4, #32]
 80044ac:	442b      	add	r3, r5
 80044ae:	6223      	str	r3, [r4, #32]
 80044b0:	f00b fdee 	bl	8010090 <sys_arch_unprotect>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80044b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0cc      	beq.n	8004454 <recv_udp+0x48>
 80044ba:	462a      	mov	r2, r5
 80044bc:	2100      	movs	r1, #0
 80044be:	4620      	mov	r0, r4
 80044c0:	4798      	blx	r3
 80044c2:	e7c7      	b.n	8004454 <recv_udp+0x48>
    pbuf_free(p);
 80044c4:	4628      	mov	r0, r5
 80044c6:	f003 fc59 	bl	8007d7c <pbuf_free>
    return;
 80044ca:	e7c3      	b.n	8004454 <recv_udp+0x48>
    ip_addr_set(&buf->addr, addr);
 80044cc:	2300      	movs	r3, #0
 80044ce:	e7e0      	b.n	8004492 <recv_udp+0x86>
    netbuf_delete(buf);
 80044d0:	4638      	mov	r0, r7
 80044d2:	f001 f911 	bl	80056f8 <netbuf_delete>
    return;
 80044d6:	e7bd      	b.n	8004454 <recv_udp+0x48>
 80044d8:	0802bee8 	.word	0x0802bee8
 80044dc:	0802bf60 	.word	0x0802bf60
 80044e0:	0802bc48 	.word	0x0802bc48
 80044e4:	0802bf1c 	.word	0x0802bf1c
 80044e8:	0802bf40 	.word	0x0802bf40

080044ec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80044f0:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 80044f2:	4620      	mov	r0, r4
 80044f4:	f004 f96e 	bl	80087d4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80044f8:	4908      	ldr	r1, [pc, #32]	; (800451c <setup_tcp+0x30>)
 80044fa:	4620      	mov	r0, r4
 80044fc:	f004 f96e 	bl	80087dc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <setup_tcp+0x34>)
 8004502:	4620      	mov	r0, r4
 8004504:	f004 f984 	bl	8008810 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004508:	2202      	movs	r2, #2
 800450a:	4906      	ldr	r1, [pc, #24]	; (8004524 <setup_tcp+0x38>)
 800450c:	4620      	mov	r0, r4
 800450e:	f004 f9b9 	bl	8008884 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004512:	4905      	ldr	r1, [pc, #20]	; (8004528 <setup_tcp+0x3c>)
 8004514:	4620      	mov	r0, r4
 8004516:	f004 f995 	bl	8008844 <tcp_err>
}
 800451a:	bd10      	pop	{r4, pc}
 800451c:	08004ded 	.word	0x08004ded
 8004520:	08004d79 	.word	0x08004d79
 8004524:	08004cf5 	.word	0x08004cf5
 8004528:	0800452d 	.word	0x0800452d

0800452c <err_tcp>:
{
 800452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004530:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004532:	4604      	mov	r4, r0
 8004534:	b368      	cbz	r0, 8004592 <err_tcp+0x66>
  SYS_ARCH_PROTECT(lev);
 8004536:	f00b fd9f 	bl	8010078 <sys_arch_protect>
  conn->pcb.tcp = NULL;
 800453a:	2200      	movs	r2, #0
 800453c:	6062      	str	r2, [r4, #4]
  conn->pending_err = err;
 800453e:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8004540:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  old_state = conn->state;
 800454c:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
 800454e:	7062      	strb	r2, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8004550:	f00b fd9e 	bl	8010090 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004554:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004556:	b17b      	cbz	r3, 8004578 <err_tcp+0x4c>
 8004558:	2200      	movs	r2, #0
 800455a:	2104      	movs	r1, #4
 800455c:	4620      	mov	r0, r4
 800455e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004562:	b14b      	cbz	r3, 8004578 <err_tcp+0x4c>
 8004564:	2200      	movs	r2, #0
 8004566:	4611      	mov	r1, r2
 8004568:	4620      	mov	r0, r4
 800456a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800456c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800456e:	b11b      	cbz	r3, 8004578 <err_tcp+0x4c>
 8004570:	2200      	movs	r2, #0
 8004572:	2102      	movs	r1, #2
 8004574:	4620      	mov	r0, r4
 8004576:	4798      	blx	r3
  switch (err) {
 8004578:	f115 0f0e 	cmn.w	r5, #14
 800457c:	d01a      	beq.n	80045b4 <err_tcp+0x88>
 800457e:	f115 0f0d 	cmn.w	r5, #13
 8004582:	d01a      	beq.n	80045ba <err_tcp+0x8e>
 8004584:	f115 0f0f 	cmn.w	r5, #15
 8004588:	d035      	beq.n	80045f6 <err_tcp+0xca>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800458a:	b955      	cbnz	r5, 80045a2 <err_tcp+0x76>
      return NULL;
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	e015      	b.n	80045be <err_tcp+0x92>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004592:	4b37      	ldr	r3, [pc, #220]	; (8004670 <err_tcp+0x144>)
 8004594:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004598:	4936      	ldr	r1, [pc, #216]	; (8004674 <err_tcp+0x148>)
 800459a:	4837      	ldr	r0, [pc, #220]	; (8004678 <err_tcp+0x14c>)
 800459c:	f026 fb96 	bl	802accc <iprintf>
 80045a0:	e7c9      	b.n	8004536 <err_tcp+0xa>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80045a2:	4b33      	ldr	r3, [pc, #204]	; (8004670 <err_tcp+0x144>)
 80045a4:	227d      	movs	r2, #125	; 0x7d
 80045a6:	4935      	ldr	r1, [pc, #212]	; (800467c <err_tcp+0x150>)
 80045a8:	4833      	ldr	r0, [pc, #204]	; (8004678 <err_tcp+0x14c>)
 80045aa:	f026 fb8f 	bl	802accc <iprintf>
      return NULL;
 80045ae:	f04f 0800 	mov.w	r8, #0
 80045b2:	e004      	b.n	80045be <err_tcp+0x92>
  switch (err) {
 80045b4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800468c <err_tcp+0x160>
 80045b8:	e001      	b.n	80045be <err_tcp+0x92>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80045ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004690 <err_tcp+0x164>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80045be:	f104 0710 	add.w	r7, r4, #16
 80045c2:	4638      	mov	r0, r7
 80045c4:	f00b fcc9 	bl	800ff5a <sys_mbox_valid>
 80045c8:	b9c0      	cbnz	r0, 80045fc <err_tcp+0xd0>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80045ca:	f104 0714 	add.w	r7, r4, #20
 80045ce:	4638      	mov	r0, r7
 80045d0:	f00b fcc3 	bl	800ff5a <sys_mbox_valid>
 80045d4:	b9b8      	cbnz	r0, 8004606 <err_tcp+0xda>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80045d6:	2e01      	cmp	r6, #1
 80045d8:	d01a      	beq.n	8004610 <err_tcp+0xe4>
 80045da:	1ef3      	subs	r3, r6, #3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d916      	bls.n	8004610 <err_tcp+0xe4>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80045e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045e4:	b38b      	cbz	r3, 800464a <err_tcp+0x11e>
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <err_tcp+0x144>)
 80045e8:	f240 12f7 	movw	r2, #503	; 0x1f7
 80045ec:	4924      	ldr	r1, [pc, #144]	; (8004680 <err_tcp+0x154>)
 80045ee:	4822      	ldr	r0, [pc, #136]	; (8004678 <err_tcp+0x14c>)
 80045f0:	f026 fb6c 	bl	802accc <iprintf>
}
 80045f4:	e029      	b.n	800464a <err_tcp+0x11e>
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80045f6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8004694 <err_tcp+0x168>
 80045fa:	e7e0      	b.n	80045be <err_tcp+0x92>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80045fc:	4641      	mov	r1, r8
 80045fe:	4638      	mov	r0, r7
 8004600:	f00b fc68 	bl	800fed4 <sys_mbox_trypost>
 8004604:	e7e1      	b.n	80045ca <err_tcp+0x9e>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8004606:	4641      	mov	r1, r8
 8004608:	4638      	mov	r0, r7
 800460a:	f00b fc63 	bl	800fed4 <sys_mbox_trypost>
 800460e:	e7e2      	b.n	80045d6 <err_tcp+0xaa>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8004610:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    SET_NONBLOCKING_CONNECT(conn, 0);
 8004614:	f023 0204 	bic.w	r2, r3, #4
 8004618:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    if (!was_nonblocking_connect) {
 800461c:	f013 0f04 	tst.w	r3, #4
 8004620:	d113      	bne.n	800464a <err_tcp+0x11e>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004622:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004624:	b19b      	cbz	r3, 800464e <err_tcp+0x122>
      if (old_state == NETCONN_CLOSE) {
 8004626:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 8004628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800462a:	bf06      	itte	eq
 800462c:	2200      	moveq	r2, #0
 800462e:	711a      	strbeq	r2, [r3, #4]
        conn->current_msg->err = err;
 8004630:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004634:	681d      	ldr	r5, [r3, #0]
 8004636:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004638:	4628      	mov	r0, r5
 800463a:	f00b fcd8 	bl	800ffee <sys_sem_valid>
 800463e:	b170      	cbz	r0, 800465e <err_tcp+0x132>
      conn->current_msg = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	62a3      	str	r3, [r4, #40]	; 0x28
      sys_sem_signal(op_completed_sem);
 8004644:	4628      	mov	r0, r5
 8004646:	f00b fcc8 	bl	800ffda <sys_sem_signal>
}
 800464a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <err_tcp+0x144>)
 8004650:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8004654:	490b      	ldr	r1, [pc, #44]	; (8004684 <err_tcp+0x158>)
 8004656:	4808      	ldr	r0, [pc, #32]	; (8004678 <err_tcp+0x14c>)
 8004658:	f026 fb38 	bl	802accc <iprintf>
 800465c:	e7e3      	b.n	8004626 <err_tcp+0xfa>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800465e:	4b04      	ldr	r3, [pc, #16]	; (8004670 <err_tcp+0x144>)
 8004660:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004664:	4908      	ldr	r1, [pc, #32]	; (8004688 <err_tcp+0x15c>)
 8004666:	4804      	ldr	r0, [pc, #16]	; (8004678 <err_tcp+0x14c>)
 8004668:	f026 fb30 	bl	802accc <iprintf>
 800466c:	e7e8      	b.n	8004640 <err_tcp+0x114>
 800466e:	bf00      	nop
 8004670:	0802bee8 	.word	0x0802bee8
 8004674:	0802bf80 	.word	0x0802bf80
 8004678:	0802bc48 	.word	0x0802bc48
 800467c:	0802bf90 	.word	0x0802bf90
 8004680:	0802bfd8 	.word	0x0802bfd8
 8004684:	0802bfa0 	.word	0x0802bfa0
 8004688:	0802bfbc 	.word	0x0802bfbc
 800468c:	0802c3b7 	.word	0x0802c3b7
 8004690:	0802c3b5 	.word	0x0802c3b5
 8004694:	0802c3b6 	.word	0x0802c3b6

08004698 <lwip_netconn_do_connected>:

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004698:	2800      	cmp	r0, #0
 800469a:	d06d      	beq.n	8004778 <lwip_netconn_do_connected+0xe0>
{
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4616      	mov	r6, r2
 80046a0:	4604      	mov	r4, r0
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80046a2:	7843      	ldrb	r3, [r0, #1]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d123      	bne.n	80046f0 <lwip_netconn_do_connected+0x58>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80046a8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80046aa:	b34d      	cbz	r5, 8004700 <lwip_netconn_do_connected+0x68>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
    conn->current_msg->err = err;
 80046ac:	712e      	strb	r6, [r5, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80046ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	350c      	adds	r5, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80046b4:	7823      	ldrb	r3, [r4, #0]
 80046b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d045      	beq.n	800474a <lwip_netconn_do_connected+0xb2>
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80046be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  SET_NONBLOCKING_CONNECT(conn, 0);
 80046c2:	f023 0204 	bic.w	r2, r3, #4
 80046c6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 80046ca:	f013 0604 	ands.w	r6, r3, #4
 80046ce:	d142      	bne.n	8004756 <lwip_netconn_do_connected+0xbe>
 80046d0:	2d00      	cmp	r5, #0
 80046d2:	d054      	beq.n	800477e <lwip_netconn_do_connected+0xe6>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62a3      	str	r3, [r4, #40]	; 0x28
  conn->state = NETCONN_NONE;
 80046d8:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80046da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05b      	beq.n	8004798 <lwip_netconn_do_connected+0x100>
 80046e0:	2200      	movs	r2, #0
 80046e2:	2102      	movs	r1, #2
 80046e4:	4620      	mov	r0, r4
 80046e6:	4798      	blx	r3

  if (was_blocking) {
 80046e8:	2e00      	cmp	r6, #0
 80046ea:	d055      	beq.n	8004798 <lwip_netconn_do_connected+0x100>
    sys_sem_signal(op_completed_sem);
  }
  return ERR_OK;
 80046ec:	2000      	movs	r0, #0
}
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80046f0:	4b2c      	ldr	r3, [pc, #176]	; (80047a4 <lwip_netconn_do_connected+0x10c>)
 80046f2:	f240 5223 	movw	r2, #1315	; 0x523
 80046f6:	492c      	ldr	r1, [pc, #176]	; (80047a8 <lwip_netconn_do_connected+0x110>)
 80046f8:	482c      	ldr	r0, [pc, #176]	; (80047ac <lwip_netconn_do_connected+0x114>)
 80046fa:	f026 fae7 	bl	802accc <iprintf>
 80046fe:	e7d3      	b.n	80046a8 <lwip_netconn_do_connected+0x10>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8004700:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004704:	f013 0f04 	tst.w	r3, #4
 8004708:	d014      	beq.n	8004734 <lwip_netconn_do_connected+0x9c>
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800470a:	7823      	ldrb	r3, [r4, #0]
 800470c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004710:	2b10      	cmp	r3, #16
 8004712:	d01a      	beq.n	800474a <lwip_netconn_do_connected+0xb2>
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8004714:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004718:	f003 0604 	and.w	r6, r3, #4
  SET_NONBLOCKING_CONNECT(conn, 0);
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  conn->current_msg = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	62a3      	str	r3, [r4, #40]	; 0x28
  conn->state = NETCONN_NONE;
 8004728:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800472a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1d7      	bne.n	80046e0 <lwip_netconn_do_connected+0x48>
  return ERR_OK;
 8004730:	2000      	movs	r0, #0
 8004732:	e7dc      	b.n	80046ee <lwip_netconn_do_connected+0x56>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <lwip_netconn_do_connected+0x10c>)
 8004736:	f240 5224 	movw	r2, #1316	; 0x524
 800473a:	491d      	ldr	r1, [pc, #116]	; (80047b0 <lwip_netconn_do_connected+0x118>)
 800473c:	481b      	ldr	r0, [pc, #108]	; (80047ac <lwip_netconn_do_connected+0x114>)
 800473e:	f026 fac5 	bl	802accc <iprintf>
  if (conn->current_msg != NULL) {
 8004742:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004744:	2d00      	cmp	r5, #0
 8004746:	d0b5      	beq.n	80046b4 <lwip_netconn_do_connected+0x1c>
 8004748:	e7b0      	b.n	80046ac <lwip_netconn_do_connected+0x14>
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800474a:	2e00      	cmp	r6, #0
 800474c:	d1b7      	bne.n	80046be <lwip_netconn_do_connected+0x26>
    setup_tcp(conn);
 800474e:	4620      	mov	r0, r4
 8004750:	f7ff fecc 	bl	80044ec <setup_tcp>
 8004754:	e7b3      	b.n	80046be <lwip_netconn_do_connected+0x26>
  LWIP_ASSERT("blocking connect state error",
 8004756:	2d00      	cmp	r5, #0
 8004758:	d0e4      	beq.n	8004724 <lwip_netconn_do_connected+0x8c>
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <lwip_netconn_do_connected+0x10c>)
 800475c:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8004760:	4914      	ldr	r1, [pc, #80]	; (80047b4 <lwip_netconn_do_connected+0x11c>)
 8004762:	4812      	ldr	r0, [pc, #72]	; (80047ac <lwip_netconn_do_connected+0x114>)
 8004764:	f026 fab2 	bl	802accc <iprintf>
  conn->current_msg = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	62a3      	str	r3, [r4, #40]	; 0x28
  conn->state = NETCONN_NONE;
 800476c:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800476e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1b5      	bne.n	80046e0 <lwip_netconn_do_connected+0x48>
  return ERR_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	e7ba      	b.n	80046ee <lwip_netconn_do_connected+0x56>
    return ERR_VAL;
 8004778:	f06f 0005 	mvn.w	r0, #5
}
 800477c:	4770      	bx	lr
  LWIP_ASSERT("blocking connect state error",
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <lwip_netconn_do_connected+0x10c>)
 8004780:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8004784:	490b      	ldr	r1, [pc, #44]	; (80047b4 <lwip_netconn_do_connected+0x11c>)
 8004786:	4809      	ldr	r0, [pc, #36]	; (80047ac <lwip_netconn_do_connected+0x114>)
 8004788:	f026 faa0 	bl	802accc <iprintf>
  conn->current_msg = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	62a3      	str	r3, [r4, #40]	; 0x28
  conn->state = NETCONN_NONE;
 8004790:	7063      	strb	r3, [r4, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004792:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1a3      	bne.n	80046e0 <lwip_netconn_do_connected+0x48>
    sys_sem_signal(op_completed_sem);
 8004798:	4628      	mov	r0, r5
 800479a:	f00b fc1e 	bl	800ffda <sys_sem_signal>
  return ERR_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e7a5      	b.n	80046ee <lwip_netconn_do_connected+0x56>
 80047a2:	bf00      	nop
 80047a4:	0802bee8 	.word	0x0802bee8
 80047a8:	0802bff4 	.word	0x0802bff4
 80047ac:	0802bc48 	.word	0x0802bc48
 80047b0:	0802c014 	.word	0x0802c014
 80047b4:	0802c054 	.word	0x0802c054

080047b8 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 80047b8:	b508      	push	{r3, lr}
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 80047ba:	b151      	cbz	r1, 80047d2 <lwip_netconn_do_dns_found+0x1a>
 80047bc:	460b      	mov	r3, r1
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 80047be:	68d1      	ldr	r1, [r2, #12]
 80047c0:	2000      	movs	r0, #0
 80047c2:	7008      	strb	r0, [r1, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 80047c4:	6851      	ldr	r1, [r2, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	600b      	str	r3, [r1, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 80047ca:	6890      	ldr	r0, [r2, #8]
 80047cc:	f00b fc05 	bl	800ffda <sys_sem_signal>
}
 80047d0:	bd08      	pop	{r3, pc}
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 80047d2:	68d3      	ldr	r3, [r2, #12]
 80047d4:	21fa      	movs	r1, #250	; 0xfa
 80047d6:	7019      	strb	r1, [r3, #0]
 80047d8:	e7f7      	b.n	80047ca <lwip_netconn_do_dns_found+0x12>
	...

080047dc <lwip_netconn_do_writemore>:
{
 80047dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e0:	b083      	sub	sp, #12
 80047e2:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80047e4:	4604      	mov	r4, r0
 80047e6:	b1e8      	cbz	r0, 8004824 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80047e8:	7863      	ldrb	r3, [r4, #1]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d122      	bne.n	8004834 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80047ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047f0:	b343      	cbz	r3, 8004844 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	b373      	cbz	r3, 8004854 <lwip_netconn_do_writemore+0x78>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80047f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d231      	bcs.n	8004864 <lwip_netconn_do_writemore+0x88>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8004800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004802:	899b      	ldrh	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d035      	beq.n	8004874 <lwip_netconn_do_writemore+0x98>
  apiflags = conn->current_msg->msg.w.apiflags;
 8004808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800480a:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800480e:	f894 a024 	ldrb.w	sl, [r4, #36]	; 0x24
 8004812:	f00a 0a02 	and.w	sl, sl, #2
 8004816:	f008 0304 	and.w	r3, r8, #4
 800481a:	ea4a 0a03 	orr.w	sl, sl, r3
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800481e:	f8df b258 	ldr.w	fp, [pc, #600]	; 8004a78 <lwip_netconn_do_writemore+0x29c>
 8004822:	e100      	b.n	8004a26 <lwip_netconn_do_writemore+0x24a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004824:	4b94      	ldr	r3, [pc, #592]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004826:	f240 6273 	movw	r2, #1651	; 0x673
 800482a:	4994      	ldr	r1, [pc, #592]	; (8004a7c <lwip_netconn_do_writemore+0x2a0>)
 800482c:	4894      	ldr	r0, [pc, #592]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800482e:	f026 fa4d 	bl	802accc <iprintf>
 8004832:	e7d9      	b.n	80047e8 <lwip_netconn_do_writemore+0xc>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004834:	4b90      	ldr	r3, [pc, #576]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004836:	f240 6274 	movw	r2, #1652	; 0x674
 800483a:	4992      	ldr	r1, [pc, #584]	; (8004a84 <lwip_netconn_do_writemore+0x2a8>)
 800483c:	4890      	ldr	r0, [pc, #576]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800483e:	f026 fa45 	bl	802accc <iprintf>
 8004842:	e7d4      	b.n	80047ee <lwip_netconn_do_writemore+0x12>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004844:	4b8c      	ldr	r3, [pc, #560]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004846:	f240 6275 	movw	r2, #1653	; 0x675
 800484a:	498f      	ldr	r1, [pc, #572]	; (8004a88 <lwip_netconn_do_writemore+0x2ac>)
 800484c:	488c      	ldr	r0, [pc, #560]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800484e:	f026 fa3d 	bl	802accc <iprintf>
 8004852:	e7ce      	b.n	80047f2 <lwip_netconn_do_writemore+0x16>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004854:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004856:	f240 6276 	movw	r2, #1654	; 0x676
 800485a:	498c      	ldr	r1, [pc, #560]	; (8004a8c <lwip_netconn_do_writemore+0x2b0>)
 800485c:	4888      	ldr	r0, [pc, #544]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800485e:	f026 fa35 	bl	802accc <iprintf>
 8004862:	e7c8      	b.n	80047f6 <lwip_netconn_do_writemore+0x1a>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8004864:	4b84      	ldr	r3, [pc, #528]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004866:	f240 6277 	movw	r2, #1655	; 0x677
 800486a:	4989      	ldr	r1, [pc, #548]	; (8004a90 <lwip_netconn_do_writemore+0x2b4>)
 800486c:	4884      	ldr	r0, [pc, #528]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800486e:	f026 fa2d 	bl	802accc <iprintf>
 8004872:	e7c5      	b.n	8004800 <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8004874:	4b80      	ldr	r3, [pc, #512]	; (8004a78 <lwip_netconn_do_writemore+0x29c>)
 8004876:	f240 6279 	movw	r2, #1657	; 0x679
 800487a:	4986      	ldr	r1, [pc, #536]	; (8004a94 <lwip_netconn_do_writemore+0x2b8>)
 800487c:	4880      	ldr	r0, [pc, #512]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 800487e:	f026 fa25 	bl	802accc <iprintf>
 8004882:	e7c1      	b.n	8004808 <lwip_netconn_do_writemore+0x2c>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8004884:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004888:	4691      	mov	r9, r2
 800488a:	4413      	add	r3, r2
 800488c:	4298      	cmp	r0, r3
 800488e:	d334      	bcc.n	80048fa <lwip_netconn_do_writemore+0x11e>
 8004890:	4615      	mov	r5, r2
      if ((len == 0xffff && diff > 0xffffUL) ||
 8004892:	b2b6      	uxth	r6, r6
 8004894:	42ae      	cmp	r6, r5
 8004896:	f040 80ab 	bne.w	80049f0 <lwip_netconn_do_writemore+0x214>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800489a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800489c:	899b      	ldrh	r3, [r3, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	f240 80a6 	bls.w	80049f0 <lwip_netconn_do_writemore+0x214>
        apiflags |= TCP_WRITE_FLAG_MORE;
 80048a4:	f048 0802 	orr.w	r8, r8, #2
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80048a8:	4643      	mov	r3, r8
 80048aa:	462a      	mov	r2, r5
 80048ac:	4639      	mov	r1, r7
 80048ae:	6860      	ldr	r0, [r4, #4]
 80048b0:	f006 fd7e 	bl	800b3b0 <tcp_write>
      if (err == ERR_OK) {
 80048b4:	4605      	mov	r5, r0
 80048b6:	b348      	cbz	r0, 800490c <lwip_netconn_do_writemore+0x130>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d971      	bls.n	80049a4 <lwip_netconn_do_writemore+0x1c8>
    } else if (err == ERR_MEM) {
 80048c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80048c4:	d04a      	beq.n	800495c <lwip_netconn_do_writemore+0x180>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80048c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048c8:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 80048ca:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62a3      	str	r3, [r4, #40]	; 0x28
    conn->state = NETCONN_NONE;
 80048d0:	7063      	strb	r3, [r4, #1]
    if (delayed)
 80048d2:	9b01      	ldr	r3, [sp, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d154      	bne.n	8004982 <lwip_netconn_do_writemore+0x1a6>
  return ERR_OK;
 80048d8:	2500      	movs	r5, #0
}
 80048da:	4628      	mov	r0, r5
 80048dc:	b003      	add	sp, #12
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80048e2:	46a9      	mov	r9, r5
 80048e4:	442b      	add	r3, r5
 80048e6:	4298      	cmp	r0, r3
 80048e8:	d308      	bcc.n	80048fc <lwip_netconn_do_writemore+0x120>
      if ((len == 0xffff && diff > 0xffffUL) ||
 80048ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ee:	429d      	cmp	r5, r3
 80048f0:	d1cf      	bne.n	8004892 <lwip_netconn_do_writemore+0xb6>
 80048f2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80048f6:	d2d5      	bcs.n	80048a4 <lwip_netconn_do_writemore+0xc8>
 80048f8:	e7cb      	b.n	8004892 <lwip_netconn_do_writemore+0xb6>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80048fa:	4615      	mov	r5, r2
 80048fc:	465b      	mov	r3, fp
 80048fe:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004902:	4965      	ldr	r1, [pc, #404]	; (8004a98 <lwip_netconn_do_writemore+0x2bc>)
 8004904:	485e      	ldr	r0, [pc, #376]	; (8004a80 <lwip_netconn_do_writemore+0x2a4>)
 8004906:	f026 f9e1 	bl	802accc <iprintf>
 800490a:	e7ee      	b.n	80048ea <lwip_netconn_do_writemore+0x10e>
        write_more = 1;
 800490c:	2101      	movs	r1, #1
 800490e:	e079      	b.n	8004a04 <lwip_netconn_do_writemore+0x228>
          conn->current_msg->msg.w.vector_cnt--;
 8004910:	899a      	ldrh	r2, [r3, #12]
 8004912:	3a01      	subs	r2, #1
 8004914:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8004916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004918:	899a      	ldrh	r2, [r3, #12]
 800491a:	2a00      	cmp	r2, #0
 800491c:	f000 8081 	beq.w	8004a22 <lwip_netconn_do_writemore+0x246>
            conn->current_msg->msg.w.vector++;
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	3208      	adds	r2, #8
 8004924:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8004926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
 800492c:	e079      	b.n	8004a22 <lwip_netconn_do_writemore+0x246>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800492e:	1c6b      	adds	r3, r5, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d8c4      	bhi.n	80048c0 <lwip_netconn_do_writemore+0xe4>
 8004936:	e035      	b.n	80049a4 <lwip_netconn_do_writemore+0x1c8>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	429a      	cmp	r2, r3
 8004940:	d233      	bcs.n	80049aa <lwip_netconn_do_writemore+0x1ce>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004942:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004944:	b11b      	cbz	r3, 800494e <lwip_netconn_do_writemore+0x172>
 8004946:	2200      	movs	r2, #0
 8004948:	2103      	movs	r1, #3
 800494a:	4620      	mov	r0, r4
 800494c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800494e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004952:	f043 0310 	orr.w	r3, r3, #16
 8004956:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800495a:	e036      	b.n	80049ca <lwip_netconn_do_writemore+0x1ee>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800495c:	6860      	ldr	r0, [r4, #4]
 800495e:	f007 fb61 	bl	800c024 <tcp_output>
      if (out_err == ERR_RTE) {
 8004962:	f110 0f04 	cmn.w	r0, #4
 8004966:	d00a      	beq.n	800497e <lwip_netconn_do_writemore+0x1a2>
      } else if (dontblock) {
 8004968:	f1ba 0f00 	cmp.w	sl, #0
 800496c:	d0b5      	beq.n	80048da <lwip_netconn_do_writemore+0xfe>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800496e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf0c      	ite	eq
 8004976:	f06f 0506 	mvneq.w	r5, #6
 800497a:	2500      	movne	r5, #0
 800497c:	e7a3      	b.n	80048c6 <lwip_netconn_do_writemore+0xea>
        err = out_err;
 800497e:	4605      	mov	r5, r0
 8004980:	e7a1      	b.n	80048c6 <lwip_netconn_do_writemore+0xea>
      sys_sem_signal(op_completed_sem);
 8004982:	300c      	adds	r0, #12
 8004984:	f00b fb29 	bl	800ffda <sys_sem_signal>
  return ERR_OK;
 8004988:	2500      	movs	r5, #0
 800498a:	e7a6      	b.n	80048da <lwip_netconn_do_writemore+0xfe>
      out_err = tcp_output(conn->pcb.tcp);
 800498c:	6860      	ldr	r0, [r4, #4]
 800498e:	f007 fb49 	bl	800c024 <tcp_output>
 8004992:	4605      	mov	r5, r0
      if (out_err == ERR_RTE) {
 8004994:	f110 0f04 	cmn.w	r0, #4
    return ERR_MEM;
 8004998:	bf18      	it	ne
 800499a:	f04f 35ff 	movne.w	r5, #4294967295
      if (out_err == ERR_RTE) {
 800499e:	d092      	beq.n	80048c6 <lwip_netconn_do_writemore+0xea>
 80049a0:	e79b      	b.n	80048da <lwip_netconn_do_writemore+0xfe>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80049a2:	2500      	movs	r5, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80049a4:	f1ba 0f00 	cmp.w	sl, #0
 80049a8:	d1c6      	bne.n	8004938 <lwip_netconn_do_writemore+0x15c>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80049aa:	6863      	ldr	r3, [r4, #4]
 80049ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80049b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80049b4:	d303      	bcc.n	80049be <lwip_netconn_do_writemore+0x1e2>
 80049b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d905      	bls.n	80049ca <lwip_netconn_do_writemore+0x1ee>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80049be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80049c0:	b11b      	cbz	r3, 80049ca <lwip_netconn_do_writemore+0x1ee>
 80049c2:	2200      	movs	r2, #0
 80049c4:	2103      	movs	r1, #3
 80049c6:	4620      	mov	r0, r4
 80049c8:	4798      	blx	r3
    if (err == ERR_OK) {
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	f47f af78 	bne.w	80048c0 <lwip_netconn_do_writemore+0xe4>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80049d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049d2:	699a      	ldr	r2, [r3, #24]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d002      	beq.n	80049e0 <lwip_netconn_do_writemore+0x204>
 80049da:	f1ba 0f00 	cmp.w	sl, #0
 80049de:	d0d5      	beq.n	800498c <lwip_netconn_do_writemore+0x1b0>
      out_err = tcp_output(conn->pcb.tcp);
 80049e0:	6860      	ldr	r0, [r4, #4]
 80049e2:	f007 fb1f 	bl	800c024 <tcp_output>
        err = out_err;
 80049e6:	f110 0f04 	cmn.w	r0, #4
 80049ea:	bf08      	it	eq
 80049ec:	4605      	moveq	r5, r0
 80049ee:	e76a      	b.n	80048c6 <lwip_netconn_do_writemore+0xea>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80049f0:	4643      	mov	r3, r8
 80049f2:	462a      	mov	r2, r5
 80049f4:	4639      	mov	r1, r7
 80049f6:	6860      	ldr	r0, [r4, #4]
 80049f8:	f006 fcda 	bl	800b3b0 <tcp_write>
      if (err == ERR_OK) {
 80049fc:	4605      	mov	r5, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d195      	bne.n	800492e <lwip_netconn_do_writemore+0x152>
 8004a02:	2100      	movs	r1, #0
        conn->current_msg->msg.w.offset += len;
 8004a04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a06:	6993      	ldr	r3, [r2, #24]
 8004a08:	444b      	add	r3, r9
 8004a0a:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 8004a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a0e:	6913      	ldr	r3, [r2, #16]
 8004a10:	444b      	add	r3, r9
 8004a12:	6113      	str	r3, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	6918      	ldr	r0, [r3, #16]
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	4290      	cmp	r0, r2
 8004a1e:	f43f af77 	beq.w	8004910 <lwip_netconn_do_writemore+0x134>
    } while (write_more && err == ERR_OK);
 8004a22:	2900      	cmp	r1, #0
 8004a24:	d0bd      	beq.n	80049a2 <lwip_netconn_do_writemore+0x1c6>
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004a26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a28:	688a      	ldr	r2, [r1, #8]
 8004a2a:	690b      	ldr	r3, [r1, #16]
 8004a2c:	6817      	ldr	r7, [r2, #0]
 8004a2e:	441f      	add	r7, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8004a30:	6850      	ldr	r0, [r2, #4]
 8004a32:	1ac6      	subs	r6, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8004a34:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004a38:	bf26      	itte	cs
 8004a3a:	f048 0802 	orrcs.w	r8, r8, #2
        len = 0xffff;
 8004a3e:	f64f 75ff 	movwcs	r5, #65535	; 0xffff
        len = (u16_t)diff;
 8004a42:	b2b5      	uxthcc	r5, r6
      available = tcp_sndbuf(conn->pcb.tcp);
 8004a44:	6862      	ldr	r2, [r4, #4]
 8004a46:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
      if (available < len) {
 8004a4a:	4295      	cmp	r5, r2
 8004a4c:	f67f af49 	bls.w	80048e2 <lwip_netconn_do_writemore+0x106>
        if (dontblock) {
 8004a50:	f1ba 0f00 	cmp.w	sl, #0
 8004a54:	f43f af16 	beq.w	8004884 <lwip_netconn_do_writemore+0xa8>
          if (!len) {
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	f47f af15 	bne.w	8004888 <lwip_netconn_do_writemore+0xac>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004a5e:	698b      	ldr	r3, [r1, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf0c      	ite	eq
 8004a64:	f06f 0506 	mvneq.w	r5, #6
 8004a68:	2500      	movne	r5, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	f4ff af66 	bcc.w	8004942 <lwip_netconn_do_writemore+0x166>
 8004a76:	e7a2      	b.n	80049be <lwip_netconn_do_writemore+0x1e2>
 8004a78:	0802bee8 	.word	0x0802bee8
 8004a7c:	0802bf80 	.word	0x0802bf80
 8004a80:	0802bc48 	.word	0x0802bc48
 8004a84:	0802c074 	.word	0x0802c074
 8004a88:	0802bfa0 	.word	0x0802bfa0
 8004a8c:	0802c094 	.word	0x0802c094
 8004a90:	0802c0ac 	.word	0x0802c0ac
 8004a94:	0802c0ec 	.word	0x0802c0ec
 8004a98:	0802c114 	.word	0x0802c114

08004a9c <lwip_netconn_do_close_internal>:
{
 8004a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	460f      	mov	r7, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d036      	beq.n	8004b16 <lwip_netconn_do_close_internal+0x7a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004aa8:	7823      	ldrb	r3, [r4, #0]
 8004aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d139      	bne.n	8004b26 <lwip_netconn_do_close_internal+0x8a>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004ab2:	7863      	ldrb	r3, [r4, #1]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d13e      	bne.n	8004b36 <lwip_netconn_do_close_internal+0x9a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d043      	beq.n	8004b46 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d048      	beq.n	8004b56 <lwip_netconn_do_close_internal+0xba>
  tpcb = conn->pcb.tcp;
 8004ac4:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8004ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ac8:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8004aca:	f003 0801 	and.w	r8, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004ace:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d012      	beq.n	8004afc <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 8004ad6:	f1b8 0f00 	cmp.w	r8, #0
 8004ada:	d006      	beq.n	8004aea <lwip_netconn_do_close_internal+0x4e>
             ((tpcb->state == FIN_WAIT_1) ||
 8004adc:	7d32      	ldrb	r2, [r6, #20]
 8004ade:	1f53      	subs	r3, r2, #5
  } else if (shut_rx &&
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d90a      	bls.n	8004afc <lwip_netconn_do_close_internal+0x60>
              (tpcb->state == FIN_WAIT_2) ||
 8004ae6:	2a08      	cmp	r2, #8
 8004ae8:	d008      	beq.n	8004afc <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004aea:	f1b9 0f00 	cmp.w	r9, #0
 8004aee:	f000 80cd 	beq.w	8004c8c <lwip_netconn_do_close_internal+0x1f0>
 8004af2:	8b73      	ldrh	r3, [r6, #26]
 8004af4:	f013 0f10 	tst.w	r3, #16
 8004af8:	f000 80c8 	beq.w	8004c8c <lwip_netconn_do_close_internal+0x1f0>
    tcp_arg(tpcb, NULL);
 8004afc:	2100      	movs	r1, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	f003 fe68 	bl	80087d4 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8004b04:	f896 a014 	ldrb.w	sl, [r6, #20]
 8004b08:	f1ba 0f01 	cmp.w	sl, #1
 8004b0c:	f000 80d6 	beq.w	8004cbc <lwip_netconn_do_close_internal+0x220>
 8004b10:	f04f 0a01 	mov.w	sl, #1
 8004b14:	e0bf      	b.n	8004c96 <lwip_netconn_do_close_internal+0x1fa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004b16:	4b6c      	ldr	r3, [pc, #432]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004b18:	f240 32a2 	movw	r2, #930	; 0x3a2
 8004b1c:	496b      	ldr	r1, [pc, #428]	; (8004ccc <lwip_netconn_do_close_internal+0x230>)
 8004b1e:	486c      	ldr	r0, [pc, #432]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004b20:	f026 f8d4 	bl	802accc <iprintf>
 8004b24:	e7c0      	b.n	8004aa8 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8004b26:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004b28:	f240 32a3 	movw	r2, #931	; 0x3a3
 8004b2c:	4969      	ldr	r1, [pc, #420]	; (8004cd4 <lwip_netconn_do_close_internal+0x238>)
 8004b2e:	4868      	ldr	r0, [pc, #416]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004b30:	f026 f8cc 	bl	802accc <iprintf>
 8004b34:	e7bd      	b.n	8004ab2 <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004b36:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004b38:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8004b3c:	4966      	ldr	r1, [pc, #408]	; (8004cd8 <lwip_netconn_do_close_internal+0x23c>)
 8004b3e:	4864      	ldr	r0, [pc, #400]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004b40:	f026 f8c4 	bl	802accc <iprintf>
 8004b44:	e7b8      	b.n	8004ab8 <lwip_netconn_do_close_internal+0x1c>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004b46:	4b60      	ldr	r3, [pc, #384]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004b48:	f240 32a5 	movw	r2, #933	; 0x3a5
 8004b4c:	4963      	ldr	r1, [pc, #396]	; (8004cdc <lwip_netconn_do_close_internal+0x240>)
 8004b4e:	4860      	ldr	r0, [pc, #384]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004b50:	f026 f8bc 	bl	802accc <iprintf>
 8004b54:	e7b3      	b.n	8004abe <lwip_netconn_do_close_internal+0x22>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004b56:	4b5c      	ldr	r3, [pc, #368]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004b58:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004b5c:	4960      	ldr	r1, [pc, #384]	; (8004ce0 <lwip_netconn_do_close_internal+0x244>)
 8004b5e:	485c      	ldr	r0, [pc, #368]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004b60:	f026 f8b4 	bl	802accc <iprintf>
 8004b64:	e7ae      	b.n	8004ac4 <lwip_netconn_do_close_internal+0x28>
      tcp_recv(tpcb, NULL);
 8004b66:	2100      	movs	r1, #0
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f003 fe37 	bl	80087dc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4630      	mov	r0, r6
 8004b72:	f003 fe81 	bl	8008878 <tcp_accept>
 8004b76:	e092      	b.n	8004c9e <lwip_netconn_do_close_internal+0x202>
      tcp_sent(tpcb, NULL);
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f003 fe48 	bl	8008810 <tcp_sent>
 8004b80:	e091      	b.n	8004ca6 <lwip_netconn_do_close_internal+0x20a>
      tcp_poll(tpcb, NULL, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	4611      	mov	r1, r2
 8004b86:	4630      	mov	r0, r6
 8004b88:	f003 fe7c 	bl	8008884 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f003 fe58 	bl	8008844 <tcp_err>
      err = tcp_close(tpcb);
 8004b94:	4630      	mov	r0, r6
 8004b96:	f004 fa93 	bl	80090c0 <tcp_close>
 8004b9a:	4605      	mov	r5, r0
    if (err == ERR_MEM) {
 8004b9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ba0:	d022      	beq.n	8004be8 <lwip_netconn_do_close_internal+0x14c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ba4:	681e      	ldr	r6, [r3, #0]
 8004ba6:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8004ba8:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	62a3      	str	r3, [r4, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8004bae:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004bb0:	b9a5      	cbnz	r5, 8004bdc <lwip_netconn_do_close_internal+0x140>
      if (shut_close) {
 8004bb2:	f1ba 0f00 	cmp.w	sl, #0
 8004bb6:	d143      	bne.n	8004c40 <lwip_netconn_do_close_internal+0x1a4>
      if (shut_rx) {
 8004bb8:	f1b8 0f00 	cmp.w	r8, #0
 8004bbc:	d005      	beq.n	8004bca <lwip_netconn_do_close_internal+0x12e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bc0:	b163      	cbz	r3, 8004bdc <lwip_netconn_do_close_internal+0x140>
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4798      	blx	r3
      if (shut_tx) {
 8004bca:	f1b9 0f00 	cmp.w	r9, #0
 8004bce:	d005      	beq.n	8004bdc <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bd2:	b11b      	cbz	r3, 8004bdc <lwip_netconn_do_close_internal+0x140>
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	4620      	mov	r0, r4
 8004bda:	4798      	blx	r3
    if (delayed)
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	d138      	bne.n	8004c52 <lwip_netconn_do_close_internal+0x1b6>
    return ERR_OK;
 8004be0:	2500      	movs	r5, #0
}
 8004be2:	4628      	mov	r0, r5
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004be8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004bea:	7a5a      	ldrb	r2, [r3, #9]
 8004bec:	b19a      	cbz	r2, 8004c16 <lwip_netconn_do_close_internal+0x17a>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004bee:	7d33      	ldrb	r3, [r6, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d033      	beq.n	8004c5c <lwip_netconn_do_close_internal+0x1c0>
    if (shut_tx) {
 8004bf4:	f1b9 0f00 	cmp.w	r9, #0
 8004bf8:	d138      	bne.n	8004c6c <lwip_netconn_do_close_internal+0x1d0>
    tcp_poll(tpcb, poll_tcp, 1);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4939      	ldr	r1, [pc, #228]	; (8004ce4 <lwip_netconn_do_close_internal+0x248>)
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f003 fe40 	bl	8008884 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004c04:	4938      	ldr	r1, [pc, #224]	; (8004ce8 <lwip_netconn_do_close_internal+0x24c>)
 8004c06:	4630      	mov	r0, r6
 8004c08:	f003 fe1c 	bl	8008844 <tcp_err>
    tcp_arg(tpcb, conn);
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f003 fde0 	bl	80087d4 <tcp_arg>
  return err;
 8004c14:	e7e5      	b.n	8004be2 <lwip_netconn_do_close_internal+0x146>
        if (shut_close) {
 8004c16:	f1ba 0f00 	cmp.w	sl, #0
 8004c1a:	d107      	bne.n	8004c2c <lwip_netconn_do_close_internal+0x190>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004c1c:	681e      	ldr	r6, [r3, #0]
 8004c1e:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8004c20:	22ff      	movs	r2, #255	; 0xff
 8004c22:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62a3      	str	r3, [r4, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8004c28:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004c2a:	e7d7      	b.n	8004bdc <lwip_netconn_do_close_internal+0x140>
          tcp_abort(tpcb);
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f004 f851 	bl	8008cd4 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004c32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c34:	6816      	ldr	r6, [r2, #0]
 8004c36:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8004c3c:	62a3      	str	r3, [r4, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8004c3e:	7063      	strb	r3, [r4, #1]
        conn->pcb.tcp = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004c44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c46:	b1b3      	cbz	r3, 8004c76 <lwip_netconn_do_close_internal+0x1da>
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4798      	blx	r3
 8004c50:	e7b2      	b.n	8004bb8 <lwip_netconn_do_close_internal+0x11c>
      sys_sem_signal(op_completed_sem);
 8004c52:	4630      	mov	r0, r6
 8004c54:	f00b f9c1 	bl	800ffda <sys_sem_signal>
    return ERR_OK;
 8004c58:	2500      	movs	r5, #0
 8004c5a:	e7c2      	b.n	8004be2 <lwip_netconn_do_close_internal+0x146>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <lwip_netconn_do_close_internal+0x22c>)
 8004c5e:	f240 4241 	movw	r2, #1089	; 0x441
 8004c62:	4922      	ldr	r1, [pc, #136]	; (8004cec <lwip_netconn_do_close_internal+0x250>)
 8004c64:	481a      	ldr	r0, [pc, #104]	; (8004cd0 <lwip_netconn_do_close_internal+0x234>)
 8004c66:	f026 f831 	bl	802accc <iprintf>
 8004c6a:	e7c3      	b.n	8004bf4 <lwip_netconn_do_close_internal+0x158>
      tcp_sent(tpcb, sent_tcp);
 8004c6c:	4920      	ldr	r1, [pc, #128]	; (8004cf0 <lwip_netconn_do_close_internal+0x254>)
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f003 fdce 	bl	8008810 <tcp_sent>
 8004c74:	e7c1      	b.n	8004bfa <lwip_netconn_do_close_internal+0x15e>
      if (shut_rx) {
 8004c76:	f1b8 0f00 	cmp.w	r8, #0
 8004c7a:	d1af      	bne.n	8004bdc <lwip_netconn_do_close_internal+0x140>
 8004c7c:	e7a5      	b.n	8004bca <lwip_netconn_do_close_internal+0x12e>
    tcp_accept(tpcb, NULL);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4630      	mov	r0, r6
 8004c82:	f003 fdf9 	bl	8008878 <tcp_accept>
 8004c86:	f04f 0a00 	mov.w	sl, #0
 8004c8a:	e010      	b.n	8004cae <lwip_netconn_do_close_internal+0x212>
  if (tpcb->state == LISTEN) {
 8004c8c:	7d33      	ldrb	r3, [r6, #20]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d0f5      	beq.n	8004c7e <lwip_netconn_do_close_internal+0x1e2>
 8004c92:	f04f 0a00 	mov.w	sl, #0
    if (shut_rx) {
 8004c96:	f1b8 0f00 	cmp.w	r8, #0
 8004c9a:	f47f af64 	bne.w	8004b66 <lwip_netconn_do_close_internal+0xca>
    if (shut_tx) {
 8004c9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ca2:	f47f af69 	bne.w	8004b78 <lwip_netconn_do_close_internal+0xdc>
    if (shut_close) {
 8004ca6:	f1ba 0f00 	cmp.w	sl, #0
 8004caa:	f47f af6a 	bne.w	8004b82 <lwip_netconn_do_close_internal+0xe6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004cae:	464a      	mov	r2, r9
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f004 fad6 	bl	8009264 <tcp_shutdown>
 8004cb8:	4605      	mov	r5, r0
 8004cba:	e76f      	b.n	8004b9c <lwip_netconn_do_close_internal+0x100>
    tcp_accept(tpcb, NULL);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f003 fdda 	bl	8008878 <tcp_accept>
  if (shut_close) {
 8004cc4:	e766      	b.n	8004b94 <lwip_netconn_do_close_internal+0xf8>
 8004cc6:	bf00      	nop
 8004cc8:	0802bee8 	.word	0x0802bee8
 8004ccc:	0802bd9c 	.word	0x0802bd9c
 8004cd0:	0802bc48 	.word	0x0802bc48
 8004cd4:	0802c140 	.word	0x0802c140
 8004cd8:	0802c160 	.word	0x0802c160
 8004cdc:	0802c184 	.word	0x0802c184
 8004ce0:	0802bfa0 	.word	0x0802bfa0
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	0800452d 	.word	0x0800452d
 8004cec:	0802c198 	.word	0x0802c198
 8004cf0:	08004d79 	.word	0x08004d79

08004cf4 <poll_tcp>:
{
 8004cf4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	b300      	cbz	r0, 8004d3c <poll_tcp+0x48>
  if (conn->state == NETCONN_WRITE) {
 8004cfa:	7863      	ldrb	r3, [r4, #1]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d025      	beq.n	8004d4c <poll_tcp+0x58>
  } else if (conn->state == NETCONN_CLOSE) {
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d028      	beq.n	8004d56 <poll_tcp+0x62>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004d04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d08:	f013 0f10 	tst.w	r3, #16
 8004d0c:	d014      	beq.n	8004d38 <poll_tcp+0x44>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	b192      	cbz	r2, 8004d38 <poll_tcp+0x44>
 8004d12:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8004d16:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004d1a:	d30d      	bcc.n	8004d38 <poll_tcp+0x44>
 8004d1c:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8004d20:	2a04      	cmp	r2, #4
 8004d22:	d809      	bhi.n	8004d38 <poll_tcp+0x44>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d2e:	b11b      	cbz	r3, 8004d38 <poll_tcp+0x44>
 8004d30:	2200      	movs	r2, #0
 8004d32:	2102      	movs	r1, #2
 8004d34:	4620      	mov	r0, r4
 8004d36:	4798      	blx	r3
}
 8004d38:	2000      	movs	r0, #0
 8004d3a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <poll_tcp+0x78>)
 8004d3e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004d42:	490b      	ldr	r1, [pc, #44]	; (8004d70 <poll_tcp+0x7c>)
 8004d44:	480b      	ldr	r0, [pc, #44]	; (8004d74 <poll_tcp+0x80>)
 8004d46:	f025 ffc1 	bl	802accc <iprintf>
 8004d4a:	e7d6      	b.n	8004cfa <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7ff fd44 	bl	80047dc <lwip_netconn_do_writemore>
 8004d54:	e7d6      	b.n	8004d04 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d58:	b11b      	cbz	r3, 8004d62 <poll_tcp+0x6e>
 8004d5a:	7a5a      	ldrb	r2, [r3, #9]
 8004d5c:	b10a      	cbz	r2, 8004d62 <poll_tcp+0x6e>
      conn->current_msg->msg.sd.polls_left--;
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004d62:	2101      	movs	r1, #1
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7ff fe99 	bl	8004a9c <lwip_netconn_do_close_internal>
 8004d6a:	e7cb      	b.n	8004d04 <poll_tcp+0x10>
 8004d6c:	0802bee8 	.word	0x0802bee8
 8004d70:	0802bf80 	.word	0x0802bf80
 8004d74:	0802bc48 	.word	0x0802bc48

08004d78 <sent_tcp>:
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004d7a:	b1f0      	cbz	r0, 8004dba <sent_tcp+0x42>
 8004d7c:	4615      	mov	r5, r2
 8004d7e:	4604      	mov	r4, r0
    if (conn->state == NETCONN_WRITE) {
 8004d80:	7843      	ldrb	r3, [r0, #1]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d022      	beq.n	8004dcc <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d025      	beq.n	8004dd6 <sent_tcp+0x5e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004d8a:	6863      	ldr	r3, [r4, #4]
 8004d8c:	b1e3      	cbz	r3, 8004dc8 <sent_tcp+0x50>
 8004d8e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8004d92:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004d96:	d317      	bcc.n	8004dc8 <sent_tcp+0x50>
 8004d98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d813      	bhi.n	8004dc8 <sent_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8004da0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004dac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dae:	b15b      	cbz	r3, 8004dc8 <sent_tcp+0x50>
 8004db0:	462a      	mov	r2, r5
 8004db2:	2102      	movs	r1, #2
 8004db4:	4620      	mov	r0, r4
 8004db6:	4798      	blx	r3
  return ERR_OK;
 8004db8:	e006      	b.n	8004dc8 <sent_tcp+0x50>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <sent_tcp+0x68>)
 8004dbc:	f240 1293 	movw	r2, #403	; 0x193
 8004dc0:	4908      	ldr	r1, [pc, #32]	; (8004de4 <sent_tcp+0x6c>)
 8004dc2:	4809      	ldr	r0, [pc, #36]	; (8004de8 <sent_tcp+0x70>)
 8004dc4:	f025 ff82 	bl	802accc <iprintf>
}
 8004dc8:	2000      	movs	r0, #0
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff fd04 	bl	80047dc <lwip_netconn_do_writemore>
 8004dd4:	e7d9      	b.n	8004d8a <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff fe5f 	bl	8004a9c <lwip_netconn_do_close_internal>
 8004dde:	e7d4      	b.n	8004d8a <sent_tcp+0x12>
 8004de0:	0802bee8 	.word	0x0802bee8
 8004de4:	0802bf80 	.word	0x0802bf80
 8004de8:	0802bc48 	.word	0x0802bc48

08004dec <recv_tcp>:
{
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	4615      	mov	r5, r2
 8004df2:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004df4:	460f      	mov	r7, r1
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d02d      	beq.n	8004e56 <recv_tcp+0x6a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	d033      	beq.n	8004e66 <recv_tcp+0x7a>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d158      	bne.n	8004eb4 <recv_tcp+0xc8>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004e02:	6863      	ldr	r3, [r4, #4]
 8004e04:	42bb      	cmp	r3, r7
 8004e06:	d006      	beq.n	8004e16 <recv_tcp+0x2a>
 8004e08:	4b2e      	ldr	r3, [pc, #184]	; (8004ec4 <recv_tcp+0xd8>)
 8004e0a:	f240 1235 	movw	r2, #309	; 0x135
 8004e0e:	492e      	ldr	r1, [pc, #184]	; (8004ec8 <recv_tcp+0xdc>)
 8004e10:	482e      	ldr	r0, [pc, #184]	; (8004ecc <recv_tcp+0xe0>)
 8004e12:	f025 ff5b 	bl	802accc <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8004e16:	f104 0610 	add.w	r6, r4, #16
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f00b f89d 	bl	800ff5a <sys_mbox_valid>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d035      	beq.n	8004e90 <recv_tcp+0xa4>
  if (p != NULL) {
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	d03d      	beq.n	8004ea4 <recv_tcp+0xb8>
    len = p->tot_len;
 8004e28:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f00b f851 	bl	800fed4 <sys_mbox_trypost>
 8004e32:	4605      	mov	r5, r0
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d13a      	bne.n	8004eae <recv_tcp+0xc2>
    SYS_ARCH_INC(conn->recv_avail, len);
 8004e38:	f00b f91e 	bl	8010078 <sys_arch_protect>
 8004e3c:	6a23      	ldr	r3, [r4, #32]
 8004e3e:	443b      	add	r3, r7
 8004e40:	6223      	str	r3, [r4, #32]
 8004e42:	f00b f925 	bl	8010090 <sys_arch_unprotect>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e48:	b11b      	cbz	r3, 8004e52 <recv_tcp+0x66>
 8004e4a:	463a      	mov	r2, r7
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4798      	blx	r3
}
 8004e52:	4628      	mov	r0, r5
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <recv_tcp+0xd8>)
 8004e58:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e5c:	491c      	ldr	r1, [pc, #112]	; (8004ed0 <recv_tcp+0xe4>)
 8004e5e:	481b      	ldr	r0, [pc, #108]	; (8004ecc <recv_tcp+0xe0>)
 8004e60:	f025 ff34 	bl	802accc <iprintf>
 8004e64:	e7c9      	b.n	8004dfa <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004e66:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <recv_tcp+0xd8>)
 8004e68:	f240 122d 	movw	r2, #301	; 0x12d
 8004e6c:	4919      	ldr	r1, [pc, #100]	; (8004ed4 <recv_tcp+0xe8>)
 8004e6e:	4817      	ldr	r0, [pc, #92]	; (8004ecc <recv_tcp+0xe0>)
 8004e70:	f025 ff2c 	bl	802accc <iprintf>
    return ERR_VAL;
 8004e74:	f06f 0505 	mvn.w	r5, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8004e78:	2e00      	cmp	r6, #0
 8004e7a:	d0ea      	beq.n	8004e52 <recv_tcp+0x66>
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <recv_tcp+0xd8>)
 8004e7e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004e82:	4915      	ldr	r1, [pc, #84]	; (8004ed8 <recv_tcp+0xec>)
 8004e84:	4811      	ldr	r0, [pc, #68]	; (8004ecc <recv_tcp+0xe0>)
 8004e86:	f025 ff21 	bl	802accc <iprintf>
    return ERR_VAL;
 8004e8a:	f06f 0505 	mvn.w	r5, #5
 8004e8e:	e7e0      	b.n	8004e52 <recv_tcp+0x66>
    if (p != NULL) {
 8004e90:	b15d      	cbz	r5, 8004eaa <recv_tcp+0xbe>
      tcp_recved(pcb, p->tot_len);
 8004e92:	8929      	ldrh	r1, [r5, #8]
 8004e94:	4638      	mov	r0, r7
 8004e96:	f003 fc25 	bl	80086e4 <tcp_recved>
      pbuf_free(p);
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f002 ff6e 	bl	8007d7c <pbuf_free>
    return ERR_OK;
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	e7d6      	b.n	8004e52 <recv_tcp+0x66>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8004ea4:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <recv_tcp+0xf0>)
    len = 0;
 8004ea6:	2700      	movs	r7, #0
 8004ea8:	e7bf      	b.n	8004e2a <recv_tcp+0x3e>
    return ERR_OK;
 8004eaa:	2500      	movs	r5, #0
 8004eac:	e7d1      	b.n	8004e52 <recv_tcp+0x66>
    return ERR_MEM;
 8004eae:	f04f 35ff 	mov.w	r5, #4294967295
 8004eb2:	e7ce      	b.n	8004e52 <recv_tcp+0x66>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <recv_tcp+0xd8>)
 8004eb6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8004eba:	4907      	ldr	r1, [pc, #28]	; (8004ed8 <recv_tcp+0xec>)
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <recv_tcp+0xe0>)
 8004ebe:	f025 ff05 	bl	802accc <iprintf>
  if (conn == NULL) {
 8004ec2:	e79e      	b.n	8004e02 <recv_tcp+0x16>
 8004ec4:	0802bee8 	.word	0x0802bee8
 8004ec8:	0802c200 	.word	0x0802c200
 8004ecc:	0802bc48 	.word	0x0802bc48
 8004ed0:	0802c1bc 	.word	0x0802c1bc
 8004ed4:	0802c1e0 	.word	0x0802c1e0
 8004ed8:	0802c220 	.word	0x0802c220
 8004edc:	0802c3b6 	.word	0x0802c3b6

08004ee0 <lwip_netconn_is_err_msg>:
{
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	b169      	cbz	r1, 8004f04 <lwip_netconn_is_err_msg+0x24>
  if (msg == &netconn_aborted) {
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <lwip_netconn_is_err_msg+0x44>)
 8004eea:	429c      	cmp	r4, r3
 8004eec:	d011      	beq.n	8004f12 <lwip_netconn_is_err_msg+0x32>
  } else if (msg == &netconn_reset) {
 8004eee:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <lwip_netconn_is_err_msg+0x48>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	d012      	beq.n	8004f1a <lwip_netconn_is_err_msg+0x3a>
  } else if (msg == &netconn_closed) {
 8004ef4:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <lwip_netconn_is_err_msg+0x4c>)
 8004ef6:	429c      	cmp	r4, r3
    *err = ERR_CLSD;
 8004ef8:	bf03      	ittte	eq
 8004efa:	23f1      	moveq	r3, #241	; 0xf1
 8004efc:	702b      	strbeq	r3, [r5, #0]
    return 1;
 8004efe:	2001      	moveq	r0, #1
  return 0;
 8004f00:	2000      	movne	r0, #0
}
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <lwip_netconn_is_err_msg+0x50>)
 8004f06:	2285      	movs	r2, #133	; 0x85
 8004f08:	490a      	ldr	r1, [pc, #40]	; (8004f34 <lwip_netconn_is_err_msg+0x54>)
 8004f0a:	480b      	ldr	r0, [pc, #44]	; (8004f38 <lwip_netconn_is_err_msg+0x58>)
 8004f0c:	f025 fede 	bl	802accc <iprintf>
 8004f10:	e7ea      	b.n	8004ee8 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_ABRT;
 8004f12:	23f3      	movs	r3, #243	; 0xf3
 8004f14:	702b      	strb	r3, [r5, #0]
    return 1;
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7f3      	b.n	8004f02 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_RST;
 8004f1a:	23f2      	movs	r3, #242	; 0xf2
 8004f1c:	702b      	strb	r3, [r5, #0]
    return 1;
 8004f1e:	2001      	movs	r0, #1
 8004f20:	e7ef      	b.n	8004f02 <lwip_netconn_is_err_msg+0x22>
 8004f22:	bf00      	nop
 8004f24:	0802c3b5 	.word	0x0802c3b5
 8004f28:	0802c3b7 	.word	0x0802c3b7
 8004f2c:	0802c3b6 	.word	0x0802c3b6
 8004f30:	0802bee8 	.word	0x0802bee8
 8004f34:	0802c238 	.word	0x0802c238
 8004f38:	0802bc48 	.word	0x0802bc48

08004f3c <lwip_netconn_do_newconn>:
{
 8004f3c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8004f42:	6805      	ldr	r5, [r0, #0]
 8004f44:	686b      	ldr	r3, [r5, #4]
 8004f46:	b103      	cbz	r3, 8004f4a <lwip_netconn_do_newconn+0xe>
}
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	4604      	mov	r4, r0
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004f4c:	782b      	ldrb	r3, [r5, #0]
 8004f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d019      	beq.n	8004f8a <lwip_netconn_do_newconn+0x4e>
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d122      	bne.n	8004fa0 <lwip_netconn_do_newconn+0x64>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f007 ffa2 	bl	800cea4 <udp_new_ip_type>
 8004f60:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	b16a      	cbz	r2, 8004f84 <lwip_netconn_do_newconn+0x48>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004f6c:	bf04      	itt	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	7413      	strbeq	r3, [r2, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	490c      	ldr	r1, [pc, #48]	; (8004fa8 <lwip_netconn_do_newconn+0x6c>)
 8004f76:	6850      	ldr	r0, [r2, #4]
 8004f78:	f007 ff4a 	bl	800ce10 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e1      	bne.n	8004f48 <lwip_netconn_do_newconn+0xc>
    msg->err = ERR_MEM;
 8004f84:	23ff      	movs	r3, #255	; 0xff
 8004f86:	7123      	strb	r3, [r4, #4]
}
 8004f88:	e7de      	b.n	8004f48 <lwip_netconn_do_newconn+0xc>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	f003 ffce 	bl	8008f2c <tcp_new_ip_type>
 8004f90:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	6843      	ldr	r3, [r0, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f4      	beq.n	8004f84 <lwip_netconn_do_newconn+0x48>
        setup_tcp(msg->conn);
 8004f9a:	f7ff faa7 	bl	80044ec <setup_tcp>
 8004f9e:	e7ed      	b.n	8004f7c <lwip_netconn_do_newconn+0x40>
      msg->err = ERR_VAL;
 8004fa0:	23fa      	movs	r3, #250	; 0xfa
 8004fa2:	7103      	strb	r3, [r0, #4]
      return;
 8004fa4:	e7d0      	b.n	8004f48 <lwip_netconn_do_newconn+0xc>
 8004fa6:	bf00      	nop
 8004fa8:	0800440d 	.word	0x0800440d

08004fac <netconn_alloc>:
{
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4605      	mov	r5, r0
 8004fb0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004fb2:	2007      	movs	r0, #7
 8004fb4:	f002 fbf4 	bl	80077a0 <memp_malloc>
  if (conn == NULL) {
 8004fb8:	4604      	mov	r4, r0
 8004fba:	b398      	cbz	r0, 8005024 <netconn_alloc+0x78>
  conn->pending_err = ERR_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004fc0:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004fc2:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8004fc4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004fc8:	2d10      	cmp	r5, #16
 8004fca:	d001      	beq.n	8004fd0 <netconn_alloc+0x24>
 8004fcc:	2d20      	cmp	r5, #32
 8004fce:	d11d      	bne.n	800500c <netconn_alloc+0x60>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004fd0:	f104 0510 	add.w	r5, r4, #16
 8004fd4:	2106      	movs	r1, #6
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f00a ff60 	bl	800fe9c <sys_mbox_new>
 8004fdc:	b9e8      	cbnz	r0, 800501a <netconn_alloc+0x6e>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004fde:	2100      	movs	r1, #0
 8004fe0:	f104 000c 	add.w	r0, r4, #12
 8004fe4:	f00a ffc1 	bl	800ff6a <sys_sem_new>
 8004fe8:	b9f0      	cbnz	r0, 8005028 <netconn_alloc+0x7c>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004fea:	f104 0014 	add.w	r0, r4, #20
 8004fee:	f00a ffb9 	bl	800ff64 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004ffc:	62e6      	str	r6, [r4, #44]	; 0x2c
  conn->current_msg  = NULL;
 8004ffe:	62a3      	str	r3, [r4, #40]	; 0x28
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <netconn_alloc+0x84>)
 8005002:	61e2      	str	r2, [r4, #28]
  conn->recv_avail   = 0;
 8005004:	6223      	str	r3, [r4, #32]
  conn->flags = init_flags;
 8005006:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return conn;
 800500a:	e00b      	b.n	8005024 <netconn_alloc+0x78>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <netconn_alloc+0x88>)
 800500e:	f240 22e5 	movw	r2, #741	; 0x2e5
 8005012:	4909      	ldr	r1, [pc, #36]	; (8005038 <netconn_alloc+0x8c>)
 8005014:	4809      	ldr	r0, [pc, #36]	; (800503c <netconn_alloc+0x90>)
 8005016:	f025 fe59 	bl	802accc <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800501a:	4621      	mov	r1, r4
 800501c:	2007      	movs	r0, #7
 800501e:	f002 fbd9 	bl	80077d4 <memp_free>
  return NULL;
 8005022:	2400      	movs	r4, #0
}
 8005024:	4620      	mov	r0, r4
 8005026:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 8005028:	4628      	mov	r0, r5
 800502a:	f00a ff4a 	bl	800fec2 <sys_mbox_free>
    goto free_and_return;
 800502e:	e7f4      	b.n	800501a <netconn_alloc+0x6e>
 8005030:	77359400 	.word	0x77359400
 8005034:	0802bee8 	.word	0x0802bee8
 8005038:	0802c244 	.word	0x0802c244
 800503c:	0802bc48 	.word	0x0802bc48

08005040 <netconn_free>:
{
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005044:	6843      	ldr	r3, [r0, #4]
 8005046:	b133      	cbz	r3, 8005056 <netconn_free+0x16>
 8005048:	4b16      	ldr	r3, [pc, #88]	; (80050a4 <netconn_free+0x64>)
 800504a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800504e:	4916      	ldr	r1, [pc, #88]	; (80050a8 <netconn_free+0x68>)
 8005050:	4816      	ldr	r0, [pc, #88]	; (80050ac <netconn_free+0x6c>)
 8005052:	f025 fe3b 	bl	802accc <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005056:	f104 0010 	add.w	r0, r4, #16
 800505a:	f00a ff7e 	bl	800ff5a <sys_mbox_valid>
 800505e:	b988      	cbnz	r0, 8005084 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005060:	f104 0014 	add.w	r0, r4, #20
 8005064:	f00a ff79 	bl	800ff5a <sys_mbox_valid>
 8005068:	b9a0      	cbnz	r0, 8005094 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 800506a:	f104 050c 	add.w	r5, r4, #12
 800506e:	4628      	mov	r0, r5
 8005070:	f00a ffb8 	bl	800ffe4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005074:	4628      	mov	r0, r5
 8005076:	f00a ffbf 	bl	800fff8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 800507a:	4621      	mov	r1, r4
 800507c:	2007      	movs	r0, #7
 800507e:	f002 fba9 	bl	80077d4 <memp_free>
}
 8005082:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <netconn_free+0x64>)
 8005086:	f240 3223 	movw	r2, #803	; 0x323
 800508a:	4909      	ldr	r1, [pc, #36]	; (80050b0 <netconn_free+0x70>)
 800508c:	4807      	ldr	r0, [pc, #28]	; (80050ac <netconn_free+0x6c>)
 800508e:	f025 fe1d 	bl	802accc <iprintf>
 8005092:	e7e5      	b.n	8005060 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <netconn_free+0x64>)
 8005096:	f240 3226 	movw	r2, #806	; 0x326
 800509a:	4906      	ldr	r1, [pc, #24]	; (80050b4 <netconn_free+0x74>)
 800509c:	4803      	ldr	r0, [pc, #12]	; (80050ac <netconn_free+0x6c>)
 800509e:	f025 fe15 	bl	802accc <iprintf>
 80050a2:	e7e2      	b.n	800506a <netconn_free+0x2a>
 80050a4:	0802bee8 	.word	0x0802bee8
 80050a8:	0802c26c 	.word	0x0802c26c
 80050ac:	0802bc48 	.word	0x0802bc48
 80050b0:	0802c29c 	.word	0x0802c29c
 80050b4:	0802c2d8 	.word	0x0802c2d8

080050b8 <netconn_drain>:
{
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80050be:	f100 0510 	add.w	r5, r0, #16
 80050c2:	4628      	mov	r0, r5
 80050c4:	f00a ff49 	bl	800ff5a <sys_mbox_valid>
 80050c8:	b950      	cbnz	r0, 80050e0 <netconn_drain+0x28>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80050ca:	3414      	adds	r4, #20
 80050cc:	4620      	mov	r0, r4
 80050ce:	f00a ff44 	bl	800ff5a <sys_mbox_valid>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d044      	beq.n	8005160 <netconn_drain+0xa8>
            newconn->pcb.tcp = NULL;
 80050d6:	2600      	movs	r6, #0
 80050d8:	e023      	b.n	8005122 <netconn_drain+0x6a>
          netbuf_delete((struct netbuf *)mem);
 80050da:	9801      	ldr	r0, [sp, #4]
 80050dc:	f000 fb0c 	bl	80056f8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80050e0:	a901      	add	r1, sp, #4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f00a ff27 	bl	800ff36 <sys_arch_mbox_tryfetch>
 80050e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050ec:	d00f      	beq.n	800510e <netconn_drain+0x56>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80050ee:	7823      	ldrb	r3, [r4, #0]
 80050f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f4:	2b10      	cmp	r3, #16
 80050f6:	d1f0      	bne.n	80050da <netconn_drain+0x22>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80050f8:	f10d 0103 	add.w	r1, sp, #3
 80050fc:	9801      	ldr	r0, [sp, #4]
 80050fe:	f7ff feef 	bl	8004ee0 <lwip_netconn_is_err_msg>
 8005102:	2800      	cmp	r0, #0
 8005104:	d1ec      	bne.n	80050e0 <netconn_drain+0x28>
            pbuf_free((struct pbuf *)mem);
 8005106:	9801      	ldr	r0, [sp, #4]
 8005108:	f002 fe38 	bl	8007d7c <pbuf_free>
 800510c:	e7e8      	b.n	80050e0 <netconn_drain+0x28>
    sys_mbox_free(&conn->recvmbox);
 800510e:	4628      	mov	r0, r5
 8005110:	f00a fed7 	bl	800fec2 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8005114:	4628      	mov	r0, r5
 8005116:	f00a ff25 	bl	800ff64 <sys_mbox_set_invalid>
 800511a:	e7d6      	b.n	80050ca <netconn_drain+0x12>
          netconn_free(newconn);
 800511c:	4628      	mov	r0, r5
 800511e:	f7ff ff8f 	bl	8005040 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8005122:	a901      	add	r1, sp, #4
 8005124:	4620      	mov	r0, r4
 8005126:	f00a ff06 	bl	800ff36 <sys_arch_mbox_tryfetch>
 800512a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800512e:	d011      	beq.n	8005154 <netconn_drain+0x9c>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005130:	f10d 0103 	add.w	r1, sp, #3
 8005134:	9801      	ldr	r0, [sp, #4]
 8005136:	f7ff fed3 	bl	8004ee0 <lwip_netconn_is_err_msg>
 800513a:	2800      	cmp	r0, #0
 800513c:	d1f1      	bne.n	8005122 <netconn_drain+0x6a>
          struct netconn *newconn = (struct netconn *)mem;
 800513e:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8005140:	4628      	mov	r0, r5
 8005142:	f7ff ffb9 	bl	80050b8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8005146:	6868      	ldr	r0, [r5, #4]
 8005148:	2800      	cmp	r0, #0
 800514a:	d0e7      	beq.n	800511c <netconn_drain+0x64>
            tcp_abort(newconn->pcb.tcp);
 800514c:	f003 fdc2 	bl	8008cd4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005150:	606e      	str	r6, [r5, #4]
 8005152:	e7e3      	b.n	800511c <netconn_drain+0x64>
    sys_mbox_free(&conn->acceptmbox);
 8005154:	4620      	mov	r0, r4
 8005156:	f00a feb4 	bl	800fec2 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800515a:	4620      	mov	r0, r4
 800515c:	f00a ff02 	bl	800ff64 <sys_mbox_set_invalid>
}
 8005160:	b002      	add	sp, #8
 8005162:	bd70      	pop	{r4, r5, r6, pc}

08005164 <lwip_netconn_do_delconn>:
{
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8005168:	6803      	ldr	r3, [r0, #0]
 800516a:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800516c:	b1ed      	cbz	r5, 80051aa <lwip_netconn_do_delconn+0x46>
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005174:	2b10      	cmp	r3, #16
 8005176:	d10a      	bne.n	800518e <lwip_netconn_do_delconn+0x2a>
  if (((state != NETCONN_NONE) &&
 8005178:	2d02      	cmp	r5, #2
 800517a:	d016      	beq.n	80051aa <lwip_netconn_do_delconn+0x46>
       (state != NETCONN_LISTEN) &&
 800517c:	2d03      	cmp	r5, #3
 800517e:	d00e      	beq.n	800519e <lwip_netconn_do_delconn+0x3a>
    msg->err = ERR_INPROGRESS;
 8005180:	23fb      	movs	r3, #251	; 0xfb
 8005182:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	300c      	adds	r0, #12
 8005188:	f00a ff31 	bl	800ffee <sys_sem_valid>
}
 800518c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800518e:	4b37      	ldr	r3, [pc, #220]	; (800526c <lwip_netconn_do_delconn+0x108>)
 8005190:	f240 425e 	movw	r2, #1118	; 0x45e
 8005194:	4936      	ldr	r1, [pc, #216]	; (8005270 <lwip_netconn_do_delconn+0x10c>)
 8005196:	4837      	ldr	r0, [pc, #220]	; (8005274 <lwip_netconn_do_delconn+0x110>)
 8005198:	f025 fd98 	bl	802accc <iprintf>
 800519c:	e7ec      	b.n	8005178 <lwip_netconn_do_delconn+0x14>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051a4:	f013 0f04 	tst.w	r3, #4
 80051a8:	d0ea      	beq.n	8005180 <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	f7ff ff82 	bl	80050b8 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	6851      	ldr	r1, [r2, #4]
 80051b8:	b179      	cbz	r1, 80051da <lwip_netconn_do_delconn+0x76>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80051ba:	7813      	ldrb	r3, [r2, #0]
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d019      	beq.n	80051f8 <lwip_netconn_do_delconn+0x94>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d105      	bne.n	80051d4 <lwip_netconn_do_delconn+0x70>
          msg->conn->pcb.udp->recv_arg = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61cb      	str	r3, [r1, #28]
          udp_remove(msg->conn->pcb.udp);
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	6858      	ldr	r0, [r3, #4]
 80051d0:	f007 fe32 	bl	800ce38 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0d0      	beq.n	8005184 <lwip_netconn_do_delconn+0x20>
 80051e2:	2200      	movs	r2, #0
 80051e4:	4611      	mov	r1, r2
 80051e6:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0c9      	beq.n	8005184 <lwip_netconn_do_delconn+0x20>
 80051f0:	2200      	movs	r2, #0
 80051f2:	2102      	movs	r1, #2
 80051f4:	4798      	blx	r3
 80051f6:	e7c5      	b.n	8005184 <lwip_netconn_do_delconn+0x20>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80051f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80051fa:	b133      	cbz	r3, 800520a <lwip_netconn_do_delconn+0xa6>
 80051fc:	4b1b      	ldr	r3, [pc, #108]	; (800526c <lwip_netconn_do_delconn+0x108>)
 80051fe:	f240 4294 	movw	r2, #1172	; 0x494
 8005202:	491d      	ldr	r1, [pc, #116]	; (8005278 <lwip_netconn_do_delconn+0x114>)
 8005204:	481b      	ldr	r0, [pc, #108]	; (8005274 <lwip_netconn_do_delconn+0x110>)
 8005206:	f025 fd61 	bl	802accc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	2204      	movs	r2, #4
 800520e:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005210:	2303      	movs	r3, #3
 8005212:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	629c      	str	r4, [r3, #40]	; 0x28
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005218:	2100      	movs	r1, #0
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	f7ff fc3e 	bl	8004a9c <lwip_netconn_do_close_internal>
 8005220:	2800      	cmp	r0, #0
 8005222:	d0b3      	beq.n	800518c <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d117      	bne.n	800525c <lwip_netconn_do_delconn+0xf8>
            UNLOCK_TCPIP_CORE();
 800522c:	4d13      	ldr	r5, [pc, #76]	; (800527c <lwip_netconn_do_delconn+0x118>)
 800522e:	4628      	mov	r0, r5
 8005230:	f00a ff09 	bl	8010046 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	2100      	movs	r1, #0
 8005238:	300c      	adds	r0, #12
 800523a:	f00a feaf 	bl	800ff9c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800523e:	4628      	mov	r0, r5
 8005240:	f00a fefa 	bl	8010038 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d09f      	beq.n	800518c <lwip_netconn_do_delconn+0x28>
 800524c:	4b07      	ldr	r3, [pc, #28]	; (800526c <lwip_netconn_do_delconn+0x108>)
 800524e:	f240 429e 	movw	r2, #1182	; 0x49e
 8005252:	490b      	ldr	r1, [pc, #44]	; (8005280 <lwip_netconn_do_delconn+0x11c>)
 8005254:	4807      	ldr	r0, [pc, #28]	; (8005274 <lwip_netconn_do_delconn+0x110>)
 8005256:	f025 fd39 	bl	802accc <iprintf>
 800525a:	e797      	b.n	800518c <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <lwip_netconn_do_delconn+0x108>)
 800525e:	f240 429a 	movw	r2, #1178	; 0x49a
 8005262:	4907      	ldr	r1, [pc, #28]	; (8005280 <lwip_netconn_do_delconn+0x11c>)
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <lwip_netconn_do_delconn+0x110>)
 8005266:	f025 fd31 	bl	802accc <iprintf>
 800526a:	e7df      	b.n	800522c <lwip_netconn_do_delconn+0xc8>
 800526c:	0802bee8 	.word	0x0802bee8
 8005270:	0802c314 	.word	0x0802c314
 8005274:	0802bc48 	.word	0x0802bc48
 8005278:	0802c328 	.word	0x0802c328
 800527c:	20010d94 	.word	0x20010d94
 8005280:	0802c344 	.word	0x0802c344

08005284 <lwip_netconn_do_connect>:
{
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8005288:	6802      	ldr	r2, [r0, #0]
 800528a:	6850      	ldr	r0, [r2, #4]
 800528c:	2800      	cmp	r0, #0
 800528e:	d067      	beq.n	8005360 <lwip_netconn_do_connect+0xdc>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005290:	7813      	ldrb	r3, [r2, #0]
 8005292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005296:	2b10      	cmp	r3, #16
 8005298:	d006      	beq.n	80052a8 <lwip_netconn_do_connect+0x24>
 800529a:	2b20      	cmp	r3, #32
 800529c:	d156      	bne.n	800534c <lwip_netconn_do_connect+0xc8>
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800529e:	89a2      	ldrh	r2, [r4, #12]
 80052a0:	68a1      	ldr	r1, [r4, #8]
 80052a2:	f007 fd53 	bl	800cd4c <udp_connect>
        break;
 80052a6:	e05d      	b.n	8005364 <lwip_netconn_do_connect+0xe0>
        if (msg->conn->state == NETCONN_CONNECT) {
 80052a8:	7853      	ldrb	r3, [r2, #1]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d05c      	beq.n	8005368 <lwip_netconn_do_connect+0xe4>
        } else if (msg->conn->state != NETCONN_NONE) {
 80052ae:	b113      	cbz	r3, 80052b6 <lwip_netconn_do_connect+0x32>
          err = ERR_ISCONN;
 80052b0:	f06f 0009 	mvn.w	r0, #9
 80052b4:	e056      	b.n	8005364 <lwip_netconn_do_connect+0xe0>
          setup_tcp(msg->conn);
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7ff f918 	bl	80044ec <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	4b2c      	ldr	r3, [pc, #176]	; (8005370 <lwip_netconn_do_connect+0xec>)
 80052c0:	89a2      	ldrh	r2, [r4, #12]
 80052c2:	68a1      	ldr	r1, [r4, #8]
 80052c4:	6840      	ldr	r0, [r0, #4]
 80052c6:	f003 fb3d 	bl	8008944 <tcp_connect>
          if (err == ERR_OK) {
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d14a      	bne.n	8005364 <lwip_netconn_do_connect+0xe0>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
            msg->conn->state = NETCONN_CONNECT;
 80052d4:	2103      	movs	r1, #3
 80052d6:	7059      	strb	r1, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80052d8:	f012 0f02 	tst.w	r2, #2
 80052dc:	d009      	beq.n	80052f2 <lwip_netconn_do_connect+0x6e>
 80052de:	6822      	ldr	r2, [r4, #0]
 80052e0:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80052e4:	f043 0304 	orr.w	r3, r3, #4
 80052e8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
              err = ERR_INPROGRESS;
 80052ec:	f06f 0004 	mvn.w	r0, #4
 80052f0:	e038      	b.n	8005364 <lwip_netconn_do_connect+0xe0>
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
              msg->conn->current_msg = msg;
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	629c      	str	r4, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d117      	bne.n	800533c <lwip_netconn_do_connect+0xb8>
              UNLOCK_TCPIP_CORE();
 800530c:	4d19      	ldr	r5, [pc, #100]	; (8005374 <lwip_netconn_do_connect+0xf0>)
 800530e:	4628      	mov	r0, r5
 8005310:	f00a fe99 	bl	8010046 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	2100      	movs	r1, #0
 8005318:	300c      	adds	r0, #12
 800531a:	f00a fe3f 	bl	800ff9c <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800531e:	4628      	mov	r0, r5
 8005320:	f00a fe8a 	bl	8010038 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d11c      	bne.n	8005366 <lwip_netconn_do_connect+0xe2>
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <lwip_netconn_do_connect+0xf4>)
 800532e:	f240 5274 	movw	r2, #1396	; 0x574
 8005332:	4912      	ldr	r1, [pc, #72]	; (800537c <lwip_netconn_do_connect+0xf8>)
 8005334:	4812      	ldr	r0, [pc, #72]	; (8005380 <lwip_netconn_do_connect+0xfc>)
 8005336:	f025 fcc9 	bl	802accc <iprintf>
 800533a:	e014      	b.n	8005366 <lwip_netconn_do_connect+0xe2>
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800533c:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <lwip_netconn_do_connect+0xf4>)
 800533e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8005342:	490e      	ldr	r1, [pc, #56]	; (800537c <lwip_netconn_do_connect+0xf8>)
 8005344:	480e      	ldr	r0, [pc, #56]	; (8005380 <lwip_netconn_do_connect+0xfc>)
 8005346:	f025 fcc1 	bl	802accc <iprintf>
 800534a:	e7df      	b.n	800530c <lwip_netconn_do_connect+0x88>
        LWIP_ERROR("Invalid netconn type", 0, do {
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <lwip_netconn_do_connect+0xf4>)
 800534e:	f240 527d 	movw	r2, #1405	; 0x57d
 8005352:	490c      	ldr	r1, [pc, #48]	; (8005384 <lwip_netconn_do_connect+0x100>)
 8005354:	480a      	ldr	r0, [pc, #40]	; (8005380 <lwip_netconn_do_connect+0xfc>)
 8005356:	f025 fcb9 	bl	802accc <iprintf>
 800535a:	f06f 0005 	mvn.w	r0, #5
        break;
 800535e:	e001      	b.n	8005364 <lwip_netconn_do_connect+0xe0>
    err = ERR_CLSD;
 8005360:	f06f 000e 	mvn.w	r0, #14
  msg->err = err;
 8005364:	7120      	strb	r0, [r4, #4]
}
 8005366:	bd38      	pop	{r3, r4, r5, pc}
          err = ERR_ALREADY;
 8005368:	f06f 0008 	mvn.w	r0, #8
 800536c:	e7fa      	b.n	8005364 <lwip_netconn_do_connect+0xe0>
 800536e:	bf00      	nop
 8005370:	08004699 	.word	0x08004699
 8005374:	20010d94 	.word	0x20010d94
 8005378:	0802bee8 	.word	0x0802bee8
 800537c:	0802c344 	.word	0x0802c344
 8005380:	0802bc48 	.word	0x0802bc48
 8005384:	0802c34c 	.word	0x0802c34c

08005388 <lwip_netconn_do_disconnect>:
{
 8005388:	b510      	push	{r4, lr}
 800538a:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800538c:	6802      	ldr	r2, [r0, #0]
 800538e:	7813      	ldrb	r3, [r2, #0]
 8005390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005394:	2b20      	cmp	r3, #32
 8005396:	d002      	beq.n	800539e <lwip_netconn_do_disconnect+0x16>
    msg->err = ERR_VAL;
 8005398:	23fa      	movs	r3, #250	; 0xfa
 800539a:	7103      	strb	r3, [r0, #4]
}
 800539c:	bd10      	pop	{r4, pc}
    udp_disconnect(msg->conn->pcb.udp);
 800539e:	6850      	ldr	r0, [r2, #4]
 80053a0:	f007 fd1c 	bl	800cddc <udp_disconnect>
    msg->err = ERR_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	7123      	strb	r3, [r4, #4]
 80053a8:	e7f8      	b.n	800539c <lwip_netconn_do_disconnect+0x14>

080053aa <lwip_netconn_do_send>:
{
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 80053ae:	6800      	ldr	r0, [r0, #0]
 80053b0:	f7fe feb1 	bl	8004116 <netconn_err>
  if (err == ERR_OK) {
 80053b4:	4603      	mov	r3, r0
 80053b6:	b948      	cbnz	r0, 80053cc <lwip_netconn_do_send+0x22>
    if (msg->conn->pcb.tcp != NULL) {
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	6858      	ldr	r0, [r3, #4]
 80053bc:	b1c0      	cbz	r0, 80053f0 <lwip_netconn_do_send+0x46>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d003      	beq.n	80053d0 <lwip_netconn_do_send+0x26>
          err = ERR_CONN;
 80053c8:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 80053cc:	7123      	strb	r3, [r4, #4]
}
 80053ce:	bd10      	pop	{r4, pc}
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80053d0:	68a3      	ldr	r3, [r4, #8]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	b922      	cbnz	r2, 80053e0 <lwip_netconn_do_send+0x36>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	f007 fc94 	bl	800cd04 <udp_send>
 80053dc:	4603      	mov	r3, r0
 80053de:	e7f5      	b.n	80053cc <lwip_netconn_do_send+0x22>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80053e0:	461a      	mov	r2, r3
 80053e2:	f852 1b08 	ldr.w	r1, [r2], #8
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	f007 fc46 	bl	800cc78 <udp_sendto>
 80053ec:	4603      	mov	r3, r0
 80053ee:	e7ed      	b.n	80053cc <lwip_netconn_do_send+0x22>
      err = ERR_CONN;
 80053f0:	f06f 030a 	mvn.w	r3, #10
 80053f4:	e7ea      	b.n	80053cc <lwip_netconn_do_send+0x22>

080053f6 <lwip_netconn_do_recv>:
{
 80053f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80053fc:	6803      	ldr	r3, [r0, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	b12a      	cbz	r2, 800540e <lwip_netconn_do_recv+0x18>
 8005402:	4606      	mov	r6, r0
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540a:	2b10      	cmp	r3, #16
 800540c:	d000      	beq.n	8005410 <lwip_netconn_do_recv+0x1a>
}
 800540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 8005410:	6884      	ldr	r4, [r0, #8]
 8005412:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8005416:	4625      	mov	r5, r4
 8005418:	42bc      	cmp	r4, r7
 800541a:	bf28      	it	cs
 800541c:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800541e:	6833      	ldr	r3, [r6, #0]
 8005420:	b2a9      	uxth	r1, r5
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	f003 f95e 	bl	80086e4 <tcp_recved>
      } while (remaining != 0);
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	d1f4      	bne.n	8005416 <lwip_netconn_do_recv+0x20>
 800542c:	e7ef      	b.n	800540e <lwip_netconn_do_recv+0x18>
	...

08005430 <lwip_netconn_do_write>:
{
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 8005434:	6800      	ldr	r0, [r0, #0]
 8005436:	f7fe fe6e 	bl	8004116 <netconn_err>
  if (err == ERR_OK) {
 800543a:	4603      	mov	r3, r0
 800543c:	b938      	cbnz	r0, 800544e <lwip_netconn_do_write+0x1e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	7813      	ldrb	r3, [r2, #0]
 8005442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005446:	2b10      	cmp	r3, #16
 8005448:	d003      	beq.n	8005452 <lwip_netconn_do_write+0x22>
      err = ERR_VAL;
 800544a:	f06f 0305 	mvn.w	r3, #5
  msg->err = err;
 800544e:	7123      	strb	r3, [r4, #4]
}
 8005450:	bd38      	pop	{r3, r4, r5, pc}
      if (msg->conn->state != NETCONN_NONE) {
 8005452:	7853      	ldrb	r3, [r2, #1]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d144      	bne.n	80054e2 <lwip_netconn_do_write+0xb2>
      } else if (msg->conn->pcb.tcp != NULL) {
 8005458:	6853      	ldr	r3, [r2, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d044      	beq.n	80054e8 <lwip_netconn_do_write+0xb8>
        msg->conn->state = NETCONN_WRITE;
 800545e:	2301      	movs	r3, #1
 8005460:	7053      	strb	r3, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	b133      	cbz	r3, 8005476 <lwip_netconn_do_write+0x46>
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <lwip_netconn_do_write+0xc0>)
 800546a:	f240 7223 	movw	r2, #1827	; 0x723
 800546e:	4921      	ldr	r1, [pc, #132]	; (80054f4 <lwip_netconn_do_write+0xc4>)
 8005470:	4821      	ldr	r0, [pc, #132]	; (80054f8 <lwip_netconn_do_write+0xc8>)
 8005472:	f025 fc2b 	bl	802accc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005476:	6963      	ldr	r3, [r4, #20]
 8005478:	b31b      	cbz	r3, 80054c2 <lwip_netconn_do_write+0x92>
        msg->conn->current_msg = msg;
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	629c      	str	r4, [r3, #40]	; 0x28
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800547e:	2100      	movs	r1, #0
 8005480:	6820      	ldr	r0, [r4, #0]
 8005482:	f7ff f9ab 	bl	80047dc <lwip_netconn_do_writemore>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0e2      	beq.n	8005450 <lwip_netconn_do_write+0x20>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d11f      	bne.n	80054d2 <lwip_netconn_do_write+0xa2>
          UNLOCK_TCPIP_CORE();
 8005492:	4d1a      	ldr	r5, [pc, #104]	; (80054fc <lwip_netconn_do_write+0xcc>)
 8005494:	4628      	mov	r0, r5
 8005496:	f00a fdd6 	bl	8010046 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800549a:	6820      	ldr	r0, [r4, #0]
 800549c:	2100      	movs	r1, #0
 800549e:	300c      	adds	r0, #12
 80054a0:	f00a fd7c 	bl	800ff9c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80054a4:	4628      	mov	r0, r5
 80054a6:	f00a fdc7 	bl	8010038 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d1ce      	bne.n	8005450 <lwip_netconn_do_write+0x20>
 80054b2:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <lwip_netconn_do_write+0xc0>)
 80054b4:	f240 722c 	movw	r2, #1836	; 0x72c
 80054b8:	4911      	ldr	r1, [pc, #68]	; (8005500 <lwip_netconn_do_write+0xd0>)
 80054ba:	480f      	ldr	r0, [pc, #60]	; (80054f8 <lwip_netconn_do_write+0xc8>)
 80054bc:	f025 fc06 	bl	802accc <iprintf>
 80054c0:	e7c6      	b.n	8005450 <lwip_netconn_do_write+0x20>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <lwip_netconn_do_write+0xc0>)
 80054c4:	f240 7224 	movw	r2, #1828	; 0x724
 80054c8:	490e      	ldr	r1, [pc, #56]	; (8005504 <lwip_netconn_do_write+0xd4>)
 80054ca:	480b      	ldr	r0, [pc, #44]	; (80054f8 <lwip_netconn_do_write+0xc8>)
 80054cc:	f025 fbfe 	bl	802accc <iprintf>
 80054d0:	e7d3      	b.n	800547a <lwip_netconn_do_write+0x4a>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <lwip_netconn_do_write+0xc0>)
 80054d4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80054d8:	4909      	ldr	r1, [pc, #36]	; (8005500 <lwip_netconn_do_write+0xd0>)
 80054da:	4807      	ldr	r0, [pc, #28]	; (80054f8 <lwip_netconn_do_write+0xc8>)
 80054dc:	f025 fbf6 	bl	802accc <iprintf>
 80054e0:	e7d7      	b.n	8005492 <lwip_netconn_do_write+0x62>
        err = ERR_INPROGRESS;
 80054e2:	f06f 0304 	mvn.w	r3, #4
 80054e6:	e7b2      	b.n	800544e <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 80054e8:	f06f 030a 	mvn.w	r3, #10
 80054ec:	e7af      	b.n	800544e <lwip_netconn_do_write+0x1e>
 80054ee:	bf00      	nop
 80054f0:	0802bee8 	.word	0x0802bee8
 80054f4:	0802c328 	.word	0x0802c328
 80054f8:	0802bc48 	.word	0x0802bc48
 80054fc:	20010d94 	.word	0x20010d94
 8005500:	0802c344 	.word	0x0802c344
 8005504:	0802c364 	.word	0x0802c364

08005508 <lwip_netconn_do_getaddr>:
{
 8005508:	b508      	push	{r3, lr}
  if (msg->conn->pcb.ip != NULL) {
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03d      	beq.n	800558e <lwip_netconn_do_getaddr+0x86>
    if (msg->msg.ad.local) {
 8005512:	7c02      	ldrb	r2, [r0, #16]
 8005514:	b19a      	cbz	r2, 800553e <lwip_netconn_do_getaddr+0x36>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005516:	6882      	ldr	r2, [r0, #8]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6013      	str	r3, [r2, #0]
    msg->err = ERR_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	7103      	strb	r3, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005520:	6802      	ldr	r2, [r0, #0]
 8005522:	7813      	ldrb	r3, [r2, #0]
 8005524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005528:	2b10      	cmp	r3, #16
 800552a:	d018      	beq.n	800555e <lwip_netconn_do_getaddr+0x56>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d126      	bne.n	800557e <lwip_netconn_do_getaddr+0x76>
        if (msg->msg.ad.local) {
 8005530:	7c03      	ldrb	r3, [r0, #16]
 8005532:	b143      	cbz	r3, 8005546 <lwip_netconn_do_getaddr+0x3e>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8005534:	68c3      	ldr	r3, [r0, #12]
 8005536:	6852      	ldr	r2, [r2, #4]
 8005538:	8a52      	ldrh	r2, [r2, #18]
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	e029      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800553e:	6882      	ldr	r2, [r0, #8]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e7ea      	b.n	800551c <lwip_netconn_do_getaddr+0x14>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8005546:	6853      	ldr	r3, [r2, #4]
 8005548:	7c1a      	ldrb	r2, [r3, #16]
 800554a:	f012 0f04 	tst.w	r2, #4
 800554e:	d102      	bne.n	8005556 <lwip_netconn_do_getaddr+0x4e>
            msg->err = ERR_CONN;
 8005550:	23f5      	movs	r3, #245	; 0xf5
 8005552:	7103      	strb	r3, [r0, #4]
 8005554:	e01d      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8005556:	68c2      	ldr	r2, [r0, #12]
 8005558:	8a9b      	ldrh	r3, [r3, #20]
 800555a:	8013      	strh	r3, [r2, #0]
 800555c:	e019      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
        if ((msg->msg.ad.local == 0) &&
 800555e:	7c03      	ldrb	r3, [r0, #16]
 8005560:	b943      	cbnz	r3, 8005574 <lwip_netconn_do_getaddr+0x6c>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8005562:	6853      	ldr	r3, [r2, #4]
        if ((msg->msg.ad.local == 0) &&
 8005564:	7d1a      	ldrb	r2, [r3, #20]
 8005566:	2a01      	cmp	r2, #1
 8005568:	d901      	bls.n	800556e <lwip_netconn_do_getaddr+0x66>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800556a:	8b1a      	ldrh	r2, [r3, #24]
 800556c:	e004      	b.n	8005578 <lwip_netconn_do_getaddr+0x70>
          msg->err = ERR_CONN;
 800556e:	23f5      	movs	r3, #245	; 0xf5
 8005570:	7103      	strb	r3, [r0, #4]
 8005572:	e00e      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8005574:	6853      	ldr	r3, [r2, #4]
 8005576:	8ada      	ldrh	r2, [r3, #22]
 8005578:	68c3      	ldr	r3, [r0, #12]
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e009      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
        LWIP_ASSERT("invalid netconn_type", 0);
 800557e:	4b05      	ldr	r3, [pc, #20]	; (8005594 <lwip_netconn_do_getaddr+0x8c>)
 8005580:	f240 727d 	movw	r2, #1917	; 0x77d
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <lwip_netconn_do_getaddr+0x90>)
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <lwip_netconn_do_getaddr+0x94>)
 8005588:	f025 fba0 	bl	802accc <iprintf>
        break;
 800558c:	e001      	b.n	8005592 <lwip_netconn_do_getaddr+0x8a>
    msg->err = ERR_CONN;
 800558e:	23f5      	movs	r3, #245	; 0xf5
 8005590:	7103      	strb	r3, [r0, #4]
}
 8005592:	bd08      	pop	{r3, pc}
 8005594:	0802bee8 	.word	0x0802bee8
 8005598:	0802c378 	.word	0x0802c378
 800559c:	0802bc48 	.word	0x0802bc48

080055a0 <lwip_netconn_do_close>:
{
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80055a4:	6800      	ldr	r0, [r0, #0]
  if ((msg->conn->pcb.tcp != NULL) &&
 80055a6:	6843      	ldr	r3, [r0, #4]
 80055a8:	b123      	cbz	r3, 80055b4 <lwip_netconn_do_close+0x14>
 80055aa:	7803      	ldrb	r3, [r0, #0]
 80055ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d002      	beq.n	80055ba <lwip_netconn_do_close+0x1a>
    msg->err = ERR_CONN;
 80055b4:	23f5      	movs	r3, #245	; 0xf5
 80055b6:	7123      	strb	r3, [r4, #4]
}
 80055b8:	bd38      	pop	{r3, r4, r5, pc}
  enum netconn_state state = msg->conn->state;
 80055ba:	7843      	ldrb	r3, [r0, #1]
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80055bc:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80055be:	2a03      	cmp	r2, #3
 80055c0:	d001      	beq.n	80055c6 <lwip_netconn_do_close+0x26>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d0f6      	beq.n	80055b4 <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d004      	beq.n	80055d4 <lwip_netconn_do_close+0x34>
    } else if (state == NETCONN_WRITE) {
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d105      	bne.n	80055da <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 80055ce:	23fb      	movs	r3, #251	; 0xfb
 80055d0:	7123      	strb	r3, [r4, #4]
 80055d2:	e7f1      	b.n	80055b8 <lwip_netconn_do_close+0x18>
      msg->err = ERR_CONN;
 80055d4:	23f5      	movs	r3, #245	; 0xf5
 80055d6:	7123      	strb	r3, [r4, #4]
 80055d8:	e7ee      	b.n	80055b8 <lwip_netconn_do_close+0x18>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80055da:	f012 0f01 	tst.w	r2, #1
 80055de:	d130      	bne.n	8005642 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	b133      	cbz	r3, 80055f4 <lwip_netconn_do_close+0x54>
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <lwip_netconn_do_close+0xb8>)
 80055e8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80055ec:	491b      	ldr	r1, [pc, #108]	; (800565c <lwip_netconn_do_close+0xbc>)
 80055ee:	481c      	ldr	r0, [pc, #112]	; (8005660 <lwip_netconn_do_close+0xc0>)
 80055f0:	f025 fb6c 	bl	802accc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	2204      	movs	r2, #4
 80055f8:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	629c      	str	r4, [r3, #40]	; 0x28
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80055fe:	2100      	movs	r1, #0
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	f7ff fa4b 	bl	8004a9c <lwip_netconn_do_close_internal>
 8005606:	2800      	cmp	r0, #0
 8005608:	d0d6      	beq.n	80055b8 <lwip_netconn_do_close+0x18>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d11a      	bne.n	8005648 <lwip_netconn_do_close+0xa8>
        UNLOCK_TCPIP_CORE();
 8005612:	4d14      	ldr	r5, [pc, #80]	; (8005664 <lwip_netconn_do_close+0xc4>)
 8005614:	4628      	mov	r0, r5
 8005616:	f00a fd16 	bl	8010046 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	2100      	movs	r1, #0
 800561e:	300c      	adds	r0, #12
 8005620:	f00a fcbc 	bl	800ff9c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8005624:	4628      	mov	r0, r5
 8005626:	f00a fd07 	bl	8010038 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0c2      	beq.n	80055b8 <lwip_netconn_do_close+0x18>
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <lwip_netconn_do_close+0xb8>)
 8005634:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8005638:	490b      	ldr	r1, [pc, #44]	; (8005668 <lwip_netconn_do_close+0xc8>)
 800563a:	4809      	ldr	r0, [pc, #36]	; (8005660 <lwip_netconn_do_close+0xc0>)
 800563c:	f025 fb46 	bl	802accc <iprintf>
 8005640:	e7ba      	b.n	80055b8 <lwip_netconn_do_close+0x18>
        netconn_drain(msg->conn);
 8005642:	f7ff fd39 	bl	80050b8 <netconn_drain>
 8005646:	e7cb      	b.n	80055e0 <lwip_netconn_do_close+0x40>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <lwip_netconn_do_close+0xb8>)
 800564a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800564e:	4906      	ldr	r1, [pc, #24]	; (8005668 <lwip_netconn_do_close+0xc8>)
 8005650:	4803      	ldr	r0, [pc, #12]	; (8005660 <lwip_netconn_do_close+0xc0>)
 8005652:	f025 fb3b 	bl	802accc <iprintf>
 8005656:	e7dc      	b.n	8005612 <lwip_netconn_do_close+0x72>
 8005658:	0802bee8 	.word	0x0802bee8
 800565c:	0802c328 	.word	0x0802c328
 8005660:	0802bc48 	.word	0x0802bc48
 8005664:	20010d94 	.word	0x20010d94
 8005668:	0802c344 	.word	0x0802c344

0800566c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800566c:	b530      	push	{r4, r5, lr}
 800566e:	b083      	sub	sp, #12
 8005670:	4604      	mov	r4, r0
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 8005672:	68c5      	ldr	r5, [r0, #12]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <lwip_netconn_do_gethostbyname+0x5c>)
 800567c:	6841      	ldr	r1, [r0, #4]
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	f001 fc08 	bl	8006e94 <dns_gethostbyname_addrtype>
 8005684:	7028      	strb	r0, [r5, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 8005686:	68e3      	ldr	r3, [r4, #12]
 8005688:	f993 3000 	ldrsb.w	r3, [r3]
 800568c:	f113 0f05 	cmn.w	r3, #5
 8005690:	d001      	beq.n	8005696 <lwip_netconn_do_gethostbyname+0x2a>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8005692:	b003      	add	sp, #12
 8005694:	bd30      	pop	{r4, r5, pc}
    UNLOCK_TCPIP_CORE();
 8005696:	4d0d      	ldr	r5, [pc, #52]	; (80056cc <lwip_netconn_do_gethostbyname+0x60>)
 8005698:	4628      	mov	r0, r5
 800569a:	f00a fcd4 	bl	8010046 <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800569e:	2100      	movs	r1, #0
 80056a0:	68a0      	ldr	r0, [r4, #8]
 80056a2:	f00a fc7b 	bl	800ff9c <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 80056a6:	4628      	mov	r0, r5
 80056a8:	f00a fcc6 	bl	8010038 <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 80056ac:	68e3      	ldr	r3, [r4, #12]
 80056ae:	f993 3000 	ldrsb.w	r3, [r3]
 80056b2:	f113 0f05 	cmn.w	r3, #5
 80056b6:	d1ec      	bne.n	8005692 <lwip_netconn_do_gethostbyname+0x26>
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <lwip_netconn_do_gethostbyname+0x64>)
 80056ba:	f640 0271 	movw	r2, #2161	; 0x871
 80056be:	4905      	ldr	r1, [pc, #20]	; (80056d4 <lwip_netconn_do_gethostbyname+0x68>)
 80056c0:	4805      	ldr	r0, [pc, #20]	; (80056d8 <lwip_netconn_do_gethostbyname+0x6c>)
 80056c2:	f025 fb03 	bl	802accc <iprintf>
}
 80056c6:	e7e4      	b.n	8005692 <lwip_netconn_do_gethostbyname+0x26>
 80056c8:	080047b9 	.word	0x080047b9
 80056cc:	20010d94 	.word	0x20010d94
 80056d0:	0802bee8 	.word	0x0802bee8
 80056d4:	0802c390 	.word	0x0802c390
 80056d8:	0802bc48 	.word	0x0802bc48

080056dc <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80056dc:	f100 0310 	add.w	r3, r0, #16
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
 80056e4:	bf9d      	ittte	ls
 80056e6:	4240      	negls	r0, r0
 80056e8:	4b02      	ldrls	r3, [pc, #8]	; (80056f4 <err_to_errno+0x18>)
 80056ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
 80056ee:	2005      	movhi	r0, #5
}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	0802c3b8 	.word	0x0802c3b8

080056f8 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80056f8:	b168      	cbz	r0, 8005716 <netbuf_delete+0x1e>
{
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	b120      	cbz	r0, 800570c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005702:	f002 fb3b 	bl	8007d7c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800570c:	4621      	mov	r1, r4
 800570e:	2006      	movs	r0, #6
 8005710:	f002 f860 	bl	80077d4 <memp_free>
  }
}
 8005714:	bd10      	pop	{r4, pc}
 8005716:	4770      	bx	lr

08005718 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8005718:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800571a:	b140      	cbz	r0, 800572e <netbuf_free+0x16>
 800571c:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	b108      	cbz	r0, 8005726 <netbuf_free+0xe>
    pbuf_free(buf->p);
 8005722:	f002 fb2b 	bl	8007d7c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	6063      	str	r3, [r4, #4]
 800572a:	6023      	str	r3, [r4, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800572c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800572e:	4b03      	ldr	r3, [pc, #12]	; (800573c <netbuf_free+0x24>)
 8005730:	2281      	movs	r2, #129	; 0x81
 8005732:	4903      	ldr	r1, [pc, #12]	; (8005740 <netbuf_free+0x28>)
 8005734:	4803      	ldr	r0, [pc, #12]	; (8005744 <netbuf_free+0x2c>)
 8005736:	f025 fac9 	bl	802accc <iprintf>
 800573a:	e7f7      	b.n	800572c <netbuf_free+0x14>
 800573c:	0802c3fc 	.word	0x0802c3fc
 8005740:	0802c470 	.word	0x0802c470
 8005744:	0802bc48 	.word	0x0802bc48

08005748 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8005748:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800574a:	b1b0      	cbz	r0, 800577a <netbuf_ref+0x32>
 800574c:	460e      	mov	r6, r1
 800574e:	4615      	mov	r5, r2
 8005750:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 8005752:	6800      	ldr	r0, [r0, #0]
 8005754:	b108      	cbz	r0, 800575a <netbuf_ref+0x12>
    pbuf_free(buf->p);
 8005756:	f002 fb11 	bl	8007d7c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800575a:	2241      	movs	r2, #65	; 0x41
 800575c:	2100      	movs	r1, #0
 800575e:	2036      	movs	r0, #54	; 0x36
 8005760:	f002 fb7c 	bl	8007e5c <pbuf_alloc>
 8005764:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8005766:	b188      	cbz	r0, 800578c <netbuf_ref+0x44>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8005768:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	811d      	strh	r5, [r3, #8]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	815d      	strh	r5, [r3, #10]
  buf->ptr = buf->p;
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	6063      	str	r3, [r4, #4]
  return ERR_OK;
 8005776:	2000      	movs	r0, #0
}
 8005778:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <netbuf_ref+0x50>)
 800577c:	2299      	movs	r2, #153	; 0x99
 800577e:	4907      	ldr	r1, [pc, #28]	; (800579c <netbuf_ref+0x54>)
 8005780:	4807      	ldr	r0, [pc, #28]	; (80057a0 <netbuf_ref+0x58>)
 8005782:	f025 faa3 	bl	802accc <iprintf>
 8005786:	f06f 000f 	mvn.w	r0, #15
 800578a:	e7f5      	b.n	8005778 <netbuf_ref+0x30>
    buf->ptr = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	6063      	str	r3, [r4, #4]
    return ERR_MEM;
 8005790:	f04f 30ff 	mov.w	r0, #4294967295
 8005794:	e7f0      	b.n	8005778 <netbuf_ref+0x30>
 8005796:	bf00      	nop
 8005798:	0802c3fc 	.word	0x0802c3fc
 800579c:	0802c48c 	.word	0x0802c48c
 80057a0:	0802bc48 	.word	0x0802bc48

080057a4 <lwip_freeaddrinfo>:
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  struct addrinfo *next;

  while (ai != NULL) {
 80057a4:	b150      	cbz	r0, 80057bc <lwip_freeaddrinfo+0x18>
{
 80057a6:	b538      	push	{r3, r4, r5, lr}
 80057a8:	4604      	mov	r4, r0
    next = ai->ai_next;
    memp_free(MEMP_NETDB, ai);
 80057aa:	250b      	movs	r5, #11
    next = ai->ai_next;
 80057ac:	4621      	mov	r1, r4
 80057ae:	69e4      	ldr	r4, [r4, #28]
    memp_free(MEMP_NETDB, ai);
 80057b0:	4628      	mov	r0, r5
 80057b2:	f002 f80f 	bl	80077d4 <memp_free>
  while (ai != NULL) {
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	d1f8      	bne.n	80057ac <lwip_freeaddrinfo+0x8>
    ai = next;
  }
}
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	4770      	bx	lr
	...

080057c0 <lwip_getaddrinfo>:
  int port_nr = 0;
  size_t total_size;
  size_t namelen = 0;
  int ai_family;

  if (res == NULL) {
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d078      	beq.n	80058b6 <lwip_getaddrinfo+0xf6>
{
 80057c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c8:	b083      	sub	sp, #12
 80057ca:	4605      	mov	r5, r0
 80057cc:	4614      	mov	r4, r2
 80057ce:	4699      	mov	r9, r3
    return EAI_FAIL;
  }
  *res = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c9 3000 	str.w	r3, [r9]
  if ((nodename == NULL) && (servname == NULL)) {
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d055      	beq.n	8005886 <lwip_getaddrinfo+0xc6>
    return EAI_NONAME;
  }

  if (hints != NULL) {
 80057da:	2a00      	cmp	r2, #0
 80057dc:	f000 8089 	beq.w	80058f2 <lwip_getaddrinfo+0x132>
    ai_family = hints->ai_family;
    if ((ai_family != AF_UNSPEC)
 80057e0:	6857      	ldr	r7, [r2, #4]
 80057e2:	f037 0702 	bics.w	r7, r7, #2
 80057e6:	d16a      	bne.n	80058be <lwip_getaddrinfo+0xfe>
    }
  } else {
    ai_family = AF_UNSPEC;
  }

  if (servname != NULL) {
 80057e8:	2900      	cmp	r1, #0
 80057ea:	f040 8083 	bne.w	80058f4 <lwip_getaddrinfo+0x134>
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
      return EAI_SERVICE;
    }
  }

  if (nodename != NULL) {
 80057ee:	2d00      	cmp	r5, #0
 80057f0:	d059      	beq.n	80058a6 <lwip_getaddrinfo+0xe6>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
 80057f2:	b11c      	cbz	r4, 80057fc <lwip_getaddrinfo+0x3c>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	f013 0f04 	tst.w	r3, #4
 80057fa:	d14c      	bne.n	8005896 <lwip_getaddrinfo+0xd6>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
 80057fc:	a901      	add	r1, sp, #4
 80057fe:	4628      	mov	r0, r5
 8005800:	f7fe fdc2 	bl	8004388 <netconn_gethostbyname>
      if (err != ERR_OK) {
 8005804:	2800      	cmp	r0, #0
 8005806:	d15c      	bne.n	80058c2 <lwip_getaddrinfo+0x102>
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  if (nodename != NULL) {
    namelen = strlen(nodename);
 8005808:	4628      	mov	r0, r5
 800580a:	f7fa fcfb 	bl	8000204 <strlen>
 800580e:	4680      	mov	r8, r0
    if (namelen > DNS_MAX_NAME_LENGTH) {
 8005810:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005814:	d859      	bhi.n	80058ca <lwip_getaddrinfo+0x10a>
      /* invalid name length */
      return EAI_FAIL;
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
 8005816:	f108 0a31 	add.w	sl, r8, #49	; 0x31
    total_size += namelen + 1;
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
              total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
 800581a:	200b      	movs	r0, #11
 800581c:	f001 ffc0 	bl	80077a0 <memp_malloc>
  if (ai == NULL) {
 8005820:	4606      	mov	r6, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d04f      	beq.n	80058c6 <lwip_getaddrinfo+0x106>
    return EAI_MEMORY;
  }
  memset(ai, 0, total_size);
 8005826:	4652      	mov	r2, sl
 8005828:	2100      	movs	r1, #0
 800582a:	f024 feae 	bl	802a58a <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void *)((u8_t *)ai + sizeof(struct addrinfo));
 800582e:	f106 0b20 	add.w	fp, r6, #32
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in *)sa;
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
 8005832:	9b01      	ldr	r3, [sp, #4]
 8005834:	6273      	str	r3, [r6, #36]	; 0x24
    sa4->sin_family = AF_INET;
 8005836:	f04f 0a02 	mov.w	sl, #2
 800583a:	f886 a021 	strb.w	sl, [r6, #33]	; 0x21
    sa4->sin_len = sizeof(struct sockaddr_in);
 800583e:	2310      	movs	r3, #16
 8005840:	f886 3020 	strb.w	r3, [r6, #32]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
 8005844:	b2b8      	uxth	r0, r7
 8005846:	f000 ff3b 	bl	80066c0 <lwip_htons>
 800584a:	8470      	strh	r0, [r6, #34]	; 0x22
    ai->ai_family = AF_INET;
 800584c:	f8c6 a004 	str.w	sl, [r6, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
 8005850:	b11c      	cbz	r4, 800585a <lwip_getaddrinfo+0x9a>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	60b3      	str	r3, [r6, #8]
    ai->ai_protocol = hints->ai_protocol;
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	60f3      	str	r3, [r6, #12]
  }
  if (nodename != NULL) {
 800585a:	b155      	cbz	r5, 8005872 <lwip_getaddrinfo+0xb2>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char *)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
 800585c:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8005860:	61b4      	str	r4, [r6, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
 8005862:	4642      	mov	r2, r8
 8005864:	4629      	mov	r1, r5
 8005866:	4620      	mov	r0, r4
 8005868:	f024 fe67 	bl	802a53a <memcpy>
    ai->ai_canonname[namelen] = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	f804 3008 	strb.w	r3, [r4, r8]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
 8005872:	2310      	movs	r3, #16
 8005874:	6133      	str	r3, [r6, #16]
  ai->ai_addr = (struct sockaddr *)sa;
 8005876:	f8c6 b014 	str.w	fp, [r6, #20]

  *res = ai;
 800587a:	f8c9 6000 	str.w	r6, [r9]

  return 0;
 800587e:	2000      	movs	r0, #0
}
 8005880:	b003      	add	sp, #12
 8005882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((nodename == NULL) && (servname == NULL)) {
 8005886:	b1c1      	cbz	r1, 80058ba <lwip_getaddrinfo+0xfa>
  if (hints != NULL) {
 8005888:	b31a      	cbz	r2, 80058d2 <lwip_getaddrinfo+0x112>
    if ((ai_family != AF_UNSPEC)
 800588a:	6853      	ldr	r3, [r2, #4]
 800588c:	f033 0302 	bics.w	r3, r3, #2
 8005890:	d030      	beq.n	80058f4 <lwip_getaddrinfo+0x134>
      return EAI_FAMILY;
 8005892:	20cc      	movs	r0, #204	; 0xcc
 8005894:	e7f4      	b.n	8005880 <lwip_getaddrinfo+0xc0>
      if (!ipaddr_aton(nodename, &addr)) {
 8005896:	a901      	add	r1, sp, #4
 8005898:	4628      	mov	r0, r5
 800589a:	f009 fd55 	bl	800f348 <ip4addr_aton>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d1b2      	bne.n	8005808 <lwip_getaddrinfo+0x48>
        return EAI_NONAME;
 80058a2:	20c8      	movs	r0, #200	; 0xc8
 80058a4:	e7ec      	b.n	8005880 <lwip_getaddrinfo+0xc0>
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
 80058a6:	b1ec      	cbz	r4, 80058e4 <lwip_getaddrinfo+0x124>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f013 0f01 	tst.w	r3, #1
 80058ae:	d019      	beq.n	80058e4 <lwip_getaddrinfo+0x124>
      ip_addr_set_any_val(ai_family == AF_INET6, addr);
 80058b0:	2300      	movs	r3, #0
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	e018      	b.n	80058e8 <lwip_getaddrinfo+0x128>
    return EAI_FAIL;
 80058b6:	20ca      	movs	r0, #202	; 0xca
}
 80058b8:	4770      	bx	lr
    return EAI_NONAME;
 80058ba:	20c8      	movs	r0, #200	; 0xc8
 80058bc:	e7e0      	b.n	8005880 <lwip_getaddrinfo+0xc0>
      return EAI_FAMILY;
 80058be:	20cc      	movs	r0, #204	; 0xcc
 80058c0:	e7de      	b.n	8005880 <lwip_getaddrinfo+0xc0>
        return EAI_FAIL;
 80058c2:	20ca      	movs	r0, #202	; 0xca
 80058c4:	e7dc      	b.n	8005880 <lwip_getaddrinfo+0xc0>
    return EAI_MEMORY;
 80058c6:	20cb      	movs	r0, #203	; 0xcb
 80058c8:	e7da      	b.n	8005880 <lwip_getaddrinfo+0xc0>
      return EAI_FAIL;
 80058ca:	20ca      	movs	r0, #202	; 0xca
 80058cc:	e7d8      	b.n	8005880 <lwip_getaddrinfo+0xc0>
      return EAI_SERVICE;
 80058ce:	20c9      	movs	r0, #201	; 0xc9
 80058d0:	e7d6      	b.n	8005880 <lwip_getaddrinfo+0xc0>
    port_nr = atoi(servname);
 80058d2:	4608      	mov	r0, r1
 80058d4:	f024 fc1b 	bl	802a10e <atoi>
 80058d8:	4607      	mov	r7, r0
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
 80058da:	1e42      	subs	r2, r0, #1
 80058dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d8f4      	bhi.n	80058ce <lwip_getaddrinfo+0x10e>
      ip_addr_set_loopback_val(ai_family == AF_INET6, addr);
 80058e4:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <lwip_getaddrinfo+0x150>)
 80058e6:	9301      	str	r3, [sp, #4]
  size_t namelen = 0;
 80058e8:	f04f 0800 	mov.w	r8, #0
  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
 80058ec:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80058f0:	e793      	b.n	800581a <lwip_getaddrinfo+0x5a>
  if (servname != NULL) {
 80058f2:	b159      	cbz	r1, 800590c <lwip_getaddrinfo+0x14c>
    port_nr = atoi(servname);
 80058f4:	4608      	mov	r0, r1
 80058f6:	f024 fc0a 	bl	802a10e <atoi>
 80058fa:	4607      	mov	r7, r0
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
 80058fc:	1e42      	subs	r2, r0, #1
 80058fe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005902:	429a      	cmp	r2, r3
 8005904:	f67f af73 	bls.w	80057ee <lwip_getaddrinfo+0x2e>
      return EAI_SERVICE;
 8005908:	20c9      	movs	r0, #201	; 0xc9
 800590a:	e7b9      	b.n	8005880 <lwip_getaddrinfo+0xc0>
  int port_nr = 0;
 800590c:	2700      	movs	r7, #0
 800590e:	e775      	b.n	80057fc <lwip_getaddrinfo+0x3c>
 8005910:	0100007f 	.word	0x0100007f

08005914 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8005914:	4603      	mov	r3, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8005916:	2803      	cmp	r0, #3
 8005918:	d806      	bhi.n	8005928 <tryget_socket+0x14>
  struct lwip_sock *sock = tryget_socket_unconn(fd);
  if (sock != NULL) {
    if (sock->conn) {
 800591a:	0102      	lsls	r2, r0, #4
 800591c:	4903      	ldr	r1, [pc, #12]	; (800592c <tryget_socket+0x18>)
 800591e:	5888      	ldr	r0, [r1, r2]
 8005920:	b118      	cbz	r0, 800592a <tryget_socket+0x16>
  return &sockets[s];
 8005922:	eb01 1003 	add.w	r0, r1, r3, lsl #4
      return sock;
 8005926:	4770      	bx	lr
    }
    done_socket(sock);
  }
  return NULL;
 8005928:	2000      	movs	r0, #0
}
 800592a:	4770      	bx	lr
 800592c:	20010220 	.word	0x20010220

08005930 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8005930:	b508      	push	{r3, lr}
  struct lwip_sock *sock = tryget_socket(fd);
 8005932:	f7ff ffef 	bl	8005914 <tryget_socket>
  if (!sock) {
 8005936:	b100      	cbz	r0, 800593a <get_socket+0xa>
    }
    set_errno(EBADF);
    return NULL;
  }
  return sock;
}
 8005938:	bd08      	pop	{r3, pc}
    set_errno(EBADF);
 800593a:	4b02      	ldr	r3, [pc, #8]	; (8005944 <get_socket+0x14>)
 800593c:	2209      	movs	r2, #9
 800593e:	601a      	str	r2, [r3, #0]
    return NULL;
 8005940:	e7fa      	b.n	8005938 <get_socket+0x8>
 8005942:	bf00      	nop
 8005944:	20014684 	.word	0x20014684

08005948 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800594e:	2400      	movs	r4, #0
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8005950:	4d1b      	ldr	r5, [pc, #108]	; (80059c0 <alloc_socket+0x78>)
    SYS_ARCH_PROTECT(lev);
 8005952:	f00a fb91 	bl	8010078 <sys_arch_protect>
    if (!sockets[i].conn) {
 8005956:	0123      	lsls	r3, r4, #4
 8005958:	595b      	ldr	r3, [r3, r5]
 800595a:	b143      	cbz	r3, 800596e <alloc_socket+0x26>
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
      sockets[i].errevent   = 0;
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 800595c:	f00a fb98 	bl	8010090 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005960:	3401      	adds	r4, #1
 8005962:	2c04      	cmp	r4, #4
 8005964:	d1f5      	bne.n	8005952 <alloc_socket+0xa>
  }
  return -1;
 8005966:	f04f 34ff 	mov.w	r4, #4294967295
}
 800596a:	4620      	mov	r0, r4
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sockets[i].conn       = newconn;
 800596e:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <alloc_socket+0x78>)
 8005970:	0123      	lsls	r3, r4, #4
 8005972:	eb02 1504 	add.w	r5, r2, r4, lsl #4
 8005976:	50d6      	str	r6, [r2, r3]
      SYS_ARCH_UNPROTECT(lev);
 8005978:	f00a fb8a 	bl	8010090 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8005980:	7bab      	ldrb	r3, [r5, #14]
 8005982:	b98b      	cbnz	r3, 80059a8 <alloc_socket+0x60>
      sockets[i].rcvevent   = 0;
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <alloc_socket+0x78>)
 8005986:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800598a:	2200      	movs	r2, #0
 800598c:	811a      	strh	r2, [r3, #8]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800598e:	7833      	ldrb	r3, [r6, #0]
 8005990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005994:	2b10      	cmp	r3, #16
 8005996:	d00f      	beq.n	80059b8 <alloc_socket+0x70>
 8005998:	2101      	movs	r1, #1
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <alloc_socket+0x78>)
 800599c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80059a0:	8159      	strh	r1, [r3, #10]
      sockets[i].errevent   = 0;
 80059a2:	2200      	movs	r2, #0
 80059a4:	819a      	strh	r2, [r3, #12]
      return i + LWIP_SOCKET_OFFSET;
 80059a6:	e7e0      	b.n	800596a <alloc_socket+0x22>
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <alloc_socket+0x7c>)
 80059aa:	f240 220e 	movw	r2, #526	; 0x20e
 80059ae:	4906      	ldr	r1, [pc, #24]	; (80059c8 <alloc_socket+0x80>)
 80059b0:	4806      	ldr	r0, [pc, #24]	; (80059cc <alloc_socket+0x84>)
 80059b2:	f025 f98b 	bl	802accc <iprintf>
 80059b6:	e7e5      	b.n	8005984 <alloc_socket+0x3c>
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80059b8:	1ab9      	subs	r1, r7, r2
 80059ba:	bf18      	it	ne
 80059bc:	2101      	movne	r1, #1
 80059be:	e7ec      	b.n	800599a <alloc_socket+0x52>
 80059c0:	20010220 	.word	0x20010220
 80059c4:	0802c4a4 	.word	0x0802c4a4
 80059c8:	0802c4f0 	.word	0x0802c4f0
 80059cc:	0802bc48 	.word	0x0802bc48

080059d0 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	b085      	sub	sp, #20
 80059d4:	4616      	mov	r6, r2
 80059d6:	461c      	mov	r4, r3
 80059d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  int truncated = 0;
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 80059da:	460f      	mov	r7, r1
 80059dc:	b1d1      	cbz	r1, 8005a14 <lwip_sock_make_addr+0x44>
  LWIP_ASSERT("from != NULL", from != NULL);
 80059de:	b30c      	cbz	r4, 8005a24 <lwip_sock_make_addr+0x54>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 80059e0:	b345      	cbz	r5, 8005a34 <lwip_sock_make_addr+0x64>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 80059e2:	2310      	movs	r3, #16
 80059e4:	f88d 3000 	strb.w	r3, [sp]
 80059e8:	2302      	movs	r3, #2
 80059ea:	f88d 3001 	strb.w	r3, [sp, #1]
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 fe66 	bl	80066c0 <lwip_htons>
 80059f4:	f8ad 0002 	strh.w	r0, [sp, #2]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9302      	str	r3, [sp, #8]
 8005a00:	9303      	str	r3, [sp, #12]
  if (*fromlen < saddr.sa.sa_len) {
 8005a02:	682b      	ldr	r3, [r5, #0]
 8005a04:	2b0f      	cmp	r3, #15
 8005a06:	d91d      	bls.n	8005a44 <lwip_sock_make_addr+0x74>
    truncated = 1;
  } else if (*fromlen > saddr.sa.sa_len) {
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d924      	bls.n	8005a56 <lwip_sock_make_addr+0x86>
    *fromlen = saddr.sa.sa_len;
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	602b      	str	r3, [r5, #0]
  int truncated = 0;
 8005a10:	2600      	movs	r6, #0
 8005a12:	e018      	b.n	8005a46 <lwip_sock_make_addr+0x76>
  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <lwip_sock_make_addr+0x8c>)
 8005a16:	f240 4207 	movw	r2, #1031	; 0x407
 8005a1a:	4911      	ldr	r1, [pc, #68]	; (8005a60 <lwip_sock_make_addr+0x90>)
 8005a1c:	4811      	ldr	r0, [pc, #68]	; (8005a64 <lwip_sock_make_addr+0x94>)
 8005a1e:	f025 f955 	bl	802accc <iprintf>
 8005a22:	e7dc      	b.n	80059de <lwip_sock_make_addr+0xe>
  LWIP_ASSERT("from != NULL", from != NULL);
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <lwip_sock_make_addr+0x8c>)
 8005a26:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8005a2a:	490f      	ldr	r1, [pc, #60]	; (8005a68 <lwip_sock_make_addr+0x98>)
 8005a2c:	480d      	ldr	r0, [pc, #52]	; (8005a64 <lwip_sock_make_addr+0x94>)
 8005a2e:	f025 f94d 	bl	802accc <iprintf>
 8005a32:	e7d5      	b.n	80059e0 <lwip_sock_make_addr+0x10>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <lwip_sock_make_addr+0x8c>)
 8005a36:	f240 4209 	movw	r2, #1033	; 0x409
 8005a3a:	490c      	ldr	r1, [pc, #48]	; (8005a6c <lwip_sock_make_addr+0x9c>)
 8005a3c:	4809      	ldr	r0, [pc, #36]	; (8005a64 <lwip_sock_make_addr+0x94>)
 8005a3e:	f025 f945 	bl	802accc <iprintf>
 8005a42:	e7ce      	b.n	80059e2 <lwip_sock_make_addr+0x12>
    truncated = 1;
 8005a44:	2601      	movs	r6, #1
  }
  MEMCPY(from, &saddr, *fromlen);
 8005a46:	682a      	ldr	r2, [r5, #0]
 8005a48:	4669      	mov	r1, sp
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f024 fd75 	bl	802a53a <memcpy>
  return truncated;
}
 8005a50:	4630      	mov	r0, r6
 8005a52:	b005      	add	sp, #20
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int truncated = 0;
 8005a56:	2600      	movs	r6, #0
 8005a58:	e7f5      	b.n	8005a46 <lwip_sock_make_addr+0x76>
 8005a5a:	bf00      	nop
 8005a5c:	0802c4a4 	.word	0x0802c4a4
 8005a60:	0802c510 	.word	0x0802c510
 8005a64:	0802bc48 	.word	0x0802bc48
 8005a68:	0802c524 	.word	0x0802c524
 8005a6c:	0802c534 	.word	0x0802c534

08005a70 <free_socket>:
{
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	4604      	mov	r4, r0
 8005a74:	460d      	mov	r5, r1
  SYS_ARCH_PROTECT(lev);
 8005a76:	f00a faff 	bl	8010078 <sys_arch_protect>
  *lastdata = sock->lastdata;
 8005a7a:	6866      	ldr	r6, [r4, #4]
  sock->lastdata.pbuf = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	6063      	str	r3, [r4, #4]
  *conn = sock->conn;
 8005a80:	6827      	ldr	r7, [r4, #0]
  sock->conn = NULL;
 8005a82:	6023      	str	r3, [r4, #0]
  SYS_ARCH_UNPROTECT(lev);
 8005a84:	f00a fb04 	bl	8010090 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 8005a88:	b11e      	cbz	r6, 8005a92 <free_socket+0x22>
    if (is_tcp) {
 8005a8a:	b13d      	cbz	r5, 8005a9c <free_socket+0x2c>
      pbuf_free(lastdata->pbuf);
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f002 f975 	bl	8007d7c <pbuf_free>
  if (conn != NULL) {
 8005a92:	b117      	cbz	r7, 8005a9a <free_socket+0x2a>
    netconn_delete(conn);
 8005a94:	4638      	mov	r0, r7
 8005a96:	f7fe f9c7 	bl	8003e28 <netconn_delete>
}
 8005a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      netbuf_delete(lastdata->netbuf);
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff fe2b 	bl	80056f8 <netbuf_delete>
 8005aa2:	e7f6      	b.n	8005a92 <free_socket+0x22>

08005aa4 <lwip_recv_tcp>:
{
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	468b      	mov	fp, r1
 8005aac:	469a      	mov	sl, r3
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	bfac      	ite	ge
 8005ab2:	4615      	movge	r5, r2
 8005ab4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
  LWIP_ASSERT("no socket given", sock != NULL);
 8005ab8:	4680      	mov	r8, r0
 8005aba:	b168      	cbz	r0, 8005ad8 <lwip_recv_tcp+0x34>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8005abc:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d10e      	bne.n	8005ae8 <lwip_recv_tcp+0x44>
    apiflags |= NETCONN_DONTBLOCK;
 8005aca:	f01a 0f08 	tst.w	sl, #8
 8005ace:	bf0c      	ite	eq
 8005ad0:	2208      	moveq	r2, #8
 8005ad2:	220c      	movne	r2, #12
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	e04c      	b.n	8005b72 <lwip_recv_tcp+0xce>
  LWIP_ASSERT("no socket given", sock != NULL);
 8005ad8:	4b45      	ldr	r3, [pc, #276]	; (8005bf0 <lwip_recv_tcp+0x14c>)
 8005ada:	f240 329e 	movw	r2, #926	; 0x39e
 8005ade:	4945      	ldr	r1, [pc, #276]	; (8005bf4 <lwip_recv_tcp+0x150>)
 8005ae0:	4845      	ldr	r0, [pc, #276]	; (8005bf8 <lwip_recv_tcp+0x154>)
 8005ae2:	f025 f8f3 	bl	802accc <iprintf>
 8005ae6:	e7e9      	b.n	8005abc <lwip_recv_tcp+0x18>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8005ae8:	4b41      	ldr	r3, [pc, #260]	; (8005bf0 <lwip_recv_tcp+0x14c>)
 8005aea:	f240 329f 	movw	r2, #927	; 0x39f
 8005aee:	4943      	ldr	r1, [pc, #268]	; (8005bfc <lwip_recv_tcp+0x158>)
 8005af0:	4841      	ldr	r0, [pc, #260]	; (8005bf8 <lwip_recv_tcp+0x154>)
 8005af2:	f025 f8eb 	bl	802accc <iprintf>
 8005af6:	e7e8      	b.n	8005aca <lwip_recv_tcp+0x26>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8005af8:	a901      	add	r1, sp, #4
 8005afa:	f8d8 0000 	ldr.w	r0, [r8]
 8005afe:	f7fe fc1b 	bl	8004338 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 8005b02:	4604      	mov	r4, r0
 8005b04:	b928      	cbnz	r0, 8005b12 <lwip_recv_tcp+0x6e>
      LWIP_ASSERT("p != NULL", p != NULL);
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	b193      	cbz	r3, 8005b30 <lwip_recv_tcp+0x8c>
      sock->lastdata.pbuf = p;
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005b10:	e034      	b.n	8005b7c <lwip_recv_tcp+0xd8>
        if (recvd > 0) {
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	dd01      	ble.n	8005b1a <lwip_recv_tcp+0x76>
          goto lwip_recv_tcp_done;
 8005b16:	46b1      	mov	r9, r6
 8005b18:	e05c      	b.n	8005bd4 <lwip_recv_tcp+0x130>
        sock_set_errno(sock, err_to_errno(err));
 8005b1a:	f7ff fddf 	bl	80056dc <err_to_errno>
 8005b1e:	b108      	cbz	r0, 8005b24 <lwip_recv_tcp+0x80>
 8005b20:	4a37      	ldr	r2, [pc, #220]	; (8005c00 <lwip_recv_tcp+0x15c>)
 8005b22:	6010      	str	r0, [r2, #0]
        if (err == ERR_CLSD) {
 8005b24:	340f      	adds	r4, #15
 8005b26:	bf18      	it	ne
 8005b28:	2401      	movne	r4, #1
 8005b2a:	f1c4 0900 	rsb	r9, r4, #0
 8005b2e:	e04a      	b.n	8005bc6 <lwip_recv_tcp+0x122>
      LWIP_ASSERT("p != NULL", p != NULL);
 8005b30:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <lwip_recv_tcp+0x14c>)
 8005b32:	f240 32c5 	movw	r2, #965	; 0x3c5
 8005b36:	4933      	ldr	r1, [pc, #204]	; (8005c04 <lwip_recv_tcp+0x160>)
 8005b38:	482f      	ldr	r0, [pc, #188]	; (8005bf8 <lwip_recv_tcp+0x154>)
 8005b3a:	f025 f8c7 	bl	802accc <iprintf>
 8005b3e:	e7e4      	b.n	8005b0a <lwip_recv_tcp+0x66>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <lwip_recv_tcp+0x14c>)
 8005b42:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005b46:	4930      	ldr	r1, [pc, #192]	; (8005c08 <lwip_recv_tcp+0x164>)
 8005b48:	482b      	ldr	r0, [pc, #172]	; (8005bf8 <lwip_recv_tcp+0x154>)
 8005b4a:	f025 f8bf 	bl	802accc <iprintf>
 8005b4e:	e025      	b.n	8005b9c <lwip_recv_tcp+0xf8>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <lwip_recv_tcp+0x14c>)
 8005b52:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005b56:	492d      	ldr	r1, [pc, #180]	; (8005c0c <lwip_recv_tcp+0x168>)
 8005b58:	4827      	ldr	r0, [pc, #156]	; (8005bf8 <lwip_recv_tcp+0x154>)
 8005b5a:	f025 f8b7 	bl	802accc <iprintf>
 8005b5e:	e025      	b.n	8005bac <lwip_recv_tcp+0x108>
        sock->lastdata.pbuf = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c8 3004 	str.w	r3, [r8, #4]
        pbuf_free(p);
 8005b66:	f002 f909 	bl	8007d7c <pbuf_free>
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8005b6a:	221c      	movs	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	dd35      	ble.n	8005bdc <lwip_recv_tcp+0x138>
    if (recvd + copylen < recvd) {
 8005b70:	464e      	mov	r6, r9
    if (sock->lastdata.pbuf) {
 8005b72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0be      	beq.n	8005af8 <lwip_recv_tcp+0x54>
      p = sock->lastdata.pbuf;
 8005b7a:	9301      	str	r3, [sp, #4]
    if (recv_left > p->tot_len) {
 8005b7c:	9801      	ldr	r0, [sp, #4]
 8005b7e:	8904      	ldrh	r4, [r0, #8]
 8005b80:	42ac      	cmp	r4, r5
      copylen = (u16_t)recv_left;
 8005b82:	bfa8      	it	ge
 8005b84:	b2ac      	uxthge	r4, r5
    if (recvd + copylen < recvd) {
 8005b86:	4627      	mov	r7, r4
 8005b88:	eb04 0906 	add.w	r9, r4, r6
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4622      	mov	r2, r4
 8005b90:	eb0b 0106 	add.w	r1, fp, r6
 8005b94:	f002 fb98 	bl	80082c8 <pbuf_copy_partial>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8005b98:	42ac      	cmp	r4, r5
 8005b9a:	dcd1      	bgt.n	8005b40 <lwip_recv_tcp+0x9c>
    recv_left -= copylen;
 8005b9c:	1bed      	subs	r5, r5, r7
    if ((flags & MSG_PEEK) == 0) {
 8005b9e:	f01a 0f01 	tst.w	sl, #1
 8005ba2:	d10e      	bne.n	8005bc2 <lwip_recv_tcp+0x11e>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	891b      	ldrh	r3, [r3, #8]
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d3d1      	bcc.n	8005b50 <lwip_recv_tcp+0xac>
      if (p->tot_len - copylen > 0) {
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	8903      	ldrh	r3, [r0, #8]
 8005bb0:	1bdf      	subs	r7, r3, r7
 8005bb2:	2f00      	cmp	r7, #0
 8005bb4:	ddd4      	ble.n	8005b60 <lwip_recv_tcp+0xbc>
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	f002 fa58 	bl	800806c <pbuf_free_header>
 8005bbc:	f8c8 0004 	str.w	r0, [r8, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
 8005bc0:	e7d3      	b.n	8005b6a <lwip_recv_tcp+0xc6>
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	dd03      	ble.n	8005bce <lwip_recv_tcp+0x12a>
}
 8005bc6:	4648      	mov	r0, r9
 8005bc8:	b003      	add	sp, #12
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	ddf8      	ble.n	8005bc6 <lwip_recv_tcp+0x122>
 8005bd4:	f01a 0f01 	tst.w	sl, #1
 8005bd8:	d1f5      	bne.n	8005bc6 <lwip_recv_tcp+0x122>
 8005bda:	e002      	b.n	8005be2 <lwip_recv_tcp+0x13e>
 8005bdc:	f1b9 0f00 	cmp.w	r9, #0
 8005be0:	ddf1      	ble.n	8005bc6 <lwip_recv_tcp+0x122>
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8005be2:	4649      	mov	r1, r9
 8005be4:	f8d8 0000 	ldr.w	r0, [r8]
 8005be8:	f7fe f9ae 	bl	8003f48 <netconn_tcp_recvd>
 8005bec:	e7eb      	b.n	8005bc6 <lwip_recv_tcp+0x122>
 8005bee:	bf00      	nop
 8005bf0:	0802c4a4 	.word	0x0802c4a4
 8005bf4:	0802c544 	.word	0x0802c544
 8005bf8:	0802bc48 	.word	0x0802bc48
 8005bfc:	0802c554 	.word	0x0802c554
 8005c00:	20014684 	.word	0x20014684
 8005c04:	0802e6fc 	.word	0x0802e6fc
 8005c08:	0802c578 	.word	0x0802c578
 8005c0c:	0802c5a0 	.word	0x0802c5a0

08005c10 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	b085      	sub	sp, #20
 8005c16:	4681      	mov	r9, r0
 8005c18:	4688      	mov	r8, r1
 8005c1a:	4616      	mov	r6, r2
 8005c1c:	469a      	mov	sl, r3
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8005c1e:	6893      	ldr	r3, [r2, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d044      	beq.n	8005cae <lwip_recvfrom_udp_raw+0x9e>

  if (flags & MSG_DONTWAIT) {
    apiflags = NETCONN_DONTBLOCK;
  } else {
    apiflags = 0;
 8005c24:	f018 0f08 	tst.w	r8, #8
 8005c28:	bf14      	ite	ne
 8005c2a:	2204      	movne	r2, #4
 8005c2c:	2200      	moveq	r2, #0
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8005c2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005c32:	9303      	str	r3, [sp, #12]
  if (buf == NULL) {
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d047      	beq.n	8005cc8 <lwip_recvfrom_udp_raw+0xb8>
      return err;
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
    sock->lastdata.netbuf = buf;
  }
  buflen = buf->p->tot_len;
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	891f      	ldrh	r7, [r3, #8]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8005c3e:	68f3      	ldr	r3, [r6, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	dd1d      	ble.n	8005c80 <lwip_recvfrom_udp_raw+0x70>
 8005c44:	b1e7      	cbz	r7, 8005c80 <lwip_recvfrom_udp_raw+0x70>
 8005c46:	2500      	movs	r5, #0
  copied = 0;
 8005c48:	46ab      	mov	fp, r5
    u16_t len_left = (u16_t)(buflen - copied);
 8005c4a:	eba7 040b 	sub.w	r4, r7, fp
 8005c4e:	b2a4      	uxth	r4, r4
    if (msg->msg_iov[i].iov_len > len_left) {
 8005c50:	00e8      	lsls	r0, r5, #3
 8005c52:	68b1      	ldr	r1, [r6, #8]
 8005c54:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	42a3      	cmp	r3, r4
      copylen = len_left;
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8005c5c:	bf98      	it	ls
 8005c5e:	b29c      	uxthls	r4, r3
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8005c60:	465b      	mov	r3, fp
 8005c62:	4622      	mov	r2, r4
 8005c64:	5809      	ldr	r1, [r1, r0]
 8005c66:	9803      	ldr	r0, [sp, #12]
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	f002 fb2d 	bl	80082c8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8005c6e:	445c      	add	r4, fp
 8005c70:	fa1f fb84 	uxth.w	fp, r4
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8005c74:	3501      	adds	r5, #1
 8005c76:	68f3      	ldr	r3, [r6, #12]
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	dd01      	ble.n	8005c80 <lwip_recvfrom_udp_raw+0x70>
 8005c7c:	455f      	cmp	r7, fp
 8005c7e:	d8e4      	bhi.n	8005c4a <lwip_recvfrom_udp_raw+0x3a>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8005c80:	6833      	ldr	r3, [r6, #0]
 8005c82:	b113      	cbz	r3, 8005c8a <lwip_recvfrom_udp_raw+0x7a>
 8005c84:	6872      	ldr	r2, [r6, #4]
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d133      	bne.n	8005cf2 <lwip_recvfrom_udp_raw+0xe2>
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61b3      	str	r3, [r6, #24]

  if (msg->msg_control) {
 8005c8e:	6933      	ldr	r3, [r6, #16]
 8005c90:	b10b      	cbz	r3, 8005c96 <lwip_recvfrom_udp_raw+0x86>
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
      msg->msg_controllen = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	6173      	str	r3, [r6, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8005c96:	f018 0f01 	tst.w	r8, #1
 8005c9a:	d034      	beq.n	8005d06 <lwip_recvfrom_udp_raw+0xf6>
    sock->lastdata.netbuf = NULL;
    netbuf_delete(buf);
  }
  if (datagram_len) {
 8005c9c:	f1ba 0f00 	cmp.w	sl, #0
 8005ca0:	d038      	beq.n	8005d14 <lwip_recvfrom_udp_raw+0x104>
    *datagram_len = buflen;
 8005ca2:	f8aa 7000 	strh.w	r7, [sl]
  }
  return ERR_OK;
 8005ca6:	2000      	movs	r0, #0
}
 8005ca8:	b005      	add	sp, #20
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8005cae:	68d3      	ldr	r3, [r2, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	ddb7      	ble.n	8005c24 <lwip_recvfrom_udp_raw+0x14>
 8005cb4:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <lwip_recvfrom_udp_raw+0x108>)
 8005cb6:	f240 4249 	movw	r2, #1097	; 0x449
 8005cba:	4918      	ldr	r1, [pc, #96]	; (8005d1c <lwip_recvfrom_udp_raw+0x10c>)
 8005cbc:	4818      	ldr	r0, [pc, #96]	; (8005d20 <lwip_recvfrom_udp_raw+0x110>)
 8005cbe:	f025 f805 	bl	802accc <iprintf>
 8005cc2:	f06f 000f 	mvn.w	r0, #15
 8005cc6:	e7ef      	b.n	8005ca8 <lwip_recvfrom_udp_raw+0x98>
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8005cc8:	a903      	add	r1, sp, #12
 8005cca:	f8d9 0000 	ldr.w	r0, [r9]
 8005cce:	f7fe fac9 	bl	8004264 <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1e8      	bne.n	8005ca8 <lwip_recvfrom_udp_raw+0x98>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	b11b      	cbz	r3, 8005ce2 <lwip_recvfrom_udp_raw+0xd2>
    sock->lastdata.netbuf = buf;
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ce0:	e7aa      	b.n	8005c38 <lwip_recvfrom_udp_raw+0x28>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	; (8005d18 <lwip_recvfrom_udp_raw+0x108>)
 8005ce4:	f240 425e 	movw	r2, #1118	; 0x45e
 8005ce8:	490e      	ldr	r1, [pc, #56]	; (8005d24 <lwip_recvfrom_udp_raw+0x114>)
 8005cea:	480d      	ldr	r0, [pc, #52]	; (8005d20 <lwip_recvfrom_udp_raw+0x110>)
 8005cec:	f024 ffee 	bl	802accc <iprintf>
 8005cf0:	e7f3      	b.n	8005cda <lwip_recvfrom_udp_raw+0xca>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8005cf2:	9903      	ldr	r1, [sp, #12]
 8005cf4:	898a      	ldrh	r2, [r1, #12]
 8005cf6:	1d30      	adds	r0, r6, #4
 8005cf8:	9000      	str	r0, [sp, #0]
 8005cfa:	3108      	adds	r1, #8
 8005cfc:	f8d9 0000 	ldr.w	r0, [r9]
 8005d00:	f7ff fe66 	bl	80059d0 <lwip_sock_make_addr>
 8005d04:	e7c1      	b.n	8005c8a <lwip_recvfrom_udp_raw+0x7a>
    sock->lastdata.netbuf = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c9 3004 	str.w	r3, [r9, #4]
    netbuf_delete(buf);
 8005d0c:	9803      	ldr	r0, [sp, #12]
 8005d0e:	f7ff fcf3 	bl	80056f8 <netbuf_delete>
 8005d12:	e7c3      	b.n	8005c9c <lwip_recvfrom_udp_raw+0x8c>
  return ERR_OK;
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7c7      	b.n	8005ca8 <lwip_recvfrom_udp_raw+0x98>
 8005d18:	0802c4a4 	.word	0x0802c4a4
 8005d1c:	0802c5b0 	.word	0x0802c5b0
 8005d20:	0802bc48 	.word	0x0802bc48
 8005d24:	0802be68 	.word	0x0802be68

08005d28 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f000 80d0 	beq.w	8005ece <event_callback+0x1a6>
{
 8005d2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d32:	460c      	mov	r4, r1
 8005d34:	4606      	mov	r6, r0
    s = conn->socket;
 8005d36:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	db0e      	blt.n	8005d5a <event_callback+0x32>
      }
      s = conn->socket;
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f7ff fdf7 	bl	8005930 <get_socket>
    if (!sock) {
 8005d42:	4680      	mov	r8, r0
 8005d44:	b340      	cbz	r0, 8005d98 <event_callback+0x70>
  } else {
    return;
  }

  check_waiters = 1;
  SYS_ARCH_PROTECT(lev);
 8005d46:	f00a f997 	bl	8010078 <sys_arch_protect>
 8005d4a:	4681      	mov	r9, r0
  /* Set event as required */
  switch (evt) {
 8005d4c:	2c04      	cmp	r4, #4
 8005d4e:	d857      	bhi.n	8005e00 <event_callback+0xd8>
 8005d50:	e8df f004 	tbb	[pc, r4]
 8005d54:	332a2411 	.word	0x332a2411
 8005d58:	37          	.byte	0x37
 8005d59:	00          	.byte	0x00
      SYS_ARCH_PROTECT(lev);
 8005d5a:	f00a f98d 	bl	8010078 <sys_arch_protect>
      if (conn->socket < 0) {
 8005d5e:	69b5      	ldr	r5, [r6, #24]
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	db02      	blt.n	8005d6a <event_callback+0x42>
      SYS_ARCH_UNPROTECT(lev);
 8005d64:	f00a f994 	bl	8010090 <sys_arch_unprotect>
 8005d68:	e7e8      	b.n	8005d3c <event_callback+0x14>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8005d6a:	b90c      	cbnz	r4, 8005d70 <event_callback+0x48>
          conn->socket--;
 8005d6c:	3d01      	subs	r5, #1
 8005d6e:	61b5      	str	r5, [r6, #24]
        SYS_ARCH_UNPROTECT(lev);
 8005d70:	f00a f98e 	bl	8010090 <sys_arch_unprotect>
        return;
 8005d74:	e010      	b.n	8005d98 <event_callback+0x70>
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8005d76:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	b21b      	sxth	r3, r3
 8005d7e:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (sock->rcvevent > 1) {
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	bfcc      	ite	gt
 8005d86:	2300      	movgt	r3, #0
 8005d88:	2301      	movle	r3, #1
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
  }

  if (sock->select_waiting && check_waiters) {
 8005d8a:	f898 200e 	ldrb.w	r2, [r8, #14]
 8005d8e:	b102      	cbz	r2, 8005d92 <event_callback+0x6a>
 8005d90:	b9f3      	cbnz	r3, 8005dd0 <event_callback+0xa8>
    has_errevent = sock->errevent != 0;
    SYS_ARCH_UNPROTECT(lev);
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8005d92:	4648      	mov	r0, r9
 8005d94:	f00a f97c 	bl	8010090 <sys_arch_unprotect>
  }
  done_socket(sock);
}
 8005d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock->rcvevent--;
 8005d9c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	f8a8 3008 	strh.w	r3, [r8, #8]
      break;
 8005da6:	e7f4      	b.n	8005d92 <event_callback+0x6a>
      if (sock->sendevent) {
 8005da8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	095b      	lsrs	r3, r3, #5
      sock->sendevent = 1;
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a8 200a 	strh.w	r2, [r8, #10]
      break;
 8005db8:	e7e7      	b.n	8005d8a <event_callback+0x62>
      sock->sendevent = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8a8 300a 	strh.w	r3, [r8, #10]
      break;
 8005dc0:	e7e7      	b.n	8005d92 <event_callback+0x6a>
      sock->errevent = 1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8a8 300c 	strh.w	r3, [r8, #12]
  if (sock->select_waiting && check_waiters) {
 8005dc8:	f898 300e 	ldrb.w	r3, [r8, #14]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0e0      	beq.n	8005d92 <event_callback+0x6a>
    has_recvevent = sock->rcvevent > 0;
 8005dd0:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
    has_sendevent = sock->sendevent != 0;
 8005dd4:	f8b8 700a 	ldrh.w	r7, [r8, #10]
    has_errevent = sock->errevent != 0;
 8005dd8:	f8b8 800c 	ldrh.w	r8, [r8, #12]
    SYS_ARCH_UNPROTECT(lev);
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f00a f957 	bl	8010090 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <event_callback+0x1a8>)
 8005de4:	681c      	ldr	r4, [r3, #0]
 8005de6:	2c00      	cmp	r4, #0
 8005de8:	d0d6      	beq.n	8005d98 <event_callback+0x70>
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8005dea:	ea4f 1b55 	mov.w	fp, r5, lsr #5
 8005dee:	f005 031f 	and.w	r3, r5, #31
 8005df2:	f04f 0901 	mov.w	r9, #1
 8005df6:	fa09 f903 	lsl.w	r9, r9, r3
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
        scb->sem_signalled = 1;
 8005dfa:	f04f 0a01 	mov.w	sl, #1
 8005dfe:	e059      	b.n	8005eb4 <event_callback+0x18c>
      LWIP_ASSERT("unknown event", 0);
 8005e00:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <event_callback+0x1ac>)
 8005e02:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8005e06:	4934      	ldr	r1, [pc, #208]	; (8005ed8 <event_callback+0x1b0>)
 8005e08:	4834      	ldr	r0, [pc, #208]	; (8005edc <event_callback+0x1b4>)
 8005e0a:	f024 ff5f 	bl	802accc <iprintf>
      break;
 8005e0e:	e7db      	b.n	8005dc8 <event_callback+0xa0>
      if (has_errevent) {
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	d144      	bne.n	8005ea0 <event_callback+0x178>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8005e16:	3301      	adds	r3, #1
 8005e18:	4563      	cmp	r3, ip
 8005e1a:	d047      	beq.n	8005eac <event_callback+0x184>
    if (pollfd->fd == fd) {
 8005e1c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8005e20:	428d      	cmp	r5, r1
 8005e22:	d1f8      	bne.n	8005e16 <event_callback+0xee>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	dd04      	ble.n	8005e32 <event_callback+0x10a>
 8005e28:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 8005e2c:	f011 0f01 	tst.w	r1, #1
 8005e30:	d136      	bne.n	8005ea0 <event_callback+0x178>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8005e32:	2f00      	cmp	r7, #0
 8005e34:	d0ec      	beq.n	8005e10 <event_callback+0xe8>
 8005e36:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
 8005e3a:	f011 0f02 	tst.w	r1, #2
 8005e3e:	d0e7      	beq.n	8005e10 <event_callback+0xe8>
 8005e40:	e02e      	b.n	8005ea0 <event_callback+0x178>
        if (has_recvevent) {
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	dd26      	ble.n	8005e94 <event_callback+0x16c>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8005e46:	68a2      	ldr	r2, [r4, #8]
 8005e48:	b322      	cbz	r2, 8005e94 <event_callback+0x16c>
 8005e4a:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
 8005e4e:	ea09 0202 	and.w	r2, r9, r2
        if (has_sendevent) {
 8005e52:	b12f      	cbz	r7, 8005e60 <event_callback+0x138>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8005e54:	b162      	cbz	r2, 8005e70 <event_callback+0x148>
        if (has_errevent) {
 8005e56:	f1b8 0f00 	cmp.w	r8, #0
 8005e5a:	d121      	bne.n	8005ea0 <event_callback+0x178>
 8005e5c:	4653      	mov	r3, sl
 8005e5e:	e01e      	b.n	8005e9e <event_callback+0x176>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8005e60:	1e13      	subs	r3, r2, #0
 8005e62:	bf18      	it	ne
 8005e64:	2301      	movne	r3, #1
        if (has_errevent) {
 8005e66:	f1b8 0f00 	cmp.w	r8, #0
 8005e6a:	d018      	beq.n	8005e9e <event_callback+0x176>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8005e6c:	b9c2      	cbnz	r2, 8005ea0 <event_callback+0x178>
 8005e6e:	e009      	b.n	8005e84 <event_callback+0x15c>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8005e70:	68e3      	ldr	r3, [r4, #12]
 8005e72:	b123      	cbz	r3, 8005e7e <event_callback+0x156>
 8005e74:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005e78:	ea19 0f03 	tst.w	r9, r3
 8005e7c:	d1eb      	bne.n	8005e56 <event_callback+0x12e>
        if (has_errevent) {
 8005e7e:	f1b8 0f00 	cmp.w	r8, #0
 8005e82:	d013      	beq.n	8005eac <event_callback+0x184>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	b18b      	cbz	r3, 8005eac <event_callback+0x184>
 8005e88:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005e8c:	ea19 0f03 	tst.w	r9, r3
 8005e90:	d106      	bne.n	8005ea0 <event_callback+0x178>
 8005e92:	e00b      	b.n	8005eac <event_callback+0x184>
        if (has_sendevent) {
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	d1eb      	bne.n	8005e70 <event_callback+0x148>
        if (has_errevent) {
 8005e98:	f1b8 0f00 	cmp.w	r8, #0
 8005e9c:	d1f2      	bne.n	8005e84 <event_callback+0x15c>
      if (do_signal) {
 8005e9e:	b12b      	cbz	r3, 8005eac <event_callback+0x184>
        scb->sem_signalled = 1;
 8005ea0:	f8c4 a01c 	str.w	sl, [r4, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8005ea4:	f104 0020 	add.w	r0, r4, #32
 8005ea8:	f00a f897 	bl	800ffda <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005eac:	6824      	ldr	r4, [r4, #0]
 8005eae:	2c00      	cmp	r4, #0
 8005eb0:	f43f af72 	beq.w	8005d98 <event_callback+0x70>
    if (scb->sem_signalled == 0) {
 8005eb4:	69e3      	ldr	r3, [r4, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f8      	bne.n	8005eac <event_callback+0x184>
      if (scb->poll_fds != NULL) {
 8005eba:	6962      	ldr	r2, [r4, #20]
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d0c0      	beq.n	8005e42 <event_callback+0x11a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8005ec0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8005ec4:	f1bc 0f00 	cmp.w	ip, #0
 8005ec8:	d0f0      	beq.n	8005eac <event_callback+0x184>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8005eca:	1d10      	adds	r0, r2, #4
 8005ecc:	e7a6      	b.n	8005e1c <event_callback+0xf4>
 8005ece:	4770      	bx	lr
 8005ed0:	2001021c 	.word	0x2001021c
 8005ed4:	0802c4a4 	.word	0x0802c4a4
 8005ed8:	0802c5dc 	.word	0x0802c5dc
 8005edc:	0802bc48 	.word	0x0802bc48

08005ee0 <lwip_close>:
{
 8005ee0:	b538      	push	{r3, r4, r5, lr}
  sock = get_socket(s);
 8005ee2:	f7ff fd25 	bl	8005930 <get_socket>
  if (!sock) {
 8005ee6:	b340      	cbz	r0, 8005f3a <lwip_close+0x5a>
 8005ee8:	4605      	mov	r5, r0
  if (sock->conn != NULL) {
 8005eea:	6803      	ldr	r3, [r0, #0]
 8005eec:	b183      	cbz	r3, 8005f10 <lwip_close+0x30>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8005eee:	781c      	ldrb	r4, [r3, #0]
 8005ef0:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005ef4:	2c10      	cmp	r4, #16
 8005ef6:	bf14      	ite	ne
 8005ef8:	2400      	movne	r4, #0
 8005efa:	2401      	moveq	r4, #1
  err = netconn_prepare_delete(sock->conn);
 8005efc:	6828      	ldr	r0, [r5, #0]
 8005efe:	f7fd ff81 	bl	8003e04 <netconn_prepare_delete>
  if (err != ERR_OK) {
 8005f02:	b990      	cbnz	r0, 8005f2a <lwip_close+0x4a>
  free_socket(sock, is_tcp);
 8005f04:	4621      	mov	r1, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	f7ff fdb2 	bl	8005a70 <free_socket>
  return 0;
 8005f0c:	2000      	movs	r0, #0
}
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8005f10:	6843      	ldr	r3, [r0, #4]
 8005f12:	b143      	cbz	r3, 8005f26 <lwip_close+0x46>
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <lwip_close+0x68>)
 8005f16:	f44f 7245 	mov.w	r2, #788	; 0x314
 8005f1a:	490c      	ldr	r1, [pc, #48]	; (8005f4c <lwip_close+0x6c>)
 8005f1c:	480c      	ldr	r0, [pc, #48]	; (8005f50 <lwip_close+0x70>)
 8005f1e:	f024 fed5 	bl	802accc <iprintf>
  int is_tcp = 0;
 8005f22:	2400      	movs	r4, #0
 8005f24:	e7ea      	b.n	8005efc <lwip_close+0x1c>
 8005f26:	2400      	movs	r4, #0
 8005f28:	e7e8      	b.n	8005efc <lwip_close+0x1c>
    sock_set_errno(sock, err_to_errno(err));
 8005f2a:	f7ff fbd7 	bl	80056dc <err_to_errno>
 8005f2e:	b138      	cbz	r0, 8005f40 <lwip_close+0x60>
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <lwip_close+0x74>)
 8005f32:	6010      	str	r0, [r2, #0]
    return -1;
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e7e9      	b.n	8005f0e <lwip_close+0x2e>
    return -1;
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e7e6      	b.n	8005f0e <lwip_close+0x2e>
    return -1;
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	e7e3      	b.n	8005f0e <lwip_close+0x2e>
 8005f46:	bf00      	nop
 8005f48:	0802c4a4 	.word	0x0802c4a4
 8005f4c:	0802c5ec 	.word	0x0802c5ec
 8005f50:	0802bc48 	.word	0x0802bc48
 8005f54:	20014684 	.word	0x20014684

08005f58 <lwip_connect>:
{
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4615      	mov	r5, r2
  sock = get_socket(s);
 8005f60:	f7ff fce6 	bl	8005930 <get_socket>
  if (!sock) {
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d034      	beq.n	8005fd2 <lwip_connect+0x7a>
 8005f68:	4606      	mov	r6, r0
  if (name->sa_family == AF_UNSPEC) {
 8005f6a:	7863      	ldrb	r3, [r4, #1]
 8005f6c:	b1a3      	cbz	r3, 8005f98 <lwip_connect+0x40>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005f6e:	2d10      	cmp	r5, #16
 8005f70:	d116      	bne.n	8005fa0 <lwip_connect+0x48>
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d114      	bne.n	8005fa0 <lwip_connect+0x48>
 8005f76:	f014 0f03 	tst.w	r4, #3
 8005f7a:	d111      	bne.n	8005fa0 <lwip_connect+0x48>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	8860      	ldrh	r0, [r4, #2]
 8005f82:	f000 fb9d 	bl	80066c0 <lwip_htons>
 8005f86:	4602      	mov	r2, r0
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8005f88:	a901      	add	r1, sp, #4
 8005f8a:	6830      	ldr	r0, [r6, #0]
 8005f8c:	f7fd ff96 	bl	8003ebc <netconn_connect>
  if (err != ERR_OK) {
 8005f90:	b9b8      	cbnz	r0, 8005fc2 <lwip_connect+0x6a>
  return 0;
 8005f92:	2000      	movs	r0, #0
}
 8005f94:	b002      	add	sp, #8
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
    err = netconn_disconnect(sock->conn);
 8005f98:	6800      	ldr	r0, [r0, #0]
 8005f9a:	f7fd ffb7 	bl	8003f0c <netconn_disconnect>
 8005f9e:	e7f7      	b.n	8005f90 <lwip_connect+0x38>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <lwip_connect+0x88>)
 8005fa2:	f240 3247 	movw	r2, #839	; 0x347
 8005fa6:	490f      	ldr	r1, [pc, #60]	; (8005fe4 <lwip_connect+0x8c>)
 8005fa8:	480f      	ldr	r0, [pc, #60]	; (8005fe8 <lwip_connect+0x90>)
 8005faa:	f024 fe8f 	bl	802accc <iprintf>
 8005fae:	f06f 000f 	mvn.w	r0, #15
 8005fb2:	f7ff fb93 	bl	80056dc <err_to_errno>
 8005fb6:	b108      	cbz	r0, 8005fbc <lwip_connect+0x64>
 8005fb8:	4a0c      	ldr	r2, [pc, #48]	; (8005fec <lwip_connect+0x94>)
 8005fba:	6010      	str	r0, [r2, #0]
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e7e8      	b.n	8005f94 <lwip_connect+0x3c>
    sock_set_errno(sock, err_to_errno(err));
 8005fc2:	f7ff fb8b 	bl	80056dc <err_to_errno>
 8005fc6:	b138      	cbz	r0, 8005fd8 <lwip_connect+0x80>
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <lwip_connect+0x94>)
 8005fca:	6010      	str	r0, [r2, #0]
    return -1;
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	e7e0      	b.n	8005f94 <lwip_connect+0x3c>
    return -1;
 8005fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd6:	e7dd      	b.n	8005f94 <lwip_connect+0x3c>
    return -1;
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	e7da      	b.n	8005f94 <lwip_connect+0x3c>
 8005fde:	bf00      	nop
 8005fe0:	0802c4a4 	.word	0x0802c4a4
 8005fe4:	0802c604 	.word	0x0802c604
 8005fe8:	0802bc48 	.word	0x0802bc48
 8005fec:	20014684 	.word	0x20014684

08005ff0 <lwip_recvfrom>:
{
 8005ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	b08d      	sub	sp, #52	; 0x34
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	461e      	mov	r6, r3
 8005ffe:	9f15      	ldr	r7, [sp, #84]	; 0x54
  sock = get_socket(s);
 8006000:	f7ff fc96 	bl	8005930 <get_socket>
  if (!sock) {
 8006004:	2800      	cmp	r0, #0
 8006006:	d052      	beq.n	80060ae <lwip_recvfrom+0xbe>
 8006008:	4680      	mov	r8, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006012:	2b10      	cmp	r3, #16
 8006014:	d026      	beq.n	8006064 <lwip_recvfrom+0x74>
    u16_t datagram_len = 0;
 8006016:	2200      	movs	r2, #0
 8006018:	f8ad 200a 	strh.w	r2, [sp, #10]
    vec.iov_base = mem;
 800601c:	f8cd 900c 	str.w	r9, [sp, #12]
    vec.iov_len = len;
 8006020:	9404      	str	r4, [sp, #16]
    msg.msg_control = NULL;
 8006022:	9209      	str	r2, [sp, #36]	; 0x24
    msg.msg_controllen = 0;
 8006024:	920a      	str	r2, [sp, #40]	; 0x28
    msg.msg_flags = 0;
 8006026:	920b      	str	r2, [sp, #44]	; 0x2c
    msg.msg_iov = &vec;
 8006028:	ab03      	add	r3, sp, #12
 800602a:	9307      	str	r3, [sp, #28]
    msg.msg_iovlen = 1;
 800602c:	2301      	movs	r3, #1
 800602e:	9308      	str	r3, [sp, #32]
    msg.msg_name = from;
 8006030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006032:	9305      	str	r3, [sp, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8006034:	2f00      	cmp	r7, #0
 8006036:	d03d      	beq.n	80060b4 <lwip_recvfrom+0xc4>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	9306      	str	r3, [sp, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800603c:	9500      	str	r5, [sp, #0]
 800603e:	f10d 030a 	add.w	r3, sp, #10
 8006042:	aa05      	add	r2, sp, #20
 8006044:	4631      	mov	r1, r6
 8006046:	f7ff fde3 	bl	8005c10 <lwip_recvfrom_udp_raw>
    if (err != ERR_OK) {
 800604a:	4603      	mov	r3, r0
 800604c:	bb30      	cbnz	r0, 800609c <lwip_recvfrom+0xac>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800604e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8006052:	4284      	cmp	r4, r0
 8006054:	bf28      	it	cs
 8006056:	4604      	movcs	r4, r0
      *fromlen = msg.msg_namelen;
 8006058:	9b06      	ldr	r3, [sp, #24]
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	4620      	mov	r0, r4
 800605e:	b00d      	add	sp, #52	; 0x34
 8006060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8006064:	4633      	mov	r3, r6
 8006066:	4622      	mov	r2, r4
 8006068:	4649      	mov	r1, r9
 800606a:	f7ff fd1b 	bl	8005aa4 <lwip_recv_tcp>
 800606e:	4604      	mov	r4, r0
  if (from && fromlen)
 8006070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f2      	beq.n	800605c <lwip_recvfrom+0x6c>
 8006076:	2f00      	cmp	r7, #0
 8006078:	d0f0      	beq.n	800605c <lwip_recvfrom+0x6c>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800607a:	2300      	movs	r3, #0
 800607c:	aa03      	add	r2, sp, #12
 800607e:	a905      	add	r1, sp, #20
 8006080:	f8d8 0000 	ldr.w	r0, [r8]
 8006084:	f7fd fee0 	bl	8003e48 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8006088:	f8d8 0000 	ldr.w	r0, [r8]
 800608c:	9700      	str	r7, [sp, #0]
 800608e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006090:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006094:	a905      	add	r1, sp, #20
 8006096:	f7ff fc9b 	bl	80059d0 <lwip_sock_make_addr>
 800609a:	e7df      	b.n	800605c <lwip_recvfrom+0x6c>
      sock_set_errno(sock, err_to_errno(err));
 800609c:	4618      	mov	r0, r3
 800609e:	f7ff fb1d 	bl	80056dc <err_to_errno>
 80060a2:	b108      	cbz	r0, 80060a8 <lwip_recvfrom+0xb8>
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <lwip_recvfrom+0xe8>)
 80060a6:	6010      	str	r0, [r2, #0]
      return -1;
 80060a8:	f04f 34ff 	mov.w	r4, #4294967295
 80060ac:	e7d6      	b.n	800605c <lwip_recvfrom+0x6c>
    return -1;
 80060ae:	f04f 34ff 	mov.w	r4, #4294967295
 80060b2:	e7d3      	b.n	800605c <lwip_recvfrom+0x6c>
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80060b4:	2300      	movs	r3, #0
 80060b6:	9306      	str	r3, [sp, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80060b8:	9500      	str	r5, [sp, #0]
 80060ba:	f10d 030a 	add.w	r3, sp, #10
 80060be:	aa05      	add	r2, sp, #20
 80060c0:	4631      	mov	r1, r6
 80060c2:	f7ff fda5 	bl	8005c10 <lwip_recvfrom_udp_raw>
    if (err != ERR_OK) {
 80060c6:	4603      	mov	r3, r0
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d1e7      	bne.n	800609c <lwip_recvfrom+0xac>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80060cc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80060d0:	4284      	cmp	r4, r0
 80060d2:	bf28      	it	cs
 80060d4:	4604      	movcs	r4, r0
    if (fromlen) {
 80060d6:	e7c1      	b.n	800605c <lwip_recvfrom+0x6c>
 80060d8:	20014684 	.word	0x20014684

080060dc <lwip_read>:
{
 80060dc:	b500      	push	{lr}
 80060de:	b083      	sub	sp, #12
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 80060e0:	2300      	movs	r3, #0
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	f7ff ff83 	bl	8005ff0 <lwip_recvfrom>
}
 80060ea:	b003      	add	sp, #12
 80060ec:	f85d fb04 	ldr.w	pc, [sp], #4

080060f0 <lwip_sendto>:
{
 80060f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f4:	b085      	sub	sp, #20
 80060f6:	4680      	mov	r8, r0
 80060f8:	460e      	mov	r6, r1
 80060fa:	4614      	mov	r4, r2
 80060fc:	4699      	mov	r9, r3
 80060fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  sock = get_socket(s);
 8006100:	f7ff fc16 	bl	8005930 <get_socket>
  if (!sock) {
 8006104:	2800      	cmp	r0, #0
 8006106:	d06d      	beq.n	80061e4 <lwip_sendto+0xf4>
 8006108:	4607      	mov	r7, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800610a:	6803      	ldr	r3, [r0, #0]
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006112:	2a10      	cmp	r2, #16
 8006114:	d032      	beq.n	800617c <lwip_sendto+0x8c>
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8006116:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800611a:	d236      	bcs.n	800618a <lwip_sendto+0x9a>
  short_size = (u16_t)size;
 800611c:	fa1f f884 	uxth.w	r8, r4
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006120:	2d00      	cmp	r5, #0
 8006122:	d038      	beq.n	8006196 <lwip_sendto+0xa6>
 8006124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006126:	2b10      	cmp	r3, #16
 8006128:	d13c      	bne.n	80061a4 <lwip_sendto+0xb4>
 800612a:	786b      	ldrb	r3, [r5, #1]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d139      	bne.n	80061a4 <lwip_sendto+0xb4>
 8006130:	f015 0f03 	tst.w	r5, #3
 8006134:	d136      	bne.n	80061a4 <lwip_sendto+0xb4>
  buf.p = buf.ptr = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	9300      	str	r3, [sp, #0]
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800613c:	686b      	ldr	r3, [r5, #4]
 800613e:	9302      	str	r3, [sp, #8]
 8006140:	8868      	ldrh	r0, [r5, #2]
 8006142:	f000 fabd 	bl	80066c0 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 8006146:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 800614a:	4642      	mov	r2, r8
 800614c:	4631      	mov	r1, r6
 800614e:	4668      	mov	r0, sp
 8006150:	f7ff fafa 	bl	8005748 <netbuf_ref>
  if (err == ERR_OK) {
 8006154:	4605      	mov	r5, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	d035      	beq.n	80061c6 <lwip_sendto+0xd6>
  netbuf_free(&buf);
 800615a:	4668      	mov	r0, sp
 800615c:	f7ff fadc 	bl	8005718 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8006160:	4628      	mov	r0, r5
 8006162:	f7ff fabb 	bl	80056dc <err_to_errno>
 8006166:	4603      	mov	r3, r0
 8006168:	2800      	cmp	r0, #0
 800616a:	d044      	beq.n	80061f6 <lwip_sendto+0x106>
 800616c:	4a23      	ldr	r2, [pc, #140]	; (80061fc <lwip_sendto+0x10c>)
 800616e:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 8006170:	2d00      	cmp	r5, #0
 8006172:	d13d      	bne.n	80061f0 <lwip_sendto+0x100>
 8006174:	b2a0      	uxth	r0, r4
}
 8006176:	b005      	add	sp, #20
 8006178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return lwip_send(s, data, size, flags);
 800617c:	464b      	mov	r3, r9
 800617e:	4622      	mov	r2, r4
 8006180:	4631      	mov	r1, r6
 8006182:	4640      	mov	r0, r8
 8006184:	f000 f842 	bl	800620c <lwip_send>
 8006188:	e7f5      	b.n	8006176 <lwip_sendto+0x86>
    sock_set_errno(sock, EMSGSIZE);
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <lwip_sendto+0x10c>)
 800618c:	225a      	movs	r2, #90	; 0x5a
 800618e:	601a      	str	r2, [r3, #0]
    return -1;
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	e7ef      	b.n	8006176 <lwip_sendto+0x86>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006198:	b923      	cbnz	r3, 80061a4 <lwip_sendto+0xb4>
  buf.p = buf.ptr = NULL;
 800619a:	2000      	movs	r0, #0
 800619c:	9001      	str	r0, [sp, #4]
 800619e:	9000      	str	r0, [sp, #0]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80061a0:	9002      	str	r0, [sp, #8]
 80061a2:	e7d0      	b.n	8006146 <lwip_sendto+0x56>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <lwip_sendto+0x110>)
 80061a6:	f240 6252 	movw	r2, #1618	; 0x652
 80061aa:	4916      	ldr	r1, [pc, #88]	; (8006204 <lwip_sendto+0x114>)
 80061ac:	4816      	ldr	r0, [pc, #88]	; (8006208 <lwip_sendto+0x118>)
 80061ae:	f024 fd8d 	bl	802accc <iprintf>
 80061b2:	f06f 000f 	mvn.w	r0, #15
 80061b6:	f7ff fa91 	bl	80056dc <err_to_errno>
 80061ba:	b1b0      	cbz	r0, 80061ea <lwip_sendto+0xfa>
 80061bc:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <lwip_sendto+0x10c>)
 80061be:	6010      	str	r0, [r2, #0]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e7d7      	b.n	8006176 <lwip_sendto+0x86>
    err = netconn_send(sock->conn, &buf);
 80061c6:	4669      	mov	r1, sp
 80061c8:	6838      	ldr	r0, [r7, #0]
 80061ca:	f7fd fedb 	bl	8003f84 <netconn_send>
 80061ce:	4605      	mov	r5, r0
  netbuf_free(&buf);
 80061d0:	4668      	mov	r0, sp
 80061d2:	f7ff faa1 	bl	8005718 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 80061d6:	4628      	mov	r0, r5
 80061d8:	f7ff fa80 	bl	80056dc <err_to_errno>
 80061dc:	4603      	mov	r3, r0
 80061de:	2800      	cmp	r0, #0
 80061e0:	d0c6      	beq.n	8006170 <lwip_sendto+0x80>
 80061e2:	e7c3      	b.n	800616c <lwip_sendto+0x7c>
    return -1;
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	e7c5      	b.n	8006176 <lwip_sendto+0x86>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	e7c2      	b.n	8006176 <lwip_sendto+0x86>
  return (err == ERR_OK ? short_size : -1);
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	e7bf      	b.n	8006176 <lwip_sendto+0x86>
 80061f6:	f04f 30ff 	mov.w	r0, #4294967295
 80061fa:	e7bc      	b.n	8006176 <lwip_sendto+0x86>
 80061fc:	20014684 	.word	0x20014684
 8006200:	0802c4a4 	.word	0x0802c4a4
 8006204:	0802c624 	.word	0x0802c624
 8006208:	0802bc48 	.word	0x0802bc48

0800620c <lwip_send>:
{
 800620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620e:	b085      	sub	sp, #20
 8006210:	4607      	mov	r7, r0
 8006212:	460d      	mov	r5, r1
 8006214:	4616      	mov	r6, r2
 8006216:	461c      	mov	r4, r3
  sock = get_socket(s);
 8006218:	f7ff fb8a 	bl	8005930 <get_socket>
  if (!sock) {
 800621c:	b358      	cbz	r0, 8006276 <lwip_send+0x6a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800621e:	6803      	ldr	r3, [r0, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006226:	2b10      	cmp	r3, #16
 8006228:	d11b      	bne.n	8006262 <lwip_send+0x56>
  write_flags = (u8_t)(NETCONN_COPY |
 800622a:	f014 0f10 	tst.w	r4, #16
 800622e:	bf14      	ite	ne
 8006230:	2303      	movne	r3, #3
 8006232:	2301      	moveq	r3, #1
  written = 0;
 8006234:	2100      	movs	r1, #0
 8006236:	9103      	str	r1, [sp, #12]
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8006238:	1064      	asrs	r4, r4, #1
 800623a:	f004 0404 	and.w	r4, r4, #4
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	aa03      	add	r2, sp, #12
 8006242:	9200      	str	r2, [sp, #0]
 8006244:	4323      	orrs	r3, r4
 8006246:	4632      	mov	r2, r6
 8006248:	4629      	mov	r1, r5
 800624a:	f7fd ff57 	bl	80040fc <netconn_write_partly>
 800624e:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 8006250:	f7ff fa44 	bl	80056dc <err_to_errno>
 8006254:	b108      	cbz	r0, 800625a <lwip_send+0x4e>
 8006256:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <lwip_send+0x78>)
 8006258:	6010      	str	r0, [r2, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 800625a:	b97c      	cbnz	r4, 800627c <lwip_send+0x70>
 800625c:	9803      	ldr	r0, [sp, #12]
}
 800625e:	b005      	add	sp, #20
 8006260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8006262:	2300      	movs	r3, #0
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4623      	mov	r3, r4
 800626a:	4632      	mov	r2, r6
 800626c:	4629      	mov	r1, r5
 800626e:	4638      	mov	r0, r7
 8006270:	f7ff ff3e 	bl	80060f0 <lwip_sendto>
 8006274:	e7f3      	b.n	800625e <lwip_send+0x52>
    return -1;
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	e7f0      	b.n	800625e <lwip_send+0x52>
  return (err == ERR_OK ? (ssize_t)written : -1);
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e7ed      	b.n	800625e <lwip_send+0x52>
 8006282:	bf00      	nop
 8006284:	20014684 	.word	0x20014684

08006288 <lwip_socket>:
{
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4613      	mov	r3, r2
  switch (type) {
 800628c:	2902      	cmp	r1, #2
 800628e:	d01c      	beq.n	80062ca <lwip_socket+0x42>
 8006290:	2903      	cmp	r1, #3
 8006292:	d007      	beq.n	80062a4 <lwip_socket+0x1c>
 8006294:	2901      	cmp	r1, #1
 8006296:	d023      	beq.n	80062e0 <lwip_socket+0x58>
      set_errno(EINVAL);
 8006298:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <lwip_socket+0x80>)
 800629a:	2216      	movs	r2, #22
 800629c:	601a      	str	r2, [r3, #0]
      return -1;
 800629e:	f04f 34ff 	mov.w	r4, #4294967295
 80062a2:	e010      	b.n	80062c6 <lwip_socket+0x3e>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 80062a4:	4a19      	ldr	r2, [pc, #100]	; (800630c <lwip_socket+0x84>)
 80062a6:	b2d9      	uxtb	r1, r3
 80062a8:	2040      	movs	r0, #64	; 0x40
 80062aa:	f7fd fd4f 	bl	8003d4c <netconn_new_with_proto_and_callback>
 80062ae:	4605      	mov	r5, r0
  if (!conn) {
 80062b0:	b1ed      	cbz	r5, 80062ee <lwip_socket+0x66>
  i = alloc_socket(conn, 0);
 80062b2:	2100      	movs	r1, #0
 80062b4:	4628      	mov	r0, r5
 80062b6:	f7ff fb47 	bl	8005948 <alloc_socket>
 80062ba:	4604      	mov	r4, r0
  if (i == -1) {
 80062bc:	f1b0 3fff 	cmp.w	r0, #4294967295
  conn->socket = i;
 80062c0:	bf18      	it	ne
 80062c2:	61a8      	strne	r0, [r5, #24]
  if (i == -1) {
 80062c4:	d019      	beq.n	80062fa <lwip_socket+0x72>
}
 80062c6:	4620      	mov	r0, r4
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80062ca:	2a88      	cmp	r2, #136	; 0x88
 80062cc:	4a0f      	ldr	r2, [pc, #60]	; (800630c <lwip_socket+0x84>)
 80062ce:	f04f 0100 	mov.w	r1, #0
 80062d2:	bf0c      	ite	eq
 80062d4:	2021      	moveq	r0, #33	; 0x21
 80062d6:	2020      	movne	r0, #32
 80062d8:	f7fd fd38 	bl	8003d4c <netconn_new_with_proto_and_callback>
 80062dc:	4605      	mov	r5, r0
      break;
 80062de:	e7e7      	b.n	80062b0 <lwip_socket+0x28>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80062e0:	4a0a      	ldr	r2, [pc, #40]	; (800630c <lwip_socket+0x84>)
 80062e2:	2100      	movs	r1, #0
 80062e4:	2010      	movs	r0, #16
 80062e6:	f7fd fd31 	bl	8003d4c <netconn_new_with_proto_and_callback>
 80062ea:	4605      	mov	r5, r0
      break;
 80062ec:	e7e0      	b.n	80062b0 <lwip_socket+0x28>
    set_errno(ENOBUFS);
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <lwip_socket+0x80>)
 80062f0:	2269      	movs	r2, #105	; 0x69
 80062f2:	601a      	str	r2, [r3, #0]
    return -1;
 80062f4:	f04f 34ff 	mov.w	r4, #4294967295
 80062f8:	e7e5      	b.n	80062c6 <lwip_socket+0x3e>
    netconn_delete(conn);
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7fd fd94 	bl	8003e28 <netconn_delete>
    set_errno(ENFILE);
 8006300:	4b01      	ldr	r3, [pc, #4]	; (8006308 <lwip_socket+0x80>)
 8006302:	2217      	movs	r2, #23
 8006304:	601a      	str	r2, [r3, #0]
    return -1;
 8006306:	e7de      	b.n	80062c6 <lwip_socket+0x3e>
 8006308:	20014684 	.word	0x20014684
 800630c:	08005d29 	.word	0x08005d29

08006310 <lwip_write>:
{
 8006310:	b508      	push	{r3, lr}
  return lwip_send(s, data, size, 0);
 8006312:	2300      	movs	r3, #0
 8006314:	f7ff ff7a 	bl	800620c <lwip_send>
}
 8006318:	bd08      	pop	{r3, pc}
	...

0800631c <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
 800631c:	b510      	push	{r4, lr}
 800631e:	460c      	mov	r4, r1
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
 8006320:	f7ff fb06 	bl	8005930 <get_socket>
  if (!sock) {
 8006324:	b390      	cbz	r0, 800638c <lwip_shutdown+0x70>
    return -1;
  }

  if (sock->conn != NULL) {
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	b1f0      	cbz	r0, 8006368 <lwip_shutdown+0x4c>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800632a:	7803      	ldrb	r3, [r0, #0]
 800632c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006330:	2b10      	cmp	r3, #16
 8006332:	d113      	bne.n	800635c <lwip_shutdown+0x40>
    sock_set_errno(sock, ENOTCONN);
    done_socket(sock);
    return -1;
  }

  if (how == SHUT_RD) {
 8006334:	b324      	cbz	r4, 8006380 <lwip_shutdown+0x64>
    shut_rx = 1;
  } else if (how == SHUT_WR) {
 8006336:	2c01      	cmp	r4, #1
 8006338:	d025      	beq.n	8006386 <lwip_shutdown+0x6a>
    shut_tx = 1;
  } else if (how == SHUT_RDWR) {
 800633a:	2c02      	cmp	r4, #2
 800633c:	d11a      	bne.n	8006374 <lwip_shutdown+0x58>
    shut_rx = 1;
    shut_tx = 1;
 800633e:	2201      	movs	r2, #1
    shut_rx = 1;
 8006340:	4611      	mov	r1, r2
  } else {
    sock_set_errno(sock, EINVAL);
    done_socket(sock);
    return -1;
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
 8006342:	f7fe f813 	bl	800436c <netconn_shutdown>
 8006346:	4604      	mov	r4, r0

  sock_set_errno(sock, err_to_errno(err));
 8006348:	f7ff f9c8 	bl	80056dc <err_to_errno>
 800634c:	b108      	cbz	r0, 8006352 <lwip_shutdown+0x36>
 800634e:	4a11      	ldr	r2, [pc, #68]	; (8006394 <lwip_shutdown+0x78>)
 8006350:	6010      	str	r0, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? 0 : -1);
 8006352:	1e20      	subs	r0, r4, #0
 8006354:	bf18      	it	ne
 8006356:	2001      	movne	r0, #1
 8006358:	4240      	negs	r0, r0
}
 800635a:	bd10      	pop	{r4, pc}
      sock_set_errno(sock, EOPNOTSUPP);
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <lwip_shutdown+0x78>)
 800635e:	225f      	movs	r2, #95	; 0x5f
 8006360:	601a      	str	r2, [r3, #0]
      return -1;
 8006362:	f04f 30ff 	mov.w	r0, #4294967295
 8006366:	e7f8      	b.n	800635a <lwip_shutdown+0x3e>
    sock_set_errno(sock, ENOTCONN);
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <lwip_shutdown+0x78>)
 800636a:	226b      	movs	r2, #107	; 0x6b
 800636c:	601a      	str	r2, [r3, #0]
    return -1;
 800636e:	f04f 30ff 	mov.w	r0, #4294967295
 8006372:	e7f2      	b.n	800635a <lwip_shutdown+0x3e>
    sock_set_errno(sock, EINVAL);
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <lwip_shutdown+0x78>)
 8006376:	2216      	movs	r2, #22
 8006378:	601a      	str	r2, [r3, #0]
    return -1;
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
 800637e:	e7ec      	b.n	800635a <lwip_shutdown+0x3e>
  u8_t shut_rx = 0, shut_tx = 0;
 8006380:	2200      	movs	r2, #0
    shut_rx = 1;
 8006382:	2101      	movs	r1, #1
 8006384:	e7dd      	b.n	8006342 <lwip_shutdown+0x26>
    shut_tx = 1;
 8006386:	2201      	movs	r2, #1
  u8_t shut_rx = 0, shut_tx = 0;
 8006388:	2100      	movs	r1, #0
 800638a:	e7da      	b.n	8006342 <lwip_shutdown+0x26>
    return -1;
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	e7e3      	b.n	800635a <lwip_shutdown+0x3e>
 8006392:	bf00      	nop
 8006394:	20014684 	.word	0x20014684

08006398 <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	460c      	mov	r4, r1
 800639c:	4615      	mov	r5, r2
  struct lwip_sock *sock = get_socket(s);
 800639e:	f7ff fac7 	bl	8005930 <get_socket>
  int ret = -1;
  int op_mode = 0;

  if (!sock) {
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d04c      	beq.n	8006440 <lwip_fcntl+0xa8>
 80063a6:	4606      	mov	r6, r0
    return -1;
  }

  switch (cmd) {
 80063a8:	2c03      	cmp	r4, #3
 80063aa:	d007      	beq.n	80063bc <lwip_fcntl+0x24>
 80063ac:	2c04      	cmp	r4, #4
 80063ae:	d02a      	beq.n	8006406 <lwip_fcntl+0x6e>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <lwip_fcntl+0xb0>)
 80063b2:	2226      	movs	r2, #38	; 0x26
 80063b4:	601a      	str	r2, [r3, #0]
  int ret = -1;
 80063b6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ba:	e00c      	b.n	80063d6 <lwip_fcntl+0x3e>
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 80063bc:	6803      	ldr	r3, [r0, #0]
 80063be:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80063c2:	f3c0 0540 	ubfx	r5, r0, #1, #1
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d003      	beq.n	80063d8 <lwip_fcntl+0x40>
        op_mode |= O_RDWR;
 80063d0:	2406      	movs	r4, #6
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 80063d2:	ea44 0005 	orr.w	r0, r4, r5
      break;
  }
  done_socket(sock);
  return ret;
}
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
        LOCK_TCPIP_CORE();
 80063d8:	481c      	ldr	r0, [pc, #112]	; (800644c <lwip_fcntl+0xb4>)
 80063da:	f009 fe2d 	bl	8010038 <sys_mutex_lock>
        if (sock->conn->pcb.tcp) {
 80063de:	6833      	ldr	r3, [r6, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b173      	cbz	r3, 8006402 <lwip_fcntl+0x6a>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 80063e4:	8b5b      	ldrh	r3, [r3, #26]
            op_mode |= O_RDONLY;
 80063e6:	f013 0f10 	tst.w	r3, #16
 80063ea:	bf14      	ite	ne
 80063ec:	2400      	movne	r4, #0
 80063ee:	2402      	moveq	r4, #2
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 80063f0:	f013 0f20 	tst.w	r3, #32
 80063f4:	d101      	bne.n	80063fa <lwip_fcntl+0x62>
            op_mode |= O_WRONLY;
 80063f6:	f044 0404 	orr.w	r4, r4, #4
        UNLOCK_TCPIP_CORE();
 80063fa:	4814      	ldr	r0, [pc, #80]	; (800644c <lwip_fcntl+0xb4>)
 80063fc:	f009 fe23 	bl	8010046 <sys_mutex_unlock>
 8006400:	e7e7      	b.n	80063d2 <lwip_fcntl+0x3a>
  int op_mode = 0;
 8006402:	2400      	movs	r4, #0
 8006404:	e7f9      	b.n	80063fa <lwip_fcntl+0x62>
      if ((val & ~O_NONBLOCK) == 0) {
 8006406:	f035 0007 	bics.w	r0, r5, #7
 800640a:	d113      	bne.n	8006434 <lwip_fcntl+0x9c>
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 800640c:	f015 0501 	ands.w	r5, r5, #1
 8006410:	d007      	beq.n	8006422 <lwip_fcntl+0x8a>
 8006412:	6832      	ldr	r2, [r6, #0]
 8006414:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006420:	e7d9      	b.n	80063d6 <lwip_fcntl+0x3e>
 8006422:	6832      	ldr	r2, [r6, #0]
 8006424:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006428:	f023 0302 	bic.w	r3, r3, #2
 800642c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        ret = 0;
 8006430:	4628      	mov	r0, r5
 8006432:	e7d0      	b.n	80063d6 <lwip_fcntl+0x3e>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <lwip_fcntl+0xb0>)
 8006436:	2226      	movs	r2, #38	; 0x26
 8006438:	601a      	str	r2, [r3, #0]
  int ret = -1;
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e7ca      	b.n	80063d6 <lwip_fcntl+0x3e>
    return -1;
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e7c7      	b.n	80063d6 <lwip_fcntl+0x3e>
 8006446:	bf00      	nop
 8006448:	20014684 	.word	0x20014684
 800644c:	20010d94 	.word	0x20010d94

08006450 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006450:	b500      	push	{lr}
 8006452:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006454:	4831      	ldr	r0, [pc, #196]	; (800651c <tcpip_thread+0xcc>)
 8006456:	f009 fdef 	bl	8010038 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800645a:	4b31      	ldr	r3, [pc, #196]	; (8006520 <tcpip_thread+0xd0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	b113      	cbz	r3, 8006466 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8006460:	4a30      	ldr	r2, [pc, #192]	; (8006524 <tcpip_thread+0xd4>)
 8006462:	6810      	ldr	r0, [r2, #0]
 8006464:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006466:	4e30      	ldr	r6, [pc, #192]	; (8006528 <tcpip_thread+0xd8>)
  UNLOCK_TCPIP_CORE();
 8006468:	4d2c      	ldr	r5, [pc, #176]	; (800651c <tcpip_thread+0xcc>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 800646a:	e01e      	b.n	80064aa <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 800646c:	4628      	mov	r0, r5
 800646e:	f009 fdea 	bl	8010046 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006472:	2200      	movs	r2, #0
 8006474:	a901      	add	r1, sp, #4
 8006476:	4630      	mov	r0, r6
 8006478:	f009 fd36 	bl	800fee8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800647c:	4628      	mov	r0, r5
 800647e:	f009 fddb 	bl	8010038 <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 8006482:	9c01      	ldr	r4, [sp, #4]
 8006484:	b34c      	cbz	r4, 80064da <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 8006486:	7823      	ldrb	r3, [r4, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d03b      	beq.n	8006504 <tcpip_thread+0xb4>
 800648c:	2b02      	cmp	r3, #2
 800648e:	d041      	beq.n	8006514 <tcpip_thread+0xc4>
 8006490:	b353      	cbz	r3, 80064e8 <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <tcpip_thread+0xdc>)
 8006494:	22cf      	movs	r2, #207	; 0xcf
 8006496:	4926      	ldr	r1, [pc, #152]	; (8006530 <tcpip_thread+0xe0>)
 8006498:	4826      	ldr	r0, [pc, #152]	; (8006534 <tcpip_thread+0xe4>)
 800649a:	f024 fc17 	bl	802accc <iprintf>
      break;
 800649e:	e004      	b.n	80064aa <tcpip_thread+0x5a>
    sys_check_timeouts();
 80064a0:	f006 f916 	bl	800c6d0 <sys_check_timeouts>
    goto again;
 80064a4:	e001      	b.n	80064aa <tcpip_thread+0x5a>
    sys_check_timeouts();
 80064a6:	f006 f913 	bl	800c6d0 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80064aa:	f006 f935 	bl	800c718 <sys_timeouts_sleeptime>
 80064ae:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80064b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064b4:	d0da      	beq.n	800646c <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d0f2      	beq.n	80064a0 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 80064ba:	4628      	mov	r0, r5
 80064bc:	f009 fdc3 	bl	8010046 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80064c0:	4622      	mov	r2, r4
 80064c2:	a901      	add	r1, sp, #4
 80064c4:	4630      	mov	r0, r6
 80064c6:	f009 fd0f 	bl	800fee8 <sys_arch_mbox_fetch>
 80064ca:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80064cc:	4628      	mov	r0, r5
 80064ce:	f009 fdb3 	bl	8010038 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80064d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80064d6:	d0e6      	beq.n	80064a6 <tcpip_thread+0x56>
 80064d8:	e7d3      	b.n	8006482 <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80064da:	4b14      	ldr	r3, [pc, #80]	; (800652c <tcpip_thread+0xdc>)
 80064dc:	2291      	movs	r2, #145	; 0x91
 80064de:	4914      	ldr	r1, [pc, #80]	; (8006530 <tcpip_thread+0xe0>)
 80064e0:	4814      	ldr	r0, [pc, #80]	; (8006534 <tcpip_thread+0xe4>)
 80064e2:	f024 fbf3 	bl	802accc <iprintf>
      continue;
 80064e6:	e7e0      	b.n	80064aa <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80064e8:	68e3      	ldr	r3, [r4, #12]
 80064ea:	68a1      	ldr	r1, [r4, #8]
 80064ec:	6860      	ldr	r0, [r4, #4]
 80064ee:	4798      	blx	r3
 80064f0:	b920      	cbnz	r0, 80064fc <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80064f2:	4621      	mov	r1, r4
 80064f4:	2009      	movs	r0, #9
 80064f6:	f001 f96d 	bl	80077d4 <memp_free>
      break;
 80064fa:	e7d6      	b.n	80064aa <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 80064fc:	6860      	ldr	r0, [r4, #4]
 80064fe:	f001 fc3d 	bl	8007d7c <pbuf_free>
 8006502:	e7f6      	b.n	80064f2 <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	68a0      	ldr	r0, [r4, #8]
 8006508:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800650a:	4621      	mov	r1, r4
 800650c:	2008      	movs	r0, #8
 800650e:	f001 f961 	bl	80077d4 <memp_free>
      break;
 8006512:	e7ca      	b.n	80064aa <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	68a0      	ldr	r0, [r4, #8]
 8006518:	4798      	blx	r3
      break;
 800651a:	e7c6      	b.n	80064aa <tcpip_thread+0x5a>
 800651c:	20010d94 	.word	0x20010d94
 8006520:	20010260 	.word	0x20010260
 8006524:	20010264 	.word	0x20010264
 8006528:	20010268 	.word	0x20010268
 800652c:	0802c644 	.word	0x0802c644
 8006530:	0802c674 	.word	0x0802c674
 8006534:	0802bc48 	.word	0x0802bc48

08006538 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	4607      	mov	r7, r0
 800653c:	460e      	mov	r6, r1
 800653e:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006540:	4812      	ldr	r0, [pc, #72]	; (800658c <tcpip_inpkt+0x54>)
 8006542:	f009 fd0a 	bl	800ff5a <sys_mbox_valid>
 8006546:	b178      	cbz	r0, 8006568 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006548:	2009      	movs	r0, #9
 800654a:	f001 f929 	bl	80077a0 <memp_malloc>
  if (msg == NULL) {
 800654e:	4604      	mov	r4, r0
 8006550:	b1c0      	cbz	r0, 8006584 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006552:	2300      	movs	r3, #0
 8006554:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8006556:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8006558:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800655a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800655c:	4601      	mov	r1, r0
 800655e:	480b      	ldr	r0, [pc, #44]	; (800658c <tcpip_inpkt+0x54>)
 8006560:	f009 fcb8 	bl	800fed4 <sys_mbox_trypost>
 8006564:	b938      	cbnz	r0, 8006576 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <tcpip_inpkt+0x58>)
 800656a:	22fc      	movs	r2, #252	; 0xfc
 800656c:	4909      	ldr	r1, [pc, #36]	; (8006594 <tcpip_inpkt+0x5c>)
 800656e:	480a      	ldr	r0, [pc, #40]	; (8006598 <tcpip_inpkt+0x60>)
 8006570:	f024 fbac 	bl	802accc <iprintf>
 8006574:	e7e8      	b.n	8006548 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006576:	4621      	mov	r1, r4
 8006578:	2009      	movs	r0, #9
 800657a:	f001 f92b 	bl	80077d4 <memp_free>
    return ERR_MEM;
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e7f0      	b.n	8006566 <tcpip_inpkt+0x2e>
    return ERR_MEM;
 8006584:	f04f 30ff 	mov.w	r0, #4294967295
 8006588:	e7ed      	b.n	8006566 <tcpip_inpkt+0x2e>
 800658a:	bf00      	nop
 800658c:	20010268 	.word	0x20010268
 8006590:	0802c644 	.word	0x0802c644
 8006594:	0802c694 	.word	0x0802c694
 8006598:	0802bc48 	.word	0x0802bc48

0800659c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800659c:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800659e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80065a2:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80065a6:	bf14      	ite	ne
 80065a8:	4a02      	ldrne	r2, [pc, #8]	; (80065b4 <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80065aa:	4a03      	ldreq	r2, [pc, #12]	; (80065b8 <tcpip_input+0x1c>)
 80065ac:	f7ff ffc4 	bl	8006538 <tcpip_inpkt>
}
 80065b0:	bd08      	pop	{r3, pc}
 80065b2:	bf00      	nop
 80065b4:	0800fd85 	.word	0x0800fd85
 80065b8:	0800f01d 	.word	0x0800f01d

080065bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	4606      	mov	r6, r0
 80065c0:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80065c2:	4812      	ldr	r0, [pc, #72]	; (800660c <tcpip_try_callback+0x50>)
 80065c4:	f009 fcc9 	bl	800ff5a <sys_mbox_valid>
 80065c8:	b170      	cbz	r0, 80065e8 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80065ca:	2008      	movs	r0, #8
 80065cc:	f001 f8e8 	bl	80077a0 <memp_malloc>
  if (msg == NULL) {
 80065d0:	4604      	mov	r4, r0
 80065d2:	b1c0      	cbz	r0, 8006606 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80065d4:	2301      	movs	r3, #1
 80065d6:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80065d8:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80065da:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80065dc:	4601      	mov	r1, r0
 80065de:	480b      	ldr	r0, [pc, #44]	; (800660c <tcpip_try_callback+0x50>)
 80065e0:	f009 fc78 	bl	800fed4 <sys_mbox_trypost>
 80065e4:	b940      	cbnz	r0, 80065f8 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <tcpip_try_callback+0x54>)
 80065ea:	f240 125d 	movw	r2, #349	; 0x15d
 80065ee:	4909      	ldr	r1, [pc, #36]	; (8006614 <tcpip_try_callback+0x58>)
 80065f0:	4809      	ldr	r0, [pc, #36]	; (8006618 <tcpip_try_callback+0x5c>)
 80065f2:	f024 fb6b 	bl	802accc <iprintf>
 80065f6:	e7e8      	b.n	80065ca <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80065f8:	4621      	mov	r1, r4
 80065fa:	2008      	movs	r0, #8
 80065fc:	f001 f8ea 	bl	80077d4 <memp_free>
    return ERR_MEM;
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e7ef      	b.n	80065e6 <tcpip_try_callback+0x2a>
    return ERR_MEM;
 8006606:	f04f 30ff 	mov.w	r0, #4294967295
 800660a:	e7ec      	b.n	80065e6 <tcpip_try_callback+0x2a>
 800660c:	20010268 	.word	0x20010268
 8006610:	0802c644 	.word	0x0802c644
 8006614:	0802c694 	.word	0x0802c694
 8006618:	0802bc48 	.word	0x0802bc48

0800661c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4604      	mov	r4, r0
 8006620:	460d      	mov	r5, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8006622:	4e05      	ldr	r6, [pc, #20]	; (8006638 <tcpip_send_msg_wait_sem+0x1c>)
 8006624:	4630      	mov	r0, r6
 8006626:	f009 fd07 	bl	8010038 <sys_mutex_lock>
  fn(apimsg);
 800662a:	4628      	mov	r0, r5
 800662c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800662e:	4630      	mov	r0, r6
 8006630:	f009 fd09 	bl	8010046 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006634:	2000      	movs	r0, #0
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	20010d94 	.word	0x20010d94

0800663c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800663c:	b530      	push	{r4, r5, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	4605      	mov	r5, r0
 8006642:	460c      	mov	r4, r1
  lwip_init();
 8006644:	f000 fd84 	bl	8007150 <lwip_init>

  tcpip_init_done = initfunc;
 8006648:	4b13      	ldr	r3, [pc, #76]	; (8006698 <tcpip_init+0x5c>)
 800664a:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800664c:	4b13      	ldr	r3, [pc, #76]	; (800669c <tcpip_init+0x60>)
 800664e:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006650:	2106      	movs	r1, #6
 8006652:	4813      	ldr	r0, [pc, #76]	; (80066a0 <tcpip_init+0x64>)
 8006654:	f009 fc22 	bl	800fe9c <sys_mbox_new>
 8006658:	b968      	cbnz	r0, 8006676 <tcpip_init+0x3a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800665a:	4812      	ldr	r0, [pc, #72]	; (80066a4 <tcpip_init+0x68>)
 800665c:	f009 fcdc 	bl	8010018 <sys_mutex_new>
 8006660:	b988      	cbnz	r0, 8006686 <tcpip_init+0x4a>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006662:	2200      	movs	r2, #0
 8006664:	9200      	str	r2, [sp, #0]
 8006666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666a:	490f      	ldr	r1, [pc, #60]	; (80066a8 <tcpip_init+0x6c>)
 800666c:	480f      	ldr	r0, [pc, #60]	; (80066ac <tcpip_init+0x70>)
 800666e:	f009 fcef 	bl	8010050 <sys_thread_new>
}
 8006672:	b003      	add	sp, #12
 8006674:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <tcpip_init+0x74>)
 8006678:	f240 2261 	movw	r2, #609	; 0x261
 800667c:	490d      	ldr	r1, [pc, #52]	; (80066b4 <tcpip_init+0x78>)
 800667e:	480e      	ldr	r0, [pc, #56]	; (80066b8 <tcpip_init+0x7c>)
 8006680:	f024 fb24 	bl	802accc <iprintf>
 8006684:	e7e9      	b.n	800665a <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <tcpip_init+0x74>)
 8006688:	f240 2265 	movw	r2, #613	; 0x265
 800668c:	490b      	ldr	r1, [pc, #44]	; (80066bc <tcpip_init+0x80>)
 800668e:	480a      	ldr	r0, [pc, #40]	; (80066b8 <tcpip_init+0x7c>)
 8006690:	f024 fb1c 	bl	802accc <iprintf>
 8006694:	e7e5      	b.n	8006662 <tcpip_init+0x26>
 8006696:	bf00      	nop
 8006698:	20010260 	.word	0x20010260
 800669c:	20010264 	.word	0x20010264
 80066a0:	20010268 	.word	0x20010268
 80066a4:	20010d94 	.word	0x20010d94
 80066a8:	08006451 	.word	0x08006451
 80066ac:	0802c6ec 	.word	0x0802c6ec
 80066b0:	0802c644 	.word	0x0802c644
 80066b4:	0802c6a4 	.word	0x0802c6a4
 80066b8:	0802bc48 	.word	0x0802bc48
 80066bc:	0802c6c8 	.word	0x0802c6c8

080066c0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80066c0:	0a03      	lsrs	r3, r0, #8
 80066c2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80066c6:	b280      	uxth	r0, r0
 80066c8:	4770      	bx	lr

080066ca <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80066ca:	0e03      	lsrs	r3, r0, #24
 80066cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80066d0:	0202      	lsls	r2, r0, #8
 80066d2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80066d6:	4313      	orrs	r3, r2
 80066d8:	0a00      	lsrs	r0, r0, #8
 80066da:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 80066de:	4318      	orrs	r0, r3
 80066e0:	4770      	bx	lr

080066e2 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80066e2:	b4f0      	push	{r4, r5, r6, r7}
 80066e4:	4605      	mov	r5, r0
 80066e6:	e003      	b.n	80066f0 <lwip_strnicmp+0xe>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80066e8:	1b53      	subs	r3, r2, r5
 80066ea:	42d8      	cmn	r0, r3
 80066ec:	d017      	beq.n	800671e <lwip_strnicmp+0x3c>
 80066ee:	b194      	cbz	r4, 8006716 <lwip_strnicmp+0x34>
    c1 = *str1++;
 80066f0:	f815 4b01 	ldrb.w	r4, [r5], #1
    c2 = *str2++;
 80066f4:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d0f5      	beq.n	80066e8 <lwip_strnicmp+0x6>
      char c1_upc = c1 | 0x20;
 80066fc:	f044 0720 	orr.w	r7, r4, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006700:	f1a7 0661 	sub.w	r6, r7, #97	; 0x61
 8006704:	b2f6      	uxtb	r6, r6
 8006706:	2e19      	cmp	r6, #25
 8006708:	d807      	bhi.n	800671a <lwip_strnicmp+0x38>
        if (c1_upc != c2_upc) {
 800670a:	f043 0320 	orr.w	r3, r3, #32
 800670e:	429f      	cmp	r7, r3
 8006710:	d0ea      	beq.n	80066e8 <lwip_strnicmp+0x6>
          return 1;
 8006712:	2001      	movs	r0, #1
 8006714:	e004      	b.n	8006720 <lwip_strnicmp+0x3e>
  return 0;
 8006716:	2000      	movs	r0, #0
 8006718:	e002      	b.n	8006720 <lwip_strnicmp+0x3e>
        return 1;
 800671a:	2001      	movs	r0, #1
 800671c:	e000      	b.n	8006720 <lwip_strnicmp+0x3e>
  return 0;
 800671e:	2000      	movs	r0, #0
}
 8006720:	bcf0      	pop	{r4, r5, r6, r7}
 8006722:	4770      	bx	lr

08006724 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8006724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	4605      	mov	r5, r0
 800672a:	468a      	mov	sl, r1
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800672c:	4681      	mov	r9, r0
 800672e:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8006732:	4e2c      	ldr	r6, [pc, #176]	; (80067e4 <dns_call_found+0xc0>)
 8006734:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 8006738:	3610      	adds	r6, #16
 800673a:	4c2b      	ldr	r4, [pc, #172]	; (80067e8 <dns_call_found+0xc4>)
 800673c:	f104 0830 	add.w	r8, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006740:	f04f 0b00 	mov.w	fp, #0
 8006744:	e002      	b.n	800674c <dns_call_found+0x28>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006746:	340c      	adds	r4, #12
 8006748:	4544      	cmp	r4, r8
 800674a:	d00c      	beq.n	8006766 <dns_call_found+0x42>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f9      	beq.n	8006746 <dns_call_found+0x22>
 8006752:	7a22      	ldrb	r2, [r4, #8]
 8006754:	42aa      	cmp	r2, r5
 8006756:	d1f6      	bne.n	8006746 <dns_call_found+0x22>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006758:	6862      	ldr	r2, [r4, #4]
 800675a:	4651      	mov	r1, sl
 800675c:	4630      	mov	r0, r6
 800675e:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8006760:	f8c4 b000 	str.w	fp, [r4]
 8006764:	e7ef      	b.n	8006746 <dns_call_found+0x22>
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <dns_call_found+0xc0>)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006768:	2300      	movs	r3, #0
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800676a:	eb09 1909 	add.w	r9, r9, r9, lsl #4
 800676e:	eb02 1909 	add.w	r9, r2, r9, lsl #4
 8006772:	e004      	b.n	800677e <dns_call_found+0x5a>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006774:	3301      	adds	r3, #1
 8006776:	f502 7288 	add.w	r2, r2, #272	; 0x110
 800677a:	2b04      	cmp	r3, #4
 800677c:	d012      	beq.n	80067a4 <dns_call_found+0x80>
    if (i == idx) {
 800677e:	b2d9      	uxtb	r1, r3
 8006780:	428d      	cmp	r5, r1
 8006782:	d0f7      	beq.n	8006774 <dns_call_found+0x50>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006784:	7a91      	ldrb	r1, [r2, #10]
 8006786:	2902      	cmp	r1, #2
 8006788:	d1f4      	bne.n	8006774 <dns_call_found+0x50>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800678a:	7bd0      	ldrb	r0, [r2, #15]
 800678c:	f899 100f 	ldrb.w	r1, [r9, #15]
 8006790:	4288      	cmp	r0, r1
 8006792:	d1ef      	bne.n	8006774 <dns_call_found+0x50>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006794:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <dns_call_found+0xc0>)
 800679a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800679e:	2204      	movs	r2, #4
 80067a0:	73da      	strb	r2, [r3, #15]
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80067a2:	e007      	b.n	80067b4 <dns_call_found+0x90>
 80067a4:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 80067a8:	4a0e      	ldr	r2, [pc, #56]	; (80067e4 <dns_call_found+0xc0>)
 80067aa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80067ae:	7bdb      	ldrb	r3, [r3, #15]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d901      	bls.n	80067b8 <dns_call_found+0x94>
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  }
#endif
}
 80067b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80067b8:	4c0c      	ldr	r4, [pc, #48]	; (80067ec <dns_call_found+0xc8>)
 80067ba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80067be:	f006 fb3b 	bl	800ce38 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <dns_call_found+0xc0>)
 80067c4:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 80067c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80067cc:	7bd2      	ldrb	r2, [r2, #15]
 80067ce:	2100      	movs	r1, #0
 80067d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80067d4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80067d8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80067dc:	2304      	movs	r3, #4
 80067de:	73eb      	strb	r3, [r5, #15]
}
 80067e0:	e7e8      	b.n	80067b4 <dns_call_found+0x90>
 80067e2:	bf00      	nop
 80067e4:	200102bc 	.word	0x200102bc
 80067e8:	20010280 	.word	0x20010280
 80067ec:	20010270 	.word	0x20010270

080067f0 <dns_send>:
{
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	b085      	sub	sp, #20
 80067f6:	4682      	mov	sl, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80067f8:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 80067fc:	4b5b      	ldr	r3, [pc, #364]	; (800696c <dns_send+0x17c>)
 80067fe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006802:	7adb      	ldrb	r3, [r3, #11]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d83e      	bhi.n	8006886 <dns_send+0x96>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006808:	eb0a 130a 	add.w	r3, sl, sl, lsl #4
 800680c:	4a57      	ldr	r2, [pc, #348]	; (800696c <dns_send+0x17c>)
 800680e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006812:	7ada      	ldrb	r2, [r3, #11]
 8006814:	4b56      	ldr	r3, [pc, #344]	; (8006970 <dns_send+0x180>)
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d03b      	beq.n	8006896 <dns_send+0xa6>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800681e:	eb0a 150a 	add.w	r5, sl, sl, lsl #4
 8006822:	4b52      	ldr	r3, [pc, #328]	; (800696c <dns_send+0x17c>)
 8006824:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8006828:	3510      	adds	r5, #16
 800682a:	4628      	mov	r0, r5
 800682c:	f7f9 fcea 	bl	8000204 <strlen>
 8006830:	f100 0112 	add.w	r1, r0, #18
 8006834:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006838:	b289      	uxth	r1, r1
 800683a:	2036      	movs	r0, #54	; 0x36
 800683c:	f001 fb0e 	bl	8007e5c <pbuf_alloc>
  if (p != NULL) {
 8006840:	4681      	mov	r9, r0
 8006842:	2800      	cmp	r0, #0
 8006844:	f000 808e 	beq.w	8006964 <dns_send+0x174>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006848:	2300      	movs	r3, #0
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8006850:	eb0a 130a 	add.w	r3, sl, sl, lsl #4
 8006854:	4a45      	ldr	r2, [pc, #276]	; (800696c <dns_send+0x17c>)
 8006856:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800685a:	8918      	ldrh	r0, [r3, #8]
 800685c:	f7ff ff30 	bl	80066c0 <lwip_htons>
 8006860:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 8006864:	2301      	movs	r3, #1
 8006866:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 800686a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800686e:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006872:	220c      	movs	r2, #12
 8006874:	a901      	add	r1, sp, #4
 8006876:	4648      	mov	r0, r9
 8006878:	f001 fd74 	bl	8008364 <pbuf_take>
    --hostname;
 800687c:	3d01      	subs	r5, #1
    query_idx = SIZEOF_DNS_HDR;
 800687e:	260c      	movs	r6, #12
      if (query_idx + n + 1 > 0xFFFF) {
 8006880:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
 8006884:	e030      	b.n	80068e8 <dns_send+0xf8>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006886:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <dns_send+0x184>)
 8006888:	f240 22fa 	movw	r2, #762	; 0x2fa
 800688c:	493a      	ldr	r1, [pc, #232]	; (8006978 <dns_send+0x188>)
 800688e:	483b      	ldr	r0, [pc, #236]	; (800697c <dns_send+0x18c>)
 8006890:	f024 fa1c 	bl	802accc <iprintf>
 8006894:	e7b8      	b.n	8006808 <dns_send+0x18>
    dns_call_found(idx, NULL);
 8006896:	2100      	movs	r1, #0
 8006898:	4650      	mov	r0, sl
 800689a:	f7ff ff43 	bl	8006724 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 800689e:	eb0a 1a0a 	add.w	sl, sl, sl, lsl #4
 80068a2:	4b32      	ldr	r3, [pc, #200]	; (800696c <dns_send+0x17c>)
 80068a4:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 80068a8:	2400      	movs	r4, #0
 80068aa:	729c      	strb	r4, [r3, #10]
}
 80068ac:	4620      	mov	r0, r4
 80068ae:	b005      	add	sp, #20
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ++hostname;
 80068b4:	4645      	mov	r5, r8
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80068b6:	2400      	movs	r4, #0
      copy_len = (u16_t)(hostname - hostname_part);
 80068b8:	eba5 0708 	sub.w	r7, r5, r8
 80068bc:	b2bf      	uxth	r7, r7
      if (query_idx + n + 1 > 0xFFFF) {
 80068be:	1933      	adds	r3, r6, r4
 80068c0:	455b      	cmp	r3, fp
 80068c2:	dc21      	bgt.n	8006908 <dns_send+0x118>
      pbuf_put_at(p, query_idx, n);
 80068c4:	4622      	mov	r2, r4
 80068c6:	4631      	mov	r1, r6
 80068c8:	4648      	mov	r0, r9
 80068ca:	f001 fe34 	bl	8008536 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80068ce:	1c73      	adds	r3, r6, #1
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	463a      	mov	r2, r7
 80068d4:	4641      	mov	r1, r8
 80068d6:	4648      	mov	r0, r9
 80068d8:	f001 fdaa 	bl	8008430 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80068dc:	4434      	add	r4, r6
 80068de:	b2a4      	uxth	r4, r4
 80068e0:	1c66      	adds	r6, r4, #1
 80068e2:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 80068e4:	782b      	ldrb	r3, [r5, #0]
 80068e6:	b1ab      	cbz	r3, 8006914 <dns_send+0x124>
      ++hostname;
 80068e8:	f105 0801 	add.w	r8, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80068ec:	786b      	ldrb	r3, [r5, #1]
 80068ee:	2b2e      	cmp	r3, #46	; 0x2e
 80068f0:	d0e0      	beq.n	80068b4 <dns_send+0xc4>
      ++hostname;
 80068f2:	4645      	mov	r5, r8
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80068f4:	2400      	movs	r4, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0de      	beq.n	80068b8 <dns_send+0xc8>
        ++n;
 80068fa:	3401      	adds	r4, #1
 80068fc:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80068fe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8006902:	2b2e      	cmp	r3, #46	; 0x2e
 8006904:	d1f7      	bne.n	80068f6 <dns_send+0x106>
 8006906:	e7d7      	b.n	80068b8 <dns_send+0xc8>
  pbuf_free(p);
 8006908:	4648      	mov	r0, r9
 800690a:	f001 fa37 	bl	8007d7c <pbuf_free>
  return ERR_VAL;
 800690e:	f06f 0405 	mvn.w	r4, #5
 8006912:	e7cb      	b.n	80068ac <dns_send+0xbc>
    pbuf_put_at(p, query_idx, 0);
 8006914:	2200      	movs	r2, #0
 8006916:	4631      	mov	r1, r6
 8006918:	4648      	mov	r0, r9
 800691a:	f001 fe0c 	bl	8008536 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800691e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006922:	f8ad 3000 	strh.w	r3, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006926:	f8ad 3002 	strh.w	r3, [sp, #2]
    query_idx++;
 800692a:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800692c:	b29b      	uxth	r3, r3
 800692e:	2204      	movs	r2, #4
 8006930:	4669      	mov	r1, sp
 8006932:	4648      	mov	r0, r9
 8006934:	f001 fd7c 	bl	8008430 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <dns_send+0x17c>)
 800693a:	eb0a 120a 	add.w	r2, sl, sl, lsl #4
 800693e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006942:	7ad1      	ldrb	r1, [r2, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006944:	7bd4      	ldrb	r4, [r2, #15]
 8006946:	2335      	movs	r3, #53	; 0x35
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <dns_send+0x180>)
 800694a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800694e:	4649      	mov	r1, r9
 8006950:	480b      	ldr	r0, [pc, #44]	; (8006980 <dns_send+0x190>)
 8006952:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006956:	f006 f98f 	bl	800cc78 <udp_sendto>
 800695a:	4604      	mov	r4, r0
    pbuf_free(p);
 800695c:	4648      	mov	r0, r9
 800695e:	f001 fa0d 	bl	8007d7c <pbuf_free>
 8006962:	e7a3      	b.n	80068ac <dns_send+0xbc>
    err = ERR_MEM;
 8006964:	f04f 34ff 	mov.w	r4, #4294967295
 8006968:	e7a0      	b.n	80068ac <dns_send+0xbc>
 800696a:	bf00      	nop
 800696c:	200102bc 	.word	0x200102bc
 8006970:	200102b4 	.word	0x200102b4
 8006974:	0802c6fc 	.word	0x0802c6fc
 8006978:	0802c72c 	.word	0x0802c72c
 800697c:	0802bc48 	.word	0x0802bc48
 8006980:	20010270 	.word	0x20010270

08006984 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8006984:	b510      	push	{r4, lr}
 8006986:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006988:	2803      	cmp	r0, #3
 800698a:	d80c      	bhi.n	80069a6 <dns_check_entry+0x22>

  switch (entry->state) {
 800698c:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8006990:	4a4d      	ldr	r2, [pc, #308]	; (8006ac8 <dns_check_entry+0x144>)
 8006992:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006996:	7a9b      	ldrb	r3, [r3, #10]
 8006998:	2b03      	cmp	r3, #3
 800699a:	f200 808d 	bhi.w	8006ab8 <dns_check_entry+0x134>
 800699e:	e8df f003 	tbb	[pc, r3]
 80069a2:	142f      	.short	0x142f
 80069a4:	7530      	.short	0x7530
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80069a6:	4b49      	ldr	r3, [pc, #292]	; (8006acc <dns_check_entry+0x148>)
 80069a8:	f240 421c 	movw	r2, #1052	; 0x41c
 80069ac:	4948      	ldr	r1, [pc, #288]	; (8006ad0 <dns_check_entry+0x14c>)
 80069ae:	4849      	ldr	r0, [pc, #292]	; (8006ad4 <dns_check_entry+0x150>)
 80069b0:	f024 f98c 	bl	802accc <iprintf>
 80069b4:	e7ea      	b.n	800698c <dns_check_entry+0x8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80069b6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80069ba:	4299      	cmp	r1, r3
 80069bc:	d00c      	beq.n	80069d8 <dns_check_entry+0x54>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80069be:	7a9a      	ldrb	r2, [r3, #10]
 80069c0:	2a02      	cmp	r2, #2
 80069c2:	d1f8      	bne.n	80069b6 <dns_check_entry+0x32>
 80069c4:	891a      	ldrh	r2, [r3, #8]
 80069c6:	4282      	cmp	r2, r0
 80069c8:	d1f5      	bne.n	80069b6 <dns_check_entry+0x32>
  txid = (u16_t)DNS_RAND_TXID();
 80069ca:	f024 fa3b 	bl	802ae44 <rand>
 80069ce:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80069d0:	4b3d      	ldr	r3, [pc, #244]	; (8006ac8 <dns_check_entry+0x144>)
 80069d2:	f503 6188 	add.w	r1, r3, #1088	; 0x440
 80069d6:	e7f2      	b.n	80069be <dns_check_entry+0x3a>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80069d8:	4a3b      	ldr	r2, [pc, #236]	; (8006ac8 <dns_check_entry+0x144>)
 80069da:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80069de:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80069e2:	8118      	strh	r0, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 80069e4:	2102      	movs	r1, #2
 80069e6:	7299      	strb	r1, [r3, #10]
      entry->server_idx = 0;
 80069e8:	2100      	movs	r1, #0
 80069ea:	72d9      	strb	r1, [r3, #11]
      entry->tmr = 1;
 80069ec:	2001      	movs	r0, #1
 80069ee:	7318      	strb	r0, [r3, #12]
      entry->retries = 0;
 80069f0:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80069f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80069f8:	7351      	strb	r1, [r2, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 80069fa:	4620      	mov	r0, r4
 80069fc:	f7ff fef8 	bl	80067f0 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8006a00:	bd10      	pop	{r4, pc}
      if (--entry->tmr == 0) {
 8006a02:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a06:	4b30      	ldr	r3, [pc, #192]	; (8006ac8 <dns_check_entry+0x144>)
 8006a08:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006a0c:	7b13      	ldrb	r3, [r2, #12]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	7313      	strb	r3, [r2, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f3      	bne.n	8006a00 <dns_check_entry+0x7c>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006a18:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <dns_check_entry+0x144>)
 8006a1e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006a22:	7b53      	ldrb	r3, [r2, #13]
 8006a24:	3301      	adds	r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	7353      	strb	r3, [r2, #13]
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d009      	beq.n	8006a42 <dns_check_entry+0xbe>
          entry->tmr = entry->retries;
 8006a2e:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a32:	4925      	ldr	r1, [pc, #148]	; (8006ac8 <dns_check_entry+0x144>)
 8006a34:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8006a38:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff fed8 	bl	80067f0 <dns_send>
        if (err != ERR_OK) {
 8006a40:	e7de      	b.n	8006a00 <dns_check_entry+0x7c>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006a42:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8006a46:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <dns_check_entry+0x144>)
 8006a48:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006a4c:	7adb      	ldrb	r3, [r3, #11]
 8006a4e:	b98b      	cbnz	r3, 8006a74 <dns_check_entry+0xf0>
 8006a50:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <dns_check_entry+0x154>)
          if (dns_backupserver_available(entry)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	b173      	cbz	r3, 8006a74 <dns_check_entry+0xf0>
            entry->server_idx++;
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006a60:	2101      	movs	r1, #1
 8006a62:	72d1      	strb	r1, [r2, #11]
            entry->tmr = 1;
 8006a64:	7311      	strb	r1, [r2, #12]
            entry->retries = 0;
 8006a66:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a6a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006a6e:	2200      	movs	r2, #0
 8006a70:	735a      	strb	r2, [r3, #13]
 8006a72:	e7e2      	b.n	8006a3a <dns_check_entry+0xb6>
            dns_call_found(i, NULL);
 8006a74:	2100      	movs	r1, #0
 8006a76:	4620      	mov	r0, r4
 8006a78:	f7ff fe54 	bl	8006724 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8006a7c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8006a80:	4b11      	ldr	r3, [pc, #68]	; (8006ac8 <dns_check_entry+0x144>)
 8006a82:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8006a86:	2200      	movs	r2, #0
 8006a88:	729a      	strb	r2, [r3, #10]
            break;
 8006a8a:	e7b9      	b.n	8006a00 <dns_check_entry+0x7c>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8006a8c:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	4a0d      	ldr	r2, [pc, #52]	; (8006ac8 <dns_check_entry+0x144>)
 8006a94:	58d3      	ldr	r3, [r2, r3]
 8006a96:	b13b      	cbz	r3, 8006aa8 <dns_check_entry+0x124>
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	4909      	ldr	r1, [pc, #36]	; (8006ac8 <dns_check_entry+0x144>)
 8006aa2:	508b      	str	r3, [r1, r2]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ab      	bne.n	8006a00 <dns_check_entry+0x7c>
        entry->state = DNS_STATE_UNUSED;
 8006aa8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <dns_check_entry+0x144>)
 8006aae:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	72a3      	strb	r3, [r4, #10]
 8006ab6:	e7a3      	b.n	8006a00 <dns_check_entry+0x7c>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <dns_check_entry+0x148>)
 8006aba:	f240 425b 	movw	r2, #1115	; 0x45b
 8006abe:	4907      	ldr	r1, [pc, #28]	; (8006adc <dns_check_entry+0x158>)
 8006ac0:	4804      	ldr	r0, [pc, #16]	; (8006ad4 <dns_check_entry+0x150>)
 8006ac2:	f024 f903 	bl	802accc <iprintf>
}
 8006ac6:	e79b      	b.n	8006a00 <dns_check_entry+0x7c>
 8006ac8:	200102bc 	.word	0x200102bc
 8006acc:	0802c6fc 	.word	0x0802c6fc
 8006ad0:	0802c744 	.word	0x0802c744
 8006ad4:	0802bc48 	.word	0x0802bc48
 8006ad8:	200102b4 	.word	0x200102b4
 8006adc:	0802c760 	.word	0x0802c760

08006ae0 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	b08d      	sub	sp, #52	; 0x34
 8006ae6:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8006ae8:	8912      	ldrh	r2, [r2, #8]
 8006aea:	2a0f      	cmp	r2, #15
 8006aec:	d805      	bhi.n	8006afa <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8006aee:	4620      	mov	r0, r4
 8006af0:	f001 f944 	bl	8007d7c <pbuf_free>
  return;
}
 8006af4:	b00d      	add	sp, #52	; 0x34
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afa:	4698      	mov	r8, r3
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8006afc:	2300      	movs	r3, #0
 8006afe:	220c      	movs	r2, #12
 8006b00:	a909      	add	r1, sp, #36	; 0x24
 8006b02:	4620      	mov	r0, r4
 8006b04:	f001 fbe0 	bl	80082c8 <pbuf_copy_partial>
 8006b08:	4605      	mov	r5, r0
 8006b0a:	280c      	cmp	r0, #12
 8006b0c:	d1ef      	bne.n	8006aee <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 8006b0e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006b12:	f7ff fdd5 	bl	80066c0 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006b16:	4bc8      	ldr	r3, [pc, #800]	; (8006e38 <dns_recv+0x358>)
    txid = lwip_htons(hdr.id);
 8006b18:	f04f 0900 	mov.w	r9, #0
 8006b1c:	e0d7      	b.n	8006cce <dns_recv+0x1ee>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006b1e:	4ac6      	ldr	r2, [pc, #792]	; (8006e38 <dns_recv+0x358>)
 8006b20:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006b24:	fb03 2306 	mla	r3, r3, r6, r2
 8006b28:	7adb      	ldrb	r3, [r3, #11]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 80b8 	bne.w	8006ca0 <dns_recv+0x1c0>
 8006b30:	4bc2      	ldr	r3, [pc, #776]	; (8006e3c <dns_recv+0x35c>)
          if (dns_backupserver_available(entry)) {
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80b3 	beq.w	8006ca0 <dns_recv+0x1c0>
            entry->retries = DNS_MAX_RETRIES-1;
 8006b3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006b3e:	fb03 2606 	mla	r6, r3, r6, r2
 8006b42:	2303      	movs	r3, #3
 8006b44:	7373      	strb	r3, [r6, #13]
            entry->tmr     = 1;
 8006b46:	2301      	movs	r3, #1
 8006b48:	7333      	strb	r3, [r6, #12]
            dns_check_entry(i);
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f7ff ff1a 	bl	8006984 <dns_check_entry>
            goto ignore_packet;
 8006b50:	e7cd      	b.n	8006aee <dns_recv+0xe>
  if (offset == 0xFFFF) {
 8006b52:	45c8      	cmp	r8, r9
 8006b54:	d0cb      	beq.n	8006aee <dns_recv+0xe>
  return (u16_t)(offset + 1);
 8006b56:	f108 0501 	add.w	r5, r8, #1
 8006b5a:	b2ad      	uxth	r5, r5
            if (res_idx == 0xFFFF) {
 8006b5c:	454d      	cmp	r5, r9
 8006b5e:	d0c6      	beq.n	8006aee <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8006b60:	462b      	mov	r3, r5
 8006b62:	4652      	mov	r2, sl
 8006b64:	a906      	add	r1, sp, #24
 8006b66:	4620      	mov	r0, r4
 8006b68:	f001 fbae 	bl	80082c8 <pbuf_copy_partial>
 8006b6c:	280a      	cmp	r0, #10
 8006b6e:	d1be      	bne.n	8006aee <dns_recv+0xe>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8006b70:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8006b74:	429d      	cmp	r5, r3
 8006b76:	d8ba      	bhi.n	8006aee <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8006b78:	f108 050b 	add.w	r5, r8, #11
 8006b7c:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8006b7e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b86:	d104      	bne.n	8006b92 <dns_recv+0xb2>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8006b88:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8006b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b90:	d03a      	beq.n	8006c08 <dns_recv+0x128>
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8006b92:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8006b96:	f7ff fd93 	bl	80066c0 <lwip_htons>
 8006b9a:	182b      	adds	r3, r5, r0
 8006b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba0:	daa5      	bge.n	8006aee <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8006ba2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8006ba6:	f7ff fd8b 	bl	80066c0 <lwip_htons>
 8006baa:	4405      	add	r5, r0
 8006bac:	b2ad      	uxth	r5, r5
            --nanswers;
 8006bae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bb2:	fa1f fb8b 	uxth.w	fp, fp
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8006bb6:	f1bb 0f00 	cmp.w	fp, #0
 8006bba:	d071      	beq.n	8006ca0 <dns_recv+0x1c0>
 8006bbc:	8923      	ldrh	r3, [r4, #8]
 8006bbe:	42ab      	cmp	r3, r5
 8006bc0:	d96e      	bls.n	8006ca0 <dns_recv+0x1c0>
    n = pbuf_try_get_at(p, offset++);
 8006bc2:	f105 0801 	add.w	r8, r5, #1
 8006bc6:	fa1f f888 	uxth.w	r8, r8
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f001 fc9b 	bl	8008508 <pbuf_try_get_at>
    if ((n < 0) || (offset == 0)) {
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	db8b      	blt.n	8006aee <dns_recv+0xe>
 8006bd6:	f1b8 0f00 	cmp.w	r8, #0
 8006bda:	d088      	beq.n	8006aee <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8006bdc:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8006be0:	2ac0      	cmp	r2, #192	; 0xc0
 8006be2:	d0b6      	beq.n	8006b52 <dns_recv+0x72>
      if (offset + n >= p->tot_len) {
 8006be4:	eb08 0203 	add.w	r2, r8, r3
 8006be8:	8921      	ldrh	r1, [r4, #8]
 8006bea:	428a      	cmp	r2, r1
 8006bec:	f6bf af7f 	bge.w	8006aee <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 8006bf0:	b295      	uxth	r5, r2
    n = pbuf_try_get_at(p, offset);
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f001 fc87 	bl	8008508 <pbuf_try_get_at>
    if (n < 0) {
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f6ff af77 	blt.w	8006aee <dns_recv+0xe>
  } while (n != 0);
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1de      	bne.n	8006bc2 <dns_recv+0xe2>
      offset = (u16_t)(offset + n);
 8006c04:	46a8      	mov	r8, r5
 8006c06:	e7a4      	b.n	8006b52 <dns_recv+0x72>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8006c08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c10:	d1bf      	bne.n	8006b92 <dns_recv+0xb2>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8006c12:	462b      	mov	r3, r5
 8006c14:	2204      	movs	r2, #4
 8006c16:	a904      	add	r1, sp, #16
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fb55 	bl	80082c8 <pbuf_copy_partial>
 8006c1e:	2804      	cmp	r0, #4
 8006c20:	f47f af65 	bne.w	8006aee <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8006c24:	4b84      	ldr	r3, [pc, #528]	; (8006e38 <dns_recv+0x358>)
 8006c26:	f44f 7588 	mov.w	r5, #272	; 0x110
 8006c2a:	fb05 3506 	mla	r5, r5, r6, r3
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	606b      	str	r3, [r5, #4]
                  pbuf_free(p);
 8006c32:	4620      	mov	r0, r4
 8006c34:	f001 f8a2 	bl	8007d7c <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8006c38:	9807      	ldr	r0, [sp, #28]
 8006c3a:	f7ff fd46 	bl	80066ca <lwip_htonl>
  entry->state = DNS_STATE_DONE;
 8006c3e:	2203      	movs	r2, #3
 8006c40:	72aa      	strb	r2, [r5, #10]
  if (entry->ttl > DNS_MAX_TTL) {
 8006c42:	4a7f      	ldr	r2, [pc, #508]	; (8006e40 <dns_recv+0x360>)
 8006c44:	4290      	cmp	r0, r2
 8006c46:	d823      	bhi.n	8006c90 <dns_recv+0x1b0>
  entry->ttl = ttl;
 8006c48:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006c4c:	fb02 f206 	mul.w	r2, r2, r6
 8006c50:	4979      	ldr	r1, [pc, #484]	; (8006e38 <dns_recv+0x358>)
 8006c52:	5088      	str	r0, [r1, r2]
  dns_call_found(idx, &entry->ipaddr);
 8006c54:	4c78      	ldr	r4, [pc, #480]	; (8006e38 <dns_recv+0x358>)
 8006c56:	9903      	ldr	r1, [sp, #12]
 8006c58:	3104      	adds	r1, #4
 8006c5a:	4421      	add	r1, r4
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f7ff fd61 	bl	8006724 <dns_call_found>
  if (entry->ttl == 0) {
 8006c62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c66:	fb03 f306 	mul.w	r3, r3, r6
 8006c6a:	58e3      	ldr	r3, [r4, r3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f47f af41 	bne.w	8006af4 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8006c72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c76:	fb03 4306 	mla	r3, r3, r6, r4
 8006c7a:	7a9b      	ldrb	r3, [r3, #10]
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	f47f af39 	bne.w	8006af4 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8006c82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c86:	fb03 4606 	mla	r6, r3, r6, r4
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	72b3      	strb	r3, [r6, #10]
                  return;
 8006c8e:	e731      	b.n	8006af4 <dns_recv+0x14>
    entry->ttl = DNS_MAX_TTL;
 8006c90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006c94:	fb03 f306 	mul.w	r3, r3, r6
 8006c98:	4a67      	ldr	r2, [pc, #412]	; (8006e38 <dns_recv+0x358>)
 8006c9a:	4969      	ldr	r1, [pc, #420]	; (8006e40 <dns_recv+0x360>)
 8006c9c:	50d1      	str	r1, [r2, r3]
 8006c9e:	e7d9      	b.n	8006c54 <dns_recv+0x174>
        pbuf_free(p);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f001 f86b 	bl	8007d7c <pbuf_free>
        dns_call_found(i, NULL);
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff fd3b 	bl	8006724 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8006cae:	4b62      	ldr	r3, [pc, #392]	; (8006e38 <dns_recv+0x358>)
 8006cb0:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006cb4:	fb02 3606 	mla	r6, r2, r6, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	72b3      	strb	r3, [r6, #10]
        return;
 8006cbc:	e71a      	b.n	8006af4 <dns_recv+0x14>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006cbe:	f109 0901 	add.w	r9, r9, #1
 8006cc2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8006cc6:	f1b9 0f04 	cmp.w	r9, #4
 8006cca:	f43f af10 	beq.w	8006aee <dns_recv+0xe>
 8006cce:	fa5f f789 	uxtb.w	r7, r9
      struct dns_table_entry *entry = &dns_table[i];
 8006cd2:	464e      	mov	r6, r9
      if ((entry->state == DNS_STATE_ASKING) &&
 8006cd4:	7a9a      	ldrb	r2, [r3, #10]
 8006cd6:	2a02      	cmp	r2, #2
 8006cd8:	d1f1      	bne.n	8006cbe <dns_recv+0x1de>
 8006cda:	891a      	ldrh	r2, [r3, #8]
 8006cdc:	4282      	cmp	r2, r0
 8006cde:	d1ee      	bne.n	8006cbe <dns_recv+0x1de>
        nquestions = lwip_htons(hdr.numquestions);
 8006ce0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8006ce4:	f7ff fcec 	bl	80066c0 <lwip_htons>
 8006ce8:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8006cea:	f8bd 002a 	ldrh.w	r0, [sp, #42]	; 0x2a
 8006cee:	f7ff fce7 	bl	80066c0 <lwip_htons>
 8006cf2:	9002      	str	r0, [sp, #8]
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8006cf4:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f6bf aef8 	bge.w	8006aee <dns_recv+0xe>
        if (nquestions != 1) {
 8006cfe:	f1ba 0f01 	cmp.w	sl, #1
 8006d02:	f47f aef4 	bne.w	8006aee <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8006d06:	eb09 1209 	add.w	r2, r9, r9, lsl #4
 8006d0a:	4b4b      	ldr	r3, [pc, #300]	; (8006e38 <dns_recv+0x358>)
 8006d0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8006d10:	7ad9      	ldrb	r1, [r3, #11]
 8006d12:	f8d8 2000 	ldr.w	r2, [r8]
 8006d16:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <dns_recv+0x35c>)
 8006d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	f47f aee6 	bne.w	8006aee <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8006d22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006d26:	fb03 f309 	mul.w	r3, r3, r9
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	9303      	str	r3, [sp, #12]
 8006d2e:	4b45      	ldr	r3, [pc, #276]	; (8006e44 <dns_recv+0x364>)
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	9301      	str	r3, [sp, #4]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8006d34:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8006d38:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8006e48 <dns_recv+0x368>
    n = pbuf_try_get_at(p, response_offset);
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f001 fbe2 	bl	8008508 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8006d44:	f1b0 0a00 	subs.w	sl, r0, #0
 8006d48:	f6ff aed1 	blt.w	8006aee <dns_recv+0xe>
 8006d4c:	455d      	cmp	r5, fp
 8006d4e:	f43f aece 	beq.w	8006aee <dns_recv+0xe>
    response_offset++;
 8006d52:	3501      	adds	r5, #1
 8006d54:	b2ad      	uxth	r5, r5
    if ((n & 0xc0) == 0xc0) {
 8006d56:	f00a 03c0 	and.w	r3, sl, #192	; 0xc0
 8006d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d5c:	f43f aec7 	beq.w	8006aee <dns_recv+0xe>
      while (n > 0) {
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	dd27      	ble.n	8006db6 <dns_recv+0x2d6>
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	4698      	mov	r8, r3
 8006d6a:	4453      	add	r3, sl
 8006d6c:	469a      	mov	sl, r3
        int c = pbuf_try_get_at(p, response_offset);
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4620      	mov	r0, r4
 8006d72:	f001 fbc9 	bl	8008508 <pbuf_try_get_at>
        if (c < 0) {
 8006d76:	1e03      	subs	r3, r0, #0
 8006d78:	f6ff aeb9 	blt.w	8006aee <dns_recv+0xe>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8006d7c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006d80:	f812 1009 	ldrb.w	r1, [r2, r9]
 8006d84:	f001 0103 	and.w	r1, r1, #3
 8006d88:	2901      	cmp	r1, #1
 8006d8a:	bf08      	it	eq
 8006d8c:	3220      	addeq	r2, #32
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f813 1009 	ldrb.w	r1, [r3, r9]
 8006d94:	f001 0103 	and.w	r1, r1, #3
 8006d98:	2901      	cmp	r1, #1
 8006d9a:	bf08      	it	eq
 8006d9c:	3320      	addeq	r3, #32
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f47f aea5 	bne.w	8006aee <dns_recv+0xe>
        if (response_offset == 0xFFFF) {
 8006da4:	455d      	cmp	r5, fp
 8006da6:	f43f aea2 	beq.w	8006aee <dns_recv+0xe>
        response_offset++;
 8006daa:	3501      	adds	r5, #1
 8006dac:	b2ad      	uxth	r5, r5
        ++query;
 8006dae:	f8cd 8004 	str.w	r8, [sp, #4]
      while (n > 0) {
 8006db2:	45d0      	cmp	r8, sl
 8006db4:	d1db      	bne.n	8006d6e <dns_recv+0x28e>
      ++query;
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	3301      	adds	r3, #1
 8006dba:	9301      	str	r3, [sp, #4]
    n = pbuf_try_get_at(p, response_offset);
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 fba2 	bl	8008508 <pbuf_try_get_at>
    if (n < 0) {
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f6ff ae92 	blt.w	8006aee <dns_recv+0xe>
  } while (n != 0);
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d1b6      	bne.n	8006d3c <dns_recv+0x25c>
  if (response_offset == 0xFFFF) {
 8006dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd2:	429d      	cmp	r5, r3
 8006dd4:	f43f ae8b 	beq.w	8006aee <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 8006dd8:	f105 0801 	add.w	r8, r5, #1
 8006ddc:	fa1f f888 	uxth.w	r8, r8
        if (res_idx == 0xFFFF) {
 8006de0:	4598      	cmp	r8, r3
 8006de2:	f43f ae84 	beq.w	8006aee <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8006de6:	4643      	mov	r3, r8
 8006de8:	2204      	movs	r2, #4
 8006dea:	a905      	add	r1, sp, #20
 8006dec:	4620      	mov	r0, r4
 8006dee:	f001 fa6b 	bl	80082c8 <pbuf_copy_partial>
 8006df2:	2804      	cmp	r0, #4
 8006df4:	f47f ae7b 	bne.w	8006aee <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8006df8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e00:	f47f ae75 	bne.w	8006aee <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8006e04:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8006e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0c:	f47f ae6f 	bne.w	8006aee <dns_recv+0xe>
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8006e10:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006e14:	4598      	cmp	r8, r3
 8006e16:	f63f ae6a 	bhi.w	8006aee <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8006e1a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8006e1e:	f013 0f0f 	tst.w	r3, #15
 8006e22:	f47f ae7c 	bne.w	8006b1e <dns_recv+0x3e>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8006e26:	3505      	adds	r5, #5
 8006e28:	b2ad      	uxth	r5, r5
  if (offset == 0xFFFF) {
 8006e2a:	f64f 79ff 	movw	r9, #65535	; 0xffff
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8006e2e:	f04f 0a0a 	mov.w	sl, #10
 8006e32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e36:	e6be      	b.n	8006bb6 <dns_recv+0xd6>
 8006e38:	200102bc 	.word	0x200102bc
 8006e3c:	200102b4 	.word	0x200102b4
 8006e40:	00093a80 	.word	0x00093a80
 8006e44:	200102cc 	.word	0x200102cc
 8006e48:	08037ab5 	.word	0x08037ab5

08006e4c <dns_init>:
}
 8006e4c:	4770      	bx	lr
	...

08006e50 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8006e50:	2801      	cmp	r0, #1
 8006e52:	d900      	bls.n	8006e56 <dns_setserver+0x6>
}
 8006e54:	4770      	bx	lr
    if (dnsserver != NULL) {
 8006e56:	b121      	cbz	r1, 8006e62 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8006e58:	680a      	ldr	r2, [r1, #0]
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <dns_setserver+0x20>)
 8006e5c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8006e60:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8006e62:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <dns_setserver+0x24>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b02      	ldr	r3, [pc, #8]	; (8006e70 <dns_setserver+0x20>)
 8006e68:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8006e6c:	e7f2      	b.n	8006e54 <dns_setserver+0x4>
 8006e6e:	bf00      	nop
 8006e70:	200102b4 	.word	0x200102b4
 8006e74:	0802ec50 	.word	0x0802ec50

08006e78 <dns_tmr>:
{
 8006e78:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7ff fd82 	bl	8006984 <dns_check_entry>
 8006e80:	2001      	movs	r0, #1
 8006e82:	f7ff fd7f 	bl	8006984 <dns_check_entry>
 8006e86:	2002      	movs	r0, #2
 8006e88:	f7ff fd7c 	bl	8006984 <dns_check_entry>
 8006e8c:	2003      	movs	r0, #3
 8006e8e:	f7ff fd79 	bl	8006984 <dns_check_entry>
}
 8006e92:	bd08      	pop	{r3, pc}

08006e94 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	9200      	str	r2, [sp, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	f000 8131 	beq.w	8007104 <dns_gethostbyname_addrtype+0x270>
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4699      	mov	r9, r3
 8006ea6:	468a      	mov	sl, r1
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f000 812e 	beq.w	800710a <dns_gethostbyname_addrtype+0x276>
      (!hostname) || (!hostname[0])) {
 8006eae:	7803      	ldrb	r3, [r0, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 812d 	beq.w	8007110 <dns_gethostbyname_addrtype+0x27c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 8006eb6:	f7f9 f9a5 	bl	8000204 <strlen>
 8006eba:	4606      	mov	r6, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8006ebc:	28ff      	cmp	r0, #255	; 0xff
 8006ebe:	f200 812a 	bhi.w	8007116 <dns_gethostbyname_addrtype+0x282>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f008 fa3f 	bl	800f348 <ip4addr_aton>
 8006eca:	b118      	cbz	r0, 8006ed4 <dns_gethostbyname_addrtype+0x40>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8006ecc:	2000      	movs	r0, #0
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	4d96      	ldr	r5, [pc, #600]	; (8007130 <dns_gethostbyname_addrtype+0x29c>)
  if (ipaddr_aton(hostname, addr)) {
 8006ed6:	46a8      	mov	r8, r5
 8006ed8:	2700      	movs	r7, #0
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8006eda:	f44f 7b80 	mov.w	fp, #256	; 0x100
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8006ede:	9701      	str	r7, [sp, #4]
 8006ee0:	f898 300a 	ldrb.w	r3, [r8, #10]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d01e      	beq.n	8006f26 <dns_gethostbyname_addrtype+0x92>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006ee8:	3701      	adds	r7, #1
 8006eea:	f508 7888 	add.w	r8, r8, #272	; 0x110
 8006eee:	2f04      	cmp	r7, #4
 8006ef0:	d1f5      	bne.n	8006ede <dns_gethostbyname_addrtype+0x4a>
    if (ip_addr_isany_val(dns_servers[0])) {
 8006ef2:	4b90      	ldr	r3, [pc, #576]	; (8007134 <dns_gethostbyname_addrtype+0x2a0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8116 	beq.w	8007128 <dns_gethostbyname_addrtype+0x294>
 8006efc:	46a8      	mov	r8, r5
 8006efe:	2700      	movs	r7, #0
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8006f00:	f44f 7b80 	mov.w	fp, #256	; 0x100
 8006f04:	fa5f fa87 	uxtb.w	sl, r7
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006f08:	f898 300a 	ldrb.w	r3, [r8, #10]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d01c      	beq.n	8006f4a <dns_gethostbyname_addrtype+0xb6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006f10:	3701      	adds	r7, #1
 8006f12:	f508 7888 	add.w	r8, r8, #272	; 0x110
 8006f16:	2f04      	cmp	r7, #4
 8006f18:	d1f4      	bne.n	8006f04 <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8006f1a:	4b87      	ldr	r3, [pc, #540]	; (8007138 <dns_gethostbyname_addrtype+0x2a4>)
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	2300      	movs	r3, #0
  lseqi = DNS_TABLE_SIZE;
 8006f20:	2004      	movs	r0, #4
  lseq = 0;
 8006f22:	469c      	mov	ip, r3
 8006f24:	e039      	b.n	8006f9a <dns_gethostbyname_addrtype+0x106>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8006f26:	465a      	mov	r2, fp
 8006f28:	f108 0110 	add.w	r1, r8, #16
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff fbd8 	bl	80066e2 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d1d8      	bne.n	8006ee8 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006f3c:	4a7c      	ldr	r2, [pc, #496]	; (8007130 <dns_gethostbyname_addrtype+0x29c>)
 8006f3e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f8ca 3000 	str.w	r3, [sl]
      return ERR_OK;
 8006f48:	e7c1      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8006f4a:	465a      	mov	r2, fp
 8006f4c:	f108 0110 	add.w	r1, r8, #16
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7ff fbc6 	bl	80066e2 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d1da      	bne.n	8006f10 <dns_gethostbyname_addrtype+0x7c>
 8006f5a:	4a78      	ldr	r2, [pc, #480]	; (800713c <dns_gethostbyname_addrtype+0x2a8>)
 8006f5c:	2300      	movs	r3, #0
        if (dns_requests[r].found == 0) {
 8006f5e:	4618      	mov	r0, r3
 8006f60:	6811      	ldr	r1, [r2, #0]
 8006f62:	b121      	cbz	r1, 8006f6e <dns_gethostbyname_addrtype+0xda>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8006f64:	3301      	adds	r3, #1
 8006f66:	320c      	adds	r2, #12
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d1f8      	bne.n	8006f5e <dns_gethostbyname_addrtype+0xca>
 8006f6c:	e7d0      	b.n	8006f10 <dns_gethostbyname_addrtype+0x7c>
          dns_requests[r].found = found;
 8006f6e:	4b73      	ldr	r3, [pc, #460]	; (800713c <dns_gethostbyname_addrtype+0x2a8>)
 8006f70:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8006f74:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8006f78:	9c00      	ldr	r4, [sp, #0]
 8006f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
          dns_requests[r].arg = callback_arg;
 8006f7e:	f8c1 9004 	str.w	r9, [r1, #4]
          dns_requests[r].dns_table_idx = i;
 8006f82:	f881 a008 	strb.w	sl, [r1, #8]
          return ERR_INPROGRESS;
 8006f86:	f06f 0004 	mvn.w	r0, #4
 8006f8a:	e7a0      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006f8c:	3701      	adds	r7, #1
 8006f8e:	b2ff      	uxtb	r7, r7
 8006f90:	3301      	adds	r3, #1
 8006f92:	f505 7588 	add.w	r5, r5, #272	; 0x110
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d00d      	beq.n	8006fb6 <dns_gethostbyname_addrtype+0x122>
 8006f9a:	b2df      	uxtb	r7, r3
    entry = &dns_table[i];
 8006f9c:	469e      	mov	lr, r3
    if (entry->state == DNS_STATE_UNUSED) {
 8006f9e:	7aaa      	ldrb	r2, [r5, #10]
 8006fa0:	b15a      	cbz	r2, 8006fba <dns_gethostbyname_addrtype+0x126>
    if (entry->state == DNS_STATE_DONE) {
 8006fa2:	2a03      	cmp	r2, #3
 8006fa4:	d1f2      	bne.n	8006f8c <dns_gethostbyname_addrtype+0xf8>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8006fa6:	7baa      	ldrb	r2, [r5, #14]
 8006fa8:	1a8a      	subs	r2, r1, r2
 8006faa:	b2d2      	uxtb	r2, r2
      if (age > lseq) {
 8006fac:	4562      	cmp	r2, ip
 8006fae:	bf84      	itt	hi
 8006fb0:	4638      	movhi	r0, r7
        lseq = age;
 8006fb2:	4694      	movhi	ip, r2
 8006fb4:	e7ea      	b.n	8006f8c <dns_gethostbyname_addrtype+0xf8>
    entry = &dns_table[i];
 8006fb6:	f04f 0e03 	mov.w	lr, #3
  if (i == DNS_TABLE_SIZE) {
 8006fba:	2f04      	cmp	r7, #4
 8006fbc:	d010      	beq.n	8006fe0 <dns_gethostbyname_addrtype+0x14c>
    entry = &dns_table[i];
 8006fbe:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8006fc2:	4d5b      	ldr	r5, [pc, #364]	; (8007130 <dns_gethostbyname_addrtype+0x29c>)
 8006fc4:	eb05 150e 	add.w	r5, r5, lr, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8006fc8:	4a5c      	ldr	r2, [pc, #368]	; (800713c <dns_gethostbyname_addrtype+0x2a8>)
      entry = &dns_table[i];
 8006fca:	2300      	movs	r3, #0
    if (dns_requests[r].found == NULL) {
 8006fcc:	4698      	mov	r8, r3
 8006fce:	6810      	ldr	r0, [r2, #0]
 8006fd0:	b1c0      	cbz	r0, 8007004 <dns_gethostbyname_addrtype+0x170>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	320c      	adds	r2, #12
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d1f8      	bne.n	8006fcc <dns_gethostbyname_addrtype+0x138>
    return ERR_MEM;
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295
 8006fde:	e776      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8006fe0:	2803      	cmp	r0, #3
 8006fe2:	f200 809b 	bhi.w	800711c <dns_gethostbyname_addrtype+0x288>
 8006fe6:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8006fea:	4a51      	ldr	r2, [pc, #324]	; (8007130 <dns_gethostbyname_addrtype+0x29c>)
 8006fec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8006ff0:	7a9b      	ldrb	r3, [r3, #10]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	f040 8095 	bne.w	8007122 <dns_gethostbyname_addrtype+0x28e>
      entry = &dns_table[i];
 8006ff8:	eb00 1300 	add.w	r3, r0, r0, lsl #4
 8006ffc:	eb02 1503 	add.w	r5, r2, r3, lsl #4
 8007000:	4607      	mov	r7, r0
 8007002:	e7e1      	b.n	8006fc8 <dns_gethostbyname_addrtype+0x134>
  req->dns_table_idx = i;
 8007004:	4a4d      	ldr	r2, [pc, #308]	; (800713c <dns_gethostbyname_addrtype+0x2a8>)
 8007006:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800700a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 800700e:	721f      	strb	r7, [r3, #8]
  entry->state = DNS_STATE_NEW;
 8007010:	f04f 0c01 	mov.w	ip, #1
 8007014:	f885 c00a 	strb.w	ip, [r5, #10]
  entry->seqno = dns_seqno;
 8007018:	73a9      	strb	r1, [r5, #14]
  req->found = found;
 800701a:	9900      	ldr	r1, [sp, #0]
 800701c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  req->arg   = callback_arg;
 8007020:	f8c3 9004 	str.w	r9, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 8007024:	2eff      	cmp	r6, #255	; 0xff
 8007026:	bf28      	it	cs
 8007028:	26ff      	movcs	r6, #255	; 0xff
  MEMCPY(entry->name, name, namelen);
 800702a:	4632      	mov	r2, r6
 800702c:	4621      	mov	r1, r4
 800702e:	f105 0010 	add.w	r0, r5, #16
 8007032:	f023 fa82 	bl	802a53a <memcpy>
  entry->name[namelen] = 0;
 8007036:	442e      	add	r6, r5
 8007038:	2400      	movs	r4, #0
 800703a:	7434      	strb	r4, [r6, #16]
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800703c:	4b40      	ldr	r3, [pc, #256]	; (8007140 <dns_gethostbyname_addrtype+0x2ac>)
 800703e:	b2e6      	uxtb	r6, r4
    if (dns_pcbs[i] == NULL) {
 8007040:	f853 2b04 	ldr.w	r2, [r3], #4
 8007044:	b31a      	cbz	r2, 800708e <dns_gethostbyname_addrtype+0x1fa>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8007046:	3401      	adds	r4, #1
 8007048:	2c04      	cmp	r4, #4
 800704a:	d1f8      	bne.n	800703e <dns_gethostbyname_addrtype+0x1aa>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800704c:	4b3d      	ldr	r3, [pc, #244]	; (8007144 <dns_gethostbyname_addrtype+0x2b0>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	3301      	adds	r3, #1
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2204      	movs	r2, #4
    if (dns_pcbs[idx] != NULL) {
 8007056:	483a      	ldr	r0, [pc, #232]	; (8007140 <dns_gethostbyname_addrtype+0x2ac>)
      idx = 0;
 8007058:	2b04      	cmp	r3, #4
 800705a:	bf28      	it	cs
 800705c:	2300      	movcs	r3, #0
    if (dns_pcbs[idx] != NULL) {
 800705e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8007062:	2900      	cmp	r1, #0
 8007064:	d13f      	bne.n	80070e6 <dns_gethostbyname_addrtype+0x252>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8007066:	3301      	adds	r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	3a01      	subs	r2, #1
 800706c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007070:	d1f2      	bne.n	8007058 <dns_gethostbyname_addrtype+0x1c4>
  entry->pcb_idx = dns_alloc_pcb();
 8007072:	2304      	movs	r3, #4
 8007074:	73eb      	strb	r3, [r5, #15]
    entry->state = DNS_STATE_UNUSED;
 8007076:	2300      	movs	r3, #0
 8007078:	72ab      	strb	r3, [r5, #10]
    req->found = NULL;
 800707a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800707e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <dns_gethostbyname_addrtype+0x2a8>)
 8007084:	f842 3008 	str.w	r3, [r2, r8]
    return ERR_MEM;
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e71f      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
  if (i < DNS_MAX_SOURCE_PORTS) {
 800708e:	2e03      	cmp	r6, #3
 8007090:	d8dc      	bhi.n	800704c <dns_gethostbyname_addrtype+0x1b8>
    dns_pcbs[i] = dns_alloc_random_port();
 8007092:	b2e4      	uxtb	r4, r4
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8007094:	202e      	movs	r0, #46	; 0x2e
 8007096:	f005 ff05 	bl	800cea4 <udp_new_ip_type>
  if (pcb == NULL) {
 800709a:	4681      	mov	r9, r0
 800709c:	b1f0      	cbz	r0, 80070dc <dns_gethostbyname_addrtype+0x248>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800709e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800714c <dns_gethostbyname_addrtype+0x2b8>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80070a2:	f023 fecf 	bl	802ae44 <rand>
 80070a6:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80070a8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80070ac:	d3f9      	bcc.n	80070a2 <dns_gethostbyname_addrtype+0x20e>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80070ae:	4651      	mov	r1, sl
 80070b0:	4648      	mov	r0, r9
 80070b2:	f005 fc51 	bl	800c958 <udp_bind>
  } while (err == ERR_USE);
 80070b6:	f110 0f08 	cmn.w	r0, #8
 80070ba:	d0f2      	beq.n	80070a2 <dns_gethostbyname_addrtype+0x20e>
  if (err != ERR_OK) {
 80070bc:	b958      	cbnz	r0, 80070d6 <dns_gethostbyname_addrtype+0x242>
  udp_recv(pcb, dns_recv, NULL);
 80070be:	2200      	movs	r2, #0
 80070c0:	4921      	ldr	r1, [pc, #132]	; (8007148 <dns_gethostbyname_addrtype+0x2b4>)
 80070c2:	4648      	mov	r0, r9
 80070c4:	f005 fea4 	bl	800ce10 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 80070c8:	4b1d      	ldr	r3, [pc, #116]	; (8007140 <dns_gethostbyname_addrtype+0x2ac>)
 80070ca:	f843 9024 	str.w	r9, [r3, r4, lsl #2]
      dns_last_pcb_idx = i;
 80070ce:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <dns_gethostbyname_addrtype+0x2b0>)
 80070d0:	701e      	strb	r6, [r3, #0]
  entry->pcb_idx = dns_alloc_pcb();
 80070d2:	73ee      	strb	r6, [r5, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 80070d4:	e00c      	b.n	80070f0 <dns_gethostbyname_addrtype+0x25c>
    udp_remove(pcb);
 80070d6:	4648      	mov	r0, r9
 80070d8:	f005 feae 	bl	800ce38 <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 80070dc:	4b18      	ldr	r3, [pc, #96]	; (8007140 <dns_gethostbyname_addrtype+0x2ac>)
 80070de:	2200      	movs	r2, #0
 80070e0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 80070e4:	e7b2      	b.n	800704c <dns_gethostbyname_addrtype+0x1b8>
      dns_last_pcb_idx = idx;
 80070e6:	4a17      	ldr	r2, [pc, #92]	; (8007144 <dns_gethostbyname_addrtype+0x2b0>)
 80070e8:	7013      	strb	r3, [r2, #0]
  entry->pcb_idx = dns_alloc_pcb();
 80070ea:	73eb      	strb	r3, [r5, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d8c2      	bhi.n	8007076 <dns_gethostbyname_addrtype+0x1e2>
  dns_seqno++;
 80070f0:	4a11      	ldr	r2, [pc, #68]	; (8007138 <dns_gethostbyname_addrtype+0x2a4>)
 80070f2:	7813      	ldrb	r3, [r2, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff fc43 	bl	8006984 <dns_check_entry>
  return ERR_INPROGRESS;
 80070fe:	f06f 0004 	mvn.w	r0, #4
 8007102:	e6e4      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
    return ERR_ARG;
 8007104:	f06f 000f 	mvn.w	r0, #15
 8007108:	e6e1      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
 800710a:	f06f 000f 	mvn.w	r0, #15
 800710e:	e6de      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
 8007110:	f06f 000f 	mvn.w	r0, #15
 8007114:	e6db      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
    return ERR_ARG;
 8007116:	f06f 000f 	mvn.w	r0, #15
 800711a:	e6d8      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
      return ERR_MEM;
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e6d5      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	e6d2      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
      return ERR_VAL;
 8007128:	f06f 0005 	mvn.w	r0, #5
 800712c:	e6cf      	b.n	8006ece <dns_gethostbyname_addrtype+0x3a>
 800712e:	bf00      	nop
 8007130:	200102bc 	.word	0x200102bc
 8007134:	200102b4 	.word	0x200102b4
 8007138:	200102b0 	.word	0x200102b0
 800713c:	20010280 	.word	0x20010280
 8007140:	20010270 	.word	0x20010270
 8007144:	2001026c 	.word	0x2001026c
 8007148:	08006ae1 	.word	0x08006ae1
 800714c:	0802ec50 	.word	0x0802ec50

08007150 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007150:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007152:	f008 ff55 	bl	8010000 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007156:	f000 f80d 	bl	8007174 <mem_init>
  memp_init();
 800715a:	f000 fb13 	bl	8007784 <memp_init>
  pbuf_init();
  netif_init();
 800715e:	f000 fbb3 	bl	80078c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007162:	f005 fafd 	bl	800c760 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007166:	f001 fa61 	bl	800862c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800716a:	f7ff fe6f 	bl	8006e4c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800716e:	f005 fa9d 	bl	800c6ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007172:	bd08      	pop	{r3, pc}

08007174 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007174:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007176:	4b12      	ldr	r3, [pc, #72]	; (80071c0 <mem_init+0x4c>)
 8007178:	f023 0303 	bic.w	r3, r3, #3
 800717c:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <mem_init+0x50>)
 800717e:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007180:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007184:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007186:	2100      	movs	r1, #0
 8007188:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
 800718a:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800718c:	1898      	adds	r0, r3, r2
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800718e:	490e      	ldr	r1, [pc, #56]	; (80071c8 <mem_init+0x54>)
 8007190:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8007192:	2101      	movs	r1, #1
 8007194:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644
  ram_end->next = MEM_SIZE_ALIGNED;
 8007198:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 800719c:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <mem_init+0x58>)
 80071a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80071a4:	480a      	ldr	r0, [pc, #40]	; (80071d0 <mem_init+0x5c>)
 80071a6:	f008 ff37 	bl	8010018 <sys_mutex_new>
 80071aa:	b900      	cbnz	r0, 80071ae <mem_init+0x3a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80071ac:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80071ae:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <mem_init+0x60>)
 80071b0:	f240 221f 	movw	r2, #543	; 0x21f
 80071b4:	4908      	ldr	r1, [pc, #32]	; (80071d8 <mem_init+0x64>)
 80071b6:	4809      	ldr	r0, [pc, #36]	; (80071dc <mem_init+0x68>)
 80071b8:	f023 fd88 	bl	802accc <iprintf>
}
 80071bc:	e7f6      	b.n	80071ac <mem_init+0x38>
 80071be:	bf00      	nop
 80071c0:	20010db3 	.word	0x20010db3
 80071c4:	20010704 	.word	0x20010704
 80071c8:	20010708 	.word	0x20010708
 80071cc:	200106fc 	.word	0x200106fc
 80071d0:	20010700 	.word	0x20010700
 80071d4:	0802c780 	.word	0x0802c780
 80071d8:	0802c7b0 	.word	0x0802c7b0
 80071dc:	0802bc48 	.word	0x0802bc48

080071e0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f000 80db 	beq.w	800739c <mem_free+0x1bc>
{
 80071e6:	b538      	push	{r3, r4, r5, lr}
 80071e8:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80071ea:	f010 0f03 	tst.w	r0, #3
 80071ee:	d117      	bne.n	8007220 <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80071f0:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80071f4:	4b6a      	ldr	r3, [pc, #424]	; (80073a0 <mem_free+0x1c0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	42ab      	cmp	r3, r5
 80071fa:	d805      	bhi.n	8007208 <mem_free+0x28>
 80071fc:	f100 030c 	add.w	r3, r0, #12
 8007200:	4a68      	ldr	r2, [pc, #416]	; (80073a4 <mem_free+0x1c4>)
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	429a      	cmp	r2, r3
 8007206:	d217      	bcs.n	8007238 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007208:	4b67      	ldr	r3, [pc, #412]	; (80073a8 <mem_free+0x1c8>)
 800720a:	f240 227f 	movw	r2, #639	; 0x27f
 800720e:	4967      	ldr	r1, [pc, #412]	; (80073ac <mem_free+0x1cc>)
 8007210:	4867      	ldr	r0, [pc, #412]	; (80073b0 <mem_free+0x1d0>)
 8007212:	f023 fd5b 	bl	802accc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007216:	f008 ff2f 	bl	8010078 <sys_arch_protect>
 800721a:	f008 ff39 	bl	8010090 <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800721e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007220:	4b61      	ldr	r3, [pc, #388]	; (80073a8 <mem_free+0x1c8>)
 8007222:	f240 2273 	movw	r2, #627	; 0x273
 8007226:	4963      	ldr	r1, [pc, #396]	; (80073b4 <mem_free+0x1d4>)
 8007228:	4861      	ldr	r0, [pc, #388]	; (80073b0 <mem_free+0x1d0>)
 800722a:	f023 fd4f 	bl	802accc <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 800722e:	f008 ff23 	bl	8010078 <sys_arch_protect>
 8007232:	f008 ff2d 	bl	8010090 <sys_arch_unprotect>
    return;
 8007236:	e7f2      	b.n	800721e <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 8007238:	485f      	ldr	r0, [pc, #380]	; (80073b8 <mem_free+0x1d8>)
 800723a:	f008 fefd 	bl	8010038 <sys_mutex_lock>
  if (!mem->used) {
 800723e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d060      	beq.n	8007308 <mem_free+0x128>
  nmem = ptr_to_mem(mem->next);
 8007246:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800724a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800724e:	f200 8096 	bhi.w	800737e <mem_free+0x19e>
  pmem = ptr_to_mem(mem->prev);
 8007252:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007256:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 800725a:	f200 8090 	bhi.w	800737e <mem_free+0x19e>
  return (mem_size_t)((u8_t *)mem - ram);
 800725e:	4a50      	ldr	r2, [pc, #320]	; (80073a0 <mem_free+0x1c0>)
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	1aa9      	subs	r1, r5, r2
 8007264:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007266:	4288      	cmp	r0, r1
 8007268:	d003      	beq.n	8007272 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800726a:	5a10      	ldrh	r0, [r2, r0]
 800726c:	4288      	cmp	r0, r1
 800726e:	f040 8086 	bne.w	800737e <mem_free+0x19e>
  return (struct mem *)(void *)&ram[ptr];
 8007272:	4413      	add	r3, r2
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007274:	484b      	ldr	r0, [pc, #300]	; (80073a4 <mem_free+0x1c4>)
 8007276:	6800      	ldr	r0, [r0, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007278:	4298      	cmp	r0, r3
 800727a:	d002      	beq.n	8007282 <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800727c:	885b      	ldrh	r3, [r3, #2]
 800727e:	428b      	cmp	r3, r1
 8007280:	d17d      	bne.n	800737e <mem_free+0x19e>
  mem->used = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007288:	4b4c      	ldr	r3, [pc, #304]	; (80073bc <mem_free+0x1dc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	42ab      	cmp	r3, r5
 800728e:	d84a      	bhi.n	8007326 <mem_free+0x146>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007290:	4295      	cmp	r5, r2
 8007292:	d34b      	bcc.n	800732c <mem_free+0x14c>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007294:	4285      	cmp	r5, r0
 8007296:	d254      	bcs.n	8007342 <mem_free+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8007298:	4b41      	ldr	r3, [pc, #260]	; (80073a0 <mem_free+0x1c0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80072a0:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80072a2:	4295      	cmp	r5, r2
 80072a4:	d015      	beq.n	80072d2 <mem_free+0xf2>
 80072a6:	7910      	ldrb	r0, [r2, #4]
 80072a8:	b998      	cbnz	r0, 80072d2 <mem_free+0xf2>
 80072aa:	483e      	ldr	r0, [pc, #248]	; (80073a4 <mem_free+0x1c4>)
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	4290      	cmp	r0, r2
 80072b0:	d00f      	beq.n	80072d2 <mem_free+0xf2>
    if (lfree == nmem) {
 80072b2:	4842      	ldr	r0, [pc, #264]	; (80073bc <mem_free+0x1dc>)
 80072b4:	6800      	ldr	r0, [r0, #0]
 80072b6:	4290      	cmp	r0, r2
      lfree = mem;
 80072b8:	bf04      	itt	eq
 80072ba:	4a40      	ldreq	r2, [pc, #256]	; (80073bc <mem_free+0x1dc>)
 80072bc:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 80072be:	5a5a      	ldrh	r2, [r3, r1]
 80072c0:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80072c4:	5a5a      	ldrh	r2, [r3, r1]
 80072c6:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 80072ca:	d002      	beq.n	80072d2 <mem_free+0xf2>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80072cc:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 80072ce:	1ae9      	subs	r1, r5, r3
 80072d0:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 80072d2:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 80072d6:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 80072d8:	4295      	cmp	r5, r2
 80072da:	d011      	beq.n	8007300 <mem_free+0x120>
 80072dc:	7910      	ldrb	r0, [r2, #4]
 80072de:	b978      	cbnz	r0, 8007300 <mem_free+0x120>
    if (lfree == mem) {
 80072e0:	4836      	ldr	r0, [pc, #216]	; (80073bc <mem_free+0x1dc>)
 80072e2:	6800      	ldr	r0, [r0, #0]
 80072e4:	4285      	cmp	r5, r0
      lfree = pmem;
 80072e6:	bf04      	itt	eq
 80072e8:	4834      	ldreq	r0, [pc, #208]	; (80073bc <mem_free+0x1dc>)
 80072ea:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 80072ec:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80072f0:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80072f2:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80072f6:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80072fa:	bf1c      	itt	ne
 80072fc:	189b      	addne	r3, r3, r2
 80072fe:	8059      	strhne	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007300:	482d      	ldr	r0, [pc, #180]	; (80073b8 <mem_free+0x1d8>)
 8007302:	f008 fea0 	bl	8010046 <sys_mutex_unlock>
 8007306:	e78a      	b.n	800721e <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007308:	4b27      	ldr	r3, [pc, #156]	; (80073a8 <mem_free+0x1c8>)
 800730a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800730e:	492c      	ldr	r1, [pc, #176]	; (80073c0 <mem_free+0x1e0>)
 8007310:	4827      	ldr	r0, [pc, #156]	; (80073b0 <mem_free+0x1d0>)
 8007312:	f023 fcdb 	bl	802accc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007316:	4828      	ldr	r0, [pc, #160]	; (80073b8 <mem_free+0x1d8>)
 8007318:	f008 fe95 	bl	8010046 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800731c:	f008 feac 	bl	8010078 <sys_arch_protect>
 8007320:	f008 feb6 	bl	8010090 <sys_arch_unprotect>
    return;
 8007324:	e77b      	b.n	800721e <mem_free+0x3e>
    lfree = mem;
 8007326:	4b25      	ldr	r3, [pc, #148]	; (80073bc <mem_free+0x1dc>)
 8007328:	601d      	str	r5, [r3, #0]
 800732a:	e7b1      	b.n	8007290 <mem_free+0xb0>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800732c:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <mem_free+0x1c8>)
 800732e:	f240 12df 	movw	r2, #479	; 0x1df
 8007332:	4924      	ldr	r1, [pc, #144]	; (80073c4 <mem_free+0x1e4>)
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <mem_free+0x1d0>)
 8007336:	f023 fcc9 	bl	802accc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800733a:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <mem_free+0x1c4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	429d      	cmp	r5, r3
 8007340:	d306      	bcc.n	8007350 <mem_free+0x170>
 8007342:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <mem_free+0x1c8>)
 8007344:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007348:	491f      	ldr	r1, [pc, #124]	; (80073c8 <mem_free+0x1e8>)
 800734a:	4819      	ldr	r0, [pc, #100]	; (80073b0 <mem_free+0x1d0>)
 800734c:	f023 fcbe 	bl	802accc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007350:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007354:	b133      	cbz	r3, 8007364 <mem_free+0x184>
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <mem_free+0x1c8>)
 8007358:	f240 12e1 	movw	r2, #481	; 0x1e1
 800735c:	491b      	ldr	r1, [pc, #108]	; (80073cc <mem_free+0x1ec>)
 800735e:	4814      	ldr	r0, [pc, #80]	; (80073b0 <mem_free+0x1d0>)
 8007360:	f023 fcb4 	bl	802accc <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007364:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800736c:	d994      	bls.n	8007298 <mem_free+0xb8>
 800736e:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <mem_free+0x1c8>)
 8007370:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007374:	4916      	ldr	r1, [pc, #88]	; (80073d0 <mem_free+0x1f0>)
 8007376:	480e      	ldr	r0, [pc, #56]	; (80073b0 <mem_free+0x1d0>)
 8007378:	f023 fca8 	bl	802accc <iprintf>
 800737c:	e78c      	b.n	8007298 <mem_free+0xb8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <mem_free+0x1c8>)
 8007380:	f240 2295 	movw	r2, #661	; 0x295
 8007384:	4913      	ldr	r1, [pc, #76]	; (80073d4 <mem_free+0x1f4>)
 8007386:	480a      	ldr	r0, [pc, #40]	; (80073b0 <mem_free+0x1d0>)
 8007388:	f023 fca0 	bl	802accc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800738c:	480a      	ldr	r0, [pc, #40]	; (80073b8 <mem_free+0x1d8>)
 800738e:	f008 fe5a 	bl	8010046 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007392:	f008 fe71 	bl	8010078 <sys_arch_protect>
 8007396:	f008 fe7b 	bl	8010090 <sys_arch_unprotect>
    return;
 800739a:	e740      	b.n	800721e <mem_free+0x3e>
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20010704 	.word	0x20010704
 80073a4:	20010708 	.word	0x20010708
 80073a8:	0802c780 	.word	0x0802c780
 80073ac:	0802c7f0 	.word	0x0802c7f0
 80073b0:	0802bc48 	.word	0x0802bc48
 80073b4:	0802c7cc 	.word	0x0802c7cc
 80073b8:	20010700 	.word	0x20010700
 80073bc:	200106fc 	.word	0x200106fc
 80073c0:	0802c80c 	.word	0x0802c80c
 80073c4:	0802c834 	.word	0x0802c834
 80073c8:	0802c84c 	.word	0x0802c84c
 80073cc:	0802c868 	.word	0x0802c868
 80073d0:	0802c884 	.word	0x0802c884
 80073d4:	0802c8b0 	.word	0x0802c8b0

080073d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80073de:	1ccc      	adds	r4, r1, #3
 80073e0:	f024 0403 	bic.w	r4, r4, #3
 80073e4:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80073e6:	2c0b      	cmp	r4, #11
 80073e8:	d904      	bls.n	80073f4 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80073ea:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80073ee:	d902      	bls.n	80073f6 <mem_trim+0x1e>
    return NULL;
 80073f0:	2000      	movs	r0, #0
 80073f2:	e01f      	b.n	8007434 <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 80073f4:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80073f6:	42a1      	cmp	r1, r4
 80073f8:	f200 809a 	bhi.w	8007530 <mem_trim+0x158>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80073fc:	4b4e      	ldr	r3, [pc, #312]	; (8007538 <mem_trim+0x160>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	42ab      	cmp	r3, r5
 8007402:	d803      	bhi.n	800740c <mem_trim+0x34>
 8007404:	4a4d      	ldr	r2, [pc, #308]	; (800753c <mem_trim+0x164>)
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	42aa      	cmp	r2, r5
 800740a:	d815      	bhi.n	8007438 <mem_trim+0x60>
 800740c:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <mem_trim+0x168>)
 800740e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007412:	494c      	ldr	r1, [pc, #304]	; (8007544 <mem_trim+0x16c>)
 8007414:	484c      	ldr	r0, [pc, #304]	; (8007548 <mem_trim+0x170>)
 8007416:	f023 fc59 	bl	802accc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800741a:	4b47      	ldr	r3, [pc, #284]	; (8007538 <mem_trim+0x160>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	42ab      	cmp	r3, r5
 8007420:	d803      	bhi.n	800742a <mem_trim+0x52>
 8007422:	4a46      	ldr	r2, [pc, #280]	; (800753c <mem_trim+0x164>)
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	42aa      	cmp	r2, r5
 8007428:	d806      	bhi.n	8007438 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800742a:	f008 fe25 	bl	8010078 <sys_arch_protect>
 800742e:	f008 fe2f 	bl	8010090 <sys_arch_unprotect>
    return rmem;
 8007432:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007438:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800743c:	1afb      	subs	r3, r7, r3
 800743e:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007440:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007444:	3e08      	subs	r6, #8
 8007446:	1bf6      	subs	r6, r6, r7
 8007448:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800744a:	42a6      	cmp	r6, r4
 800744c:	d32f      	bcc.n	80074ae <mem_trim+0xd6>
  if (newsize == size) {
 800744e:	42a6      	cmp	r6, r4
 8007450:	d070      	beq.n	8007534 <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 8007452:	483e      	ldr	r0, [pc, #248]	; (800754c <mem_trim+0x174>)
 8007454:	f008 fdf0 	bl	8010038 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007458:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <mem_trim+0x160>)
 800745e:	f8d3 a000 	ldr.w	sl, [r3]
 8007462:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 8007466:	f899 3004 	ldrb.w	r3, [r9, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d136      	bne.n	80074dc <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800746e:	f5b8 6fc8 	cmp.w	r8, #1600	; 0x640
 8007472:	d025      	beq.n	80074c0 <mem_trim+0xe8>
    next = mem2->next;
 8007474:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007478:	3408      	adds	r4, #8
 800747a:	443c      	add	r4, r7
 800747c:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 800747e:	4b34      	ldr	r3, [pc, #208]	; (8007550 <mem_trim+0x178>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	454b      	cmp	r3, r9
 8007484:	d024      	beq.n	80074d0 <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 8007486:	4b2c      	ldr	r3, [pc, #176]	; (8007538 <mem_trim+0x160>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 800748c:	2000      	movs	r0, #0
 800748e:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 8007490:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007492:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007494:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007498:	5b1a      	ldrh	r2, [r3, r4]
 800749a:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 800749e:	d001      	beq.n	80074a4 <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80074a0:	4413      	add	r3, r2
 80074a2:	805c      	strh	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80074a4:	4829      	ldr	r0, [pc, #164]	; (800754c <mem_trim+0x174>)
 80074a6:	f008 fdce 	bl	8010046 <sys_mutex_unlock>
  return rmem;
 80074aa:	4628      	mov	r0, r5
 80074ac:	e7c2      	b.n	8007434 <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80074ae:	4b24      	ldr	r3, [pc, #144]	; (8007540 <mem_trim+0x168>)
 80074b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80074b4:	4927      	ldr	r1, [pc, #156]	; (8007554 <mem_trim+0x17c>)
 80074b6:	4824      	ldr	r0, [pc, #144]	; (8007548 <mem_trim+0x170>)
 80074b8:	f023 fc08 	bl	802accc <iprintf>
    return NULL;
 80074bc:	2000      	movs	r0, #0
 80074be:	e7b9      	b.n	8007434 <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074c0:	4b1f      	ldr	r3, [pc, #124]	; (8007540 <mem_trim+0x168>)
 80074c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80074c6:	4924      	ldr	r1, [pc, #144]	; (8007558 <mem_trim+0x180>)
 80074c8:	481f      	ldr	r0, [pc, #124]	; (8007548 <mem_trim+0x170>)
 80074ca:	f023 fbff 	bl	802accc <iprintf>
 80074ce:	e7d1      	b.n	8007474 <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 80074d0:	4b19      	ldr	r3, [pc, #100]	; (8007538 <mem_trim+0x160>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <mem_trim+0x178>)
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e7d4      	b.n	8007486 <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80074dc:	f104 0314 	add.w	r3, r4, #20
 80074e0:	42b3      	cmp	r3, r6
 80074e2:	d8df      	bhi.n	80074a4 <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80074e4:	3408      	adds	r4, #8
 80074e6:	443c      	add	r4, r7
 80074e8:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074ea:	f5b8 6fc8 	cmp.w	r8, #1600	; 0x640
 80074ee:	d017      	beq.n	8007520 <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 80074f0:	4b11      	ldr	r3, [pc, #68]	; (8007538 <mem_trim+0x160>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80074f6:	4916      	ldr	r1, [pc, #88]	; (8007550 <mem_trim+0x178>)
 80074f8:	6809      	ldr	r1, [r1, #0]
 80074fa:	4291      	cmp	r1, r2
      lfree = mem2;
 80074fc:	bf84      	itt	hi
 80074fe:	4914      	ldrhi	r1, [pc, #80]	; (8007550 <mem_trim+0x178>)
 8007500:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8007502:	2100      	movs	r1, #0
 8007504:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007506:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 800750a:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800750c:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800750e:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007512:	5b1a      	ldrh	r2, [r3, r4]
 8007514:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007518:	bf1c      	itt	ne
 800751a:	189b      	addne	r3, r3, r2
 800751c:	805c      	strhne	r4, [r3, #2]
 800751e:	e7c1      	b.n	80074a4 <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <mem_trim+0x168>)
 8007522:	f240 3216 	movw	r2, #790	; 0x316
 8007526:	490c      	ldr	r1, [pc, #48]	; (8007558 <mem_trim+0x180>)
 8007528:	4807      	ldr	r0, [pc, #28]	; (8007548 <mem_trim+0x170>)
 800752a:	f023 fbcf 	bl	802accc <iprintf>
 800752e:	e7df      	b.n	80074f0 <mem_trim+0x118>
    return NULL;
 8007530:	2000      	movs	r0, #0
 8007532:	e77f      	b.n	8007434 <mem_trim+0x5c>
    return rmem;
 8007534:	4628      	mov	r0, r5
 8007536:	e77d      	b.n	8007434 <mem_trim+0x5c>
 8007538:	20010704 	.word	0x20010704
 800753c:	20010708 	.word	0x20010708
 8007540:	0802c780 	.word	0x0802c780
 8007544:	0802c8e4 	.word	0x0802c8e4
 8007548:	0802bc48 	.word	0x0802bc48
 800754c:	20010700 	.word	0x20010700
 8007550:	200106fc 	.word	0x200106fc
 8007554:	0802c8fc 	.word	0x0802c8fc
 8007558:	0802c91c 	.word	0x0802c91c

0800755c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800755c:	2800      	cmp	r0, #0
 800755e:	f000 809c 	beq.w	800769a <mem_malloc+0x13e>
{
 8007562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007564:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007566:	1cc6      	adds	r6, r0, #3
 8007568:	f026 0603 	bic.w	r6, r6, #3
 800756c:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 800756e:	2e0b      	cmp	r6, #11
 8007570:	d904      	bls.n	800757c <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007572:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8007576:	d902      	bls.n	800757e <mem_malloc+0x22>
    return NULL;
 8007578:	2000      	movs	r0, #0
 800757a:	e08d      	b.n	8007698 <mem_malloc+0x13c>
    size = MIN_SIZE_ALIGNED;
 800757c:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800757e:	42b3      	cmp	r3, r6
 8007580:	f200 808d 	bhi.w	800769e <mem_malloc+0x142>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007584:	4849      	ldr	r0, [pc, #292]	; (80076ac <mem_malloc+0x150>)
 8007586:	f008 fd57 	bl	8010038 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800758a:	4b49      	ldr	r3, [pc, #292]	; (80076b0 <mem_malloc+0x154>)
 800758c:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800758e:	4b49      	ldr	r3, [pc, #292]	; (80076b4 <mem_malloc+0x158>)
  return (mem_size_t)((u8_t *)mem - ram);
 8007590:	681c      	ldr	r4, [r3, #0]
 8007592:	1a64      	subs	r4, r4, r1
 8007594:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007596:	4623      	mov	r3, r4
 8007598:	4637      	mov	r7, r6
 800759a:	f5c6 60c8 	rsb	r0, r6, #1600	; 0x640
 800759e:	4284      	cmp	r4, r0
 80075a0:	d276      	bcs.n	8007690 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80075a2:	f06f 0c07 	mvn.w	ip, #7
 80075a6:	e039      	b.n	800761c <mem_malloc+0xc0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80075a8:	4b43      	ldr	r3, [pc, #268]	; (80076b8 <mem_malloc+0x15c>)
 80075aa:	f240 3287 	movw	r2, #903	; 0x387
 80075ae:	4943      	ldr	r1, [pc, #268]	; (80076bc <mem_malloc+0x160>)
 80075b0:	4843      	ldr	r0, [pc, #268]	; (80076c0 <mem_malloc+0x164>)
 80075b2:	f023 fb8b 	bl	802accc <iprintf>
 80075b6:	e045      	b.n	8007644 <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075b8:	2301      	movs	r3, #1
 80075ba:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075bc:	4b3d      	ldr	r3, [pc, #244]	; (80076b4 <mem_malloc+0x158>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	d056      	beq.n	8007672 <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80075c4:	4839      	ldr	r0, [pc, #228]	; (80076ac <mem_malloc+0x150>)
 80075c6:	f008 fd3e 	bl	8010046 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80075ca:	3708      	adds	r7, #8
 80075cc:	442f      	add	r7, r5
 80075ce:	4b3d      	ldr	r3, [pc, #244]	; (80076c4 <mem_malloc+0x168>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	d305      	bcc.n	80075e2 <mem_malloc+0x86>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80075d6:	f015 0f03 	tst.w	r5, #3
 80075da:	d10a      	bne.n	80075f2 <mem_malloc+0x96>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80075dc:	f105 0008 	add.w	r0, r5, #8
 80075e0:	e05a      	b.n	8007698 <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80075e2:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <mem_malloc+0x15c>)
 80075e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80075e8:	4937      	ldr	r1, [pc, #220]	; (80076c8 <mem_malloc+0x16c>)
 80075ea:	4835      	ldr	r0, [pc, #212]	; (80076c0 <mem_malloc+0x164>)
 80075ec:	f023 fb6e 	bl	802accc <iprintf>
 80075f0:	e7f1      	b.n	80075d6 <mem_malloc+0x7a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80075f2:	4e31      	ldr	r6, [pc, #196]	; (80076b8 <mem_malloc+0x15c>)
 80075f4:	4c32      	ldr	r4, [pc, #200]	; (80076c0 <mem_malloc+0x164>)
 80075f6:	4633      	mov	r3, r6
 80075f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80075fc:	4933      	ldr	r1, [pc, #204]	; (80076cc <mem_malloc+0x170>)
 80075fe:	4620      	mov	r0, r4
 8007600:	f023 fb64 	bl	802accc <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007604:	4633      	mov	r3, r6
 8007606:	f240 32bd 	movw	r2, #957	; 0x3bd
 800760a:	4931      	ldr	r1, [pc, #196]	; (80076d0 <mem_malloc+0x174>)
 800760c:	4620      	mov	r0, r4
 800760e:	f023 fb5d 	bl	802accc <iprintf>
 8007612:	e7e3      	b.n	80075dc <mem_malloc+0x80>
         ptr = ptr_to_mem(ptr)->next) {
 8007614:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007616:	4623      	mov	r3, r4
 8007618:	4284      	cmp	r4, r0
 800761a:	d239      	bcs.n	8007690 <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 800761c:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 800761e:	792a      	ldrb	r2, [r5, #4]
 8007620:	2a00      	cmp	r2, #0
 8007622:	d1f7      	bne.n	8007614 <mem_malloc+0xb8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007624:	5aca      	ldrh	r2, [r1, r3]
 8007626:	ebac 0303 	sub.w	r3, ip, r3
 800762a:	4413      	add	r3, r2
      if ((!mem->used) &&
 800762c:	42bb      	cmp	r3, r7
 800762e:	d3f1      	bcc.n	8007614 <mem_malloc+0xb8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007630:	f107 0214 	add.w	r2, r7, #20
 8007634:	4293      	cmp	r3, r2
 8007636:	d3bf      	bcc.n	80075b8 <mem_malloc+0x5c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007638:	3608      	adds	r6, #8
 800763a:	4426      	add	r6, r4
 800763c:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800763e:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8007642:	d0b1      	beq.n	80075a8 <mem_malloc+0x4c>
  return (struct mem *)(void *)&ram[ptr];
 8007644:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <mem_malloc+0x154>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	199a      	adds	r2, r3, r6
          mem2->used = 0;
 800764a:	2100      	movs	r1, #0
 800764c:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800764e:	8829      	ldrh	r1, [r5, #0]
 8007650:	5399      	strh	r1, [r3, r6]
          mem2->prev = ptr;
 8007652:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8007654:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007656:	2201      	movs	r2, #1
 8007658:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800765a:	5b9a      	ldrh	r2, [r3, r6]
 800765c:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8007660:	d0ac      	beq.n	80075bc <mem_malloc+0x60>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007662:	4413      	add	r3, r2
 8007664:	805e      	strh	r6, [r3, #2]
        if (mem == lfree) {
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <mem_malloc+0x158>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	42ab      	cmp	r3, r5
 800766c:	d1aa      	bne.n	80075c4 <mem_malloc+0x68>
          while (cur->used && cur != ram_end) {
 800766e:	792b      	ldrb	r3, [r5, #4]
 8007670:	b1d3      	cbz	r3, 80076a8 <mem_malloc+0x14c>
 8007672:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <mem_malloc+0x168>)
 8007674:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <mem_malloc+0x154>)
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 800767c:	4299      	cmp	r1, r3
 800767e:	d010      	beq.n	80076a2 <mem_malloc+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8007684:	791a      	ldrb	r2, [r3, #4]
 8007686:	2a00      	cmp	r2, #0
 8007688:	d1f8      	bne.n	800767c <mem_malloc+0x120>
          lfree = cur;
 800768a:	4a0a      	ldr	r2, [pc, #40]	; (80076b4 <mem_malloc+0x158>)
 800768c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800768e:	e799      	b.n	80075c4 <mem_malloc+0x68>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007690:	4806      	ldr	r0, [pc, #24]	; (80076ac <mem_malloc+0x150>)
 8007692:	f008 fcd8 	bl	8010046 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007696:	2000      	movs	r0, #0
}
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800769a:	2000      	movs	r0, #0
}
 800769c:	4770      	bx	lr
    return NULL;
 800769e:	2000      	movs	r0, #0
 80076a0:	e7fa      	b.n	8007698 <mem_malloc+0x13c>
          lfree = cur;
 80076a2:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <mem_malloc+0x158>)
 80076a4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80076a6:	e78d      	b.n	80075c4 <mem_malloc+0x68>
  return (struct mem *)(void *)&ram[ptr];
 80076a8:	462b      	mov	r3, r5
 80076aa:	e7ee      	b.n	800768a <mem_malloc+0x12e>
 80076ac:	20010700 	.word	0x20010700
 80076b0:	20010704 	.word	0x20010704
 80076b4:	200106fc 	.word	0x200106fc
 80076b8:	0802c780 	.word	0x0802c780
 80076bc:	0802c91c 	.word	0x0802c91c
 80076c0:	0802bc48 	.word	0x0802bc48
 80076c4:	20010708 	.word	0x20010708
 80076c8:	0802c930 	.word	0x0802c930
 80076cc:	0802c960 	.word	0x0802c960
 80076d0:	0802c990 	.word	0x0802c990

080076d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80076d8:	f008 fcce 	bl	8010078 <sys_arch_protect>
 80076dc:	4605      	mov	r5, r0

  memp = *desc->tab;
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80076e2:	b18c      	cbz	r4, 8007708 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076e8:	f014 0f03 	tst.w	r4, #3
 80076ec:	d104      	bne.n	80076f8 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80076ee:	4628      	mov	r0, r5
 80076f0:	f008 fcce 	bl	8010090 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80076f4:	4620      	mov	r0, r4
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076f8:	4b05      	ldr	r3, [pc, #20]	; (8007710 <do_memp_malloc_pool+0x3c>)
 80076fa:	f44f 728c 	mov.w	r2, #280	; 0x118
 80076fe:	4905      	ldr	r1, [pc, #20]	; (8007714 <do_memp_malloc_pool+0x40>)
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <do_memp_malloc_pool+0x44>)
 8007702:	f023 fae3 	bl	802accc <iprintf>
 8007706:	e7f2      	b.n	80076ee <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 8007708:	f008 fcc2 	bl	8010090 <sys_arch_unprotect>
  return NULL;
 800770c:	e7f2      	b.n	80076f4 <do_memp_malloc_pool+0x20>
 800770e:	bf00      	nop
 8007710:	0802c9b4 	.word	0x0802c9b4
 8007714:	0802c9e4 	.word	0x0802c9e4
 8007718:	0802bc48 	.word	0x0802bc48

0800771c <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4605      	mov	r5, r0
 8007720:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007722:	f011 0f03 	tst.w	r1, #3
 8007726:	d109      	bne.n	800773c <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007728:	f008 fca6 	bl	8010078 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800772c:	68ab      	ldr	r3, [r5, #8]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007732:	68ab      	ldr	r3, [r5, #8]
 8007734:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007736:	f008 fcab 	bl	8010090 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800773a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <do_memp_free_pool+0x30>)
 800773e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007742:	4903      	ldr	r1, [pc, #12]	; (8007750 <do_memp_free_pool+0x34>)
 8007744:	4803      	ldr	r0, [pc, #12]	; (8007754 <do_memp_free_pool+0x38>)
 8007746:	f023 fac1 	bl	802accc <iprintf>
 800774a:	e7ed      	b.n	8007728 <do_memp_free_pool+0xc>
 800774c:	0802c9b4 	.word	0x0802c9b4
 8007750:	0802ca08 	.word	0x0802ca08
 8007754:	0802bc48 	.word	0x0802bc48

08007758 <memp_init_pool>:
  *desc->tab = NULL;
 8007758:	6883      	ldr	r3, [r0, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800775e:	6843      	ldr	r3, [r0, #4]
 8007760:	3303      	adds	r3, #3
 8007762:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007766:	8842      	ldrh	r2, [r0, #2]
 8007768:	b15a      	cbz	r2, 8007782 <memp_init_pool+0x2a>
 800776a:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 800776c:	6881      	ldr	r1, [r0, #8]
 800776e:	6809      	ldr	r1, [r1, #0]
 8007770:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007772:	6881      	ldr	r1, [r0, #8]
 8007774:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007776:	8801      	ldrh	r1, [r0, #0]
 8007778:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800777a:	3201      	adds	r2, #1
 800777c:	8841      	ldrh	r1, [r0, #2]
 800777e:	4291      	cmp	r1, r2
 8007780:	dcf4      	bgt.n	800776c <memp_init_pool+0x14>
}
 8007782:	4770      	bx	lr

08007784 <memp_init>:
{
 8007784:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007786:	4d05      	ldr	r5, [pc, #20]	; (800779c <memp_init+0x18>)
 8007788:	1f2c      	subs	r4, r5, #4
 800778a:	3534      	adds	r5, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 800778c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8007790:	f7ff ffe2 	bl	8007758 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007794:	42ac      	cmp	r4, r5
 8007796:	d1f9      	bne.n	800778c <memp_init+0x8>
}
 8007798:	bd38      	pop	{r3, r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	0802cb0c 	.word	0x0802cb0c

080077a0 <memp_malloc>:
{
 80077a0:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80077a2:	280d      	cmp	r0, #13
 80077a4:	d805      	bhi.n	80077b2 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <memp_malloc+0x24>)
 80077a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80077ac:	f7ff ff92 	bl	80076d4 <do_memp_malloc_pool>
}
 80077b0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <memp_malloc+0x28>)
 80077b4:	f240 1257 	movw	r2, #343	; 0x157
 80077b8:	4904      	ldr	r1, [pc, #16]	; (80077cc <memp_malloc+0x2c>)
 80077ba:	4805      	ldr	r0, [pc, #20]	; (80077d0 <memp_malloc+0x30>)
 80077bc:	f023 fa86 	bl	802accc <iprintf>
 80077c0:	2000      	movs	r0, #0
 80077c2:	e7f5      	b.n	80077b0 <memp_malloc+0x10>
 80077c4:	0802cb0c 	.word	0x0802cb0c
 80077c8:	0802c9b4 	.word	0x0802c9b4
 80077cc:	0802ca28 	.word	0x0802ca28
 80077d0:	0802bc48 	.word	0x0802bc48

080077d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80077d4:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80077d6:	280d      	cmp	r0, #13
 80077d8:	d806      	bhi.n	80077e8 <memp_free+0x14>

  if (mem == NULL) {
 80077da:	b121      	cbz	r1, 80077e6 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80077dc:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <memp_free+0x24>)
 80077de:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80077e2:	f7ff ff9b 	bl	800771c <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80077e6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <memp_free+0x28>)
 80077ea:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80077ee:	4904      	ldr	r1, [pc, #16]	; (8007800 <memp_free+0x2c>)
 80077f0:	4804      	ldr	r0, [pc, #16]	; (8007804 <memp_free+0x30>)
 80077f2:	f023 fa6b 	bl	802accc <iprintf>
 80077f6:	e7f6      	b.n	80077e6 <memp_free+0x12>
 80077f8:	0802cb0c 	.word	0x0802cb0c
 80077fc:	0802c9b4 	.word	0x0802c9b4
 8007800:	0802ca48 	.word	0x0802ca48
 8007804:	0802bc48 	.word	0x0802bc48

08007808 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007808:	f06f 000b 	mvn.w	r0, #11
 800780c:	4770      	bx	lr
	...

08007810 <netif_issue_reports>:
{
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007814:	4605      	mov	r5, r0
 8007816:	b170      	cbz	r0, 8007836 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007818:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800781c:	f003 0205 	and.w	r2, r3, #5
 8007820:	2a05      	cmp	r2, #5
 8007822:	d107      	bne.n	8007834 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007824:	f014 0f01 	tst.w	r4, #1
 8007828:	d004      	beq.n	8007834 <netif_issue_reports+0x24>
 800782a:	686a      	ldr	r2, [r5, #4]
 800782c:	b112      	cbz	r2, 8007834 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800782e:	f013 0f08 	tst.w	r3, #8
 8007832:	d108      	bne.n	8007846 <netif_issue_reports+0x36>
}
 8007834:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007836:	4b06      	ldr	r3, [pc, #24]	; (8007850 <netif_issue_reports+0x40>)
 8007838:	f240 326d 	movw	r2, #877	; 0x36d
 800783c:	4905      	ldr	r1, [pc, #20]	; (8007854 <netif_issue_reports+0x44>)
 800783e:	4806      	ldr	r0, [pc, #24]	; (8007858 <netif_issue_reports+0x48>)
 8007840:	f023 fa44 	bl	802accc <iprintf>
 8007844:	e7e8      	b.n	8007818 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8007846:	1d29      	adds	r1, r5, #4
 8007848:	4628      	mov	r0, r5
 800784a:	f007 f86b 	bl	800e924 <etharp_request>
 800784e:	e7f1      	b.n	8007834 <netif_issue_reports+0x24>
 8007850:	0802cb44 	.word	0x0802cb44
 8007854:	0802cb78 	.word	0x0802cb78
 8007858:	0802bc48 	.word	0x0802bc48

0800785c <netif_do_set_ipaddr>:
{
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	4605      	mov	r5, r0
 8007862:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007864:	460e      	mov	r6, r1
 8007866:	b139      	cbz	r1, 8007878 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007868:	b174      	cbz	r4, 8007888 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800786a:	686b      	ldr	r3, [r5, #4]
 800786c:	6832      	ldr	r2, [r6, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d112      	bne.n	8007898 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8007872:	2000      	movs	r0, #0
}
 8007874:	b002      	add	sp, #8
 8007876:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <netif_do_set_ipaddr+0x60>)
 800787a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800787e:	4910      	ldr	r1, [pc, #64]	; (80078c0 <netif_do_set_ipaddr+0x64>)
 8007880:	4810      	ldr	r0, [pc, #64]	; (80078c4 <netif_do_set_ipaddr+0x68>)
 8007882:	f023 fa23 	bl	802accc <iprintf>
 8007886:	e7ef      	b.n	8007868 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <netif_do_set_ipaddr+0x60>)
 800788a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800788e:	490c      	ldr	r1, [pc, #48]	; (80078c0 <netif_do_set_ipaddr+0x64>)
 8007890:	480c      	ldr	r0, [pc, #48]	; (80078c4 <netif_do_set_ipaddr+0x68>)
 8007892:	f023 fa1b 	bl	802accc <iprintf>
 8007896:	e7e8      	b.n	800786a <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007898:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800789a:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800789c:	a901      	add	r1, sp, #4
 800789e:	4620      	mov	r0, r4
 80078a0:	f001 fa40 	bl	8008d24 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80078a4:	a901      	add	r1, sp, #4
 80078a6:	4620      	mov	r0, r4
 80078a8:	f005 fb00 	bl	800ceac <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80078b0:	2101      	movs	r1, #1
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7ff ffac 	bl	8007810 <netif_issue_reports>
    return 1; /* address changed */
 80078b8:	2001      	movs	r0, #1
 80078ba:	e7db      	b.n	8007874 <netif_do_set_ipaddr+0x18>
 80078bc:	0802cb44 	.word	0x0802cb44
 80078c0:	0802cb9c 	.word	0x0802cb9c
 80078c4:	0802bc48 	.word	0x0802bc48

080078c8 <netif_init>:
}
 80078c8:	4770      	bx	lr
	...

080078cc <netif_set_addr>:
{
 80078cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ce:	b083      	sub	sp, #12
 80078d0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80078d2:	4d15      	ldr	r5, [pc, #84]	; (8007928 <netif_set_addr+0x5c>)
 80078d4:	2900      	cmp	r1, #0
 80078d6:	bf18      	it	ne
 80078d8:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 80078da:	4f13      	ldr	r7, [pc, #76]	; (8007928 <netif_set_addr+0x5c>)
 80078dc:	2a00      	cmp	r2, #0
 80078de:	bf18      	it	ne
 80078e0:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 80078e2:	4e11      	ldr	r6, [pc, #68]	; (8007928 <netif_set_addr+0x5c>)
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf18      	it	ne
 80078e8:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 80078ea:	b10d      	cbz	r5, 80078f0 <netif_set_addr+0x24>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b993      	cbnz	r3, 8007916 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80078f0:	aa01      	add	r2, sp, #4
 80078f2:	4629      	mov	r1, r5
 80078f4:	4620      	mov	r0, r4
 80078f6:	f7ff ffb1 	bl	800785c <netif_do_set_ipaddr>
 80078fa:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68a2      	ldr	r2, [r4, #8]
 8007900:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007902:	bf18      	it	ne
 8007904:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007906:	6833      	ldr	r3, [r6, #0]
 8007908:	68e2      	ldr	r2, [r4, #12]
 800790a:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800790c:	bf18      	it	ne
 800790e:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8007910:	b119      	cbz	r1, 800791a <netif_set_addr+0x4e>
}
 8007912:	b003      	add	sp, #12
 8007914:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8007916:	2100      	movs	r1, #0
 8007918:	e7f0      	b.n	80078fc <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800791a:	aa01      	add	r2, sp, #4
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f7ff ff9c 	bl	800785c <netif_do_set_ipaddr>
}
 8007924:	e7f5      	b.n	8007912 <netif_set_addr+0x46>
 8007926:	bf00      	nop
 8007928:	0802ec50 	.word	0x0802ec50

0800792c <netif_add>:
{
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007932:	4606      	mov	r6, r0
 8007934:	2800      	cmp	r0, #0
 8007936:	d02d      	beq.n	8007994 <netif_add+0x68>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007938:	2c00      	cmp	r4, #0
 800793a:	d034      	beq.n	80079a6 <netif_add+0x7a>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800793c:	2000      	movs	r0, #0
 800793e:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007940:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007942:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8007944:	4d3c      	ldr	r5, [pc, #240]	; (8007a38 <netif_add+0x10c>)
 8007946:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8007948:	8530      	strh	r0, [r6, #40]	; 0x28
  netif->flags = 0;
 800794a:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800794e:	6270      	str	r0, [r6, #36]	; 0x24
  netif->link_callback = NULL;
 8007950:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8007952:	9808      	ldr	r0, [sp, #32]
 8007954:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8007956:	4839      	ldr	r0, [pc, #228]	; (8007a3c <netif_add+0x110>)
 8007958:	7800      	ldrb	r0, [r0, #0]
 800795a:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
  netif->input = input;
 800795e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007960:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007962:	4837      	ldr	r0, [pc, #220]	; (8007a40 <netif_add+0x114>)
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf08      	it	eq
 8007968:	4603      	moveq	r3, r0
 800796a:	2a00      	cmp	r2, #0
 800796c:	bf08      	it	eq
 800796e:	4602      	moveq	r2, r0
 8007970:	2900      	cmp	r1, #0
 8007972:	bf08      	it	eq
 8007974:	4601      	moveq	r1, r0
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff ffa8 	bl	80078cc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800797c:	4630      	mov	r0, r6
 800797e:	47a0      	blx	r4
 8007980:	2800      	cmp	r0, #0
 8007982:	d147      	bne.n	8007a14 <netif_add+0xe8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007984:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8007a58 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007988:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007a4c <netif_add+0x120>
 800798c:	4f2d      	ldr	r7, [pc, #180]	; (8007a44 <netif_add+0x118>)
 800798e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007a5c <netif_add+0x130>
 8007992:	e031      	b.n	80079f8 <netif_add+0xcc>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007994:	4b2b      	ldr	r3, [pc, #172]	; (8007a44 <netif_add+0x118>)
 8007996:	f240 1227 	movw	r2, #295	; 0x127
 800799a:	492b      	ldr	r1, [pc, #172]	; (8007a48 <netif_add+0x11c>)
 800799c:	482b      	ldr	r0, [pc, #172]	; (8007a4c <netif_add+0x120>)
 800799e:	f023 f995 	bl	802accc <iprintf>
 80079a2:	4630      	mov	r0, r6
 80079a4:	e045      	b.n	8007a32 <netif_add+0x106>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <netif_add+0x118>)
 80079a8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80079ac:	4928      	ldr	r1, [pc, #160]	; (8007a50 <netif_add+0x124>)
 80079ae:	4827      	ldr	r0, [pc, #156]	; (8007a4c <netif_add+0x120>)
 80079b0:	f023 f98c 	bl	802accc <iprintf>
 80079b4:	2000      	movs	r0, #0
 80079b6:	e03c      	b.n	8007a32 <netif_add+0x106>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80079b8:	463b      	mov	r3, r7
 80079ba:	f240 128b 	movw	r2, #395	; 0x18b
 80079be:	4649      	mov	r1, r9
 80079c0:	4640      	mov	r0, r8
 80079c2:	f023 f983 	bl	802accc <iprintf>
 80079c6:	e010      	b.n	80079ea <netif_add+0xbe>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80079c8:	463b      	mov	r3, r7
 80079ca:	f240 128d 	movw	r2, #397	; 0x18d
 80079ce:	4921      	ldr	r1, [pc, #132]	; (8007a54 <netif_add+0x128>)
 80079d0:	4640      	mov	r0, r8
 80079d2:	f023 f97b 	bl	802accc <iprintf>
        if (netif2->num == netif->num) {
 80079d6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80079da:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80079de:	429a      	cmp	r2, r3
 80079e0:	d007      	beq.n	80079f2 <netif_add+0xc6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80079e2:	6824      	ldr	r4, [r4, #0]
 80079e4:	b1c4      	cbz	r4, 8007a18 <netif_add+0xec>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80079e6:	42a6      	cmp	r6, r4
 80079e8:	d0e6      	beq.n	80079b8 <netif_add+0x8c>
        num_netifs++;
 80079ea:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80079ec:	2dff      	cmp	r5, #255	; 0xff
 80079ee:	ddf2      	ble.n	80079d6 <netif_add+0xaa>
 80079f0:	e7ea      	b.n	80079c8 <netif_add+0x9c>
          netif->num++;
 80079f2:	3301      	adds	r3, #1
 80079f4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
      if (netif->num == 255) {
 80079f8:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80079fc:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 80079fe:	bf04      	itt	eq
 8007a00:	2300      	moveq	r3, #0
 8007a02:	f886 3034 	strbeq.w	r3, [r6, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007a06:	f8da 4000 	ldr.w	r4, [sl]
 8007a0a:	b12c      	cbz	r4, 8007a18 <netif_add+0xec>
      num_netifs = 0;
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	e7ea      	b.n	80079e6 <netif_add+0xba>
    netif_num = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	e007      	b.n	8007a24 <netif_add+0xf8>
    return NULL;
 8007a14:	2000      	movs	r0, #0
 8007a16:	e00c      	b.n	8007a32 <netif_add+0x106>
  if (netif->num == 254) {
 8007a18:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8007a1c:	2bfe      	cmp	r3, #254	; 0xfe
 8007a1e:	d0f7      	beq.n	8007a10 <netif_add+0xe4>
    netif_num = (u8_t)(netif->num + 1);
 8007a20:	3301      	adds	r3, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4a05      	ldr	r2, [pc, #20]	; (8007a3c <netif_add+0x110>)
 8007a26:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8007a28:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <netif_add+0x12c>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8007a2e:	601e      	str	r6, [r3, #0]
  return netif;
 8007a30:	4630      	mov	r0, r6
}
 8007a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a36:	bf00      	nop
 8007a38:	08007809 	.word	0x08007809
 8007a3c:	20010744 	.word	0x20010744
 8007a40:	0802ec50 	.word	0x0802ec50
 8007a44:	0802cb44 	.word	0x0802cb44
 8007a48:	0802cbac 	.word	0x0802cbac
 8007a4c:	0802bc48 	.word	0x0802bc48
 8007a50:	0802cbc8 	.word	0x0802cbc8
 8007a54:	0802cc00 	.word	0x0802cc00
 8007a58:	20014624 	.word	0x20014624
 8007a5c:	0802cbec 	.word	0x0802cbec

08007a60 <netif_set_default>:
  netif_default = netif;
 8007a60:	4b01      	ldr	r3, [pc, #4]	; (8007a68 <netif_set_default+0x8>)
 8007a62:	6018      	str	r0, [r3, #0]
}
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20014628 	.word	0x20014628

08007a6c <netif_set_up>:
{
 8007a6c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007a6e:	b128      	cbz	r0, 8007a7c <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007a70:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007a74:	f013 0f01 	tst.w	r3, #1
 8007a78:	d008      	beq.n	8007a8c <netif_set_up+0x20>
}
 8007a7a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007a7c:	4b07      	ldr	r3, [pc, #28]	; (8007a9c <netif_set_up+0x30>)
 8007a7e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007a82:	4907      	ldr	r1, [pc, #28]	; (8007aa0 <netif_set_up+0x34>)
 8007a84:	4807      	ldr	r0, [pc, #28]	; (8007aa4 <netif_set_up+0x38>)
 8007a86:	f023 f921 	bl	802accc <iprintf>
 8007a8a:	e7f6      	b.n	8007a7a <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007a94:	2103      	movs	r1, #3
 8007a96:	f7ff febb 	bl	8007810 <netif_issue_reports>
 8007a9a:	e7ee      	b.n	8007a7a <netif_set_up+0xe>
 8007a9c:	0802cb44 	.word	0x0802cb44
 8007aa0:	0802cc30 	.word	0x0802cc30
 8007aa4:	0802bc48 	.word	0x0802bc48

08007aa8 <netif_set_down>:
{
 8007aa8:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007aaa:	b160      	cbz	r0, 8007ac6 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8007aac:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007ab0:	f013 0f01 	tst.w	r3, #1
 8007ab4:	d006      	beq.n	8007ac4 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007ab6:	f023 0101 	bic.w	r1, r3, #1
 8007aba:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007abe:	f013 0f08 	tst.w	r3, #8
 8007ac2:	d108      	bne.n	8007ad6 <netif_set_down+0x2e>
}
 8007ac4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <netif_set_down+0x34>)
 8007ac8:	f240 329b 	movw	r2, #923	; 0x39b
 8007acc:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <netif_set_down+0x38>)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <netif_set_down+0x3c>)
 8007ad0:	f023 f8fc 	bl	802accc <iprintf>
 8007ad4:	e7f6      	b.n	8007ac4 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8007ad6:	f006 fe59 	bl	800e78c <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8007ada:	e7f3      	b.n	8007ac4 <netif_set_down+0x1c>
 8007adc:	0802cb44 	.word	0x0802cb44
 8007ae0:	0802cc4c 	.word	0x0802cc4c
 8007ae4:	0802bc48 	.word	0x0802bc48

08007ae8 <netif_set_link_up>:
{
 8007ae8:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007aea:	b130      	cbz	r0, 8007afa <netif_set_link_up+0x12>
 8007aec:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007aee:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007af2:	f013 0f04 	tst.w	r3, #4
 8007af6:	d008      	beq.n	8007b0a <netif_set_link_up+0x22>
}
 8007af8:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007afa:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <netif_set_link_up+0x44>)
 8007afc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007b00:	490b      	ldr	r1, [pc, #44]	; (8007b30 <netif_set_link_up+0x48>)
 8007b02:	480c      	ldr	r0, [pc, #48]	; (8007b34 <netif_set_link_up+0x4c>)
 8007b04:	f023 f8e2 	bl	802accc <iprintf>
 8007b08:	e7f6      	b.n	8007af8 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007b0a:	f043 0304 	orr.w	r3, r3, #4
 8007b0e:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 8007b12:	f006 fa13 	bl	800df3c <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007b16:	2103      	movs	r1, #3
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7ff fe79 	bl	8007810 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8007b1e:	69e3      	ldr	r3, [r4, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0e9      	beq.n	8007af8 <netif_set_link_up+0x10>
 8007b24:	4620      	mov	r0, r4
 8007b26:	4798      	blx	r3
 8007b28:	e7e6      	b.n	8007af8 <netif_set_link_up+0x10>
 8007b2a:	bf00      	nop
 8007b2c:	0802cb44 	.word	0x0802cb44
 8007b30:	0802cc6c 	.word	0x0802cc6c
 8007b34:	0802bc48 	.word	0x0802bc48

08007b38 <netif_set_link_down>:
{
 8007b38:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007b3a:	b160      	cbz	r0, 8007b56 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007b3c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007b40:	f013 0f04 	tst.w	r3, #4
 8007b44:	d006      	beq.n	8007b54 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007b46:	f023 0304 	bic.w	r3, r3, #4
 8007b4a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8007b4e:	69c3      	ldr	r3, [r0, #28]
 8007b50:	b103      	cbz	r3, 8007b54 <netif_set_link_down+0x1c>
 8007b52:	4798      	blx	r3
}
 8007b54:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007b56:	4b04      	ldr	r3, [pc, #16]	; (8007b68 <netif_set_link_down+0x30>)
 8007b58:	f240 4206 	movw	r2, #1030	; 0x406
 8007b5c:	4903      	ldr	r1, [pc, #12]	; (8007b6c <netif_set_link_down+0x34>)
 8007b5e:	4804      	ldr	r0, [pc, #16]	; (8007b70 <netif_set_link_down+0x38>)
 8007b60:	f023 f8b4 	bl	802accc <iprintf>
 8007b64:	e7f6      	b.n	8007b54 <netif_set_link_down+0x1c>
 8007b66:	bf00      	nop
 8007b68:	0802cb44 	.word	0x0802cb44
 8007b6c:	0802cc90 	.word	0x0802cc90
 8007b70:	0802bc48 	.word	0x0802bc48

08007b74 <netif_set_link_callback>:
  if (netif) {
 8007b74:	b100      	cbz	r0, 8007b78 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8007b76:	61c1      	str	r1, [r0, #28]
}
 8007b78:	4770      	bx	lr
	...

08007b7c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	b160      	cbz	r0, 8007b9a <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <netif_get_by_index+0x24>)
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	b150      	cbz	r0, 8007b9c <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 8007b86:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8007b92:	6800      	ldr	r0, [r0, #0]
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d1f6      	bne.n	8007b86 <netif_get_by_index+0xa>
 8007b98:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007b9a:	2000      	movs	r0, #0
}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20014624 	.word	0x20014624

08007ba4 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	b150      	cbz	r0, 8007bbe <pbuf_skip_const+0x1a>
 8007ba8:	8958      	ldrh	r0, [r3, #10]
 8007baa:	4288      	cmp	r0, r1
 8007bac:	d806      	bhi.n	8007bbc <pbuf_skip_const+0x18>
    offset_left = (u16_t)(offset_left - q->len);
 8007bae:	1a09      	subs	r1, r1, r0
 8007bb0:	b289      	uxth	r1, r1
    q = q->next;
 8007bb2:	681b      	ldr	r3, [r3, #0]
  while ((q != NULL) && (q->len <= offset_left)) {
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f7      	bne.n	8007ba8 <pbuf_skip_const+0x4>
    q = q->next;
 8007bb8:	4618      	mov	r0, r3
 8007bba:	e000      	b.n	8007bbe <pbuf_skip_const+0x1a>
 8007bbc:	4618      	mov	r0, r3
  }
  if (out_offset != NULL) {
 8007bbe:	b102      	cbz	r2, 8007bc2 <pbuf_skip_const+0x1e>
    *out_offset = offset_left;
 8007bc0:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8007bc2:	4770      	bx	lr

08007bc4 <pbuf_add_header_impl>:
{
 8007bc4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007bc6:	b1c0      	cbz	r0, 8007bfa <pbuf_add_header_impl+0x36>
 8007bc8:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007bca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007bce:	d22b      	bcs.n	8007c28 <pbuf_add_header_impl+0x64>
  if (header_size_increment == 0) {
 8007bd0:	b321      	cbz	r1, 8007c1c <pbuf_add_header_impl+0x58>
  increment_magnitude = (u16_t)header_size_increment;
 8007bd2:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007bd4:	8918      	ldrh	r0, [r3, #8]
 8007bd6:	4420      	add	r0, r4
 8007bd8:	b280      	uxth	r0, r0
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	d320      	bcc.n	8007c20 <pbuf_add_header_impl+0x5c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007bde:	f993 500c 	ldrsb.w	r5, [r3, #12]
 8007be2:	2d00      	cmp	r5, #0
 8007be4:	db12      	blt.n	8007c0c <pbuf_add_header_impl+0x48>
    if (force) {
 8007be6:	b1ea      	cbz	r2, 8007c24 <pbuf_add_header_impl+0x60>
      payload = (u8_t *)p->payload - header_size_increment;
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	1a51      	subs	r1, r2, r1
  p->payload = payload;
 8007bec:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007bee:	895a      	ldrh	r2, [r3, #10]
 8007bf0:	4414      	add	r4, r2
 8007bf2:	815c      	strh	r4, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007bf4:	8118      	strh	r0, [r3, #8]
  return 0;
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e017      	b.n	8007c2a <pbuf_add_header_impl+0x66>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007bfa:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <pbuf_add_header_impl+0x68>)
 8007bfc:	f240 12df 	movw	r2, #479	; 0x1df
 8007c00:	490b      	ldr	r1, [pc, #44]	; (8007c30 <pbuf_add_header_impl+0x6c>)
 8007c02:	480c      	ldr	r0, [pc, #48]	; (8007c34 <pbuf_add_header_impl+0x70>)
 8007c04:	f023 f862 	bl	802accc <iprintf>
    return 1;
 8007c08:	2001      	movs	r0, #1
 8007c0a:	e00e      	b.n	8007c2a <pbuf_add_header_impl+0x66>
    payload = (u8_t *)p->payload - header_size_increment;
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007c10:	f103 0210 	add.w	r2, r3, #16
 8007c14:	4291      	cmp	r1, r2
 8007c16:	d2e9      	bcs.n	8007bec <pbuf_add_header_impl+0x28>
      return 1;
 8007c18:	2001      	movs	r0, #1
 8007c1a:	e006      	b.n	8007c2a <pbuf_add_header_impl+0x66>
    return 0;
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	e004      	b.n	8007c2a <pbuf_add_header_impl+0x66>
    return 1;
 8007c20:	2001      	movs	r0, #1
 8007c22:	e002      	b.n	8007c2a <pbuf_add_header_impl+0x66>
      return 1;
 8007c24:	2001      	movs	r0, #1
 8007c26:	e000      	b.n	8007c2a <pbuf_add_header_impl+0x66>
    return 1;
 8007c28:	2001      	movs	r0, #1
}
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	0802ccb4 	.word	0x0802ccb4
 8007c30:	0802e6fc 	.word	0x0802e6fc
 8007c34:	0802bc48 	.word	0x0802bc48

08007c38 <pbuf_free_ooseq_callback>:
{
 8007c38:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007c3a:	f008 fa1d 	bl	8010078 <sys_arch_protect>
 8007c3e:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <pbuf_free_ooseq_callback+0x28>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	f008 fa24 	bl	8010090 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <pbuf_free_ooseq_callback+0x2c>)
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	b138      	cbz	r0, 8007c5e <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 8007c4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007c50:	b91b      	cbnz	r3, 8007c5a <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007c52:	68c0      	ldr	r0, [r0, #12]
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1fa      	bne.n	8007c4e <pbuf_free_ooseq_callback+0x16>
 8007c58:	e001      	b.n	8007c5e <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 8007c5a:	f000 ff13 	bl	8008a84 <tcp_free_ooseq>
}
 8007c5e:	bd08      	pop	{r3, pc}
 8007c60:	2001462c 	.word	0x2001462c
 8007c64:	20014634 	.word	0x20014634

08007c68 <pbuf_alloc_reference>:
{
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007c70:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d110      	bne.n	8007c9c <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007c7a:	200c      	movs	r0, #12
 8007c7c:	f7ff fd90 	bl	80077a0 <memp_malloc>
  if (p == NULL) {
 8007c80:	4603      	mov	r3, r0
 8007c82:	b148      	cbz	r0, 8007c98 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8007c84:	2200      	movs	r2, #0
 8007c86:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8007c88:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8007c8a:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8007c8c:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8007c8e:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8007c90:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8007c92:	2101      	movs	r1, #1
 8007c94:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007c96:	73c2      	strb	r2, [r0, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <pbuf_alloc_reference+0x44>)
 8007c9e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007ca2:	4903      	ldr	r1, [pc, #12]	; (8007cb0 <pbuf_alloc_reference+0x48>)
 8007ca4:	4803      	ldr	r0, [pc, #12]	; (8007cb4 <pbuf_alloc_reference+0x4c>)
 8007ca6:	f023 f811 	bl	802accc <iprintf>
 8007caa:	e7e6      	b.n	8007c7a <pbuf_alloc_reference+0x12>
 8007cac:	0802ccb4 	.word	0x0802ccb4
 8007cb0:	0802cce4 	.word	0x0802cce4
 8007cb4:	0802bc48 	.word	0x0802bc48

08007cb8 <pbuf_alloced_custom>:
{
 8007cb8:	b470      	push	{r4, r5, r6}
 8007cba:	9c03      	ldr	r4, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007cbc:	3003      	adds	r0, #3
 8007cbe:	f020 0003 	bic.w	r0, r0, #3
 8007cc2:	180e      	adds	r6, r1, r0
 8007cc4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8007cc8:	42ae      	cmp	r6, r5
 8007cca:	d80f      	bhi.n	8007cec <pbuf_alloced_custom+0x34>
  if (payload_mem != NULL) {
 8007ccc:	b104      	cbz	r4, 8007cd0 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007cce:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007cd0:	4618      	mov	r0, r3
  p->next = NULL;
 8007cd2:	2500      	movs	r5, #0
 8007cd4:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8007cd6:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8007cd8:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8007cda:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 8007cdc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007cde:	2202      	movs	r2, #2
 8007ce0:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007ce6:	73dd      	strb	r5, [r3, #15]
}
 8007ce8:	bc70      	pop	{r4, r5, r6}
 8007cea:	4770      	bx	lr
    return NULL;
 8007cec:	2000      	movs	r0, #0
 8007cee:	e7fb      	b.n	8007ce8 <pbuf_alloced_custom+0x30>

08007cf0 <pbuf_add_header>:
{
 8007cf0:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f7ff ff66 	bl	8007bc4 <pbuf_add_header_impl>
}
 8007cf8:	bd08      	pop	{r3, pc}
	...

08007cfc <pbuf_remove_header>:
{
 8007cfc:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007cfe:	b190      	cbz	r0, 8007d26 <pbuf_remove_header+0x2a>
 8007d00:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007d02:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007d06:	d222      	bcs.n	8007d4e <pbuf_remove_header+0x52>
  if (header_size_decrement == 0) {
 8007d08:	b1f9      	cbz	r1, 8007d4a <pbuf_remove_header+0x4e>
  increment_magnitude = (u16_t)header_size_decrement;
 8007d0a:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007d0c:	895a      	ldrh	r2, [r3, #10]
 8007d0e:	4282      	cmp	r2, r0
 8007d10:	d312      	bcc.n	8007d38 <pbuf_remove_header+0x3c>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007d12:	685c      	ldr	r4, [r3, #4]
 8007d14:	4421      	add	r1, r4
 8007d16:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007d18:	1a12      	subs	r2, r2, r0
 8007d1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007d1c:	891a      	ldrh	r2, [r3, #8]
 8007d1e:	1a10      	subs	r0, r2, r0
 8007d20:	8118      	strh	r0, [r3, #8]
  return 0;
 8007d22:	2000      	movs	r0, #0
}
 8007d24:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <pbuf_remove_header+0x58>)
 8007d28:	f240 224b 	movw	r2, #587	; 0x24b
 8007d2c:	490a      	ldr	r1, [pc, #40]	; (8007d58 <pbuf_remove_header+0x5c>)
 8007d2e:	480b      	ldr	r0, [pc, #44]	; (8007d5c <pbuf_remove_header+0x60>)
 8007d30:	f022 ffcc 	bl	802accc <iprintf>
    return 1;
 8007d34:	2001      	movs	r0, #1
 8007d36:	e7f5      	b.n	8007d24 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <pbuf_remove_header+0x58>)
 8007d3a:	f240 2255 	movw	r2, #597	; 0x255
 8007d3e:	4908      	ldr	r1, [pc, #32]	; (8007d60 <pbuf_remove_header+0x64>)
 8007d40:	4806      	ldr	r0, [pc, #24]	; (8007d5c <pbuf_remove_header+0x60>)
 8007d42:	f022 ffc3 	bl	802accc <iprintf>
 8007d46:	2001      	movs	r0, #1
 8007d48:	e7ec      	b.n	8007d24 <pbuf_remove_header+0x28>
    return 0;
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e7ea      	b.n	8007d24 <pbuf_remove_header+0x28>
    return 1;
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e7e8      	b.n	8007d24 <pbuf_remove_header+0x28>
 8007d52:	bf00      	nop
 8007d54:	0802ccb4 	.word	0x0802ccb4
 8007d58:	0802e6fc 	.word	0x0802e6fc
 8007d5c:	0802bc48 	.word	0x0802bc48
 8007d60:	0802ccf8 	.word	0x0802ccf8

08007d64 <pbuf_header_force>:
{
 8007d64:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8007d66:	2900      	cmp	r1, #0
 8007d68:	db03      	blt.n	8007d72 <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f7ff ff2a 	bl	8007bc4 <pbuf_add_header_impl>
}
 8007d70:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007d72:	4249      	negs	r1, r1
 8007d74:	f7ff ffc2 	bl	8007cfc <pbuf_remove_header>
 8007d78:	e7fa      	b.n	8007d70 <pbuf_header_force+0xc>
	...

08007d7c <pbuf_free>:
{
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p == NULL) {
 8007d80:	b140      	cbz	r0, 8007d94 <pbuf_free+0x18>
 8007d82:	4604      	mov	r4, r0
  count = 0;
 8007d84:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007d86:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007e44 <pbuf_free+0xc8>
 8007d8a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8007e58 <pbuf_free+0xdc>
 8007d8e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007e4c <pbuf_free+0xd0>
 8007d92:	e01a      	b.n	8007dca <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007d94:	4b2b      	ldr	r3, [pc, #172]	; (8007e44 <pbuf_free+0xc8>)
 8007d96:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007d9a:	492b      	ldr	r1, [pc, #172]	; (8007e48 <pbuf_free+0xcc>)
 8007d9c:	482b      	ldr	r0, [pc, #172]	; (8007e4c <pbuf_free+0xd0>)
 8007d9e:	f022 ff95 	bl	802accc <iprintf>
    return 0;
 8007da2:	2600      	movs	r6, #0
}
 8007da4:	4630      	mov	r0, r6
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007daa:	464b      	mov	r3, r9
 8007dac:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007db0:	4651      	mov	r1, sl
 8007db2:	4640      	mov	r0, r8
 8007db4:	f022 ff8a 	bl	802accc <iprintf>
 8007db8:	e00d      	b.n	8007dd6 <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	4798      	blx	r3
      count++;
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	d0ed      	beq.n	8007da4 <pbuf_free+0x28>
      p = q;
 8007dc8:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 8007dca:	f008 f955 	bl	8010078 <sys_arch_protect>
 8007dce:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007dd0:	7ba3      	ldrb	r3, [r4, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0e9      	beq.n	8007daa <pbuf_free+0x2e>
    ref = --(p->ref);
 8007dd6:	7ba5      	ldrb	r5, [r4, #14]
 8007dd8:	3d01      	subs	r5, #1
 8007dda:	b2ed      	uxtb	r5, r5
 8007ddc:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007dde:	4638      	mov	r0, r7
 8007de0:	f008 f956 	bl	8010090 <sys_arch_unprotect>
    if (ref == 0) {
 8007de4:	2d00      	cmp	r5, #0
 8007de6:	d1dd      	bne.n	8007da4 <pbuf_free+0x28>
      q = p->next;
 8007de8:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007dea:	7b63      	ldrb	r3, [r4, #13]
 8007dec:	f013 0f02 	tst.w	r3, #2
 8007df0:	d00a      	beq.n	8007e08 <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e0      	bne.n	8007dba <pbuf_free+0x3e>
 8007df8:	464b      	mov	r3, r9
 8007dfa:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007dfe:	4914      	ldr	r1, [pc, #80]	; (8007e50 <pbuf_free+0xd4>)
 8007e00:	4640      	mov	r0, r8
 8007e02:	f022 ff63 	bl	802accc <iprintf>
 8007e06:	e7d8      	b.n	8007dba <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 8007e08:	7b23      	ldrb	r3, [r4, #12]
 8007e0a:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d006      	beq.n	8007e20 <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d009      	beq.n	8007e2a <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007e16:	b96b      	cbnz	r3, 8007e34 <pbuf_free+0xb8>
          mem_free(p);
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7ff f9e1 	bl	80071e0 <mem_free>
 8007e1e:	e7cf      	b.n	8007dc0 <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 8007e20:	4621      	mov	r1, r4
 8007e22:	200d      	movs	r0, #13
 8007e24:	f7ff fcd6 	bl	80077d4 <memp_free>
 8007e28:	e7ca      	b.n	8007dc0 <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	200c      	movs	r0, #12
 8007e2e:	f7ff fcd1 	bl	80077d4 <memp_free>
 8007e32:	e7c5      	b.n	8007dc0 <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007e34:	464b      	mov	r3, r9
 8007e36:	f240 320f 	movw	r2, #783	; 0x30f
 8007e3a:	4906      	ldr	r1, [pc, #24]	; (8007e54 <pbuf_free+0xd8>)
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	f022 ff45 	bl	802accc <iprintf>
 8007e42:	e7bd      	b.n	8007dc0 <pbuf_free+0x44>
 8007e44:	0802ccb4 	.word	0x0802ccb4
 8007e48:	0802e6fc 	.word	0x0802e6fc
 8007e4c:	0802bc48 	.word	0x0802bc48
 8007e50:	0802cd30 	.word	0x0802cd30
 8007e54:	0802cd54 	.word	0x0802cd54
 8007e58:	0802cd18 	.word	0x0802cd18

08007e5c <pbuf_alloc>:
{
 8007e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8007e62:	b285      	uxth	r5, r0
  switch (type) {
 8007e64:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8007e68:	d03d      	beq.n	8007ee6 <pbuf_alloc+0x8a>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	d80e      	bhi.n	8007e8c <pbuf_alloc+0x30>
 8007e6e:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d02f      	beq.n	8007ed8 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007e78:	4b47      	ldr	r3, [pc, #284]	; (8007f98 <pbuf_alloc+0x13c>)
 8007e7a:	f240 1227 	movw	r2, #295	; 0x127
 8007e7e:	4947      	ldr	r1, [pc, #284]	; (8007f9c <pbuf_alloc+0x140>)
 8007e80:	4847      	ldr	r0, [pc, #284]	; (8007fa0 <pbuf_alloc+0x144>)
 8007e82:	f022 ff23 	bl	802accc <iprintf>
      return NULL;
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	e029      	b.n	8007ee0 <pbuf_alloc+0x84>
  switch (type) {
 8007e8c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8007e90:	d1f2      	bne.n	8007e78 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007e92:	1ceb      	adds	r3, r5, #3
 8007e94:	f023 0303 	bic.w	r3, r3, #3
 8007e98:	1cca      	adds	r2, r1, #3
 8007e9a:	f022 0503 	bic.w	r5, r2, #3
 8007e9e:	442b      	add	r3, r5
 8007ea0:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007ea2:	f103 0010 	add.w	r0, r3, #16
 8007ea6:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	d36e      	bcc.n	8007f8a <pbuf_alloc+0x12e>
 8007eac:	4285      	cmp	r5, r0
 8007eae:	d86f      	bhi.n	8007f90 <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007eb0:	f7ff fb54 	bl	800755c <mem_malloc>
      if (p == NULL) {
 8007eb4:	4680      	mov	r8, r0
 8007eb6:	b198      	cbz	r0, 8007ee0 <pbuf_alloc+0x84>
  p->next = NULL;
 8007eb8:	2200      	movs	r2, #0
 8007eba:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007ebc:	1903      	adds	r3, r0, r4
 8007ebe:	3313      	adds	r3, #19
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8007ec4:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8007ec6:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8007ec8:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8007eca:	2380      	movs	r3, #128	; 0x80
 8007ecc:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8007ece:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007ed4:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007ed6:	e003      	b.n	8007ee0 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8007ed8:	2000      	movs	r0, #0
 8007eda:	f7ff fec5 	bl	8007c68 <pbuf_alloc_reference>
 8007ede:	4680      	mov	r8, r0
}
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8007ee6:	2400      	movs	r4, #0
 8007ee8:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007eea:	f04f 0a0d 	mov.w	sl, #13
  p->next = NULL;
 8007eee:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 8007ef0:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8007ef4:	e025      	b.n	8007f42 <pbuf_alloc+0xe6>
  SYS_ARCH_PROTECT(old_level);
 8007ef6:	f008 f8bf 	bl	8010078 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007efa:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <pbuf_alloc+0x148>)
 8007efc:	781d      	ldrb	r5, [r3, #0]
 8007efe:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007f04:	f008 f8c4 	bl	8010090 <sys_arch_unprotect>
  if (!queued) {
 8007f08:	b13d      	cbz	r5, 8007f1a <pbuf_alloc+0xbe>
          if (p) {
 8007f0a:	f1b8 0f00 	cmp.w	r8, #0
 8007f0e:	d0e7      	beq.n	8007ee0 <pbuf_alloc+0x84>
            pbuf_free(p);
 8007f10:	4640      	mov	r0, r8
 8007f12:	f7ff ff33 	bl	8007d7c <pbuf_free>
          return NULL;
 8007f16:	46a0      	mov	r8, r4
 8007f18:	e7e2      	b.n	8007ee0 <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4822      	ldr	r0, [pc, #136]	; (8007fa8 <pbuf_alloc+0x14c>)
 8007f1e:	f7fe fb4d 	bl	80065bc <tcpip_try_callback>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d0f1      	beq.n	8007f0a <pbuf_alloc+0xae>
 8007f26:	f008 f8a7 	bl	8010078 <sys_arch_protect>
 8007f2a:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <pbuf_alloc+0x148>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	f008 f8ae 	bl	8010090 <sys_arch_unprotect>
 8007f34:	e7e9      	b.n	8007f0a <pbuf_alloc+0xae>
          p = q;
 8007f36:	4680      	mov	r8, r0
        rem_len = (u16_t)(rem_len - qlen);
 8007f38:	1a76      	subs	r6, r6, r1
 8007f3a:	b2b6      	uxth	r6, r6
        offset = 0;
 8007f3c:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	d0ce      	beq.n	8007ee0 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007f42:	46a1      	mov	r9, r4
 8007f44:	4650      	mov	r0, sl
 8007f46:	f7ff fc2b 	bl	80077a0 <memp_malloc>
        if (q == NULL) {
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d0d2      	beq.n	8007ef6 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007f50:	1ce9      	adds	r1, r5, #3
 8007f52:	f021 0103 	bic.w	r1, r1, #3
 8007f56:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8007f5a:	b289      	uxth	r1, r1
 8007f5c:	42b1      	cmp	r1, r6
 8007f5e:	bf28      	it	cs
 8007f60:	4631      	movcs	r1, r6
  p->next = NULL;
 8007f62:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007f64:	4405      	add	r5, r0
 8007f66:	3513      	adds	r5, #19
 8007f68:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 8007f6c:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8007f6e:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8007f70:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8007f72:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8007f76:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007f7c:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	d0d8      	beq.n	8007f36 <pbuf_alloc+0xda>
          last->next = q;
 8007f84:	f8c9 0000 	str.w	r0, [r9]
 8007f88:	e7d6      	b.n	8007f38 <pbuf_alloc+0xdc>
        return NULL;
 8007f8a:	f04f 0800 	mov.w	r8, #0
 8007f8e:	e7a7      	b.n	8007ee0 <pbuf_alloc+0x84>
 8007f90:	f04f 0800 	mov.w	r8, #0
 8007f94:	e7a4      	b.n	8007ee0 <pbuf_alloc+0x84>
 8007f96:	bf00      	nop
 8007f98:	0802ccb4 	.word	0x0802ccb4
 8007f9c:	0802cd68 	.word	0x0802cd68
 8007fa0:	0802bc48 	.word	0x0802bc48
 8007fa4:	2001462c 	.word	0x2001462c
 8007fa8:	08007c39 	.word	0x08007c39

08007fac <pbuf_realloc>:
{
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	b168      	cbz	r0, 8007fd2 <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 8007fb6:	8927      	ldrh	r7, [r4, #8]
 8007fb8:	42b7      	cmp	r7, r6
 8007fba:	d939      	bls.n	8008030 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 8007fbc:	8963      	ldrh	r3, [r4, #10]
 8007fbe:	429e      	cmp	r6, r3
 8007fc0:	d923      	bls.n	800800a <pbuf_realloc+0x5e>
  rem_len = new_len;
 8007fc2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007fc4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8008058 <pbuf_realloc+0xac>
 8007fc8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8008068 <pbuf_realloc+0xbc>
 8007fcc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8008060 <pbuf_realloc+0xb4>
 8007fd0:	e00a      	b.n	8007fe8 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007fd2:	4b21      	ldr	r3, [pc, #132]	; (8008058 <pbuf_realloc+0xac>)
 8007fd4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007fd8:	4920      	ldr	r1, [pc, #128]	; (800805c <pbuf_realloc+0xb0>)
 8007fda:	4821      	ldr	r0, [pc, #132]	; (8008060 <pbuf_realloc+0xb4>)
 8007fdc:	f022 fe76 	bl	802accc <iprintf>
 8007fe0:	e7e9      	b.n	8007fb6 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 8007fe2:	8963      	ldrh	r3, [r4, #10]
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	d211      	bcs.n	800800c <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8007fe8:	1aed      	subs	r5, r5, r3
 8007fea:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007fec:	1bf3      	subs	r3, r6, r7
 8007fee:	8922      	ldrh	r2, [r4, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007ff4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007ff6:	2c00      	cmp	r4, #0
 8007ff8:	d1f3      	bne.n	8007fe2 <pbuf_realloc+0x36>
 8007ffa:	4653      	mov	r3, sl
 8007ffc:	f240 12af 	movw	r2, #431	; 0x1af
 8008000:	4649      	mov	r1, r9
 8008002:	4640      	mov	r0, r8
 8008004:	f022 fe62 	bl	802accc <iprintf>
 8008008:	e7eb      	b.n	8007fe2 <pbuf_realloc+0x36>
  rem_len = new_len;
 800800a:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800800c:	7b22      	ldrb	r2, [r4, #12]
 800800e:	f012 0f0f 	tst.w	r2, #15
 8008012:	d105      	bne.n	8008020 <pbuf_realloc+0x74>
 8008014:	42ab      	cmp	r3, r5
 8008016:	d003      	beq.n	8008020 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008018:	7b63      	ldrb	r3, [r4, #13]
 800801a:	f013 0f02 	tst.w	r3, #2
 800801e:	d009      	beq.n	8008034 <pbuf_realloc+0x88>
  q->len = rem_len;
 8008020:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008022:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008024:	6820      	ldr	r0, [r4, #0]
 8008026:	b108      	cbz	r0, 800802c <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8008028:	f7ff fea8 	bl	8007d7c <pbuf_free>
  q->next = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	6023      	str	r3, [r4, #0]
}
 8008030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	1b1b      	subs	r3, r3, r4
 8008038:	18e9      	adds	r1, r5, r3
 800803a:	b289      	uxth	r1, r1
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff f9cb 	bl	80073d8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008042:	4604      	mov	r4, r0
 8008044:	2800      	cmp	r0, #0
 8008046:	d1eb      	bne.n	8008020 <pbuf_realloc+0x74>
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <pbuf_realloc+0xac>)
 800804a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800804e:	4905      	ldr	r1, [pc, #20]	; (8008064 <pbuf_realloc+0xb8>)
 8008050:	4803      	ldr	r0, [pc, #12]	; (8008060 <pbuf_realloc+0xb4>)
 8008052:	f022 fe3b 	bl	802accc <iprintf>
 8008056:	e7e3      	b.n	8008020 <pbuf_realloc+0x74>
 8008058:	0802ccb4 	.word	0x0802ccb4
 800805c:	0802cd84 	.word	0x0802cd84
 8008060:	0802bc48 	.word	0x0802bc48
 8008064:	0802cdb4 	.word	0x0802cdb4
 8008068:	0802cd9c 	.word	0x0802cd9c

0800806c <pbuf_free_header>:
{
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	4605      	mov	r5, r0
  struct pbuf *p = q;
 8008070:	4606      	mov	r6, r0
  while (free_left && p) {
 8008072:	b1b9      	cbz	r1, 80080a4 <pbuf_free_header+0x38>
 8008074:	460c      	mov	r4, r1
 8008076:	b1a8      	cbz	r0, 80080a4 <pbuf_free_header+0x38>
      f->next = 0;
 8008078:	2700      	movs	r7, #0
 800807a:	e000      	b.n	800807e <pbuf_free_header+0x12>
      p = p->next;
 800807c:	4635      	mov	r5, r6
    if (free_left >= p->len) {
 800807e:	896b      	ldrh	r3, [r5, #10]
 8008080:	42a3      	cmp	r3, r4
 8008082:	d80a      	bhi.n	800809a <pbuf_free_header+0x2e>
      free_left = (u16_t)(free_left - p->len);
 8008084:	1ae4      	subs	r4, r4, r3
 8008086:	b2a4      	uxth	r4, r4
      p = p->next;
 8008088:	682e      	ldr	r6, [r5, #0]
      f->next = 0;
 800808a:	602f      	str	r7, [r5, #0]
      pbuf_free(f);
 800808c:	4628      	mov	r0, r5
 800808e:	f7ff fe75 	bl	8007d7c <pbuf_free>
  while (free_left && p) {
 8008092:	b13c      	cbz	r4, 80080a4 <pbuf_free_header+0x38>
 8008094:	2e00      	cmp	r6, #0
 8008096:	d1f1      	bne.n	800807c <pbuf_free_header+0x10>
 8008098:	e004      	b.n	80080a4 <pbuf_free_header+0x38>
      pbuf_remove_header(p, free_left);
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff fe2d 	bl	8007cfc <pbuf_remove_header>
 80080a2:	462e      	mov	r6, r5
}
 80080a4:	4630      	mov	r0, r6
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080a8 <pbuf_clen>:
  while (p != NULL) {
 80080a8:	4603      	mov	r3, r0
 80080aa:	b130      	cbz	r0, 80080ba <pbuf_clen+0x12>
  len = 0;
 80080ac:	2000      	movs	r0, #0
    ++len;
 80080ae:	3001      	adds	r0, #1
 80080b0:	b280      	uxth	r0, r0
    p = p->next;
 80080b2:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1fa      	bne.n	80080ae <pbuf_clen+0x6>
 80080b8:	4770      	bx	lr
  len = 0;
 80080ba:	2000      	movs	r0, #0
}
 80080bc:	4770      	bx	lr
	...

080080c0 <pbuf_ref>:
  if (p != NULL) {
 80080c0:	b198      	cbz	r0, 80080ea <pbuf_ref+0x2a>
{
 80080c2:	b510      	push	{r4, lr}
 80080c4:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80080c6:	f007 ffd7 	bl	8010078 <sys_arch_protect>
 80080ca:	7ba3      	ldrb	r3, [r4, #14]
 80080cc:	3301      	adds	r3, #1
 80080ce:	73a3      	strb	r3, [r4, #14]
 80080d0:	f007 ffde 	bl	8010090 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80080d4:	7ba3      	ldrb	r3, [r4, #14]
 80080d6:	b103      	cbz	r3, 80080da <pbuf_ref+0x1a>
}
 80080d8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <pbuf_ref+0x2c>)
 80080dc:	f240 3242 	movw	r2, #834	; 0x342
 80080e0:	4903      	ldr	r1, [pc, #12]	; (80080f0 <pbuf_ref+0x30>)
 80080e2:	4804      	ldr	r0, [pc, #16]	; (80080f4 <pbuf_ref+0x34>)
 80080e4:	f022 fdf2 	bl	802accc <iprintf>
}
 80080e8:	e7f6      	b.n	80080d8 <pbuf_ref+0x18>
 80080ea:	4770      	bx	lr
 80080ec:	0802ccb4 	.word	0x0802ccb4
 80080f0:	0802cdd0 	.word	0x0802cdd0
 80080f4:	0802bc48 	.word	0x0802bc48

080080f8 <pbuf_cat>:
{
 80080f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80080fa:	b130      	cbz	r0, 800810a <pbuf_cat+0x12>
 80080fc:	460d      	mov	r5, r1
 80080fe:	4602      	mov	r2, r0
 8008100:	b119      	cbz	r1, 800810a <pbuf_cat+0x12>
  for (p = h; p->next != NULL; p = p->next) {
 8008102:	6804      	ldr	r4, [r0, #0]
 8008104:	b954      	cbnz	r4, 800811c <pbuf_cat+0x24>
 8008106:	4604      	mov	r4, r0
 8008108:	e010      	b.n	800812c <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <pbuf_cat+0x68>)
 800810c:	f240 3259 	movw	r2, #857	; 0x359
 8008110:	4914      	ldr	r1, [pc, #80]	; (8008164 <pbuf_cat+0x6c>)
 8008112:	4815      	ldr	r0, [pc, #84]	; (8008168 <pbuf_cat+0x70>)
 8008114:	f022 fdda 	bl	802accc <iprintf>
 8008118:	e021      	b.n	800815e <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 800811a:	461c      	mov	r4, r3
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800811c:	8913      	ldrh	r3, [r2, #8]
 800811e:	8928      	ldrh	r0, [r5, #8]
 8008120:	4403      	add	r3, r0
 8008122:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	4622      	mov	r2, r4
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f6      	bne.n	800811a <pbuf_cat+0x22>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800812c:	8922      	ldrh	r2, [r4, #8]
 800812e:	8963      	ldrh	r3, [r4, #10]
 8008130:	429a      	cmp	r2, r3
 8008132:	d00f      	beq.n	8008154 <pbuf_cat+0x5c>
 8008134:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <pbuf_cat+0x68>)
 8008136:	f240 3262 	movw	r2, #866	; 0x362
 800813a:	490c      	ldr	r1, [pc, #48]	; (800816c <pbuf_cat+0x74>)
 800813c:	480a      	ldr	r0, [pc, #40]	; (8008168 <pbuf_cat+0x70>)
 800813e:	f022 fdc5 	bl	802accc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	b133      	cbz	r3, 8008154 <pbuf_cat+0x5c>
 8008146:	4b06      	ldr	r3, [pc, #24]	; (8008160 <pbuf_cat+0x68>)
 8008148:	f240 3263 	movw	r2, #867	; 0x363
 800814c:	4908      	ldr	r1, [pc, #32]	; (8008170 <pbuf_cat+0x78>)
 800814e:	4806      	ldr	r0, [pc, #24]	; (8008168 <pbuf_cat+0x70>)
 8008150:	f022 fdbc 	bl	802accc <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008154:	8923      	ldrh	r3, [r4, #8]
 8008156:	892a      	ldrh	r2, [r5, #8]
 8008158:	4413      	add	r3, r2
 800815a:	8123      	strh	r3, [r4, #8]
  p->next = t;
 800815c:	6025      	str	r5, [r4, #0]
}
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	0802ccb4 	.word	0x0802ccb4
 8008164:	0802cde4 	.word	0x0802cde4
 8008168:	0802bc48 	.word	0x0802bc48
 800816c:	0802ce1c 	.word	0x0802ce1c
 8008170:	0802ce4c 	.word	0x0802ce4c

08008174 <pbuf_chain>:
{
 8008174:	b510      	push	{r4, lr}
 8008176:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008178:	f7ff ffbe 	bl	80080f8 <pbuf_cat>
  pbuf_ref(t);
 800817c:	4620      	mov	r0, r4
 800817e:	f7ff ff9f 	bl	80080c0 <pbuf_ref>
}
 8008182:	bd10      	pop	{r4, pc}

08008184 <pbuf_copy>:
{
 8008184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008188:	b178      	cbz	r0, 80081aa <pbuf_copy+0x26>
 800818a:	460c      	mov	r4, r1
 800818c:	4606      	mov	r6, r0
 800818e:	b161      	cbz	r1, 80081aa <pbuf_copy+0x26>
 8008190:	8902      	ldrh	r2, [r0, #8]
 8008192:	890b      	ldrh	r3, [r1, #8]
 8008194:	429a      	cmp	r2, r3
 8008196:	d308      	bcc.n	80081aa <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8008198:	2700      	movs	r7, #0
 800819a:	46b8      	mov	r8, r7
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800819c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80082ac <pbuf_copy+0x128>
 80081a0:	f8df b120 	ldr.w	fp, [pc, #288]	; 80082c4 <pbuf_copy+0x140>
 80081a4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80082b4 <pbuf_copy+0x130>
 80081a8:	e050      	b.n	800824c <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80081aa:	4b40      	ldr	r3, [pc, #256]	; (80082ac <pbuf_copy+0x128>)
 80081ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80081b0:	493f      	ldr	r1, [pc, #252]	; (80082b0 <pbuf_copy+0x12c>)
 80081b2:	4840      	ldr	r0, [pc, #256]	; (80082b4 <pbuf_copy+0x130>)
 80081b4:	f022 fd8a 	bl	802accc <iprintf>
 80081b8:	f06f 000f 	mvn.w	r0, #15
 80081bc:	e016      	b.n	80081ec <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80081be:	4653      	mov	r3, sl
 80081c0:	f240 32d9 	movw	r2, #985	; 0x3d9
 80081c4:	4659      	mov	r1, fp
 80081c6:	4648      	mov	r0, r9
 80081c8:	f022 fd80 	bl	802accc <iprintf>
 80081cc:	e052      	b.n	8008274 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80081ce:	4653      	mov	r3, sl
 80081d0:	f240 32da 	movw	r2, #986	; 0x3da
 80081d4:	4938      	ldr	r1, [pc, #224]	; (80082b8 <pbuf_copy+0x134>)
 80081d6:	4648      	mov	r0, r9
 80081d8:	f022 fd78 	bl	802accc <iprintf>
 80081dc:	e04d      	b.n	800827a <pbuf_copy+0xf6>
      p_to = p_to->next;
 80081de:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80081e0:	b116      	cbz	r6, 80081e8 <pbuf_copy+0x64>
      offset_to = 0;
 80081e2:	f04f 0800 	mov.w	r8, #0
 80081e6:	e050      	b.n	800828a <pbuf_copy+0x106>
  return ERR_OK;
 80081e8:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80081ea:	b90c      	cbnz	r4, 80081f0 <pbuf_copy+0x6c>
}
 80081ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80081f0:	4b2e      	ldr	r3, [pc, #184]	; (80082ac <pbuf_copy+0x128>)
 80081f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80081f6:	4931      	ldr	r1, [pc, #196]	; (80082bc <pbuf_copy+0x138>)
 80081f8:	482e      	ldr	r0, [pc, #184]	; (80082b4 <pbuf_copy+0x130>)
 80081fa:	f022 fd67 	bl	802accc <iprintf>
 80081fe:	f06f 000f 	mvn.w	r0, #15
 8008202:	e7f3      	b.n	80081ec <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d045      	beq.n	8008296 <pbuf_copy+0x112>
 800820a:	4b28      	ldr	r3, [pc, #160]	; (80082ac <pbuf_copy+0x128>)
 800820c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008210:	492b      	ldr	r1, [pc, #172]	; (80082c0 <pbuf_copy+0x13c>)
 8008212:	4828      	ldr	r0, [pc, #160]	; (80082b4 <pbuf_copy+0x130>)
 8008214:	f022 fd5a 	bl	802accc <iprintf>
 8008218:	f06f 0005 	mvn.w	r0, #5
 800821c:	e7e6      	b.n	80081ec <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800821e:	4b23      	ldr	r3, [pc, #140]	; (80082ac <pbuf_copy+0x128>)
 8008220:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008224:	4926      	ldr	r1, [pc, #152]	; (80082c0 <pbuf_copy+0x13c>)
 8008226:	4823      	ldr	r0, [pc, #140]	; (80082b4 <pbuf_copy+0x130>)
 8008228:	f022 fd50 	bl	802accc <iprintf>
 800822c:	f06f 0005 	mvn.w	r0, #5
 8008230:	e7dc      	b.n	80081ec <pbuf_copy+0x68>
  return ERR_OK;
 8008232:	2000      	movs	r0, #0
 8008234:	e7da      	b.n	80081ec <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008236:	2e00      	cmp	r6, #0
 8008238:	d034      	beq.n	80082a4 <pbuf_copy+0x120>
 800823a:	8972      	ldrh	r2, [r6, #10]
 800823c:	8933      	ldrh	r3, [r6, #8]
 800823e:	429a      	cmp	r2, r3
 8008240:	d132      	bne.n	80082a8 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008242:	6833      	ldr	r3, [r6, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ea      	bne.n	800821e <pbuf_copy+0x9a>
  } while (p_from);
 8008248:	2c00      	cmp	r4, #0
 800824a:	d0f2      	beq.n	8008232 <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800824c:	8975      	ldrh	r5, [r6, #10]
 800824e:	eba5 0508 	sub.w	r5, r5, r8
 8008252:	8963      	ldrh	r3, [r4, #10]
 8008254:	1bdb      	subs	r3, r3, r7
 8008256:	429d      	cmp	r5, r3
 8008258:	bf28      	it	cs
 800825a:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800825c:	6870      	ldr	r0, [r6, #4]
 800825e:	6861      	ldr	r1, [r4, #4]
 8008260:	462a      	mov	r2, r5
 8008262:	4439      	add	r1, r7
 8008264:	4440      	add	r0, r8
 8008266:	f022 f968 	bl	802a53a <memcpy>
    offset_to += len;
 800826a:	44a8      	add	r8, r5
    offset_from += len;
 800826c:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800826e:	8973      	ldrh	r3, [r6, #10]
 8008270:	4543      	cmp	r3, r8
 8008272:	d3a4      	bcc.n	80081be <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008274:	8963      	ldrh	r3, [r4, #10]
 8008276:	42bb      	cmp	r3, r7
 8008278:	d3a9      	bcc.n	80081ce <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 800827a:	8963      	ldrh	r3, [r4, #10]
 800827c:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 800827e:	bf9c      	itt	ls
 8008280:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8008282:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 8008284:	8973      	ldrh	r3, [r6, #10]
 8008286:	4543      	cmp	r3, r8
 8008288:	d0a9      	beq.n	80081de <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800828a:	2c00      	cmp	r4, #0
 800828c:	d0d3      	beq.n	8008236 <pbuf_copy+0xb2>
 800828e:	8962      	ldrh	r2, [r4, #10]
 8008290:	8923      	ldrh	r3, [r4, #8]
 8008292:	429a      	cmp	r2, r3
 8008294:	d0b6      	beq.n	8008204 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008296:	2e00      	cmp	r6, #0
 8008298:	d0d8      	beq.n	800824c <pbuf_copy+0xc8>
 800829a:	8972      	ldrh	r2, [r6, #10]
 800829c:	8933      	ldrh	r3, [r6, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d1d4      	bne.n	800824c <pbuf_copy+0xc8>
 80082a2:	e7ce      	b.n	8008242 <pbuf_copy+0xbe>
  return ERR_OK;
 80082a4:	2000      	movs	r0, #0
 80082a6:	e7a1      	b.n	80081ec <pbuf_copy+0x68>
 80082a8:	2000      	movs	r0, #0
 80082aa:	e79f      	b.n	80081ec <pbuf_copy+0x68>
 80082ac:	0802ccb4 	.word	0x0802ccb4
 80082b0:	0802ce5c 	.word	0x0802ce5c
 80082b4:	0802bc48 	.word	0x0802bc48
 80082b8:	0802cea4 	.word	0x0802cea4
 80082bc:	0802cec0 	.word	0x0802cec0
 80082c0:	0802ced0 	.word	0x0802ced0
 80082c4:	0802ce8c 	.word	0x0802ce8c

080082c8 <pbuf_copy_partial>:
{
 80082c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80082cc:	b148      	cbz	r0, 80082e2 <pbuf_copy_partial+0x1a>
 80082ce:	4688      	mov	r8, r1
 80082d0:	4692      	mov	sl, r2
 80082d2:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80082d4:	b181      	cbz	r1, 80082f8 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 80082d6:	4617      	mov	r7, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80082d8:	b15a      	cbz	r2, 80082f2 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 80082da:	2700      	movs	r7, #0
  u16_t left = 0;
 80082dc:	463e      	mov	r6, r7
      offset = 0;
 80082de:	46b9      	mov	r9, r7
 80082e0:	e02f      	b.n	8008342 <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80082e2:	4b1c      	ldr	r3, [pc, #112]	; (8008354 <pbuf_copy_partial+0x8c>)
 80082e4:	f240 420a 	movw	r2, #1034	; 0x40a
 80082e8:	491b      	ldr	r1, [pc, #108]	; (8008358 <pbuf_copy_partial+0x90>)
 80082ea:	481c      	ldr	r0, [pc, #112]	; (800835c <pbuf_copy_partial+0x94>)
 80082ec:	f022 fcee 	bl	802accc <iprintf>
 80082f0:	2700      	movs	r7, #0
}
 80082f2:	4638      	mov	r0, r7
 80082f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80082f8:	4b16      	ldr	r3, [pc, #88]	; (8008354 <pbuf_copy_partial+0x8c>)
 80082fa:	f240 420b 	movw	r2, #1035	; 0x40b
 80082fe:	4918      	ldr	r1, [pc, #96]	; (8008360 <pbuf_copy_partial+0x98>)
 8008300:	4816      	ldr	r0, [pc, #88]	; (800835c <pbuf_copy_partial+0x94>)
 8008302:	f022 fce3 	bl	802accc <iprintf>
 8008306:	2700      	movs	r7, #0
 8008308:	e7f3      	b.n	80082f2 <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 800830a:	896c      	ldrh	r4, [r5, #10]
 800830c:	1ae4      	subs	r4, r4, r3
 800830e:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8008310:	4554      	cmp	r4, sl
 8008312:	bf28      	it	cs
 8008314:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008316:	6869      	ldr	r1, [r5, #4]
 8008318:	4622      	mov	r2, r4
 800831a:	4419      	add	r1, r3
 800831c:	eb08 0006 	add.w	r0, r8, r6
 8008320:	f022 f90b 	bl	802a53a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008324:	4427      	add	r7, r4
 8008326:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8008328:	4426      	add	r6, r4
 800832a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800832c:	ebaa 0404 	sub.w	r4, sl, r4
 8008330:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 8008334:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008336:	682d      	ldr	r5, [r5, #0]
 8008338:	f1ba 0f00 	cmp.w	sl, #0
 800833c:	d0d9      	beq.n	80082f2 <pbuf_copy_partial+0x2a>
 800833e:	2d00      	cmp	r5, #0
 8008340:	d0d7      	beq.n	80082f2 <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0e1      	beq.n	800830a <pbuf_copy_partial+0x42>
 8008346:	8969      	ldrh	r1, [r5, #10]
 8008348:	4299      	cmp	r1, r3
 800834a:	d8de      	bhi.n	800830a <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 800834c:	1a5b      	subs	r3, r3, r1
 800834e:	b29b      	uxth	r3, r3
 8008350:	e7f1      	b.n	8008336 <pbuf_copy_partial+0x6e>
 8008352:	bf00      	nop
 8008354:	0802ccb4 	.word	0x0802ccb4
 8008358:	0802cefc 	.word	0x0802cefc
 800835c:	0802bc48 	.word	0x0802bc48
 8008360:	0802cf1c 	.word	0x0802cf1c

08008364 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008368:	b338      	cbz	r0, 80083ba <pbuf_take+0x56>
 800836a:	4688      	mov	r8, r1
 800836c:	4691      	mov	r9, r2
 800836e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008370:	b369      	cbz	r1, 80083ce <pbuf_take+0x6a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008372:	8903      	ldrh	r3, [r0, #8]
 8008374:	4293      	cmp	r3, r2
 8008376:	d334      	bcc.n	80083e2 <pbuf_take+0x7e>
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 8008378:	2000      	movs	r0, #0
  for (p = buf; total_copy_len != 0; p = p->next) {
 800837a:	2a00      	cmp	r2, #0
 800837c:	d045      	beq.n	800840a <pbuf_take+0xa6>
  size_t total_copy_len = len;
 800837e:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8008380:	2700      	movs	r7, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008382:	f8df b094 	ldr.w	fp, [pc, #148]	; 8008418 <pbuf_take+0xb4>
 8008386:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800842c <pbuf_take+0xc8>
    if (buf_copy_len > p->len) {
 800838a:	896c      	ldrh	r4, [r5, #10]
 800838c:	42b4      	cmp	r4, r6
 800838e:	bf28      	it	cs
 8008390:	4634      	movcs	r4, r6
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008392:	4622      	mov	r2, r4
 8008394:	eb08 0107 	add.w	r1, r8, r7
 8008398:	6868      	ldr	r0, [r5, #4]
 800839a:	f022 f8ce 	bl	802a53a <memcpy>
    copied_total += buf_copy_len;
 800839e:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 80083a0:	682d      	ldr	r5, [r5, #0]
 80083a2:	1b36      	subs	r6, r6, r4
 80083a4:	d027      	beq.n	80083f6 <pbuf_take+0x92>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80083a6:	2d00      	cmp	r5, #0
 80083a8:	d1ef      	bne.n	800838a <pbuf_take+0x26>
 80083aa:	465b      	mov	r3, fp
 80083ac:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80083b0:	4651      	mov	r1, sl
 80083b2:	4818      	ldr	r0, [pc, #96]	; (8008414 <pbuf_take+0xb0>)
 80083b4:	f022 fc8a 	bl	802accc <iprintf>
 80083b8:	e7e7      	b.n	800838a <pbuf_take+0x26>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80083ba:	4b17      	ldr	r3, [pc, #92]	; (8008418 <pbuf_take+0xb4>)
 80083bc:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80083c0:	4916      	ldr	r1, [pc, #88]	; (800841c <pbuf_take+0xb8>)
 80083c2:	4814      	ldr	r0, [pc, #80]	; (8008414 <pbuf_take+0xb0>)
 80083c4:	f022 fc82 	bl	802accc <iprintf>
 80083c8:	f06f 000f 	mvn.w	r0, #15
 80083cc:	e01d      	b.n	800840a <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <pbuf_take+0xb4>)
 80083d0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80083d4:	4912      	ldr	r1, [pc, #72]	; (8008420 <pbuf_take+0xbc>)
 80083d6:	480f      	ldr	r0, [pc, #60]	; (8008414 <pbuf_take+0xb0>)
 80083d8:	f022 fc78 	bl	802accc <iprintf>
 80083dc:	f06f 000f 	mvn.w	r0, #15
 80083e0:	e013      	b.n	800840a <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <pbuf_take+0xb4>)
 80083e4:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80083e8:	490e      	ldr	r1, [pc, #56]	; (8008424 <pbuf_take+0xc0>)
 80083ea:	480a      	ldr	r0, [pc, #40]	; (8008414 <pbuf_take+0xb0>)
 80083ec:	f022 fc6e 	bl	802accc <iprintf>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e009      	b.n	800840a <pbuf_take+0xa6>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80083f6:	45b9      	cmp	r9, r7
 80083f8:	d009      	beq.n	800840e <pbuf_take+0xaa>
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <pbuf_take+0xb4>)
 80083fc:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008400:	4909      	ldr	r1, [pc, #36]	; (8008428 <pbuf_take+0xc4>)
 8008402:	4804      	ldr	r0, [pc, #16]	; (8008414 <pbuf_take+0xb0>)
 8008404:	f022 fc62 	bl	802accc <iprintf>
  return ERR_OK;
 8008408:	2000      	movs	r0, #0
}
 800840a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 800840e:	2000      	movs	r0, #0
 8008410:	e7fb      	b.n	800840a <pbuf_take+0xa6>
 8008412:	bf00      	nop
 8008414:	0802bc48 	.word	0x0802bc48
 8008418:	0802ccb4 	.word	0x0802ccb4
 800841c:	0802cf40 	.word	0x0802cf40
 8008420:	0802cf58 	.word	0x0802cf58
 8008424:	0802cf74 	.word	0x0802cf74
 8008428:	0802cfac 	.word	0x0802cfac
 800842c:	0802cf94 	.word	0x0802cf94

08008430 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008434:	b083      	sub	sp, #12
 8008436:	460f      	mov	r7, r1
 8008438:	4615      	mov	r5, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800843a:	f10d 0206 	add.w	r2, sp, #6
 800843e:	4619      	mov	r1, r3
 8008440:	f7ff fbb0 	bl	8007ba4 <pbuf_skip_const>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8008444:	b360      	cbz	r0, 80084a0 <pbuf_take_at+0x70>
 8008446:	4606      	mov	r6, r0
 8008448:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800844c:	8901      	ldrh	r1, [r0, #8]
 800844e:	195a      	adds	r2, r3, r5
 8008450:	4291      	cmp	r1, r2
 8008452:	db28      	blt.n	80084a6 <pbuf_take_at+0x76>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008454:	8942      	ldrh	r2, [r0, #10]
 8008456:	429a      	cmp	r2, r3
 8008458:	d91a      	bls.n	8008490 <pbuf_take_at+0x60>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800845a:	f8b6 900a 	ldrh.w	r9, [r6, #10]
 800845e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8008462:	eba9 0304 	sub.w	r3, r9, r4
 8008466:	429d      	cmp	r5, r3
 8008468:	dd22      	ble.n	80084b0 <pbuf_take_at+0x80>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800846a:	fa1f f883 	uxth.w	r8, r3
 800846e:	6870      	ldr	r0, [r6, #4]
 8008470:	4642      	mov	r2, r8
 8008472:	4639      	mov	r1, r7
 8008474:	4420      	add	r0, r4
 8008476:	f022 f860 	bl	802a53a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800847a:	1962      	adds	r2, r4, r5
 800847c:	eba2 0209 	sub.w	r2, r2, r9
 8008480:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
 8008482:	b19a      	cbz	r2, 80084ac <pbuf_take_at+0x7c>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008484:	eb07 0108 	add.w	r1, r7, r8
 8008488:	6830      	ldr	r0, [r6, #0]
 800848a:	f7ff ff6b 	bl	8008364 <pbuf_take>
 800848e:	e016      	b.n	80084be <pbuf_take_at+0x8e>
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008490:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <pbuf_take_at+0x94>)
 8008492:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8008496:	490c      	ldr	r1, [pc, #48]	; (80084c8 <pbuf_take_at+0x98>)
 8008498:	480c      	ldr	r0, [pc, #48]	; (80084cc <pbuf_take_at+0x9c>)
 800849a:	f022 fc17 	bl	802accc <iprintf>
 800849e:	e7dc      	b.n	800845a <pbuf_take_at+0x2a>
    }
    return ERR_OK;
  }
  return ERR_MEM;
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	e00b      	b.n	80084be <pbuf_take_at+0x8e>
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	e008      	b.n	80084be <pbuf_take_at+0x8e>
    return ERR_OK;
 80084ac:	2000      	movs	r0, #0
 80084ae:	e006      	b.n	80084be <pbuf_take_at+0x8e>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80084b0:	6870      	ldr	r0, [r6, #4]
 80084b2:	462a      	mov	r2, r5
 80084b4:	4639      	mov	r1, r7
 80084b6:	4420      	add	r0, r4
 80084b8:	f022 f83f 	bl	802a53a <memcpy>
    return ERR_OK;
 80084bc:	2000      	movs	r0, #0
}
 80084be:	b003      	add	sp, #12
 80084c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c4:	0802ccb4 	.word	0x0802ccb4
 80084c8:	0802cfc4 	.word	0x0802cfc4
 80084cc:	0802bc48 	.word	0x0802bc48

080084d0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80084d4:	460a      	mov	r2, r1
 80084d6:	8921      	ldrh	r1, [r4, #8]
 80084d8:	f7ff fcc0 	bl	8007e5c <pbuf_alloc>
  if (q == NULL) {
 80084dc:	4605      	mov	r5, r0
 80084de:	b118      	cbz	r0, 80084e8 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80084e0:	4621      	mov	r1, r4
 80084e2:	f7ff fe4f 	bl	8008184 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80084e6:	b908      	cbnz	r0, 80084ec <pbuf_clone+0x1c>
  return q;
}
 80084e8:	4628      	mov	r0, r5
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80084ec:	4b03      	ldr	r3, [pc, #12]	; (80084fc <pbuf_clone+0x2c>)
 80084ee:	f240 5224 	movw	r2, #1316	; 0x524
 80084f2:	4903      	ldr	r1, [pc, #12]	; (8008500 <pbuf_clone+0x30>)
 80084f4:	4803      	ldr	r0, [pc, #12]	; (8008504 <pbuf_clone+0x34>)
 80084f6:	f022 fbe9 	bl	802accc <iprintf>
 80084fa:	e7f5      	b.n	80084e8 <pbuf_clone+0x18>
 80084fc:	0802ccb4 	.word	0x0802ccb4
 8008500:	0802cfdc 	.word	0x0802cfdc
 8008504:	0802bc48 	.word	0x0802bc48

08008508 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8008508:	b500      	push	{lr}
 800850a:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800850c:	f10d 0206 	add.w	r2, sp, #6
 8008510:	f7ff fb48 	bl	8007ba4 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008514:	b148      	cbz	r0, 800852a <pbuf_try_get_at+0x22>
 8008516:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800851a:	8941      	ldrh	r1, [r0, #10]
 800851c:	4291      	cmp	r1, r2
 800851e:	d907      	bls.n	8008530 <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 8008520:	6843      	ldr	r3, [r0, #4]
 8008522:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 8008524:	b003      	add	sp, #12
 8008526:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	e7f9      	b.n	8008524 <pbuf_try_get_at+0x1c>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e7f6      	b.n	8008524 <pbuf_try_get_at+0x1c>

08008536 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008536:	b510      	push	{r4, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	4614      	mov	r4, r2
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800853c:	f10d 0206 	add.w	r2, sp, #6
 8008540:	f7ff fb30 	bl	8007ba4 <pbuf_skip_const>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008544:	b138      	cbz	r0, 8008556 <pbuf_put_at+0x20>
 8008546:	4603      	mov	r3, r0
 8008548:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800854c:	8941      	ldrh	r1, [r0, #10]
 800854e:	4291      	cmp	r1, r2
    ((u8_t *)q->payload)[q_idx] = data;
 8008550:	bf84      	itt	hi
 8008552:	6843      	ldrhi	r3, [r0, #4]
 8008554:	549c      	strbhi	r4, [r3, r2]
  }
}
 8008556:	b002      	add	sp, #8
 8008558:	bd10      	pop	{r4, pc}
	...

0800855c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800855c:	b470      	push	{r4, r5, r6}
  u8_t i;
  u16_t n = 0;
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <tcp_new_port+0x50>)
 8008560:	8818      	ldrh	r0, [r3, #0]
{
 8008562:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008566:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800856a:	e002      	b.n	8008572 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800856c:	3c01      	subs	r4, #1
 800856e:	b2a4      	uxth	r4, r4
 8008570:	b1c4      	cbz	r4, 80085a4 <tcp_new_port+0x48>
  tcp_port++;
 8008572:	3001      	adds	r0, #1
 8008574:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008576:	42b0      	cmp	r0, r6
 8008578:	bf08      	it	eq
 800857a:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800857e:	490c      	ldr	r1, [pc, #48]	; (80085b0 <tcp_new_port+0x54>)
 8008580:	f101 0510 	add.w	r5, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008584:	f851 3b04 	ldr.w	r3, [r1], #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	b12b      	cbz	r3, 8008598 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 800858c:	8ada      	ldrh	r2, [r3, #22]
 800858e:	4282      	cmp	r2, r0
 8008590:	d0ec      	beq.n	800856c <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1f9      	bne.n	800858c <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008598:	42a9      	cmp	r1, r5
 800859a:	d1f3      	bne.n	8008584 <tcp_new_port+0x28>
 800859c:	4b03      	ldr	r3, [pc, #12]	; (80085ac <tcp_new_port+0x50>)
 800859e:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80085a0:	bc70      	pop	{r4, r5, r6}
 80085a2:	4770      	bx	lr
 80085a4:	4b01      	ldr	r3, [pc, #4]	; (80085ac <tcp_new_port+0x50>)
 80085a6:	8018      	strh	r0, [r3, #0]
          return 0;
 80085a8:	4620      	mov	r0, r4
 80085aa:	e7f9      	b.n	80085a0 <tcp_new_port+0x44>
 80085ac:	20000010 	.word	0x20000010
 80085b0:	0802d61c 	.word	0x0802d61c

080085b4 <tcp_close_shutdown_fin>:
{
 80085b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80085b6:	4604      	mov	r4, r0
 80085b8:	b140      	cbz	r0, 80085cc <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 80085ba:	7d23      	ldrb	r3, [r4, #20]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d018      	beq.n	80085f2 <tcp_close_shutdown_fin+0x3e>
 80085c0:	2b07      	cmp	r3, #7
 80085c2:	d01d      	beq.n	8008600 <tcp_close_shutdown_fin+0x4c>
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d009      	beq.n	80085dc <tcp_close_shutdown_fin+0x28>
 80085c8:	2000      	movs	r0, #0
}
 80085ca:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80085cc:	4b14      	ldr	r3, [pc, #80]	; (8008620 <tcp_close_shutdown_fin+0x6c>)
 80085ce:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80085d2:	4914      	ldr	r1, [pc, #80]	; (8008624 <tcp_close_shutdown_fin+0x70>)
 80085d4:	4814      	ldr	r0, [pc, #80]	; (8008628 <tcp_close_shutdown_fin+0x74>)
 80085d6:	f022 fb79 	bl	802accc <iprintf>
 80085da:	e7ee      	b.n	80085ba <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 80085dc:	4620      	mov	r0, r4
 80085de:	f003 fb9b 	bl	800bd18 <tcp_send_fin>
      if (err == ERR_OK) {
 80085e2:	b9a0      	cbnz	r0, 800860e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80085e4:	2305      	movs	r3, #5
 80085e6:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80085e8:	4620      	mov	r0, r4
 80085ea:	f003 fd1b 	bl	800c024 <tcp_output>
  return err;
 80085ee:	2000      	movs	r0, #0
 80085f0:	e7eb      	b.n	80085ca <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 80085f2:	4620      	mov	r0, r4
 80085f4:	f003 fb90 	bl	800bd18 <tcp_send_fin>
      if (err == ERR_OK) {
 80085f8:	b948      	cbnz	r0, 800860e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80085fa:	2305      	movs	r3, #5
 80085fc:	7523      	strb	r3, [r4, #20]
 80085fe:	e7f3      	b.n	80085e8 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008600:	4620      	mov	r0, r4
 8008602:	f003 fb89 	bl	800bd18 <tcp_send_fin>
      if (err == ERR_OK) {
 8008606:	b910      	cbnz	r0, 800860e <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 8008608:	2309      	movs	r3, #9
 800860a:	7523      	strb	r3, [r4, #20]
 800860c:	e7ec      	b.n	80085e8 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800860e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008612:	d1da      	bne.n	80085ca <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008614:	8b63      	ldrh	r3, [r4, #26]
 8008616:	f043 0308 	orr.w	r3, r3, #8
 800861a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800861c:	2000      	movs	r0, #0
 800861e:	e7d4      	b.n	80085ca <tcp_close_shutdown_fin+0x16>
 8008620:	0802cff0 	.word	0x0802cff0
 8008624:	0802d020 	.word	0x0802d020
 8008628:	0802bc48 	.word	0x0802bc48

0800862c <tcp_init>:
{
 800862c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800862e:	f022 fc09 	bl	802ae44 <rand>
 8008632:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008636:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800863a:	4b01      	ldr	r3, [pc, #4]	; (8008640 <tcp_init+0x14>)
 800863c:	8018      	strh	r0, [r3, #0]
}
 800863e:	bd08      	pop	{r3, pc}
 8008640:	20000010 	.word	0x20000010

08008644 <tcp_free>:
{
 8008644:	b510      	push	{r4, lr}
 8008646:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008648:	7d03      	ldrb	r3, [r0, #20]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d004      	beq.n	8008658 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 800864e:	4621      	mov	r1, r4
 8008650:	2001      	movs	r0, #1
 8008652:	f7ff f8bf 	bl	80077d4 <memp_free>
}
 8008656:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008658:	4b03      	ldr	r3, [pc, #12]	; (8008668 <tcp_free+0x24>)
 800865a:	22d4      	movs	r2, #212	; 0xd4
 800865c:	4903      	ldr	r1, [pc, #12]	; (800866c <tcp_free+0x28>)
 800865e:	4804      	ldr	r0, [pc, #16]	; (8008670 <tcp_free+0x2c>)
 8008660:	f022 fb34 	bl	802accc <iprintf>
 8008664:	e7f3      	b.n	800864e <tcp_free+0xa>
 8008666:	bf00      	nop
 8008668:	0802cff0 	.word	0x0802cff0
 800866c:	0802d02c 	.word	0x0802d02c
 8008670:	0802bc48 	.word	0x0802bc48

08008674 <tcp_update_rcv_ann_wnd>:
{
 8008674:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008676:	4604      	mov	r4, r0
 8008678:	b178      	cbz	r0, 800869a <tcp_update_rcv_ann_wnd+0x26>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800867a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800867c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800867e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008680:	1948      	adds	r0, r1, r5
 8008682:	1a80      	subs	r0, r0, r2
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008684:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008686:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800868a:	bf94      	ite	ls
 800868c:	1ac3      	subls	r3, r0, r3
 800868e:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8008692:	2b00      	cmp	r3, #0
 8008694:	db09      	blt.n	80086aa <tcp_update_rcv_ann_wnd+0x36>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008696:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8008698:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <tcp_update_rcv_ann_wnd+0x60>)
 800869c:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086a0:	490d      	ldr	r1, [pc, #52]	; (80086d8 <tcp_update_rcv_ann_wnd+0x64>)
 80086a2:	480e      	ldr	r0, [pc, #56]	; (80086dc <tcp_update_rcv_ann_wnd+0x68>)
 80086a4:	f022 fb12 	bl	802accc <iprintf>
 80086a8:	e7e7      	b.n	800867a <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80086aa:	1aab      	subs	r3, r5, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd02      	ble.n	80086b6 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 80086b0:	2000      	movs	r0, #0
 80086b2:	8560      	strh	r0, [r4, #42]	; 0x2a
 80086b4:	e7f0      	b.n	8008698 <tcp_update_rcv_ann_wnd+0x24>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80086b6:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086b8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80086bc:	d202      	bcs.n	80086c4 <tcp_update_rcv_ann_wnd+0x50>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80086be:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7e9      	b.n	8008698 <tcp_update_rcv_ann_wnd+0x24>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80086c4:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <tcp_update_rcv_ann_wnd+0x60>)
 80086c6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80086ca:	4905      	ldr	r1, [pc, #20]	; (80086e0 <tcp_update_rcv_ann_wnd+0x6c>)
 80086cc:	4803      	ldr	r0, [pc, #12]	; (80086dc <tcp_update_rcv_ann_wnd+0x68>)
 80086ce:	f022 fafd 	bl	802accc <iprintf>
 80086d2:	e7f4      	b.n	80086be <tcp_update_rcv_ann_wnd+0x4a>
 80086d4:	0802cff0 	.word	0x0802cff0
 80086d8:	0802d040 	.word	0x0802d040
 80086dc:	0802bc48 	.word	0x0802bc48
 80086e0:	0802d064 	.word	0x0802d064

080086e4 <tcp_recved>:
{
 80086e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80086e6:	b1b0      	cbz	r0, 8008716 <tcp_recved+0x32>
 80086e8:	460c      	mov	r4, r1
 80086ea:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80086ec:	7d03      	ldrb	r3, [r0, #20]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d019      	beq.n	8008726 <tcp_recved+0x42>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80086f2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80086f4:	1919      	adds	r1, r3, r4
 80086f6:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80086f8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80086fc:	d81b      	bhi.n	8008736 <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80086fe:	428b      	cmp	r3, r1
 8008700:	bf88      	it	hi
 8008702:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8008706:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008708:	4628      	mov	r0, r5
 800870a:	f7ff ffb3 	bl	8008674 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800870e:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008712:	d213      	bcs.n	800873c <tcp_recved+0x58>
}
 8008714:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <tcp_recved+0x68>)
 8008718:	f240 32cf 	movw	r2, #975	; 0x3cf
 800871c:	490c      	ldr	r1, [pc, #48]	; (8008750 <tcp_recved+0x6c>)
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <tcp_recved+0x70>)
 8008720:	f022 fad4 	bl	802accc <iprintf>
 8008724:	e7f6      	b.n	8008714 <tcp_recved+0x30>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <tcp_recved+0x68>)
 8008728:	f240 32d2 	movw	r2, #978	; 0x3d2
 800872c:	490a      	ldr	r1, [pc, #40]	; (8008758 <tcp_recved+0x74>)
 800872e:	4809      	ldr	r0, [pc, #36]	; (8008754 <tcp_recved+0x70>)
 8008730:	f022 facc 	bl	802accc <iprintf>
 8008734:	e7dd      	b.n	80086f2 <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008736:	f44f 6106 	mov.w	r1, #2144	; 0x860
 800873a:	e7e4      	b.n	8008706 <tcp_recved+0x22>
    tcp_ack_now(pcb);
 800873c:	8b6b      	ldrh	r3, [r5, #26]
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8008744:	4628      	mov	r0, r5
 8008746:	f003 fc6d 	bl	800c024 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 800874a:	e7e3      	b.n	8008714 <tcp_recved+0x30>
 800874c:	0802cff0 	.word	0x0802cff0
 8008750:	0802d080 	.word	0x0802d080
 8008754:	0802bc48 	.word	0x0802bc48
 8008758:	0802d098 	.word	0x0802d098

0800875c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 800875c:	b150      	cbz	r0, 8008774 <tcp_seg_free+0x18>
{
 800875e:	b510      	push	{r4, lr}
 8008760:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008762:	6840      	ldr	r0, [r0, #4]
 8008764:	b108      	cbz	r0, 800876a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008766:	f7ff fb09 	bl	8007d7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800876a:	4621      	mov	r1, r4
 800876c:	2003      	movs	r0, #3
 800876e:	f7ff f831 	bl	80077d4 <memp_free>
  }
}
 8008772:	bd10      	pop	{r4, pc}
 8008774:	4770      	bx	lr

08008776 <tcp_segs_free>:
{
 8008776:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008778:	4604      	mov	r4, r0
 800877a:	b128      	cbz	r0, 8008788 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 800877c:	4620      	mov	r0, r4
 800877e:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8008780:	f7ff ffec 	bl	800875c <tcp_seg_free>
  while (seg != NULL) {
 8008784:	2c00      	cmp	r4, #0
 8008786:	d1f9      	bne.n	800877c <tcp_segs_free+0x6>
}
 8008788:	bd10      	pop	{r4, pc}
	...

0800878c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800878c:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800878e:	4605      	mov	r5, r0
 8008790:	b188      	cbz	r0, 80087b6 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008792:	2003      	movs	r0, #3
 8008794:	f7ff f804 	bl	80077a0 <memp_malloc>
  if (cseg == NULL) {
 8008798:	4604      	mov	r4, r0
 800879a:	b150      	cbz	r0, 80087b2 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800879c:	6828      	ldr	r0, [r5, #0]
 800879e:	6869      	ldr	r1, [r5, #4]
 80087a0:	68aa      	ldr	r2, [r5, #8]
 80087a2:	68eb      	ldr	r3, [r5, #12]
 80087a4:	6020      	str	r0, [r4, #0]
 80087a6:	6061      	str	r1, [r4, #4]
 80087a8:	60a2      	str	r2, [r4, #8]
 80087aa:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80087ac:	6860      	ldr	r0, [r4, #4]
 80087ae:	f7ff fc87 	bl	80080c0 <pbuf_ref>
  return cseg;
}
 80087b2:	4620      	mov	r0, r4
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80087b6:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <tcp_seg_copy+0x3c>)
 80087b8:	f240 6282 	movw	r2, #1666	; 0x682
 80087bc:	4903      	ldr	r1, [pc, #12]	; (80087cc <tcp_seg_copy+0x40>)
 80087be:	4804      	ldr	r0, [pc, #16]	; (80087d0 <tcp_seg_copy+0x44>)
 80087c0:	f022 fa84 	bl	802accc <iprintf>
 80087c4:	e7e5      	b.n	8008792 <tcp_seg_copy+0x6>
 80087c6:	bf00      	nop
 80087c8:	0802cff0 	.word	0x0802cff0
 80087cc:	0802d0c0 	.word	0x0802d0c0
 80087d0:	0802bc48 	.word	0x0802bc48

080087d4 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80087d4:	b100      	cbz	r0, 80087d8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80087d6:	6101      	str	r1, [r0, #16]
  }
}
 80087d8:	4770      	bx	lr
	...

080087dc <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80087dc:	b180      	cbz	r0, 8008800 <tcp_recv+0x24>
{
 80087de:	b538      	push	{r3, r4, r5, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80087e4:	7d03      	ldrb	r3, [r0, #20]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d002      	beq.n	80087f0 <tcp_recv+0x14>
    pcb->recv = recv;
 80087ea:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80087f0:	4b04      	ldr	r3, [pc, #16]	; (8008804 <tcp_recv+0x28>)
 80087f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80087f6:	4904      	ldr	r1, [pc, #16]	; (8008808 <tcp_recv+0x2c>)
 80087f8:	4804      	ldr	r0, [pc, #16]	; (800880c <tcp_recv+0x30>)
 80087fa:	f022 fa67 	bl	802accc <iprintf>
 80087fe:	e7f4      	b.n	80087ea <tcp_recv+0xe>
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	0802cff0 	.word	0x0802cff0
 8008808:	0802d0dc 	.word	0x0802d0dc
 800880c:	0802bc48 	.word	0x0802bc48

08008810 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008810:	b180      	cbz	r0, 8008834 <tcp_sent+0x24>
{
 8008812:	b538      	push	{r3, r4, r5, lr}
 8008814:	460c      	mov	r4, r1
 8008816:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008818:	7d03      	ldrb	r3, [r0, #20]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d002      	beq.n	8008824 <tcp_sent+0x14>
    pcb->sent = sent;
 800881e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8008822:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <tcp_sent+0x28>)
 8008826:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800882a:	4904      	ldr	r1, [pc, #16]	; (800883c <tcp_sent+0x2c>)
 800882c:	4804      	ldr	r0, [pc, #16]	; (8008840 <tcp_sent+0x30>)
 800882e:	f022 fa4d 	bl	802accc <iprintf>
 8008832:	e7f4      	b.n	800881e <tcp_sent+0xe>
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	0802cff0 	.word	0x0802cff0
 800883c:	0802d104 	.word	0x0802d104
 8008840:	0802bc48 	.word	0x0802bc48

08008844 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008844:	b180      	cbz	r0, 8008868 <tcp_err+0x24>
{
 8008846:	b538      	push	{r3, r4, r5, lr}
 8008848:	460c      	mov	r4, r1
 800884a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800884c:	7d03      	ldrb	r3, [r0, #20]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d002      	beq.n	8008858 <tcp_err+0x14>
    pcb->errf = err;
 8008852:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8008856:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <tcp_err+0x28>)
 800885a:	f640 020d 	movw	r2, #2061	; 0x80d
 800885e:	4904      	ldr	r1, [pc, #16]	; (8008870 <tcp_err+0x2c>)
 8008860:	4804      	ldr	r0, [pc, #16]	; (8008874 <tcp_err+0x30>)
 8008862:	f022 fa33 	bl	802accc <iprintf>
 8008866:	e7f4      	b.n	8008852 <tcp_err+0xe>
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	0802cff0 	.word	0x0802cff0
 8008870:	0802d12c 	.word	0x0802d12c
 8008874:	0802bc48 	.word	0x0802bc48

08008878 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008878:	b118      	cbz	r0, 8008882 <tcp_accept+0xa>
 800887a:	7d02      	ldrb	r2, [r0, #20]
 800887c:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800887e:	bf08      	it	eq
 8008880:	6181      	streq	r1, [r0, #24]
  }
}
 8008882:	4770      	bx	lr

08008884 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008884:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008886:	b148      	cbz	r0, 800889c <tcp_poll+0x18>
 8008888:	460d      	mov	r5, r1
 800888a:	4614      	mov	r4, r2
 800888c:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800888e:	7d03      	ldrb	r3, [r0, #20]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d00b      	beq.n	80088ac <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008894:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008898:	7774      	strb	r4, [r6, #29]
}
 800889a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800889c:	4b07      	ldr	r3, [pc, #28]	; (80088bc <tcp_poll+0x38>)
 800889e:	f640 023d 	movw	r2, #2109	; 0x83d
 80088a2:	4907      	ldr	r1, [pc, #28]	; (80088c0 <tcp_poll+0x3c>)
 80088a4:	4807      	ldr	r0, [pc, #28]	; (80088c4 <tcp_poll+0x40>)
 80088a6:	f022 fa11 	bl	802accc <iprintf>
 80088aa:	e7f6      	b.n	800889a <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <tcp_poll+0x38>)
 80088ae:	f640 023e 	movw	r2, #2110	; 0x83e
 80088b2:	4905      	ldr	r1, [pc, #20]	; (80088c8 <tcp_poll+0x44>)
 80088b4:	4803      	ldr	r0, [pc, #12]	; (80088c4 <tcp_poll+0x40>)
 80088b6:	f022 fa09 	bl	802accc <iprintf>
 80088ba:	e7eb      	b.n	8008894 <tcp_poll+0x10>
 80088bc:	0802cff0 	.word	0x0802cff0
 80088c0:	0802d154 	.word	0x0802d154
 80088c4:	0802bc48 	.word	0x0802bc48
 80088c8:	0802d16c 	.word	0x0802d16c

080088cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80088cc:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80088ce:	b130      	cbz	r0, 80088de <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <tcp_next_iss+0x24>)
 80088d2:	6818      	ldr	r0, [r3, #0]
 80088d4:	4a07      	ldr	r2, [pc, #28]	; (80088f4 <tcp_next_iss+0x28>)
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	4410      	add	r0, r2
 80088da:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 80088dc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <tcp_next_iss+0x2c>)
 80088e0:	f640 02af 	movw	r2, #2223	; 0x8af
 80088e4:	4905      	ldr	r1, [pc, #20]	; (80088fc <tcp_next_iss+0x30>)
 80088e6:	4806      	ldr	r0, [pc, #24]	; (8008900 <tcp_next_iss+0x34>)
 80088e8:	f022 f9f0 	bl	802accc <iprintf>
 80088ec:	e7f0      	b.n	80088d0 <tcp_next_iss+0x4>
 80088ee:	bf00      	nop
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	20014638 	.word	0x20014638
 80088f8:	0802cff0 	.word	0x0802cff0
 80088fc:	0802d18c 	.word	0x0802d18c
 8008900:	0802bc48 	.word	0x0802bc48

08008904 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4605      	mov	r5, r0
 8008908:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800890a:	b162      	cbz	r2, 8008926 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800890c:	b14c      	cbz	r4, 8008922 <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 800890e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008910:	b13b      	cbz	r3, 8008922 <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008912:	2b28      	cmp	r3, #40	; 0x28
 8008914:	bf86      	itte	hi
 8008916:	3b28      	subhi	r3, #40	; 0x28
 8008918:	b29b      	uxthhi	r3, r3
 800891a:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800891c:	429d      	cmp	r5, r3
 800891e:	bf28      	it	cs
 8008920:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8008922:	4628      	mov	r0, r5
 8008924:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <tcp_eff_send_mss_netif+0x34>)
 8008928:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800892c:	4903      	ldr	r1, [pc, #12]	; (800893c <tcp_eff_send_mss_netif+0x38>)
 800892e:	4804      	ldr	r0, [pc, #16]	; (8008940 <tcp_eff_send_mss_netif+0x3c>)
 8008930:	f022 f9cc 	bl	802accc <iprintf>
 8008934:	e7ea      	b.n	800890c <tcp_eff_send_mss_netif+0x8>
 8008936:	bf00      	nop
 8008938:	0802cff0 	.word	0x0802cff0
 800893c:	0802d1a8 	.word	0x0802d1a8
 8008940:	0802bc48 	.word	0x0802bc48

08008944 <tcp_connect>:
{
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008946:	2800      	cmp	r0, #0
 8008948:	d04f      	beq.n	80089ea <tcp_connect+0xa6>
 800894a:	461e      	mov	r6, r3
 800894c:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800894e:	2900      	cmp	r1, #0
 8008950:	d055      	beq.n	80089fe <tcp_connect+0xba>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008952:	7d03      	ldrb	r3, [r0, #20]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15c      	bne.n	8008a12 <tcp_connect+0xce>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008958:	680b      	ldr	r3, [r1, #0]
 800895a:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 800895c:	8302      	strh	r2, [r0, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800895e:	7a00      	ldrb	r0, [r0, #8]
 8008960:	2800      	cmp	r0, #0
 8008962:	d060      	beq.n	8008a26 <tcp_connect+0xe2>
    netif = netif_get_by_index(pcb->netif_idx);
 8008964:	f7ff f90a 	bl	8007b7c <netif_get_by_index>
 8008968:	4605      	mov	r5, r0
  if (netif == NULL) {
 800896a:	2d00      	cmp	r5, #0
 800896c:	d074      	beq.n	8008a58 <tcp_connect+0x114>
  if (ip_addr_isany(&pcb->local_ip)) {
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	b90b      	cbnz	r3, 8008976 <tcp_connect+0x32>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008972:	686b      	ldr	r3, [r5, #4]
 8008974:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8008976:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8008978:	b927      	cbnz	r7, 8008984 <tcp_connect+0x40>
    pcb->local_port = tcp_new_port();
 800897a:	f7ff fdef 	bl	800855c <tcp_new_port>
 800897e:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8008980:	2800      	cmp	r0, #0
 8008982:	d06c      	beq.n	8008a5e <tcp_connect+0x11a>
  iss = tcp_next_iss(pcb);
 8008984:	4620      	mov	r0, r4
 8008986:	f7ff ffa1 	bl	80088cc <tcp_next_iss>
  pcb->rcv_nxt = 0;
 800898a:	2100      	movs	r1, #0
 800898c:	6261      	str	r1, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 800898e:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008990:	3801      	subs	r0, #1
 8008992:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008994:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8008996:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008998:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800899c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800899e:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80089a0:	62e1      	str	r1, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80089a2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 80089a6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80089aa:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80089ac:	1d22      	adds	r2, r4, #4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7ff ffa8 	bl	8008904 <tcp_eff_send_mss_netif>
 80089b4:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 80089bc:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80089c0:	2102      	movs	r1, #2
 80089c2:	4620      	mov	r0, r4
 80089c4:	f003 f8fe 	bl	800bbc4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d142      	bne.n	8008a54 <tcp_connect+0x110>
    pcb->state = SYN_SENT;
 80089ce:	2302      	movs	r3, #2
 80089d0:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	d032      	beq.n	8008a3c <tcp_connect+0xf8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80089d6:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <tcp_connect+0x120>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	42a3      	cmp	r3, r4
 80089dc:	d028      	beq.n	8008a30 <tcp_connect+0xec>
 80089de:	b36b      	cbz	r3, 8008a3c <tcp_connect+0xf8>
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	42a2      	cmp	r2, r4
 80089e4:	d028      	beq.n	8008a38 <tcp_connect+0xf4>
 80089e6:	4613      	mov	r3, r2
 80089e8:	e7f9      	b.n	80089de <tcp_connect+0x9a>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80089ea:	4b1f      	ldr	r3, [pc, #124]	; (8008a68 <tcp_connect+0x124>)
 80089ec:	f240 4235 	movw	r2, #1077	; 0x435
 80089f0:	491e      	ldr	r1, [pc, #120]	; (8008a6c <tcp_connect+0x128>)
 80089f2:	481f      	ldr	r0, [pc, #124]	; (8008a70 <tcp_connect+0x12c>)
 80089f4:	f022 f96a 	bl	802accc <iprintf>
 80089f8:	f06f 050f 	mvn.w	r5, #15
 80089fc:	e02a      	b.n	8008a54 <tcp_connect+0x110>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <tcp_connect+0x124>)
 8008a00:	f240 4236 	movw	r2, #1078	; 0x436
 8008a04:	491b      	ldr	r1, [pc, #108]	; (8008a74 <tcp_connect+0x130>)
 8008a06:	481a      	ldr	r0, [pc, #104]	; (8008a70 <tcp_connect+0x12c>)
 8008a08:	f022 f960 	bl	802accc <iprintf>
 8008a0c:	f06f 050f 	mvn.w	r5, #15
 8008a10:	e020      	b.n	8008a54 <tcp_connect+0x110>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <tcp_connect+0x124>)
 8008a14:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8008a18:	4917      	ldr	r1, [pc, #92]	; (8008a78 <tcp_connect+0x134>)
 8008a1a:	4815      	ldr	r0, [pc, #84]	; (8008a70 <tcp_connect+0x12c>)
 8008a1c:	f022 f956 	bl	802accc <iprintf>
 8008a20:	f06f 0509 	mvn.w	r5, #9
 8008a24:	e016      	b.n	8008a54 <tcp_connect+0x110>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008a26:	1d20      	adds	r0, r4, #4
 8008a28:	f006 fac0 	bl	800efac <ip4_route>
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	e79c      	b.n	800896a <tcp_connect+0x26>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008a30:	68e2      	ldr	r2, [r4, #12]
 8008a32:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <tcp_connect+0x120>)
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	e001      	b.n	8008a3c <tcp_connect+0xf8>
 8008a38:	68e2      	ldr	r2, [r4, #12]
 8008a3a:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <tcp_connect+0x138>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	60e2      	str	r2, [r4, #12]
 8008a42:	601c      	str	r4, [r3, #0]
 8008a44:	f003 fdf8 	bl	800c638 <tcp_timer_needed>
 8008a48:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <tcp_connect+0x13c>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f003 fae8 	bl	800c024 <tcp_output>
}
 8008a54:	4628      	mov	r0, r5
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_RTE;
 8008a58:	f06f 0503 	mvn.w	r5, #3
 8008a5c:	e7fa      	b.n	8008a54 <tcp_connect+0x110>
      return ERR_BUF;
 8008a5e:	f06f 0501 	mvn.w	r5, #1
 8008a62:	e7f7      	b.n	8008a54 <tcp_connect+0x110>
 8008a64:	20014640 	.word	0x20014640
 8008a68:	0802cff0 	.word	0x0802cff0
 8008a6c:	0802d1d0 	.word	0x0802d1d0
 8008a70:	0802bc48 	.word	0x0802bc48
 8008a74:	0802d1ec 	.word	0x0802d1ec
 8008a78:	0802d208 	.word	0x0802d208
 8008a7c:	20014634 	.word	0x20014634
 8008a80:	20014630 	.word	0x20014630

08008a84 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008a84:	b510      	push	{r4, lr}
 8008a86:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8008a88:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008a8a:	b118      	cbz	r0, 8008a94 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8008a8c:	f7ff fe73 	bl	8008776 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008a94:	bd10      	pop	{r4, pc}
	...

08008a98 <tcp_pcb_purge>:
{
 8008a98:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008a9a:	b1f8      	cbz	r0, 8008adc <tcp_pcb_purge+0x44>
 8008a9c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8008a9e:	7d03      	ldrb	r3, [r0, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d91a      	bls.n	8008ada <tcp_pcb_purge+0x42>
 8008aa4:	2b0a      	cmp	r3, #10
 8008aa6:	d018      	beq.n	8008ada <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8008aa8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8008aaa:	b118      	cbz	r0, 8008ab4 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 8008aac:	f7ff f966 	bl	8007d7c <pbuf_free>
      pcb->refused_data = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8008ab4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ab6:	b113      	cbz	r3, 8008abe <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7ff ffe3 	bl	8008a84 <tcp_free_ooseq>
    pcb->rtime = -1;
 8008abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ac2:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8008ac4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ac6:	f7ff fe56 	bl	8008776 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008aca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008acc:	f7ff fe53 	bl	8008776 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008ad4:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8008ad6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8008ada:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <tcp_pcb_purge+0x54>)
 8008ade:	f640 0251 	movw	r2, #2129	; 0x851
 8008ae2:	4903      	ldr	r1, [pc, #12]	; (8008af0 <tcp_pcb_purge+0x58>)
 8008ae4:	4803      	ldr	r0, [pc, #12]	; (8008af4 <tcp_pcb_purge+0x5c>)
 8008ae6:	f022 f8f1 	bl	802accc <iprintf>
 8008aea:	e7f6      	b.n	8008ada <tcp_pcb_purge+0x42>
 8008aec:	0802cff0 	.word	0x0802cff0
 8008af0:	0802d238 	.word	0x0802d238
 8008af4:	0802bc48 	.word	0x0802bc48

08008af8 <tcp_pcb_remove>:
{
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008afc:	460c      	mov	r4, r1
 8008afe:	b149      	cbz	r1, 8008b14 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b00:	b185      	cbz	r5, 8008b24 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d015      	beq.n	8008b34 <tcp_pcb_remove+0x3c>
 8008b08:	b1cb      	cbz	r3, 8008b3e <tcp_pcb_remove+0x46>
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	42a2      	cmp	r2, r4
 8008b0e:	d014      	beq.n	8008b3a <tcp_pcb_remove+0x42>
 8008b10:	4613      	mov	r3, r2
 8008b12:	e7f9      	b.n	8008b08 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <tcp_pcb_remove+0xb4>)
 8008b16:	f640 0283 	movw	r2, #2179	; 0x883
 8008b1a:	4925      	ldr	r1, [pc, #148]	; (8008bb0 <tcp_pcb_remove+0xb8>)
 8008b1c:	4825      	ldr	r0, [pc, #148]	; (8008bb4 <tcp_pcb_remove+0xbc>)
 8008b1e:	f022 f8d5 	bl	802accc <iprintf>
 8008b22:	e7ed      	b.n	8008b00 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b24:	4b21      	ldr	r3, [pc, #132]	; (8008bac <tcp_pcb_remove+0xb4>)
 8008b26:	f640 0284 	movw	r2, #2180	; 0x884
 8008b2a:	4923      	ldr	r1, [pc, #140]	; (8008bb8 <tcp_pcb_remove+0xc0>)
 8008b2c:	4821      	ldr	r0, [pc, #132]	; (8008bb4 <tcp_pcb_remove+0xbc>)
 8008b2e:	f022 f8cd 	bl	802accc <iprintf>
 8008b32:	e7e6      	b.n	8008b02 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8008b34:	68e3      	ldr	r3, [r4, #12]
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	e001      	b.n	8008b3e <tcp_pcb_remove+0x46>
 8008b3a:	68e2      	ldr	r2, [r4, #12]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7ff ffa8 	bl	8008a98 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8008b48:	7d23      	ldrb	r3, [r4, #20]
 8008b4a:	2b0a      	cmp	r3, #10
 8008b4c:	d005      	beq.n	8008b5a <tcp_pcb_remove+0x62>
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d01e      	beq.n	8008b90 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8008b52:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8008b54:	f013 0f01 	tst.w	r3, #1
 8008b58:	d11e      	bne.n	8008b98 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008b5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b5c:	b133      	cbz	r3, 8008b6c <tcp_pcb_remove+0x74>
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <tcp_pcb_remove+0xb4>)
 8008b60:	f640 0293 	movw	r2, #2195	; 0x893
 8008b64:	4915      	ldr	r1, [pc, #84]	; (8008bbc <tcp_pcb_remove+0xc4>)
 8008b66:	4813      	ldr	r0, [pc, #76]	; (8008bb4 <tcp_pcb_remove+0xbc>)
 8008b68:	f022 f8b0 	bl	802accc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008b6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008b6e:	b133      	cbz	r3, 8008b7e <tcp_pcb_remove+0x86>
 8008b70:	4b0e      	ldr	r3, [pc, #56]	; (8008bac <tcp_pcb_remove+0xb4>)
 8008b72:	f640 0294 	movw	r2, #2196	; 0x894
 8008b76:	4912      	ldr	r1, [pc, #72]	; (8008bc0 <tcp_pcb_remove+0xc8>)
 8008b78:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <tcp_pcb_remove+0xbc>)
 8008b7a:	f022 f8a7 	bl	802accc <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008b7e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008b80:	b133      	cbz	r3, 8008b90 <tcp_pcb_remove+0x98>
 8008b82:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <tcp_pcb_remove+0xb4>)
 8008b84:	f640 0296 	movw	r2, #2198	; 0x896
 8008b88:	490e      	ldr	r1, [pc, #56]	; (8008bc4 <tcp_pcb_remove+0xcc>)
 8008b8a:	480a      	ldr	r0, [pc, #40]	; (8008bb4 <tcp_pcb_remove+0xbc>)
 8008b8c:	f022 f89e 	bl	802accc <iprintf>
  pcb->state = CLOSED;
 8008b90:	2300      	movs	r3, #0
 8008b92:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008b94:	82e3      	strh	r3, [r4, #22]
}
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8008b98:	f043 0302 	orr.w	r3, r3, #2
 8008b9c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f003 fa40 	bl	800c024 <tcp_output>
  if (pcb->state != LISTEN) {
 8008ba4:	7d23      	ldrb	r3, [r4, #20]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d0f2      	beq.n	8008b90 <tcp_pcb_remove+0x98>
 8008baa:	e7d6      	b.n	8008b5a <tcp_pcb_remove+0x62>
 8008bac:	0802cff0 	.word	0x0802cff0
 8008bb0:	0802d254 	.word	0x0802d254
 8008bb4:	0802bc48 	.word	0x0802bc48
 8008bb8:	0802d270 	.word	0x0802d270
 8008bbc:	0802d290 	.word	0x0802d290
 8008bc0:	0802d2a8 	.word	0x0802d2a8
 8008bc4:	0802d2c4 	.word	0x0802d2c4

08008bc8 <tcp_abandon>:
{
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008bce:	b1f8      	cbz	r0, 8008c10 <tcp_abandon+0x48>
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008bd4:	7d03      	ldrb	r3, [r0, #20]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d022      	beq.n	8008c20 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8008bda:	7d23      	ldrb	r3, [r4, #20]
 8008bdc:	2b0a      	cmp	r3, #10
 8008bde:	d027      	beq.n	8008c30 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8008be0:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008be4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8008be8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8008bec:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d147      	bne.n	8008c82 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8008bf2:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8008bf6:	f1ba 0f00 	cmp.w	sl, #0
 8008bfa:	d04c      	beq.n	8008c96 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008bfc:	4b2d      	ldr	r3, [pc, #180]	; (8008cb4 <tcp_abandon+0xec>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d01d      	beq.n	8008c40 <tcp_abandon+0x78>
 8008c04:	b313      	cbz	r3, 8008c4c <tcp_abandon+0x84>
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	42a2      	cmp	r2, r4
 8008c0a:	d01d      	beq.n	8008c48 <tcp_abandon+0x80>
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	e7f9      	b.n	8008c04 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c10:	4b29      	ldr	r3, [pc, #164]	; (8008cb8 <tcp_abandon+0xf0>)
 8008c12:	f240 223d 	movw	r2, #573	; 0x23d
 8008c16:	4929      	ldr	r1, [pc, #164]	; (8008cbc <tcp_abandon+0xf4>)
 8008c18:	4829      	ldr	r0, [pc, #164]	; (8008cc0 <tcp_abandon+0xf8>)
 8008c1a:	f022 f857 	bl	802accc <iprintf>
 8008c1e:	e02d      	b.n	8008c7c <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008c20:	4b25      	ldr	r3, [pc, #148]	; (8008cb8 <tcp_abandon+0xf0>)
 8008c22:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008c26:	4927      	ldr	r1, [pc, #156]	; (8008cc4 <tcp_abandon+0xfc>)
 8008c28:	4825      	ldr	r0, [pc, #148]	; (8008cc0 <tcp_abandon+0xf8>)
 8008c2a:	f022 f84f 	bl	802accc <iprintf>
 8008c2e:	e7d4      	b.n	8008bda <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008c30:	4621      	mov	r1, r4
 8008c32:	4825      	ldr	r0, [pc, #148]	; (8008cc8 <tcp_abandon+0x100>)
 8008c34:	f7ff ff60 	bl	8008af8 <tcp_pcb_remove>
    tcp_free(pcb);
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff fd03 	bl	8008644 <tcp_free>
 8008c3e:	e01d      	b.n	8008c7c <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c40:	68e2      	ldr	r2, [r4, #12]
 8008c42:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <tcp_abandon+0xec>)
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	e001      	b.n	8008c4c <tcp_abandon+0x84>
 8008c48:	68e2      	ldr	r2, [r4, #12]
 8008c4a:	60da      	str	r2, [r3, #12]
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8008c50:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8008c52:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008c54:	b108      	cbz	r0, 8008c5a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8008c56:	f7ff fd8e 	bl	8008776 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008c5a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008c5c:	b108      	cbz	r0, 8008c62 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 8008c5e:	f7ff fd8a 	bl	8008776 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008c62:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008c64:	b108      	cbz	r0, 8008c6a <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8008c66:	f7ff fd86 	bl	8008776 <tcp_segs_free>
    if (send_rst) {
 8008c6a:	b9b5      	cbnz	r5, 8008c9a <tcp_abandon+0xd2>
    tcp_free(pcb);
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7ff fce9 	bl	8008644 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008c72:	b11e      	cbz	r6, 8008c7c <tcp_abandon+0xb4>
 8008c74:	f06f 010c 	mvn.w	r1, #12
 8008c78:	4638      	mov	r0, r7
 8008c7a:	47b0      	blx	r6
}
 8008c7c:	b004      	add	sp, #16
 8008c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8008c82:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c86:	4621      	mov	r1, r4
 8008c88:	4810      	ldr	r0, [pc, #64]	; (8008ccc <tcp_abandon+0x104>)
 8008c8a:	f7ff ff35 	bl	8008af8 <tcp_pcb_remove>
 8008c8e:	4b10      	ldr	r3, [pc, #64]	; (8008cd0 <tcp_abandon+0x108>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e7dd      	b.n	8008c52 <tcp_abandon+0x8a>
    int send_rst = 0;
 8008c96:	2500      	movs	r5, #0
 8008c98:	e7db      	b.n	8008c52 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008c9a:	8b23      	ldrh	r3, [r4, #24]
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	f8cd a004 	str.w	sl, [sp, #4]
 8008ca2:	1d23      	adds	r3, r4, #4
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	464a      	mov	r2, r9
 8008caa:	4641      	mov	r1, r8
 8008cac:	4620      	mov	r0, r4
 8008cae:	f003 f937 	bl	800bf20 <tcp_rst>
 8008cb2:	e7db      	b.n	8008c6c <tcp_abandon+0xa4>
 8008cb4:	20014640 	.word	0x20014640
 8008cb8:	0802cff0 	.word	0x0802cff0
 8008cbc:	0802d2dc 	.word	0x0802d2dc
 8008cc0:	0802bc48 	.word	0x0802bc48
 8008cc4:	0802d2f8 	.word	0x0802d2f8
 8008cc8:	20014644 	.word	0x20014644
 8008ccc:	20014634 	.word	0x20014634
 8008cd0:	20014630 	.word	0x20014630

08008cd4 <tcp_abort>:
{
 8008cd4:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	f7ff ff76 	bl	8008bc8 <tcp_abandon>
}
 8008cdc:	bd08      	pop	{r3, pc}
	...

08008ce0 <tcp_netif_ip_addr_changed_pcblist>:
{
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	b108      	cbz	r0, 8008cec <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 8008ce8:	b97c      	cbnz	r4, 8008d0a <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008cee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008cf2:	490a      	ldr	r1, [pc, #40]	; (8008d1c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8008cf4:	480a      	ldr	r0, [pc, #40]	; (8008d20 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8008cf6:	f021 ffe9 	bl	802accc <iprintf>
 8008cfa:	e7f5      	b.n	8008ce8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 8008cfc:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f7ff ffe8 	bl	8008cd4 <tcp_abort>
      pcb = next;
 8008d04:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8008d06:	2c00      	cmp	r4, #0
 8008d08:	d0ef      	beq.n	8008cea <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d0f4      	beq.n	8008cfc <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8008d12:	68e4      	ldr	r4, [r4, #12]
 8008d14:	e7f7      	b.n	8008d06 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8008d16:	bf00      	nop
 8008d18:	0802cff0 	.word	0x0802cff0
 8008d1c:	0802d32c 	.word	0x0802d32c
 8008d20:	0802bc48 	.word	0x0802bc48

08008d24 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8008d24:	b308      	cbz	r0, 8008d6a <tcp_netif_ip_addr_changed+0x46>
{
 8008d26:	b538      	push	{r3, r4, r5, lr}
 8008d28:	460d      	mov	r5, r1
 8008d2a:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8008d2c:	6803      	ldr	r3, [r0, #0]
 8008d2e:	b903      	cbnz	r3, 8008d32 <tcp_netif_ip_addr_changed+0xe>
}
 8008d30:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008d32:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <tcp_netif_ip_addr_changed+0x48>)
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	f7ff ffd3 	bl	8008ce0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	; (8008d70 <tcp_netif_ip_addr_changed+0x4c>)
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f7ff ffce 	bl	8008ce0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	d0f3      	beq.n	8008d30 <tcp_netif_ip_addr_changed+0xc>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <tcp_netif_ip_addr_changed+0x50>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0ec      	beq.n	8008d30 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008d5c:	bf04      	itt	eq
 8008d5e:	682a      	ldreq	r2, [r5, #0]
 8008d60:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f6      	bne.n	8008d56 <tcp_netif_ip_addr_changed+0x32>
 8008d68:	e7e2      	b.n	8008d30 <tcp_netif_ip_addr_changed+0xc>
 8008d6a:	4770      	bx	lr
 8008d6c:	20014634 	.word	0x20014634
 8008d70:	20014640 	.word	0x20014640
 8008d74:	2001463c 	.word	0x2001463c

08008d78 <tcp_kill_state>:
{
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008d7c:	f1a0 0308 	sub.w	r3, r0, #8
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d807      	bhi.n	8008d96 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <tcp_kill_state+0x50>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	b1e3      	cbz	r3, 8008dc6 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d8c:	4a0f      	ldr	r2, [pc, #60]	; (8008dcc <tcp_kill_state+0x54>)
 8008d8e:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 8008d90:	2100      	movs	r1, #0
  inactive = NULL;
 8008d92:	4608      	mov	r0, r1
 8008d94:	e009      	b.n	8008daa <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008d96:	4b0e      	ldr	r3, [pc, #56]	; (8008dd0 <tcp_kill_state+0x58>)
 8008d98:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008d9c:	490d      	ldr	r1, [pc, #52]	; (8008dd4 <tcp_kill_state+0x5c>)
 8008d9e:	480e      	ldr	r0, [pc, #56]	; (8008dd8 <tcp_kill_state+0x60>)
 8008da0:	f021 ff94 	bl	802accc <iprintf>
 8008da4:	e7ef      	b.n	8008d86 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	b14b      	cbz	r3, 8008dbe <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8008daa:	7d1a      	ldrb	r2, [r3, #20]
 8008dac:	42a2      	cmp	r2, r4
 8008dae:	d1fa      	bne.n	8008da6 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008db0:	6a1a      	ldr	r2, [r3, #32]
 8008db2:	1aaa      	subs	r2, r5, r2
 8008db4:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 8008db6:	bf24      	itt	cs
 8008db8:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008dba:	4618      	movcs	r0, r3
 8008dbc:	e7f3      	b.n	8008da6 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 8008dbe:	b110      	cbz	r0, 8008dc6 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	f7ff ff01 	bl	8008bc8 <tcp_abandon>
}
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	20014634 	.word	0x20014634
 8008dcc:	20014638 	.word	0x20014638
 8008dd0:	0802cff0 	.word	0x0802cff0
 8008dd4:	0802d360 	.word	0x0802d360
 8008dd8:	0802bc48 	.word	0x0802bc48

08008ddc <tcp_alloc>:
{
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7fe fcdd 	bl	80077a0 <memp_malloc>
  if (pcb == NULL) {
 8008de6:	4604      	mov	r4, r0
 8008de8:	b360      	cbz	r0, 8008e44 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008dea:	229c      	movs	r2, #156	; 0x9c
 8008dec:	2100      	movs	r1, #0
 8008dee:	4620      	mov	r0, r4
 8008df0:	f021 fbcb 	bl	802a58a <memset>
    pcb->prio = prio;
 8008df4:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008df6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8008dfa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008dfe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008e02:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008e04:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008e06:	22ff      	movs	r2, #255	; 0xff
 8008e08:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8008e0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008e0e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e10:	2206      	movs	r2, #6
 8008e12:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008e16:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e1c:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008e24:	4a3b      	ldr	r2, [pc, #236]	; (8008f14 <tcp_alloc+0x138>)
 8008e26:	6812      	ldr	r2, [r2, #0]
 8008e28:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008e2a:	4a3b      	ldr	r2, [pc, #236]	; (8008f18 <tcp_alloc+0x13c>)
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8008e30:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8008e34:	4b39      	ldr	r3, [pc, #228]	; (8008f1c <tcp_alloc+0x140>)
 8008e36:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008e3a:	4b39      	ldr	r3, [pc, #228]	; (8008f20 <tcp_alloc+0x144>)
 8008e3c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8008e40:	4620      	mov	r0, r4
 8008e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008e44:	4b37      	ldr	r3, [pc, #220]	; (8008f24 <tcp_alloc+0x148>)
 8008e46:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	d137      	bne.n	8008ebc <tcp_alloc+0xe0>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e4c:	4b36      	ldr	r3, [pc, #216]	; (8008f28 <tcp_alloc+0x14c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	b17b      	cbz	r3, 8008e72 <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e52:	4a30      	ldr	r2, [pc, #192]	; (8008f14 <tcp_alloc+0x138>)
 8008e54:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8008e56:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e58:	6a1a      	ldr	r2, [r3, #32]
 8008e5a:	1a82      	subs	r2, r0, r2
 8008e5c:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8008e5e:	bf24      	itt	cs
 8008e60:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e62:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f6      	bne.n	8008e58 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 8008e6a:	b114      	cbz	r4, 8008e72 <tcp_alloc+0x96>
    tcp_abort(inactive);
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f7ff ff31 	bl	8008cd4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e72:	2001      	movs	r0, #1
 8008e74:	f7fe fc94 	bl	80077a0 <memp_malloc>
    if (pcb == NULL) {
 8008e78:	4604      	mov	r4, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1b5      	bne.n	8008dea <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008e7e:	2009      	movs	r0, #9
 8008e80:	f7ff ff7a 	bl	8008d78 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e84:	2001      	movs	r0, #1
 8008e86:	f7fe fc8b 	bl	80077a0 <memp_malloc>
      if (pcb == NULL) {
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d1ac      	bne.n	8008dea <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008e90:	2008      	movs	r0, #8
 8008e92:	f7ff ff71 	bl	8008d78 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e96:	2001      	movs	r0, #1
 8008e98:	f7fe fc82 	bl	80077a0 <memp_malloc>
        if (pcb == NULL) {
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d1a3      	bne.n	8008dea <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008ea2:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008ea6:	d110      	bne.n	8008eca <tcp_alloc+0xee>
  if (mprio == 0) {
 8008ea8:	b366      	cbz	r6, 8008f04 <tcp_alloc+0x128>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008eaa:	4633      	mov	r3, r6
 8008eac:	e00e      	b.n	8008ecc <tcp_alloc+0xf0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008eae:	f023 0308 	bic.w	r3, r3, #8
 8008eb2:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008eb4:	f7ff fb7e 	bl	80085b4 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	d0c7      	beq.n	8008e4c <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008ec0:	8b43      	ldrh	r3, [r0, #26]
 8008ec2:	f013 0f08 	tst.w	r3, #8
 8008ec6:	d0f7      	beq.n	8008eb8 <tcp_alloc+0xdc>
 8008ec8:	e7f1      	b.n	8008eae <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008eca:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ed0:	4b14      	ldr	r3, [pc, #80]	; (8008f24 <tcp_alloc+0x148>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	b1b3      	cbz	r3, 8008f04 <tcp_alloc+0x128>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008ed6:	490f      	ldr	r1, [pc, #60]	; (8008f14 <tcp_alloc+0x138>)
 8008ed8:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 8008eda:	2000      	movs	r0, #0
 8008edc:	e005      	b.n	8008eea <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 8008ede:	6a1a      	ldr	r2, [r3, #32]
 8008ee0:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 8008ee2:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8008ee4:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	b143      	cbz	r3, 8008efc <tcp_alloc+0x120>
    if ((pcb->prio < mprio) ||
 8008eea:	7d59      	ldrb	r1, [r3, #21]
 8008eec:	4291      	cmp	r1, r2
 8008eee:	d3f6      	bcc.n	8008ede <tcp_alloc+0x102>
 8008ef0:	d1f9      	bne.n	8008ee6 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008ef2:	6a1f      	ldr	r7, [r3, #32]
 8008ef4:	1bef      	subs	r7, r5, r7
 8008ef6:	4287      	cmp	r7, r0
 8008ef8:	d3f5      	bcc.n	8008ee6 <tcp_alloc+0x10a>
 8008efa:	e7f0      	b.n	8008ede <tcp_alloc+0x102>
  if (inactive != NULL) {
 8008efc:	b114      	cbz	r4, 8008f04 <tcp_alloc+0x128>
    tcp_abort(inactive);
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7ff fee8 	bl	8008cd4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7fe fc4b 	bl	80077a0 <memp_malloc>
  if (pcb != NULL) {
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d097      	beq.n	8008e40 <tcp_alloc+0x64>
 8008f10:	e76b      	b.n	8008dea <tcp_alloc+0xe>
 8008f12:	bf00      	nop
 8008f14:	20014638 	.word	0x20014638
 8008f18:	20010746 	.word	0x20010746
 8008f1c:	08009101 	.word	0x08009101
 8008f20:	006ddd00 	.word	0x006ddd00
 8008f24:	20014634 	.word	0x20014634
 8008f28:	20014644 	.word	0x20014644

08008f2c <tcp_new_ip_type>:
{
 8008f2c:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008f2e:	2040      	movs	r0, #64	; 0x40
 8008f30:	f7ff ff54 	bl	8008ddc <tcp_alloc>
}
 8008f34:	bd08      	pop	{r3, pc}
	...

08008f38 <tcp_close_shutdown>:
{
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b188      	cbz	r0, 8008f66 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008f42:	b125      	cbz	r5, 8008f4e <tcp_close_shutdown+0x16>
 8008f44:	7d23      	ldrb	r3, [r4, #20]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d015      	beq.n	8008f76 <tcp_close_shutdown+0x3e>
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	d013      	beq.n	8008f76 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 8008f4e:	7d23      	ldrb	r3, [r4, #20]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d06e      	beq.n	8009032 <tcp_close_shutdown+0xfa>
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	f000 8091 	beq.w	800907c <tcp_close_shutdown+0x144>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d04f      	beq.n	8008ffe <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f7ff fb28 	bl	80085b4 <tcp_close_shutdown_fin>
 8008f64:	e063      	b.n	800902e <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008f66:	4b4b      	ldr	r3, [pc, #300]	; (8009094 <tcp_close_shutdown+0x15c>)
 8008f68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008f6c:	494a      	ldr	r1, [pc, #296]	; (8009098 <tcp_close_shutdown+0x160>)
 8008f6e:	484b      	ldr	r0, [pc, #300]	; (800909c <tcp_close_shutdown+0x164>)
 8008f70:	f021 feac 	bl	802accc <iprintf>
 8008f74:	e7e5      	b.n	8008f42 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008f76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008f78:	b1e3      	cbz	r3, 8008fb4 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008f7a:	8b63      	ldrh	r3, [r4, #26]
 8008f7c:	f013 0f10 	tst.w	r3, #16
 8008f80:	d01d      	beq.n	8008fbe <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f82:	8b23      	ldrh	r3, [r4, #24]
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	8ae3      	ldrh	r3, [r4, #22]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	1d23      	adds	r3, r4, #4
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	4623      	mov	r3, r4
 8008f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f92:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008f94:	4620      	mov	r0, r4
 8008f96:	f002 ffc3 	bl	800bf20 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f7ff fd7c 	bl	8008a98 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008fa0:	4b3f      	ldr	r3, [pc, #252]	; (80090a0 <tcp_close_shutdown+0x168>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d012      	beq.n	8008fce <tcp_close_shutdown+0x96>
 8008fa8:	b1bb      	cbz	r3, 8008fda <tcp_close_shutdown+0xa2>
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	42a2      	cmp	r2, r4
 8008fae:	d012      	beq.n	8008fd6 <tcp_close_shutdown+0x9e>
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	e7f9      	b.n	8008fa8 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008fb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008fb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fba:	d0c8      	beq.n	8008f4e <tcp_close_shutdown+0x16>
 8008fbc:	e7dd      	b.n	8008f7a <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008fbe:	4b35      	ldr	r3, [pc, #212]	; (8009094 <tcp_close_shutdown+0x15c>)
 8008fc0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008fc4:	4937      	ldr	r1, [pc, #220]	; (80090a4 <tcp_close_shutdown+0x16c>)
 8008fc6:	4835      	ldr	r0, [pc, #212]	; (800909c <tcp_close_shutdown+0x164>)
 8008fc8:	f021 fe80 	bl	802accc <iprintf>
 8008fcc:	e7d9      	b.n	8008f82 <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 8008fce:	68e2      	ldr	r2, [r4, #12]
 8008fd0:	4b33      	ldr	r3, [pc, #204]	; (80090a0 <tcp_close_shutdown+0x168>)
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e001      	b.n	8008fda <tcp_close_shutdown+0xa2>
 8008fd6:	68e2      	ldr	r2, [r4, #12]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60e3      	str	r3, [r4, #12]
 8008fde:	4b32      	ldr	r3, [pc, #200]	; (80090a8 <tcp_close_shutdown+0x170>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008fe4:	4b31      	ldr	r3, [pc, #196]	; (80090ac <tcp_close_shutdown+0x174>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d004      	beq.n	8008ff6 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff fb29 	bl	8008644 <tcp_free>
      return ERR_OK;
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e01b      	b.n	800902e <tcp_close_shutdown+0xf6>
        tcp_trigger_input_pcb_close();
 8008ff6:	f002 f80b 	bl	800b010 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	e017      	b.n	800902e <tcp_close_shutdown+0xf6>
      if (pcb->local_port != 0) {
 8008ffe:	8ae3      	ldrh	r3, [r4, #22]
 8009000:	b18b      	cbz	r3, 8009026 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009002:	4b2b      	ldr	r3, [pc, #172]	; (80090b0 <tcp_close_shutdown+0x178>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	42a3      	cmp	r3, r4
 8009008:	d005      	beq.n	8009016 <tcp_close_shutdown+0xde>
 800900a:	b153      	cbz	r3, 8009022 <tcp_close_shutdown+0xea>
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	42a2      	cmp	r2, r4
 8009010:	d005      	beq.n	800901e <tcp_close_shutdown+0xe6>
 8009012:	4613      	mov	r3, r2
 8009014:	e7f9      	b.n	800900a <tcp_close_shutdown+0xd2>
 8009016:	68e2      	ldr	r2, [r4, #12]
 8009018:	4b25      	ldr	r3, [pc, #148]	; (80090b0 <tcp_close_shutdown+0x178>)
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e001      	b.n	8009022 <tcp_close_shutdown+0xea>
 800901e:	68e2      	ldr	r2, [r4, #12]
 8009020:	60da      	str	r2, [r3, #12]
 8009022:	2300      	movs	r3, #0
 8009024:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff fb0c 	bl	8008644 <tcp_free>
  return ERR_OK;
 800902c:	2000      	movs	r0, #0
}
 800902e:	b005      	add	sp, #20
 8009030:	bd30      	pop	{r4, r5, pc}
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009032:	4d20      	ldr	r5, [pc, #128]	; (80090b4 <tcp_close_shutdown+0x17c>)
 8009034:	1d29      	adds	r1, r5, #4
 8009036:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8009038:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800903a:	f851 3b04 	ldr.w	r3, [r1], #4
 800903e:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009040:	b133      	cbz	r3, 8009050 <tcp_close_shutdown+0x118>
    if (pcb->listener == lpcb) {
 8009042:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009044:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8009046:	bf08      	it	eq
 8009048:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f8      	bne.n	8009042 <tcp_close_shutdown+0x10a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009050:	428d      	cmp	r5, r1
 8009052:	d1f2      	bne.n	800903a <tcp_close_shutdown+0x102>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009054:	4621      	mov	r1, r4
 8009056:	4818      	ldr	r0, [pc, #96]	; (80090b8 <tcp_close_shutdown+0x180>)
 8009058:	f7ff fd4e 	bl	8008af8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800905c:	7d23      	ldrb	r3, [r4, #20]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d005      	beq.n	800906e <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009062:	4621      	mov	r1, r4
 8009064:	2002      	movs	r0, #2
 8009066:	f7fe fbb5 	bl	80077d4 <memp_free>
  return ERR_OK;
 800906a:	2000      	movs	r0, #0
}
 800906c:	e7df      	b.n	800902e <tcp_close_shutdown+0xf6>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800906e:	4b09      	ldr	r3, [pc, #36]	; (8009094 <tcp_close_shutdown+0x15c>)
 8009070:	22df      	movs	r2, #223	; 0xdf
 8009072:	4912      	ldr	r1, [pc, #72]	; (80090bc <tcp_close_shutdown+0x184>)
 8009074:	4809      	ldr	r0, [pc, #36]	; (800909c <tcp_close_shutdown+0x164>)
 8009076:	f021 fe29 	bl	802accc <iprintf>
 800907a:	e7f2      	b.n	8009062 <tcp_close_shutdown+0x12a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800907c:	4621      	mov	r1, r4
 800907e:	4808      	ldr	r0, [pc, #32]	; (80090a0 <tcp_close_shutdown+0x168>)
 8009080:	f7ff fd3a 	bl	8008af8 <tcp_pcb_remove>
 8009084:	4b08      	ldr	r3, [pc, #32]	; (80090a8 <tcp_close_shutdown+0x170>)
 8009086:	2201      	movs	r2, #1
 8009088:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800908a:	4620      	mov	r0, r4
 800908c:	f7ff fada 	bl	8008644 <tcp_free>
  return ERR_OK;
 8009090:	2000      	movs	r0, #0
      break;
 8009092:	e7cc      	b.n	800902e <tcp_close_shutdown+0xf6>
 8009094:	0802cff0 	.word	0x0802cff0
 8009098:	0802d370 	.word	0x0802d370
 800909c:	0802bc48 	.word	0x0802bc48
 80090a0:	20014634 	.word	0x20014634
 80090a4:	0802d390 	.word	0x0802d390
 80090a8:	20014630 	.word	0x20014630
 80090ac:	20014648 	.word	0x20014648
 80090b0:	20014640 	.word	0x20014640
 80090b4:	0802d61c 	.word	0x0802d61c
 80090b8:	2001463c 	.word	0x2001463c
 80090bc:	0802d3ac 	.word	0x0802d3ac

080090c0 <tcp_close>:
{
 80090c0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80090c2:	b160      	cbz	r0, 80090de <tcp_close+0x1e>
 80090c4:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80090c6:	7d02      	ldrb	r2, [r0, #20]
 80090c8:	2a01      	cmp	r2, #1
 80090ca:	d003      	beq.n	80090d4 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80090cc:	8b42      	ldrh	r2, [r0, #26]
 80090ce:	f042 0210 	orr.w	r2, r2, #16
 80090d2:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80090d4:	2101      	movs	r1, #1
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff ff2e 	bl	8008f38 <tcp_close_shutdown>
}
 80090dc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <tcp_close+0x34>)
 80090e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80090e4:	4904      	ldr	r1, [pc, #16]	; (80090f8 <tcp_close+0x38>)
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <tcp_close+0x3c>)
 80090e8:	f021 fdf0 	bl	802accc <iprintf>
 80090ec:	f06f 000f 	mvn.w	r0, #15
 80090f0:	e7f4      	b.n	80090dc <tcp_close+0x1c>
 80090f2:	bf00      	nop
 80090f4:	0802cff0 	.word	0x0802cff0
 80090f8:	0802d3c8 	.word	0x0802d3c8
 80090fc:	0802bc48 	.word	0x0802bc48

08009100 <tcp_recv_null>:
{
 8009100:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009102:	b151      	cbz	r1, 800911a <tcp_recv_null+0x1a>
 8009104:	4614      	mov	r4, r2
 8009106:	4608      	mov	r0, r1
  if (p != NULL) {
 8009108:	b18a      	cbz	r2, 800912e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800910a:	8911      	ldrh	r1, [r2, #8]
 800910c:	f7ff faea 	bl	80086e4 <tcp_recved>
    pbuf_free(p);
 8009110:	4620      	mov	r0, r4
 8009112:	f7fe fe33 	bl	8007d7c <pbuf_free>
  return ERR_OK;
 8009116:	2000      	movs	r0, #0
}
 8009118:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800911a:	4b08      	ldr	r3, [pc, #32]	; (800913c <tcp_recv_null+0x3c>)
 800911c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009120:	4907      	ldr	r1, [pc, #28]	; (8009140 <tcp_recv_null+0x40>)
 8009122:	4808      	ldr	r0, [pc, #32]	; (8009144 <tcp_recv_null+0x44>)
 8009124:	f021 fdd2 	bl	802accc <iprintf>
 8009128:	f06f 000f 	mvn.w	r0, #15
 800912c:	e7f4      	b.n	8009118 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800912e:	b10b      	cbz	r3, 8009134 <tcp_recv_null+0x34>
  return ERR_OK;
 8009130:	2000      	movs	r0, #0
 8009132:	e7f1      	b.n	8009118 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8009134:	f7ff ffc4 	bl	80090c0 <tcp_close>
 8009138:	e7ee      	b.n	8009118 <tcp_recv_null+0x18>
 800913a:	bf00      	nop
 800913c:	0802cff0 	.word	0x0802cff0
 8009140:	0802d3e0 	.word	0x0802d3e0
 8009144:	0802bc48 	.word	0x0802bc48

08009148 <tcp_process_refused_data>:
{
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800914a:	b318      	cbz	r0, 8009194 <tcp_process_refused_data+0x4c>
 800914c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800914e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8009150:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009156:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800915a:	b32d      	cbz	r5, 80091a8 <tcp_process_refused_data+0x60>
 800915c:	4632      	mov	r2, r6
 800915e:	4601      	mov	r1, r0
 8009160:	6900      	ldr	r0, [r0, #16]
 8009162:	47a8      	blx	r5
 8009164:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009166:	bb3d      	cbnz	r5, 80091b8 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009168:	f017 0f20 	tst.w	r7, #32
 800916c:	d02a      	beq.n	80091c4 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800916e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009170:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8009174:	bf1c      	itt	ne
 8009176:	3301      	addne	r3, #1
 8009178:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800917a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800917e:	b30e      	cbz	r6, 80091c4 <tcp_process_refused_data+0x7c>
 8009180:	2300      	movs	r3, #0
 8009182:	461a      	mov	r2, r3
 8009184:	4621      	mov	r1, r4
 8009186:	6920      	ldr	r0, [r4, #16]
 8009188:	47b0      	blx	r6
          return ERR_ABRT;
 800918a:	f110 0f0d 	cmn.w	r0, #13
 800918e:	bf08      	it	eq
 8009190:	4605      	moveq	r5, r0
 8009192:	e017      	b.n	80091c4 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <tcp_process_refused_data+0x80>)
 8009196:	f240 6209 	movw	r2, #1545	; 0x609
 800919a:	490c      	ldr	r1, [pc, #48]	; (80091cc <tcp_process_refused_data+0x84>)
 800919c:	480c      	ldr	r0, [pc, #48]	; (80091d0 <tcp_process_refused_data+0x88>)
 800919e:	f021 fd95 	bl	802accc <iprintf>
 80091a2:	f06f 050f 	mvn.w	r5, #15
 80091a6:	e00d      	b.n	80091c4 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80091a8:	2300      	movs	r3, #0
 80091aa:	4632      	mov	r2, r6
 80091ac:	4601      	mov	r1, r0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff ffa6 	bl	8009100 <tcp_recv_null>
 80091b4:	4605      	mov	r5, r0
 80091b6:	e7d6      	b.n	8009166 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 80091b8:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 80091bc:	bf1c      	itt	ne
 80091be:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 80091c0:	f06f 0504 	mvnne.w	r5, #4
}
 80091c4:	4628      	mov	r0, r5
 80091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c8:	0802cff0 	.word	0x0802cff0
 80091cc:	0802d3fc 	.word	0x0802d3fc
 80091d0:	0802bc48 	.word	0x0802bc48

080091d4 <tcp_fasttmr>:
{
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80091d8:	4a1f      	ldr	r2, [pc, #124]	; (8009258 <tcp_fasttmr+0x84>)
 80091da:	7813      	ldrb	r3, [r2, #0]
 80091dc:	3301      	adds	r3, #1
 80091de:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80091e0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009260 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 80091e4:	4e1d      	ldr	r6, [pc, #116]	; (800925c <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 80091e6:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80091ea:	2c00      	cmp	r4, #0
 80091ec:	d032      	beq.n	8009254 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 80091ee:	4d1a      	ldr	r5, [pc, #104]	; (8009258 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 80091f0:	2700      	movs	r7, #0
 80091f2:	e013      	b.n	800921c <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 80091f4:	f043 0302 	orr.w	r3, r3, #2
 80091f8:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 80091fa:	4620      	mov	r0, r4
 80091fc:	f002 ff12 	bl	800c024 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009200:	8b63      	ldrh	r3, [r4, #26]
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	8363      	strh	r3, [r4, #26]
 8009208:	e011      	b.n	800922e <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800920a:	f023 0308 	bic.w	r3, r3, #8
 800920e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff f9cf 	bl	80085b4 <tcp_close_shutdown_fin>
 8009216:	e00e      	b.n	8009236 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8009218:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800921a:	b1dc      	cbz	r4, 8009254 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800921c:	782b      	ldrb	r3, [r5, #0]
 800921e:	7fa2      	ldrb	r2, [r4, #30]
 8009220:	429a      	cmp	r2, r3
 8009222:	d0f9      	beq.n	8009218 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8009224:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8009226:	8b63      	ldrh	r3, [r4, #26]
 8009228:	f013 0f01 	tst.w	r3, #1
 800922c:	d1e2      	bne.n	80091f4 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800922e:	8b63      	ldrh	r3, [r4, #26]
 8009230:	f013 0f08 	tst.w	r3, #8
 8009234:	d1e9      	bne.n	800920a <tcp_fasttmr+0x36>
      next = pcb->next;
 8009236:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800923a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800923c:	b143      	cbz	r3, 8009250 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 800923e:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8009240:	4620      	mov	r0, r4
 8009242:	f7ff ff81 	bl	8009148 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009246:	7833      	ldrb	r3, [r6, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1cc      	bne.n	80091e6 <tcp_fasttmr+0x12>
      pcb = next;
 800924c:	464c      	mov	r4, r9
 800924e:	e7e4      	b.n	800921a <tcp_fasttmr+0x46>
 8009250:	464c      	mov	r4, r9
 8009252:	e7e2      	b.n	800921a <tcp_fasttmr+0x46>
}
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	20010746 	.word	0x20010746
 800925c:	20014630 	.word	0x20014630
 8009260:	20014634 	.word	0x20014634

08009264 <tcp_shutdown>:
{
 8009264:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009266:	b188      	cbz	r0, 800928c <tcp_shutdown+0x28>
 8009268:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 800926a:	7d03      	ldrb	r3, [r0, #20]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d02a      	beq.n	80092c6 <tcp_shutdown+0x62>
  if (shut_rx) {
 8009270:	b1d1      	cbz	r1, 80092a8 <tcp_shutdown+0x44>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009272:	8b43      	ldrh	r3, [r0, #26]
 8009274:	f043 0310 	orr.w	r3, r3, #16
 8009278:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800927a:	b98a      	cbnz	r2, 80092a0 <tcp_shutdown+0x3c>
    if (pcb->refused_data != NULL) {
 800927c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800927e:	b118      	cbz	r0, 8009288 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 8009280:	f7fe fd7c 	bl	8007d7c <pbuf_free>
      pcb->refused_data = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	67a3      	str	r3, [r4, #120]	; 0x78
  return ERR_OK;
 8009288:	2000      	movs	r0, #0
 800928a:	e01b      	b.n	80092c4 <tcp_shutdown+0x60>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800928c:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <tcp_shutdown+0x74>)
 800928e:	f240 2207 	movw	r2, #519	; 0x207
 8009292:	4912      	ldr	r1, [pc, #72]	; (80092dc <tcp_shutdown+0x78>)
 8009294:	4812      	ldr	r0, [pc, #72]	; (80092e0 <tcp_shutdown+0x7c>)
 8009296:	f021 fd19 	bl	802accc <iprintf>
 800929a:	f06f 000f 	mvn.w	r0, #15
 800929e:	e011      	b.n	80092c4 <tcp_shutdown+0x60>
      return tcp_close_shutdown(pcb, 1);
 80092a0:	2101      	movs	r1, #1
 80092a2:	f7ff fe49 	bl	8008f38 <tcp_close_shutdown>
 80092a6:	e00d      	b.n	80092c4 <tcp_shutdown+0x60>
  if (shut_tx) {
 80092a8:	b182      	cbz	r2, 80092cc <tcp_shutdown+0x68>
    switch (pcb->state) {
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d804      	bhi.n	80092b8 <tcp_shutdown+0x54>
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d804      	bhi.n	80092bc <tcp_shutdown+0x58>
 80092b2:	f06f 000a 	mvn.w	r0, #10
 80092b6:	e005      	b.n	80092c4 <tcp_shutdown+0x60>
 80092b8:	2b07      	cmp	r3, #7
 80092ba:	d109      	bne.n	80092d0 <tcp_shutdown+0x6c>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80092bc:	2100      	movs	r1, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff fe3a 	bl	8008f38 <tcp_close_shutdown>
}
 80092c4:	bd10      	pop	{r4, pc}
    return ERR_CONN;
 80092c6:	f06f 000a 	mvn.w	r0, #10
 80092ca:	e7fb      	b.n	80092c4 <tcp_shutdown+0x60>
  return ERR_OK;
 80092cc:	2000      	movs	r0, #0
 80092ce:	e7f9      	b.n	80092c4 <tcp_shutdown+0x60>
    switch (pcb->state) {
 80092d0:	f06f 000a 	mvn.w	r0, #10
 80092d4:	e7f6      	b.n	80092c4 <tcp_shutdown+0x60>
 80092d6:	bf00      	nop
 80092d8:	0802cff0 	.word	0x0802cff0
 80092dc:	0802d424 	.word	0x0802d424
 80092e0:	0802bc48 	.word	0x0802bc48

080092e4 <tcp_slowtmr>:
{
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	b085      	sub	sp, #20
  ++tcp_ticks;
 80092ea:	4ab8      	ldr	r2, [pc, #736]	; (80095cc <tcp_slowtmr+0x2e8>)
 80092ec:	6813      	ldr	r3, [r2, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80092f2:	4ab7      	ldr	r2, [pc, #732]	; (80095d0 <tcp_slowtmr+0x2ec>)
 80092f4:	7813      	ldrb	r3, [r2, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80092fa:	f8df a300 	ldr.w	sl, [pc, #768]	; 80095fc <tcp_slowtmr+0x318>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80092fe:	f8df b300 	ldr.w	fp, [pc, #768]	; 8009600 <tcp_slowtmr+0x31c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009302:	4eb4      	ldr	r6, [pc, #720]	; (80095d4 <tcp_slowtmr+0x2f0>)
  pcb = tcp_active_pcbs;
 8009304:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8009308:	2c00      	cmp	r4, #0
 800930a:	f000 81f6 	beq.w	80096fa <tcp_slowtmr+0x416>
  prev = NULL;
 800930e:	2500      	movs	r5, #0
 8009310:	e1a0      	b.n	8009654 <tcp_slowtmr+0x370>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009312:	4633      	mov	r3, r6
 8009314:	f240 42be 	movw	r2, #1214	; 0x4be
 8009318:	49af      	ldr	r1, [pc, #700]	; (80095d8 <tcp_slowtmr+0x2f4>)
 800931a:	48b0      	ldr	r0, [pc, #704]	; (80095dc <tcp_slowtmr+0x2f8>)
 800931c:	f021 fcd6 	bl	802accc <iprintf>
 8009320:	e19c      	b.n	800965c <tcp_slowtmr+0x378>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009322:	4633      	mov	r3, r6
 8009324:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009328:	49ad      	ldr	r1, [pc, #692]	; (80095e0 <tcp_slowtmr+0x2fc>)
 800932a:	48ac      	ldr	r0, [pc, #688]	; (80095dc <tcp_slowtmr+0x2f8>)
 800932c:	f021 fcce 	bl	802accc <iprintf>
 8009330:	e198      	b.n	8009664 <tcp_slowtmr+0x380>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009332:	4633      	mov	r3, r6
 8009334:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009338:	49aa      	ldr	r1, [pc, #680]	; (80095e4 <tcp_slowtmr+0x300>)
 800933a:	48a8      	ldr	r0, [pc, #672]	; (80095dc <tcp_slowtmr+0x2f8>)
 800933c:	f021 fcc6 	bl	802accc <iprintf>
 8009340:	e194      	b.n	800966c <tcp_slowtmr+0x388>
      continue;
 8009342:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009344:	68e4      	ldr	r4, [r4, #12]
      continue;
 8009346:	e183      	b.n	8009650 <tcp_slowtmr+0x36c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009348:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800934c:	2b05      	cmp	r3, #5
 800934e:	f240 819d 	bls.w	800968c <tcp_slowtmr+0x3a8>
    pcb_reset = 0;
 8009352:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8009356:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8009358:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800935a:	b15b      	cbz	r3, 8009374 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800935c:	4b9b      	ldr	r3, [pc, #620]	; (80095cc <tcp_slowtmr+0x2e8>)
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	6a23      	ldr	r3, [r4, #32]
 8009362:	1ad2      	subs	r2, r2, r3
 8009364:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009368:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800936c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009370:	f080 80f8 	bcs.w	8009564 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8009374:	7d23      	ldrb	r3, [r4, #20]
 8009376:	2b03      	cmp	r3, #3
 8009378:	f000 80f8 	beq.w	800956c <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 800937c:	2b09      	cmp	r3, #9
 800937e:	f040 80fc 	bne.w	800957a <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009382:	4b92      	ldr	r3, [pc, #584]	; (80095cc <tcp_slowtmr+0x2e8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6a22      	ldr	r2, [r4, #32]
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	2bf0      	cmp	r3, #240	; 0xf0
 800938c:	f240 80f5 	bls.w	800957a <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 8009390:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8009394:	4620      	mov	r0, r4
 8009396:	f7ff fb7f 	bl	8008a98 <tcp_pcb_purge>
      if (prev != NULL) {
 800939a:	2d00      	cmp	r5, #0
 800939c:	f000 8132 	beq.w	8009604 <tcp_slowtmr+0x320>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80093a0:	f8da 3000 	ldr.w	r3, [sl]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	f000 8108 	beq.w	80095ba <tcp_slowtmr+0x2d6>
        prev->next = pcb->next;
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 80093ae:	f1b8 0f00 	cmp.w	r8, #0
 80093b2:	f040 8136 	bne.w	8009622 <tcp_slowtmr+0x33e>
      err_arg = pcb->callback_arg;
 80093b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 80093ba:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 80093be:	4620      	mov	r0, r4
 80093c0:	f7ff f940 	bl	8008644 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80093c4:	4b88      	ldr	r3, [pc, #544]	; (80095e8 <tcp_slowtmr+0x304>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80093ca:	2f00      	cmp	r7, #0
 80093cc:	f000 813c 	beq.w	8009648 <tcp_slowtmr+0x364>
 80093d0:	f06f 010c 	mvn.w	r1, #12
 80093d4:	4648      	mov	r0, r9
 80093d6:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80093d8:	4b83      	ldr	r3, [pc, #524]	; (80095e8 <tcp_slowtmr+0x304>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d191      	bne.n	8009304 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80093e0:	4644      	mov	r4, r8
 80093e2:	e135      	b.n	8009650 <tcp_slowtmr+0x36c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80093e4:	4633      	mov	r3, r6
 80093e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80093ea:	4980      	ldr	r1, [pc, #512]	; (80095ec <tcp_slowtmr+0x308>)
 80093ec:	487b      	ldr	r0, [pc, #492]	; (80095dc <tcp_slowtmr+0x2f8>)
 80093ee:	f021 fc6d 	bl	802accc <iprintf>
 80093f2:	e15d      	b.n	80096b0 <tcp_slowtmr+0x3cc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80093f4:	4620      	mov	r0, r4
 80093f6:	f002 fb0b 	bl	800ba10 <tcp_split_unsent_seg>
 80093fa:	b158      	cbz	r0, 8009414 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009402:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8009406:	2b06      	cmp	r3, #6
 8009408:	d876      	bhi.n	80094f8 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 800940a:	3301      	adds	r3, #1
 800940c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8009410:	2700      	movs	r7, #0
 8009412:	e050      	b.n	80094b6 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8009414:	4620      	mov	r0, r4
 8009416:	f002 fe05 	bl	800c024 <tcp_output>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1ee      	bne.n	80093fc <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800941e:	2700      	movs	r7, #0
 8009420:	e049      	b.n	80094b6 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009422:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009424:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009428:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800942a:	bf9c      	itt	ls
 800942c:	3301      	addls	r3, #1
 800942e:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009430:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009434:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009438:	429a      	cmp	r2, r3
 800943a:	db3c      	blt.n	80094b6 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800943c:	4620      	mov	r0, r4
 800943e:	f002 fc9d 	bl	800bd7c <tcp_rexmit_rto_prepare>
 8009442:	b118      	cbz	r0, 800944c <tcp_slowtmr+0x168>
 8009444:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009446:	bbb3      	cbnz	r3, 80094b6 <tcp_slowtmr+0x1d2>
 8009448:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800944a:	b3a3      	cbz	r3, 80094b6 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 800944c:	7d23      	ldrb	r3, [r4, #20]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d014      	beq.n	800947c <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009452:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009456:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800945a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800945e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009462:	2a0c      	cmp	r2, #12
 8009464:	bf28      	it	cs
 8009466:	220c      	movcs	r2, #12
 8009468:	4961      	ldr	r1, [pc, #388]	; (80095f0 <tcp_slowtmr+0x30c>)
 800946a:	5c8a      	ldrb	r2, [r1, r2]
 800946c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800946e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009472:	4293      	cmp	r3, r2
 8009474:	bfa8      	it	ge
 8009476:	4613      	movge	r3, r2
 8009478:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009480:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009484:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009488:	429a      	cmp	r2, r3
 800948a:	bf28      	it	cs
 800948c:	461a      	movcs	r2, r3
 800948e:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009490:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009492:	0043      	lsls	r3, r0, #1
 8009494:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009496:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800949a:	bf98      	it	ls
 800949c:	460b      	movls	r3, r1
 800949e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 80094a2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 80094a6:	2300      	movs	r3, #0
 80094a8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80094ac:	4620      	mov	r0, r4
 80094ae:	f002 ff85 	bl	800c3bc <tcp_rexmit_rto_commit>
 80094b2:	e000      	b.n	80094b6 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 80094b4:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 80094b6:	7d23      	ldrb	r3, [r4, #20]
 80094b8:	2b06      	cmp	r3, #6
 80094ba:	d01f      	beq.n	80094fc <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80094bc:	f894 8009 	ldrb.w	r8, [r4, #9]
 80094c0:	f018 0808 	ands.w	r8, r8, #8
 80094c4:	f43f af48 	beq.w	8009358 <tcp_slowtmr+0x74>
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d12a      	bne.n	8009522 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094cc:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <tcp_slowtmr+0x2e8>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	6a23      	ldr	r3, [r4, #32]
 80094d2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80094d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80094d8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80094dc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80094e0:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094e4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80094e8:	d920      	bls.n	800952c <tcp_slowtmr+0x248>
        ++pcb_remove;
 80094ea:	3701      	adds	r7, #1
 80094ec:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 80094ee:	f04f 0801 	mov.w	r8, #1
 80094f2:	e731      	b.n	8009358 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 80094f4:	2701      	movs	r7, #1
 80094f6:	e7de      	b.n	80094b6 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 80094f8:	2700      	movs	r7, #0
 80094fa:	e7dc      	b.n	80094b6 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 80094fc:	8b63      	ldrh	r3, [r4, #26]
 80094fe:	f013 0f10 	tst.w	r3, #16
 8009502:	d007      	beq.n	8009514 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009504:	4b31      	ldr	r3, [pc, #196]	; (80095cc <tcp_slowtmr+0x2e8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6a22      	ldr	r2, [r4, #32]
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	2b28      	cmp	r3, #40	; 0x28
 800950e:	d901      	bls.n	8009514 <tcp_slowtmr+0x230>
          ++pcb_remove;
 8009510:	3701      	adds	r7, #1
 8009512:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8009514:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 8135 	beq.w	8009786 <tcp_slowtmr+0x4a2>
    pcb_reset = 0;
 800951c:	f04f 0800 	mov.w	r8, #0
 8009520:	e71c      	b.n	800935c <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 8009522:	2b07      	cmp	r3, #7
 8009524:	d0d2      	beq.n	80094cc <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8009526:	f04f 0800 	mov.w	r8, #0
 800952a:	e715      	b.n	8009358 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800952c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009530:	4830      	ldr	r0, [pc, #192]	; (80095f4 <tcp_slowtmr+0x310>)
 8009532:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009536:	fbab 1303 	umull	r1, r3, fp, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800953a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800953e:	d802      	bhi.n	8009546 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 8009540:	f04f 0800 	mov.w	r8, #0
 8009544:	e708      	b.n	8009358 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8009546:	4620      	mov	r0, r4
 8009548:	f002 ff6e 	bl	800c428 <tcp_keepalive>
        if (err == ERR_OK) {
 800954c:	b938      	cbnz	r0, 800955e <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 800954e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009552:	3301      	adds	r3, #1
 8009554:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8009558:	f04f 0800 	mov.w	r8, #0
 800955c:	e6fc      	b.n	8009358 <tcp_slowtmr+0x74>
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	e6f9      	b.n	8009358 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff fa8d 	bl	8008a84 <tcp_free_ooseq>
 800956a:	e703      	b.n	8009374 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800956c:	4b17      	ldr	r3, [pc, #92]	; (80095cc <tcp_slowtmr+0x2e8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6a22      	ldr	r2, [r4, #32]
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	2b28      	cmp	r3, #40	; 0x28
 8009576:	f63f af0b 	bhi.w	8009390 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 800957a:	2f00      	cmp	r7, #0
 800957c:	f47f af08 	bne.w	8009390 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 8009580:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8009582:	7f23      	ldrb	r3, [r4, #28]
 8009584:	3301      	adds	r3, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800958a:	7f62      	ldrb	r2, [r4, #29]
 800958c:	429a      	cmp	r2, r3
 800958e:	d85d      	bhi.n	800964c <tcp_slowtmr+0x368>
        prev->polltmr = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009594:	4a14      	ldr	r2, [pc, #80]	; (80095e8 <tcp_slowtmr+0x304>)
 8009596:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009598:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800959c:	2b00      	cmp	r3, #0
 800959e:	d04d      	beq.n	800963c <tcp_slowtmr+0x358>
 80095a0:	4621      	mov	r1, r4
 80095a2:	6920      	ldr	r0, [r4, #16]
 80095a4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80095a6:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <tcp_slowtmr+0x304>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f47f aeaa 	bne.w	8009304 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d043      	beq.n	800963c <tcp_slowtmr+0x358>
 80095b4:	4625      	mov	r5, r4
      pcb = pcb->next;
 80095b6:	463c      	mov	r4, r7
 80095b8:	e04a      	b.n	8009650 <tcp_slowtmr+0x36c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80095ba:	4633      	mov	r3, r6
 80095bc:	f240 526d 	movw	r2, #1389	; 0x56d
 80095c0:	490d      	ldr	r1, [pc, #52]	; (80095f8 <tcp_slowtmr+0x314>)
 80095c2:	4806      	ldr	r0, [pc, #24]	; (80095dc <tcp_slowtmr+0x2f8>)
 80095c4:	f021 fb82 	bl	802accc <iprintf>
 80095c8:	e6ef      	b.n	80093aa <tcp_slowtmr+0xc6>
 80095ca:	bf00      	nop
 80095cc:	20014638 	.word	0x20014638
 80095d0:	20010746 	.word	0x20010746
 80095d4:	0802cff0 	.word	0x0802cff0
 80095d8:	0802d440 	.word	0x0802d440
 80095dc:	0802bc48 	.word	0x0802bc48
 80095e0:	0802d46c 	.word	0x0802d46c
 80095e4:	0802d498 	.word	0x0802d498
 80095e8:	20014630 	.word	0x20014630
 80095ec:	0802d4fc 	.word	0x0802d4fc
 80095f0:	0802d60c 	.word	0x0802d60c
 80095f4:	000124f8 	.word	0x000124f8
 80095f8:	0802d534 	.word	0x0802d534
 80095fc:	20014634 	.word	0x20014634
 8009600:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009604:	f8da 3000 	ldr.w	r3, [sl]
 8009608:	42a3      	cmp	r3, r4
 800960a:	d006      	beq.n	800961a <tcp_slowtmr+0x336>
 800960c:	4633      	mov	r3, r6
 800960e:	f240 5271 	movw	r2, #1393	; 0x571
 8009612:	4960      	ldr	r1, [pc, #384]	; (8009794 <tcp_slowtmr+0x4b0>)
 8009614:	4860      	ldr	r0, [pc, #384]	; (8009798 <tcp_slowtmr+0x4b4>)
 8009616:	f021 fb59 	bl	802accc <iprintf>
        tcp_active_pcbs = pcb->next;
 800961a:	68e3      	ldr	r3, [r4, #12]
 800961c:	f8ca 3000 	str.w	r3, [sl]
 8009620:	e6c5      	b.n	80093ae <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009622:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009624:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009626:	8b23      	ldrh	r3, [r4, #24]
 8009628:	9302      	str	r3, [sp, #8]
 800962a:	8ae3      	ldrh	r3, [r4, #22]
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	1d23      	adds	r3, r4, #4
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	4623      	mov	r3, r4
 8009634:	4620      	mov	r0, r4
 8009636:	f002 fc73 	bl	800bf20 <tcp_rst>
 800963a:	e6bc      	b.n	80093b6 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 800963c:	4620      	mov	r0, r4
 800963e:	f002 fcf1 	bl	800c024 <tcp_output>
 8009642:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009644:	463c      	mov	r4, r7
 8009646:	e003      	b.n	8009650 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 8009648:	4644      	mov	r4, r8
 800964a:	e001      	b.n	8009650 <tcp_slowtmr+0x36c>
 800964c:	4625      	mov	r5, r4
      pcb = pcb->next;
 800964e:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009650:	2c00      	cmp	r4, #0
 8009652:	d052      	beq.n	80096fa <tcp_slowtmr+0x416>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009654:	7d23      	ldrb	r3, [r4, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f43f ae5b 	beq.w	8009312 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800965c:	7d23      	ldrb	r3, [r4, #20]
 800965e:	2b01      	cmp	r3, #1
 8009660:	f43f ae5f 	beq.w	8009322 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009664:	7d23      	ldrb	r3, [r4, #20]
 8009666:	2b0a      	cmp	r3, #10
 8009668:	f43f ae63 	beq.w	8009332 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 800966c:	4b4b      	ldr	r3, [pc, #300]	; (800979c <tcp_slowtmr+0x4b8>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	7fa2      	ldrb	r2, [r4, #30]
 8009672:	429a      	cmp	r2, r3
 8009674:	f43f ae65 	beq.w	8009342 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8009678:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800967a:	7d23      	ldrb	r3, [r4, #20]
 800967c:	2b02      	cmp	r3, #2
 800967e:	f43f ae63 	beq.w	8009348 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009682:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009686:	2b0b      	cmp	r3, #11
 8009688:	f63f af14 	bhi.w	80094b4 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 800968c:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 8009690:	2f00      	cmp	r7, #0
 8009692:	f43f aec6 	beq.w	8009422 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009696:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009698:	b133      	cbz	r3, 80096a8 <tcp_slowtmr+0x3c4>
 800969a:	4633      	mov	r3, r6
 800969c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80096a0:	493f      	ldr	r1, [pc, #252]	; (80097a0 <tcp_slowtmr+0x4bc>)
 80096a2:	483d      	ldr	r0, [pc, #244]	; (8009798 <tcp_slowtmr+0x4b4>)
 80096a4:	f021 fb12 	bl	802accc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80096a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f43f ae9a 	beq.w	80093e4 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80096b0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80096b4:	2b0b      	cmp	r3, #11
 80096b6:	f63f af1d 	bhi.w	80094f4 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80096ba:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 80096be:	4b39      	ldr	r3, [pc, #228]	; (80097a4 <tcp_slowtmr+0x4c0>)
 80096c0:	4413      	add	r3, r2
 80096c2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80096c6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d208      	bcs.n	80096e0 <tcp_slowtmr+0x3fc>
            pcb->persist_cnt++;
 80096ce:	3301      	adds	r3, #1
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80096d6:	4293      	cmp	r3, r2
    pcb_remove = 0;
 80096d8:	bf38      	it	cc
 80096da:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 80096dc:	f4ff aeeb 	bcc.w	80094b6 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 80096e0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80096e4:	2900      	cmp	r1, #0
 80096e6:	f47f ae85 	bne.w	80093f4 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80096ea:	4620      	mov	r0, r4
 80096ec:	f002 feca 	bl	800c484 <tcp_zero_window_probe>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	f43f ae83 	beq.w	80093fc <tcp_slowtmr+0x118>
    pcb_remove = 0;
 80096f6:	2700      	movs	r7, #0
 80096f8:	e6dd      	b.n	80094b6 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 80096fa:	4b2b      	ldr	r3, [pc, #172]	; (80097a8 <tcp_slowtmr+0x4c4>)
 80096fc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80096fe:	2c00      	cmp	r4, #0
 8009700:	d044      	beq.n	800978c <tcp_slowtmr+0x4a8>
  prev = NULL;
 8009702:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009704:	4f29      	ldr	r7, [pc, #164]	; (80097ac <tcp_slowtmr+0x4c8>)
 8009706:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80097bc <tcp_slowtmr+0x4d8>
 800970a:	4e23      	ldr	r6, [pc, #140]	; (8009798 <tcp_slowtmr+0x4b4>)
 800970c:	e00f      	b.n	800972e <tcp_slowtmr+0x44a>
 800970e:	463b      	mov	r3, r7
 8009710:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009714:	4641      	mov	r1, r8
 8009716:	4630      	mov	r0, r6
 8009718:	f021 fad8 	bl	802accc <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800971c:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <tcp_slowtmr+0x4cc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a22      	ldr	r2, [r4, #32]
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	2bf0      	cmp	r3, #240	; 0xf0
 8009726:	d806      	bhi.n	8009736 <tcp_slowtmr+0x452>
      pcb = pcb->next;
 8009728:	4625      	mov	r5, r4
 800972a:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800972c:	b374      	cbz	r4, 800978c <tcp_slowtmr+0x4a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800972e:	7d23      	ldrb	r3, [r4, #20]
 8009730:	2b0a      	cmp	r3, #10
 8009732:	d0f3      	beq.n	800971c <tcp_slowtmr+0x438>
 8009734:	e7eb      	b.n	800970e <tcp_slowtmr+0x42a>
      tcp_pcb_purge(pcb);
 8009736:	4620      	mov	r0, r4
 8009738:	f7ff f9ae 	bl	8008a98 <tcp_pcb_purge>
      if (prev != NULL) {
 800973c:	b1a5      	cbz	r5, 8009768 <tcp_slowtmr+0x484>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800973e:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <tcp_slowtmr+0x4c4>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	42a3      	cmp	r3, r4
 8009744:	d008      	beq.n	8009758 <tcp_slowtmr+0x474>
        prev->next = pcb->next;
 8009746:	68e3      	ldr	r3, [r4, #12]
 8009748:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 800974a:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 800974e:	4620      	mov	r0, r4
 8009750:	f7fe ff78 	bl	8008644 <tcp_free>
      pcb = pcb->next;
 8009754:	464c      	mov	r4, r9
 8009756:	e7e9      	b.n	800972c <tcp_slowtmr+0x448>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009758:	463b      	mov	r3, r7
 800975a:	f240 52af 	movw	r2, #1455	; 0x5af
 800975e:	4915      	ldr	r1, [pc, #84]	; (80097b4 <tcp_slowtmr+0x4d0>)
 8009760:	4630      	mov	r0, r6
 8009762:	f021 fab3 	bl	802accc <iprintf>
 8009766:	e7ee      	b.n	8009746 <tcp_slowtmr+0x462>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <tcp_slowtmr+0x4c4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	42a3      	cmp	r3, r4
 800976e:	d006      	beq.n	800977e <tcp_slowtmr+0x49a>
 8009770:	463b      	mov	r3, r7
 8009772:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009776:	4910      	ldr	r1, [pc, #64]	; (80097b8 <tcp_slowtmr+0x4d4>)
 8009778:	4630      	mov	r0, r6
 800977a:	f021 faa7 	bl	802accc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800977e:	68e2      	ldr	r2, [r4, #12]
 8009780:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <tcp_slowtmr+0x4c4>)
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e7e1      	b.n	800974a <tcp_slowtmr+0x466>
    pcb_reset = 0;
 8009786:	f04f 0800 	mov.w	r8, #0
 800978a:	e6f6      	b.n	800957a <tcp_slowtmr+0x296>
}
 800978c:	b005      	add	sp, #20
 800978e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009792:	bf00      	nop
 8009794:	0802d560 	.word	0x0802d560
 8009798:	0802bc48 	.word	0x0802bc48
 800979c:	20010746 	.word	0x20010746
 80097a0:	0802d4c8 	.word	0x0802d4c8
 80097a4:	0802d62c 	.word	0x0802d62c
 80097a8:	20014644 	.word	0x20014644
 80097ac:	0802cff0 	.word	0x0802cff0
 80097b0:	20014638 	.word	0x20014638
 80097b4:	0802d5bc 	.word	0x0802d5bc
 80097b8:	0802d5e4 	.word	0x0802d5e4
 80097bc:	0802d58c 	.word	0x0802d58c

080097c0 <tcp_tmr>:
{
 80097c0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80097c2:	f7ff fd07 	bl	80091d4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80097c6:	4a06      	ldr	r2, [pc, #24]	; (80097e0 <tcp_tmr+0x20>)
 80097c8:	7813      	ldrb	r3, [r2, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	7013      	strb	r3, [r2, #0]
 80097d0:	f013 0f01 	tst.w	r3, #1
 80097d4:	d100      	bne.n	80097d8 <tcp_tmr+0x18>
}
 80097d6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80097d8:	f7ff fd84 	bl	80092e4 <tcp_slowtmr>
}
 80097dc:	e7fb      	b.n	80097d6 <tcp_tmr+0x16>
 80097de:	bf00      	nop
 80097e0:	20010745 	.word	0x20010745

080097e4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80097e4:	4a09      	ldr	r2, [pc, #36]	; (800980c <tcp_get_next_optbyte+0x28>)
 80097e6:	8813      	ldrh	r3, [r2, #0]
 80097e8:	1c59      	adds	r1, r3, #1
 80097ea:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80097ec:	4a08      	ldr	r2, [pc, #32]	; (8009810 <tcp_get_next_optbyte+0x2c>)
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	b11a      	cbz	r2, 80097fa <tcp_get_next_optbyte+0x16>
 80097f2:	4908      	ldr	r1, [pc, #32]	; (8009814 <tcp_get_next_optbyte+0x30>)
 80097f4:	8809      	ldrh	r1, [r1, #0]
 80097f6:	428b      	cmp	r3, r1
 80097f8:	d204      	bcs.n	8009804 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80097fa:	4a07      	ldr	r2, [pc, #28]	; (8009818 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 80097fc:	6812      	ldr	r2, [r2, #0]
 80097fe:	4413      	add	r3, r2
 8009800:	7d18      	ldrb	r0, [r3, #20]
 8009802:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009804:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8009806:	b2db      	uxtb	r3, r3
 8009808:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 800980a:	4770      	bx	lr
 800980c:	20010770 	.word	0x20010770
 8009810:	2001077c 	.word	0x2001077c
 8009814:	20010778 	.word	0x20010778
 8009818:	20010774 	.word	0x20010774

0800981c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800981e:	4607      	mov	r7, r0
 8009820:	b1d0      	cbz	r0, 8009858 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009822:	4b1e      	ldr	r3, [pc, #120]	; (800989c <tcp_parseopt+0x80>)
 8009824:	881d      	ldrh	r5, [r3, #0]
 8009826:	2d00      	cmp	r5, #0
 8009828:	d037      	beq.n	800989a <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800982a:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <tcp_parseopt+0x84>)
 800982c:	2200      	movs	r2, #0
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	461e      	mov	r6, r3
 8009832:	8833      	ldrh	r3, [r6, #0]
 8009834:	42ab      	cmp	r3, r5
 8009836:	d230      	bcs.n	800989a <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8009838:	f7ff ffd4 	bl	80097e4 <tcp_get_next_optbyte>
      switch (opt) {
 800983c:	2801      	cmp	r0, #1
 800983e:	d0f8      	beq.n	8009832 <tcp_parseopt+0x16>
 8009840:	2802      	cmp	r0, #2
 8009842:	d011      	beq.n	8009868 <tcp_parseopt+0x4c>
 8009844:	b348      	cbz	r0, 800989a <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009846:	f7ff ffcd 	bl	80097e4 <tcp_get_next_optbyte>
          if (data < 2) {
 800984a:	2801      	cmp	r0, #1
 800984c:	d925      	bls.n	800989a <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800984e:	8833      	ldrh	r3, [r6, #0]
 8009850:	3b02      	subs	r3, #2
 8009852:	4418      	add	r0, r3
 8009854:	8030      	strh	r0, [r6, #0]
 8009856:	e7ec      	b.n	8009832 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009858:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <tcp_parseopt+0x88>)
 800985a:	f240 727d 	movw	r2, #1917	; 0x77d
 800985e:	4912      	ldr	r1, [pc, #72]	; (80098a8 <tcp_parseopt+0x8c>)
 8009860:	4812      	ldr	r0, [pc, #72]	; (80098ac <tcp_parseopt+0x90>)
 8009862:	f021 fa33 	bl	802accc <iprintf>
 8009866:	e7dc      	b.n	8009822 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009868:	f7ff ffbc 	bl	80097e4 <tcp_get_next_optbyte>
 800986c:	2804      	cmp	r0, #4
 800986e:	d114      	bne.n	800989a <tcp_parseopt+0x7e>
 8009870:	8833      	ldrh	r3, [r6, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	42ab      	cmp	r3, r5
 8009876:	da10      	bge.n	800989a <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009878:	f7ff ffb4 	bl	80097e4 <tcp_get_next_optbyte>
 800987c:	0204      	lsls	r4, r0, #8
 800987e:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8009880:	f7ff ffb0 	bl	80097e4 <tcp_get_next_optbyte>
 8009884:	4320      	orrs	r0, r4
 8009886:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009888:	1e43      	subs	r3, r0, #1
 800988a:	b29b      	uxth	r3, r3
 800988c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009890:	bf28      	it	cs
 8009892:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8009896:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8009898:	e7cb      	b.n	8009832 <tcp_parseopt+0x16>
      }
    }
  }
}
 800989a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989c:	20010780 	.word	0x20010780
 80098a0:	20010770 	.word	0x20010770
 80098a4:	0802d634 	.word	0x0802d634
 80098a8:	0802d668 	.word	0x0802d668
 80098ac:	0802bc48 	.word	0x0802bc48

080098b0 <tcp_input_delayed_close>:
{
 80098b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80098b2:	4604      	mov	r4, r0
 80098b4:	b130      	cbz	r0, 80098c4 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 80098b6:	4b11      	ldr	r3, [pc, #68]	; (80098fc <tcp_input_delayed_close+0x4c>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f013 0f10 	tst.w	r3, #16
 80098be:	d109      	bne.n	80098d4 <tcp_input_delayed_close+0x24>
  return 0;
 80098c0:	2000      	movs	r0, #0
}
 80098c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80098c4:	4b0e      	ldr	r3, [pc, #56]	; (8009900 <tcp_input_delayed_close+0x50>)
 80098c6:	f240 225a 	movw	r2, #602	; 0x25a
 80098ca:	490e      	ldr	r1, [pc, #56]	; (8009904 <tcp_input_delayed_close+0x54>)
 80098cc:	480e      	ldr	r0, [pc, #56]	; (8009908 <tcp_input_delayed_close+0x58>)
 80098ce:	f021 f9fd 	bl	802accc <iprintf>
 80098d2:	e7f0      	b.n	80098b6 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80098d4:	8b63      	ldrh	r3, [r4, #26]
 80098d6:	f013 0f10 	tst.w	r3, #16
 80098da:	d106      	bne.n	80098ea <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80098dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80098e0:	b11b      	cbz	r3, 80098ea <tcp_input_delayed_close+0x3a>
 80098e2:	f06f 010e 	mvn.w	r1, #14
 80098e6:	6920      	ldr	r0, [r4, #16]
 80098e8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80098ea:	4621      	mov	r1, r4
 80098ec:	4807      	ldr	r0, [pc, #28]	; (800990c <tcp_input_delayed_close+0x5c>)
 80098ee:	f7ff f903 	bl	8008af8 <tcp_pcb_remove>
    tcp_free(pcb);
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7fe fea6 	bl	8008644 <tcp_free>
    return 1;
 80098f8:	2001      	movs	r0, #1
 80098fa:	e7e2      	b.n	80098c2 <tcp_input_delayed_close+0x12>
 80098fc:	20010768 	.word	0x20010768
 8009900:	0802d634 	.word	0x0802d634
 8009904:	0802d684 	.word	0x0802d684
 8009908:	0802bc48 	.word	0x0802bc48
 800990c:	20014634 	.word	0x20014634

08009910 <tcp_free_acked_segments>:
{
 8009910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8009914:	460d      	mov	r5, r1
 8009916:	b139      	cbz	r1, 8009928 <tcp_free_acked_segments+0x18>
 8009918:	4606      	mov	r6, r0
 800991a:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800991c:	4f2c      	ldr	r7, [pc, #176]	; (80099d0 <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800991e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80099d8 <tcp_free_acked_segments+0xc8>
 8009922:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80099e4 <tcp_free_acked_segments+0xd4>
 8009926:	e01b      	b.n	8009960 <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8009928:	468b      	mov	fp, r1
 800992a:	e00a      	b.n	8009942 <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800992c:	4653      	mov	r3, sl
 800992e:	f240 4257 	movw	r2, #1111	; 0x457
 8009932:	4649      	mov	r1, r9
 8009934:	4827      	ldr	r0, [pc, #156]	; (80099d4 <tcp_free_acked_segments+0xc4>)
 8009936:	f021 f9c9 	bl	802accc <iprintf>
 800993a:	e030      	b.n	800999e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800993c:	f1b8 0f00 	cmp.w	r8, #0
 8009940:	d002      	beq.n	8009948 <tcp_free_acked_segments+0x38>
}
 8009942:	4658      	mov	r0, fp
 8009944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009948:	4b23      	ldr	r3, [pc, #140]	; (80099d8 <tcp_free_acked_segments+0xc8>)
 800994a:	f240 4261 	movw	r2, #1121	; 0x461
 800994e:	4923      	ldr	r1, [pc, #140]	; (80099dc <tcp_free_acked_segments+0xcc>)
 8009950:	4820      	ldr	r0, [pc, #128]	; (80099d4 <tcp_free_acked_segments+0xc4>)
 8009952:	f021 f9bb 	bl	802accc <iprintf>
 8009956:	e7f4      	b.n	8009942 <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8009958:	f1bb 0f00 	cmp.w	fp, #0
 800995c:	d0f1      	beq.n	8009942 <tcp_free_acked_segments+0x32>
 800995e:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009960:	68eb      	ldr	r3, [r5, #12]
 8009962:	6858      	ldr	r0, [r3, #4]
 8009964:	f7fc feb1 	bl	80066ca <lwip_htonl>
 8009968:	4604      	mov	r4, r0
 800996a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800996e:	68eb      	ldr	r3, [r5, #12]
 8009970:	8998      	ldrh	r0, [r3, #12]
 8009972:	f7fc fea5 	bl	80066c0 <lwip_htons>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	1ae4      	subs	r4, r4, r3
 800997a:	445c      	add	r4, fp
 800997c:	f010 0003 	ands.w	r0, r0, #3
 8009980:	bf18      	it	ne
 8009982:	2001      	movne	r0, #1
 8009984:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8009986:	2c00      	cmp	r4, #0
 8009988:	dc1f      	bgt.n	80099ca <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 800998a:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 800998e:	6868      	ldr	r0, [r5, #4]
 8009990:	f7fe fb8a 	bl	80080a8 <pbuf_clen>
 8009994:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009996:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800999a:	4283      	cmp	r3, r0
 800999c:	d3c6      	bcc.n	800992c <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800999e:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 80099a2:	1b04      	subs	r4, r0, r4
 80099a4:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80099a8:	4a0d      	ldr	r2, [pc, #52]	; (80099e0 <tcp_free_acked_segments+0xd0>)
 80099aa:	892b      	ldrh	r3, [r5, #8]
 80099ac:	8811      	ldrh	r1, [r2, #0]
 80099ae:	440b      	add	r3, r1
 80099b0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7fe fed2 	bl	800875c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80099b8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0cb      	beq.n	8009958 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80099c0:	f1bb 0f00 	cmp.w	fp, #0
 80099c4:	d0ba      	beq.n	800993c <tcp_free_acked_segments+0x2c>
 80099c6:	465d      	mov	r5, fp
 80099c8:	e7ca      	b.n	8009960 <tcp_free_acked_segments+0x50>
 80099ca:	46ab      	mov	fp, r5
  return seg_list;
 80099cc:	e7b9      	b.n	8009942 <tcp_free_acked_segments+0x32>
 80099ce:	bf00      	nop
 80099d0:	20010748 	.word	0x20010748
 80099d4:	0802bc48 	.word	0x0802bc48
 80099d8:	0802d634 	.word	0x0802d634
 80099dc:	0802d6d4 	.word	0x0802d6d4
 80099e0:	20010760 	.word	0x20010760
 80099e4:	0802d6ac 	.word	0x0802d6ac

080099e8 <tcp_oos_insert_segment>:
{
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80099ee:	4605      	mov	r5, r0
 80099f0:	b160      	cbz	r0, 8009a0c <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099f2:	68eb      	ldr	r3, [r5, #12]
 80099f4:	8998      	ldrh	r0, [r3, #12]
 80099f6:	f7fc fe63 	bl	80066c0 <lwip_htons>
 80099fa:	f010 0f01 	tst.w	r0, #1
 80099fe:	d10d      	bne.n	8009a1c <tcp_oos_insert_segment+0x34>
    while (next &&
 8009a00:	2c00      	cmp	r4, #0
 8009a02:	d035      	beq.n	8009a70 <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009a04:	4e20      	ldr	r6, [pc, #128]	; (8009a88 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009a06:	f04f 0901 	mov.w	r9, #1
 8009a0a:	e01f      	b.n	8009a4c <tcp_oos_insert_segment+0x64>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009a0c:	4b1f      	ldr	r3, [pc, #124]	; (8009a8c <tcp_oos_insert_segment+0xa4>)
 8009a0e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009a12:	491f      	ldr	r1, [pc, #124]	; (8009a90 <tcp_oos_insert_segment+0xa8>)
 8009a14:	481f      	ldr	r0, [pc, #124]	; (8009a94 <tcp_oos_insert_segment+0xac>)
 8009a16:	f021 f959 	bl	802accc <iprintf>
 8009a1a:	e7ea      	b.n	80099f2 <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7fe feaa 	bl	8008776 <tcp_segs_free>
    next = NULL;
 8009a22:	2400      	movs	r4, #0
  cseg->next = next;
 8009a24:	602c      	str	r4, [r5, #0]
}
 8009a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009a2a:	68eb      	ldr	r3, [r5, #12]
 8009a2c:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009a30:	4648      	mov	r0, r9
 8009a32:	f7fc fe45 	bl	80066c0 <lwip_htons>
 8009a36:	68eb      	ldr	r3, [r5, #12]
 8009a38:	ea48 0800 	orr.w	r8, r8, r0
 8009a3c:	f8a3 800c 	strh.w	r8, [r3, #12]
      next = next->next;
 8009a40:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7fe fe8a 	bl	800875c <tcp_seg_free>
    while (next &&
 8009a48:	b197      	cbz	r7, 8009a70 <tcp_oos_insert_segment+0x88>
      next = next->next;
 8009a4a:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009a4c:	f8d6 c000 	ldr.w	ip, [r6]
 8009a50:	68e1      	ldr	r1, [r4, #12]
 8009a52:	6848      	ldr	r0, [r1, #4]
 8009a54:	892b      	ldrh	r3, [r5, #8]
 8009a56:	4463      	add	r3, ip
 8009a58:	1a1b      	subs	r3, r3, r0
 8009a5a:	8922      	ldrh	r2, [r4, #8]
 8009a5c:	1a9a      	subs	r2, r3, r2
    while (next &&
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	db08      	blt.n	8009a74 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a62:	8988      	ldrh	r0, [r1, #12]
 8009a64:	f7fc fe2c 	bl	80066c0 <lwip_htons>
 8009a68:	f010 0f01 	tst.w	r0, #1
 8009a6c:	d0e8      	beq.n	8009a40 <tcp_oos_insert_segment+0x58>
 8009a6e:	e7dc      	b.n	8009a2a <tcp_oos_insert_segment+0x42>
    next = NULL;
 8009a70:	2400      	movs	r4, #0
 8009a72:	e7d7      	b.n	8009a24 <tcp_oos_insert_segment+0x3c>
    if (next &&
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	ddd5      	ble.n	8009a24 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a78:	eba0 010c 	sub.w	r1, r0, ip
 8009a7c:	b289      	uxth	r1, r1
 8009a7e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009a80:	6868      	ldr	r0, [r5, #4]
 8009a82:	f7fe fa93 	bl	8007fac <pbuf_realloc>
 8009a86:	e7cd      	b.n	8009a24 <tcp_oos_insert_segment+0x3c>
 8009a88:	2001076c 	.word	0x2001076c
 8009a8c:	0802d634 	.word	0x0802d634
 8009a90:	0802d6f4 	.word	0x0802d6f4
 8009a94:	0802bc48 	.word	0x0802bc48

08009a98 <tcp_receive>:
{
 8009a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d066      	beq.n	8009b70 <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009aa2:	7d23      	ldrb	r3, [r4, #20]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d96b      	bls.n	8009b80 <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 8009aa8:	4bab      	ldr	r3, [pc, #684]	; (8009d58 <tcp_receive+0x2c0>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f013 0f10 	tst.w	r3, #16
 8009ab0:	d03a      	beq.n	8009b28 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009ab2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8009ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009ab8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009aba:	4ba8      	ldr	r3, [pc, #672]	; (8009d5c <tcp_receive+0x2c4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	1ad1      	subs	r1, r2, r3
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	db0a      	blt.n	8009ada <tcp_receive+0x42>
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d063      	beq.n	8009b90 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ac8:	4aa5      	ldr	r2, [pc, #660]	; (8009d60 <tcp_receive+0x2c8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aca:	6812      	ldr	r2, [r2, #0]
 8009acc:	4290      	cmp	r0, r2
 8009ace:	d114      	bne.n	8009afa <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ad0:	4aa4      	ldr	r2, [pc, #656]	; (8009d64 <tcp_receive+0x2cc>)
 8009ad2:	6812      	ldr	r2, [r2, #0]
 8009ad4:	89d2      	ldrh	r2, [r2, #14]
 8009ad6:	42aa      	cmp	r2, r5
 8009ad8:	d90f      	bls.n	8009afa <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009ada:	4aa2      	ldr	r2, [pc, #648]	; (8009d64 <tcp_receive+0x2cc>)
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	89d2      	ldrh	r2, [r2, #14]
 8009ae0:	b291      	uxth	r1, r2
 8009ae2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009ae6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8009aea:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009aec:	bf38      	it	cc
 8009aee:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 8009af2:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009af4:	4b9a      	ldr	r3, [pc, #616]	; (8009d60 <tcp_receive+0x2c8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009afa:	4b99      	ldr	r3, [pc, #612]	; (8009d60 <tcp_receive+0x2c8>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b00:	1a5a      	subs	r2, r3, r1
 8009b02:	2a00      	cmp	r2, #0
 8009b04:	dd4a      	ble.n	8009b9c <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009b06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009b08:	1a9a      	subs	r2, r3, r2
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	f340 808a 	ble.w	8009c24 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 8009b10:	4620      	mov	r0, r4
 8009b12:	f002 fa4d 	bl	800bfb0 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b18:	b133      	cbz	r3, 8009b28 <tcp_receive+0x90>
 8009b1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009b1c:	4990      	ldr	r1, [pc, #576]	; (8009d60 <tcp_receive+0x2c8>)
 8009b1e:	6809      	ldr	r1, [r1, #0]
 8009b20:	1a52      	subs	r2, r2, r1
 8009b22:	2a00      	cmp	r2, #0
 8009b24:	f2c0 8130 	blt.w	8009d88 <tcp_receive+0x2f0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009b28:	4b8f      	ldr	r3, [pc, #572]	; (8009d68 <tcp_receive+0x2d0>)
 8009b2a:	881a      	ldrh	r2, [r3, #0]
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d058      	beq.n	8009be2 <tcp_receive+0x14a>
 8009b30:	7d23      	ldrb	r3, [r4, #20]
 8009b32:	2b06      	cmp	r3, #6
 8009b34:	d855      	bhi.n	8009be2 <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009b36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b38:	4b88      	ldr	r3, [pc, #544]	; (8009d5c <tcp_receive+0x2c4>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	1ace      	subs	r6, r1, r3
 8009b3e:	2e01      	cmp	r6, #1
 8009b40:	d406      	bmi.n	8009b50 <tcp_receive+0xb8>
 8009b42:	f1c3 0001 	rsb	r0, r3, #1
 8009b46:	1a82      	subs	r2, r0, r2
 8009b48:	440a      	add	r2, r1
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	f340 813e 	ble.w	8009dcc <tcp_receive+0x334>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009b50:	1a5a      	subs	r2, r3, r1
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	f2c0 8184 	blt.w	8009e60 <tcp_receive+0x3c8>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009b5a:	f1c2 0201 	rsb	r2, r2, #1
 8009b5e:	441a      	add	r2, r3
 8009b60:	1a52      	subs	r2, r2, r1
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	f340 8181 	ble.w	8009e6a <tcp_receive+0x3d2>
      tcp_send_empty_ack(pcb);
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f002 fa21 	bl	800bfb0 <tcp_send_empty_ack>
 8009b6e:	e048      	b.n	8009c02 <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009b70:	4b7e      	ldr	r3, [pc, #504]	; (8009d6c <tcp_receive+0x2d4>)
 8009b72:	f240 427b 	movw	r2, #1147	; 0x47b
 8009b76:	497e      	ldr	r1, [pc, #504]	; (8009d70 <tcp_receive+0x2d8>)
 8009b78:	487e      	ldr	r0, [pc, #504]	; (8009d74 <tcp_receive+0x2dc>)
 8009b7a:	f021 f8a7 	bl	802accc <iprintf>
 8009b7e:	e790      	b.n	8009aa2 <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009b80:	4b7a      	ldr	r3, [pc, #488]	; (8009d6c <tcp_receive+0x2d4>)
 8009b82:	f240 427c 	movw	r2, #1148	; 0x47c
 8009b86:	497c      	ldr	r1, [pc, #496]	; (8009d78 <tcp_receive+0x2e0>)
 8009b88:	487a      	ldr	r0, [pc, #488]	; (8009d74 <tcp_receive+0x2dc>)
 8009b8a:	f021 f89f 	bl	802accc <iprintf>
 8009b8e:	e78b      	b.n	8009aa8 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b90:	4a73      	ldr	r2, [pc, #460]	; (8009d60 <tcp_receive+0x2c8>)
 8009b92:	6812      	ldr	r2, [r2, #0]
 8009b94:	1a82      	subs	r2, r0, r2
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	da96      	bge.n	8009ac8 <tcp_receive+0x30>
 8009b9a:	e79e      	b.n	8009ada <tcp_receive+0x42>
      if (tcplen == 0) {
 8009b9c:	4a72      	ldr	r2, [pc, #456]	; (8009d68 <tcp_receive+0x2d0>)
 8009b9e:	8812      	ldrh	r2, [r2, #0]
 8009ba0:	b932      	cbnz	r2, 8009bb0 <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009ba2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009ba6:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8009ba8:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009baa:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009bac:	4282      	cmp	r2, r0
 8009bae:	d003      	beq.n	8009bb8 <tcp_receive+0x120>
        pcb->dupacks = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb6:	e7ae      	b.n	8009b16 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 8009bb8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	dbf7      	blt.n	8009bb0 <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 8009bc0:	428b      	cmp	r3, r1
 8009bc2:	d1f5      	bne.n	8009bb0 <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009bc8:	2bff      	cmp	r3, #255	; 0xff
 8009bca:	d01c      	beq.n	8009c06 <tcp_receive+0x16e>
                ++pcb->dupacks;
 8009bcc:	3301      	adds	r3, #1
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d816      	bhi.n	8009c06 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d01f      	beq.n	8009c1c <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d19b      	bne.n	8009b1a <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009be2:	4b5e      	ldr	r3, [pc, #376]	; (8009d5c <tcp_receive+0x2c4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009be8:	1a99      	subs	r1, r3, r2
 8009bea:	2900      	cmp	r1, #0
 8009bec:	db05      	blt.n	8009bfa <tcp_receive+0x162>
 8009bee:	3301      	adds	r3, #1
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009bf4:	1a9b      	subs	r3, r3, r2
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd03      	ble.n	8009c02 <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 8009bfa:	8b63      	ldrh	r3, [r4, #26]
 8009bfc:	f043 0302 	orr.w	r3, r3, #2
 8009c00:	8363      	strh	r3, [r4, #26]
}
 8009c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009c06:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009c0a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009c0c:	4413      	add	r3, r2
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	429a      	cmp	r2, r3
 8009c12:	bf88      	it	hi
 8009c14:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009c18:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f002 f943 	bl	800bea8 <tcp_rexmit_fast>
      if (!found_dupack) {
 8009c22:	e778      	b.n	8009b16 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 8009c24:	8b62      	ldrh	r2, [r4, #26]
 8009c26:	f012 0f04 	tst.w	r2, #4
 8009c2a:	d009      	beq.n	8009c40 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8009c2c:	f022 0204 	bic.w	r2, r2, #4
 8009c30:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009c32:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009c36:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8009c40:	2000      	movs	r0, #0
 8009c42:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009c46:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8009c4a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009c4c:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8009c50:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8009c54:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8009c58:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8009c5a:	7d22      	ldrb	r2, [r4, #20]
 8009c5c:	2a03      	cmp	r2, #3
 8009c5e:	d91c      	bls.n	8009c9a <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009c60:	1a5b      	subs	r3, r3, r1
 8009c62:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8009c64:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8009c68:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	d946      	bls.n	8009cfe <tcp_receive+0x266>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009c70:	8b62      	ldrh	r2, [r4, #26]
 8009c72:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8009c76:	bf14      	ite	ne
 8009c78:	2001      	movne	r0, #1
 8009c7a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009c7c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009c7e:	fb12 f200 	smulbb	r2, r2, r0
 8009c82:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bf94      	ite	ls
 8009c88:	188b      	addls	r3, r1, r2
 8009c8a:	18cb      	addhi	r3, r1, r3
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4299      	cmp	r1, r3
 8009c90:	bf88      	it	hi
 8009c92:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009c96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009c9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009c9c:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <tcp_receive+0x2e4>)
 8009c9e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff fe35 	bl	8009910 <tcp_free_acked_segments>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009caa:	4a35      	ldr	r2, [pc, #212]	; (8009d80 <tcp_receive+0x2e8>)
 8009cac:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff fe2e 	bl	8009910 <tcp_free_acked_segments>
 8009cb4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8009cb6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009cb8:	fab2 f382 	clz	r3, r2
 8009cbc:	095b      	lsrs	r3, r3, #5
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009cc6:	b3a0      	cbz	r0, 8009d32 <tcp_receive+0x29a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009cc8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8009ccc:	492d      	ldr	r1, [pc, #180]	; (8009d84 <tcp_receive+0x2ec>)
 8009cce:	8809      	ldrh	r1, [r1, #0]
 8009cd0:	440b      	add	r3, r1
 8009cd2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8009cd6:	8b63      	ldrh	r3, [r4, #26]
 8009cd8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009cdc:	f43f af1b 	beq.w	8009b16 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 8009ce0:	b352      	cbz	r2, 8009d38 <tcp_receive+0x2a0>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009ce2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009ce4:	68d3      	ldr	r3, [r2, #12]
 8009ce6:	6858      	ldr	r0, [r3, #4]
 8009ce8:	f7fc fcef 	bl	80066ca <lwip_htonl>
 8009cec:	1a2d      	subs	r5, r5, r0
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	f73f af11 	bgt.w	8009b16 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 8009cf4:	8b63      	ldrh	r3, [r4, #26]
 8009cf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cfa:	8363      	strh	r3, [r4, #26]
 8009cfc:	e70b      	b.n	8009b16 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009cfe:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8009d02:	4413      	add	r3, r2
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d804      	bhi.n	8009d14 <tcp_receive+0x27c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009d0a:	4299      	cmp	r1, r3
 8009d0c:	d904      	bls.n	8009d18 <tcp_receive+0x280>
 8009d0e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009d12:	e7c2      	b.n	8009c9a <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d18:	1a5b      	subs	r3, r3, r1
 8009d1a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d1e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009d20:	440b      	add	r3, r1
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	4299      	cmp	r1, r3
 8009d26:	bf88      	it	hi
 8009d28:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009d2c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009d30:	e7b3      	b.n	8009c9a <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 8009d32:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8009d36:	e7c7      	b.n	8009cc8 <tcp_receive+0x230>
          if ((pcb->unsent == NULL) ||
 8009d38:	b140      	cbz	r0, 8009d4c <tcp_receive+0x2b4>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009d3a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009d3c:	68c3      	ldr	r3, [r0, #12]
 8009d3e:	6858      	ldr	r0, [r3, #4]
 8009d40:	f7fc fcc3 	bl	80066ca <lwip_htonl>
 8009d44:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	f73f aee5 	bgt.w	8009b16 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 8009d4c:	8b63      	ldrh	r3, [r4, #26]
 8009d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d52:	8363      	strh	r3, [r4, #26]
 8009d54:	e6df      	b.n	8009b16 <tcp_receive+0x7e>
 8009d56:	bf00      	nop
 8009d58:	2001074c 	.word	0x2001074c
 8009d5c:	2001076c 	.word	0x2001076c
 8009d60:	20010748 	.word	0x20010748
 8009d64:	20010774 	.word	0x20010774
 8009d68:	20010782 	.word	0x20010782
 8009d6c:	0802d634 	.word	0x0802d634
 8009d70:	0802d71c 	.word	0x0802d71c
 8009d74:	0802bc48 	.word	0x0802bc48
 8009d78:	0802d738 	.word	0x0802d738
 8009d7c:	0802d754 	.word	0x0802d754
 8009d80:	0802d75c 	.word	0x0802d75c
 8009d84:	20010760 	.word	0x20010760
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d88:	4a9a      	ldr	r2, [pc, #616]	; (8009ff4 <tcp_receive+0x55c>)
 8009d8a:	8816      	ldrh	r6, [r2, #0]
 8009d8c:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d8e:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8009d92:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 8009d96:	1ab1      	subs	r1, r6, r2
 8009d98:	1ac9      	subs	r1, r1, r3
 8009d9a:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d9c:	fa15 f181 	uxtah	r1, r5, r1
 8009da0:	b209      	sxth	r1, r1
 8009da2:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8009da4:	2800      	cmp	r0, #0
 8009da6:	db0d      	blt.n	8009dc4 <tcp_receive+0x32c>
      m = (s16_t)(m - (pcb->sv >> 2));
 8009da8:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009dac:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8009db0:	1813      	adds	r3, r2, r0
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009db6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009dba:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	e6b1      	b.n	8009b28 <tcp_receive+0x90>
        m = (s16_t) - m;
 8009dc4:	1b92      	subs	r2, r2, r6
 8009dc6:	4413      	add	r3, r2
 8009dc8:	b218      	sxth	r0, r3
 8009dca:	e7ed      	b.n	8009da8 <tcp_receive+0x310>
      struct pbuf *p = inseg.p;
 8009dcc:	4b8a      	ldr	r3, [pc, #552]	; (8009ff8 <tcp_receive+0x560>)
 8009dce:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	d02d      	beq.n	8009e30 <tcp_receive+0x398>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009dd4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009dd8:	429e      	cmp	r6, r3
 8009dda:	d831      	bhi.n	8009e40 <tcp_receive+0x3a8>
      off = (u16_t)off32;
 8009ddc:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009dde:	4b86      	ldr	r3, [pc, #536]	; (8009ff8 <tcp_receive+0x560>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	891b      	ldrh	r3, [r3, #8]
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	d333      	bcc.n	8009e50 <tcp_receive+0x3b8>
      inseg.len -= off;
 8009de8:	4b83      	ldr	r3, [pc, #524]	; (8009ff8 <tcp_receive+0x560>)
 8009dea:	891a      	ldrh	r2, [r3, #8]
 8009dec:	1b92      	subs	r2, r2, r6
 8009dee:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	891b      	ldrh	r3, [r3, #8]
 8009df4:	1b9b      	subs	r3, r3, r6
 8009df6:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8009df8:	8969      	ldrh	r1, [r5, #10]
 8009dfa:	428e      	cmp	r6, r1
 8009dfc:	d908      	bls.n	8009e10 <tcp_receive+0x378>
        p->len = 0;
 8009dfe:	2200      	movs	r2, #0
        off -= p->len;
 8009e00:	1a71      	subs	r1, r6, r1
 8009e02:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 8009e04:	812b      	strh	r3, [r5, #8]
        p->len = 0;
 8009e06:	816a      	strh	r2, [r5, #10]
        p = p->next;
 8009e08:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 8009e0a:	8969      	ldrh	r1, [r5, #10]
 8009e0c:	42b1      	cmp	r1, r6
 8009e0e:	d3f7      	bcc.n	8009e00 <tcp_receive+0x368>
      pbuf_remove_header(p, off);
 8009e10:	4631      	mov	r1, r6
 8009e12:	4628      	mov	r0, r5
 8009e14:	f7fd ff72 	bl	8007cfc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1a:	4a78      	ldr	r2, [pc, #480]	; (8009ffc <tcp_receive+0x564>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	4a76      	ldr	r2, [pc, #472]	; (8009ff8 <tcp_receive+0x560>)
 8009e20:	68d2      	ldr	r2, [r2, #12]
 8009e22:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009e26:	1a5a      	subs	r2, r3, r1
 8009e28:	2a00      	cmp	r2, #0
 8009e2a:	f6bf ae95 	bge.w	8009b58 <tcp_receive+0xc0>
 8009e2e:	e69b      	b.n	8009b68 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e30:	4b73      	ldr	r3, [pc, #460]	; (800a000 <tcp_receive+0x568>)
 8009e32:	f240 5294 	movw	r2, #1428	; 0x594
 8009e36:	4973      	ldr	r1, [pc, #460]	; (800a004 <tcp_receive+0x56c>)
 8009e38:	4873      	ldr	r0, [pc, #460]	; (800a008 <tcp_receive+0x570>)
 8009e3a:	f020 ff47 	bl	802accc <iprintf>
 8009e3e:	e7c9      	b.n	8009dd4 <tcp_receive+0x33c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009e40:	4b6f      	ldr	r3, [pc, #444]	; (800a000 <tcp_receive+0x568>)
 8009e42:	f240 5295 	movw	r2, #1429	; 0x595
 8009e46:	4971      	ldr	r1, [pc, #452]	; (800a00c <tcp_receive+0x574>)
 8009e48:	486f      	ldr	r0, [pc, #444]	; (800a008 <tcp_receive+0x570>)
 8009e4a:	f020 ff3f 	bl	802accc <iprintf>
 8009e4e:	e7c5      	b.n	8009ddc <tcp_receive+0x344>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e50:	4b6b      	ldr	r3, [pc, #428]	; (800a000 <tcp_receive+0x568>)
 8009e52:	f240 5297 	movw	r2, #1431	; 0x597
 8009e56:	496e      	ldr	r1, [pc, #440]	; (800a010 <tcp_receive+0x578>)
 8009e58:	486b      	ldr	r0, [pc, #428]	; (800a008 <tcp_receive+0x570>)
 8009e5a:	f020 ff37 	bl	802accc <iprintf>
 8009e5e:	e7c3      	b.n	8009de8 <tcp_receive+0x350>
        tcp_ack_now(pcb);
 8009e60:	8b63      	ldrh	r3, [r4, #26]
 8009e62:	f043 0302 	orr.w	r3, r3, #2
 8009e66:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e68:	e67e      	b.n	8009b68 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 8009e6a:	428b      	cmp	r3, r1
 8009e6c:	d008      	beq.n	8009e80 <tcp_receive+0x3e8>
        if (pcb->ooseq == NULL) {
 8009e6e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	f000 817b 	beq.w	800a16c <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 8009e76:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009e78:	1e5f      	subs	r7, r3, #1
 8009e7a:	f103 0c01 	add.w	ip, r3, #1
 8009e7e:	e196      	b.n	800a1ae <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 8009e80:	4b5d      	ldr	r3, [pc, #372]	; (8009ff8 <tcp_receive+0x560>)
 8009e82:	891d      	ldrh	r5, [r3, #8]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	8998      	ldrh	r0, [r3, #12]
 8009e88:	f7fc fc1a 	bl	80066c0 <lwip_htons>
 8009e8c:	f010 0303 	ands.w	r3, r0, #3
 8009e90:	bf18      	it	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	442b      	add	r3, r5
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	4a5e      	ldr	r2, [pc, #376]	; (800a014 <tcp_receive+0x57c>)
 8009e9a:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009e9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d317      	bcc.n	8009ed2 <tcp_receive+0x43a>
        if (pcb->ooseq != NULL) {
 8009ea2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 8241 	beq.w	800a32c <tcp_receive+0x894>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009eaa:	4b53      	ldr	r3, [pc, #332]	; (8009ff8 <tcp_receive+0x560>)
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	8998      	ldrh	r0, [r3, #12]
 8009eb0:	f7fc fc06 	bl	80066c0 <lwip_htons>
 8009eb4:	f010 0f01 	tst.w	r0, #1
 8009eb8:	d053      	beq.n	8009f62 <tcp_receive+0x4ca>
            while (pcb->ooseq != NULL) {
 8009eba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f000 8235 	beq.w	800a32c <tcp_receive+0x894>
              pcb->ooseq = pcb->ooseq->next;
 8009ec2:	6803      	ldr	r3, [r0, #0]
 8009ec4:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009ec6:	f7fe fc49 	bl	800875c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009eca:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d1f8      	bne.n	8009ec2 <tcp_receive+0x42a>
 8009ed0:	e22c      	b.n	800a32c <tcp_receive+0x894>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ed2:	4b49      	ldr	r3, [pc, #292]	; (8009ff8 <tcp_receive+0x560>)
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	8998      	ldrh	r0, [r3, #12]
 8009ed8:	f7fc fbf2 	bl	80066c0 <lwip_htons>
 8009edc:	f010 0f01 	tst.w	r0, #1
 8009ee0:	d12f      	bne.n	8009f42 <tcp_receive+0x4aa>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009ee2:	4b45      	ldr	r3, [pc, #276]	; (8009ff8 <tcp_receive+0x560>)
 8009ee4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009ee6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	8998      	ldrh	r0, [r3, #12]
 8009eec:	f7fc fbe8 	bl	80066c0 <lwip_htons>
 8009ef0:	f010 0f02 	tst.w	r0, #2
 8009ef4:	d003      	beq.n	8009efe <tcp_receive+0x466>
            inseg.len -= 1;
 8009ef6:	4a40      	ldr	r2, [pc, #256]	; (8009ff8 <tcp_receive+0x560>)
 8009ef8:	8913      	ldrh	r3, [r2, #8]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009efe:	4e3e      	ldr	r6, [pc, #248]	; (8009ff8 <tcp_receive+0x560>)
 8009f00:	8931      	ldrh	r1, [r6, #8]
 8009f02:	6870      	ldr	r0, [r6, #4]
 8009f04:	f7fe f852 	bl	8007fac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009f08:	8935      	ldrh	r5, [r6, #8]
 8009f0a:	68f3      	ldr	r3, [r6, #12]
 8009f0c:	8998      	ldrh	r0, [r3, #12]
 8009f0e:	f7fc fbd7 	bl	80066c0 <lwip_htons>
 8009f12:	f010 0303 	ands.w	r3, r0, #3
 8009f16:	bf18      	it	ne
 8009f18:	2301      	movne	r3, #1
 8009f1a:	442b      	add	r3, r5
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <tcp_receive+0x57c>)
 8009f20:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f22:	4a36      	ldr	r2, [pc, #216]	; (8009ffc <tcp_receive+0x564>)
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	4413      	add	r3, r2
 8009f28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009f2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f2c:	440a      	add	r2, r1
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d0b7      	beq.n	8009ea2 <tcp_receive+0x40a>
 8009f32:	4b33      	ldr	r3, [pc, #204]	; (800a000 <tcp_receive+0x568>)
 8009f34:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009f38:	4937      	ldr	r1, [pc, #220]	; (800a018 <tcp_receive+0x580>)
 8009f3a:	4833      	ldr	r0, [pc, #204]	; (800a008 <tcp_receive+0x570>)
 8009f3c:	f020 fec6 	bl	802accc <iprintf>
 8009f40:	e7af      	b.n	8009ea2 <tcp_receive+0x40a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f42:	4e2d      	ldr	r6, [pc, #180]	; (8009ff8 <tcp_receive+0x560>)
 8009f44:	68f3      	ldr	r3, [r6, #12]
 8009f46:	899d      	ldrh	r5, [r3, #12]
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f7fc fbb9 	bl	80066c0 <lwip_htons>
 8009f4e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f52:	f7fc fbb5 	bl	80066c0 <lwip_htons>
 8009f56:	68f3      	ldr	r3, [r6, #12]
 8009f58:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009f5c:	4305      	orrs	r5, r0
 8009f5e:	819d      	strh	r5, [r3, #12]
 8009f60:	e7bf      	b.n	8009ee2 <tcp_receive+0x44a>
            struct tcp_seg *next = pcb->ooseq;
 8009f62:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	f000 81db 	beq.w	800a320 <tcp_receive+0x888>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f6a:	4f24      	ldr	r7, [pc, #144]	; (8009ffc <tcp_receive+0x564>)
 8009f6c:	4e29      	ldr	r6, [pc, #164]	; (800a014 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009f6e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8009ff8 <tcp_receive+0x560>
 8009f72:	e009      	b.n	8009f88 <tcp_receive+0x4f0>
              next = next->next;
 8009f74:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7fe fbef 	bl	800875c <tcp_seg_free>
            while (next &&
 8009f7e:	f1b9 0f00 	cmp.w	r9, #0
 8009f82:	f000 81cd 	beq.w	800a320 <tcp_receive+0x888>
              next = next->next;
 8009f86:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f88:	f8d7 c000 	ldr.w	ip, [r7]
 8009f8c:	68e9      	ldr	r1, [r5, #12]
 8009f8e:	6848      	ldr	r0, [r1, #4]
 8009f90:	8833      	ldrh	r3, [r6, #0]
 8009f92:	4463      	add	r3, ip
 8009f94:	1a1b      	subs	r3, r3, r0
 8009f96:	892a      	ldrh	r2, [r5, #8]
 8009f98:	1a9a      	subs	r2, r3, r2
            while (next &&
 8009f9a:	2a00      	cmp	r2, #0
 8009f9c:	f2c0 81c2 	blt.w	800a324 <tcp_receive+0x88c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009fa0:	8988      	ldrh	r0, [r1, #12]
 8009fa2:	f7fc fb8d 	bl	80066c0 <lwip_htons>
 8009fa6:	f010 0f01 	tst.w	r0, #1
 8009faa:	d0e3      	beq.n	8009f74 <tcp_receive+0x4dc>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009fac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fb0:	8998      	ldrh	r0, [r3, #12]
 8009fb2:	f7fc fb85 	bl	80066c0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009fb6:	f010 0f02 	tst.w	r0, #2
 8009fba:	d1db      	bne.n	8009f74 <tcp_receive+0x4dc>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fc0:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f7fc fb7b 	bl	80066c0 <lwip_htons>
 8009fca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fce:	ea49 0900 	orr.w	r9, r9, r0
 8009fd2:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009fd6:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8009fda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fde:	8998      	ldrh	r0, [r3, #12]
 8009fe0:	f7fc fb6e 	bl	80066c0 <lwip_htons>
 8009fe4:	f010 0303 	ands.w	r3, r0, #3
 8009fe8:	bf18      	it	ne
 8009fea:	2301      	movne	r3, #1
 8009fec:	444b      	add	r3, r9
 8009fee:	8033      	strh	r3, [r6, #0]
 8009ff0:	e7c0      	b.n	8009f74 <tcp_receive+0x4dc>
 8009ff2:	bf00      	nop
 8009ff4:	20014638 	.word	0x20014638
 8009ff8:	20010750 	.word	0x20010750
 8009ffc:	2001076c 	.word	0x2001076c
 800a000:	0802d634 	.word	0x0802d634
 800a004:	0802d764 	.word	0x0802d764
 800a008:	0802bc48 	.word	0x0802bc48
 800a00c:	0802d774 	.word	0x0802d774
 800a010:	0802d784 	.word	0x0802d784
 800a014:	20010782 	.word	0x20010782
 800a018:	0802d794 	.word	0x0802d794
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a01c:	4baa      	ldr	r3, [pc, #680]	; (800a2c8 <tcp_receive+0x830>)
 800a01e:	eba0 000c 	sub.w	r0, r0, ip
 800a022:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	8998      	ldrh	r0, [r3, #12]
 800a028:	f7fc fb4a 	bl	80066c0 <lwip_htons>
 800a02c:	f010 0f02 	tst.w	r0, #2
 800a030:	d003      	beq.n	800a03a <tcp_receive+0x5a2>
                inseg.len -= 1;
 800a032:	4aa5      	ldr	r2, [pc, #660]	; (800a2c8 <tcp_receive+0x830>)
 800a034:	8913      	ldrh	r3, [r2, #8]
 800a036:	3b01      	subs	r3, #1
 800a038:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a03a:	4fa3      	ldr	r7, [pc, #652]	; (800a2c8 <tcp_receive+0x830>)
 800a03c:	8939      	ldrh	r1, [r7, #8]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7fd ffb4 	bl	8007fac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a044:	893e      	ldrh	r6, [r7, #8]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8998      	ldrh	r0, [r3, #12]
 800a04a:	f7fc fb39 	bl	80066c0 <lwip_htons>
 800a04e:	f010 0303 	ands.w	r3, r0, #3
 800a052:	bf18      	it	ne
 800a054:	2301      	movne	r3, #1
 800a056:	4433      	add	r3, r6
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4a9c      	ldr	r2, [pc, #624]	; (800a2cc <tcp_receive+0x834>)
 800a05c:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a05e:	4a9c      	ldr	r2, [pc, #624]	; (800a2d0 <tcp_receive+0x838>)
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	4413      	add	r3, r2
 800a064:	68ea      	ldr	r2, [r5, #12]
 800a066:	6852      	ldr	r2, [r2, #4]
 800a068:	4293      	cmp	r3, r2
 800a06a:	f000 815e 	beq.w	800a32a <tcp_receive+0x892>
 800a06e:	4b99      	ldr	r3, [pc, #612]	; (800a2d4 <tcp_receive+0x83c>)
 800a070:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a074:	4998      	ldr	r1, [pc, #608]	; (800a2d8 <tcp_receive+0x840>)
 800a076:	4899      	ldr	r0, [pc, #612]	; (800a2dc <tcp_receive+0x844>)
 800a078:	f020 fe28 	bl	802accc <iprintf>
 800a07c:	e155      	b.n	800a32a <tcp_receive+0x892>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a07e:	4b95      	ldr	r3, [pc, #596]	; (800a2d4 <tcp_receive+0x83c>)
 800a080:	f240 6207 	movw	r2, #1543	; 0x607
 800a084:	4996      	ldr	r1, [pc, #600]	; (800a2e0 <tcp_receive+0x848>)
 800a086:	4895      	ldr	r0, [pc, #596]	; (800a2dc <tcp_receive+0x844>)
 800a088:	f020 fe20 	bl	802accc <iprintf>
 800a08c:	e158      	b.n	800a340 <tcp_receive+0x8a8>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a08e:	4643      	mov	r3, r8
 800a090:	f240 622b 	movw	r2, #1579	; 0x62b
 800a094:	4639      	mov	r1, r7
 800a096:	4891      	ldr	r0, [pc, #580]	; (800a2dc <tcp_receive+0x844>)
 800a098:	f020 fe18 	bl	802accc <iprintf>
 800a09c:	e03e      	b.n	800a11c <tcp_receive+0x684>
              pbuf_cat(recv_data, cseg->p);
 800a09e:	f7fe f82b 	bl	80080f8 <pbuf_cat>
            cseg->p = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a0a6:	68eb      	ldr	r3, [r5, #12]
 800a0a8:	8998      	ldrh	r0, [r3, #12]
 800a0aa:	f7fc fb09 	bl	80066c0 <lwip_htons>
 800a0ae:	f010 0f01 	tst.w	r0, #1
 800a0b2:	d009      	beq.n	800a0c8 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 800a0b4:	4a8b      	ldr	r2, [pc, #556]	; (800a2e4 <tcp_receive+0x84c>)
 800a0b6:	7813      	ldrb	r3, [r2, #0]
 800a0b8:	f043 0320 	orr.w	r3, r3, #32
 800a0bc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a0be:	7d23      	ldrb	r3, [r4, #20]
 800a0c0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800a0c2:	bf04      	itt	eq
 800a0c4:	2307      	moveq	r3, #7
 800a0c6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7fe fb45 	bl	800875c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a0d2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	d03d      	beq.n	800a154 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a0d8:	68ea      	ldr	r2, [r5, #12]
 800a0da:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800a0dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0de:	428b      	cmp	r3, r1
 800a0e0:	d138      	bne.n	800a154 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a0e2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a0e4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a0e8:	8990      	ldrh	r0, [r2, #12]
 800a0ea:	f7fc fae9 	bl	80066c0 <lwip_htons>
 800a0ee:	f010 0003 	ands.w	r0, r0, #3
 800a0f2:	bf18      	it	ne
 800a0f4:	2001      	movne	r0, #1
 800a0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f8:	4499      	add	r9, r3
 800a0fa:	4448      	add	r0, r9
 800a0fc:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a0fe:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800a102:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a106:	68eb      	ldr	r3, [r5, #12]
 800a108:	8998      	ldrh	r0, [r3, #12]
 800a10a:	f7fc fad9 	bl	80066c0 <lwip_htons>
 800a10e:	f010 0003 	ands.w	r0, r0, #3
 800a112:	bf18      	it	ne
 800a114:	2001      	movne	r0, #1
 800a116:	4450      	add	r0, sl
 800a118:	4581      	cmp	r9, r0
 800a11a:	d3b8      	bcc.n	800a08e <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a11c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a120:	68eb      	ldr	r3, [r5, #12]
 800a122:	8998      	ldrh	r0, [r3, #12]
 800a124:	f7fc facc 	bl	80066c0 <lwip_htons>
 800a128:	f010 0003 	ands.w	r0, r0, #3
 800a12c:	bf18      	it	ne
 800a12e:	2001      	movne	r0, #1
 800a130:	4448      	add	r0, r9
 800a132:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a134:	1a18      	subs	r0, r3, r0
 800a136:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a138:	4620      	mov	r0, r4
 800a13a:	f7fe fa9b 	bl	8008674 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a13e:	6869      	ldr	r1, [r5, #4]
 800a140:	890b      	ldrh	r3, [r1, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0af      	beq.n	800a0a6 <tcp_receive+0x60e>
            if (recv_data) {
 800a146:	4b68      	ldr	r3, [pc, #416]	; (800a2e8 <tcp_receive+0x850>)
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d1a7      	bne.n	800a09e <tcp_receive+0x606>
              recv_data = cseg->p;
 800a14e:	4b66      	ldr	r3, [pc, #408]	; (800a2e8 <tcp_receive+0x850>)
 800a150:	6019      	str	r1, [r3, #0]
 800a152:	e7a6      	b.n	800a0a2 <tcp_receive+0x60a>
        tcp_ack(pcb);
 800a154:	8b63      	ldrh	r3, [r4, #26]
 800a156:	f013 0f01 	tst.w	r3, #1
 800a15a:	bf1a      	itte	ne
 800a15c:	f023 0301 	bicne.w	r3, r3, #1
 800a160:	f043 0302 	orrne.w	r3, r3, #2
 800a164:	f043 0301 	orreq.w	r3, r3, #1
 800a168:	8363      	strh	r3, [r4, #26]
 800a16a:	e54a      	b.n	8009c02 <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a16c:	4856      	ldr	r0, [pc, #344]	; (800a2c8 <tcp_receive+0x830>)
 800a16e:	f7fe fb0d 	bl	800878c <tcp_seg_copy>
 800a172:	6760      	str	r0, [r4, #116]	; 0x74
 800a174:	e051      	b.n	800a21a <tcp_receive+0x782>
              if (inseg.len > next->len) {
 800a176:	4b54      	ldr	r3, [pc, #336]	; (800a2c8 <tcp_receive+0x830>)
 800a178:	891a      	ldrh	r2, [r3, #8]
 800a17a:	892b      	ldrh	r3, [r5, #8]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d94c      	bls.n	800a21a <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a180:	4851      	ldr	r0, [pc, #324]	; (800a2c8 <tcp_receive+0x830>)
 800a182:	f7fe fb03 	bl	800878c <tcp_seg_copy>
                if (cseg != NULL) {
 800a186:	4603      	mov	r3, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	d046      	beq.n	800a21a <tcp_receive+0x782>
                  if (prev != NULL) {
 800a18c:	b12e      	cbz	r6, 800a19a <tcp_receive+0x702>
                    prev->next = cseg;
 800a18e:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a190:	4629      	mov	r1, r5
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fc28 	bl	80099e8 <tcp_oos_insert_segment>
 800a198:	e03f      	b.n	800a21a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a19a:	6760      	str	r0, [r4, #116]	; 0x74
 800a19c:	e7f8      	b.n	800a190 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a19e:	1a99      	subs	r1, r3, r2
 800a1a0:	2900      	cmp	r1, #0
 800a1a2:	db27      	blt.n	800a1f4 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800a1a4:	6829      	ldr	r1, [r5, #0]
 800a1a6:	462e      	mov	r6, r5
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	d033      	beq.n	800a214 <tcp_receive+0x77c>
 800a1ac:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800a1ae:	68e8      	ldr	r0, [r5, #12]
 800a1b0:	6842      	ldr	r2, [r0, #4]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d0df      	beq.n	800a176 <tcp_receive+0x6de>
              if (prev == NULL) {
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	d0f1      	beq.n	800a19e <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a1ba:	68f1      	ldr	r1, [r6, #12]
 800a1bc:	6849      	ldr	r1, [r1, #4]
 800a1be:	1a79      	subs	r1, r7, r1
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	dbef      	blt.n	800a1a4 <tcp_receive+0x70c>
 800a1c4:	ebac 0102 	sub.w	r1, ip, r2
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	dceb      	bgt.n	800a1a4 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1cc:	483e      	ldr	r0, [pc, #248]	; (800a2c8 <tcp_receive+0x830>)
 800a1ce:	f7fe fadd 	bl	800878c <tcp_seg_copy>
                  if (cseg != NULL) {
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	b308      	cbz	r0, 800a21a <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a1d6:	68f3      	ldr	r3, [r6, #12]
 800a1d8:	6859      	ldr	r1, [r3, #4]
 800a1da:	4b3d      	ldr	r3, [pc, #244]	; (800a2d0 <tcp_receive+0x838>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	8933      	ldrh	r3, [r6, #8]
 800a1e0:	440b      	add	r3, r1
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dc0e      	bgt.n	800a206 <tcp_receive+0x76e>
                    prev->next = cseg;
 800a1e8:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff fbfb 	bl	80099e8 <tcp_oos_insert_segment>
 800a1f2:	e012      	b.n	800a21a <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a1f4:	4834      	ldr	r0, [pc, #208]	; (800a2c8 <tcp_receive+0x830>)
 800a1f6:	f7fe fac9 	bl	800878c <tcp_seg_copy>
                  if (cseg != NULL) {
 800a1fa:	b170      	cbz	r0, 800a21a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a1fc:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a1fe:	4629      	mov	r1, r5
 800a200:	f7ff fbf2 	bl	80099e8 <tcp_oos_insert_segment>
 800a204:	e009      	b.n	800a21a <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a206:	1a52      	subs	r2, r2, r1
 800a208:	b291      	uxth	r1, r2
 800a20a:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a20c:	6870      	ldr	r0, [r6, #4]
 800a20e:	f7fd fecd 	bl	8007fac <pbuf_realloc>
 800a212:	e7e9      	b.n	800a1e8 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a214:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800a216:	2b00      	cmp	r3, #0
 800a218:	dc03      	bgt.n	800a222 <tcp_receive+0x78a>
        tcp_send_empty_ack(pcb);
 800a21a:	4620      	mov	r0, r4
 800a21c:	f001 fec8 	bl	800bfb0 <tcp_send_empty_ack>
 800a220:	e4ef      	b.n	8009c02 <tcp_receive+0x16a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a222:	8980      	ldrh	r0, [r0, #12]
 800a224:	f7fc fa4c 	bl	80066c0 <lwip_htons>
 800a228:	f010 0f01 	tst.w	r0, #1
 800a22c:	d1f5      	bne.n	800a21a <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 800a22e:	4826      	ldr	r0, [pc, #152]	; (800a2c8 <tcp_receive+0x830>)
 800a230:	f7fe faac 	bl	800878c <tcp_seg_copy>
 800a234:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a236:	2800      	cmp	r0, #0
 800a238:	d0ef      	beq.n	800a21a <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a23a:	68eb      	ldr	r3, [r5, #12]
 800a23c:	6859      	ldr	r1, [r3, #4]
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <tcp_receive+0x838>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	892a      	ldrh	r2, [r5, #8]
 800a244:	440a      	add	r2, r1
 800a246:	1ad2      	subs	r2, r2, r3
 800a248:	2a00      	cmp	r2, #0
 800a24a:	dc51      	bgt.n	800a2f0 <tcp_receive+0x858>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a24c:	4b1f      	ldr	r3, [pc, #124]	; (800a2cc <tcp_receive+0x834>)
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	4a1f      	ldr	r2, [pc, #124]	; (800a2d0 <tcp_receive+0x838>)
 800a252:	6812      	ldr	r2, [r2, #0]
 800a254:	4413      	add	r3, r2
 800a256:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dddb      	ble.n	800a21a <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a262:	682b      	ldr	r3, [r5, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	8998      	ldrh	r0, [r3, #12]
 800a268:	f7fc fa2a 	bl	80066c0 <lwip_htons>
 800a26c:	f010 0f01 	tst.w	r0, #1
 800a270:	d145      	bne.n	800a2fe <tcp_receive+0x866>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a272:	682a      	ldr	r2, [r5, #0]
 800a274:	4e16      	ldr	r6, [pc, #88]	; (800a2d0 <tcp_receive+0x838>)
 800a276:	6831      	ldr	r1, [r6, #0]
 800a278:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a27e:	440b      	add	r3, r1
 800a280:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	8919      	ldrh	r1, [r3, #8]
 800a286:	6858      	ldr	r0, [r3, #4]
 800a288:	f7fd fe90 	bl	8007fac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a28c:	682b      	ldr	r3, [r5, #0]
 800a28e:	891d      	ldrh	r5, [r3, #8]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	8998      	ldrh	r0, [r3, #12]
 800a294:	f7fc fa14 	bl	80066c0 <lwip_htons>
 800a298:	f010 0303 	ands.w	r3, r0, #3
 800a29c:	bf18      	it	ne
 800a29e:	2301      	movne	r3, #1
 800a2a0:	442b      	add	r3, r5
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4a09      	ldr	r2, [pc, #36]	; (800a2cc <tcp_receive+0x834>)
 800a2a6:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a2a8:	6832      	ldr	r2, [r6, #0]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a2ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2b0:	440a      	add	r2, r1
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d0b1      	beq.n	800a21a <tcp_receive+0x782>
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <tcp_receive+0x83c>)
 800a2b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a2bc:	490b      	ldr	r1, [pc, #44]	; (800a2ec <tcp_receive+0x854>)
 800a2be:	4807      	ldr	r0, [pc, #28]	; (800a2dc <tcp_receive+0x844>)
 800a2c0:	f020 fd04 	bl	802accc <iprintf>
 800a2c4:	e7a9      	b.n	800a21a <tcp_receive+0x782>
 800a2c6:	bf00      	nop
 800a2c8:	20010750 	.word	0x20010750
 800a2cc:	20010782 	.word	0x20010782
 800a2d0:	2001076c 	.word	0x2001076c
 800a2d4:	0802d634 	.word	0x0802d634
 800a2d8:	0802d7cc 	.word	0x0802d7cc
 800a2dc:	0802bc48 	.word	0x0802bc48
 800a2e0:	0802d808 	.word	0x0802d808
 800a2e4:	20010768 	.word	0x20010768
 800a2e8:	20010764 	.word	0x20010764
 800a2ec:	0802d794 	.word	0x0802d794
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a2f0:	1a5b      	subs	r3, r3, r1
 800a2f2:	b299      	uxth	r1, r3
 800a2f4:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a2f6:	6868      	ldr	r0, [r5, #4]
 800a2f8:	f7fd fe58 	bl	8007fac <pbuf_realloc>
 800a2fc:	e7a6      	b.n	800a24c <tcp_receive+0x7b4>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	899e      	ldrh	r6, [r3, #12]
 800a304:	4630      	mov	r0, r6
 800a306:	f7fc f9db 	bl	80066c0 <lwip_htons>
 800a30a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a30e:	f7fc f9d7 	bl	80066c0 <lwip_htons>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a31a:	4306      	orrs	r6, r0
 800a31c:	819e      	strh	r6, [r3, #12]
 800a31e:	e7a8      	b.n	800a272 <tcp_receive+0x7da>
              next = next->next;
 800a320:	2500      	movs	r5, #0
 800a322:	e002      	b.n	800a32a <tcp_receive+0x892>
            if (next &&
 800a324:	2b00      	cmp	r3, #0
 800a326:	f73f ae79 	bgt.w	800a01c <tcp_receive+0x584>
            pcb->ooseq = next;
 800a32a:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800a32c:	4b18      	ldr	r3, [pc, #96]	; (800a390 <tcp_receive+0x8f8>)
 800a32e:	881a      	ldrh	r2, [r3, #0]
 800a330:	4b18      	ldr	r3, [pc, #96]	; (800a394 <tcp_receive+0x8fc>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4413      	add	r3, r2
 800a336:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a338:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a33a:	4293      	cmp	r3, r2
 800a33c:	f4ff ae9f 	bcc.w	800a07e <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800a340:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a342:	4a13      	ldr	r2, [pc, #76]	; (800a390 <tcp_receive+0x8f8>)
 800a344:	8812      	ldrh	r2, [r2, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a34a:	4620      	mov	r0, r4
 800a34c:	f7fe f992 	bl	8008674 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <tcp_receive+0x900>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	891a      	ldrh	r2, [r3, #8]
 800a356:	b122      	cbz	r2, 800a362 <tcp_receive+0x8ca>
          recv_data = inseg.p;
 800a358:	4a10      	ldr	r2, [pc, #64]	; (800a39c <tcp_receive+0x904>)
 800a35a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <tcp_receive+0x900>)
 800a35e:	2200      	movs	r2, #0
 800a360:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <tcp_receive+0x900>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	8998      	ldrh	r0, [r3, #12]
 800a368:	f7fc f9aa 	bl	80066c0 <lwip_htons>
 800a36c:	f010 0f01 	tst.w	r0, #1
 800a370:	d004      	beq.n	800a37c <tcp_receive+0x8e4>
          recv_flags |= TF_GOT_FIN;
 800a372:	4a0b      	ldr	r2, [pc, #44]	; (800a3a0 <tcp_receive+0x908>)
 800a374:	7813      	ldrb	r3, [r2, #0]
 800a376:	f043 0320 	orr.w	r3, r3, #32
 800a37a:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800a37c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a37e:	2d00      	cmp	r5, #0
 800a380:	f43f aee8 	beq.w	800a154 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a384:	4e03      	ldr	r6, [pc, #12]	; (800a394 <tcp_receive+0x8fc>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a386:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800a3a8 <tcp_receive+0x910>
 800a38a:	4f06      	ldr	r7, [pc, #24]	; (800a3a4 <tcp_receive+0x90c>)
 800a38c:	e6a4      	b.n	800a0d8 <tcp_receive+0x640>
 800a38e:	bf00      	nop
 800a390:	20010782 	.word	0x20010782
 800a394:	2001076c 	.word	0x2001076c
 800a398:	20010750 	.word	0x20010750
 800a39c:	20010764 	.word	0x20010764
 800a3a0:	20010768 	.word	0x20010768
 800a3a4:	0802d828 	.word	0x0802d828
 800a3a8:	0802d634 	.word	0x0802d634

0800a3ac <tcp_input>:
{
 800a3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	b158      	cbz	r0, 800a3ce <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a3b6:	686a      	ldr	r2, [r5, #4]
 800a3b8:	4b77      	ldr	r3, [pc, #476]	; (800a598 <tcp_input+0x1ec>)
 800a3ba:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a3bc:	896b      	ldrh	r3, [r5, #10]
 800a3be:	2b13      	cmp	r3, #19
 800a3c0:	d80c      	bhi.n	800a3dc <tcp_input+0x30>
  pbuf_free(p);
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f7fd fcda 	bl	8007d7c <pbuf_free>
}
 800a3c8:	b005      	add	sp, #20
 800a3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a3ce:	4b73      	ldr	r3, [pc, #460]	; (800a59c <tcp_input+0x1f0>)
 800a3d0:	2283      	movs	r2, #131	; 0x83
 800a3d2:	4973      	ldr	r1, [pc, #460]	; (800a5a0 <tcp_input+0x1f4>)
 800a3d4:	4873      	ldr	r0, [pc, #460]	; (800a5a4 <tcp_input+0x1f8>)
 800a3d6:	f020 fc79 	bl	802accc <iprintf>
 800a3da:	e7ec      	b.n	800a3b6 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a3dc:	4b72      	ldr	r3, [pc, #456]	; (800a5a8 <tcp_input+0x1fc>)
 800a3de:	6819      	ldr	r1, [r3, #0]
 800a3e0:	6958      	ldr	r0, [r3, #20]
 800a3e2:	f004 ff92 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d1eb      	bne.n	800a3c2 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a3ea:	4b6f      	ldr	r3, [pc, #444]	; (800a5a8 <tcp_input+0x1fc>)
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a3f2:	2be0      	cmp	r3, #224	; 0xe0
 800a3f4:	d0e5      	beq.n	800a3c2 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a3f6:	4b68      	ldr	r3, [pc, #416]	; (800a598 <tcp_input+0x1ec>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8998      	ldrh	r0, [r3, #12]
 800a3fc:	f7fc f960 	bl	80066c0 <lwip_htons>
 800a400:	0a81      	lsrs	r1, r0, #10
 800a402:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a406:	2913      	cmp	r1, #19
 800a408:	d9db      	bls.n	800a3c2 <tcp_input+0x16>
 800a40a:	b28b      	uxth	r3, r1
 800a40c:	892a      	ldrh	r2, [r5, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d3d7      	bcc.n	800a3c2 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a412:	f1a3 0214 	sub.w	r2, r3, #20
 800a416:	b292      	uxth	r2, r2
 800a418:	4864      	ldr	r0, [pc, #400]	; (800a5ac <tcp_input+0x200>)
 800a41a:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800a41c:	4864      	ldr	r0, [pc, #400]	; (800a5b0 <tcp_input+0x204>)
 800a41e:	2400      	movs	r4, #0
 800a420:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800a422:	8968      	ldrh	r0, [r5, #10]
 800a424:	4298      	cmp	r0, r3
 800a426:	d22e      	bcs.n	800a486 <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d068      	beq.n	800a500 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800a42e:	2114      	movs	r1, #20
 800a430:	4628      	mov	r0, r5
 800a432:	f7fd fc63 	bl	8007cfc <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a436:	896c      	ldrh	r4, [r5, #10]
 800a438:	4b5e      	ldr	r3, [pc, #376]	; (800a5b4 <tcp_input+0x208>)
 800a43a:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a43c:	4b5b      	ldr	r3, [pc, #364]	; (800a5ac <tcp_input+0x200>)
 800a43e:	881f      	ldrh	r7, [r3, #0]
 800a440:	1b3e      	subs	r6, r7, r4
 800a442:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800a444:	4621      	mov	r1, r4
 800a446:	4628      	mov	r0, r5
 800a448:	f7fd fc58 	bl	8007cfc <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a44c:	6828      	ldr	r0, [r5, #0]
 800a44e:	8943      	ldrh	r3, [r0, #10]
 800a450:	42b3      	cmp	r3, r6
 800a452:	d3b6      	bcc.n	800a3c2 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a454:	6842      	ldr	r2, [r0, #4]
 800a456:	4b56      	ldr	r3, [pc, #344]	; (800a5b0 <tcp_input+0x204>)
 800a458:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800a45a:	4631      	mov	r1, r6
 800a45c:	f7fd fc4e 	bl	8007cfc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a460:	892b      	ldrh	r3, [r5, #8]
 800a462:	441c      	add	r4, r3
 800a464:	1be4      	subs	r4, r4, r7
 800a466:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a468:	896b      	ldrh	r3, [r5, #10]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d14f      	bne.n	800a50e <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a46e:	682b      	ldr	r3, [r5, #0]
 800a470:	892a      	ldrh	r2, [r5, #8]
 800a472:	891b      	ldrh	r3, [r3, #8]
 800a474:	429a      	cmp	r2, r3
 800a476:	d00b      	beq.n	800a490 <tcp_input+0xe4>
 800a478:	4b48      	ldr	r3, [pc, #288]	; (800a59c <tcp_input+0x1f0>)
 800a47a:	22e0      	movs	r2, #224	; 0xe0
 800a47c:	494e      	ldr	r1, [pc, #312]	; (800a5b8 <tcp_input+0x20c>)
 800a47e:	4849      	ldr	r0, [pc, #292]	; (800a5a4 <tcp_input+0x1f8>)
 800a480:	f020 fc24 	bl	802accc <iprintf>
 800a484:	e004      	b.n	800a490 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800a486:	4b4b      	ldr	r3, [pc, #300]	; (800a5b4 <tcp_input+0x208>)
 800a488:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a48a:	4628      	mov	r0, r5
 800a48c:	f7fd fc36 	bl	8007cfc <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a490:	4c41      	ldr	r4, [pc, #260]	; (800a598 <tcp_input+0x1ec>)
 800a492:	6826      	ldr	r6, [r4, #0]
 800a494:	8830      	ldrh	r0, [r6, #0]
 800a496:	f7fc f913 	bl	80066c0 <lwip_htons>
 800a49a:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a49c:	6826      	ldr	r6, [r4, #0]
 800a49e:	8870      	ldrh	r0, [r6, #2]
 800a4a0:	f7fc f90e 	bl	80066c0 <lwip_htons>
 800a4a4:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a4a6:	6826      	ldr	r6, [r4, #0]
 800a4a8:	6870      	ldr	r0, [r6, #4]
 800a4aa:	f7fc f90e 	bl	80066ca <lwip_htonl>
 800a4ae:	6070      	str	r0, [r6, #4]
 800a4b0:	4b42      	ldr	r3, [pc, #264]	; (800a5bc <tcp_input+0x210>)
 800a4b2:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a4b4:	6826      	ldr	r6, [r4, #0]
 800a4b6:	68b0      	ldr	r0, [r6, #8]
 800a4b8:	f7fc f907 	bl	80066ca <lwip_htonl>
 800a4bc:	60b0      	str	r0, [r6, #8]
 800a4be:	4b40      	ldr	r3, [pc, #256]	; (800a5c0 <tcp_input+0x214>)
 800a4c0:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a4c2:	6826      	ldr	r6, [r4, #0]
 800a4c4:	89f0      	ldrh	r0, [r6, #14]
 800a4c6:	f7fc f8fb 	bl	80066c0 <lwip_htons>
 800a4ca:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	8998      	ldrh	r0, [r3, #12]
 800a4d0:	f7fc f8f6 	bl	80066c0 <lwip_htons>
 800a4d4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800a4d8:	4b3a      	ldr	r3, [pc, #232]	; (800a5c4 <tcp_input+0x218>)
 800a4da:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a4dc:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a4de:	f010 0f03 	tst.w	r0, #3
 800a4e2:	d11b      	bne.n	800a51c <tcp_input+0x170>
  tcplen = p->tot_len;
 800a4e4:	4b38      	ldr	r3, [pc, #224]	; (800a5c8 <tcp_input+0x21c>)
 800a4e6:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4e8:	4b38      	ldr	r3, [pc, #224]	; (800a5cc <tcp_input+0x220>)
 800a4ea:	681c      	ldr	r4, [r3, #0]
 800a4ec:	2c00      	cmp	r4, #0
 800a4ee:	f000 8563 	beq.w	800afb8 <tcp_input+0xc0c>
  prev = NULL;
 800a4f2:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a4f4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a59c <tcp_input+0x1f0>
 800a4f8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800a5e0 <tcp_input+0x234>
 800a4fc:	4f29      	ldr	r7, [pc, #164]	; (800a5a4 <tcp_input+0x1f8>)
 800a4fe:	e035      	b.n	800a56c <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a500:	4b26      	ldr	r3, [pc, #152]	; (800a59c <tcp_input+0x1f0>)
 800a502:	22c2      	movs	r2, #194	; 0xc2
 800a504:	4932      	ldr	r1, [pc, #200]	; (800a5d0 <tcp_input+0x224>)
 800a506:	4827      	ldr	r0, [pc, #156]	; (800a5a4 <tcp_input+0x1f8>)
 800a508:	f020 fbe0 	bl	802accc <iprintf>
 800a50c:	e78f      	b.n	800a42e <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <tcp_input+0x1f0>)
 800a510:	22df      	movs	r2, #223	; 0xdf
 800a512:	4930      	ldr	r1, [pc, #192]	; (800a5d4 <tcp_input+0x228>)
 800a514:	4823      	ldr	r0, [pc, #140]	; (800a5a4 <tcp_input+0x1f8>)
 800a516:	f020 fbd9 	bl	802accc <iprintf>
 800a51a:	e7a8      	b.n	800a46e <tcp_input+0xc2>
    tcplen++;
 800a51c:	1c53      	adds	r3, r2, #1
 800a51e:	b29b      	uxth	r3, r3
 800a520:	4929      	ldr	r1, [pc, #164]	; (800a5c8 <tcp_input+0x21c>)
 800a522:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a524:	429a      	cmp	r2, r3
 800a526:	d9df      	bls.n	800a4e8 <tcp_input+0x13c>
 800a528:	e74b      	b.n	800a3c2 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a52a:	4643      	mov	r3, r8
 800a52c:	22fb      	movs	r2, #251	; 0xfb
 800a52e:	4649      	mov	r1, r9
 800a530:	4638      	mov	r0, r7
 800a532:	f020 fbcb 	bl	802accc <iprintf>
 800a536:	e01c      	b.n	800a572 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a538:	4643      	mov	r3, r8
 800a53a:	22fc      	movs	r2, #252	; 0xfc
 800a53c:	4926      	ldr	r1, [pc, #152]	; (800a5d8 <tcp_input+0x22c>)
 800a53e:	4638      	mov	r0, r7
 800a540:	f020 fbc4 	bl	802accc <iprintf>
 800a544:	e018      	b.n	800a578 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a546:	4643      	mov	r3, r8
 800a548:	22fd      	movs	r2, #253	; 0xfd
 800a54a:	4924      	ldr	r1, [pc, #144]	; (800a5dc <tcp_input+0x230>)
 800a54c:	4638      	mov	r0, r7
 800a54e:	f020 fbbd 	bl	802accc <iprintf>
 800a552:	e014      	b.n	800a57e <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800a554:	4b10      	ldr	r3, [pc, #64]	; (800a598 <tcp_input+0x1ec>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	8b21      	ldrh	r1, [r4, #24]
 800a55a:	881a      	ldrh	r2, [r3, #0]
 800a55c:	4291      	cmp	r1, r2
 800a55e:	d041      	beq.n	800a5e4 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a560:	68e3      	ldr	r3, [r4, #12]
 800a562:	4626      	mov	r6, r4
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8527 	beq.w	800afb8 <tcp_input+0xc0c>
 800a56a:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a56c:	7d23      	ldrb	r3, [r4, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d0db      	beq.n	800a52a <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a572:	7d23      	ldrb	r3, [r4, #20]
 800a574:	2b0a      	cmp	r3, #10
 800a576:	d0df      	beq.n	800a538 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a578:	7d23      	ldrb	r3, [r4, #20]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d0e3      	beq.n	800a546 <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a57e:	7a22      	ldrb	r2, [r4, #8]
 800a580:	2a00      	cmp	r2, #0
 800a582:	d0e7      	beq.n	800a554 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a584:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <tcp_input+0x1fc>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a58c:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	429a      	cmp	r2, r3
 800a592:	d0df      	beq.n	800a554 <tcp_input+0x1a8>
 800a594:	e7e4      	b.n	800a560 <tcp_input+0x1b4>
 800a596:	bf00      	nop
 800a598:	20010774 	.word	0x20010774
 800a59c:	0802d634 	.word	0x0802d634
 800a5a0:	0802d850 	.word	0x0802d850
 800a5a4:	0802bc48 	.word	0x0802bc48
 800a5a8:	20010d98 	.word	0x20010d98
 800a5ac:	20010780 	.word	0x20010780
 800a5b0:	2001077c 	.word	0x2001077c
 800a5b4:	20010778 	.word	0x20010778
 800a5b8:	0802d884 	.word	0x0802d884
 800a5bc:	2001076c 	.word	0x2001076c
 800a5c0:	20010748 	.word	0x20010748
 800a5c4:	2001074c 	.word	0x2001074c
 800a5c8:	20010782 	.word	0x20010782
 800a5cc:	20014634 	.word	0x20014634
 800a5d0:	0802d868 	.word	0x0802d868
 800a5d4:	0802d878 	.word	0x0802d878
 800a5d8:	0802d8cc 	.word	0x0802d8cc
 800a5dc:	0802d8f8 	.word	0x0802d8f8
 800a5e0:	0802d8a4 	.word	0x0802d8a4
    if (pcb->remote_port == tcphdr->src &&
 800a5e4:	8ae2      	ldrh	r2, [r4, #22]
 800a5e6:	885b      	ldrh	r3, [r3, #2]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d1b9      	bne.n	800a560 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800a5ec:	6862      	ldr	r2, [r4, #4]
 800a5ee:	4b8f      	ldr	r3, [pc, #572]	; (800a82c <tcp_input+0x480>)
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d1b4      	bne.n	800a560 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	4b8c      	ldr	r3, [pc, #560]	; (800a82c <tcp_input+0x480>)
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d1af      	bne.n	800a560 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a600:	68e3      	ldr	r3, [r4, #12]
 800a602:	42a3      	cmp	r3, r4
 800a604:	d04d      	beq.n	800a6a2 <tcp_input+0x2f6>
      if (prev != NULL) {
 800a606:	b146      	cbz	r6, 800a61a <tcp_input+0x26e>
        prev->next = pcb->next;
 800a608:	68e3      	ldr	r3, [r4, #12]
 800a60a:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800a60c:	4b88      	ldr	r3, [pc, #544]	; (800a830 <tcp_input+0x484>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800a612:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a614:	68e3      	ldr	r3, [r4, #12]
 800a616:	42a3      	cmp	r3, r4
 800a618:	d04d      	beq.n	800a6b6 <tcp_input+0x30a>
    inseg.next = NULL;
 800a61a:	4a86      	ldr	r2, [pc, #536]	; (800a834 <tcp_input+0x488>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800a620:	8929      	ldrh	r1, [r5, #8]
 800a622:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800a624:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a626:	4984      	ldr	r1, [pc, #528]	; (800a838 <tcp_input+0x48c>)
 800a628:	6809      	ldr	r1, [r1, #0]
 800a62a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800a62c:	4a83      	ldr	r2, [pc, #524]	; (800a83c <tcp_input+0x490>)
 800a62e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800a630:	4a83      	ldr	r2, [pc, #524]	; (800a840 <tcp_input+0x494>)
 800a632:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800a634:	4a83      	ldr	r2, [pc, #524]	; (800a844 <tcp_input+0x498>)
 800a636:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a638:	4b83      	ldr	r3, [pc, #524]	; (800a848 <tcp_input+0x49c>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f013 0f08 	tst.w	r3, #8
 800a640:	f040 817c 	bne.w	800a93c <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800a644:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a646:	b16b      	cbz	r3, 800a664 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a648:	4620      	mov	r0, r4
 800a64a:	f7fe fd7d 	bl	8009148 <tcp_process_refused_data>
 800a64e:	f110 0f0d 	cmn.w	r0, #13
 800a652:	f000 8178 	beq.w	800a946 <tcp_input+0x59a>
 800a656:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a658:	b123      	cbz	r3, 800a664 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a65a:	4b7c      	ldr	r3, [pc, #496]	; (800a84c <tcp_input+0x4a0>)
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f040 8171 	bne.w	800a946 <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800a664:	4b7a      	ldr	r3, [pc, #488]	; (800a850 <tcp_input+0x4a4>)
 800a666:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a668:	4b77      	ldr	r3, [pc, #476]	; (800a848 <tcp_input+0x49c>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	f013 0f04 	tst.w	r3, #4
 800a670:	f000 81aa 	beq.w	800a9c8 <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800a674:	7d21      	ldrb	r1, [r4, #20]
 800a676:	2902      	cmp	r1, #2
 800a678:	f000 816b 	beq.w	800a952 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800a67c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a67e:	4b75      	ldr	r3, [pc, #468]	; (800a854 <tcp_input+0x4a8>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	f000 818e 	beq.w	800a9a4 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a688:	1a9b      	subs	r3, r3, r2
 800a68a:	f100 8167 	bmi.w	800a95c <tcp_input+0x5b0>
 800a68e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	2b00      	cmp	r3, #0
 800a694:	f300 8162 	bgt.w	800a95c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800a698:	8b63      	ldrh	r3, [r4, #26]
 800a69a:	f043 0302 	orr.w	r3, r3, #2
 800a69e:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800a6a0:	e15c      	b.n	800a95c <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a6a2:	4b6d      	ldr	r3, [pc, #436]	; (800a858 <tcp_input+0x4ac>)
 800a6a4:	f240 120d 	movw	r2, #269	; 0x10d
 800a6a8:	496c      	ldr	r1, [pc, #432]	; (800a85c <tcp_input+0x4b0>)
 800a6aa:	486d      	ldr	r0, [pc, #436]	; (800a860 <tcp_input+0x4b4>)
 800a6ac:	f020 fb0e 	bl	802accc <iprintf>
      if (prev != NULL) {
 800a6b0:	2e00      	cmp	r6, #0
 800a6b2:	d1a9      	bne.n	800a608 <tcp_input+0x25c>
 800a6b4:	e7ae      	b.n	800a614 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a6b6:	4b68      	ldr	r3, [pc, #416]	; (800a858 <tcp_input+0x4ac>)
 800a6b8:	f240 1215 	movw	r2, #277	; 0x115
 800a6bc:	4969      	ldr	r1, [pc, #420]	; (800a864 <tcp_input+0x4b8>)
 800a6be:	4868      	ldr	r0, [pc, #416]	; (800a860 <tcp_input+0x4b4>)
 800a6c0:	f020 fb04 	bl	802accc <iprintf>
 800a6c4:	e7a9      	b.n	800a61a <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a6c6:	4643      	mov	r3, r8
 800a6c8:	f240 121f 	movw	r2, #287	; 0x11f
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f020 fafc 	bl	802accc <iprintf>
 800a6d4:	e00b      	b.n	800a6ee <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800a6d6:	4b58      	ldr	r3, [pc, #352]	; (800a838 <tcp_input+0x48c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	8819      	ldrh	r1, [r3, #0]
 800a6dc:	8b22      	ldrh	r2, [r4, #24]
 800a6de:	428a      	cmp	r2, r1
 800a6e0:	d011      	beq.n	800a706 <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6e2:	68e4      	ldr	r4, [r4, #12]
 800a6e4:	2c00      	cmp	r4, #0
 800a6e6:	d051      	beq.n	800a78c <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a6e8:	7d23      	ldrb	r3, [r4, #20]
 800a6ea:	2b0a      	cmp	r3, #10
 800a6ec:	d1eb      	bne.n	800a6c6 <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a6ee:	7a22      	ldrb	r2, [r4, #8]
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d0f0      	beq.n	800a6d6 <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a6f4:	4b4d      	ldr	r3, [pc, #308]	; (800a82c <tcp_input+0x480>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6fc:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	429a      	cmp	r2, r3
 800a702:	d0e8      	beq.n	800a6d6 <tcp_input+0x32a>
 800a704:	e7ed      	b.n	800a6e2 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800a706:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a708:	8ae3      	ldrh	r3, [r4, #22]
 800a70a:	4283      	cmp	r3, r0
 800a70c:	d1e9      	bne.n	800a6e2 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800a70e:	6862      	ldr	r2, [r4, #4]
 800a710:	4b46      	ldr	r3, [pc, #280]	; (800a82c <tcp_input+0x480>)
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	429a      	cmp	r2, r3
 800a716:	d1e4      	bne.n	800a6e2 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a718:	6822      	ldr	r2, [r4, #0]
 800a71a:	4b44      	ldr	r3, [pc, #272]	; (800a82c <tcp_input+0x480>)
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d1df      	bne.n	800a6e2 <tcp_input+0x336>
  if (flags & TCP_RST) {
 800a722:	4b49      	ldr	r3, [pc, #292]	; (800a848 <tcp_input+0x49c>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f013 0f04 	tst.w	r3, #4
 800a72a:	d10e      	bne.n	800a74a <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800a72c:	f013 0f02 	tst.w	r3, #2
 800a730:	d01d      	beq.n	800a76e <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a732:	4b48      	ldr	r3, [pc, #288]	; (800a854 <tcp_input+0x4a8>)
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	d403      	bmi.n	800a744 <tcp_input+0x398>
 800a73c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800a73e:	1b9b      	subs	r3, r3, r6
 800a740:	2b00      	cmp	r3, #0
 800a742:	dd06      	ble.n	800a752 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800a744:	4b41      	ldr	r3, [pc, #260]	; (800a84c <tcp_input+0x4a0>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	b9c3      	cbnz	r3, 800a77c <tcp_input+0x3d0>
        pbuf_free(p);
 800a74a:	4628      	mov	r0, r5
 800a74c:	f7fd fb16 	bl	8007d7c <pbuf_free>
        return;
 800a750:	e63a      	b.n	800a3c8 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a752:	4b45      	ldr	r3, [pc, #276]	; (800a868 <tcp_input+0x4bc>)
 800a754:	4e3d      	ldr	r6, [pc, #244]	; (800a84c <tcp_input+0x4a0>)
 800a756:	8836      	ldrh	r6, [r6, #0]
 800a758:	9102      	str	r1, [sp, #8]
 800a75a:	9001      	str	r0, [sp, #4]
 800a75c:	1f19      	subs	r1, r3, #4
 800a75e:	9100      	str	r1, [sp, #0]
 800a760:	4432      	add	r2, r6
 800a762:	4942      	ldr	r1, [pc, #264]	; (800a86c <tcp_input+0x4c0>)
 800a764:	6809      	ldr	r1, [r1, #0]
 800a766:	4620      	mov	r0, r4
 800a768:	f001 fbda 	bl	800bf20 <tcp_rst>
      return;
 800a76c:	e7ed      	b.n	800a74a <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800a76e:	f013 0f01 	tst.w	r3, #1
 800a772:	d0e7      	beq.n	800a744 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800a774:	4b3e      	ldr	r3, [pc, #248]	; (800a870 <tcp_input+0x4c4>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6223      	str	r3, [r4, #32]
 800a77a:	e7e3      	b.n	800a744 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800a77c:	8b63      	ldrh	r3, [r4, #26]
 800a77e:	f043 0302 	orr.w	r3, r3, #2
 800a782:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a784:	4620      	mov	r0, r4
 800a786:	f001 fc4d 	bl	800c024 <tcp_output>
 800a78a:	e7de      	b.n	800a74a <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a78c:	4b39      	ldr	r3, [pc, #228]	; (800a874 <tcp_input+0x4c8>)
 800a78e:	f8d3 c000 	ldr.w	ip, [r3]
 800a792:	f1bc 0f00 	cmp.w	ip, #0
 800a796:	f000 8402 	beq.w	800af9e <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a79a:	4b24      	ldr	r3, [pc, #144]	; (800a82c <tcp_input+0x480>)
 800a79c:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800a79e:	4a26      	ldr	r2, [pc, #152]	; (800a838 <tcp_input+0x48c>)
 800a7a0:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a7a2:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7a4:	4664      	mov	r4, ip
    prev = NULL;
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	e009      	b.n	800a7be <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800a7aa:	8ae2      	ldrh	r2, [r4, #22]
 800a7ac:	8843      	ldrh	r3, [r0, #2]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d00f      	beq.n	800a7d2 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 83f1 	beq.w	800af9e <tcp_input+0xbf2>
 800a7bc:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7be:	7a22      	ldrb	r2, [r4, #8]
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	d0f2      	beq.n	800a7aa <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7c4:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800a7c8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d0ec      	beq.n	800a7aa <tcp_input+0x3fe>
 800a7d0:	e7ef      	b.n	800a7b2 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	42bb      	cmp	r3, r7
 800a7d6:	d001      	beq.n	800a7dc <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1ea      	bne.n	800a7b2 <tcp_input+0x406>
      if (prev != NULL) {
 800a7dc:	b129      	cbz	r1, 800a7ea <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a7de:	68e3      	ldr	r3, [r4, #12]
 800a7e0:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a7e2:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a7e6:	4b23      	ldr	r3, [pc, #140]	; (800a874 <tcp_input+0x4c8>)
 800a7e8:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a7ea:	4b17      	ldr	r3, [pc, #92]	; (800a848 <tcp_input+0x49c>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	f013 0f04 	tst.w	r3, #4
 800a7f2:	d105      	bne.n	800a800 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800a7f4:	f013 0f10 	tst.w	r3, #16
 800a7f8:	d106      	bne.n	800a808 <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800a7fa:	f013 0f02 	tst.w	r3, #2
 800a7fe:	d13b      	bne.n	800a878 <tcp_input+0x4cc>
      pbuf_free(p);
 800a800:	4628      	mov	r0, r5
 800a802:	f7fd fabb 	bl	8007d7c <pbuf_free>
      return;
 800a806:	e5df      	b.n	800a3c8 <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a808:	4b17      	ldr	r3, [pc, #92]	; (800a868 <tcp_input+0x4bc>)
 800a80a:	4a10      	ldr	r2, [pc, #64]	; (800a84c <tcp_input+0x4a0>)
 800a80c:	8811      	ldrh	r1, [r2, #0]
 800a80e:	4a11      	ldr	r2, [pc, #68]	; (800a854 <tcp_input+0x4a8>)
 800a810:	6812      	ldr	r2, [r2, #0]
 800a812:	8806      	ldrh	r6, [r0, #0]
 800a814:	9602      	str	r6, [sp, #8]
 800a816:	8840      	ldrh	r0, [r0, #2]
 800a818:	9001      	str	r0, [sp, #4]
 800a81a:	1f18      	subs	r0, r3, #4
 800a81c:	9000      	str	r0, [sp, #0]
 800a81e:	440a      	add	r2, r1
 800a820:	4912      	ldr	r1, [pc, #72]	; (800a86c <tcp_input+0x4c0>)
 800a822:	6809      	ldr	r1, [r1, #0]
 800a824:	4620      	mov	r0, r4
 800a826:	f001 fb7b 	bl	800bf20 <tcp_rst>
 800a82a:	e7e9      	b.n	800a800 <tcp_input+0x454>
 800a82c:	20010d98 	.word	0x20010d98
 800a830:	20014634 	.word	0x20014634
 800a834:	20010750 	.word	0x20010750
 800a838:	20010774 	.word	0x20010774
 800a83c:	20010764 	.word	0x20010764
 800a840:	20010768 	.word	0x20010768
 800a844:	20010760 	.word	0x20010760
 800a848:	2001074c 	.word	0x2001074c
 800a84c:	20010782 	.word	0x20010782
 800a850:	20014648 	.word	0x20014648
 800a854:	2001076c 	.word	0x2001076c
 800a858:	0802d634 	.word	0x0802d634
 800a85c:	0802d920 	.word	0x0802d920
 800a860:	0802bc48 	.word	0x0802bc48
 800a864:	0802d94c 	.word	0x0802d94c
 800a868:	20010dac 	.word	0x20010dac
 800a86c:	20010748 	.word	0x20010748
 800a870:	20014638 	.word	0x20014638
 800a874:	2001463c 	.word	0x2001463c
    npcb = tcp_alloc(pcb->prio);
 800a878:	7d60      	ldrb	r0, [r4, #21]
 800a87a:	f7fe faaf 	bl	8008ddc <tcp_alloc>
    if (npcb == NULL) {
 800a87e:	4606      	mov	r6, r0
 800a880:	2800      	cmp	r0, #0
 800a882:	d04c      	beq.n	800a91e <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a884:	4ba9      	ldr	r3, [pc, #676]	; (800ab2c <tcp_input+0x780>)
 800a886:	695a      	ldr	r2, [r3, #20]
 800a888:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800a88e:	8ae3      	ldrh	r3, [r4, #22]
 800a890:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800a892:	4fa7      	ldr	r7, [pc, #668]	; (800ab30 <tcp_input+0x784>)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a89a:	2303      	movs	r3, #3
 800a89c:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800a89e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800ab6c <tcp_input+0x7c0>
 800a8a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a8aa:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a8ac:	f7fe f80e 	bl	80088cc <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800a8b0:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a8b2:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800a8b4:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a8b6:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a8b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800a8c4:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a8c6:	7a63      	ldrb	r3, [r4, #9]
 800a8c8:	f003 030c 	and.w	r3, r3, #12
 800a8cc:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a8ce:	7a23      	ldrb	r3, [r4, #8]
 800a8d0:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800a8d2:	4b98      	ldr	r3, [pc, #608]	; (800ab34 <tcp_input+0x788>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	60f2      	str	r2, [r6, #12]
 800a8d8:	601e      	str	r6, [r3, #0]
 800a8da:	f001 fead 	bl	800c638 <tcp_timer_needed>
 800a8de:	4b96      	ldr	r3, [pc, #600]	; (800ab38 <tcp_input+0x78c>)
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7fe ff99 	bl	800981c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	89db      	ldrh	r3, [r3, #14]
 800a8ee:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a8f2:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8f6:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800a8f8:	1d34      	adds	r4, r6, #4
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f004 fb56 	bl	800efac <ip4_route>
 800a900:	4601      	mov	r1, r0
 800a902:	4622      	mov	r2, r4
 800a904:	4638      	mov	r0, r7
 800a906:	f7fd fffd 	bl	8008904 <tcp_eff_send_mss_netif>
 800a90a:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a90c:	2112      	movs	r1, #18
 800a90e:	4630      	mov	r0, r6
 800a910:	f001 f958 	bl	800bbc4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a914:	b968      	cbnz	r0, 800a932 <tcp_input+0x586>
    tcp_output(npcb);
 800a916:	4630      	mov	r0, r6
 800a918:	f001 fb84 	bl	800c024 <tcp_output>
 800a91c:	e770      	b.n	800a800 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a91e:	69a3      	ldr	r3, [r4, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f43f af6d 	beq.w	800a800 <tcp_input+0x454>
 800a926:	f04f 32ff 	mov.w	r2, #4294967295
 800a92a:	2100      	movs	r1, #0
 800a92c:	6920      	ldr	r0, [r4, #16]
 800a92e:	4798      	blx	r3
 800a930:	e766      	b.n	800a800 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800a932:	2100      	movs	r1, #0
 800a934:	4630      	mov	r0, r6
 800a936:	f7fe f947 	bl	8008bc8 <tcp_abandon>
      return;
 800a93a:	e761      	b.n	800a800 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800a93c:	7b6b      	ldrb	r3, [r5, #13]
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	736b      	strb	r3, [r5, #13]
 800a944:	e67e      	b.n	800a644 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800a946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a948:	b9e3      	cbnz	r3, 800a984 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800a94a:	4620      	mov	r0, r4
 800a94c:	f001 fb30 	bl	800bfb0 <tcp_send_empty_ack>
 800a950:	e018      	b.n	800a984 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800a952:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a954:	4b79      	ldr	r3, [pc, #484]	; (800ab3c <tcp_input+0x790>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d02b      	beq.n	800a9b4 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800a95c:	4b78      	ldr	r3, [pc, #480]	; (800ab40 <tcp_input+0x794>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f013 0f08 	tst.w	r3, #8
 800a964:	f000 8295 	beq.w	800ae92 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a968:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a96c:	b11b      	cbz	r3, 800a976 <tcp_input+0x5ca>
 800a96e:	f06f 010d 	mvn.w	r1, #13
 800a972:	6920      	ldr	r0, [r4, #16]
 800a974:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a976:	4621      	mov	r1, r4
 800a978:	486e      	ldr	r0, [pc, #440]	; (800ab34 <tcp_input+0x788>)
 800a97a:	f7fe f8bd 	bl	8008af8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a97e:	4620      	mov	r0, r4
 800a980:	f7fd fe60 	bl	8008644 <tcp_free>
    tcp_input_pcb = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	4a6f      	ldr	r2, [pc, #444]	; (800ab44 <tcp_input+0x798>)
 800a988:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800a98a:	4a6f      	ldr	r2, [pc, #444]	; (800ab48 <tcp_input+0x79c>)
 800a98c:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800a98e:	4b6f      	ldr	r3, [pc, #444]	; (800ab4c <tcp_input+0x7a0>)
 800a990:	6858      	ldr	r0, [r3, #4]
 800a992:	2800      	cmp	r0, #0
 800a994:	f43f ad18 	beq.w	800a3c8 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800a998:	f7fd f9f0 	bl	8007d7c <pbuf_free>
      inseg.p = NULL;
 800a99c:	4b6b      	ldr	r3, [pc, #428]	; (800ab4c <tcp_input+0x7a0>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	e511      	b.n	800a3c8 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a9a4:	b931      	cbnz	r1, 800a9b4 <tcp_input+0x608>
 800a9a6:	4b6a      	ldr	r3, [pc, #424]	; (800ab50 <tcp_input+0x7a4>)
 800a9a8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a9ac:	4969      	ldr	r1, [pc, #420]	; (800ab54 <tcp_input+0x7a8>)
 800a9ae:	486a      	ldr	r0, [pc, #424]	; (800ab58 <tcp_input+0x7ac>)
 800a9b0:	f020 f98c 	bl	802accc <iprintf>
      recv_flags |= TF_RESET;
 800a9b4:	4a62      	ldr	r2, [pc, #392]	; (800ab40 <tcp_input+0x794>)
 800a9b6:	7813      	ldrb	r3, [r2, #0]
 800a9b8:	f043 0308 	orr.w	r3, r3, #8
 800a9bc:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a9be:	8b63      	ldrh	r3, [r4, #26]
 800a9c0:	f023 0301 	bic.w	r3, r3, #1
 800a9c4:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800a9c6:	e7c9      	b.n	800a95c <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a9c8:	f013 0f02 	tst.w	r3, #2
 800a9cc:	d004      	beq.n	800a9d8 <tcp_input+0x62c>
 800a9ce:	7d23      	ldrb	r3, [r4, #20]
 800a9d0:	3b02      	subs	r3, #2
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d81c      	bhi.n	800aa12 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a9d8:	8b63      	ldrh	r3, [r4, #26]
 800a9da:	f013 0f10 	tst.w	r3, #16
 800a9de:	d102      	bne.n	800a9e6 <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800a9e0:	4b5e      	ldr	r3, [pc, #376]	; (800ab5c <tcp_input+0x7b0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a9ec:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7fe ff13 	bl	800981c <tcp_parseopt>
  switch (pcb->state) {
 800a9f6:	7d23      	ldrb	r3, [r4, #20]
 800a9f8:	3b02      	subs	r3, #2
 800a9fa:	2b07      	cmp	r3, #7
 800a9fc:	d8ae      	bhi.n	800a95c <tcp_input+0x5b0>
 800a9fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aa02:	000d      	.short	0x000d
 800aa04:	014e00d0 	.word	0x014e00d0
 800aa08:	01b0015e 	.word	0x01b0015e
 800aa0c:	01dc014e 	.word	0x01dc014e
 800aa10:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800aa12:	8b63      	ldrh	r3, [r4, #26]
 800aa14:	f043 0302 	orr.w	r3, r3, #2
 800aa18:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800aa1a:	e79f      	b.n	800a95c <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aa1c:	4b50      	ldr	r3, [pc, #320]	; (800ab60 <tcp_input+0x7b4>)
 800aa1e:	781a      	ldrb	r2, [r3, #0]
 800aa20:	f002 0312 	and.w	r3, r2, #18
 800aa24:	2b12      	cmp	r3, #18
 800aa26:	d020      	beq.n	800aa6a <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800aa28:	f012 0f10 	tst.w	r2, #16
 800aa2c:	d096      	beq.n	800a95c <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa2e:	4b40      	ldr	r3, [pc, #256]	; (800ab30 <tcp_input+0x784>)
 800aa30:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa32:	4b4c      	ldr	r3, [pc, #304]	; (800ab64 <tcp_input+0x7b8>)
 800aa34:	4a4c      	ldr	r2, [pc, #304]	; (800ab68 <tcp_input+0x7bc>)
 800aa36:	8810      	ldrh	r0, [r2, #0]
 800aa38:	4a4c      	ldr	r2, [pc, #304]	; (800ab6c <tcp_input+0x7c0>)
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	880d      	ldrh	r5, [r1, #0]
 800aa3e:	9502      	str	r5, [sp, #8]
 800aa40:	8849      	ldrh	r1, [r1, #2]
 800aa42:	9101      	str	r1, [sp, #4]
 800aa44:	1f19      	subs	r1, r3, #4
 800aa46:	9100      	str	r1, [sp, #0]
 800aa48:	4402      	add	r2, r0
 800aa4a:	493c      	ldr	r1, [pc, #240]	; (800ab3c <tcp_input+0x790>)
 800aa4c:	6809      	ldr	r1, [r1, #0]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f001 fa66 	bl	800bf20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800aa54:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800aa58:	2b05      	cmp	r3, #5
 800aa5a:	f63f af7f 	bhi.w	800a95c <tcp_input+0x5b0>
          pcb->rtime = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800aa62:	4620      	mov	r0, r4
 800aa64:	f001 fcc6 	bl	800c3f4 <tcp_rexmit_rto>
 800aa68:	e778      	b.n	800a95c <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800aa6a:	4b34      	ldr	r3, [pc, #208]	; (800ab3c <tcp_input+0x790>)
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aa70:	3301      	adds	r3, #1
 800aa72:	428b      	cmp	r3, r1
 800aa74:	d1d8      	bne.n	800aa28 <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800aa76:	4b3d      	ldr	r3, [pc, #244]	; (800ab6c <tcp_input+0x7c0>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aa7e:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800aa80:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800aa82:	4a2b      	ldr	r2, [pc, #172]	; (800ab30 <tcp_input+0x784>)
 800aa84:	6812      	ldr	r2, [r2, #0]
 800aa86:	89d2      	ldrh	r2, [r2, #14]
 800aa88:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aa8c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800aa90:	3b01      	subs	r3, #1
 800aa92:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800aa94:	2304      	movs	r3, #4
 800aa96:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800aa98:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800aa9a:	18e5      	adds	r5, r4, r3
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f004 fa85 	bl	800efac <ip4_route>
 800aaa2:	4601      	mov	r1, r0
 800aaa4:	462a      	mov	r2, r5
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7fd ff2c 	bl	8008904 <tcp_eff_send_mss_netif>
 800aaac:	4603      	mov	r3, r0
 800aaae:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aab0:	0041      	lsls	r1, r0, #1
 800aab2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aab6:	428a      	cmp	r2, r1
 800aab8:	bf38      	it	cc
 800aaba:	460a      	movcc	r2, r1
 800aabc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800aac0:	d92b      	bls.n	800ab1a <tcp_input+0x76e>
 800aac2:	0083      	lsls	r3, r0, #2
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aaca:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d04e      	beq.n	800ab70 <tcp_input+0x7c4>
        --pcb->snd_queuelen;
 800aad2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800aad6:	3b01      	subs	r3, #1
 800aad8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800aadc:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800aade:	2d00      	cmp	r5, #0
 800aae0:	d04e      	beq.n	800ab80 <tcp_input+0x7d4>
          pcb->unacked = rseg->next;
 800aae2:	682b      	ldr	r3, [r5, #0]
 800aae4:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800aae6:	4628      	mov	r0, r5
 800aae8:	f7fd fe38 	bl	800875c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800aaec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d053      	beq.n	800ab9a <tcp_input+0x7ee>
          pcb->rtime = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800aaf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aafa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800aafe:	b13b      	cbz	r3, 800ab10 <tcp_input+0x764>
 800ab00:	2200      	movs	r2, #0
 800ab02:	4621      	mov	r1, r4
 800ab04:	6920      	ldr	r0, [r4, #16]
 800ab06:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800ab08:	f110 0f0d 	cmn.w	r0, #13
 800ab0c:	f43f af3a 	beq.w	800a984 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800ab10:	8b63      	ldrh	r3, [r4, #26]
 800ab12:	f043 0302 	orr.w	r3, r3, #2
 800ab16:	8363      	strh	r3, [r4, #26]
 800ab18:	e720      	b.n	800a95c <tcp_input+0x5b0>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ab1e:	4291      	cmp	r1, r2
 800ab20:	bf86      	itte	hi
 800ab22:	0043      	lslhi	r3, r0, #1
 800ab24:	b29b      	uxthhi	r3, r3
 800ab26:	f241 131c 	movwls	r3, #4380	; 0x111c
 800ab2a:	e7cc      	b.n	800aac6 <tcp_input+0x71a>
 800ab2c:	20010d98 	.word	0x20010d98
 800ab30:	20010774 	.word	0x20010774
 800ab34:	20014634 	.word	0x20014634
 800ab38:	20014630 	.word	0x20014630
 800ab3c:	20010748 	.word	0x20010748
 800ab40:	20010768 	.word	0x20010768
 800ab44:	20014648 	.word	0x20014648
 800ab48:	20010764 	.word	0x20010764
 800ab4c:	20010750 	.word	0x20010750
 800ab50:	0802d634 	.word	0x0802d634
 800ab54:	0802d9a8 	.word	0x0802d9a8
 800ab58:	0802bc48 	.word	0x0802bc48
 800ab5c:	20014638 	.word	0x20014638
 800ab60:	2001074c 	.word	0x2001074c
 800ab64:	20010dac 	.word	0x20010dac
 800ab68:	20010782 	.word	0x20010782
 800ab6c:	2001076c 	.word	0x2001076c
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ab70:	4ba4      	ldr	r3, [pc, #656]	; (800ae04 <tcp_input+0xa58>)
 800ab72:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ab76:	49a4      	ldr	r1, [pc, #656]	; (800ae08 <tcp_input+0xa5c>)
 800ab78:	48a4      	ldr	r0, [pc, #656]	; (800ae0c <tcp_input+0xa60>)
 800ab7a:	f020 f8a7 	bl	802accc <iprintf>
 800ab7e:	e7a8      	b.n	800aad2 <tcp_input+0x726>
          rseg = pcb->unsent;
 800ab80:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ab82:	b115      	cbz	r5, 800ab8a <tcp_input+0x7de>
          pcb->unsent = rseg->next;
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	66e3      	str	r3, [r4, #108]	; 0x6c
 800ab88:	e7ad      	b.n	800aae6 <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ab8a:	4b9e      	ldr	r3, [pc, #632]	; (800ae04 <tcp_input+0xa58>)
 800ab8c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ab90:	499f      	ldr	r1, [pc, #636]	; (800ae10 <tcp_input+0xa64>)
 800ab92:	489e      	ldr	r0, [pc, #632]	; (800ae0c <tcp_input+0xa60>)
 800ab94:	f020 f89a 	bl	802accc <iprintf>
 800ab98:	e7f4      	b.n	800ab84 <tcp_input+0x7d8>
          pcb->rtime = -1;
 800ab9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab9e:	8623      	strh	r3, [r4, #48]	; 0x30
 800aba0:	e7ab      	b.n	800aafa <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 800aba2:	4b9c      	ldr	r3, [pc, #624]	; (800ae14 <tcp_input+0xa68>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	f013 0f10 	tst.w	r3, #16
 800abaa:	d069      	beq.n	800ac80 <tcp_input+0x8d4>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800abac:	4b9a      	ldr	r3, [pc, #616]	; (800ae18 <tcp_input+0xa6c>)
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abb2:	43db      	mvns	r3, r3
 800abb4:	42cb      	cmn	r3, r1
 800abb6:	d403      	bmi.n	800abc0 <tcp_input+0x814>
 800abb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800abba:	1acb      	subs	r3, r1, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dd11      	ble.n	800abe4 <tcp_input+0x838>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abc0:	4b96      	ldr	r3, [pc, #600]	; (800ae1c <tcp_input+0xa70>)
 800abc2:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abc4:	4b96      	ldr	r3, [pc, #600]	; (800ae20 <tcp_input+0xa74>)
 800abc6:	4a97      	ldr	r2, [pc, #604]	; (800ae24 <tcp_input+0xa78>)
 800abc8:	8815      	ldrh	r5, [r2, #0]
 800abca:	4a97      	ldr	r2, [pc, #604]	; (800ae28 <tcp_input+0xa7c>)
 800abcc:	6812      	ldr	r2, [r2, #0]
 800abce:	8806      	ldrh	r6, [r0, #0]
 800abd0:	9602      	str	r6, [sp, #8]
 800abd2:	8840      	ldrh	r0, [r0, #2]
 800abd4:	9001      	str	r0, [sp, #4]
 800abd6:	1f18      	subs	r0, r3, #4
 800abd8:	9000      	str	r0, [sp, #0]
 800abda:	442a      	add	r2, r5
 800abdc:	4620      	mov	r0, r4
 800abde:	f001 f99f 	bl	800bf20 <tcp_rst>
 800abe2:	e6bb      	b.n	800a95c <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800abe4:	2304      	movs	r3, #4
 800abe6:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800abe8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800abea:	2b00      	cmp	r3, #0
 800abec:	d03b      	beq.n	800ac66 <tcp_input+0x8ba>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	b34b      	cbz	r3, 800ac46 <tcp_input+0x89a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800abf2:	2200      	movs	r2, #0
 800abf4:	4621      	mov	r1, r4
 800abf6:	6920      	ldr	r0, [r4, #16]
 800abf8:	4798      	blx	r3
          if (err != ERR_OK) {
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d12f      	bne.n	800ac5e <tcp_input+0x8b2>
          tcp_receive(pcb);
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7fe ff4a 	bl	8009a98 <tcp_receive>
          if (recv_acked != 0) {
 800ac04:	4b89      	ldr	r3, [pc, #548]	; (800ae2c <tcp_input+0xa80>)
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b113      	cbz	r3, 800ac10 <tcp_input+0x864>
            recv_acked--;
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	4a87      	ldr	r2, [pc, #540]	; (800ae2c <tcp_input+0xa80>)
 800ac0e:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac10:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800ac12:	0059      	lsls	r1, r3, #1
 800ac14:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac18:	428a      	cmp	r2, r1
 800ac1a:	bf38      	it	cc
 800ac1c:	460a      	movcc	r2, r1
 800ac1e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800ac22:	d924      	bls.n	800ac6e <tcp_input+0x8c2>
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ac2c:	4b80      	ldr	r3, [pc, #512]	; (800ae30 <tcp_input+0xa84>)
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f013 0f20 	tst.w	r3, #32
 800ac34:	f43f ae92 	beq.w	800a95c <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800ac38:	8b63      	ldrh	r3, [r4, #26]
 800ac3a:	f043 0302 	orr.w	r3, r3, #2
 800ac3e:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800ac40:	2307      	movs	r3, #7
 800ac42:	7523      	strb	r3, [r4, #20]
 800ac44:	e68a      	b.n	800a95c <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ac46:	4b6f      	ldr	r3, [pc, #444]	; (800ae04 <tcp_input+0xa58>)
 800ac48:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ac4c:	4979      	ldr	r1, [pc, #484]	; (800ae34 <tcp_input+0xa88>)
 800ac4e:	486f      	ldr	r0, [pc, #444]	; (800ae0c <tcp_input+0xa60>)
 800ac50:	f020 f83c 	bl	802accc <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ac54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1ca      	bne.n	800abf2 <tcp_input+0x846>
 800ac5c:	e003      	b.n	800ac66 <tcp_input+0x8ba>
            if (err != ERR_ABRT) {
 800ac5e:	f110 0f0d 	cmn.w	r0, #13
 800ac62:	f43f ae8f 	beq.w	800a984 <tcp_input+0x5d8>
              tcp_abort(pcb);
 800ac66:	4620      	mov	r0, r4
 800ac68:	f7fe f834 	bl	8008cd4 <tcp_abort>
 800ac6c:	e68a      	b.n	800a984 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac6e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ac72:	4291      	cmp	r1, r2
 800ac74:	bf86      	itte	hi
 800ac76:	005b      	lslhi	r3, r3, #1
 800ac78:	b29b      	uxthhi	r3, r3
 800ac7a:	f241 131c 	movwls	r3, #4380	; 0x111c
 800ac7e:	e7d3      	b.n	800ac28 <tcp_input+0x87c>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ac80:	f013 0f02 	tst.w	r3, #2
 800ac84:	f43f ae6a 	beq.w	800a95c <tcp_input+0x5b0>
 800ac88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	4a66      	ldr	r2, [pc, #408]	; (800ae28 <tcp_input+0xa7c>)
 800ac8e:	6812      	ldr	r2, [r2, #0]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	f47f ae63 	bne.w	800a95c <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800ac96:	4620      	mov	r0, r4
 800ac98:	f001 f8be 	bl	800be18 <tcp_rexmit>
 800ac9c:	e65e      	b.n	800a95c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7fe fefa 	bl	8009a98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800aca4:	4b62      	ldr	r3, [pc, #392]	; (800ae30 <tcp_input+0xa84>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f013 0f20 	tst.w	r3, #32
 800acac:	f43f ae56 	beq.w	800a95c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800acb0:	8b63      	ldrh	r3, [r4, #26]
 800acb2:	f043 0302 	orr.w	r3, r3, #2
 800acb6:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800acb8:	2307      	movs	r3, #7
 800acba:	7523      	strb	r3, [r4, #20]
 800acbc:	e64e      	b.n	800a95c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7fe feea 	bl	8009a98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800acc4:	4b5a      	ldr	r3, [pc, #360]	; (800ae30 <tcp_input+0xa84>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f013 0f20 	tst.w	r3, #32
 800accc:	d036      	beq.n	800ad3c <tcp_input+0x990>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acce:	4b51      	ldr	r3, [pc, #324]	; (800ae14 <tcp_input+0xa68>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	f013 0f10 	tst.w	r3, #16
 800acd6:	d004      	beq.n	800ace2 <tcp_input+0x936>
 800acd8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800acda:	4b4f      	ldr	r3, [pc, #316]	; (800ae18 <tcp_input+0xa6c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d006      	beq.n	800acf0 <tcp_input+0x944>
          tcp_ack_now(pcb);
 800ace2:	8b63      	ldrh	r3, [r4, #26]
 800ace4:	f043 0302 	orr.w	r3, r3, #2
 800ace8:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800acea:	2308      	movs	r3, #8
 800acec:	7523      	strb	r3, [r4, #20]
 800acee:	e635      	b.n	800a95c <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f5      	bne.n	800ace2 <tcp_input+0x936>
          tcp_ack_now(pcb);
 800acf6:	8b63      	ldrh	r3, [r4, #26]
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800acfe:	4620      	mov	r0, r4
 800ad00:	f7fd feca 	bl	8008a98 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ad04:	4b4c      	ldr	r3, [pc, #304]	; (800ae38 <tcp_input+0xa8c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	d005      	beq.n	800ad18 <tcp_input+0x96c>
 800ad0c:	b153      	cbz	r3, 800ad24 <tcp_input+0x978>
 800ad0e:	68da      	ldr	r2, [r3, #12]
 800ad10:	42a2      	cmp	r2, r4
 800ad12:	d005      	beq.n	800ad20 <tcp_input+0x974>
 800ad14:	4613      	mov	r3, r2
 800ad16:	e7f9      	b.n	800ad0c <tcp_input+0x960>
 800ad18:	68e2      	ldr	r2, [r4, #12]
 800ad1a:	4b47      	ldr	r3, [pc, #284]	; (800ae38 <tcp_input+0xa8c>)
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	e001      	b.n	800ad24 <tcp_input+0x978>
 800ad20:	68e2      	ldr	r2, [r4, #12]
 800ad22:	60da      	str	r2, [r3, #12]
 800ad24:	4b45      	ldr	r3, [pc, #276]	; (800ae3c <tcp_input+0xa90>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ad2a:	230a      	movs	r3, #10
 800ad2c:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ad2e:	4b44      	ldr	r3, [pc, #272]	; (800ae40 <tcp_input+0xa94>)
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	60e2      	str	r2, [r4, #12]
 800ad34:	601c      	str	r4, [r3, #0]
 800ad36:	f001 fc7f 	bl	800c638 <tcp_timer_needed>
 800ad3a:	e60f      	b.n	800a95c <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad3c:	4b35      	ldr	r3, [pc, #212]	; (800ae14 <tcp_input+0xa68>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f013 0f10 	tst.w	r3, #16
 800ad44:	f43f ae0a 	beq.w	800a95c <tcp_input+0x5b0>
 800ad48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ad4a:	4b33      	ldr	r3, [pc, #204]	; (800ae18 <tcp_input+0xa6c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	f47f ae04 	bne.w	800a95c <tcp_input+0x5b0>
 800ad54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f47f ae00 	bne.w	800a95c <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800ad5c:	2306      	movs	r3, #6
 800ad5e:	7523      	strb	r3, [r4, #20]
 800ad60:	e5fc      	b.n	800a95c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ad62:	4620      	mov	r0, r4
 800ad64:	f7fe fe98 	bl	8009a98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ad68:	4b31      	ldr	r3, [pc, #196]	; (800ae30 <tcp_input+0xa84>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f013 0f20 	tst.w	r3, #32
 800ad70:	f43f adf4 	beq.w	800a95c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800ad74:	8b63      	ldrh	r3, [r4, #26]
 800ad76:	f043 0302 	orr.w	r3, r3, #2
 800ad7a:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f7fd fe8b 	bl	8008a98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ad82:	4b2d      	ldr	r3, [pc, #180]	; (800ae38 <tcp_input+0xa8c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	42a3      	cmp	r3, r4
 800ad88:	d005      	beq.n	800ad96 <tcp_input+0x9ea>
 800ad8a:	b153      	cbz	r3, 800ada2 <tcp_input+0x9f6>
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	42a2      	cmp	r2, r4
 800ad90:	d005      	beq.n	800ad9e <tcp_input+0x9f2>
 800ad92:	4613      	mov	r3, r2
 800ad94:	e7f9      	b.n	800ad8a <tcp_input+0x9de>
 800ad96:	68e2      	ldr	r2, [r4, #12]
 800ad98:	4b27      	ldr	r3, [pc, #156]	; (800ae38 <tcp_input+0xa8c>)
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e001      	b.n	800ada2 <tcp_input+0x9f6>
 800ad9e:	68e2      	ldr	r2, [r4, #12]
 800ada0:	60da      	str	r2, [r3, #12]
 800ada2:	4b26      	ldr	r3, [pc, #152]	; (800ae3c <tcp_input+0xa90>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ada8:	230a      	movs	r3, #10
 800adaa:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800adac:	4b24      	ldr	r3, [pc, #144]	; (800ae40 <tcp_input+0xa94>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	60e2      	str	r2, [r4, #12]
 800adb2:	601c      	str	r4, [r3, #0]
 800adb4:	f001 fc40 	bl	800c638 <tcp_timer_needed>
 800adb8:	e5d0      	b.n	800a95c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800adba:	4620      	mov	r0, r4
 800adbc:	f7fe fe6c 	bl	8009a98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800adc0:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <tcp_input+0xa68>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	f013 0f10 	tst.w	r3, #16
 800adc8:	f43f adc8 	beq.w	800a95c <tcp_input+0x5b0>
 800adcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800adce:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <tcp_input+0xa6c>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	f47f adc2 	bne.w	800a95c <tcp_input+0x5b0>
 800add8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800adda:	2b00      	cmp	r3, #0
 800addc:	f47f adbe 	bne.w	800a95c <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7fd fe59 	bl	8008a98 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ade6:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <tcp_input+0xa8c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	42a3      	cmp	r3, r4
 800adec:	d005      	beq.n	800adfa <tcp_input+0xa4e>
 800adee:	b35b      	cbz	r3, 800ae48 <tcp_input+0xa9c>
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	42a2      	cmp	r2, r4
 800adf4:	d026      	beq.n	800ae44 <tcp_input+0xa98>
 800adf6:	4613      	mov	r3, r2
 800adf8:	e7f9      	b.n	800adee <tcp_input+0xa42>
 800adfa:	68e2      	ldr	r2, [r4, #12]
 800adfc:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <tcp_input+0xa8c>)
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	e022      	b.n	800ae48 <tcp_input+0xa9c>
 800ae02:	bf00      	nop
 800ae04:	0802d634 	.word	0x0802d634
 800ae08:	0802d9c8 	.word	0x0802d9c8
 800ae0c:	0802bc48 	.word	0x0802bc48
 800ae10:	0802d9e0 	.word	0x0802d9e0
 800ae14:	2001074c 	.word	0x2001074c
 800ae18:	20010748 	.word	0x20010748
 800ae1c:	20010774 	.word	0x20010774
 800ae20:	20010dac 	.word	0x20010dac
 800ae24:	20010782 	.word	0x20010782
 800ae28:	2001076c 	.word	0x2001076c
 800ae2c:	20010760 	.word	0x20010760
 800ae30:	20010768 	.word	0x20010768
 800ae34:	0802d9f4 	.word	0x0802d9f4
 800ae38:	20014634 	.word	0x20014634
 800ae3c:	20014630 	.word	0x20014630
 800ae40:	20014644 	.word	0x20014644
 800ae44:	68e2      	ldr	r2, [r4, #12]
 800ae46:	60da      	str	r2, [r3, #12]
 800ae48:	4b61      	ldr	r3, [pc, #388]	; (800afd0 <tcp_input+0xc24>)
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae4e:	230a      	movs	r3, #10
 800ae50:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae52:	4b60      	ldr	r3, [pc, #384]	; (800afd4 <tcp_input+0xc28>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	60e2      	str	r2, [r4, #12]
 800ae58:	601c      	str	r4, [r3, #0]
 800ae5a:	f001 fbed 	bl	800c638 <tcp_timer_needed>
 800ae5e:	e57d      	b.n	800a95c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7fe fe19 	bl	8009a98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae66:	4b5c      	ldr	r3, [pc, #368]	; (800afd8 <tcp_input+0xc2c>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	f013 0f10 	tst.w	r3, #16
 800ae6e:	f43f ad75 	beq.w	800a95c <tcp_input+0x5b0>
 800ae72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ae74:	4b59      	ldr	r3, [pc, #356]	; (800afdc <tcp_input+0xc30>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	f47f ad6f 	bne.w	800a95c <tcp_input+0x5b0>
 800ae7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f47f ad6b 	bne.w	800a95c <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800ae86:	4a56      	ldr	r2, [pc, #344]	; (800afe0 <tcp_input+0xc34>)
 800ae88:	7813      	ldrb	r3, [r2, #0]
 800ae8a:	f043 0310 	orr.w	r3, r3, #16
 800ae8e:	7013      	strb	r3, [r2, #0]
 800ae90:	e564      	b.n	800a95c <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800ae92:	4b54      	ldr	r3, [pc, #336]	; (800afe4 <tcp_input+0xc38>)
 800ae94:	881a      	ldrh	r2, [r3, #0]
 800ae96:	b162      	cbz	r2, 800aeb2 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ae98:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ae9c:	b133      	cbz	r3, 800aeac <tcp_input+0xb00>
 800ae9e:	4621      	mov	r1, r4
 800aea0:	6920      	ldr	r0, [r4, #16]
 800aea2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800aea4:	f110 0f0d 	cmn.w	r0, #13
 800aea8:	f43f ad6c 	beq.w	800a984 <tcp_input+0x5d8>
          recv_acked = 0;
 800aeac:	4b4d      	ldr	r3, [pc, #308]	; (800afe4 <tcp_input+0xc38>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7fe fcfc 	bl	80098b0 <tcp_input_delayed_close>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f47f ad63 	bne.w	800a984 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800aebe:	4b4a      	ldr	r3, [pc, #296]	; (800afe8 <tcp_input+0xc3c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	b1eb      	cbz	r3, 800af00 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800aec4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aec6:	b133      	cbz	r3, 800aed6 <tcp_input+0xb2a>
 800aec8:	4b48      	ldr	r3, [pc, #288]	; (800afec <tcp_input+0xc40>)
 800aeca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aece:	4948      	ldr	r1, [pc, #288]	; (800aff0 <tcp_input+0xc44>)
 800aed0:	4848      	ldr	r0, [pc, #288]	; (800aff4 <tcp_input+0xc48>)
 800aed2:	f01f fefb 	bl	802accc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aed6:	8b63      	ldrh	r3, [r4, #26]
 800aed8:	f013 0f10 	tst.w	r3, #16
 800aedc:	d128      	bne.n	800af30 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aede:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800aee2:	b36d      	cbz	r5, 800af40 <tcp_input+0xb94>
 800aee4:	2300      	movs	r3, #0
 800aee6:	4a40      	ldr	r2, [pc, #256]	; (800afe8 <tcp_input+0xc3c>)
 800aee8:	6812      	ldr	r2, [r2, #0]
 800aeea:	4621      	mov	r1, r4
 800aeec:	6920      	ldr	r0, [r4, #16]
 800aeee:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800aef0:	f110 0f0d 	cmn.w	r0, #13
 800aef4:	f43f ad46 	beq.w	800a984 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800aef8:	b110      	cbz	r0, 800af00 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800aefa:	4b3b      	ldr	r3, [pc, #236]	; (800afe8 <tcp_input+0xc3c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800af00:	4b37      	ldr	r3, [pc, #220]	; (800afe0 <tcp_input+0xc34>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f013 0f20 	tst.w	r3, #32
 800af08:	d005      	beq.n	800af16 <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800af0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800af0c:	b303      	cbz	r3, 800af50 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800af0e:	7b5a      	ldrb	r2, [r3, #13]
 800af10:	f042 0220 	orr.w	r2, r2, #32
 800af14:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800af16:	4b38      	ldr	r3, [pc, #224]	; (800aff8 <tcp_input+0xc4c>)
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800af1c:	4620      	mov	r0, r4
 800af1e:	f7fe fcc7 	bl	80098b0 <tcp_input_delayed_close>
 800af22:	2800      	cmp	r0, #0
 800af24:	f47f ad2e 	bne.w	800a984 <tcp_input+0x5d8>
        tcp_output(pcb);
 800af28:	4620      	mov	r0, r4
 800af2a:	f001 f87b 	bl	800c024 <tcp_output>
 800af2e:	e529      	b.n	800a984 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800af30:	4b2d      	ldr	r3, [pc, #180]	; (800afe8 <tcp_input+0xc3c>)
 800af32:	6818      	ldr	r0, [r3, #0]
 800af34:	f7fc ff22 	bl	8007d7c <pbuf_free>
            tcp_abort(pcb);
 800af38:	4620      	mov	r0, r4
 800af3a:	f7fd fecb 	bl	8008cd4 <tcp_abort>
            goto aborted;
 800af3e:	e521      	b.n	800a984 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800af40:	2300      	movs	r3, #0
 800af42:	4a29      	ldr	r2, [pc, #164]	; (800afe8 <tcp_input+0xc3c>)
 800af44:	6812      	ldr	r2, [r2, #0]
 800af46:	4621      	mov	r1, r4
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe f8d9 	bl	8009100 <tcp_recv_null>
 800af4e:	e7cf      	b.n	800aef0 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800af52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800af56:	bf1c      	itt	ne
 800af58:	3301      	addne	r3, #1
 800af5a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800af5c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800af60:	2d00      	cmp	r5, #0
 800af62:	d0d8      	beq.n	800af16 <tcp_input+0xb6a>
 800af64:	2300      	movs	r3, #0
 800af66:	461a      	mov	r2, r3
 800af68:	4621      	mov	r1, r4
 800af6a:	6920      	ldr	r0, [r4, #16]
 800af6c:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800af6e:	f110 0f0d 	cmn.w	r0, #13
 800af72:	d1d0      	bne.n	800af16 <tcp_input+0xb6a>
 800af74:	e506      	b.n	800a984 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800af76:	4b21      	ldr	r3, [pc, #132]	; (800affc <tcp_input+0xc50>)
 800af78:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800af7a:	4b21      	ldr	r3, [pc, #132]	; (800b000 <tcp_input+0xc54>)
 800af7c:	4a21      	ldr	r2, [pc, #132]	; (800b004 <tcp_input+0xc58>)
 800af7e:	8810      	ldrh	r0, [r2, #0]
 800af80:	4a21      	ldr	r2, [pc, #132]	; (800b008 <tcp_input+0xc5c>)
 800af82:	6812      	ldr	r2, [r2, #0]
 800af84:	880c      	ldrh	r4, [r1, #0]
 800af86:	9402      	str	r4, [sp, #8]
 800af88:	8849      	ldrh	r1, [r1, #2]
 800af8a:	9101      	str	r1, [sp, #4]
 800af8c:	1f19      	subs	r1, r3, #4
 800af8e:	9100      	str	r1, [sp, #0]
 800af90:	4402      	add	r2, r0
 800af92:	4912      	ldr	r1, [pc, #72]	; (800afdc <tcp_input+0xc30>)
 800af94:	6809      	ldr	r1, [r1, #0]
 800af96:	2000      	movs	r0, #0
 800af98:	f000 ffc2 	bl	800bf20 <tcp_rst>
 800af9c:	e007      	b.n	800afae <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800af9e:	4b17      	ldr	r3, [pc, #92]	; (800affc <tcp_input+0xc50>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	8998      	ldrh	r0, [r3, #12]
 800afa4:	f7fb fb8c 	bl	80066c0 <lwip_htons>
 800afa8:	f010 0f04 	tst.w	r0, #4
 800afac:	d0e3      	beq.n	800af76 <tcp_input+0xbca>
    pbuf_free(p);
 800afae:	4628      	mov	r0, r5
 800afb0:	f7fc fee4 	bl	8007d7c <pbuf_free>
 800afb4:	f7ff ba08 	b.w	800a3c8 <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800afb8:	4b06      	ldr	r3, [pc, #24]	; (800afd4 <tcp_input+0xc28>)
 800afba:	681c      	ldr	r4, [r3, #0]
 800afbc:	2c00      	cmp	r4, #0
 800afbe:	f43f abe5 	beq.w	800a78c <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800afc2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800afec <tcp_input+0xc40>
 800afc6:	4f11      	ldr	r7, [pc, #68]	; (800b00c <tcp_input+0xc60>)
 800afc8:	4e0a      	ldr	r6, [pc, #40]	; (800aff4 <tcp_input+0xc48>)
 800afca:	f7ff bb8d 	b.w	800a6e8 <tcp_input+0x33c>
 800afce:	bf00      	nop
 800afd0:	20014630 	.word	0x20014630
 800afd4:	20014644 	.word	0x20014644
 800afd8:	2001074c 	.word	0x2001074c
 800afdc:	20010748 	.word	0x20010748
 800afe0:	20010768 	.word	0x20010768
 800afe4:	20010760 	.word	0x20010760
 800afe8:	20010764 	.word	0x20010764
 800afec:	0802d634 	.word	0x0802d634
 800aff0:	0802da14 	.word	0x0802da14
 800aff4:	0802bc48 	.word	0x0802bc48
 800aff8:	20014648 	.word	0x20014648
 800affc:	20010774 	.word	0x20010774
 800b000:	20010dac 	.word	0x20010dac
 800b004:	20010782 	.word	0x20010782
 800b008:	2001076c 	.word	0x2001076c
 800b00c:	0802d978 	.word	0x0802d978

0800b010 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b010:	4a02      	ldr	r2, [pc, #8]	; (800b01c <tcp_trigger_input_pcb_close+0xc>)
 800b012:	7813      	ldrb	r3, [r2, #0]
 800b014:	f043 0310 	orr.w	r3, r3, #16
 800b018:	7013      	strb	r3, [r2, #0]
}
 800b01a:	4770      	bx	lr
 800b01c:	20010768 	.word	0x20010768

0800b020 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b020:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b022:	4604      	mov	r4, r0
 800b024:	b128      	cbz	r0, 800b032 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b026:	6863      	ldr	r3, [r4, #4]
 800b028:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b02a:	3801      	subs	r0, #1
 800b02c:	bf18      	it	ne
 800b02e:	2001      	movne	r0, #1
 800b030:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b032:	4b04      	ldr	r3, [pc, #16]	; (800b044 <tcp_output_segment_busy+0x24>)
 800b034:	f240 529a 	movw	r2, #1434	; 0x59a
 800b038:	4903      	ldr	r1, [pc, #12]	; (800b048 <tcp_output_segment_busy+0x28>)
 800b03a:	4804      	ldr	r0, [pc, #16]	; (800b04c <tcp_output_segment_busy+0x2c>)
 800b03c:	f01f fe46 	bl	802accc <iprintf>
 800b040:	e7f1      	b.n	800b026 <tcp_output_segment_busy+0x6>
 800b042:	bf00      	nop
 800b044:	0802da30 	.word	0x0802da30
 800b048:	0802da64 	.word	0x0802da64
 800b04c:	0802bc48 	.word	0x0802bc48

0800b050 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b054:	460d      	mov	r5, r1
 800b056:	b181      	cbz	r1, 800b07a <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b058:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b05a:	00a4      	lsls	r4, r4, #2
 800b05c:	f004 0404 	and.w	r4, r4, #4
 800b060:	3414      	adds	r4, #20
 800b062:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b064:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b066:	429c      	cmp	r4, r3
 800b068:	d006      	beq.n	800b078 <tcp_output_fill_options+0x28>
 800b06a:	4b08      	ldr	r3, [pc, #32]	; (800b08c <tcp_output_fill_options+0x3c>)
 800b06c:	f240 7275 	movw	r2, #1909	; 0x775
 800b070:	4907      	ldr	r1, [pc, #28]	; (800b090 <tcp_output_fill_options+0x40>)
 800b072:	4808      	ldr	r0, [pc, #32]	; (800b094 <tcp_output_fill_options+0x44>)
 800b074:	f01f fe2a 	bl	802accc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b078:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b07a:	4b04      	ldr	r3, [pc, #16]	; (800b08c <tcp_output_fill_options+0x3c>)
 800b07c:	f240 7256 	movw	r2, #1878	; 0x756
 800b080:	4905      	ldr	r1, [pc, #20]	; (800b098 <tcp_output_fill_options+0x48>)
 800b082:	4804      	ldr	r0, [pc, #16]	; (800b094 <tcp_output_fill_options+0x44>)
 800b084:	f01f fe22 	bl	802accc <iprintf>
 800b088:	e7e6      	b.n	800b058 <tcp_output_fill_options+0x8>
 800b08a:	bf00      	nop
 800b08c:	0802da30 	.word	0x0802da30
 800b090:	0802dab4 	.word	0x0802dab4
 800b094:	0802bc48 	.word	0x0802bc48
 800b098:	0802da8c 	.word	0x0802da8c

0800b09c <tcp_pbuf_prealloc>:
{
 800b09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	4615      	mov	r5, r2
 800b0a6:	9e08      	ldr	r6, [sp, #32]
 800b0a8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b0ac:	461f      	mov	r7, r3
 800b0ae:	b1cb      	cbz	r3, 800b0e4 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b0b0:	b1fe      	cbz	r6, 800b0f2 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800b0b2:	42ac      	cmp	r4, r5
 800b0b4:	d229      	bcs.n	800b10a <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b0b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b0ba:	f013 0f02 	tst.w	r3, #2
 800b0be:	d108      	bne.n	800b0d2 <tcp_pbuf_prealloc+0x36>
 800b0c0:	8b73      	ldrh	r3, [r6, #26]
 800b0c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b0c6:	d139      	bne.n	800b13c <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800b0c8:	f1b9 0f00 	cmp.w	r9, #0
 800b0cc:	d001      	beq.n	800b0d2 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800b0ce:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800b0d0:	b1b3      	cbz	r3, 800b100 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b0d2:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b0d6:	f021 0103 	bic.w	r1, r1, #3
 800b0da:	428d      	cmp	r5, r1
 800b0dc:	bf28      	it	cs
 800b0de:	460d      	movcs	r5, r1
 800b0e0:	b2a9      	uxth	r1, r5
 800b0e2:	e013      	b.n	800b10c <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b0e4:	4b16      	ldr	r3, [pc, #88]	; (800b140 <tcp_pbuf_prealloc+0xa4>)
 800b0e6:	22e8      	movs	r2, #232	; 0xe8
 800b0e8:	4916      	ldr	r1, [pc, #88]	; (800b144 <tcp_pbuf_prealloc+0xa8>)
 800b0ea:	4817      	ldr	r0, [pc, #92]	; (800b148 <tcp_pbuf_prealloc+0xac>)
 800b0ec:	f01f fdee 	bl	802accc <iprintf>
 800b0f0:	e7de      	b.n	800b0b0 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b0f2:	4b13      	ldr	r3, [pc, #76]	; (800b140 <tcp_pbuf_prealloc+0xa4>)
 800b0f4:	22e9      	movs	r2, #233	; 0xe9
 800b0f6:	4915      	ldr	r1, [pc, #84]	; (800b14c <tcp_pbuf_prealloc+0xb0>)
 800b0f8:	4813      	ldr	r0, [pc, #76]	; (800b148 <tcp_pbuf_prealloc+0xac>)
 800b0fa:	f01f fde7 	bl	802accc <iprintf>
 800b0fe:	e7d8      	b.n	800b0b2 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800b100:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1e5      	bne.n	800b0d2 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800b106:	4621      	mov	r1, r4
 800b108:	e000      	b.n	800b10c <tcp_pbuf_prealloc+0x70>
 800b10a:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b10c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b110:	4640      	mov	r0, r8
 800b112:	f7fc fea3 	bl	8007e5c <pbuf_alloc>
  if (p == NULL) {
 800b116:	4605      	mov	r5, r0
 800b118:	b168      	cbz	r0, 800b136 <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b11a:	6803      	ldr	r3, [r0, #0]
 800b11c:	b133      	cbz	r3, 800b12c <tcp_pbuf_prealloc+0x90>
 800b11e:	4b08      	ldr	r3, [pc, #32]	; (800b140 <tcp_pbuf_prealloc+0xa4>)
 800b120:	f240 120b 	movw	r2, #267	; 0x10b
 800b124:	490a      	ldr	r1, [pc, #40]	; (800b150 <tcp_pbuf_prealloc+0xb4>)
 800b126:	4808      	ldr	r0, [pc, #32]	; (800b148 <tcp_pbuf_prealloc+0xac>)
 800b128:	f01f fdd0 	bl	802accc <iprintf>
  *oversize = p->len - length;
 800b12c:	896b      	ldrh	r3, [r5, #10]
 800b12e:	1b1b      	subs	r3, r3, r4
 800b130:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800b132:	812c      	strh	r4, [r5, #8]
 800b134:	816c      	strh	r4, [r5, #10]
}
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800b13c:	4621      	mov	r1, r4
 800b13e:	e7e5      	b.n	800b10c <tcp_pbuf_prealloc+0x70>
 800b140:	0802da30 	.word	0x0802da30
 800b144:	0802dac8 	.word	0x0802dac8
 800b148:	0802bc48 	.word	0x0802bc48
 800b14c:	0802daec 	.word	0x0802daec
 800b150:	0802db0c 	.word	0x0802db0c

0800b154 <tcp_create_segment>:
{
 800b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	460e      	mov	r6, r1
 800b15a:	4617      	mov	r7, r2
 800b15c:	4698      	mov	r8, r3
 800b15e:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b162:	4681      	mov	r9, r0
 800b164:	2800      	cmp	r0, #0
 800b166:	d041      	beq.n	800b1ec <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b168:	2e00      	cmp	r6, #0
 800b16a:	d046      	beq.n	800b1fa <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b16c:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800b170:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b174:	2003      	movs	r0, #3
 800b176:	f7fc fb13 	bl	80077a0 <memp_malloc>
 800b17a:	4604      	mov	r4, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d043      	beq.n	800b208 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800b180:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b188:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b18a:	fa1f fa85 	uxth.w	sl, r5
 800b18e:	8933      	ldrh	r3, [r6, #8]
 800b190:	4553      	cmp	r3, sl
 800b192:	d33d      	bcc.n	800b210 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800b194:	8931      	ldrh	r1, [r6, #8]
 800b196:	eba1 010a 	sub.w	r1, r1, sl
 800b19a:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b19c:	2114      	movs	r1, #20
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7fc fda6 	bl	8007cf0 <pbuf_add_header>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d13a      	bne.n	800b21e <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b1a8:	6863      	ldr	r3, [r4, #4]
 800b1aa:	685e      	ldr	r6, [r3, #4]
 800b1ac:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b1ae:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800b1b2:	f7fb fa85 	bl	80066c0 <lwip_htons>
 800b1b6:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b1b8:	68e6      	ldr	r6, [r4, #12]
 800b1ba:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800b1be:	f7fb fa7f 	bl	80066c0 <lwip_htons>
 800b1c2:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b1c4:	68e6      	ldr	r6, [r4, #12]
 800b1c6:	4640      	mov	r0, r8
 800b1c8:	f7fb fa7f 	bl	80066ca <lwip_htonl>
 800b1cc:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b1ce:	68e6      	ldr	r6, [r4, #12]
 800b1d0:	08a8      	lsrs	r0, r5, #2
 800b1d2:	3005      	adds	r0, #5
 800b1d4:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800b1d8:	f7fb fa72 	bl	80066c0 <lwip_htons>
 800b1dc:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b1de:	68e3      	ldr	r3, [r4, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	749a      	strb	r2, [r3, #18]
 800b1e4:	74da      	strb	r2, [r3, #19]
}
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1ec:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <tcp_create_segment+0xd4>)
 800b1ee:	22a3      	movs	r2, #163	; 0xa3
 800b1f0:	490e      	ldr	r1, [pc, #56]	; (800b22c <tcp_create_segment+0xd8>)
 800b1f2:	480f      	ldr	r0, [pc, #60]	; (800b230 <tcp_create_segment+0xdc>)
 800b1f4:	f01f fd6a 	bl	802accc <iprintf>
 800b1f8:	e7b6      	b.n	800b168 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b1fa:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <tcp_create_segment+0xd4>)
 800b1fc:	22a4      	movs	r2, #164	; 0xa4
 800b1fe:	490d      	ldr	r1, [pc, #52]	; (800b234 <tcp_create_segment+0xe0>)
 800b200:	480b      	ldr	r0, [pc, #44]	; (800b230 <tcp_create_segment+0xdc>)
 800b202:	f01f fd63 	bl	802accc <iprintf>
 800b206:	e7b1      	b.n	800b16c <tcp_create_segment+0x18>
    pbuf_free(p);
 800b208:	4630      	mov	r0, r6
 800b20a:	f7fc fdb7 	bl	8007d7c <pbuf_free>
    return NULL;
 800b20e:	e7ea      	b.n	800b1e6 <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <tcp_create_segment+0xd4>)
 800b212:	22b0      	movs	r2, #176	; 0xb0
 800b214:	4908      	ldr	r1, [pc, #32]	; (800b238 <tcp_create_segment+0xe4>)
 800b216:	4806      	ldr	r0, [pc, #24]	; (800b230 <tcp_create_segment+0xdc>)
 800b218:	f01f fd58 	bl	802accc <iprintf>
 800b21c:	e7ba      	b.n	800b194 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800b21e:	4620      	mov	r0, r4
 800b220:	f7fd fa9c 	bl	800875c <tcp_seg_free>
    return NULL;
 800b224:	2400      	movs	r4, #0
 800b226:	e7de      	b.n	800b1e6 <tcp_create_segment+0x92>
 800b228:	0802da30 	.word	0x0802da30
 800b22c:	0802db20 	.word	0x0802db20
 800b230:	0802bc48 	.word	0x0802bc48
 800b234:	0802db40 	.word	0x0802db40
 800b238:	0802db64 	.word	0x0802db64

0800b23c <tcp_output_alloc_header_common>:
{
 800b23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b240:	4607      	mov	r7, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b246:	3214      	adds	r2, #20
 800b248:	4411      	add	r1, r2
 800b24a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b24e:	b289      	uxth	r1, r1
 800b250:	2022      	movs	r0, #34	; 0x22
 800b252:	f7fc fe03 	bl	8007e5c <pbuf_alloc>
  if (p != NULL) {
 800b256:	4606      	mov	r6, r0
 800b258:	b348      	cbz	r0, 800b2ae <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b25a:	f104 0313 	add.w	r3, r4, #19
 800b25e:	8942      	ldrh	r2, [r0, #10]
 800b260:	4293      	cmp	r3, r2
 800b262:	da27      	bge.n	800b2b4 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b264:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800b266:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b26a:	f7fb fa29 	bl	80066c0 <lwip_htons>
 800b26e:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b270:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800b274:	f7fb fa24 	bl	80066c0 <lwip_htons>
 800b278:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b27a:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b27e:	4638      	mov	r0, r7
 800b280:	f7fb fa23 	bl	80066ca <lwip_htonl>
 800b284:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b286:	08a4      	lsrs	r4, r4, #2
 800b288:	3405      	adds	r4, #5
 800b28a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800b28e:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800b292:	b2a0      	uxth	r0, r4
 800b294:	f7fb fa14 	bl	80066c0 <lwip_htons>
 800b298:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b29a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800b29e:	f7fb fa0f 	bl	80066c0 <lwip_htons>
 800b2a2:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	742b      	strb	r3, [r5, #16]
 800b2a8:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b2aa:	74ab      	strb	r3, [r5, #18]
 800b2ac:	74eb      	strb	r3, [r5, #19]
}
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b2b4:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <tcp_output_alloc_header_common+0x88>)
 800b2b6:	f240 7223 	movw	r2, #1827	; 0x723
 800b2ba:	4903      	ldr	r1, [pc, #12]	; (800b2c8 <tcp_output_alloc_header_common+0x8c>)
 800b2bc:	4803      	ldr	r0, [pc, #12]	; (800b2cc <tcp_output_alloc_header_common+0x90>)
 800b2be:	f01f fd05 	bl	802accc <iprintf>
 800b2c2:	e7cf      	b.n	800b264 <tcp_output_alloc_header_common+0x28>
 800b2c4:	0802da30 	.word	0x0802da30
 800b2c8:	0802db7c 	.word	0x0802db7c
 800b2cc:	0802bc48 	.word	0x0802bc48

0800b2d0 <tcp_output_alloc_header>:
{
 800b2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	460d      	mov	r5, r1
 800b2d6:	4616      	mov	r6, r2
 800b2d8:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b1a0      	cbz	r0, 800b308 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b2de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b2e0:	9303      	str	r3, [sp, #12]
 800b2e2:	2310      	movs	r3, #16
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	8b23      	ldrh	r3, [r4, #24]
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	8ae3      	ldrh	r3, [r4, #22]
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	463b      	mov	r3, r7
 800b2f0:	4632      	mov	r2, r6
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2f6:	f7ff ffa1 	bl	800b23c <tcp_output_alloc_header_common>
  if (p != NULL) {
 800b2fa:	b118      	cbz	r0, 800b304 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b300:	4413      	add	r3, r2
 800b302:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b304:	b005      	add	sp, #20
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b308:	4b03      	ldr	r3, [pc, #12]	; (800b318 <tcp_output_alloc_header+0x48>)
 800b30a:	f240 7242 	movw	r2, #1858	; 0x742
 800b30e:	4903      	ldr	r1, [pc, #12]	; (800b31c <tcp_output_alloc_header+0x4c>)
 800b310:	4803      	ldr	r0, [pc, #12]	; (800b320 <tcp_output_alloc_header+0x50>)
 800b312:	f01f fcdb 	bl	802accc <iprintf>
 800b316:	e7e2      	b.n	800b2de <tcp_output_alloc_header+0xe>
 800b318:	0802da30 	.word	0x0802da30
 800b31c:	0802dbac 	.word	0x0802dbac
 800b320:	0802bc48 	.word	0x0802bc48

0800b324 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b326:	b085      	sub	sp, #20
 800b328:	4604      	mov	r4, r0
 800b32a:	4616      	mov	r6, r2
 800b32c:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b32e:	460f      	mov	r7, r1
 800b330:	b1c9      	cbz	r1, 800b366 <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b332:	b374      	cbz	r4, 800b392 <tcp_output_control_segment+0x6e>
 800b334:	7a20      	ldrb	r0, [r4, #8]
 800b336:	b9f0      	cbnz	r0, 800b376 <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800b338:	4628      	mov	r0, r5
 800b33a:	f003 fe37 	bl	800efac <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b33e:	4602      	mov	r2, r0
 800b340:	b308      	cbz	r0, 800b386 <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b342:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b344:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b346:	9202      	str	r2, [sp, #8]
 800b348:	2206      	movs	r2, #6
 800b34a:	9201      	str	r2, [sp, #4]
 800b34c:	9100      	str	r1, [sp, #0]
 800b34e:	462a      	mov	r2, r5
 800b350:	4631      	mov	r1, r6
 800b352:	4638      	mov	r0, r7
 800b354:	f003 ffc4 	bl	800f2e0 <ip4_output_if>
 800b358:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b35a:	4638      	mov	r0, r7
 800b35c:	f7fc fd0e 	bl	8007d7c <pbuf_free>
  return err;
}
 800b360:	4620      	mov	r0, r4
 800b362:	b005      	add	sp, #20
 800b364:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b366:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <tcp_output_control_segment+0x80>)
 800b368:	f240 7287 	movw	r2, #1927	; 0x787
 800b36c:	490e      	ldr	r1, [pc, #56]	; (800b3a8 <tcp_output_control_segment+0x84>)
 800b36e:	480f      	ldr	r0, [pc, #60]	; (800b3ac <tcp_output_control_segment+0x88>)
 800b370:	f01f fcac 	bl	802accc <iprintf>
 800b374:	e7dd      	b.n	800b332 <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800b376:	f7fc fc01 	bl	8007b7c <netif_get_by_index>
  if (netif == NULL) {
 800b37a:	4602      	mov	r2, r0
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d1e0      	bne.n	800b342 <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800b380:	f06f 0403 	mvn.w	r4, #3
 800b384:	e7e9      	b.n	800b35a <tcp_output_control_segment+0x36>
 800b386:	f06f 0403 	mvn.w	r4, #3
 800b38a:	e7e6      	b.n	800b35a <tcp_output_control_segment+0x36>
 800b38c:	f06f 0403 	mvn.w	r4, #3
 800b390:	e7e3      	b.n	800b35a <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800b392:	4628      	mov	r0, r5
 800b394:	f003 fe0a 	bl	800efac <ip4_route>
  if (netif == NULL) {
 800b398:	4602      	mov	r2, r0
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d0f6      	beq.n	800b38c <tcp_output_control_segment+0x68>
      tos = 0;
 800b39e:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800b3a0:	23ff      	movs	r3, #255	; 0xff
 800b3a2:	e7d0      	b.n	800b346 <tcp_output_control_segment+0x22>
 800b3a4:	0802da30 	.word	0x0802da30
 800b3a8:	0802dbd4 	.word	0x0802dbd4
 800b3ac:	0802bc48 	.word	0x0802bc48

0800b3b0 <tcp_write>:
{
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	b091      	sub	sp, #68	; 0x44
 800b3b6:	9107      	str	r1, [sp, #28]
 800b3b8:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3c0:	b1c0      	cbz	r0, 800b3f4 <tcp_write+0x44>
 800b3c2:	4692      	mov	sl, r2
 800b3c4:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b3c6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b3c8:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b3cc:	085b      	lsrs	r3, r3, #1
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	bf28      	it	cs
 800b3d2:	4613      	movcs	r3, r2
 800b3d4:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bf08      	it	eq
 800b3da:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3dc:	9b07      	ldr	r3, [sp, #28]
 800b3de:	b19b      	cbz	r3, 800b408 <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 800b3e0:	7d03      	ldrb	r3, [r0, #20]
 800b3e2:	2b07      	cmp	r3, #7
 800b3e4:	d01a      	beq.n	800b41c <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800b3e6:	3b02      	subs	r3, #2
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d916      	bls.n	800b41c <tcp_write+0x6c>
    return ERR_CONN;
 800b3ee:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800b3f2:	e203      	b.n	800b7fc <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3f4:	4ba5      	ldr	r3, [pc, #660]	; (800b68c <tcp_write+0x2dc>)
 800b3f6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b3fa:	49a5      	ldr	r1, [pc, #660]	; (800b690 <tcp_write+0x2e0>)
 800b3fc:	48a5      	ldr	r0, [pc, #660]	; (800b694 <tcp_write+0x2e4>)
 800b3fe:	f01f fc65 	bl	802accc <iprintf>
 800b402:	f06f 000f 	mvn.w	r0, #15
 800b406:	e1f9      	b.n	800b7fc <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b408:	4ba0      	ldr	r3, [pc, #640]	; (800b68c <tcp_write+0x2dc>)
 800b40a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b40e:	49a2      	ldr	r1, [pc, #648]	; (800b698 <tcp_write+0x2e8>)
 800b410:	48a0      	ldr	r0, [pc, #640]	; (800b694 <tcp_write+0x2e4>)
 800b412:	f01f fc5b 	bl	802accc <iprintf>
 800b416:	f06f 000f 	mvn.w	r0, #15
 800b41a:	e1ef      	b.n	800b7fc <tcp_write+0x44c>
  } else if (len == 0) {
 800b41c:	f1ba 0f00 	cmp.w	sl, #0
 800b420:	d039      	beq.n	800b496 <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800b422:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800b426:	4553      	cmp	r3, sl
 800b428:	d310      	bcc.n	800b44c <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b42a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800b42e:	2b08      	cmp	r3, #8
 800b430:	d815      	bhi.n	800b45e <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800b432:	b32b      	cbz	r3, 800b480 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b434:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b438:	bb6b      	cbnz	r3, 800b496 <tcp_write+0xe6>
 800b43a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b43e:	b1bb      	cbz	r3, 800b470 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 800b440:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b444:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800b448:	464b      	mov	r3, r9
 800b44a:	e02c      	b.n	800b4a6 <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b44c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b454:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	e1ce      	b.n	800b7fc <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b45e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b466:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	e1c5      	b.n	800b7fc <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b470:	4b86      	ldr	r3, [pc, #536]	; (800b68c <tcp_write+0x2dc>)
 800b472:	f240 1255 	movw	r2, #341	; 0x155
 800b476:	4989      	ldr	r1, [pc, #548]	; (800b69c <tcp_write+0x2ec>)
 800b478:	4886      	ldr	r0, [pc, #536]	; (800b694 <tcp_write+0x2e4>)
 800b47a:	f01f fc27 	bl	802accc <iprintf>
 800b47e:	e00a      	b.n	800b496 <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b480:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b484:	2b00      	cmp	r3, #0
 800b486:	d04f      	beq.n	800b528 <tcp_write+0x178>
 800b488:	4b80      	ldr	r3, [pc, #512]	; (800b68c <tcp_write+0x2dc>)
 800b48a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b48e:	4984      	ldr	r1, [pc, #528]	; (800b6a0 <tcp_write+0x2f0>)
 800b490:	4880      	ldr	r0, [pc, #512]	; (800b694 <tcp_write+0x2e4>)
 800b492:	f01f fc1b 	bl	802accc <iprintf>
  queuelen = pcb->snd_queuelen;
 800b496:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b49a:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800b49e:	f1b9 0f00 	cmp.w	r9, #0
 800b4a2:	d047      	beq.n	800b534 <tcp_write+0x184>
 800b4a4:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1fb      	bne.n	800b4a6 <tcp_write+0xf6>
 800b4ae:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	7a9c      	ldrb	r4, [r3, #10]
 800b4b4:	00a4      	lsls	r4, r4, #2
 800b4b6:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b4ba:	891b      	ldrh	r3, [r3, #8]
 800b4bc:	4423      	add	r3, r4
 800b4be:	459b      	cmp	fp, r3
 800b4c0:	db4f      	blt.n	800b562 <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c4:	891b      	ldrh	r3, [r3, #8]
 800b4c6:	ebab 0303 	sub.w	r3, fp, r3
 800b4ca:	1b1c      	subs	r4, r3, r4
 800b4cc:	b2a3      	uxth	r3, r4
 800b4ce:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800b4d0:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800b4d4:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b4d8:	2c00      	cmp	r4, #0
 800b4da:	d05b      	beq.n	800b594 <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b4dc:	429c      	cmp	r4, r3
 800b4de:	d848      	bhi.n	800b572 <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b4e0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b4e4:	461c      	mov	r4, r3
 800b4e6:	4553      	cmp	r3, sl
 800b4e8:	bf28      	it	cs
 800b4ea:	4654      	movcs	r4, sl
 800b4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4ee:	4294      	cmp	r4, r2
 800b4f0:	bf28      	it	cs
 800b4f2:	4614      	movcs	r4, r2
 800b4f4:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800b4f6:	1b1b      	subs	r3, r3, r4
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800b4fe:	1b12      	subs	r2, r2, r4
 800b500:	b292      	uxth	r2, r2
 800b502:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 8082 	beq.w	800b60e <tcp_write+0x25e>
 800b50a:	45a2      	cmp	sl, r4
 800b50c:	d139      	bne.n	800b582 <tcp_write+0x1d2>
 800b50e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 800b510:	2c00      	cmp	r4, #0
 800b512:	f000 8271 	beq.w	800b9f8 <tcp_write+0x648>
 800b516:	46cb      	mov	fp, r9
 800b518:	2300      	movs	r3, #0
 800b51a:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	685d      	ldr	r5, [r3, #4]
 800b520:	2d00      	cmp	r5, #0
 800b522:	f040 8187 	bne.w	800b834 <tcp_write+0x484>
 800b526:	e198      	b.n	800b85a <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b528:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1ab      	bne.n	800b488 <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 800b530:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b534:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800b538:	2c00      	cmp	r4, #0
 800b53a:	f040 8094 	bne.w	800b666 <tcp_write+0x2b6>
  u16_t extendlen = 0;
 800b53e:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b540:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800b546:	4699      	mov	r9, r3
  while (pos < len) {
 800b548:	45a2      	cmp	sl, r4
 800b54a:	f240 816e 	bls.w	800b82a <tcp_write+0x47a>
 800b54e:	2300      	movs	r3, #0
 800b550:	9306      	str	r3, [sp, #24]
 800b552:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	9308      	str	r3, [sp, #32]
 800b55c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b560:	e110      	b.n	800b784 <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b562:	4b4a      	ldr	r3, [pc, #296]	; (800b68c <tcp_write+0x2dc>)
 800b564:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b568:	494e      	ldr	r1, [pc, #312]	; (800b6a4 <tcp_write+0x2f4>)
 800b56a:	484a      	ldr	r0, [pc, #296]	; (800b694 <tcp_write+0x2e4>)
 800b56c:	f01f fbae 	bl	802accc <iprintf>
 800b570:	e7a7      	b.n	800b4c2 <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b572:	4b46      	ldr	r3, [pc, #280]	; (800b68c <tcp_write+0x2dc>)
 800b574:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b578:	494b      	ldr	r1, [pc, #300]	; (800b6a8 <tcp_write+0x2f8>)
 800b57a:	4846      	ldr	r0, [pc, #280]	; (800b694 <tcp_write+0x2e4>)
 800b57c:	f01f fba6 	bl	802accc <iprintf>
 800b580:	e7ae      	b.n	800b4e0 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b582:	4b42      	ldr	r3, [pc, #264]	; (800b68c <tcp_write+0x2dc>)
 800b584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b588:	4948      	ldr	r1, [pc, #288]	; (800b6ac <tcp_write+0x2fc>)
 800b58a:	4842      	ldr	r0, [pc, #264]	; (800b694 <tcp_write+0x2e4>)
 800b58c:	f01f fb9e 	bl	802accc <iprintf>
 800b590:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b592:	e000      	b.n	800b596 <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b594:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b596:	45a2      	cmp	sl, r4
 800b598:	d9ba      	bls.n	800b510 <tcp_write+0x160>
 800b59a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b59c:	2a00      	cmp	r2, #0
 800b59e:	d070      	beq.n	800b682 <tcp_write+0x2d2>
 800b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a2:	891b      	ldrh	r3, [r3, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d06e      	beq.n	800b686 <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b5a8:	ebaa 0704 	sub.w	r7, sl, r4
 800b5ac:	4297      	cmp	r7, r2
 800b5ae:	bfa8      	it	ge
 800b5b0:	4617      	movge	r7, r2
 800b5b2:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b6:	f013 0f01 	tst.w	r3, #1
 800b5ba:	d12a      	bne.n	800b612 <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5be:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b5c2:	464a      	mov	r2, r9
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	d1fb      	bne.n	800b5c4 <tcp_write+0x214>
 800b5cc:	4691      	mov	r9, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5ce:	7b1a      	ldrb	r2, [r3, #12]
 800b5d0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b5d4:	d105      	bne.n	800b5e2 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b5d6:	895a      	ldrh	r2, [r3, #10]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d035      	beq.n	800b64e <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7fc fc38 	bl	8007e5c <pbuf_alloc>
 800b5ec:	4681      	mov	r9, r0
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f000 81dc 	beq.w	800b9ac <tcp_write+0x5fc>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	4423      	add	r3, r4
 800b5f8:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b5fa:	f7fc fd55 	bl	80080a8 <pbuf_clen>
 800b5fe:	4406      	add	r6, r0
 800b600:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800b606:	4425      	add	r5, r4
 800b608:	940d      	str	r4, [sp, #52]	; 0x34
 800b60a:	b2ac      	uxth	r4, r5
 800b60c:	e79c      	b.n	800b548 <tcp_write+0x198>
 800b60e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b610:	e7c1      	b.n	800b596 <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b612:	2301      	movs	r3, #1
 800b614:	9302      	str	r3, [sp, #8]
 800b616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	f8cd 8000 	str.w	r8, [sp]
 800b61e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b622:	4629      	mov	r1, r5
 800b624:	2000      	movs	r0, #0
 800b626:	f7ff fd39 	bl	800b09c <tcp_pbuf_prealloc>
 800b62a:	4681      	mov	r9, r0
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f000 81bd 	beq.w	800b9ac <tcp_write+0x5fc>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b632:	462a      	mov	r2, r5
 800b634:	9b07      	ldr	r3, [sp, #28]
 800b636:	1919      	adds	r1, r3, r4
 800b638:	6840      	ldr	r0, [r0, #4]
 800b63a:	f01e ff7e 	bl	802a53a <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b63e:	4648      	mov	r0, r9
 800b640:	f7fc fd32 	bl	80080a8 <pbuf_clen>
 800b644:	4406      	add	r6, r0
 800b646:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b64c:	e7db      	b.n	800b606 <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b64e:	b90c      	cbnz	r4, 800b654 <tcp_write+0x2a4>
          extendlen = seglen;
 800b650:	950b      	str	r5, [sp, #44]	; 0x2c
 800b652:	e7d8      	b.n	800b606 <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b654:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <tcp_write+0x2dc>)
 800b656:	f240 2231 	movw	r2, #561	; 0x231
 800b65a:	4915      	ldr	r1, [pc, #84]	; (800b6b0 <tcp_write+0x300>)
 800b65c:	480d      	ldr	r0, [pc, #52]	; (800b694 <tcp_write+0x2e4>)
 800b65e:	f01f fb35 	bl	802accc <iprintf>
          extendlen = seglen;
 800b662:	950b      	str	r5, [sp, #44]	; 0x2c
 800b664:	e7cf      	b.n	800b606 <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b666:	4b09      	ldr	r3, [pc, #36]	; (800b68c <tcp_write+0x2dc>)
 800b668:	f240 224a 	movw	r2, #586	; 0x24a
 800b66c:	4911      	ldr	r1, [pc, #68]	; (800b6b4 <tcp_write+0x304>)
 800b66e:	4809      	ldr	r0, [pc, #36]	; (800b694 <tcp_write+0x2e4>)
 800b670:	f01f fb2c 	bl	802accc <iprintf>
  u16_t extendlen = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b678:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800b67a:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b67c:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800b67e:	4699      	mov	r9, r3
 800b680:	e762      	b.n	800b548 <tcp_write+0x198>
 800b682:	940d      	str	r4, [sp, #52]	; 0x34
 800b684:	e763      	b.n	800b54e <tcp_write+0x19e>
 800b686:	940d      	str	r4, [sp, #52]	; 0x34
 800b688:	930b      	str	r3, [sp, #44]	; 0x2c
 800b68a:	e760      	b.n	800b54e <tcp_write+0x19e>
 800b68c:	0802da30 	.word	0x0802da30
 800b690:	0802dc00 	.word	0x0802dc00
 800b694:	0802bc48 	.word	0x0802bc48
 800b698:	0802dc18 	.word	0x0802dc18
 800b69c:	0802dc4c 	.word	0x0802dc4c
 800b6a0:	0802dc88 	.word	0x0802dc88
 800b6a4:	0802dcbc 	.word	0x0802dcbc
 800b6a8:	0802dcd4 	.word	0x0802dcd4
 800b6ac:	0802dcf4 	.word	0x0802dcf4
 800b6b0:	0802dd14 	.word	0x0802dd14
 800b6b4:	0802dd40 	.word	0x0802dd40
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b6b8:	9b06      	ldr	r3, [sp, #24]
 800b6ba:	fab3 f383 	clz	r3, r3
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	9302      	str	r3, [sp, #8]
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	9301      	str	r3, [sp, #4]
 800b6c6:	f8cd 8000 	str.w	r8, [sp]
 800b6ca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b6ce:	465a      	mov	r2, fp
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	2036      	movs	r0, #54	; 0x36
 800b6d4:	f7ff fce2 	bl	800b09c <tcp_pbuf_prealloc>
 800b6d8:	4607      	mov	r7, r0
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	f000 8149 	beq.w	800b972 <tcp_write+0x5c2>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b6e0:	8943      	ldrh	r3, [r0, #10]
 800b6e2:	42ab      	cmp	r3, r5
 800b6e4:	d306      	bcc.n	800b6f4 <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6e6:	462a      	mov	r2, r5
 800b6e8:	9b07      	ldr	r3, [sp, #28]
 800b6ea:	1919      	adds	r1, r3, r4
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f01e ff24 	bl	802a53a <memcpy>
 800b6f2:	e026      	b.n	800b742 <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b6f4:	4bb1      	ldr	r3, [pc, #708]	; (800b9bc <tcp_write+0x60c>)
 800b6f6:	f240 2266 	movw	r2, #614	; 0x266
 800b6fa:	49b1      	ldr	r1, [pc, #708]	; (800b9c0 <tcp_write+0x610>)
 800b6fc:	48b1      	ldr	r0, [pc, #708]	; (800b9c4 <tcp_write+0x614>)
 800b6fe:	f01f fae5 	bl	802accc <iprintf>
 800b702:	e7f0      	b.n	800b6e6 <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b704:	4bad      	ldr	r3, [pc, #692]	; (800b9bc <tcp_write+0x60c>)
 800b706:	f240 2271 	movw	r2, #625	; 0x271
 800b70a:	49af      	ldr	r1, [pc, #700]	; (800b9c8 <tcp_write+0x618>)
 800b70c:	48ad      	ldr	r0, [pc, #692]	; (800b9c4 <tcp_write+0x614>)
 800b70e:	f01f fadd 	bl	802accc <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b712:	2201      	movs	r2, #1
 800b714:	4629      	mov	r1, r5
 800b716:	2036      	movs	r0, #54	; 0x36
 800b718:	f7fc fba0 	bl	8007e5c <pbuf_alloc>
 800b71c:	4681      	mov	r9, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	f000 812a 	beq.w	800b978 <tcp_write+0x5c8>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	4423      	add	r3, r4
 800b728:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b72a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b72e:	2100      	movs	r1, #0
 800b730:	2036      	movs	r0, #54	; 0x36
 800b732:	f7fc fb93 	bl	8007e5c <pbuf_alloc>
 800b736:	4607      	mov	r7, r0
 800b738:	2800      	cmp	r0, #0
 800b73a:	d032      	beq.n	800b7a2 <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7fc fcdb 	bl	80080f8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b742:	4638      	mov	r0, r7
 800b744:	f7fc fcb0 	bl	80080a8 <pbuf_clen>
 800b748:	4406      	add	r6, r0
 800b74a:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b74c:	2e09      	cmp	r6, #9
 800b74e:	d82e      	bhi.n	800b7ae <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b750:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800b754:	2200      	movs	r2, #0
 800b756:	9200      	str	r2, [sp, #0]
 800b758:	4423      	add	r3, r4
 800b75a:	4639      	mov	r1, r7
 800b75c:	4640      	mov	r0, r8
 800b75e:	f7ff fcf9 	bl	800b154 <tcp_create_segment>
 800b762:	4607      	mov	r7, r0
 800b764:	2800      	cmp	r0, #0
 800b766:	f000 810a 	beq.w	800b97e <tcp_write+0x5ce>
    if (queue == NULL) {
 800b76a:	9b06      	ldr	r3, [sp, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d050      	beq.n	800b812 <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b770:	9b05      	ldr	r3, [sp, #20]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d045      	beq.n	800b802 <tcp_write+0x452>
      prev_seg->next = seg;
 800b776:	9b05      	ldr	r3, [sp, #20]
 800b778:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800b77a:	442c      	add	r4, r5
 800b77c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800b77e:	45a2      	cmp	sl, r4
 800b780:	d949      	bls.n	800b816 <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b782:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800b784:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800b788:	b2ad      	uxth	r5, r5
 800b78a:	455d      	cmp	r5, fp
 800b78c:	bf28      	it	cs
 800b78e:	465d      	movcs	r5, fp
 800b790:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d18f      	bne.n	800b6b8 <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b798:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0b8      	beq.n	800b712 <tcp_write+0x362>
 800b7a0:	e7b0      	b.n	800b704 <tcp_write+0x354>
 800b7a2:	4648      	mov	r0, r9
 800b7a4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        pbuf_free(p2);
 800b7a8:	f7fc fae8 	bl	8007d7c <pbuf_free>
        goto memerr;
 800b7ac:	e004      	b.n	800b7b8 <tcp_write+0x408>
 800b7ae:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      pbuf_free(p);
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7fc fae2 	bl	8007d7c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b7b8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c0:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800b7c4:	f1b9 0f00 	cmp.w	r9, #0
 800b7c8:	d002      	beq.n	800b7d0 <tcp_write+0x420>
    pbuf_free(concat_p);
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	f7fc fad6 	bl	8007d7c <pbuf_free>
  if (queue != NULL) {
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	b113      	cbz	r3, 800b7da <tcp_write+0x42a>
    tcp_segs_free(queue);
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fc ffce 	bl	8008776 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b7da:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 80de 	beq.w	800b9a0 <tcp_write+0x5f0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b7e4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f040 80dc 	bne.w	800b9a6 <tcp_write+0x5f6>
 800b7ee:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80c6 	beq.w	800b984 <tcp_write+0x5d4>
  return ERR_MEM;
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b7fc:	b011      	add	sp, #68	; 0x44
 800b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b802:	4b6e      	ldr	r3, [pc, #440]	; (800b9bc <tcp_write+0x60c>)
 800b804:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b808:	4970      	ldr	r1, [pc, #448]	; (800b9cc <tcp_write+0x61c>)
 800b80a:	486e      	ldr	r0, [pc, #440]	; (800b9c4 <tcp_write+0x614>)
 800b80c:	f01f fa5e 	bl	802accc <iprintf>
 800b810:	e7b1      	b.n	800b776 <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b812:	9006      	str	r0, [sp, #24]
 800b814:	e7b1      	b.n	800b77a <tcp_write+0x3ca>
 800b816:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 800b81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d052      	beq.n	800b8c6 <tcp_write+0x516>
 800b820:	461c      	mov	r4, r3
 800b822:	46cb      	mov	fp, r9
 800b824:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b828:	e678      	b.n	800b51c <tcp_write+0x16c>
  while (pos < len) {
 800b82a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b82c:	2300      	movs	r3, #0
 800b82e:	9306      	str	r3, [sp, #24]
 800b830:	e7f3      	b.n	800b81a <tcp_write+0x46a>
  if (oversize_used > 0) {
 800b832:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800b834:	892b      	ldrh	r3, [r5, #8]
 800b836:	4423      	add	r3, r4
 800b838:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 800b83a:	682b      	ldr	r3, [r5, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1f8      	bne.n	800b832 <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b840:	896b      	ldrh	r3, [r5, #10]
 800b842:	6868      	ldr	r0, [r5, #4]
 800b844:	4622      	mov	r2, r4
 800b846:	9907      	ldr	r1, [sp, #28]
 800b848:	4418      	add	r0, r3
 800b84a:	f01e fe76 	bl	802a53a <memcpy>
        p->len += oversize_used;
 800b84e:	896b      	ldrh	r3, [r5, #10]
 800b850:	4423      	add	r3, r4
 800b852:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d1eb      	bne.n	800b832 <tcp_write+0x482>
    last_unsent->len += oversize_used;
 800b85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b85c:	8913      	ldrh	r3, [r2, #8]
 800b85e:	441c      	add	r4, r3
 800b860:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800b862:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b866:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800b86a:	f1bb 0f00 	cmp.w	fp, #0
 800b86e:	f000 80b5 	beq.w	800b9dc <tcp_write+0x62c>
    pbuf_cat(last_unsent->p, concat_p);
 800b872:	4659      	mov	r1, fp
 800b874:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b876:	6860      	ldr	r0, [r4, #4]
 800b878:	f7fc fc3e 	bl	80080f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b87c:	8923      	ldrh	r3, [r4, #8]
 800b87e:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800b882:	4413      	add	r3, r2
 800b884:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 800b88c:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800b890:	4453      	add	r3, sl
 800b892:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b896:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800b89a:	eba3 0a0a 	sub.w	sl, r3, sl
 800b89e:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b8a2:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b8a6:	b11e      	cbz	r6, 800b8b0 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b8a8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d04b      	beq.n	800b948 <tcp_write+0x598>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b8b0:	2f00      	cmp	r7, #0
 800b8b2:	d071      	beq.n	800b998 <tcp_write+0x5e8>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d070      	beq.n	800b99c <tcp_write+0x5ec>
 800b8ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8bc:	f012 0f02 	tst.w	r2, #2
 800b8c0:	d04e      	beq.n	800b960 <tcp_write+0x5b0>
  return ERR_OK;
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e79a      	b.n	800b7fc <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 800b8c6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b8ca:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800b8ce:	f1b9 0f00 	cmp.w	r9, #0
 800b8d2:	d010      	beq.n	800b8f6 <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d6:	b11b      	cbz	r3, 800b8e0 <tcp_write+0x530>
 800b8d8:	46cb      	mov	fp, r9
 800b8da:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b8de:	e7c8      	b.n	800b872 <tcp_write+0x4c2>
 800b8e0:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <tcp_write+0x60c>)
 800b8e2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b8e6:	493a      	ldr	r1, [pc, #232]	; (800b9d0 <tcp_write+0x620>)
 800b8e8:	4836      	ldr	r0, [pc, #216]	; (800b9c4 <tcp_write+0x614>)
 800b8ea:	f01f f9ef 	bl	802accc <iprintf>
 800b8ee:	46cb      	mov	fp, r9
 800b8f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b8f4:	e7bd      	b.n	800b872 <tcp_write+0x4c2>
 800b8f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b8f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b8fc:	e080      	b.n	800ba00 <tcp_write+0x650>
 800b8fe:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b900:	4b2e      	ldr	r3, [pc, #184]	; (800b9bc <tcp_write+0x60c>)
 800b902:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b906:	4933      	ldr	r1, [pc, #204]	; (800b9d4 <tcp_write+0x624>)
 800b908:	482e      	ldr	r0, [pc, #184]	; (800b9c4 <tcp_write+0x614>)
 800b90a:	f01f f9df 	bl	802accc <iprintf>
 800b90e:	e06c      	b.n	800b9ea <tcp_write+0x63a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b910:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800b912:	890b      	ldrh	r3, [r1, #8]
 800b914:	4403      	add	r3, r0
 800b916:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b918:	6813      	ldr	r3, [r2, #0]
 800b91a:	4611      	mov	r1, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1f7      	bne.n	800b910 <tcp_write+0x560>
    p->tot_len += extendlen;
 800b920:	8913      	ldrh	r3, [r2, #8]
 800b922:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b924:	440b      	add	r3, r1
 800b926:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800b928:	8953      	ldrh	r3, [r2, #10]
 800b92a:	440b      	add	r3, r1
 800b92c:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800b92e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b930:	8913      	ldrh	r3, [r2, #8]
 800b932:	440b      	add	r3, r1
 800b934:	8113      	strh	r3, [r2, #8]
 800b936:	e7a6      	b.n	800b886 <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b938:	460a      	mov	r2, r1
 800b93a:	e7f1      	b.n	800b920 <tcp_write+0x570>
  if (last_unsent == NULL) {
 800b93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1a1      	bne.n	800b886 <tcp_write+0x4d6>
    pcb->unsent = queue;
 800b942:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 800b946:	e7a1      	b.n	800b88c <tcp_write+0x4dc>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b948:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1af      	bne.n	800b8b0 <tcp_write+0x500>
 800b950:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <tcp_write+0x60c>)
 800b952:	f240 3212 	movw	r2, #786	; 0x312
 800b956:	4920      	ldr	r1, [pc, #128]	; (800b9d8 <tcp_write+0x628>)
 800b958:	481a      	ldr	r0, [pc, #104]	; (800b9c4 <tcp_write+0x614>)
 800b95a:	f01f f9b7 	bl	802accc <iprintf>
 800b95e:	e7a7      	b.n	800b8b0 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b960:	899c      	ldrh	r4, [r3, #12]
 800b962:	2008      	movs	r0, #8
 800b964:	f7fa feac 	bl	80066c0 <lwip_htons>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4304      	orrs	r4, r0
 800b96c:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800b96e:	2000      	movs	r0, #0
 800b970:	e744      	b.n	800b7fc <tcp_write+0x44c>
 800b972:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b976:	e71f      	b.n	800b7b8 <tcp_write+0x408>
 800b978:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b97c:	e71c      	b.n	800b7b8 <tcp_write+0x408>
 800b97e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b982:	e719      	b.n	800b7b8 <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <tcp_write+0x60c>)
 800b986:	f240 3227 	movw	r2, #807	; 0x327
 800b98a:	4913      	ldr	r1, [pc, #76]	; (800b9d8 <tcp_write+0x628>)
 800b98c:	480d      	ldr	r0, [pc, #52]	; (800b9c4 <tcp_write+0x614>)
 800b98e:	f01f f99d 	bl	802accc <iprintf>
  return ERR_MEM;
 800b992:	f04f 30ff 	mov.w	r0, #4294967295
 800b996:	e731      	b.n	800b7fc <tcp_write+0x44c>
  return ERR_OK;
 800b998:	2000      	movs	r0, #0
 800b99a:	e72f      	b.n	800b7fc <tcp_write+0x44c>
 800b99c:	2000      	movs	r0, #0
 800b99e:	e72d      	b.n	800b7fc <tcp_write+0x44c>
  return ERR_MEM;
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	e72a      	b.n	800b7fc <tcp_write+0x44c>
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	e727      	b.n	800b7fc <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9ac:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b4:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800b9b8:	e70f      	b.n	800b7da <tcp_write+0x42a>
 800b9ba:	bf00      	nop
 800b9bc:	0802da30 	.word	0x0802da30
 800b9c0:	0802dd70 	.word	0x0802dd70
 800b9c4:	0802bc48 	.word	0x0802bc48
 800b9c8:	0802ddb0 	.word	0x0802ddb0
 800b9cc:	0802ddc0 	.word	0x0802ddc0
 800b9d0:	0802ddd4 	.word	0x0802ddd4
 800b9d4:	0802de0c 	.word	0x0802de0c
 800b9d8:	0802de44 	.word	0x0802de44
  } else if (extendlen > 0) {
 800b9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0ac      	beq.n	800b93c <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d08a      	beq.n	800b900 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ec:	6859      	ldr	r1, [r3, #4]
 800b9ee:	680a      	ldr	r2, [r1, #0]
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	d0a1      	beq.n	800b938 <tcp_write+0x588>
 800b9f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b9f6:	e78c      	b.n	800b912 <tcp_write+0x562>
  pcb->unsent_oversize = oversize;
 800b9f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b9fc:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	d09b      	beq.n	800b93c <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ba04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f43f af79 	beq.w	800b8fe <tcp_write+0x54e>
 800ba0c:	940b      	str	r4, [sp, #44]	; 0x2c
 800ba0e:	e7e8      	b.n	800b9e2 <tcp_write+0x632>

0800ba10 <tcp_split_unsent_seg>:
{
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	b083      	sub	sp, #12
 800ba16:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba18:	4607      	mov	r7, r0
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d03a      	beq.n	800ba94 <tcp_split_unsent_seg+0x84>
  useg = pcb->unsent;
 800ba1e:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	f000 80b8 	beq.w	800bb96 <tcp_split_unsent_seg+0x186>
  if (split == 0) {
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d03c      	beq.n	800baa4 <tcp_split_unsent_seg+0x94>
  if (useg->len <= split) {
 800ba2a:	892b      	ldrh	r3, [r5, #8]
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	f240 80b5 	bls.w	800bb9c <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba32:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d33f      	bcc.n	800bab8 <tcp_split_unsent_seg+0xa8>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ba38:	892b      	ldrh	r3, [r5, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d044      	beq.n	800bac8 <tcp_split_unsent_seg+0xb8>
  optflags = useg->flags;
 800ba3e:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ba42:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800ba46:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800ba4a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ba4e:	ebaa 0604 	sub.w	r6, sl, r4
 800ba52:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ba54:	eb06 010b 	add.w	r1, r6, fp
 800ba58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba5c:	b289      	uxth	r1, r1
 800ba5e:	2036      	movs	r0, #54	; 0x36
 800ba60:	f7fc f9fc 	bl	8007e5c <pbuf_alloc>
  if (p == NULL) {
 800ba64:	4680      	mov	r8, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f000 809c 	beq.w	800bba4 <tcp_split_unsent_seg+0x194>
  offset = useg->p->tot_len - useg->len + split;
 800ba6c:	6868      	ldr	r0, [r5, #4]
 800ba6e:	8903      	ldrh	r3, [r0, #8]
 800ba70:	892a      	ldrh	r2, [r5, #8]
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ba76:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	4459      	add	r1, fp
 800ba80:	f7fc fc22 	bl	80082c8 <pbuf_copy_partial>
 800ba84:	42b0      	cmp	r0, r6
 800ba86:	d027      	beq.n	800bad8 <tcp_split_unsent_seg+0xc8>
    pbuf_free(p);
 800ba88:	4640      	mov	r0, r8
 800ba8a:	f7fc f977 	bl	8007d7c <pbuf_free>
  return ERR_MEM;
 800ba8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba92:	e084      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba94:	4b45      	ldr	r3, [pc, #276]	; (800bbac <tcp_split_unsent_seg+0x19c>)
 800ba96:	f240 324b 	movw	r2, #843	; 0x34b
 800ba9a:	4945      	ldr	r1, [pc, #276]	; (800bbb0 <tcp_split_unsent_seg+0x1a0>)
 800ba9c:	4845      	ldr	r0, [pc, #276]	; (800bbb4 <tcp_split_unsent_seg+0x1a4>)
 800ba9e:	f01f f915 	bl	802accc <iprintf>
 800baa2:	e7bc      	b.n	800ba1e <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800baa4:	4b41      	ldr	r3, [pc, #260]	; (800bbac <tcp_split_unsent_seg+0x19c>)
 800baa6:	f240 3253 	movw	r2, #851	; 0x353
 800baaa:	4943      	ldr	r1, [pc, #268]	; (800bbb8 <tcp_split_unsent_seg+0x1a8>)
 800baac:	4841      	ldr	r0, [pc, #260]	; (800bbb4 <tcp_split_unsent_seg+0x1a4>)
 800baae:	f01f f90d 	bl	802accc <iprintf>
    return ERR_VAL;
 800bab2:	f06f 0005 	mvn.w	r0, #5
 800bab6:	e072      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bab8:	4b3c      	ldr	r3, [pc, #240]	; (800bbac <tcp_split_unsent_seg+0x19c>)
 800baba:	f240 325b 	movw	r2, #859	; 0x35b
 800babe:	493f      	ldr	r1, [pc, #252]	; (800bbbc <tcp_split_unsent_seg+0x1ac>)
 800bac0:	483c      	ldr	r0, [pc, #240]	; (800bbb4 <tcp_split_unsent_seg+0x1a4>)
 800bac2:	f01f f903 	bl	802accc <iprintf>
 800bac6:	e7b7      	b.n	800ba38 <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bac8:	4b38      	ldr	r3, [pc, #224]	; (800bbac <tcp_split_unsent_seg+0x19c>)
 800baca:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bace:	493c      	ldr	r1, [pc, #240]	; (800bbc0 <tcp_split_unsent_seg+0x1b0>)
 800bad0:	4838      	ldr	r0, [pc, #224]	; (800bbb4 <tcp_split_unsent_seg+0x1a4>)
 800bad2:	f01f f8fb 	bl	802accc <iprintf>
 800bad6:	e7b2      	b.n	800ba3e <tcp_split_unsent_seg+0x2e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bad8:	68eb      	ldr	r3, [r5, #12]
 800bada:	8998      	ldrh	r0, [r3, #12]
 800badc:	f7fa fdf0 	bl	80066c0 <lwip_htons>
 800bae0:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800bae2:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bae6:	bf0e      	itee	eq
 800bae8:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800baec:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800baf0:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800baf4:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800baf8:	bf1c      	itt	ne
 800bafa:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800bafe:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb02:	68eb      	ldr	r3, [r5, #12]
 800bb04:	6858      	ldr	r0, [r3, #4]
 800bb06:	f7fa fde0 	bl	80066ca <lwip_htonl>
 800bb0a:	f8cd 9000 	str.w	r9, [sp]
 800bb0e:	1823      	adds	r3, r4, r0
 800bb10:	465a      	mov	r2, fp
 800bb12:	4641      	mov	r1, r8
 800bb14:	4638      	mov	r0, r7
 800bb16:	f7ff fb1d 	bl	800b154 <tcp_create_segment>
  if (seg == NULL) {
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d0b3      	beq.n	800ba88 <tcp_split_unsent_seg+0x78>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bb20:	6868      	ldr	r0, [r5, #4]
 800bb22:	f7fc fac1 	bl	80080a8 <pbuf_clen>
 800bb26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bb2a:	1a1b      	subs	r3, r3, r0
 800bb2c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bb30:	6868      	ldr	r0, [r5, #4]
 800bb32:	eba4 040a 	sub.w	r4, r4, sl
 800bb36:	b2a4      	uxth	r4, r4
 800bb38:	8901      	ldrh	r1, [r0, #8]
 800bb3a:	4421      	add	r1, r4
 800bb3c:	b289      	uxth	r1, r1
 800bb3e:	f7fc fa35 	bl	8007fac <pbuf_realloc>
  useg->len -= remainder;
 800bb42:	892b      	ldrh	r3, [r5, #8]
 800bb44:	441c      	add	r4, r3
 800bb46:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bb48:	68eb      	ldr	r3, [r5, #12]
 800bb4a:	899c      	ldrh	r4, [r3, #12]
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7fa fdb7 	bl	80066c0 <lwip_htons>
 800bb52:	68eb      	ldr	r3, [r5, #12]
 800bb54:	4304      	orrs	r4, r0
 800bb56:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bb58:	6868      	ldr	r0, [r5, #4]
 800bb5a:	f7fc faa5 	bl	80080a8 <pbuf_clen>
 800bb5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bb62:	4418      	add	r0, r3
 800bb64:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb68:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800bb6c:	f7fc fa9c 	bl	80080a8 <pbuf_clen>
 800bb70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800bb74:	4418      	add	r0, r3
 800bb76:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800bb7a:	682b      	ldr	r3, [r5, #0]
 800bb7c:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800bb80:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800bb84:	f8d9 3000 	ldr.w	r3, [r9]
 800bb88:	b10b      	cbz	r3, 800bb8e <tcp_split_unsent_seg+0x17e>
  return ERR_OK;
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e007      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
    pcb->unsent_oversize = 0;
 800bb8e:	2000      	movs	r0, #0
 800bb90:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800bb94:	e003      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
    return ERR_MEM;
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9a:	e000      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
    return ERR_OK;
 800bb9c:	2000      	movs	r0, #0
}
 800bb9e:	b003      	add	sp, #12
 800bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	e7f9      	b.n	800bb9e <tcp_split_unsent_seg+0x18e>
 800bbaa:	bf00      	nop
 800bbac:	0802da30 	.word	0x0802da30
 800bbb0:	0802de64 	.word	0x0802de64
 800bbb4:	0802bc48 	.word	0x0802bc48
 800bbb8:	0802de88 	.word	0x0802de88
 800bbbc:	0802deac 	.word	0x0802deac
 800bbc0:	0802debc 	.word	0x0802debc

0800bbc4 <tcp_enqueue_flags>:
{
 800bbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	4604      	mov	r4, r0
 800bbcc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bbce:	f011 0703 	ands.w	r7, r1, #3
 800bbd2:	d048      	beq.n	800bc66 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bbd4:	2c00      	cmp	r4, #0
 800bbd6:	d04e      	beq.n	800bc76 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800bbd8:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bbdc:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800bbe0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bbe4:	4641      	mov	r1, r8
 800bbe6:	2036      	movs	r0, #54	; 0x36
 800bbe8:	f7fc f938 	bl	8007e5c <pbuf_alloc>
 800bbec:	4681      	mov	r9, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d049      	beq.n	800bc86 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bbf2:	8943      	ldrh	r3, [r0, #10]
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	d34d      	bcc.n	800bc94 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bbf8:	9600      	str	r6, [sp, #0]
 800bbfa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bbfc:	462a      	mov	r2, r5
 800bbfe:	4649      	mov	r1, r9
 800bc00:	4620      	mov	r0, r4
 800bc02:	f7ff faa7 	bl	800b154 <tcp_create_segment>
 800bc06:	4606      	mov	r6, r0
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d04b      	beq.n	800bca4 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bc0c:	68c3      	ldr	r3, [r0, #12]
 800bc0e:	f013 0f03 	tst.w	r3, #3
 800bc12:	d14e      	bne.n	800bcb2 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bc14:	8933      	ldrh	r3, [r6, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d153      	bne.n	800bcc2 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800bc1a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d058      	beq.n	800bcd2 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bc20:	461a      	mov	r2, r3
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1fb      	bne.n	800bc20 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800bc28:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bc30:	b117      	cbz	r7, 800bc38 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800bc32:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800bc34:	3301      	adds	r3, #1
 800bc36:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800bc38:	f015 0f01 	tst.w	r5, #1
 800bc3c:	d003      	beq.n	800bc46 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800bc3e:	8b63      	ldrh	r3, [r4, #26]
 800bc40:	f043 0320 	orr.w	r3, r3, #32
 800bc44:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bc46:	6870      	ldr	r0, [r6, #4]
 800bc48:	f7fc fa2e 	bl	80080a8 <pbuf_clen>
 800bc4c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bc50:	4418      	add	r0, r3
 800bc52:	b280      	uxth	r0, r0
 800bc54:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d049      	beq.n	800bcf0 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bc5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d039      	beq.n	800bcd6 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800bc62:	2000      	movs	r0, #0
 800bc64:	e045      	b.n	800bcf2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bc66:	4b24      	ldr	r3, [pc, #144]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bc68:	f240 4211 	movw	r2, #1041	; 0x411
 800bc6c:	4923      	ldr	r1, [pc, #140]	; (800bcfc <tcp_enqueue_flags+0x138>)
 800bc6e:	4824      	ldr	r0, [pc, #144]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bc70:	f01f f82c 	bl	802accc <iprintf>
 800bc74:	e7ae      	b.n	800bbd4 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bc76:	4b20      	ldr	r3, [pc, #128]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bc78:	f240 4213 	movw	r2, #1043	; 0x413
 800bc7c:	4921      	ldr	r1, [pc, #132]	; (800bd04 <tcp_enqueue_flags+0x140>)
 800bc7e:	4820      	ldr	r0, [pc, #128]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bc80:	f01f f824 	bl	802accc <iprintf>
 800bc84:	e7a8      	b.n	800bbd8 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc86:	8b63      	ldrh	r3, [r4, #26]
 800bc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc8c:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800bc8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc92:	e02e      	b.n	800bcf2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bc94:	4b18      	ldr	r3, [pc, #96]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bc96:	f240 4239 	movw	r2, #1081	; 0x439
 800bc9a:	491b      	ldr	r1, [pc, #108]	; (800bd08 <tcp_enqueue_flags+0x144>)
 800bc9c:	4818      	ldr	r0, [pc, #96]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bc9e:	f01f f815 	bl	802accc <iprintf>
 800bca2:	e7a9      	b.n	800bbf8 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bca4:	8b63      	ldrh	r3, [r4, #26]
 800bca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcaa:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e01f      	b.n	800bcf2 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bcb2:	4b11      	ldr	r3, [pc, #68]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bcb4:	f240 4242 	movw	r2, #1090	; 0x442
 800bcb8:	4914      	ldr	r1, [pc, #80]	; (800bd0c <tcp_enqueue_flags+0x148>)
 800bcba:	4811      	ldr	r0, [pc, #68]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bcbc:	f01f f806 	bl	802accc <iprintf>
 800bcc0:	e7a8      	b.n	800bc14 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bcc2:	4b0d      	ldr	r3, [pc, #52]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bcc4:	f240 4243 	movw	r2, #1091	; 0x443
 800bcc8:	4911      	ldr	r1, [pc, #68]	; (800bd10 <tcp_enqueue_flags+0x14c>)
 800bcca:	480d      	ldr	r0, [pc, #52]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bccc:	f01e fffe 	bl	802accc <iprintf>
 800bcd0:	e7a3      	b.n	800bc1a <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800bcd2:	66e6      	str	r6, [r4, #108]	; 0x6c
 800bcd4:	e7a9      	b.n	800bc2a <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bcd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bcd8:	b10b      	cbz	r3, 800bcde <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e009      	b.n	800bcf2 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bcde:	4b06      	ldr	r3, [pc, #24]	; (800bcf8 <tcp_enqueue_flags+0x134>)
 800bce0:	f240 4265 	movw	r2, #1125	; 0x465
 800bce4:	490b      	ldr	r1, [pc, #44]	; (800bd14 <tcp_enqueue_flags+0x150>)
 800bce6:	4806      	ldr	r0, [pc, #24]	; (800bd00 <tcp_enqueue_flags+0x13c>)
 800bce8:	f01e fff0 	bl	802accc <iprintf>
  return ERR_OK;
 800bcec:	2000      	movs	r0, #0
 800bcee:	e000      	b.n	800bcf2 <tcp_enqueue_flags+0x12e>
 800bcf0:	2000      	movs	r0, #0
}
 800bcf2:	b003      	add	sp, #12
 800bcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcf8:	0802da30 	.word	0x0802da30
 800bcfc:	0802decc 	.word	0x0802decc
 800bd00:	0802bc48 	.word	0x0802bc48
 800bd04:	0802df24 	.word	0x0802df24
 800bd08:	0802df44 	.word	0x0802df44
 800bd0c:	0802df80 	.word	0x0802df80
 800bd10:	0802df98 	.word	0x0802df98
 800bd14:	0802dfc4 	.word	0x0802dfc4

0800bd18 <tcp_send_fin>:
{
 800bd18:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	b188      	cbz	r0, 800bd42 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800bd1e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bd20:	b153      	cbz	r3, 800bd38 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd22:	461c      	mov	r4, r3
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1fb      	bne.n	800bd22 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bd2a:	68e3      	ldr	r3, [r4, #12]
 800bd2c:	8998      	ldrh	r0, [r3, #12]
 800bd2e:	f7fa fcc7 	bl	80066c0 <lwip_htons>
 800bd32:	f010 0f07 	tst.w	r0, #7
 800bd36:	d00c      	beq.n	800bd52 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bd38:	2101      	movs	r1, #1
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7ff ff42 	bl	800bbc4 <tcp_enqueue_flags>
}
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <tcp_send_fin+0x58>)
 800bd44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bd48:	490a      	ldr	r1, [pc, #40]	; (800bd74 <tcp_send_fin+0x5c>)
 800bd4a:	480b      	ldr	r0, [pc, #44]	; (800bd78 <tcp_send_fin+0x60>)
 800bd4c:	f01e ffbe 	bl	802accc <iprintf>
 800bd50:	e7e5      	b.n	800bd1e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bd52:	68e3      	ldr	r3, [r4, #12]
 800bd54:	899e      	ldrh	r6, [r3, #12]
 800bd56:	2001      	movs	r0, #1
 800bd58:	f7fa fcb2 	bl	80066c0 <lwip_htons>
 800bd5c:	68e3      	ldr	r3, [r4, #12]
 800bd5e:	4306      	orrs	r6, r0
 800bd60:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bd62:	8b6b      	ldrh	r3, [r5, #26]
 800bd64:	f043 0320 	orr.w	r3, r3, #32
 800bd68:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e7e8      	b.n	800bd40 <tcp_send_fin+0x28>
 800bd6e:	bf00      	nop
 800bd70:	0802da30 	.word	0x0802da30
 800bd74:	0802dfec 	.word	0x0802dfec
 800bd78:	0802bc48 	.word	0x0802bc48

0800bd7c <tcp_rexmit_rto_prepare>:
{
 800bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd80:	4605      	mov	r5, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d031      	beq.n	800bdea <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800bd86:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	d036      	beq.n	800bdfa <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	b143      	cbz	r3, 800bda2 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff f945 	bl	800b020 <tcp_output_segment_busy>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d132      	bne.n	800be00 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bd9a:	6824      	ldr	r4, [r4, #0]
 800bd9c:	6823      	ldr	r3, [r4, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1f6      	bne.n	800bd90 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7ff f93c 	bl	800b020 <tcp_output_segment_busy>
 800bda8:	bb68      	cbnz	r0, 800be06 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800bdaa:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bdac:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800bdae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bdb0:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800bdb6:	8b6b      	ldrh	r3, [r5, #26]
 800bdb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bdbc:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bdbe:	68e3      	ldr	r3, [r4, #12]
 800bdc0:	6858      	ldr	r0, [r3, #4]
 800bdc2:	f7fa fc82 	bl	80066ca <lwip_htonl>
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800bdcc:	68e3      	ldr	r3, [r4, #12]
 800bdce:	8998      	ldrh	r0, [r3, #12]
 800bdd0:	f7fa fc76 	bl	80066c0 <lwip_htons>
 800bdd4:	f010 0303 	ands.w	r3, r0, #3
 800bdd8:	bf18      	it	ne
 800bdda:	2301      	movne	r3, #1
 800bddc:	4447      	add	r7, r8
 800bdde:	443b      	add	r3, r7
 800bde0:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800bde2:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800bde4:	4630      	mov	r0, r6
}
 800bde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bdea:	4b08      	ldr	r3, [pc, #32]	; (800be0c <tcp_rexmit_rto_prepare+0x90>)
 800bdec:	f240 6263 	movw	r2, #1635	; 0x663
 800bdf0:	4907      	ldr	r1, [pc, #28]	; (800be10 <tcp_rexmit_rto_prepare+0x94>)
 800bdf2:	4808      	ldr	r0, [pc, #32]	; (800be14 <tcp_rexmit_rto_prepare+0x98>)
 800bdf4:	f01e ff6a 	bl	802accc <iprintf>
 800bdf8:	e7c5      	b.n	800bd86 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800bdfa:	f06f 0005 	mvn.w	r0, #5
 800bdfe:	e7f2      	b.n	800bde6 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800be00:	f06f 0005 	mvn.w	r0, #5
 800be04:	e7ef      	b.n	800bde6 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800be06:	f06f 0005 	mvn.w	r0, #5
 800be0a:	e7ec      	b.n	800bde6 <tcp_rexmit_rto_prepare+0x6a>
 800be0c:	0802da30 	.word	0x0802da30
 800be10:	0802e008 	.word	0x0802e008
 800be14:	0802bc48 	.word	0x0802bc48

0800be18 <tcp_rexmit>:
{
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be1a:	4607      	mov	r7, r0
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d02c      	beq.n	800be7a <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800be20:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800be22:	2e00      	cmp	r6, #0
 800be24:	d034      	beq.n	800be90 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800be26:	4630      	mov	r0, r6
 800be28:	f7ff f8fa 	bl	800b020 <tcp_output_segment_busy>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d132      	bne.n	800be96 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800be30:	6833      	ldr	r3, [r6, #0]
 800be32:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800be34:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800be38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be3a:	b17b      	cbz	r3, 800be5c <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	6858      	ldr	r0, [r3, #4]
 800be40:	f7fa fc43 	bl	80066ca <lwip_htonl>
 800be44:	4604      	mov	r4, r0
 800be46:	68f3      	ldr	r3, [r6, #12]
 800be48:	6858      	ldr	r0, [r3, #4]
 800be4a:	f7fa fc3e 	bl	80066ca <lwip_htonl>
 800be4e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800be50:	2c00      	cmp	r4, #0
 800be52:	da03      	bge.n	800be5c <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800be54:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800be56:	682b      	ldr	r3, [r5, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1ef      	bne.n	800be3c <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800be60:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800be62:	6833      	ldr	r3, [r6, #0]
 800be64:	b18b      	cbz	r3, 800be8a <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800be66:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800be6a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800be6c:	bf1c      	itt	ne
 800be6e:	3301      	addne	r3, #1
 800be70:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800be74:	2000      	movs	r0, #0
 800be76:	6378      	str	r0, [r7, #52]	; 0x34
}
 800be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800be7a:	4b08      	ldr	r3, [pc, #32]	; (800be9c <tcp_rexmit+0x84>)
 800be7c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800be80:	4907      	ldr	r1, [pc, #28]	; (800bea0 <tcp_rexmit+0x88>)
 800be82:	4808      	ldr	r0, [pc, #32]	; (800bea4 <tcp_rexmit+0x8c>)
 800be84:	f01e ff22 	bl	802accc <iprintf>
 800be88:	e7ca      	b.n	800be20 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800be8a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800be8e:	e7ea      	b.n	800be66 <tcp_rexmit+0x4e>
    return ERR_VAL;
 800be90:	f06f 0005 	mvn.w	r0, #5
 800be94:	e7f0      	b.n	800be78 <tcp_rexmit+0x60>
    return ERR_VAL;
 800be96:	f06f 0005 	mvn.w	r0, #5
 800be9a:	e7ed      	b.n	800be78 <tcp_rexmit+0x60>
 800be9c:	0802da30 	.word	0x0802da30
 800bea0:	0802e02c 	.word	0x0802e02c
 800bea4:	0802bc48 	.word	0x0802bc48

0800bea8 <tcp_rexmit_fast>:
{
 800bea8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800beaa:	4604      	mov	r4, r0
 800beac:	b130      	cbz	r0, 800bebc <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800beae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800beb0:	b11b      	cbz	r3, 800beba <tcp_rexmit_fast+0x12>
 800beb2:	8b63      	ldrh	r3, [r4, #26]
 800beb4:	f013 0f04 	tst.w	r3, #4
 800beb8:	d008      	beq.n	800becc <tcp_rexmit_fast+0x24>
}
 800beba:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bebc:	4b15      	ldr	r3, [pc, #84]	; (800bf14 <tcp_rexmit_fast+0x6c>)
 800bebe:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bec2:	4915      	ldr	r1, [pc, #84]	; (800bf18 <tcp_rexmit_fast+0x70>)
 800bec4:	4815      	ldr	r0, [pc, #84]	; (800bf1c <tcp_rexmit_fast+0x74>)
 800bec6:	f01e ff01 	bl	802accc <iprintf>
 800beca:	e7f0      	b.n	800beae <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800becc:	4620      	mov	r0, r4
 800bece:	f7ff ffa3 	bl	800be18 <tcp_rexmit>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d1f1      	bne.n	800beba <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bed6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800beda:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800bede:	429a      	cmp	r2, r3
 800bee0:	bf28      	it	cs
 800bee2:	461a      	movcs	r2, r3
 800bee4:	1052      	asrs	r2, r2, #1
 800bee6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800beea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800beec:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800bef0:	bf3c      	itt	cc
 800bef2:	005a      	lslcc	r2, r3, #1
 800bef4:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bef8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800befc:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bf00:	4413      	add	r3, r2
 800bf02:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf06:	8b63      	ldrh	r3, [r4, #26]
 800bf08:	f043 0304 	orr.w	r3, r3, #4
 800bf0c:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800bf12:	e7d2      	b.n	800beba <tcp_rexmit_fast+0x12>
 800bf14:	0802da30 	.word	0x0802da30
 800bf18:	0802e044 	.word	0x0802e044
 800bf1c:	0802bc48 	.word	0x0802bc48

0800bf20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf24:	b084      	sub	sp, #16
 800bf26:	4604      	mov	r4, r0
 800bf28:	460e      	mov	r6, r1
 800bf2a:	4615      	mov	r5, r2
 800bf2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bf2e:	4698      	mov	r8, r3
 800bf30:	b32b      	cbz	r3, 800bf7e <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bf32:	b367      	cbz	r7, 800bf8e <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7fa fbc8 	bl	80066ca <lwip_htonl>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f246 0208 	movw	r2, #24584	; 0x6008
 800bf40:	9203      	str	r2, [sp, #12]
 800bf42:	2214      	movs	r2, #20
 800bf44:	9202      	str	r2, [sp, #8]
 800bf46:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800bf4a:	9201      	str	r2, [sp, #4]
 800bf4c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800bf50:	9200      	str	r2, [sp, #0]
 800bf52:	2200      	movs	r2, #0
 800bf54:	4611      	mov	r1, r2
 800bf56:	4628      	mov	r0, r5
 800bf58:	f7ff f970 	bl	800b23c <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	b158      	cbz	r0, 800bf78 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bf60:	2300      	movs	r3, #0
 800bf62:	461a      	mov	r2, r3
 800bf64:	4601      	mov	r1, r0
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff f872 	bl	800b050 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bf6c:	463b      	mov	r3, r7
 800bf6e:	4642      	mov	r2, r8
 800bf70:	4629      	mov	r1, r5
 800bf72:	4620      	mov	r0, r4
 800bf74:	f7ff f9d6 	bl	800b324 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bf78:	b004      	add	sp, #16
 800bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bf7e:	4b08      	ldr	r3, [pc, #32]	; (800bfa0 <tcp_rst+0x80>)
 800bf80:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bf84:	4907      	ldr	r1, [pc, #28]	; (800bfa4 <tcp_rst+0x84>)
 800bf86:	4808      	ldr	r0, [pc, #32]	; (800bfa8 <tcp_rst+0x88>)
 800bf88:	f01e fea0 	bl	802accc <iprintf>
 800bf8c:	e7d1      	b.n	800bf32 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bf8e:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <tcp_rst+0x80>)
 800bf90:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bf94:	4905      	ldr	r1, [pc, #20]	; (800bfac <tcp_rst+0x8c>)
 800bf96:	4804      	ldr	r0, [pc, #16]	; (800bfa8 <tcp_rst+0x88>)
 800bf98:	f01e fe98 	bl	802accc <iprintf>
 800bf9c:	e7ca      	b.n	800bf34 <tcp_rst+0x14>
 800bf9e:	bf00      	nop
 800bfa0:	0802da30 	.word	0x0802da30
 800bfa4:	0802e064 	.word	0x0802e064
 800bfa8:	0802bc48 	.word	0x0802bc48
 800bfac:	0802e080 	.word	0x0802e080

0800bfb0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bfb0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	b1e0      	cbz	r0, 800bff0 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bfb6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bfb8:	f7fa fb87 	bl	80066ca <lwip_htonl>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f7ff f984 	bl	800b2d0 <tcp_output_alloc_header>
  if (p == NULL) {
 800bfc8:	4605      	mov	r5, r0
 800bfca:	b1c8      	cbz	r0, 800c000 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bfcc:	2300      	movs	r3, #0
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f7ff f83c 	bl	800b050 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bfd8:	1d23      	adds	r3, r4, #4
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7ff f9a0 	bl	800b324 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800bfe4:	b198      	cbz	r0, 800c00e <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bfe6:	8b63      	ldrh	r3, [r4, #26]
 800bfe8:	f043 0303 	orr.w	r3, r3, #3
 800bfec:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bff0:	4b09      	ldr	r3, [pc, #36]	; (800c018 <tcp_send_empty_ack+0x68>)
 800bff2:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bff6:	4909      	ldr	r1, [pc, #36]	; (800c01c <tcp_send_empty_ack+0x6c>)
 800bff8:	4809      	ldr	r0, [pc, #36]	; (800c020 <tcp_send_empty_ack+0x70>)
 800bffa:	f01e fe67 	bl	802accc <iprintf>
 800bffe:	e7da      	b.n	800bfb6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c000:	8b63      	ldrh	r3, [r4, #26]
 800c002:	f043 0303 	orr.w	r3, r3, #3
 800c006:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800c008:	f06f 0001 	mvn.w	r0, #1
 800c00c:	e7ef      	b.n	800bfee <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c00e:	8b63      	ldrh	r3, [r4, #26]
 800c010:	f023 0303 	bic.w	r3, r3, #3
 800c014:	8363      	strh	r3, [r4, #26]
 800c016:	e7ea      	b.n	800bfee <tcp_send_empty_ack+0x3e>
 800c018:	0802da30 	.word	0x0802da30
 800c01c:	0802e09c 	.word	0x0802e09c
 800c020:	0802bc48 	.word	0x0802bc48

0800c024 <tcp_output>:
{
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c02a:	4605      	mov	r5, r0
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d03b      	beq.n	800c0a8 <tcp_output+0x84>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c030:	7d2b      	ldrb	r3, [r5, #20]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d040      	beq.n	800c0b8 <tcp_output+0x94>
  if (tcp_input_pcb == pcb) {
 800c036:	4b9c      	ldr	r3, [pc, #624]	; (800c2a8 <tcp_output+0x284>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	42ab      	cmp	r3, r5
 800c03c:	f000 81b8 	beq.w	800c3b0 <tcp_output+0x38c>
  seg = pcb->unsent;
 800c040:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800c042:	2c00      	cmp	r4, #0
 800c044:	d040      	beq.n	800c0c8 <tcp_output+0xa4>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c046:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800c04a:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c04e:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c052:	7a28      	ldrb	r0, [r5, #8]
 800c054:	2800      	cmp	r0, #0
 800c056:	d149      	bne.n	800c0ec <tcp_output+0xc8>
    return ip_route(src, dst);
 800c058:	4650      	mov	r0, sl
 800c05a:	f002 ffa7 	bl	800efac <ip4_route>
 800c05e:	4680      	mov	r8, r0
  if (netif == NULL) {
 800c060:	f1b8 0f00 	cmp.w	r8, #0
 800c064:	f000 81a6 	beq.w	800c3b4 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c068:	682b      	ldr	r3, [r5, #0]
 800c06a:	b913      	cbnz	r3, 800c072 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c06c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c070:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c072:	42be      	cmp	r6, r7
 800c074:	bf28      	it	cs
 800c076:	463e      	movcs	r6, r7
 800c078:	46b1      	mov	r9, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c07a:	68e3      	ldr	r3, [r4, #12]
 800c07c:	6858      	ldr	r0, [r3, #4]
 800c07e:	f7fa fb24 	bl	80066ca <lwip_htonl>
 800c082:	8923      	ldrh	r3, [r4, #8]
 800c084:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	4403      	add	r3, r0
 800c08a:	42b3      	cmp	r3, r6
 800c08c:	d941      	bls.n	800c112 <tcp_output+0xee>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c08e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800c092:	42b3      	cmp	r3, r6
 800c094:	d02e      	beq.n	800c0f4 <tcp_output+0xd0>
    if (pcb->flags & TF_ACK_NOW) {
 800c096:	8b6b      	ldrh	r3, [r5, #26]
 800c098:	f013 0f02 	tst.w	r3, #2
 800c09c:	d018      	beq.n	800c0d0 <tcp_output+0xac>
      return tcp_send_empty_ack(pcb);
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f7ff ff86 	bl	800bfb0 <tcp_send_empty_ack>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	e018      	b.n	800c0da <tcp_output+0xb6>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c0a8:	4b80      	ldr	r3, [pc, #512]	; (800c2ac <tcp_output+0x288>)
 800c0aa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c0ae:	4980      	ldr	r1, [pc, #512]	; (800c2b0 <tcp_output+0x28c>)
 800c0b0:	4880      	ldr	r0, [pc, #512]	; (800c2b4 <tcp_output+0x290>)
 800c0b2:	f01e fe0b 	bl	802accc <iprintf>
 800c0b6:	e7bb      	b.n	800c030 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c0b8:	4b7c      	ldr	r3, [pc, #496]	; (800c2ac <tcp_output+0x288>)
 800c0ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c0be:	497e      	ldr	r1, [pc, #504]	; (800c2b8 <tcp_output+0x294>)
 800c0c0:	487c      	ldr	r0, [pc, #496]	; (800c2b4 <tcp_output+0x290>)
 800c0c2:	f01e fe03 	bl	802accc <iprintf>
 800c0c6:	e7b6      	b.n	800c036 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800c0c8:	8b6b      	ldrh	r3, [r5, #26]
 800c0ca:	f013 0f02 	tst.w	r3, #2
 800c0ce:	d108      	bne.n	800c0e2 <tcp_output+0xbe>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c0d0:	8b6b      	ldrh	r3, [r5, #26]
 800c0d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0d6:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	b007      	add	sp, #28
 800c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7ff ff64 	bl	800bfb0 <tcp_send_empty_ack>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	e7f6      	b.n	800c0da <tcp_output+0xb6>
    return netif_get_by_index(pcb->netif_idx);
 800c0ec:	f7fb fd46 	bl	8007b7c <netif_get_by_index>
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	e7b5      	b.n	800c060 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c0f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1cd      	bne.n	800c096 <tcp_output+0x72>
 800c0fa:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1c9      	bne.n	800c096 <tcp_output+0x72>
      pcb->persist_cnt = 0;
 800c102:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c106:	2201      	movs	r2, #1
 800c108:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800c10c:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800c110:	e7c1      	b.n	800c096 <tcp_output+0x72>
  pcb->persist_backoff = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800c118:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 8146 	beq.w	800c3ac <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800c120:	461f      	mov	r7, r3
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1fb      	bne.n	800c120 <tcp_output+0xfc>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c128:	9505      	str	r5, [sp, #20]
  while (seg != NULL &&
 800c12a:	e0d4      	b.n	800c2d6 <tcp_output+0x2b2>
    LWIP_ASSERT("RST not expected here!",
 800c12c:	4b5f      	ldr	r3, [pc, #380]	; (800c2ac <tcp_output+0x288>)
 800c12e:	f240 5236 	movw	r2, #1334	; 0x536
 800c132:	4962      	ldr	r1, [pc, #392]	; (800c2bc <tcp_output+0x298>)
 800c134:	485f      	ldr	r0, [pc, #380]	; (800c2b4 <tcp_output+0x290>)
 800c136:	f01e fdc9 	bl	802accc <iprintf>
 800c13a:	e0df      	b.n	800c2fc <tcp_output+0x2d8>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c13c:	8911      	ldrh	r1, [r2, #8]
 800c13e:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800c140:	4291      	cmp	r1, r2
 800c142:	f080 80e9 	bcs.w	800c318 <tcp_output+0x2f4>
 800c146:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800c14a:	2a00      	cmp	r2, #0
 800c14c:	f000 80e4 	beq.w	800c318 <tcp_output+0x2f4>
 800c150:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800c154:	2a08      	cmp	r2, #8
 800c156:	f200 80df 	bhi.w	800c318 <tcp_output+0x2f4>
 800c15a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c15e:	f040 80db 	bne.w	800c318 <tcp_output+0x2f4>
  if (pcb->unsent == NULL) {
 800c162:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1b3      	bne.n	800c0d0 <tcp_output+0xac>
    pcb->unsent_oversize = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800c16e:	e7af      	b.n	800c0d0 <tcp_output+0xac>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c170:	68e3      	ldr	r3, [r4, #12]
 800c172:	899e      	ldrh	r6, [r3, #12]
 800c174:	2010      	movs	r0, #16
 800c176:	f7fa faa3 	bl	80066c0 <lwip_htons>
 800c17a:	68e3      	ldr	r3, [r4, #12]
 800c17c:	4330      	orrs	r0, r6
 800c17e:	8198      	strh	r0, [r3, #12]
 800c180:	e0ce      	b.n	800c320 <tcp_output+0x2fc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c182:	68e6      	ldr	r6, [r4, #12]
 800c184:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c186:	f7fa faa0 	bl	80066ca <lwip_htonl>
 800c18a:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c18c:	68e6      	ldr	r6, [r4, #12]
 800c18e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c190:	f7fa fa96 	bl	80066c0 <lwip_htons>
 800c194:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c196:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800c198:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c19a:	4413      	add	r3, r2
 800c19c:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c19e:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c1a0:	7aa3      	ldrb	r3, [r4, #10]
 800c1a2:	f013 0f01 	tst.w	r3, #1
 800c1a6:	d140      	bne.n	800c22a <tcp_output+0x206>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c1a8:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800c1aa:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800c1ae:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c1b0:	bfbc      	itt	lt
 800c1b2:	2300      	movlt	r3, #0
 800c1b4:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c1b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d043      	beq.n	800c244 <tcp_output+0x220>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	68e3      	ldr	r3, [r4, #12]
 800c1c0:	684a      	ldr	r2, [r1, #4]
 800c1c2:	1a9b      	subs	r3, r3, r2
 800c1c4:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c1c6:	894a      	ldrh	r2, [r1, #10]
 800c1c8:	1ad2      	subs	r2, r2, r3
 800c1ca:	814a      	strh	r2, [r1, #10]
  seg->p->tot_len -= len;
 800c1cc:	6861      	ldr	r1, [r4, #4]
 800c1ce:	890a      	ldrh	r2, [r1, #8]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c1d4:	6862      	ldr	r2, [r4, #4]
 800c1d6:	68e3      	ldr	r3, [r4, #12]
 800c1d8:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800c1da:	2200      	movs	r2, #0
 800c1dc:	741a      	strb	r2, [r3, #16]
 800c1de:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c1e0:	7aa3      	ldrb	r3, [r4, #10]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	68e2      	ldr	r2, [r4, #12]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	429e      	cmp	r6, r3
 800c1f0:	d006      	beq.n	800c200 <tcp_output+0x1dc>
 800c1f2:	4b2e      	ldr	r3, [pc, #184]	; (800c2ac <tcp_output+0x288>)
 800c1f4:	f240 621c 	movw	r2, #1564	; 0x61c
 800c1f8:	4931      	ldr	r1, [pc, #196]	; (800c2c0 <tcp_output+0x29c>)
 800c1fa:	482e      	ldr	r0, [pc, #184]	; (800c2b4 <tcp_output+0x290>)
 800c1fc:	f01e fd66 	bl	802accc <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c200:	6860      	ldr	r0, [r4, #4]
 800c202:	f8cd 8008 	str.w	r8, [sp, #8]
 800c206:	2306      	movs	r3, #6
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	7aab      	ldrb	r3, [r5, #10]
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	7aeb      	ldrb	r3, [r5, #11]
 800c210:	4652      	mov	r2, sl
 800c212:	9905      	ldr	r1, [sp, #20]
 800c214:	f003 f864 	bl	800f2e0 <ip4_output_if>
    if (err != ERR_OK) {
 800c218:	4603      	mov	r3, r0
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f000 8086 	beq.w	800c32c <tcp_output+0x308>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c220:	8b6a      	ldrh	r2, [r5, #26]
 800c222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c226:	836a      	strh	r2, [r5, #26]
      return err;
 800c228:	e757      	b.n	800c0da <tcp_output+0xb6>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c22a:	4652      	mov	r2, sl
 800c22c:	4641      	mov	r1, r8
 800c22e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c232:	f7fc fb67 	bl	8008904 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c236:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c23a:	f7fa fa46 	bl	80066ca <lwip_htonl>
 800c23e:	6170      	str	r0, [r6, #20]
    opts += 1;
 800c240:	3618      	adds	r6, #24
 800c242:	e7b2      	b.n	800c1aa <tcp_output+0x186>
    pcb->rttest = tcp_ticks;
 800c244:	4b1f      	ldr	r3, [pc, #124]	; (800c2c4 <tcp_output+0x2a0>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c24a:	68e3      	ldr	r3, [r4, #12]
 800c24c:	6858      	ldr	r0, [r3, #4]
 800c24e:	f7fa fa3c 	bl	80066ca <lwip_htonl>
 800c252:	63a8      	str	r0, [r5, #56]	; 0x38
 800c254:	e7b2      	b.n	800c1bc <tcp_output+0x198>
        pcb->unacked = seg;
 800c256:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800c258:	4627      	mov	r7, r4
 800c25a:	e038      	b.n	800c2ce <tcp_output+0x2aa>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c25c:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800c260:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c262:	b1d3      	cbz	r3, 800c29a <tcp_output+0x276>
 800c264:	4622      	mov	r2, r4
 800c266:	465c      	mov	r4, fp
 800c268:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	6858      	ldr	r0, [r3, #4]
 800c26e:	f7fa fa2c 	bl	80066ca <lwip_htonl>
 800c272:	4606      	mov	r6, r0
 800c274:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c278:	6858      	ldr	r0, [r3, #4]
 800c27a:	f7fa fa26 	bl	80066ca <lwip_htonl>
 800c27e:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800c280:	2e00      	cmp	r6, #0
 800c282:	da07      	bge.n	800c294 <tcp_output+0x270>
            cur_seg = &((*cur_seg)->next );
 800c284:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d1ee      	bne.n	800c26a <tcp_output+0x246>
 800c28c:	465b      	mov	r3, fp
 800c28e:	46a3      	mov	fp, r4
 800c290:	461c      	mov	r4, r3
 800c292:	e002      	b.n	800c29a <tcp_output+0x276>
 800c294:	465b      	mov	r3, fp
 800c296:	46a3      	mov	fp, r4
 800c298:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800c29a:	f8db 3000 	ldr.w	r3, [fp]
 800c29e:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800c2a0:	f8cb 4000 	str.w	r4, [fp]
 800c2a4:	e013      	b.n	800c2ce <tcp_output+0x2aa>
 800c2a6:	bf00      	nop
 800c2a8:	20014648 	.word	0x20014648
 800c2ac:	0802da30 	.word	0x0802da30
 800c2b0:	0802e0bc 	.word	0x0802e0bc
 800c2b4:	0802bc48 	.word	0x0802bc48
 800c2b8:	0802e0d4 	.word	0x0802e0d4
 800c2bc:	0802e0fc 	.word	0x0802e0fc
 800c2c0:	0802dab4 	.word	0x0802dab4
 800c2c4:	20014638 	.word	0x20014638
      tcp_seg_free(seg);
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f7fc fa47 	bl	800875c <tcp_seg_free>
    seg = pcb->unsent;
 800c2ce:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	f43f af49 	beq.w	800c168 <tcp_output+0x144>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c2d6:	68e3      	ldr	r3, [r4, #12]
 800c2d8:	6858      	ldr	r0, [r3, #4]
 800c2da:	f7fa f9f6 	bl	80066ca <lwip_htonl>
 800c2de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c2e0:	1ac0      	subs	r0, r0, r3
 800c2e2:	8923      	ldrh	r3, [r4, #8]
 800c2e4:	4418      	add	r0, r3
  while (seg != NULL &&
 800c2e6:	4548      	cmp	r0, r9
 800c2e8:	f63f af3b 	bhi.w	800c162 <tcp_output+0x13e>
    LWIP_ASSERT("RST not expected here!",
 800c2ec:	68e3      	ldr	r3, [r4, #12]
 800c2ee:	8998      	ldrh	r0, [r3, #12]
 800c2f0:	f7fa f9e6 	bl	80066c0 <lwip_htons>
 800c2f4:	f010 0f04 	tst.w	r0, #4
 800c2f8:	f47f af18 	bne.w	800c12c <tcp_output+0x108>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c2fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c2fe:	b15b      	cbz	r3, 800c318 <tcp_output+0x2f4>
 800c300:	8b6b      	ldrh	r3, [r5, #26]
 800c302:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c306:	d107      	bne.n	800c318 <tcp_output+0x2f4>
 800c308:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	f43f af1b 	beq.w	800c146 <tcp_output+0x122>
 800c310:	6811      	ldr	r1, [r2, #0]
 800c312:	2900      	cmp	r1, #0
 800c314:	f43f af12 	beq.w	800c13c <tcp_output+0x118>
    if (pcb->state != SYN_SENT) {
 800c318:	7d2b      	ldrb	r3, [r5, #20]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	f47f af28 	bne.w	800c170 <tcp_output+0x14c>
  if (tcp_output_segment_busy(seg)) {
 800c320:	4620      	mov	r0, r4
 800c322:	f7fe fe7d 	bl	800b020 <tcp_output_segment_busy>
 800c326:	2800      	cmp	r0, #0
 800c328:	f43f af2b 	beq.w	800c182 <tcp_output+0x15e>
    pcb->unsent = seg->next;
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c330:	7d2b      	ldrb	r3, [r5, #20]
 800c332:	2b02      	cmp	r3, #2
 800c334:	d003      	beq.n	800c33e <tcp_output+0x31a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c336:	8b6b      	ldrh	r3, [r5, #26]
 800c338:	f023 0303 	bic.w	r3, r3, #3
 800c33c:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c33e:	68e3      	ldr	r3, [r4, #12]
 800c340:	6858      	ldr	r0, [r3, #4]
 800c342:	f7fa f9c2 	bl	80066ca <lwip_htonl>
 800c346:	4606      	mov	r6, r0
 800c348:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800c34c:	68e3      	ldr	r3, [r4, #12]
 800c34e:	8998      	ldrh	r0, [r3, #12]
 800c350:	f7fa f9b6 	bl	80066c0 <lwip_htons>
 800c354:	f010 0003 	ands.w	r0, r0, #3
 800c358:	bf18      	it	ne
 800c35a:	2001      	movne	r0, #1
 800c35c:	445e      	add	r6, fp
 800c35e:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c360:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c362:	1a1b      	subs	r3, r3, r0
 800c364:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800c366:	bfb8      	it	lt
 800c368:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c36a:	8926      	ldrh	r6, [r4, #8]
 800c36c:	68e3      	ldr	r3, [r4, #12]
 800c36e:	8998      	ldrh	r0, [r3, #12]
 800c370:	f7fa f9a6 	bl	80066c0 <lwip_htons>
 800c374:	f010 0003 	ands.w	r0, r0, #3
 800c378:	bf18      	it	ne
 800c37a:	2001      	movne	r0, #1
 800c37c:	42f0      	cmn	r0, r6
 800c37e:	d0a3      	beq.n	800c2c8 <tcp_output+0x2a4>
      seg->next = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800c384:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c386:	2b00      	cmp	r3, #0
 800c388:	f43f af65 	beq.w	800c256 <tcp_output+0x232>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c38c:	68e3      	ldr	r3, [r4, #12]
 800c38e:	6858      	ldr	r0, [r3, #4]
 800c390:	f7fa f99b 	bl	80066ca <lwip_htonl>
 800c394:	4606      	mov	r6, r0
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6858      	ldr	r0, [r3, #4]
 800c39a:	f7fa f996 	bl	80066ca <lwip_htonl>
 800c39e:	1a36      	subs	r6, r6, r0
 800c3a0:	2e00      	cmp	r6, #0
 800c3a2:	f6ff af5b 	blt.w	800c25c <tcp_output+0x238>
          useg->next = seg;
 800c3a6:	603c      	str	r4, [r7, #0]
 800c3a8:	4627      	mov	r7, r4
 800c3aa:	e790      	b.n	800c2ce <tcp_output+0x2aa>
  useg = pcb->unacked;
 800c3ac:	461f      	mov	r7, r3
 800c3ae:	e6bb      	b.n	800c128 <tcp_output+0x104>
    return ERR_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e692      	b.n	800c0da <tcp_output+0xb6>
    return ERR_RTE;
 800c3b4:	f06f 0303 	mvn.w	r3, #3
 800c3b8:	e68f      	b.n	800c0da <tcp_output+0xb6>
 800c3ba:	bf00      	nop

0800c3bc <tcp_rexmit_rto_commit>:
{
 800c3bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c3be:	4604      	mov	r4, r0
 800c3c0:	b150      	cbz	r0, 800c3d8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800c3c2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c3c6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c3c8:	bf1c      	itt	ne
 800c3ca:	3301      	addne	r3, #1
 800c3cc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f7ff fe27 	bl	800c024 <tcp_output>
}
 800c3d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c3d8:	4b03      	ldr	r3, [pc, #12]	; (800c3e8 <tcp_rexmit_rto_commit+0x2c>)
 800c3da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c3de:	4903      	ldr	r1, [pc, #12]	; (800c3ec <tcp_rexmit_rto_commit+0x30>)
 800c3e0:	4803      	ldr	r0, [pc, #12]	; (800c3f0 <tcp_rexmit_rto_commit+0x34>)
 800c3e2:	f01e fc73 	bl	802accc <iprintf>
 800c3e6:	e7ec      	b.n	800c3c2 <tcp_rexmit_rto_commit+0x6>
 800c3e8:	0802da30 	.word	0x0802da30
 800c3ec:	0802e114 	.word	0x0802e114
 800c3f0:	0802bc48 	.word	0x0802bc48

0800c3f4 <tcp_rexmit_rto>:
{
 800c3f4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	b120      	cbz	r0, 800c404 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f7ff fcbe 	bl	800bd7c <tcp_rexmit_rto_prepare>
 800c400:	b140      	cbz	r0, 800c414 <tcp_rexmit_rto+0x20>
}
 800c402:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <tcp_rexmit_rto+0x28>)
 800c406:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c40a:	4905      	ldr	r1, [pc, #20]	; (800c420 <tcp_rexmit_rto+0x2c>)
 800c40c:	4805      	ldr	r0, [pc, #20]	; (800c424 <tcp_rexmit_rto+0x30>)
 800c40e:	f01e fc5d 	bl	802accc <iprintf>
 800c412:	e7f2      	b.n	800c3fa <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800c414:	4620      	mov	r0, r4
 800c416:	f7ff ffd1 	bl	800c3bc <tcp_rexmit_rto_commit>
}
 800c41a:	e7f2      	b.n	800c402 <tcp_rexmit_rto+0xe>
 800c41c:	0802da30 	.word	0x0802da30
 800c420:	0802e138 	.word	0x0802e138
 800c424:	0802bc48 	.word	0x0802bc48

0800c428 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c428:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c42a:	4604      	mov	r4, r0
 800c42c:	b1c0      	cbz	r0, 800c460 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c42e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c430:	3801      	subs	r0, #1
 800c432:	f7fa f94a 	bl	80066ca <lwip_htonl>
 800c436:	4603      	mov	r3, r0
 800c438:	2200      	movs	r2, #0
 800c43a:	4611      	mov	r1, r2
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7fe ff47 	bl	800b2d0 <tcp_output_alloc_header>
  if (p == NULL) {
 800c442:	4605      	mov	r5, r0
 800c444:	b1a0      	cbz	r0, 800c470 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c446:	2300      	movs	r3, #0
 800c448:	461a      	mov	r2, r3
 800c44a:	4601      	mov	r1, r0
 800c44c:	4620      	mov	r0, r4
 800c44e:	f7fe fdff 	bl	800b050 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c452:	1d23      	adds	r3, r4, #4
 800c454:	4622      	mov	r2, r4
 800c456:	4629      	mov	r1, r5
 800c458:	4620      	mov	r0, r4
 800c45a:	f7fe ff63 	bl	800b324 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c460:	4b05      	ldr	r3, [pc, #20]	; (800c478 <tcp_keepalive+0x50>)
 800c462:	f640 0224 	movw	r2, #2084	; 0x824
 800c466:	4905      	ldr	r1, [pc, #20]	; (800c47c <tcp_keepalive+0x54>)
 800c468:	4805      	ldr	r0, [pc, #20]	; (800c480 <tcp_keepalive+0x58>)
 800c46a:	f01e fc2f 	bl	802accc <iprintf>
 800c46e:	e7de      	b.n	800c42e <tcp_keepalive+0x6>
    return ERR_MEM;
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	e7f3      	b.n	800c45e <tcp_keepalive+0x36>
 800c476:	bf00      	nop
 800c478:	0802da30 	.word	0x0802da30
 800c47c:	0802e154 	.word	0x0802e154
 800c480:	0802bc48 	.word	0x0802bc48

0800c484 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c488:	4604      	mov	r4, r0
 800c48a:	b328      	cbz	r0, 800c4d8 <tcp_zero_window_probe+0x54>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c48c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c48e:	b35d      	cbz	r5, 800c4e8 <tcp_zero_window_probe+0x64>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c490:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800c494:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800c496:	bf1c      	itt	ne
 800c498:	3301      	addne	r3, #1
 800c49a:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c49e:	68eb      	ldr	r3, [r5, #12]
 800c4a0:	8998      	ldrh	r0, [r3, #12]
 800c4a2:	f7fa f90d 	bl	80066c0 <lwip_htons>
 800c4a6:	f010 0f01 	tst.w	r0, #1
 800c4aa:	d001      	beq.n	800c4b0 <tcp_zero_window_probe+0x2c>
 800c4ac:	892b      	ldrh	r3, [r5, #8]
 800c4ae:	b31b      	cbz	r3, 800c4f8 <tcp_zero_window_probe+0x74>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c4b0:	68eb      	ldr	r3, [r5, #12]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f7fe ff09 	bl	800b2d0 <tcp_output_alloc_header>
  if (p == NULL) {
 800c4be:	4606      	mov	r6, r0
 800c4c0:	b1b8      	cbz	r0, 800c4f2 <tcp_zero_window_probe+0x6e>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c4c2:	6868      	ldr	r0, [r5, #4]
 800c4c4:	8903      	ldrh	r3, [r0, #8]
 800c4c6:	892a      	ldrh	r2, [r5, #8]
 800c4c8:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800c4ca:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	3114      	adds	r1, #20
 800c4d2:	f7fb fef9 	bl	80082c8 <pbuf_copy_partial>
 800c4d6:	e025      	b.n	800c524 <tcp_zero_window_probe+0xa0>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c4d8:	4b1e      	ldr	r3, [pc, #120]	; (800c554 <tcp_zero_window_probe+0xd0>)
 800c4da:	f640 024f 	movw	r2, #2127	; 0x84f
 800c4de:	491e      	ldr	r1, [pc, #120]	; (800c558 <tcp_zero_window_probe+0xd4>)
 800c4e0:	481e      	ldr	r0, [pc, #120]	; (800c55c <tcp_zero_window_probe+0xd8>)
 800c4e2:	f01e fbf3 	bl	802accc <iprintf>
 800c4e6:	e7d1      	b.n	800c48c <tcp_zero_window_probe+0x8>
    return ERR_OK;
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e031      	b.n	800c550 <tcp_zero_window_probe+0xcc>
    return ERR_MEM;
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	e02e      	b.n	800c550 <tcp_zero_window_probe+0xcc>
 800c4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f6:	e02b      	b.n	800c550 <tcp_zero_window_probe+0xcc>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c4f8:	68eb      	ldr	r3, [r5, #12]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4611      	mov	r1, r2
 800c500:	4620      	mov	r0, r4
 800c502:	f7fe fee5 	bl	800b2d0 <tcp_output_alloc_header>
  if (p == NULL) {
 800c506:	4606      	mov	r6, r0
 800c508:	2800      	cmp	r0, #0
 800c50a:	d0ef      	beq.n	800c4ec <tcp_zero_window_probe+0x68>
  tcphdr = (struct tcp_hdr *)p->payload;
 800c50c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c510:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800c514:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800c518:	2011      	movs	r0, #17
 800c51a:	f7fa f8d1 	bl	80066c0 <lwip_htons>
 800c51e:	4307      	orrs	r7, r0
 800c520:	f8a8 700c 	strh.w	r7, [r8, #12]
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c524:	68eb      	ldr	r3, [r5, #12]
 800c526:	6858      	ldr	r0, [r3, #4]
 800c528:	f7fa f8cf 	bl	80066ca <lwip_htonl>
 800c52c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c52e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c530:	1a1b      	subs	r3, r3, r0
 800c532:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800c534:	bfb8      	it	lt
 800c536:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c538:	2300      	movs	r3, #0
 800c53a:	461a      	mov	r2, r3
 800c53c:	4631      	mov	r1, r6
 800c53e:	4620      	mov	r0, r4
 800c540:	f7fe fd86 	bl	800b050 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c544:	1d23      	adds	r3, r4, #4
 800c546:	4622      	mov	r2, r4
 800c548:	4631      	mov	r1, r6
 800c54a:	4620      	mov	r0, r4
 800c54c:	f7fe feea 	bl	800b324 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c554:	0802da30 	.word	0x0802da30
 800c558:	0802e170 	.word	0x0802e170
 800c55c:	0802bc48 	.word	0x0802bc48

0800c560 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	4604      	mov	r4, r0
 800c564:	460f      	mov	r7, r1
 800c566:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c568:	200a      	movs	r0, #10
 800c56a:	f7fb f919 	bl	80077a0 <memp_malloc>
  if (timeout == NULL) {
 800c56e:	b180      	cbz	r0, 800c592 <sys_timeout_abs+0x32>
 800c570:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800c576:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800c578:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800c57a:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c57c:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <sys_timeout_abs+0x5c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	b173      	cbz	r3, 800c5a0 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	1aa2      	subs	r2, r4, r2
 800c586:	2a00      	cmp	r2, #0
 800c588:	da0d      	bge.n	800c5a6 <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800c58a:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800c58c:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <sys_timeout_abs+0x5c>)
 800c58e:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800c590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <sys_timeout_abs+0x60>)
 800c594:	22be      	movs	r2, #190	; 0xbe
 800c596:	490b      	ldr	r1, [pc, #44]	; (800c5c4 <sys_timeout_abs+0x64>)
 800c598:	480b      	ldr	r0, [pc, #44]	; (800c5c8 <sys_timeout_abs+0x68>)
 800c59a:	f01e fb97 	bl	802accc <iprintf>
    return;
 800c59e:	e7f7      	b.n	800c590 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800c5a0:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <sys_timeout_abs+0x5c>)
 800c5a2:	6018      	str	r0, [r3, #0]
    return;
 800c5a4:	e7f4      	b.n	800c590 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	b11b      	cbz	r3, 800c5b4 <sys_timeout_abs+0x54>
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	1aa2      	subs	r2, r4, r2
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	daf8      	bge.n	800c5a6 <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800c5b4:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800c5b6:	600d      	str	r5, [r1, #0]
        break;
 800c5b8:	e7ea      	b.n	800c590 <sys_timeout_abs+0x30>
 800c5ba:	bf00      	nop
 800c5bc:	20010788 	.word	0x20010788
 800c5c0:	0802e194 	.word	0x0802e194
 800c5c4:	0802e1c8 	.word	0x0802e1c8
 800c5c8:	0802bc48 	.word	0x0802bc48

0800c5cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c5d0:	6843      	ldr	r3, [r0, #4]
 800c5d2:	4798      	blx	r3

  now = sys_now();
 800c5d4:	f01d f84a 	bl	802966c <sys_now>
 800c5d8:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c5da:	6826      	ldr	r6, [r4, #0]
 800c5dc:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <lwip_cyclic_timer+0x28>)
 800c5de:	6818      	ldr	r0, [r3, #0]
 800c5e0:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c5e2:	1b43      	subs	r3, r0, r5
 800c5e4:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	4903      	ldr	r1, [pc, #12]	; (800c5f8 <lwip_cyclic_timer+0x2c>)
 800c5ea:	bfb8      	it	lt
 800c5ec:	1970      	addlt	r0, r6, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c5ee:	f7ff ffb7 	bl	800c560 <sys_timeout_abs>
#endif
  }
}
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	20010784 	.word	0x20010784
 800c5f8:	0800c5cd 	.word	0x0800c5cd

0800c5fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c5fc:	b570      	push	{r4, r5, r6, lr}
 800c5fe:	4604      	mov	r4, r0
 800c600:	460d      	mov	r5, r1
 800c602:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c604:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c608:	d207      	bcs.n	800c61a <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c60a:	f01d f82f 	bl	802966c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c60e:	4632      	mov	r2, r6
 800c610:	4629      	mov	r1, r5
 800c612:	4420      	add	r0, r4
 800c614:	f7ff ffa4 	bl	800c560 <sys_timeout_abs>
#endif
}
 800c618:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c61a:	4b04      	ldr	r3, [pc, #16]	; (800c62c <sys_timeout+0x30>)
 800c61c:	f240 1229 	movw	r2, #297	; 0x129
 800c620:	4903      	ldr	r1, [pc, #12]	; (800c630 <sys_timeout+0x34>)
 800c622:	4804      	ldr	r0, [pc, #16]	; (800c634 <sys_timeout+0x38>)
 800c624:	f01e fb52 	bl	802accc <iprintf>
 800c628:	e7ef      	b.n	800c60a <sys_timeout+0xe>
 800c62a:	bf00      	nop
 800c62c:	0802e194 	.word	0x0802e194
 800c630:	0802e208 	.word	0x0802e208
 800c634:	0802bc48 	.word	0x0802bc48

0800c638 <tcp_timer_needed>:
{
 800c638:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c63a:	4b0a      	ldr	r3, [pc, #40]	; (800c664 <tcp_timer_needed+0x2c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	b953      	cbnz	r3, 800c656 <tcp_timer_needed+0x1e>
 800c640:	4b09      	ldr	r3, [pc, #36]	; (800c668 <tcp_timer_needed+0x30>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	b143      	cbz	r3, 800c658 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c646:	4b07      	ldr	r3, [pc, #28]	; (800c664 <tcp_timer_needed+0x2c>)
 800c648:	2201      	movs	r2, #1
 800c64a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c64c:	2200      	movs	r2, #0
 800c64e:	4907      	ldr	r1, [pc, #28]	; (800c66c <tcp_timer_needed+0x34>)
 800c650:	20fa      	movs	r0, #250	; 0xfa
 800c652:	f7ff ffd3 	bl	800c5fc <sys_timeout>
}
 800c656:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c658:	4b05      	ldr	r3, [pc, #20]	; (800c670 <tcp_timer_needed+0x38>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1f2      	bne.n	800c646 <tcp_timer_needed+0xe>
 800c660:	e7f9      	b.n	800c656 <tcp_timer_needed+0x1e>
 800c662:	bf00      	nop
 800c664:	2001078c 	.word	0x2001078c
 800c668:	20014634 	.word	0x20014634
 800c66c:	0800c675 	.word	0x0800c675
 800c670:	20014644 	.word	0x20014644

0800c674 <tcpip_tcp_timer>:
{
 800c674:	b508      	push	{r3, lr}
  tcp_tmr();
 800c676:	f7fd f8a3 	bl	80097c0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c67a:	4b08      	ldr	r3, [pc, #32]	; (800c69c <tcpip_tcp_timer+0x28>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	b12b      	cbz	r3, 800c68c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c680:	2200      	movs	r2, #0
 800c682:	4907      	ldr	r1, [pc, #28]	; (800c6a0 <tcpip_tcp_timer+0x2c>)
 800c684:	20fa      	movs	r0, #250	; 0xfa
 800c686:	f7ff ffb9 	bl	800c5fc <sys_timeout>
}
 800c68a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c68c:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <tcpip_tcp_timer+0x30>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f5      	bne.n	800c680 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <tcpip_tcp_timer+0x34>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
}
 800c69a:	e7f6      	b.n	800c68a <tcpip_tcp_timer+0x16>
 800c69c:	20014634 	.word	0x20014634
 800c6a0:	0800c675 	.word	0x0800c675
 800c6a4:	20014644 	.word	0x20014644
 800c6a8:	2001078c 	.word	0x2001078c

0800c6ac <sys_timeouts_init>:
{
 800c6ac:	b570      	push	{r4, r5, r6, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6ae:	4c06      	ldr	r4, [pc, #24]	; (800c6c8 <sys_timeouts_init+0x1c>)
 800c6b0:	f104 0628 	add.w	r6, r4, #40	; 0x28
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c6b4:	4d05      	ldr	r5, [pc, #20]	; (800c6cc <sys_timeouts_init+0x20>)
 800c6b6:	f854 0f08 	ldr.w	r0, [r4, #8]!
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f7ff ff9d 	bl	800c5fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6c2:	42b4      	cmp	r4, r6
 800c6c4:	d1f7      	bne.n	800c6b6 <sys_timeouts_init+0xa>
}
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	0802e254 	.word	0x0802e254
 800c6cc:	0800c5cd 	.word	0x0800c5cd

0800c6d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c6d4:	f01c ffca 	bl	802966c <sys_now>
 800c6d8:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c6da:	4c0d      	ldr	r4, [pc, #52]	; (800c710 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800c6dc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800c714 <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c6e0:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 800c6e2:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800c6e4:	b191      	cbz	r1, 800c70c <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c6e6:	684b      	ldr	r3, [r1, #4]
 800c6e8:	1af2      	subs	r2, r6, r3
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	db0e      	blt.n	800c70c <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 800c6ee:	680a      	ldr	r2, [r1, #0]
 800c6f0:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800c6f2:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800c6f4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800c6f8:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	f7fb f869 	bl	80077d4 <memp_free>
    if (handler != NULL) {
 800c702:	2d00      	cmp	r5, #0
 800c704:	d0ed      	beq.n	800c6e2 <sys_check_timeouts+0x12>
      handler(arg);
 800c706:	4648      	mov	r0, r9
 800c708:	47a8      	blx	r5
 800c70a:	e7e9      	b.n	800c6e0 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c710:	20010788 	.word	0x20010788
 800c714:	20010784 	.word	0x20010784

0800c718 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c718:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <sys_timeouts_sleeptime+0x38>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	b183      	cbz	r3, 800c742 <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c720:	f01c ffa4 	bl	802966c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <sys_timeouts_sleeptime+0x38>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	685c      	ldr	r4, [r3, #4]
 800c72a:	1a24      	subs	r4, r4, r0
 800c72c:	d40c      	bmi.n	800c748 <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800c72e:	2c00      	cmp	r4, #0
 800c730:	da0b      	bge.n	800c74a <sys_timeouts_sleeptime+0x32>
 800c732:	4b08      	ldr	r3, [pc, #32]	; (800c754 <sys_timeouts_sleeptime+0x3c>)
 800c734:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c738:	4907      	ldr	r1, [pc, #28]	; (800c758 <sys_timeouts_sleeptime+0x40>)
 800c73a:	4808      	ldr	r0, [pc, #32]	; (800c75c <sys_timeouts_sleeptime+0x44>)
 800c73c:	f01e fac6 	bl	802accc <iprintf>
 800c740:	e003      	b.n	800c74a <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c742:	f04f 34ff 	mov.w	r4, #4294967295
 800c746:	e000      	b.n	800c74a <sys_timeouts_sleeptime+0x32>
    return 0;
 800c748:	2400      	movs	r4, #0
    return ret;
  }
}
 800c74a:	4620      	mov	r0, r4
 800c74c:	bd10      	pop	{r4, pc}
 800c74e:	bf00      	nop
 800c750:	20010788 	.word	0x20010788
 800c754:	0802e194 	.word	0x0802e194
 800c758:	0802e240 	.word	0x0802e240
 800c75c:	0802bc48 	.word	0x0802bc48

0800c760 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c760:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c762:	f01e fb6f 	bl	802ae44 <rand>
 800c766:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800c76a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800c76e:	4b01      	ldr	r3, [pc, #4]	; (800c774 <udp_init+0x14>)
 800c770:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800c772:	bd08      	pop	{r3, pc}
 800c774:	20000012 	.word	0x20000012

0800c778 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	b085      	sub	sp, #20
 800c77e:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c780:	4681      	mov	r9, r0
 800c782:	b300      	cbz	r0, 800c7c6 <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c784:	b336      	cbz	r6, 800c7d4 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c786:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c78a:	2b07      	cmp	r3, #7
 800c78c:	d929      	bls.n	800c7e2 <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c78e:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c792:	4b68      	ldr	r3, [pc, #416]	; (800c934 <udp_input+0x1bc>)
 800c794:	6819      	ldr	r1, [r3, #0]
 800c796:	6958      	ldr	r0, [r3, #20]
 800c798:	f002 fdb7 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800c79c:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c79e:	8820      	ldrh	r0, [r4, #0]
 800c7a0:	f7f9 ff8e 	bl	80066c0 <lwip_htons>
 800c7a4:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800c7a6:	8860      	ldrh	r0, [r4, #2]
 800c7a8:	f7f9 ff8a 	bl	80066c0 <lwip_htons>
 800c7ac:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ae:	4b62      	ldr	r3, [pc, #392]	; (800c938 <udp_input+0x1c0>)
 800c7b0:	681c      	ldr	r4, [r3, #0]
 800c7b2:	2c00      	cmp	r4, #0
 800c7b4:	f000 8088 	beq.w	800c8c8 <udp_input+0x150>
  uncon_pcb = NULL;
 800c7b8:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c7bc:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c7c0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800c934 <udp_input+0x1bc>
 800c7c4:	e02c      	b.n	800c820 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c7c6:	4b5d      	ldr	r3, [pc, #372]	; (800c93c <udp_input+0x1c4>)
 800c7c8:	22cf      	movs	r2, #207	; 0xcf
 800c7ca:	495d      	ldr	r1, [pc, #372]	; (800c940 <udp_input+0x1c8>)
 800c7cc:	485d      	ldr	r0, [pc, #372]	; (800c944 <udp_input+0x1cc>)
 800c7ce:	f01e fa7d 	bl	802accc <iprintf>
 800c7d2:	e7d7      	b.n	800c784 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c7d4:	4b59      	ldr	r3, [pc, #356]	; (800c93c <udp_input+0x1c4>)
 800c7d6:	22d0      	movs	r2, #208	; 0xd0
 800c7d8:	495b      	ldr	r1, [pc, #364]	; (800c948 <udp_input+0x1d0>)
 800c7da:	485a      	ldr	r0, [pc, #360]	; (800c944 <udp_input+0x1cc>)
 800c7dc:	f01e fa76 	bl	802accc <iprintf>
 800c7e0:	e7d1      	b.n	800c786 <udp_input+0xe>
    pbuf_free(p);
 800c7e2:	4648      	mov	r0, r9
 800c7e4:	f7fb faca 	bl	8007d7c <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c7e8:	b005      	add	sp, #20
 800c7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c7ee:	4b53      	ldr	r3, [pc, #332]	; (800c93c <udp_input+0x1c4>)
 800c7f0:	2288      	movs	r2, #136	; 0x88
 800c7f2:	4956      	ldr	r1, [pc, #344]	; (800c94c <udp_input+0x1d4>)
 800c7f4:	4853      	ldr	r0, [pc, #332]	; (800c944 <udp_input+0x1cc>)
 800c7f6:	f01e fa69 	bl	802accc <iprintf>
 800c7fa:	e016      	b.n	800c82a <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	b11b      	cbz	r3, 800c808 <udp_input+0x90>
 800c800:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c804:	4293      	cmp	r3, r2
 800c806:	d106      	bne.n	800c816 <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c808:	7c23      	ldrb	r3, [r4, #16]
 800c80a:	f013 0f04 	tst.w	r3, #4
 800c80e:	d025      	beq.n	800c85c <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 800c810:	8aa3      	ldrh	r3, [r4, #20]
 800c812:	4553      	cmp	r3, sl
 800c814:	d038      	beq.n	800c888 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c816:	68e3      	ldr	r3, [r4, #12]
 800c818:	9403      	str	r4, [sp, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d051      	beq.n	800c8c2 <udp_input+0x14a>
 800c81e:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800c820:	8a63      	ldrh	r3, [r4, #18]
 800c822:	42ab      	cmp	r3, r5
 800c824:	d1f7      	bne.n	800c816 <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c826:	2e00      	cmp	r6, #0
 800c828:	d0e1      	beq.n	800c7ee <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c82a:	7a22      	ldrb	r2, [r4, #8]
 800c82c:	b13a      	cbz	r2, 800c83e <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c82e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c836:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d1eb      	bne.n	800c816 <udp_input+0x9e>
    if (broadcast != 0) {
 800c83e:	2f00      	cmp	r7, #0
 800c840:	d0dc      	beq.n	800c7fc <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c842:	6823      	ldr	r3, [r4, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0df      	beq.n	800c808 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c848:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c84c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c850:	d0da      	beq.n	800c808 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c852:	4053      	eors	r3, r2
 800c854:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c856:	4213      	tst	r3, r2
 800c858:	d1dd      	bne.n	800c816 <udp_input+0x9e>
 800c85a:	e7d5      	b.n	800c808 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800c85c:	f1bb 0f00 	cmp.w	fp, #0
 800c860:	d010      	beq.n	800c884 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c862:	2f00      	cmp	r7, #0
 800c864:	d0d4      	beq.n	800c810 <udp_input+0x98>
 800c866:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86e:	d1cf      	bne.n	800c810 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c870:	6873      	ldr	r3, [r6, #4]
 800c872:	f8db 2000 	ldr.w	r2, [fp]
 800c876:	429a      	cmp	r2, r3
 800c878:	d0ca      	beq.n	800c810 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c87a:	6822      	ldr	r2, [r4, #0]
 800c87c:	4293      	cmp	r3, r2
 800c87e:	bf08      	it	eq
 800c880:	46a3      	moveq	fp, r4
 800c882:	e7c5      	b.n	800c810 <udp_input+0x98>
 800c884:	46a3      	mov	fp, r4
 800c886:	e7c3      	b.n	800c810 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c888:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c88a:	b11b      	cbz	r3, 800c894 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c88c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c890:	4293      	cmp	r3, r2
 800c892:	d1c0      	bne.n	800c816 <udp_input+0x9e>
        if (prev != NULL) {
 800c894:	9a03      	ldr	r2, [sp, #12]
 800c896:	b12a      	cbz	r2, 800c8a4 <udp_input+0x12c>
          prev->next = pcb->next;
 800c898:	68e3      	ldr	r3, [r4, #12]
 800c89a:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800c89c:	4b26      	ldr	r3, [pc, #152]	; (800c938 <udp_input+0x1c0>)
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800c8a2:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c8a4:	2108      	movs	r1, #8
 800c8a6:	4648      	mov	r0, r9
 800c8a8:	f7fb fa28 	bl	8007cfc <pbuf_remove_header>
 800c8ac:	bb08      	cbnz	r0, 800c8f2 <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800c8ae:	69a5      	ldr	r5, [r4, #24]
 800c8b0:	b355      	cbz	r5, 800c908 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c8b2:	69e0      	ldr	r0, [r4, #28]
 800c8b4:	f8cd a000 	str.w	sl, [sp]
 800c8b8:	4b25      	ldr	r3, [pc, #148]	; (800c950 <udp_input+0x1d8>)
 800c8ba:	464a      	mov	r2, r9
 800c8bc:	4621      	mov	r1, r4
 800c8be:	47a8      	blx	r5
 800c8c0:	e792      	b.n	800c7e8 <udp_input+0x70>
  if (pcb != NULL) {
 800c8c2:	f1bb 0f00 	cmp.w	fp, #0
 800c8c6:	d133      	bne.n	800c930 <udp_input+0x1b8>
  if (for_us) {
 800c8c8:	6872      	ldr	r2, [r6, #4]
 800c8ca:	4b1a      	ldr	r3, [pc, #104]	; (800c934 <udp_input+0x1bc>)
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d12a      	bne.n	800c928 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c8d2:	2108      	movs	r1, #8
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	f7fb fa11 	bl	8007cfc <pbuf_remove_header>
 800c8da:	b950      	cbnz	r0, 800c8f2 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c8dc:	b92f      	cbnz	r7, 800c8ea <udp_input+0x172>
 800c8de:	4b15      	ldr	r3, [pc, #84]	; (800c934 <udp_input+0x1bc>)
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8e6:	2be0      	cmp	r3, #224	; 0xe0
 800c8e8:	d112      	bne.n	800c910 <udp_input+0x198>
      pbuf_free(p);
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	f7fb fa46 	bl	8007d7c <pbuf_free>
 800c8f0:	e77a      	b.n	800c7e8 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c8f2:	4b12      	ldr	r3, [pc, #72]	; (800c93c <udp_input+0x1c4>)
 800c8f4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c8f8:	4916      	ldr	r1, [pc, #88]	; (800c954 <udp_input+0x1dc>)
 800c8fa:	4812      	ldr	r0, [pc, #72]	; (800c944 <udp_input+0x1cc>)
 800c8fc:	f01e f9e6 	bl	802accc <iprintf>
      pbuf_free(p);
 800c900:	4648      	mov	r0, r9
 800c902:	f7fb fa3b 	bl	8007d7c <pbuf_free>
      goto end;
 800c906:	e76f      	b.n	800c7e8 <udp_input+0x70>
        pbuf_free(p);
 800c908:	4648      	mov	r0, r9
 800c90a:	f7fb fa37 	bl	8007d7c <pbuf_free>
        goto end;
 800c90e:	e76b      	b.n	800c7e8 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c910:	4b08      	ldr	r3, [pc, #32]	; (800c934 <udp_input+0x1bc>)
 800c912:	8999      	ldrh	r1, [r3, #12]
 800c914:	3108      	adds	r1, #8
 800c916:	b209      	sxth	r1, r1
 800c918:	4648      	mov	r0, r9
 800c91a:	f7fb fa23 	bl	8007d64 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c91e:	2103      	movs	r1, #3
 800c920:	4648      	mov	r0, r9
 800c922:	f002 fb1b 	bl	800ef5c <icmp_dest_unreach>
 800c926:	e7e0      	b.n	800c8ea <udp_input+0x172>
    pbuf_free(p);
 800c928:	4648      	mov	r0, r9
 800c92a:	f7fb fa27 	bl	8007d7c <pbuf_free>
  return;
 800c92e:	e75b      	b.n	800c7e8 <udp_input+0x70>
 800c930:	465c      	mov	r4, fp
 800c932:	e7b7      	b.n	800c8a4 <udp_input+0x12c>
 800c934:	20010d98 	.word	0x20010d98
 800c938:	2001464c 	.word	0x2001464c
 800c93c:	0802e284 	.word	0x0802e284
 800c940:	0802e2b4 	.word	0x0802e2b4
 800c944:	0802bc48 	.word	0x0802bc48
 800c948:	0802e2cc 	.word	0x0802e2cc
 800c94c:	0802e2e8 	.word	0x0802e2e8
 800c950:	20010da8 	.word	0x20010da8
 800c954:	0802e310 	.word	0x0802e310

0800c958 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800c95a:	4b3c      	ldr	r3, [pc, #240]	; (800ca4c <udp_bind+0xf4>)
 800c95c:	2900      	cmp	r1, #0
 800c95e:	bf08      	it	eq
 800c960:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c962:	b168      	cbz	r0, 800c980 <udp_bind+0x28>
 800c964:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c966:	4b3a      	ldr	r3, [pc, #232]	; (800ca50 <udp_bind+0xf8>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d05c      	beq.n	800ca28 <udp_bind+0xd0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c96e:	4298      	cmp	r0, r3
 800c970:	d05d      	beq.n	800ca2e <udp_bind+0xd6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c972:	4618      	mov	r0, r3
 800c974:	68c0      	ldr	r0, [r0, #12]
 800c976:	b168      	cbz	r0, 800c994 <udp_bind+0x3c>
    if (pcb == ipcb) {
 800c978:	4284      	cmp	r4, r0
 800c97a:	d1fb      	bne.n	800c974 <udp_bind+0x1c>
      rebind = 1;
 800c97c:	2701      	movs	r7, #1
 800c97e:	e00a      	b.n	800c996 <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c980:	4b34      	ldr	r3, [pc, #208]	; (800ca54 <udp_bind+0xfc>)
 800c982:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c986:	4934      	ldr	r1, [pc, #208]	; (800ca58 <udp_bind+0x100>)
 800c988:	4834      	ldr	r0, [pc, #208]	; (800ca5c <udp_bind+0x104>)
 800c98a:	f01e f99f 	bl	802accc <iprintf>
 800c98e:	f06f 000f 	mvn.w	r0, #15
 800c992:	e056      	b.n	800ca42 <udp_bind+0xea>
  rebind = 0;
 800c994:	2700      	movs	r7, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c996:	2a00      	cmp	r2, #0
 800c998:	d12f      	bne.n	800c9fa <udp_bind+0xa2>
 800c99a:	4a31      	ldr	r2, [pc, #196]	; (800ca60 <udp_bind+0x108>)
 800c99c:	8815      	ldrh	r5, [r2, #0]
  rebind = 0;
 800c99e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c9a2:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c9a6:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c9aa:	4565      	cmp	r5, ip
 800c9ac:	bf1a      	itte	ne
 800c9ae:	3501      	addne	r5, #1
 800c9b0:	b2ad      	uxthne	r5, r5
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c9b2:	4675      	moveq	r5, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9b4:	b1db      	cbz	r3, 800c9ee <udp_bind+0x96>
 800c9b6:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 800c9b8:	8a50      	ldrh	r0, [r2, #18]
 800c9ba:	42a8      	cmp	r0, r5
 800c9bc:	d00e      	beq.n	800c9dc <udp_bind+0x84>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9be:	68d2      	ldr	r2, [r2, #12]
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	d1f9      	bne.n	800c9b8 <udp_bind+0x60>
 800c9c4:	4b26      	ldr	r3, [pc, #152]	; (800ca60 <udp_bind+0x108>)
 800c9c6:	801d      	strh	r5, [r3, #0]
  return udp_port;
 800c9c8:	4b25      	ldr	r3, [pc, #148]	; (800ca60 <udp_bind+0x108>)
 800c9ca:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c9cc:	b321      	cbz	r1, 800ca18 <udp_bind+0xc0>
 800c9ce:	680b      	ldr	r3, [r1, #0]
 800c9d0:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800c9d2:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c9d4:	2f00      	cmp	r7, #0
 800c9d6:	d02f      	beq.n	800ca38 <udp_bind+0xe0>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e032      	b.n	800ca42 <udp_bind+0xea>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c9dc:	3e01      	subs	r6, #1
 800c9de:	b2b6      	uxth	r6, r6
 800c9e0:	2e00      	cmp	r6, #0
 800c9e2:	d1e2      	bne.n	800c9aa <udp_bind+0x52>
 800c9e4:	4b1e      	ldr	r3, [pc, #120]	; (800ca60 <udp_bind+0x108>)
 800c9e6:	801d      	strh	r5, [r3, #0]
      return ERR_USE;
 800c9e8:	f06f 0007 	mvn.w	r0, #7
 800c9ec:	e029      	b.n	800ca42 <udp_bind+0xea>
 800c9ee:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <udp_bind+0x108>)
 800c9f0:	801d      	strh	r5, [r3, #0]
 800c9f2:	e7e9      	b.n	800c9c8 <udp_bind+0x70>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0e8      	beq.n	800c9cc <udp_bind+0x74>
      if (pcb != ipcb) {
 800c9fa:	429c      	cmp	r4, r3
 800c9fc:	d0fa      	beq.n	800c9f4 <udp_bind+0x9c>
          if ((ipcb->local_port == port) &&
 800c9fe:	8a58      	ldrh	r0, [r3, #18]
 800ca00:	4290      	cmp	r0, r2
 800ca02:	d1f7      	bne.n	800c9f4 <udp_bind+0x9c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca04:	681d      	ldr	r5, [r3, #0]
 800ca06:	6808      	ldr	r0, [r1, #0]
          if ((ipcb->local_port == port) &&
 800ca08:	4285      	cmp	r5, r0
 800ca0a:	d007      	beq.n	800ca1c <udp_bind+0xc4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ca0c:	b148      	cbz	r0, 800ca22 <udp_bind+0xca>
              ip_addr_isany(&ipcb->local_ip))) {
 800ca0e:	2d00      	cmp	r5, #0
 800ca10:	d1f0      	bne.n	800c9f4 <udp_bind+0x9c>
            return ERR_USE;
 800ca12:	f06f 0007 	mvn.w	r0, #7
 800ca16:	e014      	b.n	800ca42 <udp_bind+0xea>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e7d9      	b.n	800c9d0 <udp_bind+0x78>
            return ERR_USE;
 800ca1c:	f06f 0007 	mvn.w	r0, #7
 800ca20:	e00f      	b.n	800ca42 <udp_bind+0xea>
 800ca22:	f06f 0007 	mvn.w	r0, #7
 800ca26:	e00c      	b.n	800ca42 <udp_bind+0xea>
  if (port == 0) {
 800ca28:	b962      	cbnz	r2, 800ca44 <udp_bind+0xec>
  rebind = 0;
 800ca2a:	2700      	movs	r7, #0
 800ca2c:	e7b5      	b.n	800c99a <udp_bind+0x42>
      rebind = 1;
 800ca2e:	2701      	movs	r7, #1
 800ca30:	e7b1      	b.n	800c996 <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ca32:	2300      	movs	r3, #0
 800ca34:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 800ca36:	8262      	strh	r2, [r4, #18]
    pcb->next = udp_pcbs;
 800ca38:	4b05      	ldr	r3, [pc, #20]	; (800ca50 <udp_bind+0xf8>)
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800ca3e:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ca40:	2000      	movs	r0, #0
}
 800ca42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d0f4      	beq.n	800ca32 <udp_bind+0xda>
  rebind = 0;
 800ca48:	2700      	movs	r7, #0
 800ca4a:	e7c0      	b.n	800c9ce <udp_bind+0x76>
 800ca4c:	0802ec50 	.word	0x0802ec50
 800ca50:	2001464c 	.word	0x2001464c
 800ca54:	0802e284 	.word	0x0802e284
 800ca58:	0802e32c 	.word	0x0802e32c
 800ca5c:	0802bc48 	.word	0x0802bc48
 800ca60:	20000012 	.word	0x20000012

0800ca64 <udp_sendto_if_src>:
{
 800ca64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca68:	b085      	sub	sp, #20
 800ca6a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800ca6e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d046      	beq.n	800cb04 <udp_sendto_if_src+0xa0>
 800ca76:	460c      	mov	r4, r1
 800ca78:	4690      	mov	r8, r2
 800ca7a:	4699      	mov	r9, r3
 800ca7c:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ca7e:	2900      	cmp	r1, #0
 800ca80:	d04a      	beq.n	800cb18 <udp_sendto_if_src+0xb4>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	d052      	beq.n	800cb2c <udp_sendto_if_src+0xc8>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ca86:	f1ba 0f00 	cmp.w	sl, #0
 800ca8a:	d059      	beq.n	800cb40 <udp_sendto_if_src+0xdc>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ca8c:	f1bb 0f00 	cmp.w	fp, #0
 800ca90:	d060      	beq.n	800cb54 <udp_sendto_if_src+0xf0>
  if (pcb->local_port == 0) {
 800ca92:	8a43      	ldrh	r3, [r0, #18]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d067      	beq.n	800cb68 <udp_sendto_if_src+0x104>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ca98:	8922      	ldrh	r2, [r4, #8]
 800ca9a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	f200 8081 	bhi.w	800cba6 <udp_sendto_if_src+0x142>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800caa4:	2108      	movs	r1, #8
 800caa6:	4620      	mov	r0, r4
 800caa8:	f7fb f922 	bl	8007cf0 <pbuf_add_header>
 800caac:	2800      	cmp	r0, #0
 800caae:	d163      	bne.n	800cb78 <udp_sendto_if_src+0x114>
    q = p;
 800cab0:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cab2:	896b      	ldrh	r3, [r5, #10]
 800cab4:	2b07      	cmp	r3, #7
 800cab6:	d96e      	bls.n	800cb96 <udp_sendto_if_src+0x132>
  udphdr = (struct udp_hdr *)q->payload;
 800cab8:	686f      	ldr	r7, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800caba:	8a70      	ldrh	r0, [r6, #18]
 800cabc:	f7f9 fe00 	bl	80066c0 <lwip_htons>
 800cac0:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cac2:	4648      	mov	r0, r9
 800cac4:	f7f9 fdfc 	bl	80066c0 <lwip_htons>
 800cac8:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800caca:	2300      	movs	r3, #0
 800cacc:	71bb      	strb	r3, [r7, #6]
 800cace:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800cad0:	8928      	ldrh	r0, [r5, #8]
 800cad2:	f7f9 fdf5 	bl	80066c0 <lwip_htons>
 800cad6:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cad8:	f8cd b008 	str.w	fp, [sp, #8]
 800cadc:	2311      	movs	r3, #17
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	7ab3      	ldrb	r3, [r6, #10]
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	7af3      	ldrb	r3, [r6, #11]
 800cae6:	4642      	mov	r2, r8
 800cae8:	4651      	mov	r1, sl
 800caea:	4628      	mov	r0, r5
 800caec:	f002 fb78 	bl	800f1e0 <ip4_output_if_src>
 800caf0:	4607      	mov	r7, r0
  if (q != p) {
 800caf2:	42a5      	cmp	r5, r4
 800caf4:	d002      	beq.n	800cafc <udp_sendto_if_src+0x98>
    pbuf_free(q);
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7fb f940 	bl	8007d7c <pbuf_free>
}
 800cafc:	4638      	mov	r0, r7
 800cafe:	b005      	add	sp, #20
 800cb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb04:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb06:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb0a:	492b      	ldr	r1, [pc, #172]	; (800cbb8 <udp_sendto_if_src+0x154>)
 800cb0c:	482b      	ldr	r0, [pc, #172]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cb0e:	f01e f8dd 	bl	802accc <iprintf>
 800cb12:	f06f 070f 	mvn.w	r7, #15
 800cb16:	e7f1      	b.n	800cafc <udp_sendto_if_src+0x98>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cb18:	4b26      	ldr	r3, [pc, #152]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb1a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cb1e:	4928      	ldr	r1, [pc, #160]	; (800cbc0 <udp_sendto_if_src+0x15c>)
 800cb20:	4826      	ldr	r0, [pc, #152]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cb22:	f01e f8d3 	bl	802accc <iprintf>
 800cb26:	f06f 070f 	mvn.w	r7, #15
 800cb2a:	e7e7      	b.n	800cafc <udp_sendto_if_src+0x98>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cb2c:	4b21      	ldr	r3, [pc, #132]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cb32:	4924      	ldr	r1, [pc, #144]	; (800cbc4 <udp_sendto_if_src+0x160>)
 800cb34:	4821      	ldr	r0, [pc, #132]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cb36:	f01e f8c9 	bl	802accc <iprintf>
 800cb3a:	f06f 070f 	mvn.w	r7, #15
 800cb3e:	e7dd      	b.n	800cafc <udp_sendto_if_src+0x98>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cb40:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb42:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cb46:	4920      	ldr	r1, [pc, #128]	; (800cbc8 <udp_sendto_if_src+0x164>)
 800cb48:	481c      	ldr	r0, [pc, #112]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cb4a:	f01e f8bf 	bl	802accc <iprintf>
 800cb4e:	f06f 070f 	mvn.w	r7, #15
 800cb52:	e7d3      	b.n	800cafc <udp_sendto_if_src+0x98>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cb54:	4b17      	ldr	r3, [pc, #92]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb56:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cb5a:	491c      	ldr	r1, [pc, #112]	; (800cbcc <udp_sendto_if_src+0x168>)
 800cb5c:	4817      	ldr	r0, [pc, #92]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cb5e:	f01e f8b5 	bl	802accc <iprintf>
 800cb62:	f06f 070f 	mvn.w	r7, #15
 800cb66:	e7c9      	b.n	800cafc <udp_sendto_if_src+0x98>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	f7ff fef4 	bl	800c958 <udp_bind>
    if (err != ERR_OK) {
 800cb70:	4607      	mov	r7, r0
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d090      	beq.n	800ca98 <udp_sendto_if_src+0x34>
 800cb76:	e7c1      	b.n	800cafc <udp_sendto_if_src+0x98>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cb78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb7c:	2108      	movs	r1, #8
 800cb7e:	2022      	movs	r0, #34	; 0x22
 800cb80:	f7fb f96c 	bl	8007e5c <pbuf_alloc>
    if (q == NULL) {
 800cb84:	4605      	mov	r5, r0
 800cb86:	b188      	cbz	r0, 800cbac <udp_sendto_if_src+0x148>
    if (p->tot_len != 0) {
 800cb88:	8923      	ldrh	r3, [r4, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d091      	beq.n	800cab2 <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 800cb8e:	4621      	mov	r1, r4
 800cb90:	f7fb faf0 	bl	8008174 <pbuf_chain>
 800cb94:	e78d      	b.n	800cab2 <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cb96:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <udp_sendto_if_src+0x150>)
 800cb98:	f240 320d 	movw	r2, #781	; 0x30d
 800cb9c:	490c      	ldr	r1, [pc, #48]	; (800cbd0 <udp_sendto_if_src+0x16c>)
 800cb9e:	4807      	ldr	r0, [pc, #28]	; (800cbbc <udp_sendto_if_src+0x158>)
 800cba0:	f01e f894 	bl	802accc <iprintf>
 800cba4:	e788      	b.n	800cab8 <udp_sendto_if_src+0x54>
    return ERR_MEM;
 800cba6:	f04f 37ff 	mov.w	r7, #4294967295
 800cbaa:	e7a7      	b.n	800cafc <udp_sendto_if_src+0x98>
      return ERR_MEM;
 800cbac:	f04f 37ff 	mov.w	r7, #4294967295
 800cbb0:	e7a4      	b.n	800cafc <udp_sendto_if_src+0x98>
 800cbb2:	bf00      	nop
 800cbb4:	0802e284 	.word	0x0802e284
 800cbb8:	0802e344 	.word	0x0802e344
 800cbbc:	0802bc48 	.word	0x0802bc48
 800cbc0:	0802e364 	.word	0x0802e364
 800cbc4:	0802e384 	.word	0x0802e384
 800cbc8:	0802e3a8 	.word	0x0802e3a8
 800cbcc:	0802e3cc 	.word	0x0802e3cc
 800cbd0:	0802e3f0 	.word	0x0802e3f0

0800cbd4 <udp_sendto_if>:
{
 800cbd4:	b570      	push	{r4, r5, r6, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbda:	b170      	cbz	r0, 800cbfa <udp_sendto_if+0x26>
 800cbdc:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cbde:	b1b1      	cbz	r1, 800cc0e <udp_sendto_if+0x3a>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cbe0:	b1fa      	cbz	r2, 800cc22 <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cbe2:	b344      	cbz	r4, 800cc36 <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cbe4:	6800      	ldr	r0, [r0, #0]
 800cbe6:	b380      	cbz	r0, 800cc4a <udp_sendto_if+0x76>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cbe8:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cbec:	2ee0      	cmp	r6, #224	; 0xe0
 800cbee:	d02c      	beq.n	800cc4a <udp_sendto_if+0x76>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cbf0:	6866      	ldr	r6, [r4, #4]
 800cbf2:	42b0      	cmp	r0, r6
 800cbf4:	d131      	bne.n	800cc5a <udp_sendto_if+0x86>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	e028      	b.n	800cc4c <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbfa:	4b19      	ldr	r3, [pc, #100]	; (800cc60 <udp_sendto_if+0x8c>)
 800cbfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc00:	4918      	ldr	r1, [pc, #96]	; (800cc64 <udp_sendto_if+0x90>)
 800cc02:	4819      	ldr	r0, [pc, #100]	; (800cc68 <udp_sendto_if+0x94>)
 800cc04:	f01e f862 	bl	802accc <iprintf>
 800cc08:	f06f 000f 	mvn.w	r0, #15
 800cc0c:	e023      	b.n	800cc56 <udp_sendto_if+0x82>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cc0e:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <udp_sendto_if+0x8c>)
 800cc10:	f240 2281 	movw	r2, #641	; 0x281
 800cc14:	4915      	ldr	r1, [pc, #84]	; (800cc6c <udp_sendto_if+0x98>)
 800cc16:	4814      	ldr	r0, [pc, #80]	; (800cc68 <udp_sendto_if+0x94>)
 800cc18:	f01e f858 	bl	802accc <iprintf>
 800cc1c:	f06f 000f 	mvn.w	r0, #15
 800cc20:	e019      	b.n	800cc56 <udp_sendto_if+0x82>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cc22:	4b0f      	ldr	r3, [pc, #60]	; (800cc60 <udp_sendto_if+0x8c>)
 800cc24:	f240 2282 	movw	r2, #642	; 0x282
 800cc28:	4911      	ldr	r1, [pc, #68]	; (800cc70 <udp_sendto_if+0x9c>)
 800cc2a:	480f      	ldr	r0, [pc, #60]	; (800cc68 <udp_sendto_if+0x94>)
 800cc2c:	f01e f84e 	bl	802accc <iprintf>
 800cc30:	f06f 000f 	mvn.w	r0, #15
 800cc34:	e00f      	b.n	800cc56 <udp_sendto_if+0x82>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cc36:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <udp_sendto_if+0x8c>)
 800cc38:	f240 2283 	movw	r2, #643	; 0x283
 800cc3c:	490d      	ldr	r1, [pc, #52]	; (800cc74 <udp_sendto_if+0xa0>)
 800cc3e:	480a      	ldr	r0, [pc, #40]	; (800cc68 <udp_sendto_if+0x94>)
 800cc40:	f01e f844 	bl	802accc <iprintf>
 800cc44:	f06f 000f 	mvn.w	r0, #15
 800cc48:	e005      	b.n	800cc56 <udp_sendto_if+0x82>
      src_ip = netif_ip_addr4(netif);
 800cc4a:	1d20      	adds	r0, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cc4c:	9001      	str	r0, [sp, #4]
 800cc4e:	9400      	str	r4, [sp, #0]
 800cc50:	4628      	mov	r0, r5
 800cc52:	f7ff ff07 	bl	800ca64 <udp_sendto_if_src>
}
 800cc56:	b002      	add	sp, #8
 800cc58:	bd70      	pop	{r4, r5, r6, pc}
        return ERR_RTE;
 800cc5a:	f06f 0003 	mvn.w	r0, #3
 800cc5e:	e7fa      	b.n	800cc56 <udp_sendto_if+0x82>
 800cc60:	0802e284 	.word	0x0802e284
 800cc64:	0802e420 	.word	0x0802e420
 800cc68:	0802bc48 	.word	0x0802bc48
 800cc6c:	0802e43c 	.word	0x0802e43c
 800cc70:	0802e458 	.word	0x0802e458
 800cc74:	0802e478 	.word	0x0802e478

0800cc78 <udp_sendto>:
{
 800cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc7a:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc7c:	b198      	cbz	r0, 800cca6 <udp_sendto+0x2e>
 800cc7e:	460d      	mov	r5, r1
 800cc80:	4614      	mov	r4, r2
 800cc82:	461e      	mov	r6, r3
 800cc84:	4607      	mov	r7, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cc86:	b1c1      	cbz	r1, 800ccba <udp_sendto+0x42>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cc88:	b30a      	cbz	r2, 800ccce <udp_sendto+0x56>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cc8a:	7a00      	ldrb	r0, [r0, #8]
 800cc8c:	b348      	cbz	r0, 800cce2 <udp_sendto+0x6a>
    netif = netif_get_by_index(pcb->netif_idx);
 800cc8e:	f7fa ff75 	bl	8007b7c <netif_get_by_index>
  if (netif == NULL) {
 800cc92:	b350      	cbz	r0, 800ccea <udp_sendto+0x72>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cc94:	9000      	str	r0, [sp, #0]
 800cc96:	4633      	mov	r3, r6
 800cc98:	4622      	mov	r2, r4
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f7ff ff99 	bl	800cbd4 <udp_sendto_if>
}
 800cca2:	b003      	add	sp, #12
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cca6:	4b12      	ldr	r3, [pc, #72]	; (800ccf0 <udp_sendto+0x78>)
 800cca8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ccac:	4911      	ldr	r1, [pc, #68]	; (800ccf4 <udp_sendto+0x7c>)
 800ccae:	4812      	ldr	r0, [pc, #72]	; (800ccf8 <udp_sendto+0x80>)
 800ccb0:	f01e f80c 	bl	802accc <iprintf>
 800ccb4:	f06f 000f 	mvn.w	r0, #15
 800ccb8:	e7f3      	b.n	800cca2 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800ccba:	4b0d      	ldr	r3, [pc, #52]	; (800ccf0 <udp_sendto+0x78>)
 800ccbc:	f240 2219 	movw	r2, #537	; 0x219
 800ccc0:	490e      	ldr	r1, [pc, #56]	; (800ccfc <udp_sendto+0x84>)
 800ccc2:	480d      	ldr	r0, [pc, #52]	; (800ccf8 <udp_sendto+0x80>)
 800ccc4:	f01e f802 	bl	802accc <iprintf>
 800ccc8:	f06f 000f 	mvn.w	r0, #15
 800cccc:	e7e9      	b.n	800cca2 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ccce:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <udp_sendto+0x78>)
 800ccd0:	f240 221a 	movw	r2, #538	; 0x21a
 800ccd4:	490a      	ldr	r1, [pc, #40]	; (800cd00 <udp_sendto+0x88>)
 800ccd6:	4808      	ldr	r0, [pc, #32]	; (800ccf8 <udp_sendto+0x80>)
 800ccd8:	f01d fff8 	bl	802accc <iprintf>
 800ccdc:	f06f 000f 	mvn.w	r0, #15
 800cce0:	e7df      	b.n	800cca2 <udp_sendto+0x2a>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cce2:	4610      	mov	r0, r2
 800cce4:	f002 f962 	bl	800efac <ip4_route>
 800cce8:	e7d3      	b.n	800cc92 <udp_sendto+0x1a>
    return ERR_RTE;
 800ccea:	f06f 0003 	mvn.w	r0, #3
 800ccee:	e7d8      	b.n	800cca2 <udp_sendto+0x2a>
 800ccf0:	0802e284 	.word	0x0802e284
 800ccf4:	0802e498 	.word	0x0802e498
 800ccf8:	0802bc48 	.word	0x0802bc48
 800ccfc:	0802e4b0 	.word	0x0802e4b0
 800cd00:	0802e4cc 	.word	0x0802e4cc

0800cd04 <udp_send>:
{
 800cd04:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd06:	b128      	cbz	r0, 800cd14 <udp_send+0x10>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cd08:	b171      	cbz	r1, 800cd28 <udp_send+0x24>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cd0a:	8a83      	ldrh	r3, [r0, #20]
 800cd0c:	1d02      	adds	r2, r0, #4
 800cd0e:	f7ff ffb3 	bl	800cc78 <udp_sendto>
}
 800cd12:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd14:	4b09      	ldr	r3, [pc, #36]	; (800cd3c <udp_send+0x38>)
 800cd16:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cd1a:	4909      	ldr	r1, [pc, #36]	; (800cd40 <udp_send+0x3c>)
 800cd1c:	4809      	ldr	r0, [pc, #36]	; (800cd44 <udp_send+0x40>)
 800cd1e:	f01d ffd5 	bl	802accc <iprintf>
 800cd22:	f06f 000f 	mvn.w	r0, #15
 800cd26:	e7f4      	b.n	800cd12 <udp_send+0xe>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cd28:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <udp_send+0x38>)
 800cd2a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800cd2e:	4906      	ldr	r1, [pc, #24]	; (800cd48 <udp_send+0x44>)
 800cd30:	4804      	ldr	r0, [pc, #16]	; (800cd44 <udp_send+0x40>)
 800cd32:	f01d ffcb 	bl	802accc <iprintf>
 800cd36:	f06f 000f 	mvn.w	r0, #15
 800cd3a:	e7ea      	b.n	800cd12 <udp_send+0xe>
 800cd3c:	0802e284 	.word	0x0802e284
 800cd40:	0802e4e8 	.word	0x0802e4e8
 800cd44:	0802bc48 	.word	0x0802bc48
 800cd48:	0802e500 	.word	0x0802e500

0800cd4c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cd4c:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd4e:	b1c0      	cbz	r0, 800cd82 <udp_connect+0x36>
 800cd50:	460d      	mov	r5, r1
 800cd52:	4616      	mov	r6, r2
 800cd54:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cd56:	b1f1      	cbz	r1, 800cd96 <udp_connect+0x4a>

  if (pcb->local_port == 0) {
 800cd58:	8a43      	ldrh	r3, [r0, #18]
 800cd5a:	b333      	cbz	r3, 800cdaa <udp_connect+0x5e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cd5c:	682b      	ldr	r3, [r5, #0]
 800cd5e:	6063      	str	r3, [r4, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800cd60:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800cd62:	7c23      	ldrb	r3, [r4, #16]
 800cd64:	f043 0304 	orr.w	r3, r3, #4
 800cd68:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cd6a:	4b17      	ldr	r3, [pc, #92]	; (800cdc8 <udp_connect+0x7c>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	b31a      	cbz	r2, 800cdb8 <udp_connect+0x6c>
    if (pcb == ipcb) {
 800cd70:	4294      	cmp	r4, r2
 800cd72:	d026      	beq.n	800cdc2 <udp_connect+0x76>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cd74:	4613      	mov	r3, r2
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	b1f3      	cbz	r3, 800cdb8 <udp_connect+0x6c>
    if (pcb == ipcb) {
 800cd7a:	429c      	cmp	r4, r3
 800cd7c:	d1fb      	bne.n	800cd76 <udp_connect+0x2a>
      /* already on the list, just return */
      return ERR_OK;
 800cd7e:	2000      	movs	r0, #0
 800cd80:	e01e      	b.n	800cdc0 <udp_connect+0x74>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <udp_connect+0x80>)
 800cd84:	f240 4235 	movw	r2, #1077	; 0x435
 800cd88:	4911      	ldr	r1, [pc, #68]	; (800cdd0 <udp_connect+0x84>)
 800cd8a:	4812      	ldr	r0, [pc, #72]	; (800cdd4 <udp_connect+0x88>)
 800cd8c:	f01d ff9e 	bl	802accc <iprintf>
 800cd90:	f06f 000f 	mvn.w	r0, #15
 800cd94:	e014      	b.n	800cdc0 <udp_connect+0x74>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cd96:	4b0d      	ldr	r3, [pc, #52]	; (800cdcc <udp_connect+0x80>)
 800cd98:	f240 4236 	movw	r2, #1078	; 0x436
 800cd9c:	490e      	ldr	r1, [pc, #56]	; (800cdd8 <udp_connect+0x8c>)
 800cd9e:	480d      	ldr	r0, [pc, #52]	; (800cdd4 <udp_connect+0x88>)
 800cda0:	f01d ff94 	bl	802accc <iprintf>
 800cda4:	f06f 000f 	mvn.w	r0, #15
 800cda8:	e00a      	b.n	800cdc0 <udp_connect+0x74>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cdaa:	2200      	movs	r2, #0
 800cdac:	4601      	mov	r1, r0
 800cdae:	f7ff fdd3 	bl	800c958 <udp_bind>
    if (err != ERR_OK) {
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d0d2      	beq.n	800cd5c <udp_connect+0x10>
 800cdb6:	e003      	b.n	800cdc0 <udp_connect+0x74>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cdb8:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800cdba:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <udp_connect+0x7c>)
 800cdbc:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800cdbe:	2000      	movs	r0, #0
}
 800cdc0:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e7fc      	b.n	800cdc0 <udp_connect+0x74>
 800cdc6:	bf00      	nop
 800cdc8:	2001464c 	.word	0x2001464c
 800cdcc:	0802e284 	.word	0x0802e284
 800cdd0:	0802e518 	.word	0x0802e518
 800cdd4:	0802bc48 	.word	0x0802bc48
 800cdd8:	0802e534 	.word	0x0802e534

0800cddc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800cddc:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800cdde:	b140      	cbz	r0, 800cdf2 <udp_disconnect+0x16>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800cde0:	2200      	movs	r2, #0
 800cde2:	6042      	str	r2, [r0, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800cde4:	8282      	strh	r2, [r0, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800cde6:	7202      	strb	r2, [r0, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800cde8:	7c02      	ldrb	r2, [r0, #16]
 800cdea:	f022 0204 	bic.w	r2, r2, #4
 800cdee:	7402      	strb	r2, [r0, #16]
}
 800cdf0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800cdf2:	4b04      	ldr	r3, [pc, #16]	; (800ce04 <udp_disconnect+0x28>)
 800cdf4:	f240 426a 	movw	r2, #1130	; 0x46a
 800cdf8:	4903      	ldr	r1, [pc, #12]	; (800ce08 <udp_disconnect+0x2c>)
 800cdfa:	4804      	ldr	r0, [pc, #16]	; (800ce0c <udp_disconnect+0x30>)
 800cdfc:	f01d ff66 	bl	802accc <iprintf>
 800ce00:	e7f6      	b.n	800cdf0 <udp_disconnect+0x14>
 800ce02:	bf00      	nop
 800ce04:	0802e284 	.word	0x0802e284
 800ce08:	0802e550 	.word	0x0802e550
 800ce0c:	0802bc48 	.word	0x0802bc48

0800ce10 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ce10:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ce12:	b110      	cbz	r0, 800ce1a <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ce14:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800ce16:	61c2      	str	r2, [r0, #28]
}
 800ce18:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ce1a:	4b04      	ldr	r3, [pc, #16]	; (800ce2c <udp_recv+0x1c>)
 800ce1c:	f240 428a 	movw	r2, #1162	; 0x48a
 800ce20:	4903      	ldr	r1, [pc, #12]	; (800ce30 <udp_recv+0x20>)
 800ce22:	4804      	ldr	r0, [pc, #16]	; (800ce34 <udp_recv+0x24>)
 800ce24:	f01d ff52 	bl	802accc <iprintf>
 800ce28:	e7f6      	b.n	800ce18 <udp_recv+0x8>
 800ce2a:	bf00      	nop
 800ce2c:	0802e284 	.word	0x0802e284
 800ce30:	0802e56c 	.word	0x0802e56c
 800ce34:	0802bc48 	.word	0x0802bc48

0800ce38 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ce38:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ce3a:	b168      	cbz	r0, 800ce58 <udp_remove+0x20>
 800ce3c:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ce3e:	4b0e      	ldr	r3, [pc, #56]	; (800ce78 <udp_remove+0x40>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4283      	cmp	r3, r0
 800ce44:	d010      	beq.n	800ce68 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ce46:	b193      	cbz	r3, 800ce6e <udp_remove+0x36>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ce48:	461a      	mov	r2, r3
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	b17b      	cbz	r3, 800ce6e <udp_remove+0x36>
 800ce4e:	428b      	cmp	r3, r1
 800ce50:	d1fa      	bne.n	800ce48 <udp_remove+0x10>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ce52:	68cb      	ldr	r3, [r1, #12]
 800ce54:	60d3      	str	r3, [r2, #12]
        break;
 800ce56:	e00a      	b.n	800ce6e <udp_remove+0x36>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ce58:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <udp_remove+0x44>)
 800ce5a:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ce5e:	4908      	ldr	r1, [pc, #32]	; (800ce80 <udp_remove+0x48>)
 800ce60:	4808      	ldr	r0, [pc, #32]	; (800ce84 <udp_remove+0x4c>)
 800ce62:	f01d ff33 	bl	802accc <iprintf>
 800ce66:	e005      	b.n	800ce74 <udp_remove+0x3c>
    udp_pcbs = udp_pcbs->next;
 800ce68:	68c2      	ldr	r2, [r0, #12]
 800ce6a:	4b03      	ldr	r3, [pc, #12]	; (800ce78 <udp_remove+0x40>)
 800ce6c:	601a      	str	r2, [r3, #0]
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ce6e:	2000      	movs	r0, #0
 800ce70:	f7fa fcb0 	bl	80077d4 <memp_free>
}
 800ce74:	bd08      	pop	{r3, pc}
 800ce76:	bf00      	nop
 800ce78:	2001464c 	.word	0x2001464c
 800ce7c:	0802e284 	.word	0x0802e284
 800ce80:	0802e584 	.word	0x0802e584
 800ce84:	0802bc48 	.word	0x0802bc48

0800ce88 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ce88:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	f7fa fc88 	bl	80077a0 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ce90:	4604      	mov	r4, r0
 800ce92:	b128      	cbz	r0, 800cea0 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ce94:	2220      	movs	r2, #32
 800ce96:	2100      	movs	r1, #0
 800ce98:	f01d fb77 	bl	802a58a <memset>
    pcb->ttl = UDP_TTL;
 800ce9c:	23ff      	movs	r3, #255	; 0xff
 800ce9e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800cea0:	4620      	mov	r0, r4
 800cea2:	bd10      	pop	{r4, pc}

0800cea4 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800cea4:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800cea6:	f7ff ffef 	bl	800ce88 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800ceaa:	bd08      	pop	{r3, pc}

0800ceac <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ceac:	b1a8      	cbz	r0, 800ceda <udp_netif_ip_addr_changed+0x2e>
 800ceae:	4602      	mov	r2, r0
 800ceb0:	6803      	ldr	r3, [r0, #0]
 800ceb2:	b193      	cbz	r3, 800ceda <udp_netif_ip_addr_changed+0x2e>
 800ceb4:	b189      	cbz	r1, 800ceda <udp_netif_ip_addr_changed+0x2e>
 800ceb6:	680b      	ldr	r3, [r1, #0]
 800ceb8:	b17b      	cbz	r3, 800ceda <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ceba:	4b08      	ldr	r3, [pc, #32]	; (800cedc <udp_netif_ip_addr_changed+0x30>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	b163      	cbz	r3, 800ceda <udp_netif_ip_addr_changed+0x2e>
{
 800cec0:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cec2:	681c      	ldr	r4, [r3, #0]
 800cec4:	6810      	ldr	r0, [r2, #0]
 800cec6:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cec8:	bf04      	itt	eq
 800ceca:	6808      	ldreq	r0, [r1, #0]
 800cecc:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1f6      	bne.n	800cec2 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800ced4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	4770      	bx	lr
 800cedc:	2001464c 	.word	0x2001464c

0800cee0 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800cee0:	7943      	ldrb	r3, [r0, #5]
 800cee2:	428b      	cmp	r3, r1
 800cee4:	d003      	beq.n	800ceee <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800cee6:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 800ceec:	8103      	strh	r3, [r0, #8]
  }
}
 800ceee:	4770      	bx	lr

0800cef0 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	4604      	mov	r4, r0
 800cef4:	460d      	mov	r5, r1
 800cef6:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cef8:	1c83      	adds	r3, r0, #2
 800cefa:	2b44      	cmp	r3, #68	; 0x44
 800cefc:	d807      	bhi.n	800cf0e <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800cefe:	0a33      	lsrs	r3, r6, #8
 800cf00:	552b      	strb	r3, [r5, r4]
 800cf02:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	54ee      	strb	r6, [r5, r3]
 800cf08:	1ca0      	adds	r0, r4, #2
  return options_out_len;
}
 800cf0a:	b280      	uxth	r0, r0
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cf0e:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <dhcp_option_short+0x30>)
 800cf10:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800cf14:	4903      	ldr	r1, [pc, #12]	; (800cf24 <dhcp_option_short+0x34>)
 800cf16:	4804      	ldr	r0, [pc, #16]	; (800cf28 <dhcp_option_short+0x38>)
 800cf18:	f01d fed8 	bl	802accc <iprintf>
 800cf1c:	e7ef      	b.n	800cefe <dhcp_option_short+0xe>
 800cf1e:	bf00      	nop
 800cf20:	0802e59c 	.word	0x0802e59c
 800cf24:	0802e5d4 	.word	0x0802e5d4
 800cf28:	0802bc48 	.word	0x0802bc48

0800cf2c <dhcp_option>:
{
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	4604      	mov	r4, r0
 800cf30:	460d      	mov	r5, r1
 800cf32:	4617      	mov	r7, r2
 800cf34:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cf36:	3302      	adds	r3, #2
 800cf38:	4403      	add	r3, r0
 800cf3a:	2b44      	cmp	r3, #68	; 0x44
 800cf3c:	d806      	bhi.n	800cf4c <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 800cf3e:	552f      	strb	r7, [r5, r4]
 800cf40:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	54ee      	strb	r6, [r5, r3]
 800cf46:	1ca0      	adds	r0, r4, #2
}
 800cf48:	b280      	uxth	r0, r0
 800cf4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cf4c:	4b03      	ldr	r3, [pc, #12]	; (800cf5c <dhcp_option+0x30>)
 800cf4e:	f240 529a 	movw	r2, #1434	; 0x59a
 800cf52:	4903      	ldr	r1, [pc, #12]	; (800cf60 <dhcp_option+0x34>)
 800cf54:	4803      	ldr	r0, [pc, #12]	; (800cf64 <dhcp_option+0x38>)
 800cf56:	f01d feb9 	bl	802accc <iprintf>
 800cf5a:	e7f0      	b.n	800cf3e <dhcp_option+0x12>
 800cf5c:	0802e59c 	.word	0x0802e59c
 800cf60:	0802e610 	.word	0x0802e610
 800cf64:	0802bc48 	.word	0x0802bc48

0800cf68 <dhcp_option_byte>:
{
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	460d      	mov	r5, r1
 800cf6e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cf70:	2843      	cmp	r0, #67	; 0x43
 800cf72:	d803      	bhi.n	800cf7c <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800cf74:	552e      	strb	r6, [r5, r4]
 800cf76:	1c60      	adds	r0, r4, #1
}
 800cf78:	b280      	uxth	r0, r0
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cf7c:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <dhcp_option_byte+0x24>)
 800cf7e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800cf82:	4903      	ldr	r1, [pc, #12]	; (800cf90 <dhcp_option_byte+0x28>)
 800cf84:	4803      	ldr	r0, [pc, #12]	; (800cf94 <dhcp_option_byte+0x2c>)
 800cf86:	f01d fea1 	bl	802accc <iprintf>
 800cf8a:	e7f3      	b.n	800cf74 <dhcp_option_byte+0xc>
 800cf8c:	0802e59c 	.word	0x0802e59c
 800cf90:	0802e654 	.word	0x0802e654
 800cf94:	0802bc48 	.word	0x0802bc48

0800cf98 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cfa0:	1d03      	adds	r3, r0, #4
 800cfa2:	2b44      	cmp	r3, #68	; 0x44
 800cfa4:	d80f      	bhi.n	800cfc6 <dhcp_option_long+0x2e>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800cfa6:	0e33      	lsrs	r3, r6, #24
 800cfa8:	552b      	strb	r3, [r5, r4]
 800cfaa:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	0c32      	lsrs	r2, r6, #16
 800cfb0:	54ea      	strb	r2, [r5, r3]
 800cfb2:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	0a32      	lsrs	r2, r6, #8
 800cfb8:	54ea      	strb	r2, [r5, r3]
 800cfba:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	54ee      	strb	r6, [r5, r3]
 800cfc0:	1d20      	adds	r0, r4, #4
  return options_out_len;
}
 800cfc2:	b280      	uxth	r0, r0
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cfc6:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <dhcp_option_long+0x40>)
 800cfc8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800cfcc:	4903      	ldr	r1, [pc, #12]	; (800cfdc <dhcp_option_long+0x44>)
 800cfce:	4804      	ldr	r0, [pc, #16]	; (800cfe0 <dhcp_option_long+0x48>)
 800cfd0:	f01d fe7c 	bl	802accc <iprintf>
 800cfd4:	e7e7      	b.n	800cfa6 <dhcp_option_long+0xe>
 800cfd6:	bf00      	nop
 800cfd8:	0802e59c 	.word	0x0802e59c
 800cfdc:	0802e68c 	.word	0x0802e68c
 800cfe0:	0802bc48 	.word	0x0802bc48

0800cfe4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800cfe8:	4681      	mov	r9, r0
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d036      	beq.n	800d05c <dhcp_create_msg+0x78>
 800cfee:	460d      	mov	r5, r1
 800cff0:	4616      	mov	r6, r2
 800cff2:	461f      	mov	r7, r3
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800cff4:	2900      	cmp	r1, #0
 800cff6:	d03a      	beq.n	800d06e <dhcp_create_msg+0x8a>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800cff8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cffc:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d000:	2036      	movs	r0, #54	; 0x36
 800d002:	f7fa ff2b 	bl	8007e5c <pbuf_alloc>
  if (p_out == NULL) {
 800d006:	4680      	mov	r8, r0
 800d008:	2800      	cmp	r0, #0
 800d00a:	f000 8083 	beq.w	800d114 <dhcp_create_msg+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d00e:	8943      	ldrh	r3, [r0, #10]
 800d010:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d014:	d334      	bcc.n	800d080 <dhcp_create_msg+0x9c>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d016:	2e03      	cmp	r6, #3
 800d018:	d03a      	beq.n	800d090 <dhcp_create_msg+0xac>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d01a:	79ab      	ldrb	r3, [r5, #6]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d07c      	beq.n	800d11a <dhcp_create_msg+0x136>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d020:	4b40      	ldr	r3, [pc, #256]	; (800d124 <dhcp_create_msg+0x140>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	602b      	str	r3, [r5, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d026:	f8d8 4004 	ldr.w	r4, [r8, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d02a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d02e:	2100      	movs	r1, #0
 800d030:	4620      	mov	r0, r4
 800d032:	f01d faaa 	bl	802a58a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d036:	2301      	movs	r3, #1
 800d038:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d03a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d03c:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 800d040:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d042:	6828      	ldr	r0, [r5, #0]
 800d044:	f7f9 fb41 	bl	80066ca <lwip_htonl>
 800d048:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d04a:	2e04      	cmp	r6, #4
 800d04c:	d03a      	beq.n	800d0c4 <dhcp_create_msg+0xe0>
 800d04e:	1ff3      	subs	r3, r6, #7
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b01      	cmp	r3, #1
 800d054:	d936      	bls.n	800d0c4 <dhcp_create_msg+0xe0>
 800d056:	2e03      	cmp	r6, #3
 800d058:	d137      	bne.n	800d0ca <dhcp_create_msg+0xe6>
 800d05a:	e02e      	b.n	800d0ba <dhcp_create_msg+0xd6>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d05c:	4b32      	ldr	r3, [pc, #200]	; (800d128 <dhcp_create_msg+0x144>)
 800d05e:	f240 7269 	movw	r2, #1897	; 0x769
 800d062:	4932      	ldr	r1, [pc, #200]	; (800d12c <dhcp_create_msg+0x148>)
 800d064:	4832      	ldr	r0, [pc, #200]	; (800d130 <dhcp_create_msg+0x14c>)
 800d066:	f01d fe31 	bl	802accc <iprintf>
 800d06a:	46c8      	mov	r8, r9
 800d06c:	e052      	b.n	800d114 <dhcp_create_msg+0x130>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d06e:	4b2e      	ldr	r3, [pc, #184]	; (800d128 <dhcp_create_msg+0x144>)
 800d070:	f240 726a 	movw	r2, #1898	; 0x76a
 800d074:	492f      	ldr	r1, [pc, #188]	; (800d134 <dhcp_create_msg+0x150>)
 800d076:	482e      	ldr	r0, [pc, #184]	; (800d130 <dhcp_create_msg+0x14c>)
 800d078:	f01d fe28 	bl	802accc <iprintf>
 800d07c:	46a8      	mov	r8, r5
 800d07e:	e049      	b.n	800d114 <dhcp_create_msg+0x130>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d080:	4b29      	ldr	r3, [pc, #164]	; (800d128 <dhcp_create_msg+0x144>)
 800d082:	f240 7271 	movw	r2, #1905	; 0x771
 800d086:	492c      	ldr	r1, [pc, #176]	; (800d138 <dhcp_create_msg+0x154>)
 800d088:	4829      	ldr	r0, [pc, #164]	; (800d130 <dhcp_create_msg+0x14c>)
 800d08a:	f01d fe1f 	bl	802accc <iprintf>
 800d08e:	e7c2      	b.n	800d016 <dhcp_create_msg+0x32>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d090:	796b      	ldrb	r3, [r5, #5]
 800d092:	2b03      	cmp	r3, #3
 800d094:	d0c1      	beq.n	800d01a <dhcp_create_msg+0x36>
  msg_out = (struct dhcp_msg *)p_out->payload;
 800d096:	f8d8 4004 	ldr.w	r4, [r8, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d09a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d09e:	2100      	movs	r1, #0
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f01d fa72 	bl	802a58a <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d0aa:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d0ac:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 800d0b0:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d0b2:	6828      	ldr	r0, [r5, #0]
 800d0b4:	f7f9 fb09 	bl	80066ca <lwip_htonl>
 800d0b8:	6060      	str	r0, [r4, #4]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d0ba:	796b      	ldrb	r3, [r5, #5]
 800d0bc:	3b04      	subs	r3, #4
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d802      	bhi.n	800d0ca <dhcp_create_msg+0xe6>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d0c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d0c8:	60e3      	str	r3, [r4, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d0ca:	f109 002a 	add.w	r0, r9, #42	; 0x2a
 800d0ce:	f104 011c 	add.w	r1, r4, #28
 800d0d2:	f109 0330 	add.w	r3, r9, #48	; 0x30
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d0d6:	f810 5b01 	ldrb.w	r5, [r0], #1
 800d0da:	f801 5b01 	strb.w	r5, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d0de:	4298      	cmp	r0, r3
 800d0e0:	d1f9      	bne.n	800d0d6 <dhcp_create_msg+0xf2>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d0e2:	2363      	movs	r3, #99	; 0x63
 800d0e4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800d0e8:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800d0ec:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 800d0f0:	2253      	movs	r2, #83	; 0x53
 800d0f2:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 800d0f6:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d0fa:	34f0      	adds	r4, #240	; 0xf0
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	2235      	movs	r2, #53	; 0x35
 800d100:	4621      	mov	r1, r4
 800d102:	2000      	movs	r0, #0
 800d104:	f7ff ff12 	bl	800cf2c <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d108:	4632      	mov	r2, r6
 800d10a:	4621      	mov	r1, r4
 800d10c:	f7ff ff2c 	bl	800cf68 <dhcp_option_byte>
  if (options_out_len) {
 800d110:	b107      	cbz	r7, 800d114 <dhcp_create_msg+0x130>
    *options_out_len = options_out_len_loc;
 800d112:	8038      	strh	r0, [r7, #0]
  }
  return p_out;
}
 800d114:	4640      	mov	r0, r8
 800d116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 800d11a:	f01d fe93 	bl	802ae44 <rand>
 800d11e:	4b01      	ldr	r3, [pc, #4]	; (800d124 <dhcp_create_msg+0x140>)
 800d120:	6018      	str	r0, [r3, #0]
 800d122:	e77d      	b.n	800d020 <dhcp_create_msg+0x3c>
 800d124:	20010798 	.word	0x20010798
 800d128:	0802e59c 	.word	0x0802e59c
 800d12c:	0802e6c8 	.word	0x0802e6c8
 800d130:	0802bc48 	.word	0x0802bc48
 800d134:	0802e6e8 	.word	0x0802e6e8
 800d138:	0802e708 	.word	0x0802e708

0800d13c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4604      	mov	r4, r0
 800d140:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 800d142:	1c66      	adds	r6, r4, #1
 800d144:	b2b6      	uxth	r6, r6
 800d146:	23ff      	movs	r3, #255	; 0xff
 800d148:	550b      	strb	r3, [r1, r4]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d14a:	1e73      	subs	r3, r6, #1
 800d14c:	4419      	add	r1, r3
  options[options_out_len++] = DHCP_OPTION_END;
 800d14e:	4633      	mov	r3, r6
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d150:	2500      	movs	r5, #0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d152:	e003      	b.n	800d15c <dhcp_option_trailer+0x20>
    options[options_out_len++] = 0;
 800d154:	3301      	adds	r3, #1
 800d156:	b29b      	uxth	r3, r3
 800d158:	f801 5f01 	strb.w	r5, [r1, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d15c:	2b43      	cmp	r3, #67	; 0x43
 800d15e:	d9f9      	bls.n	800d154 <dhcp_option_trailer+0x18>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d160:	f1c4 0143 	rsb	r1, r4, #67	; 0x43
 800d164:	2e44      	cmp	r6, #68	; 0x44
 800d166:	bf88      	it	hi
 800d168:	2100      	movhi	r1, #0
 800d16a:	34f1      	adds	r4, #241	; 0xf1
 800d16c:	4421      	add	r1, r4
 800d16e:	b289      	uxth	r1, r1
 800d170:	f7fa ff1c 	bl	8007fac <pbuf_realloc>
}
 800d174:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d178 <dhcp_reboot>:
{
 800d178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d17c:	b085      	sub	sp, #20
 800d17e:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d180:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d182:	2103      	movs	r1, #3
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff feab 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d18a:	f10d 030e 	add.w	r3, sp, #14
 800d18e:	2203      	movs	r2, #3
 800d190:	4621      	mov	r1, r4
 800d192:	4638      	mov	r0, r7
 800d194:	f7ff ff26 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800d198:	2800      	cmp	r0, #0
 800d19a:	d064      	beq.n	800d266 <dhcp_reboot+0xee>
 800d19c:	4680      	mov	r8, r0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d19e:	6846      	ldr	r6, [r0, #4]
 800d1a0:	36f0      	adds	r6, #240	; 0xf0
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	2239      	movs	r2, #57	; 0x39
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d1ac:	f7ff febe 	bl	800cf2c <dhcp_option>
 800d1b0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d1b4:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	f7ff fe99 	bl	800cef0 <dhcp_option_short>
 800d1be:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	2232      	movs	r2, #50	; 0x32
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	f7ff feb0 	bl	800cf2c <dhcp_option>
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d1d2:	69e0      	ldr	r0, [r4, #28]
 800d1d4:	f7f9 fa79 	bl	80066ca <lwip_htonl>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	f7ff fedb 	bl	800cf98 <dhcp_option_long>
 800d1e2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d1e6:	2304      	movs	r3, #4
 800d1e8:	2237      	movs	r2, #55	; 0x37
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	f7ff fe9e 	bl	800cf2c <dhcp_option>
 800d1f0:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d1f4:	4d20      	ldr	r5, [pc, #128]	; (800d278 <dhcp_reboot+0x100>)
 800d1f6:	f105 0904 	add.w	r9, r5, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d1fa:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d1fe:	4631      	mov	r1, r6
 800d200:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d204:	f7ff feb0 	bl	800cf68 <dhcp_option_byte>
 800d208:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d20c:	454d      	cmp	r5, r9
 800d20e:	d1f4      	bne.n	800d1fa <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d210:	4642      	mov	r2, r8
 800d212:	4631      	mov	r1, r6
 800d214:	f7ff ff92 	bl	800d13c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d218:	9700      	str	r7, [sp, #0]
 800d21a:	2343      	movs	r3, #67	; 0x43
 800d21c:	4a17      	ldr	r2, [pc, #92]	; (800d27c <dhcp_reboot+0x104>)
 800d21e:	4641      	mov	r1, r8
 800d220:	4817      	ldr	r0, [pc, #92]	; (800d280 <dhcp_reboot+0x108>)
 800d222:	6800      	ldr	r0, [r0, #0]
 800d224:	f7ff fcd6 	bl	800cbd4 <udp_sendto_if>
 800d228:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800d22a:	4640      	mov	r0, r8
 800d22c:	f7fa fda6 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800d230:	79a3      	ldrb	r3, [r4, #6]
 800d232:	2bff      	cmp	r3, #255	; 0xff
 800d234:	d01a      	beq.n	800d26c <dhcp_reboot+0xf4>
    dhcp->tries++;
 800d236:	3301      	adds	r3, #1
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d23c:	2b09      	cmp	r3, #9
 800d23e:	d818      	bhi.n	800d272 <dhcp_reboot+0xfa>
 800d240:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d244:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d248:	00db      	lsls	r3, r3, #3
 800d24a:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d24c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d250:	4a0c      	ldr	r2, [pc, #48]	; (800d284 <dhcp_reboot+0x10c>)
 800d252:	fb82 1203 	smull	r1, r2, r2, r3
 800d256:	17db      	asrs	r3, r3, #31
 800d258:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d25c:	8123      	strh	r3, [r4, #8]
}
 800d25e:	4628      	mov	r0, r5
 800d260:	b005      	add	sp, #20
 800d262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 800d266:	f04f 35ff 	mov.w	r5, #4294967295
 800d26a:	e7e1      	b.n	800d230 <dhcp_reboot+0xb8>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d26c:	f242 7310 	movw	r3, #10000	; 0x2710
 800d270:	e7ec      	b.n	800d24c <dhcp_reboot+0xd4>
 800d272:	f242 7310 	movw	r3, #10000	; 0x2710
 800d276:	e7e9      	b.n	800d24c <dhcp_reboot+0xd4>
 800d278:	0802e924 	.word	0x0802e924
 800d27c:	0802ec54 	.word	0x0802ec54
 800d280:	20010790 	.word	0x20010790
 800d284:	10624dd3 	.word	0x10624dd3

0800d288 <dhcp_select>:
{
 800d288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d28c:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d28e:	2800      	cmp	r0, #0
 800d290:	f000 808d 	beq.w	800d3ae <dhcp_select+0x126>
 800d294:	4607      	mov	r7, r0
  dhcp = netif_dhcp_data(netif);
 800d296:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d298:	2c00      	cmp	r4, #0
 800d29a:	f000 8092 	beq.w	800d3c2 <dhcp_select+0x13a>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d29e:	2101      	movs	r1, #1
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f7ff fe1d 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d2a6:	f10d 030e 	add.w	r3, sp, #14
 800d2aa:	2203      	movs	r2, #3
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f7ff fe98 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800d2b4:	4680      	mov	r8, r0
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	f000 808d 	beq.w	800d3d6 <dhcp_select+0x14e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d2bc:	6845      	ldr	r5, [r0, #4]
 800d2be:	35f0      	adds	r5, #240	; 0xf0
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	2239      	movs	r2, #57	; 0x39
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d2ca:	f7ff fe2f 	bl	800cf2c <dhcp_option>
 800d2ce:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d2d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7ff fe0b 	bl	800cef0 <dhcp_option_short>
 800d2da:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d2de:	2304      	movs	r3, #4
 800d2e0:	2232      	movs	r2, #50	; 0x32
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	f7ff fe22 	bl	800cf2c <dhcp_option>
 800d2e8:	4606      	mov	r6, r0
 800d2ea:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d2ee:	69e0      	ldr	r0, [r4, #28]
 800d2f0:	f7f9 f9eb 	bl	80066ca <lwip_htonl>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7ff fe4d 	bl	800cf98 <dhcp_option_long>
 800d2fe:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d302:	2304      	movs	r3, #4
 800d304:	2236      	movs	r2, #54	; 0x36
 800d306:	4629      	mov	r1, r5
 800d308:	f7ff fe10 	bl	800cf2c <dhcp_option>
 800d30c:	4606      	mov	r6, r0
 800d30e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d312:	69a0      	ldr	r0, [r4, #24]
 800d314:	f7f9 f9d9 	bl	80066ca <lwip_htonl>
 800d318:	4602      	mov	r2, r0
 800d31a:	4629      	mov	r1, r5
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff fe3b 	bl	800cf98 <dhcp_option_long>
 800d322:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d326:	2304      	movs	r3, #4
 800d328:	2237      	movs	r2, #55	; 0x37
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7ff fdfe 	bl	800cf2c <dhcp_option>
 800d330:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d334:	4e2c      	ldr	r6, [pc, #176]	; (800d3e8 <dhcp_select+0x160>)
 800d336:	f106 0904 	add.w	r9, r6, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d33a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800d33e:	4629      	mov	r1, r5
 800d340:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d344:	f7ff fe10 	bl	800cf68 <dhcp_option_byte>
 800d348:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d34c:	454e      	cmp	r6, r9
 800d34e:	d1f4      	bne.n	800d33a <dhcp_select+0xb2>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d350:	4642      	mov	r2, r8
 800d352:	4629      	mov	r1, r5
 800d354:	f7ff fef2 	bl	800d13c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d358:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <dhcp_select+0x164>)
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	9700      	str	r7, [sp, #0]
 800d35e:	2343      	movs	r3, #67	; 0x43
 800d360:	4a23      	ldr	r2, [pc, #140]	; (800d3f0 <dhcp_select+0x168>)
 800d362:	4641      	mov	r1, r8
 800d364:	4823      	ldr	r0, [pc, #140]	; (800d3f4 <dhcp_select+0x16c>)
 800d366:	6800      	ldr	r0, [r0, #0]
 800d368:	f7ff fb7c 	bl	800ca64 <udp_sendto_if_src>
 800d36c:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800d36e:	4640      	mov	r0, r8
 800d370:	f7fa fd04 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800d374:	79a3      	ldrb	r3, [r4, #6]
 800d376:	2bff      	cmp	r3, #255	; 0xff
 800d378:	d030      	beq.n	800d3dc <dhcp_select+0x154>
    dhcp->tries++;
 800d37a:	3301      	adds	r3, #1
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	71a2      	strb	r2, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d380:	2a05      	cmp	r2, #5
 800d382:	d82e      	bhi.n	800d3e2 <dhcp_select+0x15a>
 800d384:	2301      	movs	r3, #1
 800d386:	4093      	lsls	r3, r2
 800d388:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d38c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d394:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d398:	4a17      	ldr	r2, [pc, #92]	; (800d3f8 <dhcp_select+0x170>)
 800d39a:	fb82 1203 	smull	r1, r2, r2, r3
 800d39e:	17db      	asrs	r3, r3, #31
 800d3a0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d3a4:	8123      	strh	r3, [r4, #8]
}
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	b005      	add	sp, #20
 800d3aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d3ae:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <dhcp_select+0x174>)
 800d3b0:	f240 1277 	movw	r2, #375	; 0x177
 800d3b4:	4912      	ldr	r1, [pc, #72]	; (800d400 <dhcp_select+0x178>)
 800d3b6:	4813      	ldr	r0, [pc, #76]	; (800d404 <dhcp_select+0x17c>)
 800d3b8:	f01d fc88 	bl	802accc <iprintf>
 800d3bc:	f06f 050f 	mvn.w	r5, #15
 800d3c0:	e7f1      	b.n	800d3a6 <dhcp_select+0x11e>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d3c2:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <dhcp_select+0x174>)
 800d3c4:	f240 1279 	movw	r2, #377	; 0x179
 800d3c8:	490f      	ldr	r1, [pc, #60]	; (800d408 <dhcp_select+0x180>)
 800d3ca:	480e      	ldr	r0, [pc, #56]	; (800d404 <dhcp_select+0x17c>)
 800d3cc:	f01d fc7e 	bl	802accc <iprintf>
 800d3d0:	f06f 0505 	mvn.w	r5, #5
 800d3d4:	e7e7      	b.n	800d3a6 <dhcp_select+0x11e>
    result = ERR_MEM;
 800d3d6:	f04f 35ff 	mov.w	r5, #4294967295
 800d3da:	e7cb      	b.n	800d374 <dhcp_select+0xec>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d3dc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d3e0:	e7d8      	b.n	800d394 <dhcp_select+0x10c>
 800d3e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d3e6:	e7d5      	b.n	800d394 <dhcp_select+0x10c>
 800d3e8:	0802e924 	.word	0x0802e924
 800d3ec:	0802ec50 	.word	0x0802ec50
 800d3f0:	0802ec54 	.word	0x0802ec54
 800d3f4:	20010790 	.word	0x20010790
 800d3f8:	10624dd3 	.word	0x10624dd3
 800d3fc:	0802e59c 	.word	0x0802e59c
 800d400:	0802e748 	.word	0x0802e748
 800d404:	0802bc48 	.word	0x0802bc48
 800d408:	0802e764 	.word	0x0802e764

0800d40c <dhcp_discover>:
{
 800d40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d410:	b085      	sub	sp, #20
 800d412:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d414:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d416:	2300      	movs	r3, #0
 800d418:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d41a:	2106      	movs	r1, #6
 800d41c:	4620      	mov	r0, r4
 800d41e:	f7ff fd5f 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d422:	f10d 030e 	add.w	r3, sp, #14
 800d426:	2201      	movs	r2, #1
 800d428:	4621      	mov	r1, r4
 800d42a:	4630      	mov	r0, r6
 800d42c:	f7ff fdda 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800d430:	2800      	cmp	r0, #0
 800d432:	d037      	beq.n	800d4a4 <dhcp_discover+0x98>
 800d434:	4680      	mov	r8, r0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d436:	6847      	ldr	r7, [r0, #4]
 800d438:	37f0      	adds	r7, #240	; 0xf0
 800d43a:	2302      	movs	r3, #2
 800d43c:	2239      	movs	r2, #57	; 0x39
 800d43e:	4639      	mov	r1, r7
 800d440:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d444:	f7ff fd72 	bl	800cf2c <dhcp_option>
 800d448:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d44c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 800d44e:	4639      	mov	r1, r7
 800d450:	f7ff fd4e 	bl	800cef0 <dhcp_option_short>
 800d454:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d458:	2304      	movs	r3, #4
 800d45a:	2237      	movs	r2, #55	; 0x37
 800d45c:	4639      	mov	r1, r7
 800d45e:	f7ff fd65 	bl	800cf2c <dhcp_option>
 800d462:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d466:	4d21      	ldr	r5, [pc, #132]	; (800d4ec <dhcp_discover+0xe0>)
 800d468:	f105 0904 	add.w	r9, r5, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d46c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800d470:	4639      	mov	r1, r7
 800d472:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d476:	f7ff fd77 	bl	800cf68 <dhcp_option_byte>
 800d47a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d47e:	454d      	cmp	r5, r9
 800d480:	d1f4      	bne.n	800d46c <dhcp_discover+0x60>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d482:	4642      	mov	r2, r8
 800d484:	4639      	mov	r1, r7
 800d486:	f7ff fe59 	bl	800d13c <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d48a:	4b19      	ldr	r3, [pc, #100]	; (800d4f0 <dhcp_discover+0xe4>)
 800d48c:	9301      	str	r3, [sp, #4]
 800d48e:	9600      	str	r6, [sp, #0]
 800d490:	2343      	movs	r3, #67	; 0x43
 800d492:	4a18      	ldr	r2, [pc, #96]	; (800d4f4 <dhcp_discover+0xe8>)
 800d494:	4641      	mov	r1, r8
 800d496:	4818      	ldr	r0, [pc, #96]	; (800d4f8 <dhcp_discover+0xec>)
 800d498:	6800      	ldr	r0, [r0, #0]
 800d49a:	f7ff fae3 	bl	800ca64 <udp_sendto_if_src>
    pbuf_free(p_out);
 800d49e:	4640      	mov	r0, r8
 800d4a0:	f7fa fc6c 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800d4a4:	79a3      	ldrb	r3, [r4, #6]
 800d4a6:	2bff      	cmp	r3, #255	; 0xff
 800d4a8:	d019      	beq.n	800d4de <dhcp_discover+0xd2>
    dhcp->tries++;
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	71a2      	strb	r2, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d4b0:	2a05      	cmp	r2, #5
 800d4b2:	d817      	bhi.n	800d4e4 <dhcp_discover+0xd8>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	4093      	lsls	r3, r2
 800d4b8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d4bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d4c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d4c8:	4a0c      	ldr	r2, [pc, #48]	; (800d4fc <dhcp_discover+0xf0>)
 800d4ca:	fb82 1203 	smull	r1, r2, r2, r3
 800d4ce:	17db      	asrs	r3, r3, #31
 800d4d0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d4d4:	8123      	strh	r3, [r4, #8]
}
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	b005      	add	sp, #20
 800d4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d4de:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d4e2:	e7ef      	b.n	800d4c4 <dhcp_discover+0xb8>
 800d4e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d4e8:	e7ec      	b.n	800d4c4 <dhcp_discover+0xb8>
 800d4ea:	bf00      	nop
 800d4ec:	0802e924 	.word	0x0802e924
 800d4f0:	0802ec50 	.word	0x0802ec50
 800d4f4:	0802ec54 	.word	0x0802ec54
 800d4f8:	20010790 	.word	0x20010790
 800d4fc:	10624dd3 	.word	0x10624dd3

0800d500 <dhcp_check>:
{
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d504:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d506:	2108      	movs	r1, #8
 800d508:	4620      	mov	r0, r4
 800d50a:	f7ff fce9 	bl	800cee0 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d50e:	2200      	movs	r2, #0
 800d510:	f104 011c 	add.w	r1, r4, #28
 800d514:	4628      	mov	r0, r5
 800d516:	f001 fabd 	bl	800ea94 <etharp_query>
  if (dhcp->tries < 255) {
 800d51a:	79a3      	ldrb	r3, [r4, #6]
 800d51c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800d51e:	bf1c      	itt	ne
 800d520:	3301      	addne	r3, #1
 800d522:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d524:	2301      	movs	r3, #1
 800d526:	8123      	strh	r3, [r4, #8]
}
 800d528:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d52c <dhcp_bind>:
{
 800d52c:	b530      	push	{r4, r5, lr}
 800d52e:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d530:	2800      	cmp	r0, #0
 800d532:	d05d      	beq.n	800d5f0 <dhcp_bind+0xc4>
 800d534:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800d536:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d538:	2c00      	cmp	r4, #0
 800d53a:	d061      	beq.n	800d600 <dhcp_bind+0xd4>
  dhcp->lease_used = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d546:	d00c      	beq.n	800d562 <dhcp_bind+0x36>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d548:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800d54a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800d54e:	d27d      	bcs.n	800d64c <dhcp_bind+0x120>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d550:	4a40      	ldr	r2, [pc, #256]	; (800d654 <dhcp_bind+0x128>)
 800d552:	fba2 2303 	umull	r2, r3, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 800d556:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t0_timeout == 0) {
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d158      	bne.n	800d610 <dhcp_bind+0xe4>
      dhcp->t0_timeout = 1;
 800d55e:	2301      	movs	r3, #1
 800d560:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d568:	d00e      	beq.n	800d588 <dhcp_bind+0x5c>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d56a:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800d56c:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800d570:	d268      	bcs.n	800d644 <dhcp_bind+0x118>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d572:	4a38      	ldr	r2, [pc, #224]	; (800d654 <dhcp_bind+0x128>)
 800d574:	fba2 2303 	umull	r2, r3, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 800d578:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t1_timeout == 0) {
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d149      	bne.n	800d614 <dhcp_bind+0xe8>
      dhcp->t1_timeout = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d584:	8963      	ldrh	r3, [r4, #10]
 800d586:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58e:	d00e      	beq.n	800d5ae <dhcp_bind+0x82>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d590:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800d592:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800d596:	d251      	bcs.n	800d63c <dhcp_bind+0x110>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d598:	4a2e      	ldr	r2, [pc, #184]	; (800d654 <dhcp_bind+0x128>)
 800d59a:	fba2 2303 	umull	r2, r3, r2, r3
    dhcp->t2_timeout = (u16_t)timeout;
 800d59e:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d138      	bne.n	800d618 <dhcp_bind+0xec>
      dhcp->t2_timeout = 1;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	8962      	ldrh	r2, [r4, #10]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d302      	bcc.n	800d5bc <dhcp_bind+0x90>
 800d5b6:	b10b      	cbz	r3, 800d5bc <dhcp_bind+0x90>
    dhcp->t1_timeout = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 800d5bc:	79e3      	ldrb	r3, [r4, #7]
 800d5be:	b36b      	cbz	r3, 800d61c <dhcp_bind+0xf0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800d5c0:	6a23      	ldr	r3, [r4, #32]
 800d5c2:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800d5c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c6:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800d5c8:	b92b      	cbnz	r3, 800d5d6 <dhcp_bind+0xaa>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800d5ca:	69e3      	ldr	r3, [r4, #28]
 800d5cc:	9a01      	ldr	r2, [sp, #4]
 800d5ce:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800d5d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d5d4:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800d5d6:	210a      	movs	r1, #10
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f7ff fc81 	bl	800cee0 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800d5de:	466b      	mov	r3, sp
 800d5e0:	aa01      	add	r2, sp, #4
 800d5e2:	f104 011c 	add.w	r1, r4, #28
 800d5e6:	4628      	mov	r0, r5
 800d5e8:	f7fa f970 	bl	80078cc <netif_set_addr>
}
 800d5ec:	b003      	add	sp, #12
 800d5ee:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d5f0:	4b19      	ldr	r3, [pc, #100]	; (800d658 <dhcp_bind+0x12c>)
 800d5f2:	f240 4215 	movw	r2, #1045	; 0x415
 800d5f6:	4919      	ldr	r1, [pc, #100]	; (800d65c <dhcp_bind+0x130>)
 800d5f8:	4819      	ldr	r0, [pc, #100]	; (800d660 <dhcp_bind+0x134>)
 800d5fa:	f01d fb67 	bl	802accc <iprintf>
 800d5fe:	e7f5      	b.n	800d5ec <dhcp_bind+0xc0>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d600:	4b15      	ldr	r3, [pc, #84]	; (800d658 <dhcp_bind+0x12c>)
 800d602:	f240 4217 	movw	r2, #1047	; 0x417
 800d606:	4917      	ldr	r1, [pc, #92]	; (800d664 <dhcp_bind+0x138>)
 800d608:	4815      	ldr	r0, [pc, #84]	; (800d660 <dhcp_bind+0x134>)
 800d60a:	f01d fb5f 	bl	802accc <iprintf>
 800d60e:	e7ed      	b.n	800d5ec <dhcp_bind+0xc0>
    dhcp->t0_timeout = (u16_t)timeout;
 800d610:	82a3      	strh	r3, [r4, #20]
 800d612:	e7a6      	b.n	800d562 <dhcp_bind+0x36>
    dhcp->t1_timeout = (u16_t)timeout;
 800d614:	8163      	strh	r3, [r4, #10]
 800d616:	e7b5      	b.n	800d584 <dhcp_bind+0x58>
    dhcp->t2_timeout = (u16_t)timeout;
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	e7c6      	b.n	800d5aa <dhcp_bind+0x7e>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800d61c:	7f22      	ldrb	r2, [r4, #28]
    if (first_octet <= 127) {
 800d61e:	f994 301c 	ldrsb.w	r3, [r4, #28]
 800d622:	2b00      	cmp	r3, #0
 800d624:	db02      	blt.n	800d62c <dhcp_bind+0x100>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800d626:	23ff      	movs	r3, #255	; 0xff
 800d628:	9301      	str	r3, [sp, #4]
 800d62a:	e7cb      	b.n	800d5c4 <dhcp_bind+0x98>
    } else if (first_octet >= 192) {
 800d62c:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800d62e:	bf8c      	ite	hi
 800d630:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800d634:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	e7c3      	b.n	800d5c4 <dhcp_bind+0x98>
    dhcp->t2_timeout = (u16_t)timeout;
 800d63c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d640:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 800d642:	e7b2      	b.n	800d5aa <dhcp_bind+0x7e>
    dhcp->t1_timeout = (u16_t)timeout;
 800d644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d648:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 800d64a:	e79b      	b.n	800d584 <dhcp_bind+0x58>
    dhcp->t0_timeout = (u16_t)timeout;
 800d64c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d650:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 800d652:	e786      	b.n	800d562 <dhcp_bind+0x36>
 800d654:	88888889 	.word	0x88888889
 800d658:	0802e59c 	.word	0x0802e59c
 800d65c:	0802e780 	.word	0x0802e780
 800d660:	0802bc48 	.word	0x0802bc48
 800d664:	0802e79c 	.word	0x0802e79c

0800d668 <dhcp_dec_pcb_refcount>:
{
 800d668:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d66a:	4b0c      	ldr	r3, [pc, #48]	; (800d69c <dhcp_dec_pcb_refcount+0x34>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	b133      	cbz	r3, 800d67e <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800d670:	4a0a      	ldr	r2, [pc, #40]	; (800d69c <dhcp_dec_pcb_refcount+0x34>)
 800d672:	7813      	ldrb	r3, [r2, #0]
 800d674:	3b01      	subs	r3, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800d67a:	b13b      	cbz	r3, 800d68c <dhcp_dec_pcb_refcount+0x24>
}
 800d67c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d67e:	4b08      	ldr	r3, [pc, #32]	; (800d6a0 <dhcp_dec_pcb_refcount+0x38>)
 800d680:	22ff      	movs	r2, #255	; 0xff
 800d682:	4908      	ldr	r1, [pc, #32]	; (800d6a4 <dhcp_dec_pcb_refcount+0x3c>)
 800d684:	4808      	ldr	r0, [pc, #32]	; (800d6a8 <dhcp_dec_pcb_refcount+0x40>)
 800d686:	f01d fb21 	bl	802accc <iprintf>
 800d68a:	e7f1      	b.n	800d670 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800d68c:	4c07      	ldr	r4, [pc, #28]	; (800d6ac <dhcp_dec_pcb_refcount+0x44>)
 800d68e:	6820      	ldr	r0, [r4, #0]
 800d690:	f7ff fbd2 	bl	800ce38 <udp_remove>
    dhcp_pcb = NULL;
 800d694:	2300      	movs	r3, #0
 800d696:	6023      	str	r3, [r4, #0]
}
 800d698:	e7f0      	b.n	800d67c <dhcp_dec_pcb_refcount+0x14>
 800d69a:	bf00      	nop
 800d69c:	20010794 	.word	0x20010794
 800d6a0:	0802e59c 	.word	0x0802e59c
 800d6a4:	0802e7b4 	.word	0x0802e7b4
 800d6a8:	0802bc48 	.word	0x0802bc48
 800d6ac:	20010790 	.word	0x20010790

0800d6b0 <dhcp_inc_pcb_refcount>:
{
 800d6b0:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800d6b2:	4b17      	ldr	r3, [pc, #92]	; (800d710 <dhcp_inc_pcb_refcount+0x60>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	bb0b      	cbnz	r3, 800d6fc <dhcp_inc_pcb_refcount+0x4c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d6b8:	4b16      	ldr	r3, [pc, #88]	; (800d714 <dhcp_inc_pcb_refcount+0x64>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	b12b      	cbz	r3, 800d6ca <dhcp_inc_pcb_refcount+0x1a>
 800d6be:	4b16      	ldr	r3, [pc, #88]	; (800d718 <dhcp_inc_pcb_refcount+0x68>)
 800d6c0:	22e5      	movs	r2, #229	; 0xe5
 800d6c2:	4916      	ldr	r1, [pc, #88]	; (800d71c <dhcp_inc_pcb_refcount+0x6c>)
 800d6c4:	4816      	ldr	r0, [pc, #88]	; (800d720 <dhcp_inc_pcb_refcount+0x70>)
 800d6c6:	f01d fb01 	bl	802accc <iprintf>
    dhcp_pcb = udp_new();
 800d6ca:	f7ff fbdd 	bl	800ce88 <udp_new>
 800d6ce:	4b11      	ldr	r3, [pc, #68]	; (800d714 <dhcp_inc_pcb_refcount+0x64>)
 800d6d0:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800d6d2:	b1c8      	cbz	r0, 800d708 <dhcp_inc_pcb_refcount+0x58>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d6d4:	7a43      	ldrb	r3, [r0, #9]
 800d6d6:	f043 0320 	orr.w	r3, r3, #32
 800d6da:	7243      	strb	r3, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d6dc:	4d11      	ldr	r5, [pc, #68]	; (800d724 <dhcp_inc_pcb_refcount+0x74>)
 800d6de:	2244      	movs	r2, #68	; 0x44
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7ff f939 	bl	800c958 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d6e6:	4c0b      	ldr	r4, [pc, #44]	; (800d714 <dhcp_inc_pcb_refcount+0x64>)
 800d6e8:	2243      	movs	r2, #67	; 0x43
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	f7ff fb2d 	bl	800cd4c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	490c      	ldr	r1, [pc, #48]	; (800d728 <dhcp_inc_pcb_refcount+0x78>)
 800d6f6:	6820      	ldr	r0, [r4, #0]
 800d6f8:	f7ff fb8a 	bl	800ce10 <udp_recv>
  dhcp_pcb_refcount++;
 800d6fc:	4a04      	ldr	r2, [pc, #16]	; (800d710 <dhcp_inc_pcb_refcount+0x60>)
 800d6fe:	7813      	ldrb	r3, [r2, #0]
 800d700:	3301      	adds	r3, #1
 800d702:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800d704:	2000      	movs	r0, #0
}
 800d706:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e7fb      	b.n	800d706 <dhcp_inc_pcb_refcount+0x56>
 800d70e:	bf00      	nop
 800d710:	20010794 	.word	0x20010794
 800d714:	20010790 	.word	0x20010790
 800d718:	0802e59c 	.word	0x0802e59c
 800d71c:	0802e7d8 	.word	0x0802e7d8
 800d720:	0802bc48 	.word	0x0802bc48
 800d724:	0802ec50 	.word	0x0802ec50
 800d728:	0800d7dd 	.word	0x0800d7dd

0800d72c <dhcp_handle_ack>:
{
 800d72c:	b510      	push	{r4, lr}
 800d72e:	b082      	sub	sp, #8
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d730:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d732:	2300      	movs	r3, #0
 800d734:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d736:	6263      	str	r3, [r4, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800d738:	4b26      	ldr	r3, [pc, #152]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d73a:	78db      	ldrb	r3, [r3, #3]
 800d73c:	b113      	cbz	r3, 800d744 <dhcp_handle_ack+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800d73e:	4b26      	ldr	r3, [pc, #152]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800d744:	4b23      	ldr	r3, [pc, #140]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d746:	791b      	ldrb	r3, [r3, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d02c      	beq.n	800d7a6 <dhcp_handle_ack+0x7a>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800d74c:	4b22      	ldr	r3, [pc, #136]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800d752:	4b20      	ldr	r3, [pc, #128]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d754:	795b      	ldrb	r3, [r3, #5]
 800d756:	b34b      	cbz	r3, 800d7ac <dhcp_handle_ack+0x80>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800d758:	4b1f      	ldr	r3, [pc, #124]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d75e:	690b      	ldr	r3, [r1, #16]
 800d760:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800d762:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d764:	799b      	ldrb	r3, [r3, #6]
 800d766:	bb33      	cbnz	r3, 800d7b6 <dhcp_handle_ack+0x8a>
    dhcp->subnet_mask_given = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800d76c:	4b19      	ldr	r3, [pc, #100]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d76e:	79db      	ldrb	r3, [r3, #7]
 800d770:	bb4b      	cbnz	r3, 800d7c6 <dhcp_handle_ack+0x9a>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800d772:	4b18      	ldr	r3, [pc, #96]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d774:	7a1b      	ldrb	r3, [r3, #8]
 800d776:	b1a3      	cbz	r3, 800d7a2 <dhcp_handle_ack+0x76>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800d778:	4b17      	ldr	r3, [pc, #92]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d77a:	6a18      	ldr	r0, [r3, #32]
 800d77c:	f7f8 ffa5 	bl	80066ca <lwip_htonl>
 800d780:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 800d782:	a901      	add	r1, sp, #4
 800d784:	2000      	movs	r0, #0
 800d786:	f7f9 fb63 	bl	8006e50 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800d78a:	4b12      	ldr	r3, [pc, #72]	; (800d7d4 <dhcp_handle_ack+0xa8>)
 800d78c:	7a5b      	ldrb	r3, [r3, #9]
 800d78e:	b143      	cbz	r3, 800d7a2 <dhcp_handle_ack+0x76>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800d790:	4b11      	ldr	r3, [pc, #68]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d792:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d794:	f7f8 ff99 	bl	80066ca <lwip_htonl>
 800d798:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 800d79a:	a901      	add	r1, sp, #4
 800d79c:	2001      	movs	r0, #1
 800d79e:	f7f9 fb57 	bl	8006e50 <dns_setserver>
}
 800d7a2:	b002      	add	sp, #8
 800d7a4:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800d7a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7a8:	085b      	lsrs	r3, r3, #1
 800d7aa:	e7d1      	b.n	800d750 <dhcp_handle_ack+0x24>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800d7ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d7b2:	08db      	lsrs	r3, r3, #3
 800d7b4:	e7d2      	b.n	800d75c <dhcp_handle_ack+0x30>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800d7b6:	4b08      	ldr	r3, [pc, #32]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d7b8:	6998      	ldr	r0, [r3, #24]
 800d7ba:	f7f8 ff86 	bl	80066ca <lwip_htonl>
 800d7be:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	71e3      	strb	r3, [r4, #7]
 800d7c4:	e7d2      	b.n	800d76c <dhcp_handle_ack+0x40>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800d7c6:	4b04      	ldr	r3, [pc, #16]	; (800d7d8 <dhcp_handle_ack+0xac>)
 800d7c8:	69d8      	ldr	r0, [r3, #28]
 800d7ca:	f7f8 ff7e 	bl	80066ca <lwip_htonl>
 800d7ce:	6260      	str	r0, [r4, #36]	; 0x24
 800d7d0:	e7cf      	b.n	800d772 <dhcp_handle_ack+0x46>
 800d7d2:	bf00      	nop
 800d7d4:	20014650 	.word	0x20014650
 800d7d8:	2001465c 	.word	0x2001465c

0800d7dc <dhcp_recv>:
{
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	b08b      	sub	sp, #44	; 0x2c
 800d7e2:	4693      	mov	fp, r2
  struct netif *netif = ip_current_input_netif();
 800d7e4:	4b9f      	ldr	r3, [pc, #636]	; (800da64 <dhcp_recv+0x288>)
 800d7e6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d7ea:	f8da 9024 	ldr.w	r9, [sl, #36]	; 0x24
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800d7ee:	f1b9 0f00 	cmp.w	r9, #0
 800d7f2:	d028      	beq.n	800d846 <dhcp_recv+0x6a>
 800d7f4:	f899 3004 	ldrb.w	r3, [r9, #4]
 800d7f8:	b32b      	cbz	r3, 800d846 <dhcp_recv+0x6a>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800d7fa:	8953      	ldrh	r3, [r2, #10]
 800d7fc:	2b2b      	cmp	r3, #43	; 0x2b
 800d7fe:	d922      	bls.n	800d846 <dhcp_recv+0x6a>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800d800:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800d802:	782b      	ldrb	r3, [r5, #0]
 800d804:	2b02      	cmp	r3, #2
 800d806:	d11e      	bne.n	800d846 <dhcp_recv+0x6a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d808:	f89a 2030 	ldrb.w	r2, [sl, #48]	; 0x30
 800d80c:	b1a2      	cbz	r2, 800d838 <dhcp_recv+0x5c>
 800d80e:	f10a 032a 	add.w	r3, sl, #42	; 0x2a
 800d812:	f105 011c 	add.w	r1, r5, #28
 800d816:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d81a:	3a01      	subs	r2, #1
 800d81c:	f10a 002b 	add.w	r0, sl, #43	; 0x2b
 800d820:	fa50 f282 	uxtab	r2, r0, r2
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800d824:	f813 4b01 	ldrb.w	r4, [r3], #1
 800d828:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d82c:	4284      	cmp	r4, r0
 800d82e:	d10a      	bne.n	800d846 <dhcp_recv+0x6a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d830:	4293      	cmp	r3, r2
 800d832:	d001      	beq.n	800d838 <dhcp_recv+0x5c>
 800d834:	42b3      	cmp	r3, r6
 800d836:	d1f5      	bne.n	800d824 <dhcp_recv+0x48>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800d838:	6868      	ldr	r0, [r5, #4]
 800d83a:	f7f8 ff46 	bl	80066ca <lwip_htonl>
 800d83e:	f8d9 3000 	ldr.w	r3, [r9]
 800d842:	4298      	cmp	r0, r3
 800d844:	d005      	beq.n	800d852 <dhcp_recv+0x76>
  pbuf_free(p);
 800d846:	4658      	mov	r0, fp
 800d848:	f7fa fa98 	bl	8007d7c <pbuf_free>
}
 800d84c:	b00b      	add	sp, #44	; 0x2c
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  dhcp_clear_all_options(dhcp);
 800d852:	4b85      	ldr	r3, [pc, #532]	; (800da68 <dhcp_recv+0x28c>)
 800d854:	2200      	movs	r2, #0
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	605a      	str	r2, [r3, #4]
 800d85a:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 800d85c:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800d860:	2b2b      	cmp	r3, #43	; 0x2b
 800d862:	d9f0      	bls.n	800d846 <dhcp_recv+0x6a>
  options_idx_max = p->tot_len;
 800d864:	f8bb 3008 	ldrh.w	r3, [fp, #8]
  int parse_sname_as_options = 0;
 800d868:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800d86a:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 800d86e:	f8cd a018 	str.w	sl, [sp, #24]
 800d872:	f8cd 901c 	str.w	r9, [sp, #28]
 800d876:	f8cd 8004 	str.w	r8, [sp, #4]
 800d87a:	f8cd b008 	str.w	fp, [sp, #8]
 800d87e:	469b      	mov	fp, r3
  q = p;
 800d880:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d884:	f8dd a004 	ldr.w	sl, [sp, #4]
 800d888:	464a      	mov	r2, r9
  while ((q != NULL) && (options_idx >= q->len)) {
 800d88a:	8953      	ldrh	r3, [r2, #10]
 800d88c:	4553      	cmp	r3, sl
 800d88e:	f200 82af 	bhi.w	800ddf0 <dhcp_recv+0x614>
    options_idx = (u16_t)(options_idx - q->len);
 800d892:	ebaa 0a03 	sub.w	sl, sl, r3
 800d896:	fa1f fa8a 	uxth.w	sl, sl
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d89a:	ebab 0b03 	sub.w	fp, fp, r3
 800d89e:	fa1f fb8b 	uxth.w	fp, fp
    q = q->next;
 800d8a2:	6812      	ldr	r2, [r2, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 800d8a4:	2a00      	cmp	r2, #0
 800d8a6:	d1f0      	bne.n	800d88a <dhcp_recv+0xae>
 800d8a8:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d8ac:	e7cb      	b.n	800d846 <dhcp_recv+0x6a>
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d8ae:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800d8b2:	236c      	movs	r3, #108	; 0x6c
 800d8b4:	9301      	str	r3, [sp, #4]
 800d8b6:	e7e3      	b.n	800d880 <dhcp_recv+0xa4>
    parse_sname_as_options = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800d8bc:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800d8c0:	232c      	movs	r3, #44	; 0x2c
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	e7dc      	b.n	800d880 <dhcp_recv+0xa4>
      parse_sname_as_options = 1;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d8ca:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800d8ce:	236c      	movs	r3, #108	; 0x6c
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	e7d5      	b.n	800d880 <dhcp_recv+0xa4>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d8d4:	f8d9 3000 	ldr.w	r3, [r9]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f000 829e 	beq.w	800de1a <dhcp_recv+0x63e>
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	e104      	b.n	800daee <dhcp_recv+0x312>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d116      	bne.n	800d916 <dhcp_recv+0x13a>
    decode_len = len;
 800d8e8:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800d8ea:	2706      	movs	r7, #6
      if (offset + len + 2 > 0xFFFF) {
 800d8ec:	4418      	add	r0, r3
 800d8ee:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800d8f2:	4290      	cmp	r0, r2
 800d8f4:	f300 8279 	bgt.w	800ddea <dhcp_recv+0x60e>
      offset = (u16_t)(offset + len + 2);
 800d8f8:	eb0b 0403 	add.w	r4, fp, r3
 800d8fc:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 800d8fe:	2d00      	cmp	r5, #0
 800d900:	f000 80c8 	beq.w	800da94 <dhcp_recv+0x2b8>
        u32_t value = 0;
 800d904:	2300      	movs	r3, #0
 800d906:	9309      	str	r3, [sp, #36]	; 0x24
 800d908:	4b57      	ldr	r3, [pc, #348]	; (800da68 <dhcp_recv+0x28c>)
 800d90a:	eb07 0803 	add.w	r8, r7, r3
 800d90e:	9404      	str	r4, [sp, #16]
 800d910:	f8cd a014 	str.w	sl, [sp, #20]
 800d914:	e199      	b.n	800dc4a <dhcp_recv+0x46e>
 800d916:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d91a:	4b54      	ldr	r3, [pc, #336]	; (800da6c <dhcp_recv+0x290>)
 800d91c:	f240 622e 	movw	r2, #1582	; 0x62e
 800d920:	4953      	ldr	r1, [pc, #332]	; (800da70 <dhcp_recv+0x294>)
 800d922:	4854      	ldr	r0, [pc, #336]	; (800da74 <dhcp_recv+0x298>)
 800d924:	f01d f9d2 	bl	802accc <iprintf>
 800d928:	e78d      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d92a:	2300      	movs	r3, #0
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d92c:	2b03      	cmp	r3, #3
 800d92e:	d902      	bls.n	800d936 <dhcp_recv+0x15a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800d930:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 800d932:	2504      	movs	r5, #4
 800d934:	e7da      	b.n	800d8ec <dhcp_recv+0x110>
 800d936:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d93a:	4b4c      	ldr	r3, [pc, #304]	; (800da6c <dhcp_recv+0x290>)
 800d93c:	f240 6233 	movw	r2, #1587	; 0x633
 800d940:	494d      	ldr	r1, [pc, #308]	; (800da78 <dhcp_recv+0x29c>)
 800d942:	484c      	ldr	r0, [pc, #304]	; (800da74 <dhcp_recv+0x298>)
 800d944:	f01d f9c2 	bl	802accc <iprintf>
 800d948:	e77d      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d94a:	2300      	movs	r3, #0
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800d94c:	f013 0f03 	tst.w	r3, #3
 800d950:	d107      	bne.n	800d962 <dhcp_recv+0x186>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800d952:	461d      	mov	r5, r3
 800d954:	2b08      	cmp	r3, #8
 800d956:	bf28      	it	cs
 800d958:	2508      	movcs	r5, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d95a:	429d      	cmp	r5, r3
 800d95c:	d80b      	bhi.n	800d976 <dhcp_recv+0x19a>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800d95e:	2708      	movs	r7, #8
 800d960:	e7c4      	b.n	800d8ec <dhcp_recv+0x110>
 800d962:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800d966:	4b41      	ldr	r3, [pc, #260]	; (800da6c <dhcp_recv+0x290>)
 800d968:	f240 6239 	movw	r2, #1593	; 0x639
 800d96c:	4943      	ldr	r1, [pc, #268]	; (800da7c <dhcp_recv+0x2a0>)
 800d96e:	4841      	ldr	r0, [pc, #260]	; (800da74 <dhcp_recv+0x298>)
 800d970:	f01d f9ac 	bl	802accc <iprintf>
 800d974:	e767      	b.n	800d846 <dhcp_recv+0x6a>
 800d976:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800d97a:	4b3c      	ldr	r3, [pc, #240]	; (800da6c <dhcp_recv+0x290>)
 800d97c:	f240 623c 	movw	r2, #1596	; 0x63c
 800d980:	493d      	ldr	r1, [pc, #244]	; (800da78 <dhcp_recv+0x29c>)
 800d982:	483c      	ldr	r0, [pc, #240]	; (800da74 <dhcp_recv+0x298>)
 800d984:	f01d f9a2 	bl	802accc <iprintf>
 800d988:	e75d      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d98a:	2300      	movs	r3, #0
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d102      	bne.n	800d996 <dhcp_recv+0x1ba>
    decode_len = len;
 800d990:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800d992:	2703      	movs	r7, #3
 800d994:	e7aa      	b.n	800d8ec <dhcp_recv+0x110>
 800d996:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d99a:	4b34      	ldr	r3, [pc, #208]	; (800da6c <dhcp_recv+0x290>)
 800d99c:	f240 6241 	movw	r2, #1601	; 0x641
 800d9a0:	4933      	ldr	r1, [pc, #204]	; (800da70 <dhcp_recv+0x294>)
 800d9a2:	4834      	ldr	r0, [pc, #208]	; (800da74 <dhcp_recv+0x298>)
 800d9a4:	f01d f992 	bl	802accc <iprintf>
 800d9a8:	e74d      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d9aa:	2300      	movs	r3, #0
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d105      	bne.n	800d9bc <dhcp_recv+0x1e0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d9b0:	9a01      	ldr	r2, [sp, #4]
 800d9b2:	2af0      	cmp	r2, #240	; 0xf0
 800d9b4:	d10c      	bne.n	800d9d0 <dhcp_recv+0x1f4>
    decode_len = len;
 800d9b6:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800d9b8:	2700      	movs	r7, #0
 800d9ba:	e797      	b.n	800d8ec <dhcp_recv+0x110>
 800d9bc:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d9c0:	4b2a      	ldr	r3, [pc, #168]	; (800da6c <dhcp_recv+0x290>)
 800d9c2:	f240 624f 	movw	r2, #1615	; 0x64f
 800d9c6:	492e      	ldr	r1, [pc, #184]	; (800da80 <dhcp_recv+0x2a4>)
 800d9c8:	482a      	ldr	r0, [pc, #168]	; (800da74 <dhcp_recv+0x298>)
 800d9ca:	f01d f97f 	bl	802accc <iprintf>
 800d9ce:	e73a      	b.n	800d846 <dhcp_recv+0x6a>
 800d9d0:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800d9d4:	4b25      	ldr	r3, [pc, #148]	; (800da6c <dhcp_recv+0x290>)
 800d9d6:	f240 6251 	movw	r2, #1617	; 0x651
 800d9da:	492a      	ldr	r1, [pc, #168]	; (800da84 <dhcp_recv+0x2a8>)
 800d9dc:	4825      	ldr	r0, [pc, #148]	; (800da74 <dhcp_recv+0x298>)
 800d9de:	f01d f975 	bl	802accc <iprintf>
 800d9e2:	e730      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d9e4:	2300      	movs	r3, #0
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d102      	bne.n	800d9f0 <dhcp_recv+0x214>
    decode_len = len;
 800d9ea:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800d9ec:	2701      	movs	r7, #1
 800d9ee:	e77d      	b.n	800d8ec <dhcp_recv+0x110>
 800d9f0:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800d9f4:	4b1d      	ldr	r3, [pc, #116]	; (800da6c <dhcp_recv+0x290>)
 800d9f6:	f240 6255 	movw	r2, #1621	; 0x655
 800d9fa:	4921      	ldr	r1, [pc, #132]	; (800da80 <dhcp_recv+0x2a4>)
 800d9fc:	481d      	ldr	r0, [pc, #116]	; (800da74 <dhcp_recv+0x298>)
 800d9fe:	f01d f965 	bl	802accc <iprintf>
 800da02:	e720      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800da04:	2300      	movs	r3, #0
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da06:	2b04      	cmp	r3, #4
 800da08:	d102      	bne.n	800da10 <dhcp_recv+0x234>
    decode_len = len;
 800da0a:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800da0c:	2702      	movs	r7, #2
 800da0e:	e76d      	b.n	800d8ec <dhcp_recv+0x110>
 800da10:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da14:	4b15      	ldr	r3, [pc, #84]	; (800da6c <dhcp_recv+0x290>)
 800da16:	f240 6259 	movw	r2, #1625	; 0x659
 800da1a:	4915      	ldr	r1, [pc, #84]	; (800da70 <dhcp_recv+0x294>)
 800da1c:	4815      	ldr	r0, [pc, #84]	; (800da74 <dhcp_recv+0x298>)
 800da1e:	f01d f955 	bl	802accc <iprintf>
 800da22:	e710      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800da24:	2300      	movs	r3, #0
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da26:	2b04      	cmp	r3, #4
 800da28:	d102      	bne.n	800da30 <dhcp_recv+0x254>
    decode_len = len;
 800da2a:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800da2c:	2704      	movs	r7, #4
 800da2e:	e75d      	b.n	800d8ec <dhcp_recv+0x110>
 800da30:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da34:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <dhcp_recv+0x290>)
 800da36:	f240 625d 	movw	r2, #1629	; 0x65d
 800da3a:	490d      	ldr	r1, [pc, #52]	; (800da70 <dhcp_recv+0x294>)
 800da3c:	480d      	ldr	r0, [pc, #52]	; (800da74 <dhcp_recv+0x298>)
 800da3e:	f01d f945 	bl	802accc <iprintf>
 800da42:	e700      	b.n	800d846 <dhcp_recv+0x6a>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800da44:	2300      	movs	r3, #0
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da46:	2b04      	cmp	r3, #4
 800da48:	d102      	bne.n	800da50 <dhcp_recv+0x274>
    decode_len = len;
 800da4a:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800da4c:	2705      	movs	r7, #5
 800da4e:	e74d      	b.n	800d8ec <dhcp_recv+0x110>
 800da50:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da54:	4b05      	ldr	r3, [pc, #20]	; (800da6c <dhcp_recv+0x290>)
 800da56:	f240 6261 	movw	r2, #1633	; 0x661
 800da5a:	4905      	ldr	r1, [pc, #20]	; (800da70 <dhcp_recv+0x294>)
 800da5c:	4805      	ldr	r0, [pc, #20]	; (800da74 <dhcp_recv+0x298>)
 800da5e:	f01d f935 	bl	802accc <iprintf>
 800da62:	e6f0      	b.n	800d846 <dhcp_recv+0x6a>
 800da64:	20010d98 	.word	0x20010d98
 800da68:	20014650 	.word	0x20014650
 800da6c:	0802e59c 	.word	0x0802e59c
 800da70:	0802e800 	.word	0x0802e800
 800da74:	0802bc48 	.word	0x0802bc48
 800da78:	0802e80c 	.word	0x0802e80c
 800da7c:	0802e820 	.word	0x0802e820
 800da80:	0802e830 	.word	0x0802e830
 800da84:	0802e83c 	.word	0x0802e83c
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800da88:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 800da8a:	2a00      	cmp	r2, #0
 800da8c:	f040 81bd 	bne.w	800de0a <dhcp_recv+0x62e>
      offset++;
 800da90:	3401      	adds	r4, #1
 800da92:	b2a4      	uxth	r4, r4
    if (offset >= q->len) {
 800da94:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800da98:	42a3      	cmp	r3, r4
 800da9a:	f200 8188 	bhi.w	800ddae <dhcp_recv+0x5d2>
      offset = (u16_t)(offset - q->len);
 800da9e:	1ae4      	subs	r4, r4, r3
 800daa0:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 800daa2:	ebaa 0303 	sub.w	r3, sl, r3
 800daa6:	fa1f fa83 	uxth.w	sl, r3
      if (offset < offset_max) {
 800daaa:	4554      	cmp	r4, sl
 800daac:	f080 814d 	bcs.w	800dd4a <dhcp_recv+0x56e>
        q = q->next;
 800dab0:	f8d9 9000 	ldr.w	r9, [r9]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800dab4:	f1b9 0f00 	cmp.w	r9, #0
 800dab8:	f000 80fa 	beq.w	800dcb0 <dhcp_recv+0x4d4>
        options = (u8_t *)q->payload;
 800dabc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800dac0:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800dac2:	4621      	mov	r1, r4
 800dac4:	9b00      	ldr	r3, [sp, #0]
 800dac6:	5d1a      	ldrb	r2, [r3, r4]
 800dac8:	2aff      	cmp	r2, #255	; 0xff
 800daca:	f000 8173 	beq.w	800ddb4 <dhcp_recv+0x5d8>
    u16_t val_offset = (u16_t)(offset + 2);
 800dace:	1ca3      	adds	r3, r4, #2
 800dad0:	fa1f fb83 	uxth.w	fp, r3
    if (val_offset < offset) {
 800dad4:	45a3      	cmp	fp, r4
 800dad6:	f0c0 812f 	bcc.w	800dd38 <dhcp_recv+0x55c>
    if ((offset + 1) < q->len) {
 800dada:	4620      	mov	r0, r4
 800dadc:	1c63      	adds	r3, r4, #1
 800dade:	f8b9 500a 	ldrh.w	r5, [r9, #10]
 800dae2:	42ab      	cmp	r3, r5
 800dae4:	f6bf aef6 	bge.w	800d8d4 <dhcp_recv+0xf8>
      len = options[offset + 1];
 800dae8:	9b00      	ldr	r3, [sp, #0]
 800daea:	4419      	add	r1, r3
 800daec:	784b      	ldrb	r3, [r1, #1]
    switch (op) {
 800daee:	2a3b      	cmp	r2, #59	; 0x3b
 800daf0:	d8cb      	bhi.n	800da8a <dhcp_recv+0x2ae>
 800daf2:	a101      	add	r1, pc, #4	; (adr r1, 800daf8 <dhcp_recv+0x31c>)
 800daf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800daf8:	0800da91 	.word	0x0800da91
 800dafc:	0800d8e5 	.word	0x0800d8e5
 800db00:	0800da8b 	.word	0x0800da8b
 800db04:	0800d92d 	.word	0x0800d92d
 800db08:	0800da8b 	.word	0x0800da8b
 800db0c:	0800da8b 	.word	0x0800da8b
 800db10:	0800d94d 	.word	0x0800d94d
 800db14:	0800da8b 	.word	0x0800da8b
 800db18:	0800da8b 	.word	0x0800da8b
 800db1c:	0800da8b 	.word	0x0800da8b
 800db20:	0800da8b 	.word	0x0800da8b
 800db24:	0800da8b 	.word	0x0800da8b
 800db28:	0800da8b 	.word	0x0800da8b
 800db2c:	0800da8b 	.word	0x0800da8b
 800db30:	0800da8b 	.word	0x0800da8b
 800db34:	0800da8b 	.word	0x0800da8b
 800db38:	0800da8b 	.word	0x0800da8b
 800db3c:	0800da8b 	.word	0x0800da8b
 800db40:	0800da8b 	.word	0x0800da8b
 800db44:	0800da8b 	.word	0x0800da8b
 800db48:	0800da8b 	.word	0x0800da8b
 800db4c:	0800da8b 	.word	0x0800da8b
 800db50:	0800da8b 	.word	0x0800da8b
 800db54:	0800da8b 	.word	0x0800da8b
 800db58:	0800da8b 	.word	0x0800da8b
 800db5c:	0800da8b 	.word	0x0800da8b
 800db60:	0800da8b 	.word	0x0800da8b
 800db64:	0800da8b 	.word	0x0800da8b
 800db68:	0800da8b 	.word	0x0800da8b
 800db6c:	0800da8b 	.word	0x0800da8b
 800db70:	0800da8b 	.word	0x0800da8b
 800db74:	0800da8b 	.word	0x0800da8b
 800db78:	0800da8b 	.word	0x0800da8b
 800db7c:	0800da8b 	.word	0x0800da8b
 800db80:	0800da8b 	.word	0x0800da8b
 800db84:	0800da8b 	.word	0x0800da8b
 800db88:	0800da8b 	.word	0x0800da8b
 800db8c:	0800da8b 	.word	0x0800da8b
 800db90:	0800da8b 	.word	0x0800da8b
 800db94:	0800da8b 	.word	0x0800da8b
 800db98:	0800da8b 	.word	0x0800da8b
 800db9c:	0800da8b 	.word	0x0800da8b
 800dba0:	0800da8b 	.word	0x0800da8b
 800dba4:	0800da8b 	.word	0x0800da8b
 800dba8:	0800da8b 	.word	0x0800da8b
 800dbac:	0800da8b 	.word	0x0800da8b
 800dbb0:	0800da8b 	.word	0x0800da8b
 800dbb4:	0800da8b 	.word	0x0800da8b
 800dbb8:	0800da8b 	.word	0x0800da8b
 800dbbc:	0800da8b 	.word	0x0800da8b
 800dbc0:	0800da8b 	.word	0x0800da8b
 800dbc4:	0800d98d 	.word	0x0800d98d
 800dbc8:	0800d9ad 	.word	0x0800d9ad
 800dbcc:	0800d9e7 	.word	0x0800d9e7
 800dbd0:	0800da07 	.word	0x0800da07
 800dbd4:	0800da8b 	.word	0x0800da8b
 800dbd8:	0800da8b 	.word	0x0800da8b
 800dbdc:	0800da8b 	.word	0x0800da8b
 800dbe0:	0800da27 	.word	0x0800da27
 800dbe4:	0800da47 	.word	0x0800da47
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800dbe8:	4bcb      	ldr	r3, [pc, #812]	; (800df18 <dhcp_recv+0x73c>)
 800dbea:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800dbee:	49cb      	ldr	r1, [pc, #812]	; (800df1c <dhcp_recv+0x740>)
 800dbf0:	48cb      	ldr	r0, [pc, #812]	; (800df20 <dhcp_recv+0x744>)
 800dbf2:	f01d f86b 	bl	802accc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800dbf6:	f898 3000 	ldrb.w	r3, [r8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d154      	bne.n	800dca8 <dhcp_recv+0x4cc>
          copy_len = LWIP_MIN(decode_len, 4);
 800dbfe:	462c      	mov	r4, r5
 800dc00:	2d04      	cmp	r5, #4
 800dc02:	bf28      	it	cs
 800dc04:	2404      	movcs	r4, #4
 800dc06:	b2e4      	uxtb	r4, r4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800dc08:	465b      	mov	r3, fp
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	a909      	add	r1, sp, #36	; 0x24
 800dc0e:	4648      	mov	r0, r9
 800dc10:	f7fa fb5a 	bl	80082c8 <pbuf_copy_partial>
 800dc14:	4284      	cmp	r4, r0
 800dc16:	f040 8092 	bne.w	800dd3e <dhcp_recv+0x562>
          if (decode_len > 4) {
 800dc1a:	2d04      	cmp	r5, #4
 800dc1c:	d923      	bls.n	800dc66 <dhcp_recv+0x48a>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dc1e:	f015 0f03 	tst.w	r5, #3
 800dc22:	d116      	bne.n	800dc52 <dhcp_recv+0x476>
            dhcp_got_option(dhcp, decode_idx);
 800dc24:	2301      	movs	r3, #1
 800dc26:	f888 3000 	strb.w	r3, [r8]
 800dc2a:	4498      	add	r8, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800dc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2e:	f7f8 fd4c 	bl	80066ca <lwip_htonl>
 800dc32:	4bbc      	ldr	r3, [pc, #752]	; (800df24 <dhcp_recv+0x748>)
 800dc34:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800dc38:	3d04      	subs	r5, #4
 800dc3a:	b2ed      	uxtb	r5, r5
            next_val_offset = (u16_t)(val_offset + 4);
 800dc3c:	f10b 0304 	add.w	r3, fp, #4
 800dc40:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800dc42:	459b      	cmp	fp, r3
 800dc44:	d87e      	bhi.n	800dd44 <dhcp_recv+0x568>
            decode_idx++;
 800dc46:	3701      	adds	r7, #1
            val_offset = next_val_offset;
 800dc48:	469b      	mov	fp, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800dc4a:	463e      	mov	r6, r7
 800dc4c:	2f09      	cmp	r7, #9
 800dc4e:	d9d2      	bls.n	800dbf6 <dhcp_recv+0x41a>
 800dc50:	e7ca      	b.n	800dbe8 <dhcp_recv+0x40c>
 800dc52:	f8dd b008 	ldr.w	fp, [sp, #8]
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dc56:	4bb0      	ldr	r3, [pc, #704]	; (800df18 <dhcp_recv+0x73c>)
 800dc58:	f240 6281 	movw	r2, #1665	; 0x681
 800dc5c:	49b2      	ldr	r1, [pc, #712]	; (800df28 <dhcp_recv+0x74c>)
 800dc5e:	48b0      	ldr	r0, [pc, #704]	; (800df20 <dhcp_recv+0x744>)
 800dc60:	f01d f834 	bl	802accc <iprintf>
 800dc64:	e5ef      	b.n	800d846 <dhcp_recv+0x6a>
 800dc66:	9c04      	ldr	r4, [sp, #16]
 800dc68:	f8dd a014 	ldr.w	sl, [sp, #20]
          } else if (decode_len == 4) {
 800dc6c:	2d04      	cmp	r5, #4
 800dc6e:	d00c      	beq.n	800dc8a <dhcp_recv+0x4ae>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800dc70:	2d01      	cmp	r5, #1
 800dc72:	d10f      	bne.n	800dc94 <dhcp_recv+0x4b8>
            value = ((u8_t *)&value)[0];
 800dc74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800dc78:	9309      	str	r3, [sp, #36]	; 0x24
          dhcp_got_option(dhcp, decode_idx);
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	4aab      	ldr	r2, [pc, #684]	; (800df2c <dhcp_recv+0x750>)
 800dc7e:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800dc80:	4ba8      	ldr	r3, [pc, #672]	; (800df24 <dhcp_recv+0x748>)
 800dc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc84:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
 800dc88:	e704      	b.n	800da94 <dhcp_recv+0x2b8>
            value = lwip_ntohl(value);
 800dc8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8c:	f7f8 fd1d 	bl	80066ca <lwip_htonl>
 800dc90:	9009      	str	r0, [sp, #36]	; 0x24
 800dc92:	e7f2      	b.n	800dc7a <dhcp_recv+0x49e>
 800dc94:	f8dd b008 	ldr.w	fp, [sp, #8]
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800dc98:	4b9f      	ldr	r3, [pc, #636]	; (800df18 <dhcp_recv+0x73c>)
 800dc9a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800dc9e:	49a4      	ldr	r1, [pc, #656]	; (800df30 <dhcp_recv+0x754>)
 800dca0:	489f      	ldr	r0, [pc, #636]	; (800df20 <dhcp_recv+0x744>)
 800dca2:	f01d f813 	bl	802accc <iprintf>
 800dca6:	e5ce      	b.n	800d846 <dhcp_recv+0x6a>
 800dca8:	9c04      	ldr	r4, [sp, #16]
 800dcaa:	f8dd a014 	ldr.w	sl, [sp, #20]
 800dcae:	e6f1      	b.n	800da94 <dhcp_recv+0x2b8>
 800dcb0:	f8dd b008 	ldr.w	fp, [sp, #8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800dcb4:	4b98      	ldr	r3, [pc, #608]	; (800df18 <dhcp_recv+0x73c>)
 800dcb6:	f240 629d 	movw	r2, #1693	; 0x69d
 800dcba:	499e      	ldr	r1, [pc, #632]	; (800df34 <dhcp_recv+0x758>)
 800dcbc:	4898      	ldr	r0, [pc, #608]	; (800df20 <dhcp_recv+0x744>)
 800dcbe:	f01d f805 	bl	802accc <iprintf>
 800dcc2:	e5c0      	b.n	800d846 <dhcp_recv+0x6a>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800dcc4:	f899 3005 	ldrb.w	r3, [r9, #5]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d00c      	beq.n	800dce6 <dhcp_recv+0x50a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dccc:	3b03      	subs	r3, #3
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	f63f adb8 	bhi.w	800d846 <dhcp_recv+0x6a>
      dhcp_handle_ack(netif, msg_in);
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4650      	mov	r0, sl
 800dcda:	f7ff fd27 	bl	800d72c <dhcp_handle_ack>
      dhcp_bind(netif);
 800dcde:	4650      	mov	r0, sl
 800dce0:	f7ff fc24 	bl	800d52c <dhcp_bind>
 800dce4:	e5af      	b.n	800d846 <dhcp_recv+0x6a>
      dhcp_handle_ack(netif, msg_in);
 800dce6:	4621      	mov	r1, r4
 800dce8:	4650      	mov	r0, sl
 800dcea:	f7ff fd1f 	bl	800d72c <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800dcee:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
 800dcf2:	f013 0f08 	tst.w	r3, #8
 800dcf6:	d003      	beq.n	800dd00 <dhcp_recv+0x524>
        dhcp_check(netif);
 800dcf8:	4650      	mov	r0, sl
 800dcfa:	f7ff fc01 	bl	800d500 <dhcp_check>
 800dcfe:	e5a2      	b.n	800d846 <dhcp_recv+0x6a>
        dhcp_bind(netif);
 800dd00:	4650      	mov	r0, sl
 800dd02:	f7ff fc13 	bl	800d52c <dhcp_bind>
 800dd06:	e59e      	b.n	800d846 <dhcp_recv+0x6a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800dd08:	f899 2005 	ldrb.w	r2, [r9, #5]
  else if ((msg_type == DHCP_NAK) &&
 800dd0c:	1ed3      	subs	r3, r2, #3
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d902      	bls.n	800dd1a <dhcp_recv+0x53e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800dd14:	2a01      	cmp	r2, #1
 800dd16:	f47f ad96 	bne.w	800d846 <dhcp_recv+0x6a>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800dd1a:	210c      	movs	r1, #12
 800dd1c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 800dd20:	f7ff f8de 	bl	800cee0 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800dd24:	4984      	ldr	r1, [pc, #528]	; (800df38 <dhcp_recv+0x75c>)
 800dd26:	460b      	mov	r3, r1
 800dd28:	460a      	mov	r2, r1
 800dd2a:	4650      	mov	r0, sl
 800dd2c:	f7f9 fdce 	bl	80078cc <netif_set_addr>
  dhcp_discover(netif);
 800dd30:	4650      	mov	r0, sl
 800dd32:	f7ff fb6b 	bl	800d40c <dhcp_discover>
}
 800dd36:	e586      	b.n	800d846 <dhcp_recv+0x6a>
 800dd38:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dd3c:	e583      	b.n	800d846 <dhcp_recv+0x6a>
 800dd3e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dd42:	e580      	b.n	800d846 <dhcp_recv+0x6a>
 800dd44:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dd48:	e57d      	b.n	800d846 <dhcp_recv+0x6a>
 800dd4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dd4e:	e57a      	b.n	800d846 <dhcp_recv+0x6a>
 800dd50:	f8dd a018 	ldr.w	sl, [sp, #24]
 800dd54:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800dd58:	f8dd b008 	ldr.w	fp, [sp, #8]
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800dd5c:	4b73      	ldr	r3, [pc, #460]	; (800df2c <dhcp_recv+0x750>)
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f43f ad70 	beq.w	800d846 <dhcp_recv+0x6a>
  msg_in = (struct dhcp_msg *)p->payload;
 800dd66:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800dd6a:	4b6e      	ldr	r3, [pc, #440]	; (800df24 <dhcp_recv+0x748>)
 800dd6c:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d0a8      	beq.n	800dcc4 <dhcp_recv+0x4e8>
  else if ((msg_type == DHCP_NAK) &&
 800dd72:	2b06      	cmp	r3, #6
 800dd74:	d0c8      	beq.n	800dd08 <dhcp_recv+0x52c>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	f47f ad65 	bne.w	800d846 <dhcp_recv+0x6a>
 800dd7c:	f899 3005 	ldrb.w	r3, [r9, #5]
 800dd80:	2b06      	cmp	r3, #6
 800dd82:	f47f ad60 	bne.w	800d846 <dhcp_recv+0x6a>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800dd86:	4b69      	ldr	r3, [pc, #420]	; (800df2c <dhcp_recv+0x750>)
 800dd88:	789b      	ldrb	r3, [r3, #2]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f43f ad5b 	beq.w	800d846 <dhcp_recv+0x6a>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd90:	f8da 5024 	ldr.w	r5, [sl, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 800dd94:	2300      	movs	r3, #0
 800dd96:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800dd98:	4b62      	ldr	r3, [pc, #392]	; (800df24 <dhcp_recv+0x748>)
 800dd9a:	6898      	ldr	r0, [r3, #8]
 800dd9c:	f7f8 fc95 	bl	80066ca <lwip_htonl>
 800dda0:	61a8      	str	r0, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 800dda6:	4650      	mov	r0, sl
 800dda8:	f7ff fa6e 	bl	800d288 <dhcp_select>
 800ddac:	e54b      	b.n	800d846 <dhcp_recv+0x6a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ddae:	4554      	cmp	r4, sl
 800ddb0:	f4ff ae87 	bcc.w	800dac2 <dhcp_recv+0x2e6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ddb4:	4b5d      	ldr	r3, [pc, #372]	; (800df2c <dhcp_recv+0x750>)
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	b16b      	cbz	r3, 800ddd6 <dhcp_recv+0x5fa>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ddba:	4b5a      	ldr	r3, [pc, #360]	; (800df24 <dhcp_recv+0x748>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ddbe:	4a5b      	ldr	r2, [pc, #364]	; (800df2c <dhcp_recv+0x750>)
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	f43f ad72 	beq.w	800d8ae <dhcp_recv+0xd2>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	f43f ad74 	beq.w	800d8b8 <dhcp_recv+0xdc>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ddd0:	2b03      	cmp	r3, #3
 800ddd2:	f43f ad78 	beq.w	800d8c6 <dhcp_recv+0xea>
  } else if (parse_sname_as_options) {
 800ddd6:	9b03      	ldr	r3, [sp, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d0b9      	beq.n	800dd50 <dhcp_recv+0x574>
    parse_sname_as_options = 0;
 800dddc:	2300      	movs	r3, #0
 800ddde:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800dde0:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800dde4:	232c      	movs	r3, #44	; 0x2c
 800dde6:	9301      	str	r3, [sp, #4]
 800dde8:	e54a      	b.n	800d880 <dhcp_recv+0xa4>
 800ddea:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ddee:	e52a      	b.n	800d846 <dhcp_recv+0x6a>
 800ddf0:	f8cd a004 	str.w	sl, [sp, #4]
 800ddf4:	4691      	mov	r9, r2
  options = (u8_t *)q->payload;
 800ddf6:	6853      	ldr	r3, [r2, #4]
 800ddf8:	9300      	str	r3, [sp, #0]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ddfa:	45da      	cmp	sl, fp
 800ddfc:	d2da      	bcs.n	800ddb4 <dhcp_recv+0x5d8>
 800ddfe:	9c01      	ldr	r4, [sp, #4]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800de00:	46da      	mov	sl, fp
 800de02:	e65e      	b.n	800dac2 <dhcp_recv+0x2e6>
      offset = (u16_t)(offset + len + 2);
 800de04:	445b      	add	r3, fp
 800de06:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 800de08:	e644      	b.n	800da94 <dhcp_recv+0x2b8>
      if (offset + len + 2 > 0xFFFF) {
 800de0a:	4418      	add	r0, r3
 800de0c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800de10:	4290      	cmp	r0, r2
 800de12:	ddf7      	ble.n	800de04 <dhcp_recv+0x628>
 800de14:	f8dd b008 	ldr.w	fp, [sp, #8]
 800de18:	e515      	b.n	800d846 <dhcp_recv+0x6a>
    switch (op) {
 800de1a:	2a3b      	cmp	r2, #59	; 0x3b
 800de1c:	f63f ae34 	bhi.w	800da88 <dhcp_recv+0x2ac>
 800de20:	a301      	add	r3, pc, #4	; (adr r3, 800de28 <dhcp_recv+0x64c>)
 800de22:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800de26:	bf00      	nop
 800de28:	0800da91 	.word	0x0800da91
 800de2c:	0800d917 	.word	0x0800d917
 800de30:	0800da89 	.word	0x0800da89
 800de34:	0800d92b 	.word	0x0800d92b
 800de38:	0800da89 	.word	0x0800da89
 800de3c:	0800da89 	.word	0x0800da89
 800de40:	0800d94b 	.word	0x0800d94b
 800de44:	0800da89 	.word	0x0800da89
 800de48:	0800da89 	.word	0x0800da89
 800de4c:	0800da89 	.word	0x0800da89
 800de50:	0800da89 	.word	0x0800da89
 800de54:	0800da89 	.word	0x0800da89
 800de58:	0800da89 	.word	0x0800da89
 800de5c:	0800da89 	.word	0x0800da89
 800de60:	0800da89 	.word	0x0800da89
 800de64:	0800da89 	.word	0x0800da89
 800de68:	0800da89 	.word	0x0800da89
 800de6c:	0800da89 	.word	0x0800da89
 800de70:	0800da89 	.word	0x0800da89
 800de74:	0800da89 	.word	0x0800da89
 800de78:	0800da89 	.word	0x0800da89
 800de7c:	0800da89 	.word	0x0800da89
 800de80:	0800da89 	.word	0x0800da89
 800de84:	0800da89 	.word	0x0800da89
 800de88:	0800da89 	.word	0x0800da89
 800de8c:	0800da89 	.word	0x0800da89
 800de90:	0800da89 	.word	0x0800da89
 800de94:	0800da89 	.word	0x0800da89
 800de98:	0800da89 	.word	0x0800da89
 800de9c:	0800da89 	.word	0x0800da89
 800dea0:	0800da89 	.word	0x0800da89
 800dea4:	0800da89 	.word	0x0800da89
 800dea8:	0800da89 	.word	0x0800da89
 800deac:	0800da89 	.word	0x0800da89
 800deb0:	0800da89 	.word	0x0800da89
 800deb4:	0800da89 	.word	0x0800da89
 800deb8:	0800da89 	.word	0x0800da89
 800debc:	0800da89 	.word	0x0800da89
 800dec0:	0800da89 	.word	0x0800da89
 800dec4:	0800da89 	.word	0x0800da89
 800dec8:	0800da89 	.word	0x0800da89
 800decc:	0800da89 	.word	0x0800da89
 800ded0:	0800da89 	.word	0x0800da89
 800ded4:	0800da89 	.word	0x0800da89
 800ded8:	0800da89 	.word	0x0800da89
 800dedc:	0800da89 	.word	0x0800da89
 800dee0:	0800da89 	.word	0x0800da89
 800dee4:	0800da89 	.word	0x0800da89
 800dee8:	0800da89 	.word	0x0800da89
 800deec:	0800da89 	.word	0x0800da89
 800def0:	0800da89 	.word	0x0800da89
 800def4:	0800d98b 	.word	0x0800d98b
 800def8:	0800d9ab 	.word	0x0800d9ab
 800defc:	0800d9e5 	.word	0x0800d9e5
 800df00:	0800da05 	.word	0x0800da05
 800df04:	0800da89 	.word	0x0800da89
 800df08:	0800da89 	.word	0x0800da89
 800df0c:	0800da89 	.word	0x0800da89
 800df10:	0800da25 	.word	0x0800da25
 800df14:	0800da45 	.word	0x0800da45
 800df18:	0802e59c 	.word	0x0802e59c
 800df1c:	0802e854 	.word	0x0802e854
 800df20:	0802bc48 	.word	0x0802bc48
 800df24:	2001465c 	.word	0x2001465c
 800df28:	0802e868 	.word	0x0802e868
 800df2c:	20014650 	.word	0x20014650
 800df30:	0802e880 	.word	0x0802e880
 800df34:	0802e894 	.word	0x0802e894
 800df38:	0802ec50 	.word	0x0802ec50

0800df3c <dhcp_network_changed>:
{
 800df3c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (!dhcp) {
 800df40:	b135      	cbz	r5, 800df50 <dhcp_network_changed+0x14>
 800df42:	4604      	mov	r4, r0
  switch (dhcp->state) {
 800df44:	796b      	ldrb	r3, [r5, #5]
 800df46:	2b05      	cmp	r3, #5
 800df48:	d803      	bhi.n	800df52 <dhcp_network_changed+0x16>
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	d803      	bhi.n	800df56 <dhcp_network_changed+0x1a>
 800df4e:	b98b      	cbnz	r3, 800df74 <dhcp_network_changed+0x38>
}
 800df50:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 800df52:	2b0a      	cmp	r3, #10
 800df54:	d105      	bne.n	800df62 <dhcp_network_changed+0x26>
      dhcp->tries = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	71ab      	strb	r3, [r5, #6]
      dhcp_reboot(netif);
 800df5a:	4620      	mov	r0, r4
 800df5c:	f7ff f90c 	bl	800d178 <dhcp_reboot>
      break;
 800df60:	e7f6      	b.n	800df50 <dhcp_network_changed+0x14>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800df62:	2b0c      	cmp	r3, #12
 800df64:	d906      	bls.n	800df74 <dhcp_network_changed+0x38>
 800df66:	4b06      	ldr	r3, [pc, #24]	; (800df80 <dhcp_network_changed+0x44>)
 800df68:	f240 326d 	movw	r2, #877	; 0x36d
 800df6c:	4905      	ldr	r1, [pc, #20]	; (800df84 <dhcp_network_changed+0x48>)
 800df6e:	4806      	ldr	r0, [pc, #24]	; (800df88 <dhcp_network_changed+0x4c>)
 800df70:	f01c feac 	bl	802accc <iprintf>
      dhcp->tries = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	71ab      	strb	r3, [r5, #6]
      dhcp_discover(netif);
 800df78:	4620      	mov	r0, r4
 800df7a:	f7ff fa47 	bl	800d40c <dhcp_discover>
      break;
 800df7e:	e7e7      	b.n	800df50 <dhcp_network_changed+0x14>
 800df80:	0802e59c 	.word	0x0802e59c
 800df84:	0802e8ec 	.word	0x0802e8ec
 800df88:	0802bc48 	.word	0x0802bc48

0800df8c <dhcp_arp_reply>:
{
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	b084      	sub	sp, #16
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800df92:	b140      	cbz	r0, 800dfa6 <dhcp_arp_reply+0x1a>
 800df94:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800df96:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800df98:	b114      	cbz	r4, 800dfa0 <dhcp_arp_reply+0x14>
 800df9a:	7963      	ldrb	r3, [r4, #5]
 800df9c:	2b08      	cmp	r3, #8
 800df9e:	d00a      	beq.n	800dfb6 <dhcp_arp_reply+0x2a>
}
 800dfa0:	b004      	add	sp, #16
 800dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dfa6:	4b24      	ldr	r3, [pc, #144]	; (800e038 <dhcp_arp_reply+0xac>)
 800dfa8:	f240 328b 	movw	r2, #907	; 0x38b
 800dfac:	4923      	ldr	r1, [pc, #140]	; (800e03c <dhcp_arp_reply+0xb0>)
 800dfae:	4824      	ldr	r0, [pc, #144]	; (800e040 <dhcp_arp_reply+0xb4>)
 800dfb0:	f01c fe8c 	bl	802accc <iprintf>
 800dfb4:	e7f4      	b.n	800dfa0 <dhcp_arp_reply+0x14>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800dfb6:	680a      	ldr	r2, [r1, #0]
 800dfb8:	69e3      	ldr	r3, [r4, #28]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d1f0      	bne.n	800dfa0 <dhcp_arp_reply+0x14>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800dfbe:	210c      	movs	r1, #12
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7fe ff8d 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800dfc6:	f10d 030e 	add.w	r3, sp, #14
 800dfca:	2204      	movs	r2, #4
 800dfcc:	4621      	mov	r1, r4
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f7ff f808 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	b330      	cbz	r0, 800e026 <dhcp_arp_reply+0x9a>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800dfd8:	6846      	ldr	r6, [r0, #4]
 800dfda:	36f0      	adds	r6, #240	; 0xf0
 800dfdc:	2304      	movs	r3, #4
 800dfde:	2232      	movs	r2, #50	; 0x32
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800dfe6:	f7fe ffa1 	bl	800cf2c <dhcp_option>
 800dfea:	4680      	mov	r8, r0
 800dfec:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dff0:	69e0      	ldr	r0, [r4, #28]
 800dff2:	f7f8 fb6a 	bl	80066ca <lwip_htonl>
 800dff6:	4602      	mov	r2, r0
 800dff8:	4631      	mov	r1, r6
 800dffa:	4640      	mov	r0, r8
 800dffc:	f7fe ffcc 	bl	800cf98 <dhcp_option_long>
 800e000:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e004:	463a      	mov	r2, r7
 800e006:	4631      	mov	r1, r6
 800e008:	f7ff f898 	bl	800d13c <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <dhcp_arp_reply+0xb8>)
 800e00e:	9301      	str	r3, [sp, #4]
 800e010:	9500      	str	r5, [sp, #0]
 800e012:	2343      	movs	r3, #67	; 0x43
 800e014:	4a0c      	ldr	r2, [pc, #48]	; (800e048 <dhcp_arp_reply+0xbc>)
 800e016:	4639      	mov	r1, r7
 800e018:	480c      	ldr	r0, [pc, #48]	; (800e04c <dhcp_arp_reply+0xc0>)
 800e01a:	6800      	ldr	r0, [r0, #0]
 800e01c:	f7fe fd22 	bl	800ca64 <udp_sendto_if_src>
    pbuf_free(p_out);
 800e020:	4638      	mov	r0, r7
 800e022:	f7f9 feab 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800e026:	79a3      	ldrb	r3, [r4, #6]
 800e028:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e02a:	bf1c      	itt	ne
 800e02c:	3301      	addne	r3, #1
 800e02e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e030:	2314      	movs	r3, #20
 800e032:	8123      	strh	r3, [r4, #8]
  return result;
 800e034:	e7b4      	b.n	800dfa0 <dhcp_arp_reply+0x14>
 800e036:	bf00      	nop
 800e038:	0802e59c 	.word	0x0802e59c
 800e03c:	0802e8a8 	.word	0x0802e8a8
 800e040:	0802bc48 	.word	0x0802bc48
 800e044:	0802ec50 	.word	0x0802ec50
 800e048:	0802ec54 	.word	0x0802ec54
 800e04c:	20010790 	.word	0x20010790

0800e050 <dhcp_renew>:
{
 800e050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e054:	b085      	sub	sp, #20
 800e056:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e058:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e05a:	2105      	movs	r1, #5
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7fe ff3f 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e062:	f10d 030e 	add.w	r3, sp, #14
 800e066:	2203      	movs	r2, #3
 800e068:	4621      	mov	r1, r4
 800e06a:	4638      	mov	r0, r7
 800e06c:	f7fe ffba 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800e070:	2800      	cmp	r0, #0
 800e072:	d052      	beq.n	800e11a <dhcp_renew+0xca>
 800e074:	4680      	mov	r8, r0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e076:	6846      	ldr	r6, [r0, #4]
 800e078:	36f0      	adds	r6, #240	; 0xf0
 800e07a:	2302      	movs	r3, #2
 800e07c:	2239      	movs	r2, #57	; 0x39
 800e07e:	4631      	mov	r1, r6
 800e080:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e084:	f7fe ff52 	bl	800cf2c <dhcp_option>
 800e088:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e08c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e08e:	4631      	mov	r1, r6
 800e090:	f7fe ff2e 	bl	800cef0 <dhcp_option_short>
 800e094:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e098:	2304      	movs	r3, #4
 800e09a:	2237      	movs	r2, #55	; 0x37
 800e09c:	4631      	mov	r1, r6
 800e09e:	f7fe ff45 	bl	800cf2c <dhcp_option>
 800e0a2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0a6:	4d21      	ldr	r5, [pc, #132]	; (800e12c <dhcp_renew+0xdc>)
 800e0a8:	f105 0904 	add.w	r9, r5, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e0ac:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e0b0:	4631      	mov	r1, r6
 800e0b2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e0b6:	f7fe ff57 	bl	800cf68 <dhcp_option_byte>
 800e0ba:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0be:	454d      	cmp	r5, r9
 800e0c0:	d1f4      	bne.n	800e0ac <dhcp_renew+0x5c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e0c2:	4642      	mov	r2, r8
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	f7ff f839 	bl	800d13c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e0ca:	9700      	str	r7, [sp, #0]
 800e0cc:	2343      	movs	r3, #67	; 0x43
 800e0ce:	f104 0218 	add.w	r2, r4, #24
 800e0d2:	4641      	mov	r1, r8
 800e0d4:	4816      	ldr	r0, [pc, #88]	; (800e130 <dhcp_renew+0xe0>)
 800e0d6:	6800      	ldr	r0, [r0, #0]
 800e0d8:	f7fe fd7c 	bl	800cbd4 <udp_sendto_if>
 800e0dc:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800e0de:	4640      	mov	r0, r8
 800e0e0:	f7f9 fe4c 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800e0e4:	79a3      	ldrb	r3, [r4, #6]
 800e0e6:	2bff      	cmp	r3, #255	; 0xff
 800e0e8:	d01a      	beq.n	800e120 <dhcp_renew+0xd0>
    dhcp->tries++;
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e0f0:	2b09      	cmp	r3, #9
 800e0f2:	d818      	bhi.n	800e126 <dhcp_renew+0xd6>
 800e0f4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e0f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e0fc:	011b      	lsls	r3, r3, #4
 800e0fe:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e100:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e104:	4a0b      	ldr	r2, [pc, #44]	; (800e134 <dhcp_renew+0xe4>)
 800e106:	fb82 1203 	smull	r1, r2, r2, r3
 800e10a:	17db      	asrs	r3, r3, #31
 800e10c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e110:	8123      	strh	r3, [r4, #8]
}
 800e112:	4628      	mov	r0, r5
 800e114:	b005      	add	sp, #20
 800e116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 800e11a:	f04f 35ff 	mov.w	r5, #4294967295
 800e11e:	e7e1      	b.n	800e0e4 <dhcp_renew+0x94>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e120:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e124:	e7ec      	b.n	800e100 <dhcp_renew+0xb0>
 800e126:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e12a:	e7e9      	b.n	800e100 <dhcp_renew+0xb0>
 800e12c:	0802e924 	.word	0x0802e924
 800e130:	20010790 	.word	0x20010790
 800e134:	10624dd3 	.word	0x10624dd3

0800e138 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e138:	b170      	cbz	r0, 800e158 <dhcp_supplied_address+0x20>
 800e13a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e13c:	b173      	cbz	r3, 800e15c <dhcp_supplied_address+0x24>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e13e:	795b      	ldrb	r3, [r3, #5]
 800e140:	2b0a      	cmp	r3, #10
 800e142:	d007      	beq.n	800e154 <dhcp_supplied_address+0x1c>
 800e144:	1f18      	subs	r0, r3, #4
 800e146:	b2c0      	uxtb	r0, r0
 800e148:	2801      	cmp	r0, #1
 800e14a:	bf8c      	ite	hi
 800e14c:	2000      	movhi	r0, #0
 800e14e:	2001      	movls	r0, #1
 800e150:	b2c0      	uxtb	r0, r0
 800e152:	4770      	bx	lr
 800e154:	2001      	movs	r0, #1
 800e156:	e7fb      	b.n	800e150 <dhcp_supplied_address+0x18>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800e158:	2000      	movs	r0, #0
 800e15a:	4770      	bx	lr
 800e15c:	2000      	movs	r0, #0
}
 800e15e:	4770      	bx	lr

0800e160 <dhcp_release_and_stop>:
{
 800e160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e164:	b084      	sub	sp, #16
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e166:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (dhcp == NULL) {
 800e168:	b1fc      	cbz	r4, 800e1aa <dhcp_release_and_stop+0x4a>
 800e16a:	4605      	mov	r5, r0
  if (dhcp->state == DHCP_STATE_OFF) {
 800e16c:	7963      	ldrb	r3, [r4, #5]
 800e16e:	b1e3      	cbz	r3, 800e1aa <dhcp_release_and_stop+0x4a>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e170:	69a3      	ldr	r3, [r4, #24]
 800e172:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e174:	2300      	movs	r3, #0
 800e176:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e178:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e17a:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e17c:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e17e:	6323      	str	r3, [r4, #48]	; 0x30
 800e180:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e182:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e184:	82a3      	strh	r3, [r4, #20]
 800e186:	8263      	strh	r3, [r4, #18]
 800e188:	8223      	strh	r3, [r4, #16]
 800e18a:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800e18c:	f7ff ffd4 	bl	800e138 <dhcp_supplied_address>
 800e190:	b970      	cbnz	r0, 800e1b0 <dhcp_release_and_stop+0x50>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e192:	4922      	ldr	r1, [pc, #136]	; (800e21c <dhcp_release_and_stop+0xbc>)
 800e194:	460b      	mov	r3, r1
 800e196:	460a      	mov	r2, r1
 800e198:	4628      	mov	r0, r5
 800e19a:	f7f9 fb97 	bl	80078cc <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e19e:	2100      	movs	r1, #0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7fe fe9d 	bl	800cee0 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800e1a6:	7923      	ldrb	r3, [r4, #4]
 800e1a8:	bb93      	cbnz	r3, 800e210 <dhcp_release_and_stop+0xb0>
}
 800e1aa:	b004      	add	sp, #16
 800e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e1b0:	f10d 030a 	add.w	r3, sp, #10
 800e1b4:	2207      	movs	r2, #7
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f7fe ff13 	bl	800cfe4 <dhcp_create_msg>
    if (p_out != NULL) {
 800e1be:	4607      	mov	r7, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d0e6      	beq.n	800e192 <dhcp_release_and_stop+0x32>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e1c4:	6846      	ldr	r6, [r0, #4]
 800e1c6:	36f0      	adds	r6, #240	; 0xf0
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	2236      	movs	r2, #54	; 0x36
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800e1d2:	f7fe feab 	bl	800cf2c <dhcp_option>
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e1dc:	9803      	ldr	r0, [sp, #12]
 800e1de:	f7f8 fa74 	bl	80066ca <lwip_htonl>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	f7fe fed6 	bl	800cf98 <dhcp_option_long>
 800e1ec:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e1f0:	463a      	mov	r2, r7
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	f7fe ffa2 	bl	800d13c <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e1f8:	9500      	str	r5, [sp, #0]
 800e1fa:	2343      	movs	r3, #67	; 0x43
 800e1fc:	aa03      	add	r2, sp, #12
 800e1fe:	4639      	mov	r1, r7
 800e200:	4807      	ldr	r0, [pc, #28]	; (800e220 <dhcp_release_and_stop+0xc0>)
 800e202:	6800      	ldr	r0, [r0, #0]
 800e204:	f7fe fce6 	bl	800cbd4 <udp_sendto_if>
      pbuf_free(p_out);
 800e208:	4638      	mov	r0, r7
 800e20a:	f7f9 fdb7 	bl	8007d7c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 800e20e:	e7c0      	b.n	800e192 <dhcp_release_and_stop+0x32>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e210:	f7ff fa2a 	bl	800d668 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	7123      	strb	r3, [r4, #4]
 800e218:	e7c7      	b.n	800e1aa <dhcp_release_and_stop+0x4a>
 800e21a:	bf00      	nop
 800e21c:	0802ec50 	.word	0x0802ec50
 800e220:	20010790 	.word	0x20010790

0800e224 <dhcp_start>:
{
 800e224:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e226:	b328      	cbz	r0, 800e274 <dhcp_start+0x50>
 800e228:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e22a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800e22e:	f013 0f01 	tst.w	r3, #1
 800e232:	d029      	beq.n	800e288 <dhcp_start+0x64>
  dhcp = netif_dhcp_data(netif);
 800e234:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e236:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800e238:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e23c:	d343      	bcc.n	800e2c6 <dhcp_start+0xa2>
  if (dhcp == NULL) {
 800e23e:	b36d      	cbz	r5, 800e29c <dhcp_start+0x78>
    if (dhcp->pcb_allocated != 0) {
 800e240:	792b      	ldrb	r3, [r5, #4]
 800e242:	bb93      	cbnz	r3, 800e2aa <dhcp_start+0x86>
  memset(dhcp, 0, sizeof(struct dhcp));
 800e244:	2234      	movs	r2, #52	; 0x34
 800e246:	2100      	movs	r1, #0
 800e248:	4628      	mov	r0, r5
 800e24a:	f01c f99e 	bl	802a58a <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e24e:	f7ff fa2f 	bl	800d6b0 <dhcp_inc_pcb_refcount>
 800e252:	4606      	mov	r6, r0
 800e254:	2800      	cmp	r0, #0
 800e256:	d13c      	bne.n	800e2d2 <dhcp_start+0xae>
  dhcp->pcb_allocated = 1;
 800e258:	2301      	movs	r3, #1
 800e25a:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800e25c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800e260:	f013 0f04 	tst.w	r3, #4
 800e264:	d024      	beq.n	800e2b0 <dhcp_start+0x8c>
  result = dhcp_discover(netif);
 800e266:	4620      	mov	r0, r4
 800e268:	f7ff f8d0 	bl	800d40c <dhcp_discover>
  if (result != ERR_OK) {
 800e26c:	4606      	mov	r6, r0
 800e26e:	bb20      	cbnz	r0, 800e2ba <dhcp_start+0x96>
}
 800e270:	4630      	mov	r0, r6
 800e272:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e274:	4b18      	ldr	r3, [pc, #96]	; (800e2d8 <dhcp_start+0xb4>)
 800e276:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e27a:	4918      	ldr	r1, [pc, #96]	; (800e2dc <dhcp_start+0xb8>)
 800e27c:	4818      	ldr	r0, [pc, #96]	; (800e2e0 <dhcp_start+0xbc>)
 800e27e:	f01c fd25 	bl	802accc <iprintf>
 800e282:	f06f 060f 	mvn.w	r6, #15
 800e286:	e7f3      	b.n	800e270 <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e288:	4b13      	ldr	r3, [pc, #76]	; (800e2d8 <dhcp_start+0xb4>)
 800e28a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e28e:	4915      	ldr	r1, [pc, #84]	; (800e2e4 <dhcp_start+0xc0>)
 800e290:	4813      	ldr	r0, [pc, #76]	; (800e2e0 <dhcp_start+0xbc>)
 800e292:	f01c fd1b 	bl	802accc <iprintf>
 800e296:	f06f 060f 	mvn.w	r6, #15
 800e29a:	e7e9      	b.n	800e270 <dhcp_start+0x4c>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e29c:	2034      	movs	r0, #52	; 0x34
 800e29e:	f7f9 f95d 	bl	800755c <mem_malloc>
    if (dhcp == NULL) {
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	b190      	cbz	r0, 800e2cc <dhcp_start+0xa8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e2a6:	6260      	str	r0, [r4, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800e2a8:	e7cc      	b.n	800e244 <dhcp_start+0x20>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e2aa:	f7ff f9dd 	bl	800d668 <dhcp_dec_pcb_refcount>
 800e2ae:	e7c9      	b.n	800e244 <dhcp_start+0x20>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800e2b0:	2102      	movs	r1, #2
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f7fe fe14 	bl	800cee0 <dhcp_set_state>
    return ERR_OK;
 800e2b8:	e7da      	b.n	800e270 <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f7ff ff50 	bl	800e160 <dhcp_release_and_stop>
    return ERR_MEM;
 800e2c0:	f04f 36ff 	mov.w	r6, #4294967295
 800e2c4:	e7d4      	b.n	800e270 <dhcp_start+0x4c>
    return ERR_MEM;
 800e2c6:	f04f 36ff 	mov.w	r6, #4294967295
 800e2ca:	e7d1      	b.n	800e270 <dhcp_start+0x4c>
      return ERR_MEM;
 800e2cc:	f04f 36ff 	mov.w	r6, #4294967295
 800e2d0:	e7ce      	b.n	800e270 <dhcp_start+0x4c>
    return ERR_MEM;
 800e2d2:	f04f 36ff 	mov.w	r6, #4294967295
 800e2d6:	e7cb      	b.n	800e270 <dhcp_start+0x4c>
 800e2d8:	0802e59c 	.word	0x0802e59c
 800e2dc:	0802e8a8 	.word	0x0802e8a8
 800e2e0:	0802bc48 	.word	0x0802bc48
 800e2e4:	0802e900 	.word	0x0802e900

0800e2e8 <dhcp_coarse_tmr>:
{
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	b085      	sub	sp, #20
  NETIF_FOREACH(netif) {
 800e2ee:	4b5e      	ldr	r3, [pc, #376]	; (800e468 <dhcp_coarse_tmr+0x180>)
 800e2f0:	681c      	ldr	r4, [r3, #0]
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	f000 80b5 	beq.w	800e462 <dhcp_coarse_tmr+0x17a>
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e2f8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e474 <dhcp_coarse_tmr+0x18c>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e2fc:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800e478 <dhcp_coarse_tmr+0x190>
 800e300:	e009      	b.n	800e316 <dhcp_coarse_tmr+0x2e>
        dhcp_release_and_stop(netif);
 800e302:	4620      	mov	r0, r4
 800e304:	f7ff ff2c 	bl	800e160 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff ff8b 	bl	800e224 <dhcp_start>
  NETIF_FOREACH(netif) {
 800e30e:	6824      	ldr	r4, [r4, #0]
 800e310:	2c00      	cmp	r4, #0
 800e312:	f000 80a6 	beq.w	800e462 <dhcp_coarse_tmr+0x17a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e316:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d0f8      	beq.n	800e30e <dhcp_coarse_tmr+0x26>
 800e31c:	795a      	ldrb	r2, [r3, #5]
 800e31e:	2a00      	cmp	r2, #0
 800e320:	d0f5      	beq.n	800e30e <dhcp_coarse_tmr+0x26>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e322:	8a99      	ldrh	r1, [r3, #20]
 800e324:	b129      	cbz	r1, 800e332 <dhcp_coarse_tmr+0x4a>
 800e326:	8a5a      	ldrh	r2, [r3, #18]
 800e328:	3201      	adds	r2, #1
 800e32a:	b292      	uxth	r2, r2
 800e32c:	825a      	strh	r2, [r3, #18]
 800e32e:	4291      	cmp	r1, r2
 800e330:	d0e7      	beq.n	800e302 <dhcp_coarse_tmr+0x1a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e332:	8a1a      	ldrh	r2, [r3, #16]
 800e334:	b11a      	cbz	r2, 800e33e <dhcp_coarse_tmr+0x56>
 800e336:	1e51      	subs	r1, r2, #1
 800e338:	8219      	strh	r1, [r3, #16]
 800e33a:	2a01      	cmp	r2, #1
 800e33c:	d01b      	beq.n	800e376 <dhcp_coarse_tmr+0x8e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e33e:	89da      	ldrh	r2, [r3, #14]
 800e340:	2a00      	cmp	r2, #0
 800e342:	d0e4      	beq.n	800e30e <dhcp_coarse_tmr+0x26>
 800e344:	1e51      	subs	r1, r2, #1
 800e346:	81d9      	strh	r1, [r3, #14]
 800e348:	2a01      	cmp	r2, #1
 800e34a:	d1e0      	bne.n	800e30e <dhcp_coarse_tmr+0x26>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e34c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e34e:	796b      	ldrb	r3, [r5, #5]
 800e350:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800e354:	2a01      	cmp	r2, #1
 800e356:	d001      	beq.n	800e35c <dhcp_coarse_tmr+0x74>
 800e358:	2b0a      	cmp	r3, #10
 800e35a:	d1d8      	bne.n	800e30e <dhcp_coarse_tmr+0x26>
    dhcp_renew(netif);
 800e35c:	4620      	mov	r0, r4
 800e35e:	f7ff fe77 	bl	800e050 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e362:	89ab      	ldrh	r3, [r5, #12]
 800e364:	8a6a      	ldrh	r2, [r5, #18]
 800e366:	1a9b      	subs	r3, r3, r2
 800e368:	2b01      	cmp	r3, #1
 800e36a:	ddd0      	ble.n	800e30e <dhcp_coarse_tmr+0x26>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e36c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e370:	105b      	asrs	r3, r3, #1
 800e372:	81eb      	strh	r3, [r5, #14]
 800e374:	e7cb      	b.n	800e30e <dhcp_coarse_tmr+0x26>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e376:	6a67      	ldr	r7, [r4, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e378:	797b      	ldrb	r3, [r7, #5]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b09      	cmp	r3, #9
 800e380:	d8c5      	bhi.n	800e30e <dhcp_coarse_tmr+0x26>
 800e382:	f240 2219 	movw	r2, #537	; 0x219
 800e386:	fa22 f303 	lsr.w	r3, r2, r3
 800e38a:	f013 0f01 	tst.w	r3, #1
 800e38e:	d0be      	beq.n	800e30e <dhcp_coarse_tmr+0x26>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e390:	2104      	movs	r1, #4
 800e392:	4638      	mov	r0, r7
 800e394:	f7fe fda4 	bl	800cee0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e398:	f10d 030e 	add.w	r3, sp, #14
 800e39c:	2203      	movs	r2, #3
 800e39e:	4639      	mov	r1, r7
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f7fe fe1f 	bl	800cfe4 <dhcp_create_msg>
  if (p_out != NULL) {
 800e3a6:	4683      	mov	fp, r0
 800e3a8:	b3a0      	cbz	r0, 800e414 <dhcp_coarse_tmr+0x12c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e3aa:	6846      	ldr	r6, [r0, #4]
 800e3ac:	36f0      	adds	r6, #240	; 0xf0
 800e3ae:	2302      	movs	r3, #2
 800e3b0:	2239      	movs	r2, #57	; 0x39
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e3b8:	f7fe fdb8 	bl	800cf2c <dhcp_option>
 800e3bc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e3c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	f7fe fd94 	bl	800cef0 <dhcp_option_short>
 800e3c8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e3cc:	2304      	movs	r3, #4
 800e3ce:	2237      	movs	r2, #55	; 0x37
 800e3d0:	4631      	mov	r1, r6
 800e3d2:	f7fe fdab 	bl	800cf2c <dhcp_option>
 800e3d6:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e3da:	4d24      	ldr	r5, [pc, #144]	; (800e46c <dhcp_coarse_tmr+0x184>)
 800e3dc:	f105 0a04 	add.w	sl, r5, #4
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e3e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e3e4:	4631      	mov	r1, r6
 800e3e6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e3ea:	f7fe fdbd 	bl	800cf68 <dhcp_option_byte>
 800e3ee:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e3f2:	4555      	cmp	r5, sl
 800e3f4:	d1f4      	bne.n	800e3e0 <dhcp_coarse_tmr+0xf8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e3f6:	465a      	mov	r2, fp
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	f7fe fe9f 	bl	800d13c <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e3fe:	9400      	str	r4, [sp, #0]
 800e400:	2343      	movs	r3, #67	; 0x43
 800e402:	4a1b      	ldr	r2, [pc, #108]	; (800e470 <dhcp_coarse_tmr+0x188>)
 800e404:	4659      	mov	r1, fp
 800e406:	f8d8 0000 	ldr.w	r0, [r8]
 800e40a:	f7fe fbe3 	bl	800cbd4 <udp_sendto_if>
    pbuf_free(p_out);
 800e40e:	4658      	mov	r0, fp
 800e410:	f7f9 fcb4 	bl	8007d7c <pbuf_free>
  if (dhcp->tries < 255) {
 800e414:	79bb      	ldrb	r3, [r7, #6]
 800e416:	2bff      	cmp	r3, #255	; 0xff
 800e418:	d01d      	beq.n	800e456 <dhcp_coarse_tmr+0x16e>
    dhcp->tries++;
 800e41a:	3301      	adds	r3, #1
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e420:	2b09      	cmp	r3, #9
 800e422:	d81b      	bhi.n	800e45c <dhcp_coarse_tmr+0x174>
 800e424:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e428:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e430:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e434:	fb89 1203 	smull	r1, r2, r9, r3
 800e438:	17db      	asrs	r3, r3, #31
 800e43a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e43e:	813b      	strh	r3, [r7, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e440:	8abb      	ldrh	r3, [r7, #20]
 800e442:	8a7a      	ldrh	r2, [r7, #18]
 800e444:	1a9b      	subs	r3, r3, r2
 800e446:	2b01      	cmp	r3, #1
 800e448:	f77f af61 	ble.w	800e30e <dhcp_coarse_tmr+0x26>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e44c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e450:	105b      	asrs	r3, r3, #1
 800e452:	823b      	strh	r3, [r7, #16]
 800e454:	e75b      	b.n	800e30e <dhcp_coarse_tmr+0x26>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e456:	f242 7310 	movw	r3, #10000	; 0x2710
 800e45a:	e7e9      	b.n	800e430 <dhcp_coarse_tmr+0x148>
 800e45c:	f242 7310 	movw	r3, #10000	; 0x2710
 800e460:	e7e6      	b.n	800e430 <dhcp_coarse_tmr+0x148>
}
 800e462:	b005      	add	sp, #20
 800e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e468:	20014624 	.word	0x20014624
 800e46c:	0802e924 	.word	0x0802e924
 800e470:	0802ec54 	.word	0x0802ec54
 800e474:	10624dd3 	.word	0x10624dd3
 800e478:	20010790 	.word	0x20010790

0800e47c <dhcp_fine_tmr>:
{
 800e47c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800e47e:	4b25      	ldr	r3, [pc, #148]	; (800e514 <dhcp_fine_tmr+0x98>)
 800e480:	681c      	ldr	r4, [r3, #0]
 800e482:	2c00      	cmp	r4, #0
 800e484:	d044      	beq.n	800e510 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
 800e486:	2500      	movs	r5, #0
 800e488:	e004      	b.n	800e494 <dhcp_fine_tmr+0x18>
      } else if (dhcp->request_timeout == 1) {
 800e48a:	2a01      	cmp	r2, #1
 800e48c:	d00b      	beq.n	800e4a6 <dhcp_fine_tmr+0x2a>
  NETIF_FOREACH(netif) {
 800e48e:	6824      	ldr	r4, [r4, #0]
 800e490:	2c00      	cmp	r4, #0
 800e492:	d03d      	beq.n	800e510 <dhcp_fine_tmr+0x94>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e494:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0f9      	beq.n	800e48e <dhcp_fine_tmr+0x12>
      if (dhcp->request_timeout > 1) {
 800e49a:	891a      	ldrh	r2, [r3, #8]
 800e49c:	2a01      	cmp	r2, #1
 800e49e:	d9f4      	bls.n	800e48a <dhcp_fine_tmr+0xe>
        dhcp->request_timeout--;
 800e4a0:	3a01      	subs	r2, #1
 800e4a2:	811a      	strh	r2, [r3, #8]
 800e4a4:	e7f3      	b.n	800e48e <dhcp_fine_tmr+0x12>
        dhcp->request_timeout--;
 800e4a6:	811d      	strh	r5, [r3, #8]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e4a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e4aa:	7953      	ldrb	r3, [r2, #5]
 800e4ac:	2b0c      	cmp	r3, #12
 800e4ae:	d00e      	beq.n	800e4ce <dhcp_fine_tmr+0x52>
 800e4b0:	2b06      	cmp	r3, #6
 800e4b2:	d00c      	beq.n	800e4ce <dhcp_fine_tmr+0x52>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d00e      	beq.n	800e4d6 <dhcp_fine_tmr+0x5a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e4b8:	2b08      	cmp	r3, #8
 800e4ba:	d01a      	beq.n	800e4f2 <dhcp_fine_tmr+0x76>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d1e6      	bne.n	800e48e <dhcp_fine_tmr+0x12>
    if (dhcp->tries < REBOOT_TRIES) {
 800e4c0:	7993      	ldrb	r3, [r2, #6]
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d920      	bls.n	800e508 <dhcp_fine_tmr+0x8c>
      dhcp_discover(netif);
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f7fe ffa0 	bl	800d40c <dhcp_discover>
 800e4cc:	e7df      	b.n	800e48e <dhcp_fine_tmr+0x12>
    dhcp_discover(netif);
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f7fe ff9c 	bl	800d40c <dhcp_discover>
 800e4d4:	e7db      	b.n	800e48e <dhcp_fine_tmr+0x12>
    if (dhcp->tries <= 5) {
 800e4d6:	7993      	ldrb	r3, [r2, #6]
 800e4d8:	2b05      	cmp	r3, #5
 800e4da:	d803      	bhi.n	800e4e4 <dhcp_fine_tmr+0x68>
      dhcp_select(netif);
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f7fe fed3 	bl	800d288 <dhcp_select>
 800e4e2:	e7d4      	b.n	800e48e <dhcp_fine_tmr+0x12>
      dhcp_release_and_stop(netif);
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f7ff fe3b 	bl	800e160 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	f7ff fe9a 	bl	800e224 <dhcp_start>
 800e4f0:	e7cd      	b.n	800e48e <dhcp_fine_tmr+0x12>
    if (dhcp->tries <= 1) {
 800e4f2:	7993      	ldrb	r3, [r2, #6]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d903      	bls.n	800e500 <dhcp_fine_tmr+0x84>
      dhcp_bind(netif);
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7ff f817 	bl	800d52c <dhcp_bind>
 800e4fe:	e7c6      	b.n	800e48e <dhcp_fine_tmr+0x12>
      dhcp_check(netif);
 800e500:	4620      	mov	r0, r4
 800e502:	f7fe fffd 	bl	800d500 <dhcp_check>
 800e506:	e7c2      	b.n	800e48e <dhcp_fine_tmr+0x12>
      dhcp_reboot(netif);
 800e508:	4620      	mov	r0, r4
 800e50a:	f7fe fe35 	bl	800d178 <dhcp_reboot>
 800e50e:	e7be      	b.n	800e48e <dhcp_fine_tmr+0x12>
}
 800e510:	bd38      	pop	{r3, r4, r5, pc}
 800e512:	bf00      	nop
 800e514:	20014624 	.word	0x20014624

0800e518 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e518:	b510      	push	{r4, lr}
 800e51a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e51c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800e520:	4b09      	ldr	r3, [pc, #36]	; (800e548 <etharp_free_entry+0x30>)
 800e522:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800e526:	b138      	cbz	r0, 800e538 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e528:	f7f9 fc28 	bl	8007d7c <pbuf_free>
    arp_table[i].q = NULL;
 800e52c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e530:	00db      	lsls	r3, r3, #3
 800e532:	4a05      	ldr	r2, [pc, #20]	; (800e548 <etharp_free_entry+0x30>)
 800e534:	2100      	movs	r1, #0
 800e536:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e538:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e53c:	4802      	ldr	r0, [pc, #8]	; (800e548 <etharp_free_entry+0x30>)
 800e53e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e542:	2300      	movs	r3, #0
 800e544:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e546:	bd10      	pop	{r4, pc}
 800e548:	2001079c 	.word	0x2001079c

0800e54c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	b085      	sub	sp, #20
 800e552:	4606      	mov	r6, r0
 800e554:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e556:	4c4e      	ldr	r4, [pc, #312]	; (800e690 <etharp_find_entry+0x144>)
{
 800e558:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e55a:	4699      	mov	r9, r3
 800e55c:	9302      	str	r3, [sp, #8]
 800e55e:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 800e560:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 800e562:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e564:	4680      	mov	r8, r0
 800e566:	9003      	str	r0, [sp, #12]
 800e568:	9101      	str	r1, [sp, #4]
 800e56a:	e007      	b.n	800e57c <etharp_find_entry+0x30>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e56c:	f1bc 0f00 	cmp.w	ip, #0
 800e570:	d10e      	bne.n	800e590 <etharp_find_entry+0x44>
 800e572:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e574:	3301      	adds	r3, #1
 800e576:	3418      	adds	r4, #24
 800e578:	2b0a      	cmp	r3, #10
 800e57a:	d02f      	beq.n	800e5dc <etharp_find_entry+0x90>
 800e57c:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 800e580:	4622      	mov	r2, r4
 800e582:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e586:	2d0a      	cmp	r5, #10
 800e588:	d0f0      	beq.n	800e56c <etharp_find_entry+0x20>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800e58a:	f1bc 0f00 	cmp.w	ip, #0
 800e58e:	d0f1      	beq.n	800e574 <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e590:	b126      	cbz	r6, 800e59c <etharp_find_entry+0x50>
 800e592:	6831      	ldr	r1, [r6, #0]
 800e594:	468a      	mov	sl, r1
 800e596:	6851      	ldr	r1, [r2, #4]
 800e598:	458a      	cmp	sl, r1
 800e59a:	d008      	beq.n	800e5ae <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e59c:	f1bc 0f01 	cmp.w	ip, #1
 800e5a0:	d00c      	beq.n	800e5bc <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e5a2:	8a52      	ldrh	r2, [r2, #18]
 800e5a4:	454a      	cmp	r2, r9
 800e5a6:	d3e5      	bcc.n	800e574 <etharp_find_entry+0x28>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800e5a8:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 800e5aa:	46f0      	mov	r8, lr
 800e5ac:	e7e2      	b.n	800e574 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e5ae:	2f00      	cmp	r7, #0
 800e5b0:	d063      	beq.n	800e67a <etharp_find_entry+0x12e>
 800e5b2:	6891      	ldr	r1, [r2, #8]
 800e5b4:	42b9      	cmp	r1, r7
 800e5b6:	d1f1      	bne.n	800e59c <etharp_find_entry+0x50>
 800e5b8:	4675      	mov	r5, lr
 800e5ba:	e030      	b.n	800e61e <etharp_find_entry+0xd2>
        if (arp_table[i].q != NULL) {
 800e5bc:	6811      	ldr	r1, [r2, #0]
 800e5be:	b129      	cbz	r1, 800e5cc <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 800e5c0:	8a52      	ldrh	r2, [r2, #18]
 800e5c2:	455a      	cmp	r2, fp
 800e5c4:	d3d6      	bcc.n	800e574 <etharp_find_entry+0x28>
            age_queue = arp_table[i].ctime;
 800e5c6:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800e5c8:	4670      	mov	r0, lr
 800e5ca:	e7d3      	b.n	800e574 <etharp_find_entry+0x28>
          if (arp_table[i].ctime >= age_pending) {
 800e5cc:	8a52      	ldrh	r2, [r2, #18]
 800e5ce:	9902      	ldr	r1, [sp, #8]
 800e5d0:	428a      	cmp	r2, r1
 800e5d2:	d3cf      	bcc.n	800e574 <etharp_find_entry+0x28>
            age_pending = arp_table[i].ctime;
 800e5d4:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800e5d6:	f8cd e00c 	str.w	lr, [sp, #12]
 800e5da:	e7cb      	b.n	800e574 <etharp_find_entry+0x28>
 800e5dc:	9901      	ldr	r1, [sp, #4]
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e5de:	f011 0f02 	tst.w	r1, #2
 800e5e2:	d14c      	bne.n	800e67e <etharp_find_entry+0x132>
 800e5e4:	2d0a      	cmp	r5, #10
 800e5e6:	d01e      	beq.n	800e626 <etharp_find_entry+0xda>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e5e8:	2d09      	cmp	r5, #9
 800e5ea:	dc1f      	bgt.n	800e62c <etharp_find_entry+0xe0>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e5ec:	462c      	mov	r4, r5
 800e5ee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800e5f2:	4a27      	ldr	r2, [pc, #156]	; (800e690 <etharp_find_entry+0x144>)
 800e5f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5f8:	7d1b      	ldrb	r3, [r3, #20]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d135      	bne.n	800e66a <etharp_find_entry+0x11e>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e5fe:	b136      	cbz	r6, 800e60e <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e600:	6831      	ldr	r1, [r6, #0]
 800e602:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e606:	4a22      	ldr	r2, [pc, #136]	; (800e690 <etharp_find_entry+0x144>)
 800e608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e60c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800e60e:	4b20      	ldr	r3, [pc, #128]	; (800e690 <etharp_find_entry+0x144>)
 800e610:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e614:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e618:	2100      	movs	r1, #0
 800e61a:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e61c:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800e61e:	4628      	mov	r0, r5
 800e620:	b005      	add	sp, #20
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e626:	f011 0f01 	tst.w	r1, #1
 800e62a:	d02b      	beq.n	800e684 <etharp_find_entry+0x138>
    if (old_stable < ARP_TABLE_SIZE) {
 800e62c:	f1b8 0f09 	cmp.w	r8, #9
 800e630:	dc11      	bgt.n	800e656 <etharp_find_entry+0x10a>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e632:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800e636:	4a16      	ldr	r2, [pc, #88]	; (800e690 <etharp_find_entry+0x144>)
 800e638:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e63c:	b133      	cbz	r3, 800e64c <etharp_find_entry+0x100>
 800e63e:	4b15      	ldr	r3, [pc, #84]	; (800e694 <etharp_find_entry+0x148>)
 800e640:	f240 126d 	movw	r2, #365	; 0x16d
 800e644:	4914      	ldr	r1, [pc, #80]	; (800e698 <etharp_find_entry+0x14c>)
 800e646:	4815      	ldr	r0, [pc, #84]	; (800e69c <etharp_find_entry+0x150>)
 800e648:	f01c fb40 	bl	802accc <iprintf>
    etharp_free_entry(i);
 800e64c:	4640      	mov	r0, r8
 800e64e:	f7ff ff63 	bl	800e518 <etharp_free_entry>
 800e652:	4645      	mov	r5, r8
 800e654:	e7ca      	b.n	800e5ec <etharp_find_entry+0xa0>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e656:	9b03      	ldr	r3, [sp, #12]
 800e658:	2b09      	cmp	r3, #9
 800e65a:	dd16      	ble.n	800e68a <etharp_find_entry+0x13e>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e65c:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 800e65e:	bfc8      	it	gt
 800e660:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e664:	dcdb      	bgt.n	800e61e <etharp_find_entry+0xd2>
 800e666:	4680      	mov	r8, r0
 800e668:	e7f0      	b.n	800e64c <etharp_find_entry+0x100>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e66a:	4b0a      	ldr	r3, [pc, #40]	; (800e694 <etharp_find_entry+0x148>)
 800e66c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e670:	490b      	ldr	r1, [pc, #44]	; (800e6a0 <etharp_find_entry+0x154>)
 800e672:	480a      	ldr	r0, [pc, #40]	; (800e69c <etharp_find_entry+0x150>)
 800e674:	f01c fb2a 	bl	802accc <iprintf>
 800e678:	e7c1      	b.n	800e5fe <etharp_find_entry+0xb2>
 800e67a:	4675      	mov	r5, lr
 800e67c:	e7cf      	b.n	800e61e <etharp_find_entry+0xd2>
    return (s16_t)ERR_MEM;
 800e67e:	f04f 35ff 	mov.w	r5, #4294967295
 800e682:	e7cc      	b.n	800e61e <etharp_find_entry+0xd2>
 800e684:	f04f 35ff 	mov.w	r5, #4294967295
 800e688:	e7c9      	b.n	800e61e <etharp_find_entry+0xd2>
 800e68a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e68e:	e7dd      	b.n	800e64c <etharp_find_entry+0x100>
 800e690:	2001079c 	.word	0x2001079c
 800e694:	0802e928 	.word	0x0802e928
 800e698:	0802e960 	.word	0x0802e960
 800e69c:	0802bc48 	.word	0x0802bc48
 800e6a0:	0802e978 	.word	0x0802e978

0800e6a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a8:	b082      	sub	sp, #8
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	4690      	mov	r8, r2
 800e6ae:	461d      	mov	r5, r3
 800e6b0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6b4:	4681      	mov	r9, r0
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	d042      	beq.n	800e740 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e6ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6be:	211c      	movs	r1, #28
 800e6c0:	200e      	movs	r0, #14
 800e6c2:	f7f9 fbcb 	bl	8007e5c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d051      	beq.n	800e770 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e6cc:	8943      	ldrh	r3, [r0, #10]
 800e6ce:	2b1b      	cmp	r3, #27
 800e6d0:	d93e      	bls.n	800e750 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e6d2:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e6d4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800e6d8:	f7f7 fff2 	bl	80066c0 <lwip_htons>
 800e6dc:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e6de:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 800e6e2:	2b06      	cmp	r3, #6
 800e6e4:	d13c      	bne.n	800e760 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e6e6:	682b      	ldr	r3, [r5, #0]
 800e6e8:	60a3      	str	r3, [r4, #8]
 800e6ea:	88ab      	ldrh	r3, [r5, #4]
 800e6ec:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e6ee:	f8da 3000 	ldr.w	r3, [sl]
 800e6f2:	f8c4 3012 	str.w	r3, [r4, #18]
 800e6f6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e6fa:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e70a:	2500      	movs	r5, #0
 800e70c:	7025      	strb	r5, [r4, #0]
 800e70e:	2301      	movs	r3, #1
 800e710:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e712:	2308      	movs	r3, #8
 800e714:	70a3      	strb	r3, [r4, #2]
 800e716:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e718:	2306      	movs	r3, #6
 800e71a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e71c:	2304      	movs	r3, #4
 800e71e:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e720:	f640 0306 	movw	r3, #2054	; 0x806
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	4643      	mov	r3, r8
 800e728:	463a      	mov	r2, r7
 800e72a:	4631      	mov	r1, r6
 800e72c:	4648      	mov	r0, r9
 800e72e:	f001 fb7d 	bl	800fe2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e732:	4630      	mov	r0, r6
 800e734:	f7f9 fb22 	bl	8007d7c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800e738:	4628      	mov	r0, r5
}
 800e73a:	b002      	add	sp, #8
 800e73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e740:	4b0d      	ldr	r3, [pc, #52]	; (800e778 <etharp_raw+0xd4>)
 800e742:	f240 4257 	movw	r2, #1111	; 0x457
 800e746:	490d      	ldr	r1, [pc, #52]	; (800e77c <etharp_raw+0xd8>)
 800e748:	480d      	ldr	r0, [pc, #52]	; (800e780 <etharp_raw+0xdc>)
 800e74a:	f01c fabf 	bl	802accc <iprintf>
 800e74e:	e7b4      	b.n	800e6ba <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e750:	4b09      	ldr	r3, [pc, #36]	; (800e778 <etharp_raw+0xd4>)
 800e752:	f240 4262 	movw	r2, #1122	; 0x462
 800e756:	490b      	ldr	r1, [pc, #44]	; (800e784 <etharp_raw+0xe0>)
 800e758:	4809      	ldr	r0, [pc, #36]	; (800e780 <etharp_raw+0xdc>)
 800e75a:	f01c fab7 	bl	802accc <iprintf>
 800e75e:	e7b8      	b.n	800e6d2 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e760:	4b05      	ldr	r3, [pc, #20]	; (800e778 <etharp_raw+0xd4>)
 800e762:	f240 4269 	movw	r2, #1129	; 0x469
 800e766:	4908      	ldr	r1, [pc, #32]	; (800e788 <etharp_raw+0xe4>)
 800e768:	4805      	ldr	r0, [pc, #20]	; (800e780 <etharp_raw+0xdc>)
 800e76a:	f01c faaf 	bl	802accc <iprintf>
 800e76e:	e7ba      	b.n	800e6e6 <etharp_raw+0x42>
    return ERR_MEM;
 800e770:	f04f 30ff 	mov.w	r0, #4294967295
 800e774:	e7e1      	b.n	800e73a <etharp_raw+0x96>
 800e776:	bf00      	nop
 800e778:	0802e928 	.word	0x0802e928
 800e77c:	0802e8a8 	.word	0x0802e8a8
 800e780:	0802bc48 	.word	0x0802bc48
 800e784:	0802e9a4 	.word	0x0802e9a4
 800e788:	0802e9d8 	.word	0x0802e9d8

0800e78c <etharp_cleanup_netif>:
{
 800e78c:	b570      	push	{r4, r5, r6, lr}
 800e78e:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e790:	4c08      	ldr	r4, [pc, #32]	; (800e7b4 <etharp_cleanup_netif+0x28>)
 800e792:	2500      	movs	r5, #0
 800e794:	e003      	b.n	800e79e <etharp_cleanup_netif+0x12>
 800e796:	3501      	adds	r5, #1
 800e798:	3418      	adds	r4, #24
 800e79a:	2d0a      	cmp	r5, #10
 800e79c:	d009      	beq.n	800e7b2 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e79e:	7d23      	ldrb	r3, [r4, #20]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0f8      	beq.n	800e796 <etharp_cleanup_netif+0xa>
 800e7a4:	68a3      	ldr	r3, [r4, #8]
 800e7a6:	42b3      	cmp	r3, r6
 800e7a8:	d1f5      	bne.n	800e796 <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f7ff feb4 	bl	800e518 <etharp_free_entry>
 800e7b0:	e7f1      	b.n	800e796 <etharp_cleanup_netif+0xa>
}
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	2001079c 	.word	0x2001079c

0800e7b8 <etharp_input>:
{
 800e7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7bc:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e7be:	b1a9      	cbz	r1, 800e7ec <etharp_input+0x34>
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800e7c4:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e7c6:	882b      	ldrh	r3, [r5, #0]
 800e7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7cc:	d108      	bne.n	800e7e0 <etharp_input+0x28>
 800e7ce:	792b      	ldrb	r3, [r5, #4]
 800e7d0:	2b06      	cmp	r3, #6
 800e7d2:	d105      	bne.n	800e7e0 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e7d4:	796b      	ldrb	r3, [r5, #5]
 800e7d6:	2b04      	cmp	r3, #4
 800e7d8:	d102      	bne.n	800e7e0 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e7da:	886b      	ldrh	r3, [r5, #2]
 800e7dc:	2b08      	cmp	r3, #8
 800e7de:	d00d      	beq.n	800e7fc <etharp_input+0x44>
    pbuf_free(p);
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f7f9 facb 	bl	8007d7c <pbuf_free>
}
 800e7e6:	b007      	add	sp, #28
 800e7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e7ec:	4b48      	ldr	r3, [pc, #288]	; (800e910 <etharp_input+0x158>)
 800e7ee:	f240 228a 	movw	r2, #650	; 0x28a
 800e7f2:	4948      	ldr	r1, [pc, #288]	; (800e914 <etharp_input+0x15c>)
 800e7f4:	4848      	ldr	r0, [pc, #288]	; (800e918 <etharp_input+0x160>)
 800e7f6:	f01c fa69 	bl	802accc <iprintf>
 800e7fa:	e7f4      	b.n	800e7e6 <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e7fc:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800e800:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e802:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e804:	684b      	ldr	r3, [r1, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d156      	bne.n	800e8b8 <etharp_input+0x100>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e80a:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 800e80e:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e812:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e816:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800e81a:	2b06      	cmp	r3, #6
 800e81c:	d158      	bne.n	800e8d0 <etharp_input+0x118>
  if (ip4_addr_isany(ipaddr) ||
 800e81e:	9805      	ldr	r0, [sp, #20]
 800e820:	2800      	cmp	r0, #0
 800e822:	d03e      	beq.n	800e8a2 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e824:	4631      	mov	r1, r6
 800e826:	f000 fd70 	bl	800f30a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d139      	bne.n	800e8a2 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 800e82e:	9b05      	ldr	r3, [sp, #20]
 800e830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e834:	2be0      	cmp	r3, #224	; 0xe0
 800e836:	d034      	beq.n	800e8a2 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 800e838:	4632      	mov	r2, r6
 800e83a:	4641      	mov	r1, r8
 800e83c:	a805      	add	r0, sp, #20
 800e83e:	f7ff fe85 	bl	800e54c <etharp_find_entry>
  if (i < 0) {
 800e842:	1e03      	subs	r3, r0, #0
 800e844:	db2d      	blt.n	800e8a2 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e846:	4935      	ldr	r1, [pc, #212]	; (800e91c <etharp_input+0x164>)
 800e848:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 800e84c:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 800e850:	2202      	movs	r2, #2
 800e852:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800e856:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e85a:	4672      	mov	r2, lr
 800e85c:	00d2      	lsls	r2, r2, #3
 800e85e:	320c      	adds	r2, #12
 800e860:	eb01 0802 	add.w	r8, r1, r2
 800e864:	6838      	ldr	r0, [r7, #0]
 800e866:	5088      	str	r0, [r1, r2]
 800e868:	88ba      	ldrh	r2, [r7, #4]
 800e86a:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 800e86e:	2200      	movs	r2, #0
 800e870:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 800e874:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800e878:	f1b8 0f00 	cmp.w	r8, #0
 800e87c:	d011      	beq.n	800e8a2 <etharp_input+0xea>
    arp_table[i].q = NULL;
 800e87e:	4673      	mov	r3, lr
 800e880:	00db      	lsls	r3, r3, #3
 800e882:	460a      	mov	r2, r1
 800e884:	2100      	movs	r1, #0
 800e886:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	463b      	mov	r3, r7
 800e890:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 800e894:	4641      	mov	r1, r8
 800e896:	4630      	mov	r0, r6
 800e898:	f001 fac8 	bl	800fe2c <ethernet_output>
    pbuf_free(p);
 800e89c:	4640      	mov	r0, r8
 800e89e:	f7f9 fa6d 	bl	8007d7c <pbuf_free>
  switch (hdr->opcode) {
 800e8a2:	88eb      	ldrh	r3, [r5, #6]
 800e8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8a8:	d01a      	beq.n	800e8e0 <etharp_input+0x128>
 800e8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8ae:	d029      	beq.n	800e904 <etharp_input+0x14c>
  pbuf_free(p);
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f7f9 fa63 	bl	8007d7c <pbuf_free>
 800e8b6:	e796      	b.n	800e7e6 <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e8b8:	f105 0708 	add.w	r7, r5, #8
 800e8bc:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e8be:	bf19      	ittee	ne
 800e8c0:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e8c4:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e8c8:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e8cc:	46c8      	moveq	r8, r9
 800e8ce:	e7a2      	b.n	800e816 <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e8d0:	4b0f      	ldr	r3, [pc, #60]	; (800e910 <etharp_input+0x158>)
 800e8d2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e8d6:	4912      	ldr	r1, [pc, #72]	; (800e920 <etharp_input+0x168>)
 800e8d8:	480f      	ldr	r0, [pc, #60]	; (800e918 <etharp_input+0x160>)
 800e8da:	f01c f9f7 	bl	802accc <iprintf>
 800e8de:	e79e      	b.n	800e81e <etharp_input+0x66>
      if (for_us) {
 800e8e0:	f1b9 0f00 	cmp.w	r9, #0
 800e8e4:	d0e4      	beq.n	800e8b0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e8e6:	f106 012a 	add.w	r1, r6, #42	; 0x2a
        etharp_raw(netif,
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	ab05      	add	r3, sp, #20
 800e8f0:	9302      	str	r3, [sp, #8]
 800e8f2:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e8f4:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	463a      	mov	r2, r7
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff fed1 	bl	800e6a4 <etharp_raw>
 800e902:	e7d5      	b.n	800e8b0 <etharp_input+0xf8>
      dhcp_arp_reply(netif, &sipaddr);
 800e904:	a905      	add	r1, sp, #20
 800e906:	4630      	mov	r0, r6
 800e908:	f7ff fb40 	bl	800df8c <dhcp_arp_reply>
      break;
 800e90c:	e7d0      	b.n	800e8b0 <etharp_input+0xf8>
 800e90e:	bf00      	nop
 800e910:	0802e928 	.word	0x0802e928
 800e914:	0802e8a8 	.word	0x0802e8a8
 800e918:	0802bc48 	.word	0x0802bc48
 800e91c:	2001079c 	.word	0x2001079c
 800e920:	0802ea3c 	.word	0x0802ea3c

0800e924 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e924:	b510      	push	{r4, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e92a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 800e92e:	2401      	movs	r4, #1
 800e930:	9403      	str	r4, [sp, #12]
 800e932:	9102      	str	r1, [sp, #8]
 800e934:	4904      	ldr	r1, [pc, #16]	; (800e948 <etharp_request+0x24>)
 800e936:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e938:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e93a:	9200      	str	r2, [sp, #0]
 800e93c:	4a03      	ldr	r2, [pc, #12]	; (800e94c <etharp_request+0x28>)
 800e93e:	4619      	mov	r1, r3
 800e940:	f7ff feb0 	bl	800e6a4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800e944:	b004      	add	sp, #16
 800e946:	bd10      	pop	{r4, pc}
 800e948:	0802ee5c 	.word	0x0802ee5c
 800e94c:	0802ee54 	.word	0x0802ee54

0800e950 <etharp_tmr>:
{
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e952:	4c14      	ldr	r4, [pc, #80]	; (800e9a4 <etharp_tmr+0x54>)
 800e954:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e956:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e958:	2604      	movs	r6, #4
 800e95a:	e008      	b.n	800e96e <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e95c:	2b04      	cmp	r3, #4
 800e95e:	d91a      	bls.n	800e996 <etharp_tmr+0x46>
        etharp_free_entry(i);
 800e960:	4628      	mov	r0, r5
 800e962:	f7ff fdd9 	bl	800e518 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e966:	3501      	adds	r5, #1
 800e968:	3418      	adds	r4, #24
 800e96a:	2d0a      	cmp	r5, #10
 800e96c:	d018      	beq.n	800e9a0 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 800e96e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800e970:	2a00      	cmp	r2, #0
 800e972:	d0f8      	beq.n	800e966 <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800e974:	8a63      	ldrh	r3, [r4, #18]
 800e976:	3301      	adds	r3, #1
 800e978:	b29b      	uxth	r3, r3
 800e97a:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e97c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e980:	d2ee      	bcs.n	800e960 <etharp_tmr+0x10>
 800e982:	2a01      	cmp	r2, #1
 800e984:	d0ea      	beq.n	800e95c <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e986:	2a03      	cmp	r2, #3
 800e988:	d003      	beq.n	800e992 <etharp_tmr+0x42>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e98a:	2a04      	cmp	r2, #4
 800e98c:	d1eb      	bne.n	800e966 <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e98e:	7527      	strb	r7, [r4, #20]
 800e990:	e7e9      	b.n	800e966 <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e992:	7526      	strb	r6, [r4, #20]
 800e994:	e7e7      	b.n	800e966 <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e996:	1d21      	adds	r1, r4, #4
 800e998:	68a0      	ldr	r0, [r4, #8]
 800e99a:	f7ff ffc3 	bl	800e924 <etharp_request>
 800e99e:	e7e2      	b.n	800e966 <etharp_tmr+0x16>
}
 800e9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	2001079c 	.word	0x2001079c

0800e9a8 <etharp_output_to_arp_index>:
{
 800e9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	460e      	mov	r6, r1
 800e9b0:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e9b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e9b6:	4b32      	ldr	r3, [pc, #200]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800e9b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9bc:	7d1b      	ldrb	r3, [r3, #20]
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d919      	bls.n	800e9f6 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e9c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e9c6:	4a2e      	ldr	r2, [pc, #184]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800e9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9cc:	7d1b      	ldrb	r3, [r3, #20]
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	d019      	beq.n	800ea06 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e9d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e9d6:	4b2a      	ldr	r3, [pc, #168]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800e9d8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e9dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	f104 030c 	add.w	r3, r4, #12
 800e9e6:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f001 fa1d 	bl	800fe2c <ethernet_output>
}
 800e9f2:	b005      	add	sp, #20
 800e9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e9f6:	4b23      	ldr	r3, [pc, #140]	; (800ea84 <etharp_output_to_arp_index+0xdc>)
 800e9f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e9fc:	4922      	ldr	r1, [pc, #136]	; (800ea88 <etharp_output_to_arp_index+0xe0>)
 800e9fe:	4823      	ldr	r0, [pc, #140]	; (800ea8c <etharp_output_to_arp_index+0xe4>)
 800ea00:	f01c f964 	bl	802accc <iprintf>
 800ea04:	e7dd      	b.n	800e9c2 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ea06:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea0a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea0e:	8a5b      	ldrh	r3, [r3, #18]
 800ea10:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ea14:	d822      	bhi.n	800ea5c <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ea16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ea1a:	d3da      	bcc.n	800e9d2 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea1c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800ea20:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea22:	f105 012a 	add.w	r1, r5, #42	; 0x2a
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea26:	4a16      	ldr	r2, [pc, #88]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800ea28:	f100 070c 	add.w	r7, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea30:	3004      	adds	r0, #4
 800ea32:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea34:	9002      	str	r0, [sp, #8]
 800ea36:	4b16      	ldr	r3, [pc, #88]	; (800ea90 <etharp_output_to_arp_index+0xe8>)
 800ea38:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ea3a:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	443a      	add	r2, r7
 800ea42:	4628      	mov	r0, r5
 800ea44:	f7ff fe2e 	bl	800e6a4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d1c2      	bne.n	800e9d2 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ea4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea50:	4a0b      	ldr	r2, [pc, #44]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800ea52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea56:	2203      	movs	r2, #3
 800ea58:	751a      	strb	r2, [r3, #20]
 800ea5a:	e7ba      	b.n	800e9d2 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ea5c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ea60:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ea64:	3104      	adds	r1, #4
 800ea66:	4628      	mov	r0, r5
 800ea68:	f7ff ff5c 	bl	800e924 <etharp_request>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d1b0      	bne.n	800e9d2 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ea70:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea74:	4a02      	ldr	r2, [pc, #8]	; (800ea80 <etharp_output_to_arp_index+0xd8>)
 800ea76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea7a:	2203      	movs	r2, #3
 800ea7c:	751a      	strb	r2, [r3, #20]
 800ea7e:	e7a8      	b.n	800e9d2 <etharp_output_to_arp_index+0x2a>
 800ea80:	2001079c 	.word	0x2001079c
 800ea84:	0802e928 	.word	0x0802e928
 800ea88:	0802ea60 	.word	0x0802ea60
 800ea8c:	0802bc48 	.word	0x0802bc48
 800ea90:	0802ee5c 	.word	0x0802ee5c

0800ea94 <etharp_query>:
{
 800ea94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea98:	b083      	sub	sp, #12
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460d      	mov	r5, r1
 800ea9e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	6828      	ldr	r0, [r5, #0]
 800eaa4:	f000 fc31 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	f040 8089 	bne.w	800ebc0 <etharp_query+0x12c>
      ip4_addr_ismulticast(ipaddr) ||
 800eaae:	682b      	ldr	r3, [r5, #0]
 800eab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eab4:	2ae0      	cmp	r2, #224	; 0xe0
 800eab6:	f000 8086 	beq.w	800ebc6 <etharp_query+0x132>
      ip4_addr_isany(ipaddr)) {
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 8086 	beq.w	800ebcc <etharp_query+0x138>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eac0:	4632      	mov	r2, r6
 800eac2:	2101      	movs	r1, #1
 800eac4:	4628      	mov	r0, r5
 800eac6:	f7ff fd41 	bl	800e54c <etharp_find_entry>
  if (i_err < 0) {
 800eaca:	1e04      	subs	r4, r0, #0
 800eacc:	db2b      	blt.n	800eb26 <etharp_query+0x92>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eace:	b2a3      	uxth	r3, r4
 800ead0:	2b7e      	cmp	r3, #126	; 0x7e
 800ead2:	d82a      	bhi.n	800eb2a <etharp_query+0x96>
  i = (netif_addr_idx_t)i_err;
 800ead4:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ead6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800eada:	4b46      	ldr	r3, [pc, #280]	; (800ebf4 <etharp_query+0x160>)
 800eadc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eae0:	7d1b      	ldrb	r3, [r3, #20]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f040 8081 	bne.w	800ebea <etharp_query+0x156>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eae8:	4613      	mov	r3, r2
 800eaea:	4a42      	ldr	r2, [pc, #264]	; (800ebf4 <etharp_query+0x160>)
 800eaec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800eaf4:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f7ff ff13 	bl	800e924 <etharp_request>
    if (q == NULL) {
 800eafe:	b36f      	cbz	r7, 800eb5c <etharp_query+0xc8>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800eb00:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800eb04:	4a3b      	ldr	r2, [pc, #236]	; (800ebf4 <etharp_query+0x160>)
 800eb06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb0a:	7d1b      	ldrb	r3, [r3, #20]
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d814      	bhi.n	800eb3a <etharp_query+0xa6>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d123      	bne.n	800eb5c <etharp_query+0xc8>
    while (p) {
 800eb14:	2f00      	cmp	r7, #0
 800eb16:	d05f      	beq.n	800ebd8 <etharp_query+0x144>
    p = q;
 800eb18:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eb1a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800ebfc <etharp_query+0x168>
 800eb1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800ec08 <etharp_query+0x174>
 800eb22:	4e35      	ldr	r6, [pc, #212]	; (800ebf8 <etharp_query+0x164>)
 800eb24:	e02a      	b.n	800eb7c <etharp_query+0xe8>
    return (err_t)i_err;
 800eb26:	b260      	sxtb	r0, r4
 800eb28:	e018      	b.n	800eb5c <etharp_query+0xc8>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb2a:	4b34      	ldr	r3, [pc, #208]	; (800ebfc <etharp_query+0x168>)
 800eb2c:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eb30:	4933      	ldr	r1, [pc, #204]	; (800ec00 <etharp_query+0x16c>)
 800eb32:	4831      	ldr	r0, [pc, #196]	; (800ebf8 <etharp_query+0x164>)
 800eb34:	f01c f8ca 	bl	802accc <iprintf>
 800eb38:	e7cc      	b.n	800ead4 <etharp_query+0x40>
    ETHARP_SET_ADDRHINT(netif, i);
 800eb3a:	4b32      	ldr	r3, [pc, #200]	; (800ec04 <etharp_query+0x170>)
 800eb3c:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800eb3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800eb42:	4b2c      	ldr	r3, [pc, #176]	; (800ebf4 <etharp_query+0x160>)
 800eb44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb4c:	9200      	str	r2, [sp, #0]
 800eb4e:	330c      	adds	r3, #12
 800eb50:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 800eb54:	4639      	mov	r1, r7
 800eb56:	4630      	mov	r0, r6
 800eb58:	f001 f968 	bl	800fe2c <ethernet_output>
}
 800eb5c:	b003      	add	sp, #12
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eb62:	464b      	mov	r3, r9
 800eb64:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800eb68:	4641      	mov	r1, r8
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f01c f8ae 	bl	802accc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800eb70:	7b2b      	ldrb	r3, [r5, #12]
 800eb72:	f013 0f40 	tst.w	r3, #64	; 0x40
 800eb76:	d10c      	bne.n	800eb92 <etharp_query+0xfe>
      p = p->next;
 800eb78:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800eb7a:	b36d      	cbz	r5, 800ebd8 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eb7c:	896a      	ldrh	r2, [r5, #10]
 800eb7e:	892b      	ldrh	r3, [r5, #8]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d1f5      	bne.n	800eb70 <etharp_query+0xdc>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1eb      	bne.n	800eb62 <etharp_query+0xce>
      if (PBUF_NEEDS_COPY(p)) {
 800eb8a:	7b2b      	ldrb	r3, [r5, #12]
 800eb8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800eb90:	d022      	beq.n	800ebd8 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800eb92:	463a      	mov	r2, r7
 800eb94:	f44f 7120 	mov.w	r1, #640	; 0x280
 800eb98:	200e      	movs	r0, #14
 800eb9a:	f7f9 fc99 	bl	80084d0 <pbuf_clone>
 800eb9e:	4607      	mov	r7, r0
    if (p != NULL) {
 800eba0:	b1bf      	cbz	r7, 800ebd2 <etharp_query+0x13e>
      if (arp_table[i].q != NULL) {
 800eba2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800eba6:	4a13      	ldr	r2, [pc, #76]	; (800ebf4 <etharp_query+0x160>)
 800eba8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ebac:	b108      	cbz	r0, 800ebb2 <etharp_query+0x11e>
        pbuf_free(arp_table[i].q);
 800ebae:	f7f9 f8e5 	bl	8007d7c <pbuf_free>
      arp_table[i].q = p;
 800ebb2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ebb6:	4a0f      	ldr	r2, [pc, #60]	; (800ebf4 <etharp_query+0x160>)
 800ebb8:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	e7cd      	b.n	800eb5c <etharp_query+0xc8>
    return ERR_ARG;
 800ebc0:	f06f 000f 	mvn.w	r0, #15
 800ebc4:	e7ca      	b.n	800eb5c <etharp_query+0xc8>
 800ebc6:	f06f 000f 	mvn.w	r0, #15
 800ebca:	e7c7      	b.n	800eb5c <etharp_query+0xc8>
 800ebcc:	f06f 000f 	mvn.w	r0, #15
 800ebd0:	e7c4      	b.n	800eb5c <etharp_query+0xc8>
      result = ERR_MEM;
 800ebd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd6:	e7c1      	b.n	800eb5c <etharp_query+0xc8>
      pbuf_ref(p);
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f7f9 fa71 	bl	80080c0 <pbuf_ref>
 800ebde:	e7df      	b.n	800eba0 <etharp_query+0x10c>
    result = etharp_request(netif, ipaddr);
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7ff fe9e 	bl	800e924 <etharp_request>
    if (q == NULL) {
 800ebe8:	e7b8      	b.n	800eb5c <etharp_query+0xc8>
  if (is_new_entry || (q == NULL)) {
 800ebea:	2f00      	cmp	r7, #0
 800ebec:	d0f8      	beq.n	800ebe0 <etharp_query+0x14c>
  err_t result = ERR_MEM;
 800ebee:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf2:	e785      	b.n	800eb00 <etharp_query+0x6c>
 800ebf4:	2001079c 	.word	0x2001079c
 800ebf8:	0802bc48 	.word	0x0802bc48
 800ebfc:	0802e928 	.word	0x0802e928
 800ec00:	0802ea90 	.word	0x0802ea90
 800ec04:	2001088c 	.word	0x2001088c
 800ec08:	0802eaa0 	.word	0x0802eaa0

0800ec0c <etharp_output>:
{
 800ec0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	460f      	mov	r7, r1
 800ec12:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec14:	4606      	mov	r6, r0
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d031      	beq.n	800ec7e <etharp_output+0x72>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec1a:	2f00      	cmp	r7, #0
 800ec1c:	d037      	beq.n	800ec8e <etharp_output+0x82>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ec1e:	2d00      	cmp	r5, #0
 800ec20:	d03d      	beq.n	800ec9e <etharp_output+0x92>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ec22:	4631      	mov	r1, r6
 800ec24:	6828      	ldr	r0, [r5, #0]
 800ec26:	f000 fb70 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d17f      	bne.n	800ed2e <etharp_output+0x122>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ec2e:	682b      	ldr	r3, [r5, #0]
 800ec30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ec34:	2ae0      	cmp	r2, #224	; 0xe0
 800ec36:	d03a      	beq.n	800ecae <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec38:	6872      	ldr	r2, [r6, #4]
 800ec3a:	405a      	eors	r2, r3
 800ec3c:	68b1      	ldr	r1, [r6, #8]
 800ec3e:	420a      	tst	r2, r1
 800ec40:	d009      	beq.n	800ec56 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800ec42:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec44:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d004      	beq.n	800ec56 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ec4c:	68f3      	ldr	r3, [r6, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d079      	beq.n	800ed46 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800ec52:	f106 050c 	add.w	r5, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec56:	4b3d      	ldr	r3, [pc, #244]	; (800ed4c <etharp_output+0x140>)
 800ec58:	781a      	ldrb	r2, [r3, #0]
 800ec5a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ec5e:	4b3c      	ldr	r3, [pc, #240]	; (800ed50 <etharp_output+0x144>)
 800ec60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ec64:	7d1b      	ldrb	r3, [r3, #20]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d906      	bls.n	800ec78 <etharp_output+0x6c>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4938      	ldr	r1, [pc, #224]	; (800ed50 <etharp_output+0x144>)
 800ec6e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	42b3      	cmp	r3, r6
 800ec76:	d030      	beq.n	800ecda <etharp_output+0xce>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ec78:	4b35      	ldr	r3, [pc, #212]	; (800ed50 <etharp_output+0x144>)
{
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	e03f      	b.n	800ecfe <etharp_output+0xf2>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec7e:	4b35      	ldr	r3, [pc, #212]	; (800ed54 <etharp_output+0x148>)
 800ec80:	f240 321e 	movw	r2, #798	; 0x31e
 800ec84:	4934      	ldr	r1, [pc, #208]	; (800ed58 <etharp_output+0x14c>)
 800ec86:	4835      	ldr	r0, [pc, #212]	; (800ed5c <etharp_output+0x150>)
 800ec88:	f01c f820 	bl	802accc <iprintf>
 800ec8c:	e7c5      	b.n	800ec1a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec8e:	4b31      	ldr	r3, [pc, #196]	; (800ed54 <etharp_output+0x148>)
 800ec90:	f240 321f 	movw	r2, #799	; 0x31f
 800ec94:	4932      	ldr	r1, [pc, #200]	; (800ed60 <etharp_output+0x154>)
 800ec96:	4831      	ldr	r0, [pc, #196]	; (800ed5c <etharp_output+0x150>)
 800ec98:	f01c f818 	bl	802accc <iprintf>
 800ec9c:	e7bf      	b.n	800ec1e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ec9e:	4b2d      	ldr	r3, [pc, #180]	; (800ed54 <etharp_output+0x148>)
 800eca0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800eca4:	492f      	ldr	r1, [pc, #188]	; (800ed64 <etharp_output+0x158>)
 800eca6:	482d      	ldr	r0, [pc, #180]	; (800ed5c <etharp_output+0x150>)
 800eca8:	f01c f810 	bl	802accc <iprintf>
 800ecac:	e7b9      	b.n	800ec22 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ecba:	235e      	movs	r3, #94	; 0x5e
 800ecbc:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ecc0:	786b      	ldrb	r3, [r5, #1]
 800ecc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecc6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ecca:	78ab      	ldrb	r3, [r5, #2]
 800eccc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ecd0:	78eb      	ldrb	r3, [r5, #3]
 800ecd2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800ecd6:	ab02      	add	r3, sp, #8
 800ecd8:	e02a      	b.n	800ed30 <etharp_output+0x124>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ecda:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ecde:	491c      	ldr	r1, [pc, #112]	; (800ed50 <etharp_output+0x144>)
 800ece0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ece4:	6829      	ldr	r1, [r5, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	4299      	cmp	r1, r3
 800ecea:	d1c5      	bne.n	800ec78 <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ecec:	4639      	mov	r1, r7
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7ff fe5a 	bl	800e9a8 <etharp_output_to_arp_index>
 800ecf4:	e025      	b.n	800ed42 <etharp_output+0x136>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	3318      	adds	r3, #24
 800ecfa:	280a      	cmp	r0, #10
 800ecfc:	d011      	beq.n	800ed22 <etharp_output+0x116>
 800ecfe:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed00:	7d1c      	ldrb	r4, [r3, #20]
 800ed02:	2c01      	cmp	r4, #1
 800ed04:	d9f7      	bls.n	800ecf6 <etharp_output+0xea>
 800ed06:	6899      	ldr	r1, [r3, #8]
 800ed08:	42b1      	cmp	r1, r6
 800ed0a:	d1f4      	bne.n	800ecf6 <etharp_output+0xea>
          (arp_table[i].netif == netif) &&
 800ed0c:	6829      	ldr	r1, [r5, #0]
 800ed0e:	685c      	ldr	r4, [r3, #4]
 800ed10:	42a1      	cmp	r1, r4
 800ed12:	d1f0      	bne.n	800ecf6 <etharp_output+0xea>
        ETHARP_SET_ADDRHINT(netif, i);
 800ed14:	4b0d      	ldr	r3, [pc, #52]	; (800ed4c <etharp_output+0x140>)
 800ed16:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ed18:	4639      	mov	r1, r7
 800ed1a:	4630      	mov	r0, r6
 800ed1c:	f7ff fe44 	bl	800e9a8 <etharp_output_to_arp_index>
 800ed20:	e00f      	b.n	800ed42 <etharp_output+0x136>
    return etharp_query(netif, dst_addr, q);
 800ed22:	463a      	mov	r2, r7
 800ed24:	4629      	mov	r1, r5
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7ff feb4 	bl	800ea94 <etharp_query>
 800ed2c:	e009      	b.n	800ed42 <etharp_output+0x136>
    dest = (const struct eth_addr *)&ethbroadcast;
 800ed2e:	4b0e      	ldr	r3, [pc, #56]	; (800ed68 <etharp_output+0x15c>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ed30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed34:	9200      	str	r2, [sp, #0]
 800ed36:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 800ed3a:	4639      	mov	r1, r7
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f001 f875 	bl	800fe2c <ethernet_output>
}
 800ed42:	b005      	add	sp, #20
 800ed44:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800ed46:	f06f 0003 	mvn.w	r0, #3
 800ed4a:	e7fa      	b.n	800ed42 <etharp_output+0x136>
 800ed4c:	2001088c 	.word	0x2001088c
 800ed50:	2001079c 	.word	0x2001079c
 800ed54:	0802e928 	.word	0x0802e928
 800ed58:	0802e8a8 	.word	0x0802e8a8
 800ed5c:	0802bc48 	.word	0x0802bc48
 800ed60:	0802eabc 	.word	0x0802eabc
 800ed64:	0802ea1c 	.word	0x0802ea1c
 800ed68:	0802ee54 	.word	0x0802ee54

0800ed6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ed6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed70:	b086      	sub	sp, #24
 800ed72:	4606      	mov	r6, r0
 800ed74:	4688      	mov	r8, r1
 800ed76:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ed78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed7c:	2124      	movs	r1, #36	; 0x24
 800ed7e:	2022      	movs	r0, #34	; 0x22
 800ed80:	f7f9 f86c 	bl	8007e5c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800ed84:	b3a0      	cbz	r0, 800edf0 <icmp_send_response+0x84>
 800ed86:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ed88:	8943      	ldrh	r3, [r0, #10]
 800ed8a:	2b23      	cmp	r3, #35	; 0x23
 800ed8c:	d933      	bls.n	800edf6 <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ed8e:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ed92:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800ed94:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800ed98:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	7123      	strb	r3, [r4, #4]
 800ed9e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800eda0:	71a3      	strb	r3, [r4, #6]
 800eda2:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800eda4:	686b      	ldr	r3, [r5, #4]
 800eda6:	6872      	ldr	r2, [r6, #4]
 800eda8:	6816      	ldr	r6, [r2, #0]
 800edaa:	6850      	ldr	r0, [r2, #4]
 800edac:	6891      	ldr	r1, [r2, #8]
 800edae:	68d7      	ldr	r7, [r2, #12]
 800edb0:	609e      	str	r6, [r3, #8]
 800edb2:	60d8      	str	r0, [r3, #12]
 800edb4:	6119      	str	r1, [r3, #16]
 800edb6:	615f      	str	r7, [r3, #20]
 800edb8:	6916      	ldr	r6, [r2, #16]
 800edba:	6950      	ldr	r0, [r2, #20]
 800edbc:	6991      	ldr	r1, [r2, #24]
 800edbe:	619e      	str	r6, [r3, #24]
 800edc0:	61d8      	str	r0, [r3, #28]
 800edc2:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800edc4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800edc8:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800edca:	a805      	add	r0, sp, #20
 800edcc:	f000 f8ee 	bl	800efac <ip4_route>
#endif
  if (netif != NULL) {
 800edd0:	b158      	cbz	r0, 800edea <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800edd2:	2100      	movs	r1, #0
 800edd4:	70a1      	strb	r1, [r4, #2]
 800edd6:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800edd8:	9002      	str	r0, [sp, #8]
 800edda:	2301      	movs	r3, #1
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	9100      	str	r1, [sp, #0]
 800ede0:	23ff      	movs	r3, #255	; 0xff
 800ede2:	aa05      	add	r2, sp, #20
 800ede4:	4628      	mov	r0, r5
 800ede6:	f000 fa7b 	bl	800f2e0 <ip4_output_if>
  }
  pbuf_free(q);
 800edea:	4628      	mov	r0, r5
 800edec:	f7f8 ffc6 	bl	8007d7c <pbuf_free>
}
 800edf0:	b006      	add	sp, #24
 800edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800edf6:	4b04      	ldr	r3, [pc, #16]	; (800ee08 <icmp_send_response+0x9c>)
 800edf8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800edfc:	4903      	ldr	r1, [pc, #12]	; (800ee0c <icmp_send_response+0xa0>)
 800edfe:	4804      	ldr	r0, [pc, #16]	; (800ee10 <icmp_send_response+0xa4>)
 800ee00:	f01b ff64 	bl	802accc <iprintf>
 800ee04:	e7c3      	b.n	800ed8e <icmp_send_response+0x22>
 800ee06:	bf00      	nop
 800ee08:	0802eac8 	.word	0x0802eac8
 800ee0c:	0802eb00 	.word	0x0802eb00
 800ee10:	0802bc48 	.word	0x0802bc48

0800ee14 <icmp_input>:
{
 800ee14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee18:	b085      	sub	sp, #20
 800ee1a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ee1c:	4b4a      	ldr	r3, [pc, #296]	; (800ef48 <icmp_input+0x134>)
 800ee1e:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ee20:	783b      	ldrb	r3, [r7, #0]
 800ee22:	f003 030f 	and.w	r3, r3, #15
 800ee26:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800ee2a:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800ee2c:	2c13      	cmp	r4, #19
 800ee2e:	d915      	bls.n	800ee5c <icmp_input+0x48>
 800ee30:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800ee32:	8943      	ldrh	r3, [r0, #10]
 800ee34:	2b03      	cmp	r3, #3
 800ee36:	d911      	bls.n	800ee5c <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800ee38:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	2b08      	cmp	r3, #8
 800ee3e:	d161      	bne.n	800ef04 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee40:	4b41      	ldr	r3, [pc, #260]	; (800ef48 <icmp_input+0x134>)
 800ee42:	6958      	ldr	r0, [r3, #20]
 800ee44:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800ee48:	2be0      	cmp	r3, #224	; 0xe0
 800ee4a:	d01a      	beq.n	800ee82 <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ee4c:	4b3e      	ldr	r3, [pc, #248]	; (800ef48 <icmp_input+0x134>)
 800ee4e:	6819      	ldr	r1, [r3, #0]
 800ee50:	f000 fa5b 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800ee54:	b9a8      	cbnz	r0, 800ee82 <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ee56:	892b      	ldrh	r3, [r5, #8]
 800ee58:	2b07      	cmp	r3, #7
 800ee5a:	d805      	bhi.n	800ee68 <icmp_input+0x54>
  pbuf_free(p);
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7f8 ff8d 	bl	8007d7c <pbuf_free>
}
 800ee62:	b005      	add	sp, #20
 800ee64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ee68:	f108 090e 	add.w	r9, r8, #14
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7f8 ff3e 	bl	8007cf0 <pbuf_add_header>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d03a      	beq.n	800eeee <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ee78:	892a      	ldrh	r2, [r5, #8]
 800ee7a:	1913      	adds	r3, r2, r4
 800ee7c:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800ee7e:	428a      	cmp	r2, r1
 800ee80:	d903      	bls.n	800ee8a <icmp_input+0x76>
  pbuf_free(p);
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7f8 ff7a 	bl	8007d7c <pbuf_free>
  return;
 800ee88:	e7eb      	b.n	800ee62 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ee8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee8e:	200e      	movs	r0, #14
 800ee90:	f7f8 ffe4 	bl	8007e5c <pbuf_alloc>
        if (r == NULL) {
 800ee94:	4604      	mov	r4, r0
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d0f3      	beq.n	800ee82 <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ee9a:	8942      	ldrh	r2, [r0, #10]
 800ee9c:	f108 0308 	add.w	r3, r8, #8
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d313      	bcc.n	800eecc <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800eea4:	4642      	mov	r2, r8
 800eea6:	4639      	mov	r1, r7
 800eea8:	6840      	ldr	r0, [r0, #4]
 800eeaa:	f01b fb46 	bl	802a53a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800eeae:	4641      	mov	r1, r8
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f7f8 ff23 	bl	8007cfc <pbuf_remove_header>
 800eeb6:	b960      	cbnz	r0, 800eed2 <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800eeb8:	4629      	mov	r1, r5
 800eeba:	4620      	mov	r0, r4
 800eebc:	f7f9 f962 	bl	8008184 <pbuf_copy>
 800eec0:	b988      	cbnz	r0, 800eee6 <icmp_input+0xd2>
        pbuf_free(p);
 800eec2:	4628      	mov	r0, r5
 800eec4:	f7f8 ff5a 	bl	8007d7c <pbuf_free>
        p = r;
 800eec8:	4625      	mov	r5, r4
 800eeca:	e015      	b.n	800eef8 <icmp_input+0xe4>
          pbuf_free(r);
 800eecc:	f7f8 ff56 	bl	8007d7c <pbuf_free>
          goto icmperr;
 800eed0:	e7d7      	b.n	800ee82 <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800eed2:	4b1e      	ldr	r3, [pc, #120]	; (800ef4c <icmp_input+0x138>)
 800eed4:	22b6      	movs	r2, #182	; 0xb6
 800eed6:	491e      	ldr	r1, [pc, #120]	; (800ef50 <icmp_input+0x13c>)
 800eed8:	481e      	ldr	r0, [pc, #120]	; (800ef54 <icmp_input+0x140>)
 800eeda:	f01b fef7 	bl	802accc <iprintf>
          pbuf_free(r);
 800eede:	4620      	mov	r0, r4
 800eee0:	f7f8 ff4c 	bl	8007d7c <pbuf_free>
          goto icmperr;
 800eee4:	e7cd      	b.n	800ee82 <icmp_input+0x6e>
          pbuf_free(r);
 800eee6:	4620      	mov	r0, r4
 800eee8:	f7f8 ff48 	bl	8007d7c <pbuf_free>
          goto icmperr;
 800eeec:	e7c9      	b.n	800ee82 <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eeee:	4649      	mov	r1, r9
 800eef0:	4628      	mov	r0, r5
 800eef2:	f7f8 ff03 	bl	8007cfc <pbuf_remove_header>
 800eef6:	b948      	cbnz	r0, 800ef0c <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800eef8:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800eefa:	4641      	mov	r1, r8
 800eefc:	4628      	mov	r0, r5
 800eefe:	f7f8 fef7 	bl	8007cf0 <pbuf_add_header>
 800ef02:	b150      	cbz	r0, 800ef1a <icmp_input+0x106>
  pbuf_free(p);
 800ef04:	4628      	mov	r0, r5
 800ef06:	f7f8 ff39 	bl	8007d7c <pbuf_free>
  return;
 800ef0a:	e7aa      	b.n	800ee62 <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ef0c:	4b0f      	ldr	r3, [pc, #60]	; (800ef4c <icmp_input+0x138>)
 800ef0e:	22c7      	movs	r2, #199	; 0xc7
 800ef10:	4911      	ldr	r1, [pc, #68]	; (800ef58 <icmp_input+0x144>)
 800ef12:	4810      	ldr	r0, [pc, #64]	; (800ef54 <icmp_input+0x140>)
 800ef14:	f01b feda 	bl	802accc <iprintf>
          goto icmperr;
 800ef18:	e7b3      	b.n	800ee82 <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ef1a:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800ef1c:	490a      	ldr	r1, [pc, #40]	; (800ef48 <icmp_input+0x134>)
 800ef1e:	694b      	ldr	r3, [r1, #20]
 800ef20:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ef22:	690b      	ldr	r3, [r1, #16]
 800ef24:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ef26:	2200      	movs	r2, #0
 800ef28:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800ef2a:	70a2      	strb	r2, [r4, #2]
 800ef2c:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ef2e:	23ff      	movs	r3, #255	; 0xff
 800ef30:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ef32:	7282      	strb	r2, [r0, #10]
 800ef34:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ef36:	9602      	str	r6, [sp, #8]
 800ef38:	2001      	movs	r0, #1
 800ef3a:	9001      	str	r0, [sp, #4]
 800ef3c:	9200      	str	r2, [sp, #0]
 800ef3e:	3114      	adds	r1, #20
 800ef40:	4628      	mov	r0, r5
 800ef42:	f000 f9cd 	bl	800f2e0 <ip4_output_if>
        if (ret != ERR_OK) {
 800ef46:	e7dd      	b.n	800ef04 <icmp_input+0xf0>
 800ef48:	20010d98 	.word	0x20010d98
 800ef4c:	0802eac8 	.word	0x0802eac8
 800ef50:	0802eb2c 	.word	0x0802eb2c
 800ef54:	0802bc48 	.word	0x0802bc48
 800ef58:	0802eb64 	.word	0x0802eb64

0800ef5c <icmp_dest_unreach>:
{
 800ef5c:	b508      	push	{r3, lr}
 800ef5e:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800ef60:	2103      	movs	r1, #3
 800ef62:	f7ff ff03 	bl	800ed6c <icmp_send_response>
}
 800ef66:	bd08      	pop	{r3, pc}

0800ef68 <icmp_time_exceeded>:
{
 800ef68:	b508      	push	{r3, lr}
 800ef6a:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800ef6c:	210b      	movs	r1, #11
 800ef6e:	f7ff fefd 	bl	800ed6c <icmp_send_response>
}
 800ef72:	bd08      	pop	{r3, pc}

0800ef74 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ef74:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ef76:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800ef7a:	f013 0f01 	tst.w	r3, #1
 800ef7e:	d00c      	beq.n	800ef9a <ip4_input_accept+0x26>
 800ef80:	4601      	mov	r1, r0
 800ef82:	6843      	ldr	r3, [r0, #4]
 800ef84:	b15b      	cbz	r3, 800ef9e <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ef86:	4a08      	ldr	r2, [pc, #32]	; (800efa8 <ip4_input_accept+0x34>)
 800ef88:	6950      	ldr	r0, [r2, #20]
 800ef8a:	4283      	cmp	r3, r0
 800ef8c:	d009      	beq.n	800efa2 <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ef8e:	f000 f9bc 	bl	800f30a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ef92:	3800      	subs	r0, #0
 800ef94:	bf18      	it	ne
 800ef96:	2001      	movne	r0, #1
 800ef98:	e000      	b.n	800ef9c <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ef9a:	2000      	movs	r0, #0
}
 800ef9c:	bd08      	pop	{r3, pc}
  return 0;
 800ef9e:	2000      	movs	r0, #0
 800efa0:	e7fc      	b.n	800ef9c <ip4_input_accept+0x28>
      return 1;
 800efa2:	2001      	movs	r0, #1
 800efa4:	e7fa      	b.n	800ef9c <ip4_input_accept+0x28>
 800efa6:	bf00      	nop
 800efa8:	20010d98 	.word	0x20010d98

0800efac <ip4_route>:
{
 800efac:	b430      	push	{r4, r5}
 800efae:	4604      	mov	r4, r0
  NETIF_FOREACH(netif) {
 800efb0:	4b18      	ldr	r3, [pc, #96]	; (800f014 <ip4_route+0x68>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	b998      	cbnz	r0, 800efde <ip4_route+0x32>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800efb6:	4b18      	ldr	r3, [pc, #96]	; (800f018 <ip4_route+0x6c>)
 800efb8:	6818      	ldr	r0, [r3, #0]
 800efba:	b158      	cbz	r0, 800efd4 <ip4_route+0x28>
 800efbc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800efc0:	f003 0305 	and.w	r3, r3, #5
 800efc4:	2b05      	cmp	r3, #5
 800efc6:	d121      	bne.n	800f00c <ip4_route+0x60>
 800efc8:	6843      	ldr	r3, [r0, #4]
 800efca:	b30b      	cbz	r3, 800f010 <ip4_route+0x64>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800efcc:	7823      	ldrb	r3, [r4, #0]
    return NULL;
 800efce:	2b7f      	cmp	r3, #127	; 0x7f
 800efd0:	bf08      	it	eq
 800efd2:	2000      	moveq	r0, #0
}
 800efd4:	bc30      	pop	{r4, r5}
 800efd6:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800efd8:	6800      	ldr	r0, [r0, #0]
 800efda:	2800      	cmp	r0, #0
 800efdc:	d0eb      	beq.n	800efb6 <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800efde:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800efe2:	f013 0f01 	tst.w	r3, #1
 800efe6:	d0f7      	beq.n	800efd8 <ip4_route+0x2c>
 800efe8:	f013 0f04 	tst.w	r3, #4
 800efec:	d0f4      	beq.n	800efd8 <ip4_route+0x2c>
 800efee:	6842      	ldr	r2, [r0, #4]
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	d0f1      	beq.n	800efd8 <ip4_route+0x2c>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800eff4:	6821      	ldr	r1, [r4, #0]
 800eff6:	404a      	eors	r2, r1
 800eff8:	6885      	ldr	r5, [r0, #8]
 800effa:	422a      	tst	r2, r5
 800effc:	d0ea      	beq.n	800efd4 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800effe:	f013 0f02 	tst.w	r3, #2
 800f002:	d1e9      	bne.n	800efd8 <ip4_route+0x2c>
 800f004:	68c3      	ldr	r3, [r0, #12]
 800f006:	4299      	cmp	r1, r3
 800f008:	d1e6      	bne.n	800efd8 <ip4_route+0x2c>
 800f00a:	e7e3      	b.n	800efd4 <ip4_route+0x28>
    return NULL;
 800f00c:	2000      	movs	r0, #0
 800f00e:	e7e1      	b.n	800efd4 <ip4_route+0x28>
 800f010:	2000      	movs	r0, #0
 800f012:	e7df      	b.n	800efd4 <ip4_route+0x28>
 800f014:	20014624 	.word	0x20014624
 800f018:	20014628 	.word	0x20014628

0800f01c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f020:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f022:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800f026:	f898 3000 	ldrb.w	r3, [r8]
 800f02a:	091a      	lsrs	r2, r3, #4
 800f02c:	2a04      	cmp	r2, #4
 800f02e:	d004      	beq.n	800f03a <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f030:	f7f8 fea4 	bl	8007d7c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800f034:	2000      	movs	r0, #0
 800f036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f03c:	f003 030f 	and.w	r3, r3, #15
 800f040:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800f044:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f046:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800f04a:	f7f7 fb39 	bl	80066c0 <lwip_htons>
 800f04e:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800f050:	8923      	ldrh	r3, [r4, #8]
 800f052:	4283      	cmp	r3, r0
 800f054:	d866      	bhi.n	800f124 <ip4_input+0x108>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f056:	8963      	ldrh	r3, [r4, #10]
 800f058:	42ab      	cmp	r3, r5
 800f05a:	d368      	bcc.n	800f12e <ip4_input+0x112>
 800f05c:	8923      	ldrh	r3, [r4, #8]
 800f05e:	42b3      	cmp	r3, r6
 800f060:	d365      	bcc.n	800f12e <ip4_input+0x112>
 800f062:	2d13      	cmp	r5, #19
 800f064:	d963      	bls.n	800f12e <ip4_input+0x112>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f066:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f06a:	4a5b      	ldr	r2, [pc, #364]	; (800f1d8 <ip4_input+0x1bc>)
 800f06c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f06e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f072:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f078:	2be0      	cmp	r3, #224	; 0xe0
 800f07a:	d15c      	bne.n	800f136 <ip4_input+0x11a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f07c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800f080:	f013 0f01 	tst.w	r3, #1
 800f084:	d003      	beq.n	800f08e <ip4_input+0x72>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	f040 80a3 	bne.w	800f1d4 <ip4_input+0x1b8>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f08e:	f898 3009 	ldrb.w	r3, [r8, #9]
 800f092:	2b11      	cmp	r3, #17
 800f094:	d06e      	beq.n	800f174 <ip4_input+0x158>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f096:	4b50      	ldr	r3, [pc, #320]	; (800f1d8 <ip4_input+0x1bc>)
 800f098:	6918      	ldr	r0, [r3, #16]
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d076      	beq.n	800f18c <ip4_input+0x170>
 800f09e:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f000 f932 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d16c      	bne.n	800f184 <ip4_input+0x168>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f0aa:	4b4b      	ldr	r3, [pc, #300]	; (800f1d8 <ip4_input+0x1bc>)
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f0b2:	2be0      	cmp	r3, #224	; 0xe0
 800f0b4:	d066      	beq.n	800f184 <ip4_input+0x168>
  if (netif == NULL) {
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	d068      	beq.n	800f18c <ip4_input+0x170>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f0ba:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800f0be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	b13b      	cbz	r3, 800f0d6 <ip4_input+0xba>
    p = ip4_reass(p);
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	f000 fb28 	bl	800f71c <ip4_reass>
    if (p == NULL) {
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	d0b0      	beq.n	800f034 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800f0d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800f0d6:	4a40      	ldr	r2, [pc, #256]	; (800f1d8 <ip4_input+0x1bc>)
 800f0d8:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800f0da:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f0dc:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f0e0:	f898 3000 	ldrb.w	r3, [r8]
 800f0e4:	f003 030f 	and.w	r3, r3, #15
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f0ec:	4649      	mov	r1, r9
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f7f8 fe04 	bl	8007cfc <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800f0f4:	f898 3009 	ldrb.w	r3, [r8, #9]
 800f0f8:	2b06      	cmp	r3, #6
 800f0fa:	d058      	beq.n	800f1ae <ip4_input+0x192>
 800f0fc:	2b11      	cmp	r3, #17
 800f0fe:	d049      	beq.n	800f194 <ip4_input+0x178>
 800f100:	2b01      	cmp	r3, #1
 800f102:	d059      	beq.n	800f1b8 <ip4_input+0x19c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f104:	4629      	mov	r1, r5
 800f106:	4b34      	ldr	r3, [pc, #208]	; (800f1d8 <ip4_input+0x1bc>)
 800f108:	6958      	ldr	r0, [r3, #20]
 800f10a:	f000 f8fe 	bl	800f30a <ip4_addr_isbroadcast_u32>
 800f10e:	b928      	cbnz	r0, 800f11c <ip4_input+0x100>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f110:	4b31      	ldr	r3, [pc, #196]	; (800f1d8 <ip4_input+0x1bc>)
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f118:	2be0      	cmp	r3, #224	; 0xe0
 800f11a:	d152      	bne.n	800f1c2 <ip4_input+0x1a6>
        pbuf_free(p);
 800f11c:	4620      	mov	r0, r4
 800f11e:	f7f8 fe2d 	bl	8007d7c <pbuf_free>
        break;
 800f122:	e03b      	b.n	800f19c <ip4_input+0x180>
    pbuf_realloc(p, iphdr_len);
 800f124:	4601      	mov	r1, r0
 800f126:	4620      	mov	r0, r4
 800f128:	f7f8 ff40 	bl	8007fac <pbuf_realloc>
 800f12c:	e793      	b.n	800f056 <ip4_input+0x3a>
    pbuf_free(p);
 800f12e:	4620      	mov	r0, r4
 800f130:	f7f8 fe24 	bl	8007d7c <pbuf_free>
    return ERR_OK;
 800f134:	e77e      	b.n	800f034 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800f136:	4638      	mov	r0, r7
 800f138:	f7ff ff1c 	bl	800ef74 <ip4_input_accept>
 800f13c:	b990      	cbnz	r0, 800f164 <ip4_input+0x148>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f13e:	4b26      	ldr	r3, [pc, #152]	; (800f1d8 <ip4_input+0x1bc>)
 800f140:	7d1b      	ldrb	r3, [r3, #20]
 800f142:	2b7f      	cmp	r3, #127	; 0x7f
 800f144:	d0a3      	beq.n	800f08e <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 800f146:	4b25      	ldr	r3, [pc, #148]	; (800f1dc <ip4_input+0x1c0>)
 800f148:	681d      	ldr	r5, [r3, #0]
 800f14a:	b91d      	cbnz	r5, 800f154 <ip4_input+0x138>
 800f14c:	e79f      	b.n	800f08e <ip4_input+0x72>
 800f14e:	682d      	ldr	r5, [r5, #0]
 800f150:	2d00      	cmp	r5, #0
 800f152:	d09c      	beq.n	800f08e <ip4_input+0x72>
          if (netif == inp) {
 800f154:	42af      	cmp	r7, r5
 800f156:	d0fa      	beq.n	800f14e <ip4_input+0x132>
          if (ip4_input_accept(netif)) {
 800f158:	4628      	mov	r0, r5
 800f15a:	f7ff ff0b 	bl	800ef74 <ip4_input_accept>
 800f15e:	2800      	cmp	r0, #0
 800f160:	d0f5      	beq.n	800f14e <ip4_input+0x132>
 800f162:	e000      	b.n	800f166 <ip4_input+0x14a>
      netif = inp;
 800f164:	463d      	mov	r5, r7
  if (netif == NULL) {
 800f166:	2d00      	cmp	r5, #0
 800f168:	d091      	beq.n	800f08e <ip4_input+0x72>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f16a:	4b1b      	ldr	r3, [pc, #108]	; (800f1d8 <ip4_input+0x1bc>)
 800f16c:	6918      	ldr	r0, [r3, #16]
 800f16e:	2800      	cmp	r0, #0
 800f170:	d0a3      	beq.n	800f0ba <ip4_input+0x9e>
 800f172:	e795      	b.n	800f0a0 <ip4_input+0x84>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f174:	eb08 0309 	add.w	r3, r8, r9
 800f178:	885b      	ldrh	r3, [r3, #2]
 800f17a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f17e:	d18a      	bne.n	800f096 <ip4_input+0x7a>
        netif = inp;
 800f180:	463d      	mov	r5, r7
 800f182:	e798      	b.n	800f0b6 <ip4_input+0x9a>
      pbuf_free(p);
 800f184:	4620      	mov	r0, r4
 800f186:	f7f8 fdf9 	bl	8007d7c <pbuf_free>
      return ERR_OK;
 800f18a:	e753      	b.n	800f034 <ip4_input+0x18>
    pbuf_free(p);
 800f18c:	4620      	mov	r0, r4
 800f18e:	f7f8 fdf5 	bl	8007d7c <pbuf_free>
    return ERR_OK;
 800f192:	e74f      	b.n	800f034 <ip4_input+0x18>
        udp_input(p, inp);
 800f194:	4639      	mov	r1, r7
 800f196:	4620      	mov	r0, r4
 800f198:	f7fd faee 	bl	800c778 <udp_input>
  ip_data.current_netif = NULL;
 800f19c:	4b0e      	ldr	r3, [pc, #56]	; (800f1d8 <ip4_input+0x1bc>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f1a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f1a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f1a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f1a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f1aa:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800f1ac:	e742      	b.n	800f034 <ip4_input+0x18>
        tcp_input(p, inp);
 800f1ae:	4639      	mov	r1, r7
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f7fb f8fb 	bl	800a3ac <tcp_input>
        break;
 800f1b6:	e7f1      	b.n	800f19c <ip4_input+0x180>
        icmp_input(p, inp);
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f7ff fe2a 	bl	800ee14 <icmp_input>
        break;
 800f1c0:	e7ec      	b.n	800f19c <ip4_input+0x180>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f7f8 fdcd 	bl	8007d64 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f1ca:	2102      	movs	r1, #2
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f7ff fec5 	bl	800ef5c <icmp_dest_unreach>
 800f1d2:	e7a3      	b.n	800f11c <ip4_input+0x100>
      netif = inp;
 800f1d4:	463d      	mov	r5, r7
 800f1d6:	e7c8      	b.n	800f16a <ip4_input+0x14e>
 800f1d8:	20010d98 	.word	0x20010d98
 800f1dc:	20014624 	.word	0x20014624

0800f1e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	b083      	sub	sp, #12
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	460f      	mov	r7, r1
 800f1ea:	4616      	mov	r6, r2
 800f1ec:	4699      	mov	r9, r3
 800f1ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f1f2:	7b82      	ldrb	r2, [r0, #14]
 800f1f4:	2a01      	cmp	r2, #1
 800f1f6:	d13f      	bne.n	800f278 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f1f8:	2e00      	cmp	r6, #0
 800f1fa:	d050      	beq.n	800f29e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f1fc:	2114      	movs	r1, #20
 800f1fe:	4620      	mov	r0, r4
 800f200:	f7f8 fd76 	bl	8007cf0 <pbuf_add_header>
 800f204:	2800      	cmp	r0, #0
 800f206:	d158      	bne.n	800f2ba <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f208:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f20a:	8963      	ldrh	r3, [r4, #10]
 800f20c:	2b13      	cmp	r3, #19
 800f20e:	d93b      	bls.n	800f288 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f210:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f214:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800f218:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f21a:	6833      	ldr	r3, [r6, #0]
 800f21c:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f21e:	2345      	movs	r3, #69	; 0x45
 800f220:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800f222:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f226:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f228:	8920      	ldrh	r0, [r4, #8]
 800f22a:	f7f7 fa49 	bl	80066c0 <lwip_htons>
 800f22e:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f230:	2300      	movs	r3, #0
 800f232:	71ab      	strb	r3, [r5, #6]
 800f234:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f236:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800f2dc <ip4_output_if_src+0xfc>
 800f23a:	f8b9 0000 	ldrh.w	r0, [r9]
 800f23e:	f7f7 fa3f 	bl	80066c0 <lwip_htons>
 800f242:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f244:	f8b9 3000 	ldrh.w	r3, [r9]
 800f248:	3301      	adds	r3, #1
 800f24a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800f24e:	b31f      	cbz	r7, 800f298 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f254:	2300      	movs	r3, #0
 800f256:	72ab      	strb	r3, [r5, #10]
 800f258:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f25a:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 800f25e:	b113      	cbz	r3, 800f266 <ip4_output_if_src+0x86>
 800f260:	8922      	ldrh	r2, [r4, #8]
 800f262:	429a      	cmp	r2, r3
 800f264:	d823      	bhi.n	800f2ae <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f266:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f26a:	4632      	mov	r2, r6
 800f26c:	4621      	mov	r1, r4
 800f26e:	4640      	mov	r0, r8
 800f270:	4798      	blx	r3
}
 800f272:	b003      	add	sp, #12
 800f274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f278:	4b13      	ldr	r3, [pc, #76]	; (800f2c8 <ip4_output_if_src+0xe8>)
 800f27a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f27e:	4913      	ldr	r1, [pc, #76]	; (800f2cc <ip4_output_if_src+0xec>)
 800f280:	4813      	ldr	r0, [pc, #76]	; (800f2d0 <ip4_output_if_src+0xf0>)
 800f282:	f01b fd23 	bl	802accc <iprintf>
 800f286:	e7b7      	b.n	800f1f8 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f288:	4b0f      	ldr	r3, [pc, #60]	; (800f2c8 <ip4_output_if_src+0xe8>)
 800f28a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f28e:	4911      	ldr	r1, [pc, #68]	; (800f2d4 <ip4_output_if_src+0xf4>)
 800f290:	480f      	ldr	r0, [pc, #60]	; (800f2d0 <ip4_output_if_src+0xf0>)
 800f292:	f01b fd1b 	bl	802accc <iprintf>
 800f296:	e7bb      	b.n	800f210 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f298:	4b0f      	ldr	r3, [pc, #60]	; (800f2d8 <ip4_output_if_src+0xf8>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	e7d9      	b.n	800f252 <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800f29e:	8963      	ldrh	r3, [r4, #10]
 800f2a0:	2b13      	cmp	r3, #19
 800f2a2:	d90d      	bls.n	800f2c0 <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f2a4:	6863      	ldr	r3, [r4, #4]
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800f2aa:	ae01      	add	r6, sp, #4
 800f2ac:	e7d5      	b.n	800f25a <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800f2ae:	4632      	mov	r2, r6
 800f2b0:	4641      	mov	r1, r8
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	f000 fc62 	bl	800fb7c <ip4_frag>
 800f2b8:	e7db      	b.n	800f272 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800f2ba:	f06f 0001 	mvn.w	r0, #1
 800f2be:	e7d8      	b.n	800f272 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800f2c0:	f06f 0001 	mvn.w	r0, #1
 800f2c4:	e7d5      	b.n	800f272 <ip4_output_if_src+0x92>
 800f2c6:	bf00      	nop
 800f2c8:	0802eb98 	.word	0x0802eb98
 800f2cc:	0802ebcc 	.word	0x0802ebcc
 800f2d0:	0802bc48 	.word	0x0802bc48
 800f2d4:	0802ebd8 	.word	0x0802ebd8
 800f2d8:	0802ec50 	.word	0x0802ec50
 800f2dc:	2001088e 	.word	0x2001088e

0800f2e0 <ip4_output_if>:
{
 800f2e0:	b530      	push	{r4, r5, lr}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 800f2e6:	4615      	mov	r5, r2
 800f2e8:	b11a      	cbz	r2, 800f2f2 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800f2ea:	b109      	cbz	r1, 800f2f0 <ip4_output_if+0x10>
 800f2ec:	680a      	ldr	r2, [r1, #0]
 800f2ee:	b902      	cbnz	r2, 800f2f2 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800f2f0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f2f2:	9402      	str	r4, [sp, #8]
 800f2f4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 800f2f8:	9201      	str	r2, [sp, #4]
 800f2fa:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800f2fe:	9200      	str	r2, [sp, #0]
 800f300:	462a      	mov	r2, r5
 800f302:	f7ff ff6d 	bl	800f1e0 <ip4_output_if_src>
}
 800f306:	b005      	add	sp, #20
 800f308:	bd30      	pop	{r4, r5, pc}

0800f30a <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f30a:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f30c:	1e42      	subs	r2, r0, #1
 800f30e:	f112 0f03 	cmn.w	r2, #3
 800f312:	d813      	bhi.n	800f33c <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f314:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
 800f318:	f010 0002 	ands.w	r0, r0, #2
 800f31c:	d013      	beq.n	800f346 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f31e:	684a      	ldr	r2, [r1, #4]
 800f320:	429a      	cmp	r2, r3
 800f322:	d00d      	beq.n	800f340 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f324:	6889      	ldr	r1, [r1, #8]
 800f326:	405a      	eors	r2, r3
 800f328:	420a      	tst	r2, r1
 800f32a:	d10b      	bne.n	800f344 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f32c:	43c8      	mvns	r0, r1
 800f32e:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800f332:	4283      	cmp	r3, r0
 800f334:	bf14      	ite	ne
 800f336:	2000      	movne	r0, #0
 800f338:	2001      	moveq	r0, #1
 800f33a:	4770      	bx	lr
    return 1;
 800f33c:	2001      	movs	r0, #1
 800f33e:	4770      	bx	lr
    return 0;
 800f340:	2000      	movs	r0, #0
 800f342:	4770      	bx	lr
    return 0;
 800f344:	2000      	movs	r0, #0
  }
}
 800f346:	4770      	bx	lr

0800f348 <ip4addr_aton>:
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800f348:	7803      	ldrb	r3, [r0, #0]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800f34a:	4a59      	ldr	r2, [pc, #356]	; (800f4b0 <ip4addr_aton+0x168>)
 800f34c:	5c9a      	ldrb	r2, [r3, r2]
 800f34e:	f012 0f04 	tst.w	r2, #4
 800f352:	f000 808e 	beq.w	800f472 <ip4addr_aton+0x12a>
{
 800f356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	460f      	mov	r7, r1
  u32_t *pp = parts;
 800f35e:	46ec      	mov	ip, sp
      return 0;
    }
    val = 0;
    base = 10;
 800f360:	f04f 080a 	mov.w	r8, #10
    if (c == '0') {
      c = *++cp;
      if (c == 'x' || c == 'X') {
        base = 16;
 800f364:	f04f 0a10 	mov.w	sl, #16
        c = *++cp;
      } else {
        base = 8;
 800f368:	f04f 0908 	mov.w	r9, #8
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800f36c:	4950      	ldr	r1, [pc, #320]	; (800f4b0 <ip4addr_aton+0x168>)
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800f36e:	f10d 0e0c 	add.w	lr, sp, #12
 800f372:	e032      	b.n	800f3da <ip4addr_aton+0x92>
      c = *++cp;
 800f374:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 800f376:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 800f37a:	2a58      	cmp	r2, #88	; 0x58
 800f37c:	d002      	beq.n	800f384 <ip4addr_aton+0x3c>
      c = *++cp;
 800f37e:	3001      	adds	r0, #1
        base = 8;
 800f380:	464e      	mov	r6, r9
 800f382:	e02d      	b.n	800f3e0 <ip4addr_aton+0x98>
        c = *++cp;
 800f384:	7883      	ldrb	r3, [r0, #2]
 800f386:	3002      	adds	r0, #2
        base = 16;
 800f388:	4656      	mov	r6, sl
        c = *++cp;
 800f38a:	e029      	b.n	800f3e0 <ip4addr_aton+0x98>
        val = (val * base) + (u32_t)(c - '0');
 800f38c:	fb04 3406 	mla	r4, r4, r6, r3
 800f390:	3c30      	subs	r4, #48	; 0x30
        c = *++cp;
 800f392:	7843      	ldrb	r3, [r0, #1]
 800f394:	3001      	adds	r0, #1
 800f396:	4605      	mov	r5, r0
      if (lwip_isdigit(c)) {
 800f398:	5c5a      	ldrb	r2, [r3, r1]
 800f39a:	f012 0f04 	tst.w	r2, #4
 800f39e:	d1f5      	bne.n	800f38c <ip4addr_aton+0x44>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800f3a0:	2e10      	cmp	r6, #16
 800f3a2:	d10e      	bne.n	800f3c2 <ip4addr_aton+0x7a>
 800f3a4:	f012 0f44 	tst.w	r2, #68	; 0x44
 800f3a8:	d00b      	beq.n	800f3c2 <ip4addr_aton+0x7a>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800f3aa:	330a      	adds	r3, #10
 800f3ac:	f002 0203 	and.w	r2, r2, #3
 800f3b0:	2a02      	cmp	r2, #2
 800f3b2:	bf0c      	ite	eq
 800f3b4:	2261      	moveq	r2, #97	; 0x61
 800f3b6:	2241      	movne	r2, #65	; 0x41
 800f3b8:	1a9b      	subs	r3, r3, r2
 800f3ba:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
        c = *++cp;
 800f3be:	7843      	ldrb	r3, [r0, #1]
 800f3c0:	e7e8      	b.n	800f394 <ip4addr_aton+0x4c>
    if (c == '.') {
 800f3c2:	2b2e      	cmp	r3, #46	; 0x2e
 800f3c4:	d10e      	bne.n	800f3e4 <ip4addr_aton+0x9c>
      if (pp >= parts + 3) {
 800f3c6:	45f4      	cmp	ip, lr
 800f3c8:	d055      	beq.n	800f476 <ip4addr_aton+0x12e>
        return 0;
      }
      *pp++ = val;
 800f3ca:	f84c 4b04 	str.w	r4, [ip], #4
      c = *++cp;
 800f3ce:	1c68      	adds	r0, r5, #1
 800f3d0:	786b      	ldrb	r3, [r5, #1]
    if (!lwip_isdigit(c)) {
 800f3d2:	5c5a      	ldrb	r2, [r3, r1]
 800f3d4:	f012 0f04 	tst.w	r2, #4
 800f3d8:	d051      	beq.n	800f47e <ip4addr_aton+0x136>
    if (c == '0') {
 800f3da:	2b30      	cmp	r3, #48	; 0x30
 800f3dc:	d0ca      	beq.n	800f374 <ip4addr_aton+0x2c>
    base = 10;
 800f3de:	4646      	mov	r6, r8
 800f3e0:	2400      	movs	r4, #0
 800f3e2:	e7d8      	b.n	800f396 <ip4addr_aton+0x4e>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800f3e4:	b113      	cbz	r3, 800f3ec <ip4addr_aton+0xa4>
 800f3e6:	f012 0f08 	tst.w	r2, #8
 800f3ea:	d04a      	beq.n	800f482 <ip4addr_aton+0x13a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800f3ec:	4668      	mov	r0, sp
 800f3ee:	ebac 0000 	sub.w	r0, ip, r0
 800f3f2:	1080      	asrs	r0, r0, #2
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	2804      	cmp	r0, #4
 800f3f8:	d834      	bhi.n	800f464 <ip4addr_aton+0x11c>
 800f3fa:	e8df f000 	tbb	[pc, r0]
 800f3fe:	0b3d      	.short	0x0b3d
 800f400:	1303      	.short	0x1303
 800f402:	21          	.byte	0x21
 800f403:	00          	.byte	0x00

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800f404:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 800f408:	d23d      	bcs.n	800f486 <ip4addr_aton+0x13e>
        return 0;
      }
      if (parts[0] > 0xff) {
 800f40a:	9b00      	ldr	r3, [sp, #0]
 800f40c:	2bff      	cmp	r3, #255	; 0xff
 800f40e:	d83c      	bhi.n	800f48a <ip4addr_aton+0x142>
        return 0;
      }
      val |= parts[0] << 24;
 800f410:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
    default:
      LWIP_ASSERT("unhandled", 0);
      break;
  }
  if (addr) {
 800f414:	2f00      	cmp	r7, #0
 800f416:	d048      	beq.n	800f4aa <ip4addr_aton+0x162>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800f418:	4620      	mov	r0, r4
 800f41a:	f7f7 f956 	bl	80066ca <lwip_htonl>
 800f41e:	6038      	str	r0, [r7, #0]
  }
  return 1;
 800f420:	2001      	movs	r0, #1
 800f422:	e029      	b.n	800f478 <ip4addr_aton+0x130>
      if (val > 0xffff) {
 800f424:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800f428:	d231      	bcs.n	800f48e <ip4addr_aton+0x146>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800f42a:	9a00      	ldr	r2, [sp, #0]
 800f42c:	2aff      	cmp	r2, #255	; 0xff
 800f42e:	d830      	bhi.n	800f492 <ip4addr_aton+0x14a>
 800f430:	9b01      	ldr	r3, [sp, #4]
 800f432:	2bff      	cmp	r3, #255	; 0xff
 800f434:	d82f      	bhi.n	800f496 <ip4addr_aton+0x14e>
      val |= (parts[0] << 24) | (parts[1] << 16);
 800f436:	041b      	lsls	r3, r3, #16
 800f438:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f43c:	431c      	orrs	r4, r3
      break;
 800f43e:	e7e9      	b.n	800f414 <ip4addr_aton+0xcc>
      if (val > 0xff) {
 800f440:	2cff      	cmp	r4, #255	; 0xff
 800f442:	d82a      	bhi.n	800f49a <ip4addr_aton+0x152>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800f444:	9900      	ldr	r1, [sp, #0]
 800f446:	29ff      	cmp	r1, #255	; 0xff
 800f448:	d829      	bhi.n	800f49e <ip4addr_aton+0x156>
 800f44a:	9b01      	ldr	r3, [sp, #4]
 800f44c:	2bff      	cmp	r3, #255	; 0xff
 800f44e:	d828      	bhi.n	800f4a2 <ip4addr_aton+0x15a>
 800f450:	9a02      	ldr	r2, [sp, #8]
 800f452:	2aff      	cmp	r2, #255	; 0xff
 800f454:	d827      	bhi.n	800f4a6 <ip4addr_aton+0x15e>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800f456:	041b      	lsls	r3, r3, #16
 800f458:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f45c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f460:	431c      	orrs	r4, r3
      break;
 800f462:	e7d7      	b.n	800f414 <ip4addr_aton+0xcc>
      LWIP_ASSERT("unhandled", 0);
 800f464:	4b13      	ldr	r3, [pc, #76]	; (800f4b4 <ip4addr_aton+0x16c>)
 800f466:	22f9      	movs	r2, #249	; 0xf9
 800f468:	4913      	ldr	r1, [pc, #76]	; (800f4b8 <ip4addr_aton+0x170>)
 800f46a:	4814      	ldr	r0, [pc, #80]	; (800f4bc <ip4addr_aton+0x174>)
 800f46c:	f01b fc2e 	bl	802accc <iprintf>
      break;
 800f470:	e7d0      	b.n	800f414 <ip4addr_aton+0xcc>
      return 0;
 800f472:	2000      	movs	r0, #0
}
 800f474:	4770      	bx	lr
        return 0;
 800f476:	2000      	movs	r0, #0
}
 800f478:	b004      	add	sp, #16
 800f47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return 0;
 800f47e:	2000      	movs	r0, #0
 800f480:	e7fa      	b.n	800f478 <ip4addr_aton+0x130>
    return 0;
 800f482:	2000      	movs	r0, #0
 800f484:	e7f8      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f486:	2000      	movs	r0, #0
 800f488:	e7f6      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f48a:	2000      	movs	r0, #0
 800f48c:	e7f4      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f48e:	2000      	movs	r0, #0
 800f490:	e7f2      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f492:	2000      	movs	r0, #0
 800f494:	e7f0      	b.n	800f478 <ip4addr_aton+0x130>
 800f496:	2000      	movs	r0, #0
 800f498:	e7ee      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f49a:	2000      	movs	r0, #0
 800f49c:	e7ec      	b.n	800f478 <ip4addr_aton+0x130>
        return 0;
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e7ea      	b.n	800f478 <ip4addr_aton+0x130>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7e8      	b.n	800f478 <ip4addr_aton+0x130>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	e7e6      	b.n	800f478 <ip4addr_aton+0x130>
  return 1;
 800f4aa:	2001      	movs	r0, #1
 800f4ac:	e7e4      	b.n	800f478 <ip4addr_aton+0x130>
 800f4ae:	bf00      	nop
 800f4b0:	08037ab5 	.word	0x08037ab5
 800f4b4:	0802ec08 	.word	0x0802ec08
 800f4b8:	0802ec44 	.word	0x0802ec44
 800f4bc:	0802bc48 	.word	0x0802bc48

0800f4c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f4c4:	4b0c      	ldr	r3, [pc, #48]	; (800f4f8 <ip_reass_dequeue_datagram+0x38>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4283      	cmp	r3, r0
 800f4ca:	d008      	beq.n	800f4de <ip_reass_dequeue_datagram+0x1e>
 800f4cc:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f4ce:	b151      	cbz	r1, 800f4e6 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800f4d0:	6823      	ldr	r3, [r4, #0]
 800f4d2:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	2004      	movs	r0, #4
 800f4d8:	f7f8 f97c 	bl	80077d4 <memp_free>
}
 800f4dc:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800f4de:	6802      	ldr	r2, [r0, #0]
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <ip_reass_dequeue_datagram+0x38>)
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	e7f6      	b.n	800f4d4 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f4e6:	4b05      	ldr	r3, [pc, #20]	; (800f4fc <ip_reass_dequeue_datagram+0x3c>)
 800f4e8:	f240 1245 	movw	r2, #325	; 0x145
 800f4ec:	4904      	ldr	r1, [pc, #16]	; (800f500 <ip_reass_dequeue_datagram+0x40>)
 800f4ee:	4805      	ldr	r0, [pc, #20]	; (800f504 <ip_reass_dequeue_datagram+0x44>)
 800f4f0:	f01b fbec 	bl	802accc <iprintf>
 800f4f4:	e7ec      	b.n	800f4d0 <ip_reass_dequeue_datagram+0x10>
 800f4f6:	bf00      	nop
 800f4f8:	20010894 	.word	0x20010894
 800f4fc:	0802ec58 	.word	0x0802ec58
 800f500:	0802ec94 	.word	0x0802ec94
 800f504:	0802bc48 	.word	0x0802bc48

0800f508 <ip_reass_free_complete_datagram>:
{
 800f508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f50c:	4680      	mov	r8, r0
 800f50e:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f510:	4281      	cmp	r1, r0
 800f512:	d017      	beq.n	800f544 <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800f514:	f1b9 0f00 	cmp.w	r9, #0
 800f518:	d009      	beq.n	800f52e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f51a:	f8d9 3000 	ldr.w	r3, [r9]
 800f51e:	4543      	cmp	r3, r8
 800f520:	d005      	beq.n	800f52e <ip_reass_free_complete_datagram+0x26>
 800f522:	4b33      	ldr	r3, [pc, #204]	; (800f5f0 <ip_reass_free_complete_datagram+0xe8>)
 800f524:	22ad      	movs	r2, #173	; 0xad
 800f526:	4933      	ldr	r1, [pc, #204]	; (800f5f4 <ip_reass_free_complete_datagram+0xec>)
 800f528:	4833      	ldr	r0, [pc, #204]	; (800f5f8 <ip_reass_free_complete_datagram+0xf0>)
 800f52a:	f01b fbcf 	bl	802accc <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f52e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800f532:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800f534:	889a      	ldrh	r2, [r3, #4]
 800f536:	b162      	cbz	r2, 800f552 <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800f538:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f53a:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 800f5f0 <ip_reass_free_complete_datagram+0xe8>
 800f53e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f608 <ip_reass_free_complete_datagram+0x100>
 800f542:	e041      	b.n	800f5c8 <ip_reass_free_complete_datagram+0xc0>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f544:	4b2a      	ldr	r3, [pc, #168]	; (800f5f0 <ip_reass_free_complete_datagram+0xe8>)
 800f546:	22ab      	movs	r2, #171	; 0xab
 800f548:	492c      	ldr	r1, [pc, #176]	; (800f5fc <ip_reass_free_complete_datagram+0xf4>)
 800f54a:	482b      	ldr	r0, [pc, #172]	; (800f5f8 <ip_reass_free_complete_datagram+0xf0>)
 800f54c:	f01b fbbe 	bl	802accc <iprintf>
 800f550:	e7e0      	b.n	800f514 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f558:	6872      	ldr	r2, [r6, #4]
 800f55a:	4643      	mov	r3, r8
 800f55c:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800f560:	685d      	ldr	r5, [r3, #4]
 800f562:	689c      	ldr	r4, [r3, #8]
 800f564:	68d8      	ldr	r0, [r3, #12]
 800f566:	6011      	str	r1, [r2, #0]
 800f568:	6055      	str	r5, [r2, #4]
 800f56a:	6094      	str	r4, [r2, #8]
 800f56c:	60d0      	str	r0, [r2, #12]
 800f56e:	6919      	ldr	r1, [r3, #16]
 800f570:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f572:	2101      	movs	r1, #1
 800f574:	4630      	mov	r0, r6
 800f576:	f7ff fcf7 	bl	800ef68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7f8 fd94 	bl	80080a8 <pbuf_clen>
 800f580:	4604      	mov	r4, r0
    pbuf_free(p);
 800f582:	4630      	mov	r0, r6
 800f584:	f7f8 fbfa 	bl	8007d7c <pbuf_free>
  p = ipr->p;
 800f588:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800f58c:	2e00      	cmp	r6, #0
 800f58e:	d1d4      	bne.n	800f53a <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800f590:	4649      	mov	r1, r9
 800f592:	4640      	mov	r0, r8
 800f594:	f7ff ff94 	bl	800f4c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f598:	4b19      	ldr	r3, [pc, #100]	; (800f600 <ip_reass_free_complete_datagram+0xf8>)
 800f59a:	881b      	ldrh	r3, [r3, #0]
 800f59c:	42a3      	cmp	r3, r4
 800f59e:	d31f      	bcc.n	800f5e0 <ip_reass_free_complete_datagram+0xd8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f5a0:	4a17      	ldr	r2, [pc, #92]	; (800f600 <ip_reass_free_complete_datagram+0xf8>)
 800f5a2:	8813      	ldrh	r3, [r2, #0]
 800f5a4:	1b1b      	subs	r3, r3, r4
 800f5a6:	8013      	strh	r3, [r2, #0]
}
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f5ae:	465b      	mov	r3, fp
 800f5b0:	22cc      	movs	r2, #204	; 0xcc
 800f5b2:	4651      	mov	r1, sl
 800f5b4:	4810      	ldr	r0, [pc, #64]	; (800f5f8 <ip_reass_free_complete_datagram+0xf0>)
 800f5b6:	f01b fb89 	bl	802accc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f5ba:	4425      	add	r5, r4
 800f5bc:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800f5be:	4638      	mov	r0, r7
 800f5c0:	f7f8 fbdc 	bl	8007d7c <pbuf_free>
  while (p != NULL) {
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	d0e3      	beq.n	800f590 <ip_reass_free_complete_datagram+0x88>
    iprh = (struct ip_reass_helper *)p->payload;
 800f5c8:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800f5ca:	4637      	mov	r7, r6
 800f5cc:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	f7f8 fd6a 	bl	80080a8 <pbuf_clen>
 800f5d4:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f5d6:	1823      	adds	r3, r4, r0
 800f5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5dc:	dbed      	blt.n	800f5ba <ip_reass_free_complete_datagram+0xb2>
 800f5de:	e7e6      	b.n	800f5ae <ip_reass_free_complete_datagram+0xa6>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f5e0:	4b03      	ldr	r3, [pc, #12]	; (800f5f0 <ip_reass_free_complete_datagram+0xe8>)
 800f5e2:	22d2      	movs	r2, #210	; 0xd2
 800f5e4:	4907      	ldr	r1, [pc, #28]	; (800f604 <ip_reass_free_complete_datagram+0xfc>)
 800f5e6:	4804      	ldr	r0, [pc, #16]	; (800f5f8 <ip_reass_free_complete_datagram+0xf0>)
 800f5e8:	f01b fb70 	bl	802accc <iprintf>
 800f5ec:	e7d8      	b.n	800f5a0 <ip_reass_free_complete_datagram+0x98>
 800f5ee:	bf00      	nop
 800f5f0:	0802ec58 	.word	0x0802ec58
 800f5f4:	0802ecbc 	.word	0x0802ecbc
 800f5f8:	0802bc48 	.word	0x0802bc48
 800f5fc:	0802ecb0 	.word	0x0802ecb0
 800f600:	20010890 	.word	0x20010890
 800f604:	0802ecf0 	.word	0x0802ecf0
 800f608:	0802ecd0 	.word	0x0802ecd0

0800f60c <ip_reass_remove_oldest_datagram>:
{
 800f60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f610:	4605      	mov	r5, r0
 800f612:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800f614:	2600      	movs	r6, #0
    r = reassdatagrams;
 800f616:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800f688 <ip_reass_remove_oldest_datagram+0x7c>
 800f61a:	e027      	b.n	800f66c <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800f61c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f61e:	b1d0      	cbz	r0, 800f656 <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800f620:	f893 901f 	ldrb.w	r9, [r3, #31]
 800f624:	7fc2      	ldrb	r2, [r0, #31]
 800f626:	4591      	cmp	r9, r2
 800f628:	bf98      	it	ls
 800f62a:	4661      	movls	r1, ip
 800f62c:	4591      	cmp	r9, r2
 800f62e:	bf98      	it	ls
 800f630:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	469c      	mov	ip, r3
 800f636:	b18a      	cbz	r2, 800f65c <ip_reass_remove_oldest_datagram+0x50>
 800f638:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f63a:	695a      	ldr	r2, [r3, #20]
 800f63c:	4572      	cmp	r2, lr
 800f63e:	d1ed      	bne.n	800f61c <ip_reass_remove_oldest_datagram+0x10>
 800f640:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f644:	699a      	ldr	r2, [r3, #24]
 800f646:	454a      	cmp	r2, r9
 800f648:	d1e8      	bne.n	800f61c <ip_reass_remove_oldest_datagram+0x10>
 800f64a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800f64e:	88aa      	ldrh	r2, [r5, #4]
 800f650:	4591      	cmp	r9, r2
 800f652:	d1e3      	bne.n	800f61c <ip_reass_remove_oldest_datagram+0x10>
 800f654:	e7ed      	b.n	800f632 <ip_reass_remove_oldest_datagram+0x26>
 800f656:	4661      	mov	r1, ip
 800f658:	4618      	mov	r0, r3
 800f65a:	e7ea      	b.n	800f632 <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800f65c:	b110      	cbz	r0, 800f664 <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f65e:	f7ff ff53 	bl	800f508 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800f662:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f664:	42be      	cmp	r6, r7
 800f666:	da0b      	bge.n	800f680 <ip_reass_remove_oldest_datagram+0x74>
 800f668:	2c01      	cmp	r4, #1
 800f66a:	dd09      	ble.n	800f680 <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800f66c:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800f670:	b133      	cbz	r3, 800f680 <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f672:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800f676:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800f678:	4621      	mov	r1, r4
    prev = NULL;
 800f67a:	46a4      	mov	ip, r4
    oldest = NULL;
 800f67c:	4620      	mov	r0, r4
 800f67e:	e7dc      	b.n	800f63a <ip_reass_remove_oldest_datagram+0x2e>
}
 800f680:	4630      	mov	r0, r6
 800f682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f686:	bf00      	nop
 800f688:	20010894 	.word	0x20010894

0800f68c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f68c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f68e:	4604      	mov	r4, r0
 800f690:	b120      	cbz	r0, 800f69c <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800f692:	4621      	mov	r1, r4
 800f694:	2005      	movs	r0, #5
 800f696:	f7f8 f89d 	bl	80077d4 <memp_free>
}
 800f69a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f69c:	4b03      	ldr	r3, [pc, #12]	; (800f6ac <ip_frag_free_pbuf_custom_ref+0x20>)
 800f69e:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f6a2:	4903      	ldr	r1, [pc, #12]	; (800f6b0 <ip_frag_free_pbuf_custom_ref+0x24>)
 800f6a4:	4803      	ldr	r0, [pc, #12]	; (800f6b4 <ip_frag_free_pbuf_custom_ref+0x28>)
 800f6a6:	f01b fb11 	bl	802accc <iprintf>
 800f6aa:	e7f2      	b.n	800f692 <ip_frag_free_pbuf_custom_ref+0x6>
 800f6ac:	0802ec58 	.word	0x0802ec58
 800f6b0:	0802e6fc 	.word	0x0802e6fc
 800f6b4:	0802bc48 	.word	0x0802bc48

0800f6b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f6b8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	b138      	cbz	r0, 800f6ce <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800f6be:	6960      	ldr	r0, [r4, #20]
 800f6c0:	b108      	cbz	r0, 800f6c6 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800f6c2:	f7f8 fb5b 	bl	8007d7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f7ff ffe0 	bl	800f68c <ip_frag_free_pbuf_custom_ref>
}
 800f6cc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f6ce:	4b04      	ldr	r3, [pc, #16]	; (800f6e0 <ipfrag_free_pbuf_custom+0x28>)
 800f6d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f6d4:	4903      	ldr	r1, [pc, #12]	; (800f6e4 <ipfrag_free_pbuf_custom+0x2c>)
 800f6d6:	4804      	ldr	r0, [pc, #16]	; (800f6e8 <ipfrag_free_pbuf_custom+0x30>)
 800f6d8:	f01b faf8 	bl	802accc <iprintf>
 800f6dc:	e7ef      	b.n	800f6be <ipfrag_free_pbuf_custom+0x6>
 800f6de:	bf00      	nop
 800f6e0:	0802ec58 	.word	0x0802ec58
 800f6e4:	0802ed14 	.word	0x0802ed14
 800f6e8:	0802bc48 	.word	0x0802bc48

0800f6ec <ip_reass_tmr>:
{
 800f6ec:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800f6ee:	4b0a      	ldr	r3, [pc, #40]	; (800f718 <ip_reass_tmr+0x2c>)
 800f6f0:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800f6f2:	b178      	cbz	r0, 800f714 <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800f6f4:	2400      	movs	r4, #0
 800f6f6:	e005      	b.n	800f704 <ip_reass_tmr+0x18>
      r = r->next;
 800f6f8:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800f6fa:	4621      	mov	r1, r4
 800f6fc:	f7ff ff04 	bl	800f508 <ip_reass_free_complete_datagram>
      r = r->next;
 800f700:	4628      	mov	r0, r5
  while (r != NULL) {
 800f702:	b138      	cbz	r0, 800f714 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800f704:	7fc3      	ldrb	r3, [r0, #31]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d0f6      	beq.n	800f6f8 <ip_reass_tmr+0xc>
      r->timer--;
 800f70a:	3b01      	subs	r3, #1
 800f70c:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800f70e:	4604      	mov	r4, r0
 800f710:	6800      	ldr	r0, [r0, #0]
 800f712:	e7f6      	b.n	800f702 <ip_reass_tmr+0x16>
}
 800f714:	bd38      	pop	{r3, r4, r5, pc}
 800f716:	bf00      	nop
 800f718:	20010894 	.word	0x20010894

0800f71c <ip4_reass>:
{
 800f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	b083      	sub	sp, #12
 800f722:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800f724:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f728:	f899 3000 	ldrb.w	r3, [r9]
 800f72c:	f003 030f 	and.w	r3, r3, #15
 800f730:	2b05      	cmp	r3, #5
 800f732:	d16e      	bne.n	800f812 <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f734:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f738:	f7f6 ffc2 	bl	80066c0 <lwip_htons>
 800f73c:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f73e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800f742:	f7f6 ffbd 	bl	80066c0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f746:	f899 3000 	ldrb.w	r3, [r9]
 800f74a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f74e:	009e      	lsls	r6, r3, #2
 800f750:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f754:	d35d      	bcc.n	800f812 <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800f756:	1b80      	subs	r0, r0, r6
 800f758:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800f75a:	4628      	mov	r0, r5
 800f75c:	f7f8 fca4 	bl	80080a8 <pbuf_clen>
 800f760:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f762:	4bbf      	ldr	r3, [pc, #764]	; (800fa60 <ip4_reass+0x344>)
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	4403      	add	r3, r0
 800f768:	2b0a      	cmp	r3, #10
 800f76a:	dc07      	bgt.n	800f77c <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f76c:	4bbd      	ldr	r3, [pc, #756]	; (800fa64 <ip4_reass+0x348>)
 800f76e:	681c      	ldr	r4, [r3, #0]
 800f770:	2c00      	cmp	r4, #0
 800f772:	f000 81cc 	beq.w	800fb0e <ip4_reass+0x3f2>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f776:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f77a:	e00f      	b.n	800f79c <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f77c:	4601      	mov	r1, r0
 800f77e:	4648      	mov	r0, r9
 800f780:	f7ff ff44 	bl	800f60c <ip_reass_remove_oldest_datagram>
 800f784:	2800      	cmp	r0, #0
 800f786:	d044      	beq.n	800f812 <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f788:	4bb5      	ldr	r3, [pc, #724]	; (800fa60 <ip4_reass+0x344>)
 800f78a:	881b      	ldrh	r3, [r3, #0]
 800f78c:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f78e:	2b0a      	cmp	r3, #10
 800f790:	ddec      	ble.n	800f76c <ip4_reass+0x50>
 800f792:	e03e      	b.n	800f812 <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f794:	6824      	ldr	r4, [r4, #0]
 800f796:	2c00      	cmp	r4, #0
 800f798:	f000 81b9 	beq.w	800fb0e <ip4_reass+0x3f2>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f79c:	6963      	ldr	r3, [r4, #20]
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d1f8      	bne.n	800f794 <ip4_reass+0x78>
 800f7a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7a6:	69a1      	ldr	r1, [r4, #24]
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d1f3      	bne.n	800f794 <ip4_reass+0x78>
 800f7ac:	89a1      	ldrh	r1, [r4, #12]
 800f7ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800f7b2:	4299      	cmp	r1, r3
 800f7b4:	d1ee      	bne.n	800f794 <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f7b6:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800f7ba:	f7f6 ff81 	bl	80066c0 <lwip_htons>
 800f7be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d03b      	beq.n	800f83e <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f7c6:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800f7ca:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f7cc:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800f7d0:	f019 0920 	ands.w	r9, r9, #32
 800f7d4:	d107      	bne.n	800f7e6 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800f7d6:	19bb      	adds	r3, r7, r6
 800f7d8:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f7da:	429f      	cmp	r7, r3
 800f7dc:	d812      	bhi.n	800f804 <ip4_reass+0xe8>
 800f7de:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d80e      	bhi.n	800f804 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f7e6:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f7ea:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800f7ee:	f7f6 ff67 	bl	80066c0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800f7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f7f6:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800f7fa:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800f7fe:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800f802:	d233      	bcs.n	800f86c <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f804:	2c00      	cmp	r4, #0
 800f806:	f000 8150 	beq.w	800faaa <ip4_reass+0x38e>
  if (ipr->p == NULL) {
 800f80a:	6863      	ldr	r3, [r4, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f000 8154 	beq.w	800faba <ip4_reass+0x39e>
  pbuf_free(p);
 800f812:	4628      	mov	r0, r5
 800f814:	f7f8 fab2 	bl	8007d7c <pbuf_free>
  return NULL;
 800f818:	2500      	movs	r5, #0
}
 800f81a:	4628      	mov	r0, r5
 800f81c:	b003      	add	sp, #12
 800f81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f822:	4641      	mov	r1, r8
 800f824:	4648      	mov	r0, r9
 800f826:	f7ff fef1 	bl	800f60c <ip_reass_remove_oldest_datagram>
 800f82a:	4580      	cmp	r8, r0
 800f82c:	dcf1      	bgt.n	800f812 <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f82e:	2004      	movs	r0, #4
 800f830:	f7f7 ffb6 	bl	80077a0 <memp_malloc>
    if (ipr == NULL)
 800f834:	4604      	mov	r4, r0
 800f836:	2800      	cmp	r0, #0
 800f838:	f040 8170 	bne.w	800fb1c <ip4_reass+0x400>
 800f83c:	e7e9      	b.n	800f812 <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f83e:	89e0      	ldrh	r0, [r4, #14]
 800f840:	f7f6 ff3e 	bl	80066c0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f844:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800f848:	2800      	cmp	r0, #0
 800f84a:	d0bc      	beq.n	800f7c6 <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f84c:	f8d9 3000 	ldr.w	r3, [r9]
 800f850:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800f854:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800f858:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800f85c:	60a3      	str	r3, [r4, #8]
 800f85e:	60e0      	str	r0, [r4, #12]
 800f860:	6121      	str	r1, [r4, #16]
 800f862:	6162      	str	r2, [r4, #20]
 800f864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f868:	61a3      	str	r3, [r4, #24]
 800f86a:	e7ac      	b.n	800f7c6 <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800f86c:	eba0 000b 	sub.w	r0, r0, fp
 800f870:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f874:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800f878:	f7f6 ff22 	bl	80066c0 <lwip_htons>
 800f87c:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800f880:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f882:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	f88a 3000 	strb.w	r3, [sl]
 800f88c:	f88a 3001 	strb.w	r3, [sl, #1]
 800f890:	f88a 3002 	strb.w	r3, [sl, #2]
 800f894:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800f898:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800f89c:	4493      	add	fp, r2
 800f89e:	fa1f f38b 	uxth.w	r3, fp
 800f8a2:	9301      	str	r3, [sp, #4]
 800f8a4:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d8ab      	bhi.n	800f804 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800f8ac:	6860      	ldr	r0, [r4, #4]
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f000 8125 	beq.w	800fafe <ip4_reass+0x3e2>
  int valid = 1;
 800f8b4:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	e030      	b.n	800f91e <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800f8bc:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800f8c0:	f1bc 0f00 	cmp.w	ip, #0
 800f8c4:	d020      	beq.n	800f908 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f8c6:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800f8ca:	428a      	cmp	r2, r1
 800f8cc:	d39d      	bcc.n	800f80a <ip4_reass+0xee>
 800f8ce:	889b      	ldrh	r3, [r3, #4]
 800f8d0:	9a01      	ldr	r2, [sp, #4]
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d399      	bcc.n	800f80a <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800f8d6:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800f8da:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800f8de:	428b      	cmp	r3, r1
 800f8e0:	bf18      	it	ne
 800f8e2:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f8e6:	f1b9 0f00 	cmp.w	r9, #0
 800f8ea:	d02f      	beq.n	800f94c <ip4_reass+0x230>
 800f8ec:	7fa3      	ldrb	r3, [r4, #30]
 800f8ee:	f013 0f01 	tst.w	r3, #1
 800f8f2:	d12b      	bne.n	800f94c <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f8f4:	4a5a      	ldr	r2, [pc, #360]	; (800fa60 <ip4_reass+0x344>)
 800f8f6:	8813      	ldrh	r3, [r2, #0]
 800f8f8:	4498      	add	r8, r3
 800f8fa:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800f8fe:	f1b9 0f00 	cmp.w	r9, #0
 800f902:	d074      	beq.n	800f9ee <ip4_reass+0x2d2>
  return NULL;
 800f904:	2500      	movs	r5, #0
 800f906:	e788      	b.n	800f81a <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800f908:	889b      	ldrh	r3, [r3, #4]
 800f90a:	9a01      	ldr	r2, [sp, #4]
 800f90c:	4293      	cmp	r3, r2
 800f90e:	f4ff af7c 	bcc.w	800f80a <ip4_reass+0xee>
        ipr->p = new_p;
 800f912:	6065      	str	r5, [r4, #4]
 800f914:	e7e7      	b.n	800f8e6 <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800f916:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800f918:	2800      	cmp	r0, #0
 800f91a:	f000 80de 	beq.w	800fada <ip4_reass+0x3be>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f91e:	469c      	mov	ip, r3
 800f920:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800f922:	8899      	ldrh	r1, [r3, #4]
 800f924:	428a      	cmp	r2, r1
 800f926:	d3c9      	bcc.n	800f8bc <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800f928:	428a      	cmp	r2, r1
 800f92a:	f43f af6e 	beq.w	800f80a <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800f92e:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800f932:	455a      	cmp	r2, fp
 800f934:	f4ff af69 	bcc.w	800f80a <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800f938:	f1bc 0f00 	cmp.w	ip, #0
 800f93c:	d0eb      	beq.n	800f916 <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800f93e:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800f942:	4288      	cmp	r0, r1
 800f944:	bf18      	it	ne
 800f946:	f04f 0e00 	movne.w	lr, #0
 800f94a:	e7e4      	b.n	800f916 <ip4_reass+0x1fa>
    if (valid) {
 800f94c:	f1be 0f00 	cmp.w	lr, #0
 800f950:	d02f      	beq.n	800f9b2 <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f952:	6863      	ldr	r3, [r4, #4]
 800f954:	b343      	cbz	r3, 800f9a8 <ip4_reass+0x28c>
 800f956:	6859      	ldr	r1, [r3, #4]
 800f958:	888b      	ldrh	r3, [r1, #4]
 800f95a:	bb43      	cbnz	r3, 800f9ae <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800f95c:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800f960:	b15b      	cbz	r3, 800f97a <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800f962:	4652      	mov	r2, sl
 800f964:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800f968:	88d2      	ldrh	r2, [r2, #6]
 800f96a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d134      	bne.n	800f9dc <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800f972:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1f3      	bne.n	800f962 <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800f97a:	458a      	cmp	sl, r1
 800f97c:	f040 80ec 	bne.w	800fb58 <ip4_reass+0x43c>
 800f980:	4b39      	ldr	r3, [pc, #228]	; (800fa68 <ip4_reass+0x34c>)
 800f982:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f986:	4939      	ldr	r1, [pc, #228]	; (800fa6c <ip4_reass+0x350>)
 800f988:	4839      	ldr	r0, [pc, #228]	; (800fa70 <ip4_reass+0x354>)
 800f98a:	f01b f99f 	bl	802accc <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f98e:	f8da 3000 	ldr.w	r3, [sl]
 800f992:	b333      	cbz	r3, 800f9e2 <ip4_reass+0x2c6>
 800f994:	4b34      	ldr	r3, [pc, #208]	; (800fa68 <ip4_reass+0x34c>)
 800f996:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f99a:	4936      	ldr	r1, [pc, #216]	; (800fa74 <ip4_reass+0x358>)
 800f99c:	4834      	ldr	r0, [pc, #208]	; (800fa70 <ip4_reass+0x354>)
 800f99e:	f01b f995 	bl	802accc <iprintf>
 800f9a2:	f04f 0e01 	mov.w	lr, #1
 800f9a6:	e004      	b.n	800f9b2 <ip4_reass+0x296>
        valid = 0;
 800f9a8:	f04f 0e00 	mov.w	lr, #0
 800f9ac:	e001      	b.n	800f9b2 <ip4_reass+0x296>
 800f9ae:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f9b2:	f1be 0100 	subs.w	r1, lr, #0
 800f9b6:	bf18      	it	ne
 800f9b8:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f9ba:	4a29      	ldr	r2, [pc, #164]	; (800fa60 <ip4_reass+0x344>)
 800f9bc:	8813      	ldrh	r3, [r2, #0]
 800f9be:	4498      	add	r8, r3
 800f9c0:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800f9c4:	f1b9 0f00 	cmp.w	r9, #0
 800f9c8:	d105      	bne.n	800f9d6 <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9ca:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800f9cc:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f9ce:	7fa3      	ldrb	r3, [r4, #30]
 800f9d0:	f043 0301 	orr.w	r3, r3, #1
 800f9d4:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f9d6:	b961      	cbnz	r1, 800f9f2 <ip4_reass+0x2d6>
  return NULL;
 800f9d8:	2500      	movs	r5, #0
 800f9da:	e71e      	b.n	800f81a <ip4_reass+0xfe>
 800f9dc:	f04f 0e00 	mov.w	lr, #0
 800f9e0:	e7e7      	b.n	800f9b2 <ip4_reass+0x296>
 800f9e2:	f04f 0e01 	mov.w	lr, #1
 800f9e6:	e7e4      	b.n	800f9b2 <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f9e8:	f04f 0e00 	mov.w	lr, #0
 800f9ec:	e7e1      	b.n	800f9b2 <ip4_reass+0x296>
  if (is_last) {
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	e7eb      	b.n	800f9ca <ip4_reass+0x2ae>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f9f2:	8ba0      	ldrh	r0, [r4, #28]
 800f9f4:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f9f6:	6863      	ldr	r3, [r4, #4]
 800f9f8:	685d      	ldr	r5, [r3, #4]
 800f9fa:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f9fc:	4623      	mov	r3, r4
 800f9fe:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800fa02:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fa06:	689f      	ldr	r7, [r3, #8]
 800fa08:	68d9      	ldr	r1, [r3, #12]
 800fa0a:	602a      	str	r2, [r5, #0]
 800fa0c:	f8c5 c004 	str.w	ip, [r5, #4]
 800fa10:	60af      	str	r7, [r5, #8]
 800fa12:	60e9      	str	r1, [r5, #12]
 800fa14:	691a      	ldr	r2, [r3, #16]
 800fa16:	612a      	str	r2, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fa18:	b280      	uxth	r0, r0
 800fa1a:	f7f6 fe51 	bl	80066c0 <lwip_htons>
 800fa1e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fa20:	2300      	movs	r3, #0
 800fa22:	71ab      	strb	r3, [r5, #6]
 800fa24:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fa26:	72ab      	strb	r3, [r5, #10]
 800fa28:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800fa2a:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800fa2c:	b16e      	cbz	r6, 800fa4a <ip4_reass+0x32e>
      pbuf_remove_header(r, IP_HLEN);
 800fa2e:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800fa32:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800fa34:	4641      	mov	r1, r8
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7f8 f960 	bl	8007cfc <pbuf_remove_header>
      pbuf_cat(p, r);
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	4628      	mov	r0, r5
 800fa40:	f7f8 fb5a 	bl	80080f8 <pbuf_cat>
      r = iprh->next_pbuf;
 800fa44:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800fa46:	2e00      	cmp	r6, #0
 800fa48:	d1f3      	bne.n	800fa32 <ip4_reass+0x316>
    if (ipr == reassdatagrams) {
 800fa4a:	4b06      	ldr	r3, [pc, #24]	; (800fa64 <ip4_reass+0x348>)
 800fa4c:	6819      	ldr	r1, [r3, #0]
 800fa4e:	42a1      	cmp	r1, r4
 800fa50:	d012      	beq.n	800fa78 <ip4_reass+0x35c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa52:	b191      	cbz	r1, 800fa7a <ip4_reass+0x35e>
        if (ipr_prev->next == ipr) {
 800fa54:	680b      	ldr	r3, [r1, #0]
 800fa56:	42a3      	cmp	r3, r4
 800fa58:	d00f      	beq.n	800fa7a <ip4_reass+0x35e>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	e7f9      	b.n	800fa52 <ip4_reass+0x336>
 800fa5e:	bf00      	nop
 800fa60:	20010890 	.word	0x20010890
 800fa64:	20010894 	.word	0x20010894
 800fa68:	0802ec58 	.word	0x0802ec58
 800fa6c:	0802ed20 	.word	0x0802ed20
 800fa70:	0802bc48 	.word	0x0802bc48
 800fa74:	0802ed30 	.word	0x0802ed30
      ipr_prev = NULL;
 800fa78:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7ff fd20 	bl	800f4c0 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800fa80:	4628      	mov	r0, r5
 800fa82:	f7f8 fb11 	bl	80080a8 <pbuf_clen>
 800fa86:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fa88:	4b35      	ldr	r3, [pc, #212]	; (800fb60 <ip4_reass+0x444>)
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	4283      	cmp	r3, r0
 800fa8e:	d304      	bcc.n	800fa9a <ip4_reass+0x37e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fa90:	4a33      	ldr	r2, [pc, #204]	; (800fb60 <ip4_reass+0x444>)
 800fa92:	8813      	ldrh	r3, [r2, #0]
 800fa94:	1b1c      	subs	r4, r3, r4
 800fa96:	8014      	strh	r4, [r2, #0]
    return p;
 800fa98:	e6bf      	b.n	800f81a <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fa9a:	4b32      	ldr	r3, [pc, #200]	; (800fb64 <ip4_reass+0x448>)
 800fa9c:	f240 229b 	movw	r2, #667	; 0x29b
 800faa0:	4931      	ldr	r1, [pc, #196]	; (800fb68 <ip4_reass+0x44c>)
 800faa2:	4832      	ldr	r0, [pc, #200]	; (800fb6c <ip4_reass+0x450>)
 800faa4:	f01b f912 	bl	802accc <iprintf>
 800faa8:	e7f2      	b.n	800fa90 <ip4_reass+0x374>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800faaa:	4b2e      	ldr	r3, [pc, #184]	; (800fb64 <ip4_reass+0x448>)
 800faac:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fab0:	492f      	ldr	r1, [pc, #188]	; (800fb70 <ip4_reass+0x454>)
 800fab2:	482e      	ldr	r0, [pc, #184]	; (800fb6c <ip4_reass+0x450>)
 800fab4:	f01b f90a 	bl	802accc <iprintf>
 800fab8:	e6a7      	b.n	800f80a <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800faba:	4b2e      	ldr	r3, [pc, #184]	; (800fb74 <ip4_reass+0x458>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	42a3      	cmp	r3, r4
 800fac0:	d006      	beq.n	800fad0 <ip4_reass+0x3b4>
 800fac2:	4b28      	ldr	r3, [pc, #160]	; (800fb64 <ip4_reass+0x448>)
 800fac4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fac8:	492b      	ldr	r1, [pc, #172]	; (800fb78 <ip4_reass+0x45c>)
 800faca:	4828      	ldr	r0, [pc, #160]	; (800fb6c <ip4_reass+0x450>)
 800facc:	f01b f8fe 	bl	802accc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fad0:	2100      	movs	r1, #0
 800fad2:	4620      	mov	r0, r4
 800fad4:	f7ff fcf4 	bl	800f4c0 <ip_reass_dequeue_datagram>
 800fad8:	e69b      	b.n	800f812 <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800fada:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fadc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800fae0:	455b      	cmp	r3, fp
 800fae2:	f43f af00 	beq.w	800f8e6 <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fae6:	f1b9 0f00 	cmp.w	r9, #0
 800faea:	f43f af7d 	beq.w	800f9e8 <ip4_reass+0x2cc>
 800faee:	7fa3      	ldrb	r3, [r4, #30]
 800faf0:	f013 0f01 	tst.w	r3, #1
 800faf4:	f43f aefe 	beq.w	800f8f4 <ip4_reass+0x1d8>
 800faf8:	f04f 0e00 	mov.w	lr, #0
 800fafc:	e759      	b.n	800f9b2 <ip4_reass+0x296>
      ipr->p = new_p;
 800fafe:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fb00:	f1b9 0f00 	cmp.w	r9, #0
 800fb04:	f43f af25 	beq.w	800f952 <ip4_reass+0x236>
  int valid = 1;
 800fb08:	f04f 0e01 	mov.w	lr, #1
 800fb0c:	e6ee      	b.n	800f8ec <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fb0e:	2004      	movs	r0, #4
 800fb10:	f7f7 fe46 	bl	80077a0 <memp_malloc>
  if (ipr == NULL) {
 800fb14:	4604      	mov	r4, r0
 800fb16:	2800      	cmp	r0, #0
 800fb18:	f43f ae83 	beq.w	800f822 <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	6063      	str	r3, [r4, #4]
 800fb20:	60a3      	str	r3, [r4, #8]
 800fb22:	60e3      	str	r3, [r4, #12]
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	6163      	str	r3, [r4, #20]
 800fb28:	61a3      	str	r3, [r4, #24]
 800fb2a:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800fb2c:	230f      	movs	r3, #15
 800fb2e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800fb30:	4b10      	ldr	r3, [pc, #64]	; (800fb74 <ip4_reass+0x458>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800fb36:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fb38:	f8d9 3000 	ldr.w	r3, [r9]
 800fb3c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800fb40:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800fb44:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800fb48:	60a3      	str	r3, [r4, #8]
 800fb4a:	60e0      	str	r0, [r4, #12]
 800fb4c:	6121      	str	r1, [r4, #16]
 800fb4e:	6162      	str	r2, [r4, #20]
 800fb50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb54:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800fb56:	e636      	b.n	800f7c6 <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800fb58:	f04f 0e01 	mov.w	lr, #1
 800fb5c:	e729      	b.n	800f9b2 <ip4_reass+0x296>
 800fb5e:	bf00      	nop
 800fb60:	20010890 	.word	0x20010890
 800fb64:	0802ec58 	.word	0x0802ec58
 800fb68:	0802ed54 	.word	0x0802ed54
 800fb6c:	0802bc48 	.word	0x0802bc48
 800fb70:	0802ed70 	.word	0x0802ed70
 800fb74:	20010894 	.word	0x20010894
 800fb78:	0802ed7c 	.word	0x0802ed7c

0800fb7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	b08d      	sub	sp, #52	; 0x34
 800fb82:	4605      	mov	r5, r0
 800fb84:	9107      	str	r1, [sp, #28]
 800fb86:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fb88:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 800fb8a:	3b14      	subs	r3, #20
 800fb8c:	bf48      	it	mi
 800fb8e:	3307      	addmi	r3, #7
 800fb90:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800fb94:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fb96:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb9e:	f003 030f 	and.w	r3, r3, #15
 800fba2:	2b05      	cmp	r3, #5
 800fba4:	f040 80d9 	bne.w	800fd5a <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fba8:	8943      	ldrh	r3, [r0, #10]
 800fbaa:	2b13      	cmp	r3, #19
 800fbac:	d943      	bls.n	800fc36 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fbae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800fbb2:	f7f6 fd85 	bl	80066c0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800fbb6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800fbba:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fbbc:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800fbc0:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fbc2:	892b      	ldrh	r3, [r5, #8]
 800fbc4:	3b14      	subs	r3, #20
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	9303      	str	r3, [sp, #12]

  while (left) {
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 80c8 	beq.w	800fd60 <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fbd0:	9b06      	ldr	r3, [sp, #24]
 800fbd2:	00db      	lsls	r3, r3, #3
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800fbd8:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800fbdc:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fbde:	9b08      	ldr	r3, [sp, #32]
 800fbe0:	9a03      	ldr	r2, [sp, #12]
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	bf28      	it	cs
 800fbe6:	4613      	movcs	r3, r2
 800fbe8:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fbea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbee:	2114      	movs	r1, #20
 800fbf0:	200e      	movs	r0, #14
 800fbf2:	f7f8 f933 	bl	8007e5c <pbuf_alloc>
    if (rambuf == NULL) {
 800fbf6:	4683      	mov	fp, r0
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f000 80b3 	beq.w	800fd64 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fbfe:	8943      	ldrh	r3, [r0, #10]
 800fc00:	2b13      	cmp	r3, #19
 800fc02:	d922      	bls.n	800fc4a <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fc04:	f8db 3004 	ldr.w	r3, [fp, #4]
 800fc08:	f8da 2000 	ldr.w	r2, [sl]
 800fc0c:	f8da 6004 	ldr.w	r6, [sl, #4]
 800fc10:	f8da 0008 	ldr.w	r0, [sl, #8]
 800fc14:	f8da 100c 	ldr.w	r1, [sl, #12]
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	605e      	str	r6, [r3, #4]
 800fc1c:	6098      	str	r0, [r3, #8]
 800fc1e:	60d9      	str	r1, [r3, #12]
 800fc20:	f8da 2010 	ldr.w	r2, [sl, #16]
 800fc24:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fc26:	f8db 3004 	ldr.w	r3, [fp, #4]
 800fc2a:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800fc2c:	9b04      	ldr	r3, [sp, #16]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d04e      	beq.n	800fcd0 <ip4_frag+0x154>
    left_to_copy = fragsize;
 800fc32:	461e      	mov	r6, r3
 800fc34:	e01d      	b.n	800fc72 <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fc36:	4b4d      	ldr	r3, [pc, #308]	; (800fd6c <ip4_frag+0x1f0>)
 800fc38:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fc3c:	494c      	ldr	r1, [pc, #304]	; (800fd70 <ip4_frag+0x1f4>)
 800fc3e:	484d      	ldr	r0, [pc, #308]	; (800fd74 <ip4_frag+0x1f8>)
 800fc40:	f01b f844 	bl	802accc <iprintf>
 800fc44:	f06f 0005 	mvn.w	r0, #5
 800fc48:	e07b      	b.n	800fd42 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fc4a:	4b48      	ldr	r3, [pc, #288]	; (800fd6c <ip4_frag+0x1f0>)
 800fc4c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fc50:	4949      	ldr	r1, [pc, #292]	; (800fd78 <ip4_frag+0x1fc>)
 800fc52:	4848      	ldr	r0, [pc, #288]	; (800fd74 <ip4_frag+0x1f8>)
 800fc54:	f01b f83a 	bl	802accc <iprintf>
 800fc58:	e7d4      	b.n	800fc04 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fc5a:	4b44      	ldr	r3, [pc, #272]	; (800fd6c <ip4_frag+0x1f0>)
 800fc5c:	f240 322d 	movw	r2, #813	; 0x32d
 800fc60:	4946      	ldr	r1, [pc, #280]	; (800fd7c <ip4_frag+0x200>)
 800fc62:	4844      	ldr	r0, [pc, #272]	; (800fd74 <ip4_frag+0x1f8>)
 800fc64:	f01b f832 	bl	802accc <iprintf>
 800fc68:	e009      	b.n	800fc7e <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800fc6a:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800fc6c:	b376      	cbz	r6, 800fccc <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800fc6e:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800fc72:	896b      	ldrh	r3, [r5, #10]
 800fc74:	eba3 0409 	sub.w	r4, r3, r9
 800fc78:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fc7a:	454b      	cmp	r3, r9
 800fc7c:	d3ed      	bcc.n	800fc5a <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fc7e:	42b4      	cmp	r4, r6
 800fc80:	bf28      	it	cs
 800fc82:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800fc84:	2c00      	cmp	r4, #0
 800fc86:	d0f0      	beq.n	800fc6a <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fc88:	2005      	movs	r0, #5
 800fc8a:	f7f7 fd89 	bl	80077a0 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800fc8e:	4607      	mov	r7, r0
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d051      	beq.n	800fd38 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc94:	9401      	str	r4, [sp, #4]
 800fc96:	686b      	ldr	r3, [r5, #4]
 800fc98:	444b      	add	r3, r9
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2241      	movs	r2, #65	; 0x41
 800fca0:	4621      	mov	r1, r4
 800fca2:	2000      	movs	r0, #0
 800fca4:	f7f8 f808 	bl	8007cb8 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800fca8:	4680      	mov	r8, r0
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d04c      	beq.n	800fd48 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7f8 fa06 	bl	80080c0 <pbuf_ref>
      pcr->original = p;
 800fcb4:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fcb6:	4b32      	ldr	r3, [pc, #200]	; (800fd80 <ip4_frag+0x204>)
 800fcb8:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fcba:	4641      	mov	r1, r8
 800fcbc:	4658      	mov	r0, fp
 800fcbe:	f7f8 fa1b 	bl	80080f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fcc2:	1b36      	subs	r6, r6, r4
 800fcc4:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800fcc6:	b11e      	cbz	r6, 800fcd0 <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800fcc8:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800fcca:	e7d0      	b.n	800fc6e <ip4_frag+0xf2>
        poff = 0;
 800fccc:	46b1      	mov	r9, r6
 800fcce:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fcd0:	44a1      	add	r9, r4
 800fcd2:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fcd6:	9b05      	ldr	r3, [sp, #20]
 800fcd8:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fce0:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800fce2:	9a03      	ldr	r2, [sp, #12]
 800fce4:	4293      	cmp	r3, r2
 800fce6:	dd01      	ble.n	800fcec <ip4_frag+0x170>
 800fce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcea:	b10b      	cbz	r3, 800fcf0 <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fcec:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fcf0:	f7f6 fce6 	bl	80066c0 <lwip_htons>
 800fcf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fcf6:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fcf8:	9f04      	ldr	r7, [sp, #16]
 800fcfa:	f107 0014 	add.w	r0, r7, #20
 800fcfe:	b280      	uxth	r0, r0
 800fd00:	f7f6 fcde 	bl	80066c0 <lwip_htons>
 800fd04:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fd06:	2300      	movs	r3, #0
 800fd08:	72b3      	strb	r3, [r6, #10]
 800fd0a:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fd0c:	9807      	ldr	r0, [sp, #28]
 800fd0e:	6943      	ldr	r3, [r0, #20]
 800fd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd12:	4659      	mov	r1, fp
 800fd14:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fd16:	4658      	mov	r0, fp
 800fd18:	f7f8 f830 	bl	8007d7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fd1c:	9b03      	ldr	r3, [sp, #12]
 800fd1e:	1bdb      	subs	r3, r3, r7
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800fd24:	9b05      	ldr	r3, [sp, #20]
 800fd26:	9906      	ldr	r1, [sp, #24]
 800fd28:	440b      	add	r3, r1
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	9305      	str	r3, [sp, #20]
  while (left) {
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	f47f af55 	bne.w	800fbde <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fd34:	2000      	movs	r0, #0
 800fd36:	e004      	b.n	800fd42 <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800fd38:	4658      	mov	r0, fp
 800fd3a:	f7f8 f81f 	bl	8007d7c <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fd3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fd42:	b00d      	add	sp, #52	; 0x34
 800fd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800fd48:	4638      	mov	r0, r7
 800fd4a:	f7ff fc9f 	bl	800f68c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fd4e:	4658      	mov	r0, fp
 800fd50:	f7f8 f814 	bl	8007d7c <pbuf_free>
  return ERR_MEM;
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800fd58:	e7f3      	b.n	800fd42 <ip4_frag+0x1c6>
    return ERR_VAL;
 800fd5a:	f06f 0005 	mvn.w	r0, #5
 800fd5e:	e7f0      	b.n	800fd42 <ip4_frag+0x1c6>
  return ERR_OK;
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7ee      	b.n	800fd42 <ip4_frag+0x1c6>
  return ERR_MEM;
 800fd64:	f04f 30ff 	mov.w	r0, #4294967295
 800fd68:	e7eb      	b.n	800fd42 <ip4_frag+0x1c6>
 800fd6a:	bf00      	nop
 800fd6c:	0802ec58 	.word	0x0802ec58
 800fd70:	0802ed9c 	.word	0x0802ed9c
 800fd74:	0802bc48 	.word	0x0802bc48
 800fd78:	0802edb8 	.word	0x0802edb8
 800fd7c:	0802edd8 	.word	0x0802edd8
 800fd80:	0800f6b9 	.word	0x0800f6b9

0800fd84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fd88:	8943      	ldrh	r3, [r0, #10]
 800fd8a:	2b0e      	cmp	r3, #14
 800fd8c:	d91c      	bls.n	800fdc8 <ethernet_input+0x44>
 800fd8e:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fd90:	7bc3      	ldrb	r3, [r0, #15]
 800fd92:	b91b      	cbnz	r3, 800fd9c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800fd94:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800fd98:	3301      	adds	r3, #1
 800fd9a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fd9c:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fd9e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fda0:	7803      	ldrb	r3, [r0, #0]
 800fda2:	f013 0f01 	tst.w	r3, #1
 800fda6:	d00a      	beq.n	800fdbe <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d012      	beq.n	800fdd2 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fdac:	2206      	movs	r2, #6
 800fdae:	491e      	ldr	r1, [pc, #120]	; (800fe28 <ethernet_input+0xa4>)
 800fdb0:	f01a fbb5 	bl	802a51e <memcmp>
 800fdb4:	b918      	cbnz	r0, 800fdbe <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fdb6:	7b63      	ldrb	r3, [r4, #13]
 800fdb8:	f043 0308 	orr.w	r3, r3, #8
 800fdbc:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800fdbe:	2e08      	cmp	r6, #8
 800fdc0:	d012      	beq.n	800fde8 <ethernet_input+0x64>
 800fdc2:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800fdc6:	d01f      	beq.n	800fe08 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f7f7 ffd7 	bl	8007d7c <pbuf_free>
  return ERR_OK;
}
 800fdce:	2000      	movs	r0, #0
 800fdd0:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fdd2:	7843      	ldrb	r3, [r0, #1]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d1f2      	bne.n	800fdbe <ethernet_input+0x3a>
 800fdd8:	7883      	ldrb	r3, [r0, #2]
 800fdda:	2b5e      	cmp	r3, #94	; 0x5e
 800fddc:	d1ef      	bne.n	800fdbe <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800fdde:	7b63      	ldrb	r3, [r4, #13]
 800fde0:	f043 0310 	orr.w	r3, r3, #16
 800fde4:	7363      	strb	r3, [r4, #13]
 800fde6:	e7ea      	b.n	800fdbe <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fde8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800fdec:	f013 0f08 	tst.w	r3, #8
 800fdf0:	d0ea      	beq.n	800fdc8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fdf2:	210e      	movs	r1, #14
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f7f7 ff81 	bl	8007cfc <pbuf_remove_header>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d1e4      	bne.n	800fdc8 <ethernet_input+0x44>
        ip4_input(p, netif);
 800fdfe:	4629      	mov	r1, r5
 800fe00:	4620      	mov	r0, r4
 800fe02:	f7ff f90b 	bl	800f01c <ip4_input>
      break;
 800fe06:	e7e2      	b.n	800fdce <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe08:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800fe0c:	f013 0f08 	tst.w	r3, #8
 800fe10:	d0da      	beq.n	800fdc8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fe12:	210e      	movs	r1, #14
 800fe14:	4620      	mov	r0, r4
 800fe16:	f7f7 ff71 	bl	8007cfc <pbuf_remove_header>
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d1d4      	bne.n	800fdc8 <ethernet_input+0x44>
        etharp_input(p, netif);
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4620      	mov	r0, r4
 800fe22:	f7fe fcc9 	bl	800e7b8 <etharp_input>
      break;
 800fe26:	e7d2      	b.n	800fdce <ethernet_input+0x4a>
 800fe28:	0802ee54 	.word	0x0802ee54

0800fe2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe30:	4605      	mov	r5, r0
 800fe32:	460c      	mov	r4, r1
 800fe34:	4616      	mov	r6, r2
 800fe36:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fe38:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800fe3c:	f7f6 fc40 	bl	80066c0 <lwip_htons>
 800fe40:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fe42:	210e      	movs	r1, #14
 800fe44:	4620      	mov	r0, r4
 800fe46:	f7f7 ff53 	bl	8007cf0 <pbuf_add_header>
 800fe4a:	b9e8      	cbnz	r0, 800fe88 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fe4c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800fe4e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	600b      	str	r3, [r1, #0]
 800fe56:	88bb      	ldrh	r3, [r7, #4]
 800fe58:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fe5a:	6833      	ldr	r3, [r6, #0]
 800fe5c:	f8c1 3006 	str.w	r3, [r1, #6]
 800fe60:	88b3      	ldrh	r3, [r6, #4]
 800fe62:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fe64:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800fe68:	2b06      	cmp	r3, #6
 800fe6a:	d105      	bne.n	800fe78 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fe6c:	69ab      	ldr	r3, [r5, #24]
 800fe6e:	4621      	mov	r1, r4
 800fe70:	4628      	mov	r0, r5
 800fe72:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fe78:	4b05      	ldr	r3, [pc, #20]	; (800fe90 <ethernet_output+0x64>)
 800fe7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fe7e:	4905      	ldr	r1, [pc, #20]	; (800fe94 <ethernet_output+0x68>)
 800fe80:	4805      	ldr	r0, [pc, #20]	; (800fe98 <ethernet_output+0x6c>)
 800fe82:	f01a ff23 	bl	802accc <iprintf>
 800fe86:	e7f1      	b.n	800fe6c <ethernet_output+0x40>
  return ERR_BUF;
 800fe88:	f06f 0001 	mvn.w	r0, #1
 800fe8c:	e7f2      	b.n	800fe74 <ethernet_output+0x48>
 800fe8e:	bf00      	nop
 800fe90:	0802ede8 	.word	0x0802ede8
 800fe94:	0802ee20 	.word	0x0802ee20
 800fe98:	0802bc48 	.word	0x0802bc48

0800fe9c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800fea2:	9100      	str	r1, [sp, #0]
 800fea4:	2304      	movs	r3, #4
 800fea6:	9301      	str	r3, [sp, #4]
 800fea8:	2100      	movs	r1, #0
 800feaa:	9102      	str	r1, [sp, #8]
 800feac:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800feae:	4668      	mov	r0, sp
 800feb0:	f7f2 f864 	bl	8001f7c <osMessageCreate>
 800feb4:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800feb6:	fab0 f080 	clz	r0, r0
 800feba:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800febc:	4240      	negs	r0, r0
 800febe:	b004      	add	sp, #16
 800fec0:	bd10      	pop	{r4, pc}

0800fec2 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800fec2:	b510      	push	{r4, lr}
 800fec4:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	f7f2 f8dc 	bl	8002084 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800fecc:	6820      	ldr	r0, [r4, #0]
 800fece:	f7f2 f8e3 	bl	8002098 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800fed2:	bd10      	pop	{r4, pc}

0800fed4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800fed4:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800fed6:	2200      	movs	r2, #0
 800fed8:	6800      	ldr	r0, [r0, #0]
 800feda:	f7f2 f865 	bl	8001fa8 <osMessagePut>
 800fede:	3800      	subs	r0, #0
 800fee0:	bf18      	it	ne
 800fee2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800fee4:	4240      	negs	r0, r0
 800fee6:	bd08      	pop	{r3, pc}

0800fee8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800fee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feea:	b085      	sub	sp, #20
 800feec:	4605      	mov	r5, r0
 800feee:	460f      	mov	r7, r1
 800fef0:	4614      	mov	r4, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800fef2:	f7f1 ff24 	bl	8001d3e <osKernelSysTick>
 800fef6:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800fef8:	b18c      	cbz	r4, 800ff1e <sys_arch_mbox_fetch+0x36>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800fefa:	4622      	mov	r2, r4
 800fefc:	6829      	ldr	r1, [r5, #0]
 800fefe:	a801      	add	r0, sp, #4
 800ff00:	f7f2 f880 	bl	8002004 <osMessageGet>

    if(event.status == osEventMessage)
 800ff04:	9b01      	ldr	r3, [sp, #4]
 800ff06:	2b10      	cmp	r3, #16
 800ff08:	d003      	beq.n	800ff12 <sys_arch_mbox_fetch+0x2a>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ff0a:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ff0e:	b005      	add	sp, #20
 800ff10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *msg = (void *)event.value.v;
 800ff12:	9b02      	ldr	r3, [sp, #8]
 800ff14:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800ff16:	f7f1 ff12 	bl	8001d3e <osKernelSysTick>
 800ff1a:	1b80      	subs	r0, r0, r6
 800ff1c:	e7f7      	b.n	800ff0e <sys_arch_mbox_fetch+0x26>
    event = osMessageGet (*mbox, osWaitForever);
 800ff1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff22:	6829      	ldr	r1, [r5, #0]
 800ff24:	a801      	add	r0, sp, #4
 800ff26:	f7f2 f86d 	bl	8002004 <osMessageGet>
    *msg = (void *)event.value.v;
 800ff2a:	9b02      	ldr	r3, [sp, #8]
 800ff2c:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800ff2e:	f7f1 ff06 	bl	8001d3e <osKernelSysTick>
 800ff32:	1b80      	subs	r0, r0, r6
 800ff34:	e7eb      	b.n	800ff0e <sys_arch_mbox_fetch+0x26>

0800ff36 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ff36:	b510      	push	{r4, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	6801      	ldr	r1, [r0, #0]
 800ff40:	a801      	add	r0, sp, #4
 800ff42:	f7f2 f85f 	bl	8002004 <osMessageGet>

  if(event.status == osEventMessage)
 800ff46:	9b01      	ldr	r3, [sp, #4]
 800ff48:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800ff4a:	bf03      	ittte	eq
 800ff4c:	9b02      	ldreq	r3, [sp, #8]
 800ff4e:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800ff50:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800ff52:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 800ff56:	b004      	add	sp, #16
 800ff58:	bd10      	pop	{r4, pc}

0800ff5a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800ff5a:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ff5c:	3800      	subs	r0, #0
 800ff5e:	bf18      	it	ne
 800ff60:	2001      	movne	r0, #1
 800ff62:	4770      	bx	lr

0800ff64 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	6003      	str	r3, [r0, #0]
}
 800ff68:	4770      	bx	lr

0800ff6a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ff6a:	b530      	push	{r4, r5, lr}
 800ff6c:	b083      	sub	sp, #12
 800ff6e:	4604      	mov	r4, r0
 800ff70:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800ff72:	2300      	movs	r3, #0
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	9301      	str	r3, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ff78:	2101      	movs	r1, #1
 800ff7a:	4668      	mov	r0, sp
 800ff7c:	f7f1 ff7c 	bl	8001e78 <osSemaphoreCreate>
 800ff80:	6020      	str	r0, [r4, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ff82:	b140      	cbz	r0, 800ff96 <sys_sem_new+0x2c>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ff84:	b115      	cbz	r5, 800ff8c <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ff86:	2000      	movs	r0, #0
}
 800ff88:	b003      	add	sp, #12
 800ff8a:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem, 0);
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	f7f1 ff97 	bl	8001ec0 <osSemaphoreWait>
  return ERR_OK;
 800ff92:	2000      	movs	r0, #0
 800ff94:	e7f8      	b.n	800ff88 <sys_sem_new+0x1e>
    return ERR_MEM;
 800ff96:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9a:	e7f5      	b.n	800ff88 <sys_sem_new+0x1e>

0800ff9c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800ffa2:	f7f1 fecc 	bl	8001d3e <osKernelSysTick>
 800ffa6:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ffa8:	b95e      	cbnz	r6, 800ffc2 <sys_arch_sem_wait+0x26>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800ffaa:	f04f 36ff 	mov.w	r6, #4294967295
 800ffae:	4631      	mov	r1, r6
 800ffb0:	6820      	ldr	r0, [r4, #0]
 800ffb2:	f7f1 ff85 	bl	8001ec0 <osSemaphoreWait>
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	d1f9      	bne.n	800ffae <sys_arch_sem_wait+0x12>
    return (osKernelSysTick() - starttime);
 800ffba:	f7f1 fec0 	bl	8001d3e <osKernelSysTick>
 800ffbe:	1b40      	subs	r0, r0, r5
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800ffc2:	4631      	mov	r1, r6
 800ffc4:	6820      	ldr	r0, [r4, #0]
 800ffc6:	f7f1 ff7b 	bl	8001ec0 <osSemaphoreWait>
 800ffca:	b110      	cbz	r0, 800ffd2 <sys_arch_sem_wait+0x36>
      return SYS_ARCH_TIMEOUT;
 800ffcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd0:	e7f6      	b.n	800ffc0 <sys_arch_sem_wait+0x24>
      return (osKernelSysTick() - starttime);
 800ffd2:	f7f1 feb4 	bl	8001d3e <osKernelSysTick>
 800ffd6:	1b40      	subs	r0, r0, r5
 800ffd8:	e7f2      	b.n	800ffc0 <sys_arch_sem_wait+0x24>

0800ffda <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ffda:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800ffdc:	6800      	ldr	r0, [r0, #0]
 800ffde:	f7f1 ff99 	bl	8001f14 <osSemaphoreRelease>
}
 800ffe2:	bd08      	pop	{r3, pc}

0800ffe4 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ffe4:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	f7f1 ffbe 	bl	8001f68 <osSemaphoreDelete>
}
 800ffec:	bd08      	pop	{r3, pc}

0800ffee <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800ffee:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800fff0:	3800      	subs	r0, #0
 800fff2:	bf18      	it	ne
 800fff4:	2001      	movne	r0, #1
 800fff6:	4770      	bx	lr

0800fff8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800fff8:	2300      	movs	r3, #0
 800fffa:	6003      	str	r3, [r0, #0]
}
 800fffc:	4770      	bx	lr
	...

08010000 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010000:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010002:	4803      	ldr	r0, [pc, #12]	; (8010010 <sys_init+0x10>)
 8010004:	f7f1 fed9 	bl	8001dba <osMutexCreate>
 8010008:	4b02      	ldr	r3, [pc, #8]	; (8010014 <sys_init+0x14>)
 801000a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801000c:	bd08      	pop	{r3, pc}
 801000e:	bf00      	nop
 8010010:	0802ee64 	.word	0x0802ee64
 8010014:	20014688 	.word	0x20014688

08010018 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010018:	b510      	push	{r4, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801001e:	2300      	movs	r3, #0
 8010020:	9300      	str	r3, [sp, #0]
 8010022:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010024:	4668      	mov	r0, sp
 8010026:	f7f1 fec8 	bl	8001dba <osMutexCreate>
 801002a:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801002c:	fab0 f080 	clz	r0, r0
 8010030:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8010032:	4240      	negs	r0, r0
 8010034:	b002      	add	sp, #8
 8010036:	bd10      	pop	{r4, pc}

08010038 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010038:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801003a:	f04f 31ff 	mov.w	r1, #4294967295
 801003e:	6800      	ldr	r0, [r0, #0]
 8010040:	f7f1 fec6 	bl	8001dd0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010044:	bd08      	pop	{r3, pc}

08010046 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010046:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 8010048:	6800      	ldr	r0, [r0, #0]
 801004a:	f7f1 feeb 	bl	8001e24 <osMutexRelease>
}
 801004e:	bd08      	pop	{r3, pc}

08010050 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010050:	b510      	push	{r4, lr}
 8010052:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010054:	2400      	movs	r4, #0
 8010056:	9403      	str	r4, [sp, #12]
 8010058:	9404      	str	r4, [sp, #16]
 801005a:	9406      	str	r4, [sp, #24]
 801005c:	9407      	str	r4, [sp, #28]
 801005e:	9001      	str	r0, [sp, #4]
 8010060:	9102      	str	r1, [sp, #8]
 8010062:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010064:	f8ad 100c 	strh.w	r1, [sp, #12]
 8010068:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 801006a:	4611      	mov	r1, r2
 801006c:	a801      	add	r0, sp, #4
 801006e:	f7f1 fe70 	bl	8001d52 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010072:	b008      	add	sp, #32
 8010074:	bd10      	pop	{r4, pc}
	...

08010078 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010078:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801007a:	f04f 31ff 	mov.w	r1, #4294967295
 801007e:	4b03      	ldr	r3, [pc, #12]	; (801008c <sys_arch_protect+0x14>)
 8010080:	6818      	ldr	r0, [r3, #0]
 8010082:	f7f1 fea5 	bl	8001dd0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 8010086:	2001      	movs	r0, #1
 8010088:	bd08      	pop	{r3, pc}
 801008a:	bf00      	nop
 801008c:	20014688 	.word	0x20014688

08010090 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010090:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010092:	4b02      	ldr	r3, [pc, #8]	; (801009c <sys_arch_unprotect+0xc>)
 8010094:	6818      	ldr	r0, [r3, #0]
 8010096:	f7f1 fec5 	bl	8001e24 <osMutexRelease>
}
 801009a:	bd08      	pop	{r3, pc}
 801009c:	20014688 	.word	0x20014688

080100a0 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80100a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	4606      	mov	r6, r0
    int rc = FAILURE,
        sent = 0;

    while (sent < length && !TimerIsExpired(timer))
 80100a6:	1e0f      	subs	r7, r1, #0
        sent = 0;
 80100a8:	bfd8      	it	le
 80100aa:	2400      	movle	r4, #0
    while (sent < length && !TimerIsExpired(timer))
 80100ac:	dd18      	ble.n	80100e0 <sendPacket+0x40>
 80100ae:	4690      	mov	r8, r2
        sent = 0;
 80100b0:	2400      	movs	r4, #0
    while (sent < length && !TimerIsExpired(timer))
 80100b2:	4640      	mov	r0, r8
 80100b4:	f019 f85c 	bl	8029170 <TimerIsExpired>
 80100b8:	b990      	cbnz	r0, 80100e0 <sendPacket+0x40>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80100ba:	f8d6 9054 	ldr.w	r9, [r6, #84]	; 0x54
 80100be:	f8d9 a004 	ldr.w	sl, [r9, #4]
 80100c2:	6935      	ldr	r5, [r6, #16]
 80100c4:	4425      	add	r5, r4
 80100c6:	4640      	mov	r0, r8
 80100c8:	f019 f86c 	bl	80291a4 <TimerLeftMS>
 80100cc:	4603      	mov	r3, r0
 80100ce:	463a      	mov	r2, r7
 80100d0:	4629      	mov	r1, r5
 80100d2:	4648      	mov	r0, r9
 80100d4:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 80100d6:	2800      	cmp	r0, #0
 80100d8:	db02      	blt.n	80100e0 <sendPacket+0x40>
            break;
        sent += rc;
 80100da:	4404      	add	r4, r0
    while (sent < length && !TimerIsExpired(timer))
 80100dc:	42a7      	cmp	r7, r4
 80100de:	dce8      	bgt.n	80100b2 <sendPacket+0x12>
    }
    if (sent == length)
 80100e0:	42a7      	cmp	r7, r4
 80100e2:	d107      	bne.n	80100f4 <sendPacket+0x54>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 80100e4:	69b1      	ldr	r1, [r6, #24]
 80100e6:	f106 0058 	add.w	r0, r6, #88	; 0x58
 80100ea:	f019 f851 	bl	8029190 <TimerCountdown>
        rc = MQTT_SUCCESS;
 80100ee:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
 80100f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = FAILURE;
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 80100f8:	e7fa      	b.n	80100f0 <sendPacket+0x50>

080100fa <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 80100fa:	b510      	push	{r4, lr}
 80100fc:	4604      	mov	r4, r0
    int i;
    c->ipstack = network;
 80100fe:	6541      	str	r1, [r0, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
 8010100:	2100      	movs	r1, #0
 8010102:	6281      	str	r1, [r0, #40]	; 0x28
 8010104:	6301      	str	r1, [r0, #48]	; 0x30
 8010106:	6381      	str	r1, [r0, #56]	; 0x38
 8010108:	6401      	str	r1, [r0, #64]	; 0x40
 801010a:	6481      	str	r1, [r0, #72]	; 0x48
    c->command_timeout_ms = command_timeout_ms;
 801010c:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
 801010e:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
 8010110:	9b02      	ldr	r3, [sp, #8]
 8010112:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
 8010114:	9b03      	ldr	r3, [sp, #12]
 8010116:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
 8010118:	9b04      	ldr	r3, [sp, #16]
 801011a:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
 801011c:	6201      	str	r1, [r0, #32]
    c->cleansession = 0;
 801011e:	6241      	str	r1, [r0, #36]	; 0x24
    c->ping_outstanding = 0;
 8010120:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
 8010122:	6501      	str	r1, [r0, #80]	; 0x50
	  c->next_packetid = 1;
 8010124:	2301      	movs	r3, #1
 8010126:	f840 3b58 	str.w	r3, [r0], #88
    TimerInit(&c->last_sent);
 801012a:	f019 f845 	bl	80291b8 <TimerInit>
    TimerInit(&c->last_received);
 801012e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8010132:	f019 f841 	bl	80291b8 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 8010136:	bd10      	pop	{r4, pc}

08010138 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8010138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801013c:	b083      	sub	sp, #12
 801013e:	4680      	mov	r8, r0
 8010140:	460d      	mov	r5, r1
 8010142:	4692      	mov	sl, r2
    int i;
    int rc = FAILURE;

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8010144:	4604      	mov	r4, r0
 8010146:	f100 0728 	add.w	r7, r0, #40	; 0x28
    int rc = FAILURE;
 801014a:	f04f 39ff 	mov.w	r9, #4294967295
 801014e:	e03d      	b.n	80101cc <deliverMessage+0x94>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8010150:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    char* curn = topicName->lenstring.data;
 8010154:	68ab      	ldr	r3, [r5, #8]
    char* curn_end = curn + topicName->lenstring.len;
 8010156:	6869      	ldr	r1, [r5, #4]
 8010158:	4419      	add	r1, r3
    while (*curf && curn < curn_end)
 801015a:	f89c 2000 	ldrb.w	r2, [ip]
 801015e:	2a00      	cmp	r2, #0
 8010160:	d059      	beq.n	8010216 <deliverMessage+0xde>
 8010162:	428b      	cmp	r3, r1
 8010164:	d22f      	bcs.n	80101c6 <deliverMessage+0x8e>
 8010166:	f101 3eff 	add.w	lr, r1, #4294967295
 801016a:	e008      	b.n	801017e <deliverMessage+0x46>
        if (*curn == '/' && *curf != '/')
 801016c:	2a2f      	cmp	r2, #47	; 0x2f
 801016e:	d10f      	bne.n	8010190 <deliverMessage+0x58>
        curn++;
 8010170:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
 8010172:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8010176:	2a00      	cmp	r2, #0
 8010178:	d04d      	beq.n	8010216 <deliverMessage+0xde>
 801017a:	4299      	cmp	r1, r3
 801017c:	d923      	bls.n	80101c6 <deliverMessage+0x8e>
        if (*curn == '/' && *curf != '/')
 801017e:	7818      	ldrb	r0, [r3, #0]
 8010180:	282f      	cmp	r0, #47	; 0x2f
 8010182:	d0f3      	beq.n	801016c <deliverMessage+0x34>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8010184:	2a2b      	cmp	r2, #43	; 0x2b
 8010186:	d007      	beq.n	8010198 <deliverMessage+0x60>
 8010188:	2a23      	cmp	r2, #35	; 0x23
 801018a:	d013      	beq.n	80101b4 <deliverMessage+0x7c>
 801018c:	4290      	cmp	r0, r2
 801018e:	d0ef      	beq.n	8010170 <deliverMessage+0x38>
    return (curn == curn_end) && (*curf == '\0');
 8010190:	4299      	cmp	r1, r3
 8010192:	d118      	bne.n	80101c6 <deliverMessage+0x8e>
 8010194:	b9ba      	cbnz	r2, 80101c6 <deliverMessage+0x8e>
 8010196:	e022      	b.n	80101de <deliverMessage+0xa6>
            char* nextpos = curn + 1;
 8010198:	1c5a      	adds	r2, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
 801019a:	4291      	cmp	r1, r2
 801019c:	d936      	bls.n	801020c <deliverMessage+0xd4>
 801019e:	461a      	mov	r2, r3
 80101a0:	4613      	mov	r3, r2
 80101a2:	3201      	adds	r2, #1
 80101a4:	4693      	mov	fp, r2
 80101a6:	7810      	ldrb	r0, [r2, #0]
 80101a8:	282f      	cmp	r0, #47	; 0x2f
 80101aa:	d0e1      	beq.n	8010170 <deliverMessage+0x38>
 80101ac:	4596      	cmp	lr, r2
 80101ae:	d1f7      	bne.n	80101a0 <deliverMessage+0x68>
                nextpos = ++curn + 1;
 80101b0:	465b      	mov	r3, fp
 80101b2:	e7dd      	b.n	8010170 <deliverMessage+0x38>
            curn = curn_end - 1;    // skip until end of string
 80101b4:	1e4b      	subs	r3, r1, #1
 80101b6:	e7db      	b.n	8010170 <deliverMessage+0x38>
    md->topicName = aTopicName;
 80101b8:	9501      	str	r5, [sp, #4]
    md->message = aMessage;
 80101ba:	f8cd a000 	str.w	sl, [sp]
        {
            if (c->messageHandlers[i].fp != NULL)
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
                c->messageHandlers[i].fp(&md);
 80101be:	4668      	mov	r0, sp
 80101c0:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80101c2:	f04f 0900 	mov.w	r9, #0
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80101c6:	3408      	adds	r4, #8
 80101c8:	42bc      	cmp	r4, r7
 80101ca:	d00c      	beq.n	80101e6 <deliverMessage+0xae>
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80101cc:	4626      	mov	r6, r4
 80101ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80101d0:	2900      	cmp	r1, #0
 80101d2:	d0f8      	beq.n	80101c6 <deliverMessage+0x8e>
 80101d4:	4628      	mov	r0, r5
 80101d6:	f000 fdbe 	bl	8010d56 <MQTTPacket_equals>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d0b8      	beq.n	8010150 <deliverMessage+0x18>
            if (c->messageHandlers[i].fp != NULL)
 80101de:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1e9      	bne.n	80101b8 <deliverMessage+0x80>
 80101e4:	e7ef      	b.n	80101c6 <deliverMessage+0x8e>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80101e6:	f1b9 0f00 	cmp.w	r9, #0
 80101ea:	d103      	bne.n	80101f4 <deliverMessage+0xbc>
        c->defaultMessageHandler(&md);
        rc = MQTT_SUCCESS;
    }

    return rc;
}
 80101ec:	4648      	mov	r0, r9
 80101ee:	b003      	add	sp, #12
 80101f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80101f4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d0f7      	beq.n	80101ec <deliverMessage+0xb4>
    md->topicName = aTopicName;
 80101fc:	9501      	str	r5, [sp, #4]
    md->message = aMessage;
 80101fe:	f8cd a000 	str.w	sl, [sp]
        c->defaultMessageHandler(&md);
 8010202:	4668      	mov	r0, sp
 8010204:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8010206:	f04f 0900 	mov.w	r9, #0
    return rc;
 801020a:	e7ef      	b.n	80101ec <deliverMessage+0xb4>
        curn++;
 801020c:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
 801020e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8010212:	2a00      	cmp	r2, #0
 8010214:	d1d7      	bne.n	80101c6 <deliverMessage+0x8e>
    return (curn == curn_end) && (*curf == '\0');
 8010216:	4299      	cmp	r1, r3
 8010218:	d1d5      	bne.n	80101c6 <deliverMessage+0x8e>
 801021a:	e7e0      	b.n	80101de <deliverMessage+0xa6>

0801021c <keepalive>:

int keepalive(MQTTClient* c)
{
    int rc = MQTT_SUCCESS;

    if (c->keepAliveInterval == 0)
 801021c:	6983      	ldr	r3, [r0, #24]
 801021e:	b90b      	cbnz	r3, 8010224 <keepalive+0x8>
    int rc = MQTT_SUCCESS;
 8010220:	2000      	movs	r0, #0
        }
    }

exit:
    return rc;
}
 8010222:	4770      	bx	lr
{
 8010224:	b510      	push	{r4, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	4604      	mov	r4, r0
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 801022a:	3058      	adds	r0, #88	; 0x58
 801022c:	f018 ffa0 	bl	8029170 <TimerIsExpired>
 8010230:	b190      	cbz	r0, 8010258 <keepalive+0x3c>
        if (c->ping_outstanding)
 8010232:	7f23      	ldrb	r3, [r4, #28]
 8010234:	bb0b      	cbnz	r3, 801027a <keepalive+0x5e>
            TimerInit(&timer);
 8010236:	4668      	mov	r0, sp
 8010238:	f018 ffbe 	bl	80291b8 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801023c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010240:	4668      	mov	r0, sp
 8010242:	f018 ff9d 	bl	8029180 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8010246:	68a1      	ldr	r1, [r4, #8]
 8010248:	6920      	ldr	r0, [r4, #16]
 801024a:	f000 fc19 	bl	8010a80 <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 801024e:	1e01      	subs	r1, r0, #0
 8010250:	dc0a      	bgt.n	8010268 <keepalive+0x4c>
    int rc = MQTT_SUCCESS;
 8010252:	2000      	movs	r0, #0
}
 8010254:	b002      	add	sp, #8
 8010256:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8010258:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801025c:	f018 ff88 	bl	8029170 <TimerIsExpired>
 8010260:	2800      	cmp	r0, #0
 8010262:	d1e6      	bne.n	8010232 <keepalive+0x16>
    int rc = MQTT_SUCCESS;
 8010264:	2000      	movs	r0, #0
 8010266:	e7f5      	b.n	8010254 <keepalive+0x38>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8010268:	466a      	mov	r2, sp
 801026a:	4620      	mov	r0, r4
 801026c:	f7ff ff18 	bl	80100a0 <sendPacket>
 8010270:	2800      	cmp	r0, #0
 8010272:	d1ef      	bne.n	8010254 <keepalive+0x38>
                c->ping_outstanding = 1;
 8010274:	2301      	movs	r3, #1
 8010276:	7723      	strb	r3, [r4, #28]
 8010278:	e7ec      	b.n	8010254 <keepalive+0x38>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 801027a:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 801027e:	e7e9      	b.n	8010254 <keepalive+0x38>

08010280 <MQTTCleanSession>:
void MQTTCleanSession(MQTTClient* c)
{
    int i = 0;

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = NULL;
 8010280:	2300      	movs	r3, #0
 8010282:	6283      	str	r3, [r0, #40]	; 0x28
 8010284:	6303      	str	r3, [r0, #48]	; 0x30
 8010286:	6383      	str	r3, [r0, #56]	; 0x38
 8010288:	6403      	str	r3, [r0, #64]	; 0x40
 801028a:	6483      	str	r3, [r0, #72]	; 0x48
}
 801028c:	4770      	bx	lr

0801028e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 801028e:	b508      	push	{r3, lr}
    c->ping_outstanding = 0;
 8010290:	2300      	movs	r3, #0
 8010292:	7703      	strb	r3, [r0, #28]
    c->isconnected = 0;
 8010294:	6203      	str	r3, [r0, #32]
    if (c->cleansession)
 8010296:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010298:	b903      	cbnz	r3, 801029c <MQTTCloseSession+0xe>
        MQTTCleanSession(c);
}
 801029a:	bd08      	pop	{r3, pc}
        MQTTCleanSession(c);
 801029c:	f7ff fff0 	bl	8010280 <MQTTCleanSession>
}
 80102a0:	e7fb      	b.n	801029a <MQTTCloseSession+0xc>

080102a2 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80102a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a6:	b08f      	sub	sp, #60	; 0x3c
 80102a8:	4605      	mov	r5, r0
 80102aa:	460e      	mov	r6, r1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80102ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80102ae:	6827      	ldr	r7, [r4, #0]
 80102b0:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80102b4:	4608      	mov	r0, r1
 80102b6:	f018 ff75 	bl	80291a4 <TimerLeftMS>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2201      	movs	r2, #1
 80102be:	4641      	mov	r1, r8
 80102c0:	4620      	mov	r0, r4
 80102c2:	47b8      	blx	r7
 80102c4:	4604      	mov	r4, r0
    if (rc != 1)
 80102c6:	2801      	cmp	r0, #1
 80102c8:	d012      	beq.n	80102f0 <cycle+0x4e>
    int len = 0,
        rc = MQTT_SUCCESS;

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */

    switch (packet_type)
 80102ca:	2c0d      	cmp	r4, #13
 80102cc:	f200 80e0 	bhi.w	8010490 <cycle+0x1ee>
 80102d0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80102d4:	00de00d6 	.word	0x00de00d6
 80102d8:	005d00d6 	.word	0x005d00d6
 80102dc:	00ad00d6 	.word	0x00ad00d6
 80102e0:	00d600ad 	.word	0x00d600ad
 80102e4:	00d600de 	.word	0x00d600de
 80102e8:	00d600de 	.word	0x00d600de
 80102ec:	00cc00de 	.word	0x00cc00de
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80102f0:	4630      	mov	r0, r6
 80102f2:	f018 ff57 	bl	80291a4 <TimerLeftMS>
 80102f6:	4682      	mov	sl, r0
 80102f8:	f04f 0804 	mov.w	r8, #4
    *value = 0;
 80102fc:	2700      	movs	r7, #0
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80102fe:	f04f 0b01 	mov.w	fp, #1
 8010302:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8010304:	f8d0 9000 	ldr.w	r9, [r0]
 8010308:	4653      	mov	r3, sl
 801030a:	465a      	mov	r2, fp
 801030c:	a90a      	add	r1, sp, #40	; 0x28
 801030e:	47c8      	blx	r9
        if (rc != 1)
 8010310:	2801      	cmp	r0, #1
 8010312:	d10c      	bne.n	801032e <cycle+0x8c>
        *value += (i & 127) * multiplier;
 8010314:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801031c:	fb04 7702 	mla	r7, r4, r2, r7
        multiplier *= 128;
 8010320:	01e4      	lsls	r4, r4, #7
    } while ((i & 128) != 0);
 8010322:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010326:	d002      	beq.n	801032e <cycle+0x8c>
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8010328:	f1b8 0801 	subs.w	r8, r8, #1
 801032c:	d1e9      	bne.n	8010302 <cycle+0x60>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801032e:	6968      	ldr	r0, [r5, #20]
 8010330:	4639      	mov	r1, r7
 8010332:	3001      	adds	r0, #1
 8010334:	f000 fc28 	bl	8010b88 <MQTTPacket_encode>
 8010338:	3001      	adds	r0, #1
    if (rem_len > (c->readbuf_size - len))
 801033a:	68eb      	ldr	r3, [r5, #12]
 801033c:	1a1b      	subs	r3, r3, r0
 801033e:	42bb      	cmp	r3, r7
 8010340:	f0c0 80b2 	bcc.w	80104a8 <cycle+0x206>
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8010344:	2f00      	cmp	r7, #0
 8010346:	dc0a      	bgt.n	801035e <cycle+0xbc>
    header.byte = c->readbuf[0];
 8010348:	696b      	ldr	r3, [r5, #20]
 801034a:	781c      	ldrb	r4, [r3, #0]
    rc = header.bits.type;
 801034c:	0924      	lsrs	r4, r4, #4
    if (c->keepAliveInterval > 0)
 801034e:	69a9      	ldr	r1, [r5, #24]
 8010350:	2900      	cmp	r1, #0
 8010352:	d0ba      	beq.n	80102ca <cycle+0x28>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 8010354:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8010358:	f018 ff1a 	bl	8029190 <TimerCountdown>
 801035c:	e7b5      	b.n	80102ca <cycle+0x28>
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 801035e:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
 8010362:	f8d8 9000 	ldr.w	r9, [r8]
 8010366:	696c      	ldr	r4, [r5, #20]
 8010368:	4404      	add	r4, r0
 801036a:	4630      	mov	r0, r6
 801036c:	f018 ff1a 	bl	80291a4 <TimerLeftMS>
 8010370:	4603      	mov	r3, r0
 8010372:	463a      	mov	r2, r7
 8010374:	4621      	mov	r1, r4
 8010376:	4640      	mov	r0, r8
 8010378:	47c8      	blx	r9
 801037a:	42b8      	cmp	r0, r7
 801037c:	d0e4      	beq.n	8010348 <cycle+0xa6>
        case PINGRESP:
            c->ping_outstanding = 0;
            break;
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 801037e:	4628      	mov	r0, r5
 8010380:	f7ff ff4c 	bl	801021c <keepalive>
 8010384:	4604      	mov	r4, r0
 8010386:	b360      	cbz	r0, 80103e2 <cycle+0x140>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8010388:	f04f 34ff 	mov.w	r4, #4294967295
 801038c:	e026      	b.n	80103dc <cycle+0x13a>
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801038e:	2300      	movs	r3, #0
 8010390:	930d      	str	r3, [sp, #52]	; 0x34
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8010392:	68eb      	ldr	r3, [r5, #12]
 8010394:	9304      	str	r3, [sp, #16]
 8010396:	696b      	ldr	r3, [r5, #20]
 8010398:	9303      	str	r3, [sp, #12]
 801039a:	ab0d      	add	r3, sp, #52	; 0x34
 801039c:	9302      	str	r3, [sp, #8]
 801039e:	ab0c      	add	r3, sp, #48	; 0x30
 80103a0:	9301      	str	r3, [sp, #4]
 80103a2:	ab07      	add	r3, sp, #28
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	ab0b      	add	r3, sp, #44	; 0x2c
 80103a8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80103ac:	a906      	add	r1, sp, #24
 80103ae:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80103b2:	f000 fb6a 	bl	8010a8a <MQTTDeserialize_publish>
 80103b6:	2801      	cmp	r0, #1
 80103b8:	d113      	bne.n	80103e2 <cycle+0x140>
            msg.qos = (enum QoS)intQoS;
 80103ba:	9b06      	ldr	r3, [sp, #24]
 80103bc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            deliverMessage(c, &topicName, &msg);
 80103c0:	aa0a      	add	r2, sp, #40	; 0x28
 80103c2:	a907      	add	r1, sp, #28
 80103c4:	4628      	mov	r0, r5
 80103c6:	f7ff feb7 	bl	8010138 <deliverMessage>
            if (msg.qos != QOS0)
 80103ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80103ce:	b363      	cbz	r3, 801042a <cycle+0x188>
                if (msg.qos == QOS1)
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d00a      	beq.n	80103ea <cycle+0x148>
                else if (msg.qos == QOS2)
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d01d      	beq.n	8010414 <cycle+0x172>
        rc = FAILURE;
 80103d8:	f04f 34ff 	mov.w	r4, #4294967295
    }

exit:
    if (rc == MQTT_SUCCESS)
        rc = packet_type;
    else if (c->isconnected)
 80103dc:	6a2b      	ldr	r3, [r5, #32]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d15e      	bne.n	80104a0 <cycle+0x1fe>
        MQTTCloseSession(c);
    return rc;
}
 80103e2:	4620      	mov	r0, r4
 80103e4:	b00f      	add	sp, #60	; 0x3c
 80103e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80103ea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80103ee:	9300      	str	r3, [sp, #0]
 80103f0:	2300      	movs	r3, #0
 80103f2:	2204      	movs	r2, #4
 80103f4:	68a9      	ldr	r1, [r5, #8]
 80103f6:	6928      	ldr	r0, [r5, #16]
 80103f8:	f000 fd22 	bl	8010e40 <MQTTSerialize_ack>
 80103fc:	4601      	mov	r1, r0
                if (len <= 0)
 80103fe:	2900      	cmp	r1, #0
 8010400:	ddea      	ble.n	80103d8 <cycle+0x136>
                    rc = sendPacket(c, len, timer);
 8010402:	4632      	mov	r2, r6
 8010404:	4628      	mov	r0, r5
 8010406:	f7ff fe4b 	bl	80100a0 <sendPacket>
 801040a:	4606      	mov	r6, r0
                if (rc == FAILURE)
 801040c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010410:	d137      	bne.n	8010482 <cycle+0x1e0>
 8010412:	e7e1      	b.n	80103d8 <cycle+0x136>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8010414:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	2300      	movs	r3, #0
 801041c:	2205      	movs	r2, #5
 801041e:	68a9      	ldr	r1, [r5, #8]
 8010420:	6928      	ldr	r0, [r5, #16]
 8010422:	f000 fd0d 	bl	8010e40 <MQTTSerialize_ack>
 8010426:	4601      	mov	r1, r0
 8010428:	e7e9      	b.n	80103fe <cycle+0x15c>
        rc = MQTT_SUCCESS;
 801042a:	2600      	movs	r6, #0
            break;
 801042c:	e029      	b.n	8010482 <cycle+0x1e0>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801042e:	68eb      	ldr	r3, [r5, #12]
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	696b      	ldr	r3, [r5, #20]
 8010434:	aa0a      	add	r2, sp, #40	; 0x28
 8010436:	a906      	add	r1, sp, #24
 8010438:	a807      	add	r0, sp, #28
 801043a:	f000 fb70 	bl	8010b1e <MQTTDeserialize_ack>
 801043e:	2801      	cmp	r0, #1
 8010440:	d1ca      	bne.n	80103d8 <cycle+0x136>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8010442:	2c05      	cmp	r4, #5
 8010444:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	f04f 0300 	mov.w	r3, #0
 801044e:	bf0c      	ite	eq
 8010450:	2206      	moveq	r2, #6
 8010452:	2207      	movne	r2, #7
 8010454:	68a9      	ldr	r1, [r5, #8]
 8010456:	6928      	ldr	r0, [r5, #16]
 8010458:	f000 fcf2 	bl	8010e40 <MQTTSerialize_ack>
 801045c:	1e01      	subs	r1, r0, #0
 801045e:	ddbb      	ble.n	80103d8 <cycle+0x136>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8010460:	4632      	mov	r2, r6
 8010462:	4628      	mov	r0, r5
 8010464:	f7ff fe1c 	bl	80100a0 <sendPacket>
 8010468:	b110      	cbz	r0, 8010470 <cycle+0x1ce>
 801046a:	e7b5      	b.n	80103d8 <cycle+0x136>
            c->ping_outstanding = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	772b      	strb	r3, [r5, #28]
    if (keepalive(c) != MQTT_SUCCESS) {
 8010470:	4628      	mov	r0, r5
 8010472:	f7ff fed3 	bl	801021c <keepalive>
 8010476:	2800      	cmp	r0, #0
 8010478:	d0b3      	beq.n	80103e2 <cycle+0x140>
        rc = FAILURE;
 801047a:	f04f 34ff 	mov.w	r4, #4294967295
 801047e:	e7ad      	b.n	80103dc <cycle+0x13a>
 8010480:	2600      	movs	r6, #0
    if (keepalive(c) != MQTT_SUCCESS) {
 8010482:	4628      	mov	r0, r5
 8010484:	f7ff feca 	bl	801021c <keepalive>
 8010488:	b938      	cbnz	r0, 801049a <cycle+0x1f8>
exit:
 801048a:	4623      	mov	r3, r4
 801048c:	4634      	mov	r4, r6
 801048e:	e000      	b.n	8010492 <cycle+0x1f0>
 8010490:	4623      	mov	r3, r4
    if (rc == MQTT_SUCCESS)
 8010492:	2c00      	cmp	r4, #0
 8010494:	d1a2      	bne.n	80103dc <cycle+0x13a>
 8010496:	461c      	mov	r4, r3
    return rc;
 8010498:	e7a3      	b.n	80103e2 <cycle+0x140>
        rc = FAILURE;
 801049a:	f04f 34ff 	mov.w	r4, #4294967295
 801049e:	e79d      	b.n	80103dc <cycle+0x13a>
        MQTTCloseSession(c);
 80104a0:	4628      	mov	r0, r5
 80104a2:	f7ff fef4 	bl	801028e <MQTTCloseSession>
 80104a6:	e79c      	b.n	80103e2 <cycle+0x140>
        rc = BUFFER_OVERFLOW;
 80104a8:	f06f 0401 	mvn.w	r4, #1
 80104ac:	e796      	b.n	80103dc <cycle+0x13a>

080104ae <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80104ae:	b530      	push	{r4, r5, lr}
 80104b0:	b083      	sub	sp, #12
 80104b2:	4604      	mov	r4, r0
 80104b4:	460d      	mov	r5, r1
    int rc = MQTT_SUCCESS;
    Timer timer;

    TimerInit(&timer);
 80104b6:	4668      	mov	r0, sp
 80104b8:	f018 fe7e 	bl	80291b8 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80104bc:	4629      	mov	r1, r5
 80104be:	4668      	mov	r0, sp
 80104c0:	f018 fe5e 	bl	8029180 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 80104c4:	4669      	mov	r1, sp
 80104c6:	4620      	mov	r0, r4
 80104c8:	f7ff feeb 	bl	80102a2 <cycle>
 80104cc:	2800      	cmp	r0, #0
 80104ce:	db06      	blt.n	80104de <MQTTYield+0x30>
        {
            rc = FAILURE;
            break;
        }
  	} while (!TimerIsExpired(&timer));
 80104d0:	4668      	mov	r0, sp
 80104d2:	f018 fe4d 	bl	8029170 <TimerIsExpired>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d0f4      	beq.n	80104c4 <MQTTYield+0x16>
    int rc = MQTT_SUCCESS;
 80104da:	2000      	movs	r0, #0
 80104dc:	e001      	b.n	80104e2 <MQTTYield+0x34>
            rc = FAILURE;
 80104de:	f04f 30ff 	mov.w	r0, #4294967295

    return rc;
}
 80104e2:	b003      	add	sp, #12
 80104e4:	bd30      	pop	{r4, r5, pc}

080104e6 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 80104e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e8:	4607      	mov	r7, r0
 80104ea:	460e      	mov	r6, r1
 80104ec:	4615      	mov	r5, r2
    int rc = FAILURE;
 80104ee:	f04f 34ff 	mov.w	r4, #4294967295

    do
    {
        if (TimerIsExpired(timer))
 80104f2:	4628      	mov	r0, r5
 80104f4:	f018 fe3c 	bl	8029170 <TimerIsExpired>
 80104f8:	b950      	cbnz	r0, 8010510 <waitfor+0x2a>
            break; // we timed out
        rc = cycle(c, timer);
 80104fa:	4629      	mov	r1, r5
 80104fc:	4638      	mov	r0, r7
 80104fe:	f7ff fed0 	bl	80102a2 <cycle>
 8010502:	4604      	mov	r4, r0
    }
    while (rc != packet_type && rc >= 0);
 8010504:	42b0      	cmp	r0, r6
 8010506:	d002      	beq.n	801050e <waitfor+0x28>
 8010508:	2800      	cmp	r0, #0
 801050a:	daf2      	bge.n	80104f2 <waitfor+0xc>
 801050c:	e000      	b.n	8010510 <waitfor+0x2a>
        rc = cycle(c, timer);
 801050e:	4634      	mov	r4, r6

    return rc;
}
 8010510:	4620      	mov	r0, r4
 8010512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010514 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	b098      	sub	sp, #96	; 0x60
 8010518:	4604      	mov	r4, r0
 801051a:	460d      	mov	r5, r1
 801051c:	4616      	mov	r6, r2
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801051e:	2258      	movs	r2, #88	; 0x58
 8010520:	4926      	ldr	r1, [pc, #152]	; (80105bc <MQTTConnectWithResults+0xa8>)
 8010522:	4668      	mov	r0, sp
 8010524:	f01a f809 	bl	802a53a <memcpy>
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8010528:	6a23      	ldr	r3, [r4, #32]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d13a      	bne.n	80105a4 <MQTTConnectWithResults+0x90>
		  goto exit;

    TimerInit(&connect_timer);
 801052e:	a816      	add	r0, sp, #88	; 0x58
 8010530:	f018 fe42 	bl	80291b8 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8010534:	6861      	ldr	r1, [r4, #4]
 8010536:	a816      	add	r0, sp, #88	; 0x58
 8010538:	f018 fe22 	bl	8029180 <TimerCountdownMS>

    if (options == 0)
 801053c:	b1ad      	cbz	r5, 801056a <MQTTConnectWithResults+0x56>
        options = &default_options; /* set default options if none were supplied */

    c->keepAliveInterval = options->keepAliveInterval;
 801053e:	8b29      	ldrh	r1, [r5, #24]
 8010540:	61a1      	str	r1, [r4, #24]
    c->cleansession = options->cleansession;
 8010542:	7eab      	ldrb	r3, [r5, #26]
 8010544:	6263      	str	r3, [r4, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8010546:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801054a:	f018 fe21 	bl	8029190 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801054e:	462a      	mov	r2, r5
 8010550:	68a1      	ldr	r1, [r4, #8]
 8010552:	6920      	ldr	r0, [r4, #16]
 8010554:	f000 f9b8 	bl	80108c8 <MQTTSerialize_connect>
 8010558:	1e01      	subs	r1, r0, #0
 801055a:	dd26      	ble.n	80105aa <MQTTConnectWithResults+0x96>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 801055c:	aa16      	add	r2, sp, #88	; 0x58
 801055e:	4620      	mov	r0, r4
 8010560:	f7ff fd9e 	bl	80100a0 <sendPacket>
 8010564:	b118      	cbz	r0, 801056e <MQTTConnectWithResults+0x5a>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
}
 8010566:	b018      	add	sp, #96	; 0x60
 8010568:	bd70      	pop	{r4, r5, r6, pc}
        options = &default_options; /* set default options if none were supplied */
 801056a:	466d      	mov	r5, sp
 801056c:	e7e7      	b.n	801053e <MQTTConnectWithResults+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801056e:	aa16      	add	r2, sp, #88	; 0x58
 8010570:	2102      	movs	r1, #2
 8010572:	4620      	mov	r0, r4
 8010574:	f7ff ffb7 	bl	80104e6 <waitfor>
 8010578:	2802      	cmp	r0, #2
 801057a:	d119      	bne.n	80105b0 <MQTTConnectWithResults+0x9c>
        data->rc = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	7033      	strb	r3, [r6, #0]
        data->sessionPresent = 0;
 8010580:	4630      	mov	r0, r6
 8010582:	f800 3f01 	strb.w	r3, [r0, #1]!
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8010586:	68e3      	ldr	r3, [r4, #12]
 8010588:	6962      	ldr	r2, [r4, #20]
 801058a:	4631      	mov	r1, r6
 801058c:	f000 fa36 	bl	80109fc <MQTTDeserialize_connack>
 8010590:	2801      	cmp	r0, #1
 8010592:	d110      	bne.n	80105b6 <MQTTConnectWithResults+0xa2>
            rc = data->rc;
 8010594:	7830      	ldrb	r0, [r6, #0]
    if (rc == MQTT_SUCCESS)
 8010596:	2800      	cmp	r0, #0
 8010598:	d1e5      	bne.n	8010566 <MQTTConnectWithResults+0x52>
        c->isconnected = 1;
 801059a:	2301      	movs	r3, #1
 801059c:	6223      	str	r3, [r4, #32]
        c->ping_outstanding = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	7723      	strb	r3, [r4, #28]
 80105a2:	e7e0      	b.n	8010566 <MQTTConnectWithResults+0x52>
    int rc = FAILURE;
 80105a4:	f04f 30ff 	mov.w	r0, #4294967295
 80105a8:	e7dd      	b.n	8010566 <MQTTConnectWithResults+0x52>
 80105aa:	f04f 30ff 	mov.w	r0, #4294967295
 80105ae:	e7da      	b.n	8010566 <MQTTConnectWithResults+0x52>
        rc = FAILURE;
 80105b0:	f04f 30ff 	mov.w	r0, #4294967295
 80105b4:	e7d7      	b.n	8010566 <MQTTConnectWithResults+0x52>
            rc = FAILURE;
 80105b6:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 80105ba:	e7d4      	b.n	8010566 <MQTTConnectWithResults+0x52>
 80105bc:	0802b9a8 	.word	0x0802b9a8

080105c0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80105c0:	b500      	push	{lr}
 80105c2:	b083      	sub	sp, #12
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 80105c4:	aa01      	add	r2, sp, #4
 80105c6:	f7ff ffa5 	bl	8010514 <MQTTConnectWithResults>
}
 80105ca:	b003      	add	sp, #12
 80105cc:	f85d fb04 	ldr.w	pc, [sp], #4

080105d0 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 80105d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d4:	4607      	mov	r7, r0
 80105d6:	460d      	mov	r5, r1
 80105d8:	4691      	mov	r9, r2
    int rc = FAILURE;
    int i = -1;

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80105da:	2400      	movs	r4, #0
 80105dc:	f100 0628 	add.w	r6, r0, #40	; 0x28
 80105e0:	e008      	b.n	80105f4 <MQTTSetMessageHandler+0x24>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
        {
            if (messageHandler == NULL) /* remove existing */
            {
                c->messageHandlers[i].topicFilter = NULL;
 80105e2:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
 80105e6:	2200      	movs	r2, #0
 80105e8:	62ba      	str	r2, [r7, #40]	; 0x28
                c->messageHandlers[i].fp = NULL;
 80105ea:	62fa      	str	r2, [r7, #44]	; 0x2c
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
            break;
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 80105ec:	e017      	b.n	801061e <MQTTSetMessageHandler+0x4e>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80105ee:	3401      	adds	r4, #1
 80105f0:	2c05      	cmp	r4, #5
 80105f2:	d017      	beq.n	8010624 <MQTTSetMessageHandler+0x54>
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 80105f4:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d0f8      	beq.n	80105ee <MQTTSetMessageHandler+0x1e>
 80105fc:	4629      	mov	r1, r5
 80105fe:	f7ef fdf7 	bl	80001f0 <strcmp>
 8010602:	4603      	mov	r3, r0
 8010604:	2800      	cmp	r0, #0
 8010606:	d1f2      	bne.n	80105ee <MQTTSetMessageHandler+0x1e>
            if (messageHandler == NULL) /* remove existing */
 8010608:	f1b9 0f00 	cmp.w	r9, #0
 801060c:	d0e9      	beq.n	80105e2 <MQTTSetMessageHandler+0x12>
                    rc = MQTT_SUCCESS;
                    break;
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 801060e:	2c04      	cmp	r4, #4
 8010610:	dc19      	bgt.n	8010646 <MQTTSetMessageHandler+0x76>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8010612:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8010616:	62a5      	str	r5, [r4, #40]	; 0x28
            c->messageHandlers[i].fp = messageHandler;
 8010618:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 801061c:	2300      	movs	r3, #0
        }
    }
    return rc;
}
 801061e:	4618      	mov	r0, r3
 8010620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (messageHandler != NULL) {
 8010624:	f1b9 0f00 	cmp.w	r9, #0
 8010628:	d00a      	beq.n	8010640 <MQTTSetMessageHandler+0x70>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801062a:	2400      	movs	r4, #0
                if (c->messageHandlers[i].topicFilter == NULL)
 801062c:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d0ec      	beq.n	801060e <MQTTSetMessageHandler+0x3e>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8010634:	3401      	adds	r4, #1
 8010636:	2c05      	cmp	r4, #5
 8010638:	d1f8      	bne.n	801062c <MQTTSetMessageHandler+0x5c>
 801063a:	f04f 33ff 	mov.w	r3, #4294967295
 801063e:	e7ee      	b.n	801061e <MQTTSetMessageHandler+0x4e>
    int rc = FAILURE;
 8010640:	f04f 33ff 	mov.w	r3, #4294967295
 8010644:	e7eb      	b.n	801061e <MQTTSetMessageHandler+0x4e>
 8010646:	2300      	movs	r3, #0
    return rc;
 8010648:	e7e9      	b.n	801061e <MQTTSetMessageHandler+0x4e>

0801064a <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 801064a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801064c:	b08f      	sub	sp, #60	; 0x3c
 801064e:	4604      	mov	r4, r0
 8010650:	461e      	mov	r6, r3
 8010652:	f88d 2017 	strb.w	r2, [sp, #23]
    int rc = FAILURE;
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 8010656:	2300      	movs	r3, #0
 8010658:	930a      	str	r3, [sp, #40]	; 0x28
 801065a:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicFilter;
 801065c:	9109      	str	r1, [sp, #36]	; 0x24

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 801065e:	6a03      	ldr	r3, [r0, #32]
 8010660:	b93b      	cbnz	r3, 8010672 <MQTTSubscribeWithResults+0x28>
    else
        rc = FAILURE;

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 8010662:	4620      	mov	r0, r4
 8010664:	f7ff fe13 	bl	801028e <MQTTCloseSession>
 8010668:	f04f 37ff 	mov.w	r7, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 801066c:	4638      	mov	r0, r7
 801066e:	b00f      	add	sp, #60	; 0x3c
 8010670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010672:	460d      	mov	r5, r1
    TimerInit(&timer);
 8010674:	a80c      	add	r0, sp, #48	; 0x30
 8010676:	f018 fd9f 	bl	80291b8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801067a:	6861      	ldr	r1, [r4, #4]
 801067c:	a80c      	add	r0, sp, #48	; 0x30
 801067e:	f018 fd7f 	bl	8029180 <TimerCountdownMS>
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8010682:	6920      	ldr	r0, [r4, #16]
 8010684:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801068c:	4293      	cmp	r3, r2
 801068e:	bf14      	ite	ne
 8010690:	3301      	addne	r3, #1
 8010692:	2301      	moveq	r3, #1
 8010694:	6023      	str	r3, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8010696:	f10d 0217 	add.w	r2, sp, #23
 801069a:	9202      	str	r2, [sp, #8]
 801069c:	aa09      	add	r2, sp, #36	; 0x24
 801069e:	9201      	str	r2, [sp, #4]
 80106a0:	2201      	movs	r2, #1
 80106a2:	9200      	str	r2, [sp, #0]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	2200      	movs	r2, #0
 80106a8:	f000 fc08 	bl	8010ebc <MQTTSerialize_subscribe>
    if (len <= 0)
 80106ac:	1e01      	subs	r1, r0, #0
 80106ae:	ddd8      	ble.n	8010662 <MQTTSubscribeWithResults+0x18>
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80106b0:	aa0c      	add	r2, sp, #48	; 0x30
 80106b2:	4620      	mov	r0, r4
 80106b4:	f7ff fcf4 	bl	80100a0 <sendPacket>
 80106b8:	4607      	mov	r7, r0
 80106ba:	b118      	cbz	r0, 80106c4 <MQTTSubscribeWithResults+0x7a>
    if (rc == FAILURE)
 80106bc:	f1b7 3fff 	cmp.w	r7, #4294967295
 80106c0:	d1d4      	bne.n	801066c <MQTTSubscribeWithResults+0x22>
 80106c2:	e7ce      	b.n	8010662 <MQTTSubscribeWithResults+0x18>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80106c4:	aa0c      	add	r2, sp, #48	; 0x30
 80106c6:	2109      	movs	r1, #9
 80106c8:	4620      	mov	r0, r4
 80106ca:	f7ff ff0c 	bl	80104e6 <waitfor>
 80106ce:	2809      	cmp	r0, #9
 80106d0:	d1c7      	bne.n	8010662 <MQTTSubscribeWithResults+0x18>
        int count = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	9308      	str	r3, [sp, #32]
        data->grantedQoS = QOS0;
 80106d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106d8:	7013      	strb	r3, [r2, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 80106da:	68e3      	ldr	r3, [r4, #12]
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	6963      	ldr	r3, [r4, #20]
 80106e0:	9300      	str	r3, [sp, #0]
 80106e2:	4613      	mov	r3, r2
 80106e4:	aa08      	add	r2, sp, #32
 80106e6:	2101      	movs	r1, #1
 80106e8:	f10d 001e 	add.w	r0, sp, #30
 80106ec:	f000 fc2e 	bl	8010f4c <MQTTDeserialize_suback>
 80106f0:	2801      	cmp	r0, #1
 80106f2:	d1e3      	bne.n	80106bc <MQTTSubscribeWithResults+0x72>
            if (data->grantedQoS != 0x80)
 80106f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	2b80      	cmp	r3, #128	; 0x80
 80106fa:	d0df      	beq.n	80106bc <MQTTSubscribeWithResults+0x72>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 80106fc:	4632      	mov	r2, r6
 80106fe:	4629      	mov	r1, r5
 8010700:	4620      	mov	r0, r4
 8010702:	f7ff ff65 	bl	80105d0 <MQTTSetMessageHandler>
 8010706:	4607      	mov	r7, r0
 8010708:	e7d8      	b.n	80106bc <MQTTSubscribeWithResults+0x72>

0801070a <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 801070a:	b510      	push	{r4, lr}
 801070c:	b084      	sub	sp, #16
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 801070e:	ac03      	add	r4, sp, #12
 8010710:	9400      	str	r4, [sp, #0]
 8010712:	f7ff ff9a 	bl	801064a <MQTTSubscribeWithResults>
}
 8010716:	b004      	add	sp, #16
 8010718:	bd10      	pop	{r4, pc}

0801071a <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801071a:	b570      	push	{r4, r5, r6, lr}
 801071c:	b08e      	sub	sp, #56	; 0x38
 801071e:	4604      	mov	r4, r0
    int rc = FAILURE;
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8010720:	2300      	movs	r3, #0
 8010722:	930a      	str	r3, [sp, #40]	; 0x28
 8010724:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
 8010726:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8010728:	6a03      	ldr	r3, [r0, #32]
 801072a:	b93b      	cbnz	r3, 801073c <MQTTPublish+0x22>
            rc = FAILURE;
    }

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 801072c:	4620      	mov	r0, r4
 801072e:	f7ff fdae 	bl	801028e <MQTTCloseSession>
 8010732:	f04f 36ff 	mov.w	r6, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 8010736:	4630      	mov	r0, r6
 8010738:	b00e      	add	sp, #56	; 0x38
 801073a:	bd70      	pop	{r4, r5, r6, pc}
 801073c:	4615      	mov	r5, r2
    TimerInit(&timer);
 801073e:	a80c      	add	r0, sp, #48	; 0x30
 8010740:	f018 fd3a 	bl	80291b8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8010744:	6861      	ldr	r1, [r4, #4]
 8010746:	a80c      	add	r0, sp, #48	; 0x30
 8010748:	f018 fd1a 	bl	8029180 <TimerCountdownMS>
    if (message->qos == QOS1 || message->qos == QOS2)
 801074c:	782b      	ldrb	r3, [r5, #0]
 801074e:	3b01      	subs	r3, #1
 8010750:	b2db      	uxtb	r3, r3
 8010752:	2b01      	cmp	r3, #1
 8010754:	d934      	bls.n	80107c0 <MQTTPublish+0xa6>
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8010756:	68eb      	ldr	r3, [r5, #12]
 8010758:	9306      	str	r3, [sp, #24]
 801075a:	68ab      	ldr	r3, [r5, #8]
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	ab02      	add	r3, sp, #8
 8010760:	aa09      	add	r2, sp, #36	; 0x24
 8010762:	ca07      	ldmia	r2, {r0, r1, r2}
 8010764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010768:	88ab      	ldrh	r3, [r5, #4]
 801076a:	9301      	str	r3, [sp, #4]
 801076c:	786b      	ldrb	r3, [r5, #1]
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	782b      	ldrb	r3, [r5, #0]
 8010772:	2200      	movs	r2, #0
 8010774:	68a1      	ldr	r1, [r4, #8]
 8010776:	6920      	ldr	r0, [r4, #16]
 8010778:	f000 fb1a 	bl	8010db0 <MQTTSerialize_publish>
    if (len <= 0)
 801077c:	1e01      	subs	r1, r0, #0
 801077e:	ddd5      	ble.n	801072c <MQTTPublish+0x12>
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8010780:	aa0c      	add	r2, sp, #48	; 0x30
 8010782:	4620      	mov	r0, r4
 8010784:	f7ff fc8c 	bl	80100a0 <sendPacket>
 8010788:	4606      	mov	r6, r0
 801078a:	2800      	cmp	r0, #0
 801078c:	d136      	bne.n	80107fc <MQTTPublish+0xe2>
    if (message->qos == QOS1)
 801078e:	782b      	ldrb	r3, [r5, #0]
 8010790:	2b01      	cmp	r3, #1
 8010792:	d01f      	beq.n	80107d4 <MQTTPublish+0xba>
    else if (message->qos == QOS2)
 8010794:	2b02      	cmp	r3, #2
 8010796:	d1ce      	bne.n	8010736 <MQTTPublish+0x1c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8010798:	aa0c      	add	r2, sp, #48	; 0x30
 801079a:	2107      	movs	r1, #7
 801079c:	4620      	mov	r0, r4
 801079e:	f7ff fea2 	bl	80104e6 <waitfor>
 80107a2:	2807      	cmp	r0, #7
 80107a4:	d1c2      	bne.n	801072c <MQTTPublish+0x12>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80107a6:	68e3      	ldr	r3, [r4, #12]
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	6963      	ldr	r3, [r4, #20]
 80107ac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80107b0:	a908      	add	r1, sp, #32
 80107b2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 80107b6:	f000 f9b2 	bl	8010b1e <MQTTDeserialize_ack>
 80107ba:	2801      	cmp	r0, #1
 80107bc:	d1b6      	bne.n	801072c <MQTTPublish+0x12>
 80107be:	e7ba      	b.n	8010736 <MQTTPublish+0x1c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107c6:	4293      	cmp	r3, r2
 80107c8:	bf14      	ite	ne
 80107ca:	3301      	addne	r3, #1
 80107cc:	2301      	moveq	r3, #1
 80107ce:	6023      	str	r3, [r4, #0]
        message->id = getNextPacketId(c);
 80107d0:	80ab      	strh	r3, [r5, #4]
 80107d2:	e7c0      	b.n	8010756 <MQTTPublish+0x3c>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80107d4:	aa0c      	add	r2, sp, #48	; 0x30
 80107d6:	2104      	movs	r1, #4
 80107d8:	4620      	mov	r0, r4
 80107da:	f7ff fe84 	bl	80104e6 <waitfor>
 80107de:	2804      	cmp	r0, #4
 80107e0:	d1a4      	bne.n	801072c <MQTTPublish+0x12>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80107e2:	68e3      	ldr	r3, [r4, #12]
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	6963      	ldr	r3, [r4, #20]
 80107e8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80107ec:	a908      	add	r1, sp, #32
 80107ee:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 80107f2:	f000 f994 	bl	8010b1e <MQTTDeserialize_ack>
 80107f6:	2801      	cmp	r0, #1
 80107f8:	d198      	bne.n	801072c <MQTTPublish+0x12>
 80107fa:	e79c      	b.n	8010736 <MQTTPublish+0x1c>
    if (rc == FAILURE)
 80107fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010800:	d094      	beq.n	801072c <MQTTPublish+0x12>
 8010802:	e798      	b.n	8010736 <MQTTPublish+0x1c>

08010804 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8010804:	b530      	push	{r4, r5, lr}
 8010806:	b083      	sub	sp, #12
 8010808:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801080a:	4668      	mov	r0, sp
 801080c:	f018 fcd4 	bl	80291b8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8010810:	6861      	ldr	r1, [r4, #4]
 8010812:	4668      	mov	r0, sp
 8010814:	f018 fcb4 	bl	8029180 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8010818:	68a1      	ldr	r1, [r4, #8]
 801081a:	6920      	ldr	r0, [r4, #16]
 801081c:	f000 f92b 	bl	8010a76 <MQTTSerialize_disconnect>
    if (len > 0)
 8010820:	1e01      	subs	r1, r0, #0
 8010822:	dd0a      	ble.n	801083a <MQTTDisconnect+0x36>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8010824:	466a      	mov	r2, sp
 8010826:	4620      	mov	r0, r4
 8010828:	f7ff fc3a 	bl	80100a0 <sendPacket>
 801082c:	4605      	mov	r5, r0
    MQTTCloseSession(c);
 801082e:	4620      	mov	r0, r4
 8010830:	f7ff fd2d 	bl	801028e <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 8010834:	4628      	mov	r0, r5
 8010836:	b003      	add	sp, #12
 8010838:	bd30      	pop	{r4, r5, pc}
    int rc = FAILURE;
 801083a:	f04f 35ff 	mov.w	r5, #4294967295
 801083e:	e7f6      	b.n	801082e <MQTTDisconnect+0x2a>

08010840 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	4604      	mov	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8010844:	7a03      	ldrb	r3, [r0, #8]
 8010846:	2b03      	cmp	r3, #3
 8010848:	d022      	beq.n	8010890 <MQTTSerialize_connectLength+0x50>
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
		len = 10;
 801084a:	2b04      	cmp	r3, #4
 801084c:	bf14      	ite	ne
 801084e:	2600      	movne	r6, #0
 8010850:	260a      	moveq	r6, #10

	len += MQTTstrlen(options->clientID)+2;
 8010852:	f104 030c 	add.w	r3, r4, #12
 8010856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801085a:	f000 fa6e 	bl	8010d3a <MQTTstrlen>
 801085e:	1c85      	adds	r5, r0, #2
 8010860:	4435      	add	r5, r6
	if (options->willFlag)
 8010862:	7ee3      	ldrb	r3, [r4, #27]
 8010864:	b9b3      	cbnz	r3, 8010894 <MQTTSerialize_connectLength+0x54>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
 8010866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010868:	b32b      	cbz	r3, 80108b6 <MQTTSerialize_connectLength+0x76>
		len += MQTTstrlen(options->username)+2;
 801086a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801086e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010872:	f000 fa62 	bl	8010d3a <MQTTstrlen>
 8010876:	3002      	adds	r0, #2
 8010878:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 801087a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801087c:	b1fb      	cbz	r3, 80108be <MQTTSerialize_connectLength+0x7e>
		len += MQTTstrlen(options->password)+2;
 801087e:	344c      	adds	r4, #76	; 0x4c
 8010880:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010884:	f000 fa59 	bl	8010d3a <MQTTstrlen>
 8010888:	3002      	adds	r0, #2
 801088a:	4405      	add	r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
 801088c:	4628      	mov	r0, r5
 801088e:	bd70      	pop	{r4, r5, r6, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 8010890:	260c      	movs	r6, #12
 8010892:	e7de      	b.n	8010852 <MQTTSerialize_connectLength+0x12>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8010894:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8010898:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801089c:	f000 fa4d 	bl	8010d3a <MQTTstrlen>
 80108a0:	4606      	mov	r6, r0
 80108a2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80108a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80108aa:	f000 fa46 	bl	8010d3a <MQTTstrlen>
 80108ae:	4406      	add	r6, r0
 80108b0:	3604      	adds	r6, #4
 80108b2:	4435      	add	r5, r6
 80108b4:	e7d7      	b.n	8010866 <MQTTSerialize_connectLength+0x26>
	if (options->username.cstring || options->username.lenstring.data)
 80108b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1d6      	bne.n	801086a <MQTTSerialize_connectLength+0x2a>
 80108bc:	e7dd      	b.n	801087a <MQTTSerialize_connectLength+0x3a>
	if (options->password.cstring || options->password.lenstring.data)
 80108be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1dc      	bne.n	801087e <MQTTSerialize_connectLength+0x3e>
 80108c4:	e7e2      	b.n	801088c <MQTTSerialize_connectLength+0x4c>
	...

080108c8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80108c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ca:	b083      	sub	sp, #12
 80108cc:	4606      	mov	r6, r0
 80108ce:	460d      	mov	r5, r1
 80108d0:	4614      	mov	r4, r2
	unsigned char *ptr = buf;
 80108d2:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7ff ffb3 	bl	8010840 <MQTTSerialize_connectLength>
 80108da:	4607      	mov	r7, r0
 80108dc:	f000 f996 	bl	8010c0c <MQTTPacket_len>
 80108e0:	42a8      	cmp	r0, r5
 80108e2:	f300 8083 	bgt.w	80109ec <MQTTSerialize_connect+0x124>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.byte = 0;
 80108e6:	2100      	movs	r1, #0
 80108e8:	f36f 0107 	bfc	r1, #0, #8
	header.bits.type = CONNECT;
 80108ec:	2301      	movs	r3, #1
 80108ee:	f363 1107 	bfi	r1, r3, #4, #4
	writeChar(&ptr, header.byte); /* write header */
 80108f2:	b2c9      	uxtb	r1, r1
 80108f4:	a801      	add	r0, sp, #4
 80108f6:	f000 f9b5 	bl	8010c64 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80108fa:	4639      	mov	r1, r7
 80108fc:	9801      	ldr	r0, [sp, #4]
 80108fe:	f000 f943 	bl	8010b88 <MQTTPacket_encode>
 8010902:	9b01      	ldr	r3, [sp, #4]
 8010904:	4403      	add	r3, r0
 8010906:	9301      	str	r3, [sp, #4]

	if (options->MQTTVersion == 4)
 8010908:	7a23      	ldrb	r3, [r4, #8]
 801090a:	2b04      	cmp	r3, #4
 801090c:	d041      	beq.n	8010992 <MQTTSerialize_connect+0xca>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801090e:	4939      	ldr	r1, [pc, #228]	; (80109f4 <MQTTSerialize_connect+0x12c>)
 8010910:	a801      	add	r0, sp, #4
 8010912:	f000 f9c2 	bl	8010c9a <writeCString>
		writeChar(&ptr, (char) 3);
 8010916:	2103      	movs	r1, #3
 8010918:	a801      	add	r0, sp, #4
 801091a:	f000 f9a3 	bl	8010c64 <writeChar>
	}

	flags.all = 0;
 801091e:	2100      	movs	r1, #0
 8010920:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 8010924:	7ea3      	ldrb	r3, [r4, #26]
 8010926:	f363 0141 	bfi	r1, r3, #1, #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801092a:	7ee3      	ldrb	r3, [r4, #27]
 801092c:	3b00      	subs	r3, #0
 801092e:	bf18      	it	ne
 8010930:	2301      	movne	r3, #1
 8010932:	f363 0182 	bfi	r1, r3, #2, #1
	if (flags.bits.will)
 8010936:	f011 0f04 	tst.w	r1, #4
 801093a:	d007      	beq.n	801094c <MQTTSerialize_connect+0x84>
	{
		flags.bits.willQoS = options->will.qos;
 801093c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010940:	f363 01c4 	bfi	r1, r3, #3, #2
		flags.bits.willRetain = options->will.retained;
 8010944:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8010948:	f363 1145 	bfi	r1, r3, #5, #1
	}

	if (options->username.cstring || options->username.lenstring.data)
 801094c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801094e:	b353      	cbz	r3, 80109a6 <MQTTSerialize_connect+0xde>
		flags.bits.username = 1;
 8010950:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 8010954:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010956:	b353      	cbz	r3, 80109ae <MQTTSerialize_connect+0xe6>
		flags.bits.password = 1;
 8010958:	f041 0140 	orr.w	r1, r1, #64	; 0x40

	writeChar(&ptr, flags.all);
 801095c:	b2cd      	uxtb	r5, r1
 801095e:	4629      	mov	r1, r5
 8010960:	a801      	add	r0, sp, #4
 8010962:	f000 f97f 	bl	8010c64 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8010966:	8b21      	ldrh	r1, [r4, #24]
 8010968:	a801      	add	r0, sp, #4
 801096a:	f000 f981 	bl	8010c70 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801096e:	f104 030c 	add.w	r3, r4, #12
 8010972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010974:	a801      	add	r0, sp, #4
 8010976:	f000 f9a4 	bl	8010cc2 <writeMQTTString>
	if (options->willFlag)
 801097a:	7ee3      	ldrb	r3, [r4, #27]
 801097c:	b9db      	cbnz	r3, 80109b6 <MQTTSerialize_connect+0xee>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
 801097e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8010982:	d125      	bne.n	80109d0 <MQTTSerialize_connect+0x108>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
 8010984:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010988:	d129      	bne.n	80109de <MQTTSerialize_connect+0x116>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
 801098a:	9801      	ldr	r0, [sp, #4]
 801098c:	1b80      	subs	r0, r0, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
 801098e:	b003      	add	sp, #12
 8010990:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
 8010992:	4919      	ldr	r1, [pc, #100]	; (80109f8 <MQTTSerialize_connect+0x130>)
 8010994:	a801      	add	r0, sp, #4
 8010996:	f000 f980 	bl	8010c9a <writeCString>
		writeChar(&ptr, (char) 4);
 801099a:	2104      	movs	r1, #4
 801099c:	eb0d 0001 	add.w	r0, sp, r1
 80109a0:	f000 f960 	bl	8010c64 <writeChar>
 80109a4:	e7bb      	b.n	801091e <MQTTSerialize_connect+0x56>
	if (options->username.cstring || options->username.lenstring.data)
 80109a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d1d1      	bne.n	8010950 <MQTTSerialize_connect+0x88>
 80109ac:	e7d2      	b.n	8010954 <MQTTSerialize_connect+0x8c>
	if (options->password.cstring || options->password.lenstring.data)
 80109ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d1d1      	bne.n	8010958 <MQTTSerialize_connect+0x90>
 80109b4:	e7d2      	b.n	801095c <MQTTSerialize_connect+0x94>
		writeMQTTString(&ptr, options->will.topicName);
 80109b6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80109ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109bc:	a801      	add	r0, sp, #4
 80109be:	f000 f980 	bl	8010cc2 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80109c2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80109c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109c8:	a801      	add	r0, sp, #4
 80109ca:	f000 f97a 	bl	8010cc2 <writeMQTTString>
 80109ce:	e7d6      	b.n	801097e <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
 80109d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80109d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80109d6:	a801      	add	r0, sp, #4
 80109d8:	f000 f973 	bl	8010cc2 <writeMQTTString>
 80109dc:	e7d2      	b.n	8010984 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
 80109de:	344c      	adds	r4, #76	; 0x4c
 80109e0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80109e4:	a801      	add	r0, sp, #4
 80109e6:	f000 f96c 	bl	8010cc2 <writeMQTTString>
 80109ea:	e7ce      	b.n	801098a <MQTTSerialize_connect+0xc2>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80109ec:	f06f 0001 	mvn.w	r0, #1
	return rc;
 80109f0:	e7cd      	b.n	801098e <MQTTSerialize_connect+0xc6>
 80109f2:	bf00      	nop
 80109f4:	0802ee74 	.word	0x0802ee74
 80109f8:	0802ee6c 	.word	0x0802ee6c

080109fc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80109fc:	b530      	push	{r4, r5, lr}
 80109fe:	b083      	sub	sp, #12
 8010a00:	4605      	mov	r5, r0
 8010a02:	460c      	mov	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 8010a04:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8010a06:	a801      	add	r0, sp, #4
 8010a08:	f000 f926 	bl	8010c58 <readChar>
	if (header.bits.type != CONNACK)
 8010a0c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8010a10:	2b20      	cmp	r3, #32
 8010a12:	d002      	beq.n	8010a1a <MQTTDeserialize_connack+0x1e>
	int rc = 0;
 8010a14:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010a16:	b003      	add	sp, #12
 8010a18:	bd30      	pop	{r4, r5, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8010a1a:	4669      	mov	r1, sp
 8010a1c:	9801      	ldr	r0, [sp, #4]
 8010a1e:	f000 f907 	bl	8010c30 <MQTTPacket_decodeBuf>
 8010a22:	9b01      	ldr	r3, [sp, #4]
 8010a24:	4403      	add	r3, r0
 8010a26:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
 8010a28:	9b00      	ldr	r3, [sp, #0]
 8010a2a:	2b01      	cmp	r3, #1
 8010a2c:	ddf3      	ble.n	8010a16 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
 8010a2e:	a801      	add	r0, sp, #4
 8010a30:	f000 f912 	bl	8010c58 <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 8010a34:	f000 0001 	and.w	r0, r0, #1
 8010a38:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
 8010a3a:	a801      	add	r0, sp, #4
 8010a3c:	f000 f90c 	bl	8010c58 <readChar>
 8010a40:	7020      	strb	r0, [r4, #0]
	rc = 1;
 8010a42:	2001      	movs	r0, #1
 8010a44:	e7e7      	b.n	8010a16 <MQTTDeserialize_connack+0x1a>

08010a46 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8010a46:	b510      	push	{r4, lr}
 8010a48:	b082      	sub	sp, #8
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
 8010a4a:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
 8010a4c:	2901      	cmp	r1, #1
 8010a4e:	dd0f      	ble.n	8010a70 <MQTTSerialize_zero+0x2a>
 8010a50:	4604      	mov	r4, r0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 8010a52:	0112      	lsls	r2, r2, #4
	writeChar(&ptr, header.byte); /* write header */
 8010a54:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8010a58:	a801      	add	r0, sp, #4
 8010a5a:	f000 f903 	bl	8010c64 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8010a5e:	2100      	movs	r1, #0
 8010a60:	9801      	ldr	r0, [sp, #4]
 8010a62:	f000 f891 	bl	8010b88 <MQTTPacket_encode>
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	4403      	add	r3, r0
	rc = ptr - buf;
 8010a6a:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010a6c:	b002      	add	sp, #8
 8010a6e:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8010a70:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8010a74:	e7fa      	b.n	8010a6c <MQTTSerialize_zero+0x26>

08010a76 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8010a76:	b508      	push	{r3, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 8010a78:	220e      	movs	r2, #14
 8010a7a:	f7ff ffe4 	bl	8010a46 <MQTTSerialize_zero>
}
 8010a7e:	bd08      	pop	{r3, pc}

08010a80 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8010a80:	b508      	push	{r3, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8010a82:	220c      	movs	r2, #12
 8010a84:	f7ff ffdf 	bl	8010a46 <MQTTSerialize_zero>
}
 8010a88:	bd08      	pop	{r3, pc}

08010a8a <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8010a8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	4681      	mov	r9, r0
 8010a92:	460e      	mov	r6, r1
 8010a94:	4617      	mov	r7, r2
 8010a96:	4698      	mov	r8, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 8010a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a9a:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	9300      	str	r3, [sp, #0]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8010aa0:	a801      	add	r0, sp, #4
 8010aa2:	f000 f8d9 	bl	8010c58 <readChar>
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	f360 0507 	bfi	r5, r0, #0, #8
	if (header.bits.type != PUBLISH)
 8010aac:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
 8010ab0:	2c30      	cmp	r4, #48	; 0x30
 8010ab2:	d004      	beq.n	8010abe <MQTTDeserialize_publish+0x34>
	int rc = 0;
 8010ab4:	2400      	movs	r4, #0
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	b003      	add	sp, #12
 8010aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	*dup = header.bits.dup;
 8010abe:	f3c5 03c0 	ubfx	r3, r5, #3, #1
 8010ac2:	f889 3000 	strb.w	r3, [r9]
	*qos = header.bits.qos;
 8010ac6:	f3c5 0341 	ubfx	r3, r5, #1, #2
 8010aca:	6033      	str	r3, [r6, #0]
	*retained = header.bits.retain;
 8010acc:	f3c5 0500 	ubfx	r5, r5, #0, #1
 8010ad0:	703d      	strb	r5, [r7, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8010ad2:	4669      	mov	r1, sp
 8010ad4:	9801      	ldr	r0, [sp, #4]
 8010ad6:	f000 f8ab 	bl	8010c30 <MQTTPacket_decodeBuf>
 8010ada:	4604      	mov	r4, r0
 8010adc:	9d01      	ldr	r5, [sp, #4]
 8010ade:	4405      	add	r5, r0
 8010ae0:	9501      	str	r5, [sp, #4]
	enddata = curdata + mylen;
 8010ae2:	9b00      	ldr	r3, [sp, #0]
 8010ae4:	441d      	add	r5, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8010ae6:	462a      	mov	r2, r5
 8010ae8:	a901      	add	r1, sp, #4
 8010aea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010aec:	f000 f90b 	bl	8010d06 <readMQTTLenString>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d0e0      	beq.n	8010ab6 <MQTTDeserialize_publish+0x2c>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8010af4:	9b01      	ldr	r3, [sp, #4]
 8010af6:	1aeb      	subs	r3, r5, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	dbdc      	blt.n	8010ab6 <MQTTDeserialize_publish+0x2c>
	if (*qos > 0)
 8010afc:	6833      	ldr	r3, [r6, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	dc07      	bgt.n	8010b12 <MQTTDeserialize_publish+0x88>
	*payloadlen = enddata - curdata;
 8010b02:	9b01      	ldr	r3, [sp, #4]
 8010b04:	1aed      	subs	r5, r5, r3
 8010b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b08:	6015      	str	r5, [r2, #0]
	*payload = curdata;
 8010b0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b0c:	6013      	str	r3, [r2, #0]
	rc = 1;
 8010b0e:	2401      	movs	r4, #1
 8010b10:	e7d1      	b.n	8010ab6 <MQTTDeserialize_publish+0x2c>
		*packetid = readInt(&curdata);
 8010b12:	a801      	add	r0, sp, #4
 8010b14:	f000 f898 	bl	8010c48 <readInt>
 8010b18:	f8a8 0000 	strh.w	r0, [r8]
 8010b1c:	e7f1      	b.n	8010b02 <MQTTDeserialize_publish+0x78>

08010b1e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8010b1e:	b570      	push	{r4, r5, r6, lr}
 8010b20:	b082      	sub	sp, #8
 8010b22:	4604      	mov	r4, r0
 8010b24:	460e      	mov	r6, r1
 8010b26:	4615      	mov	r5, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 8010b28:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8010b2a:	a801      	add	r0, sp, #4
 8010b2c:	f000 f894 	bl	8010c58 <readChar>
 8010b30:	2300      	movs	r3, #0
 8010b32:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 8010b36:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8010b3a:	7032      	strb	r2, [r6, #0]
	*packettype = header.bits.type;
 8010b3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010b40:	7023      	strb	r3, [r4, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8010b42:	4669      	mov	r1, sp
 8010b44:	9801      	ldr	r0, [sp, #4]
 8010b46:	f000 f873 	bl	8010c30 <MQTTPacket_decodeBuf>
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	4403      	add	r3, r0
 8010b4e:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 8010b50:	9b00      	ldr	r3, [sp, #0]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	dd04      	ble.n	8010b60 <MQTTDeserialize_ack+0x42>
		goto exit;
	*packetid = readInt(&curdata);
 8010b56:	a801      	add	r0, sp, #4
 8010b58:	f000 f876 	bl	8010c48 <readInt>
 8010b5c:	8028      	strh	r0, [r5, #0]

	rc = 1;
 8010b5e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010b60:	b002      	add	sp, #8
 8010b62:	bd70      	pop	{r4, r5, r6, pc}

08010b64 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8010b64:	b430      	push	{r4, r5}
 8010b66:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < count; ++i)
 8010b68:	1e08      	subs	r0, r1, #0
 8010b6a:	dd09      	ble.n	8010b80 <bufchar+0x1c>
 8010b6c:	4b05      	ldr	r3, [pc, #20]	; (8010b84 <bufchar+0x20>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	181d      	adds	r5, r3, r0
		*c = *bufptr++;
 8010b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b76:	7022      	strb	r2, [r4, #0]
	for (i = 0; i < count; ++i)
 8010b78:	42ab      	cmp	r3, r5
 8010b7a:	d1fa      	bne.n	8010b72 <bufchar+0xe>
 8010b7c:	4b01      	ldr	r3, [pc, #4]	; (8010b84 <bufchar+0x20>)
 8010b7e:	601d      	str	r5, [r3, #0]
	return count;
}
 8010b80:	bc30      	pop	{r4, r5}
 8010b82:	4770      	bx	lr
 8010b84:	20010898 	.word	0x20010898

08010b88 <MQTTPacket_encode>:
{
 8010b88:	b4f0      	push	{r4, r5, r6, r7}
	int rc = 0;
 8010b8a:	1e45      	subs	r5, r0, #1
 8010b8c:	f1c0 0701 	rsb	r7, r0, #1
 8010b90:	e009      	b.n	8010ba6 <MQTTPacket_encode+0x1e>
		length /= 128;
 8010b92:	460a      	mov	r2, r1
 8010b94:	2900      	cmp	r1, #0
 8010b96:	bfb8      	it	lt
 8010b98:	f101 027f 	addlt.w	r2, r1, #127	; 0x7f
 8010b9c:	11d1      	asrs	r1, r2, #7
			d |= 0x80;
 8010b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
		buf[rc++] = d;
 8010ba2:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while (length > 0);
 8010ba6:	197c      	adds	r4, r7, r5
		char d = length % 128;
 8010ba8:	424a      	negs	r2, r1
 8010baa:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8010bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010bb2:	bf58      	it	pl
 8010bb4:	4253      	negpl	r3, r2
 8010bb6:	b2db      	uxtb	r3, r3
		if (length > 0)
 8010bb8:	297f      	cmp	r1, #127	; 0x7f
 8010bba:	dcea      	bgt.n	8010b92 <MQTTPacket_encode+0xa>
		buf[rc++] = d;
 8010bbc:	5503      	strb	r3, [r0, r4]
}
 8010bbe:	1c60      	adds	r0, r4, #1
 8010bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8010bc2:	4770      	bx	lr

08010bc4 <MQTTPacket_decode>:
{
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	b082      	sub	sp, #8
 8010bca:	4607      	mov	r7, r0
 8010bcc:	460d      	mov	r5, r1
	*value = 0;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8010bd2:	2401      	movs	r4, #1
	int multiplier = 1;
 8010bd4:	4626      	mov	r6, r4
		rc = (*getcharfn)(&c, 1);
 8010bd6:	46a0      	mov	r8, r4
 8010bd8:	4641      	mov	r1, r8
 8010bda:	f10d 0007 	add.w	r0, sp, #7
 8010bde:	47b8      	blx	r7
		if (rc != 1)
 8010be0:	2801      	cmp	r0, #1
 8010be2:	d10e      	bne.n	8010c02 <MQTTPacket_decode+0x3e>
		*value += (c & 127) * multiplier;
 8010be4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010be8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8010bec:	6829      	ldr	r1, [r5, #0]
 8010bee:	fb06 1303 	mla	r3, r6, r3, r1
 8010bf2:	602b      	str	r3, [r5, #0]
		multiplier *= 128;
 8010bf4:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
 8010bf6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010bfa:	d002      	beq.n	8010c02 <MQTTPacket_decode+0x3e>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8010bfc:	3401      	adds	r4, #1
 8010bfe:	2c05      	cmp	r4, #5
 8010c00:	d1ea      	bne.n	8010bd8 <MQTTPacket_decode+0x14>
}
 8010c02:	4620      	mov	r0, r4
 8010c04:	b002      	add	sp, #8
 8010c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08010c0c <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 8010c0c:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 8010c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c10:	dc01      	bgt.n	8010c16 <MQTTPacket_len+0xa>
		rem_len += 1;
 8010c12:	3002      	adds	r0, #2
 8010c14:	4770      	bx	lr
	else if (rem_len < 16384)
 8010c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c1a:	da01      	bge.n	8010c20 <MQTTPacket_len+0x14>
		rem_len += 2;
 8010c1c:	3003      	adds	r0, #3
 8010c1e:	4770      	bx	lr
	else if (rem_len < 2097151)
 8010c20:	4a02      	ldr	r2, [pc, #8]	; (8010c2c <MQTTPacket_len+0x20>)
 8010c22:	4293      	cmp	r3, r2
		rem_len += 3;
 8010c24:	bfd4      	ite	le
 8010c26:	3004      	addle	r0, #4
		rem_len += 4;
 8010c28:	3005      	addgt	r0, #5
}
 8010c2a:	4770      	bx	lr
 8010c2c:	001ffffe 	.word	0x001ffffe

08010c30 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8010c30:	b508      	push	{r3, lr}
	bufptr = buf;
 8010c32:	4b03      	ldr	r3, [pc, #12]	; (8010c40 <MQTTPacket_decodeBuf+0x10>)
 8010c34:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 8010c36:	4803      	ldr	r0, [pc, #12]	; (8010c44 <MQTTPacket_decodeBuf+0x14>)
 8010c38:	f7ff ffc4 	bl	8010bc4 <MQTTPacket_decode>
}
 8010c3c:	bd08      	pop	{r3, pc}
 8010c3e:	bf00      	nop
 8010c40:	20010898 	.word	0x20010898
 8010c44:	08010b65 	.word	0x08010b65

08010c48 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 8010c48:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 8010c4a:	7819      	ldrb	r1, [r3, #0]
 8010c4c:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 8010c4e:	3302      	adds	r3, #2
 8010c50:	6003      	str	r3, [r0, #0]
	return len;
}
 8010c52:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 8010c56:	4770      	bx	lr

08010c58 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8010c58:	4603      	mov	r3, r0
	char c = **pptr;
 8010c5a:	6802      	ldr	r2, [r0, #0]
 8010c5c:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 8010c60:	601a      	str	r2, [r3, #0]
	return c;
}
 8010c62:	4770      	bx	lr

08010c64 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 8010c64:	6803      	ldr	r3, [r0, #0]
 8010c66:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 8010c68:	6803      	ldr	r3, [r0, #0]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	6003      	str	r3, [r0, #0]
}
 8010c6e:	4770      	bx	lr

08010c70 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 8010c70:	6802      	ldr	r2, [r0, #0]
 8010c72:	460b      	mov	r3, r1
 8010c74:	2900      	cmp	r1, #0
 8010c76:	bfb8      	it	lt
 8010c78:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 8010c7c:	121b      	asrs	r3, r3, #8
 8010c7e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8010c80:	6802      	ldr	r2, [r0, #0]
 8010c82:	1c53      	adds	r3, r2, #1
 8010c84:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 8010c86:	424b      	negs	r3, r1
 8010c88:	b2c9      	uxtb	r1, r1
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	bf58      	it	pl
 8010c8e:	4259      	negpl	r1, r3
 8010c90:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 8010c92:	6803      	ldr	r3, [r0, #0]
 8010c94:	3301      	adds	r3, #1
 8010c96:	6003      	str	r3, [r0, #0]
}
 8010c98:	4770      	bx	lr

08010c9a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8010c9a:	b570      	push	{r4, r5, r6, lr}
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	460e      	mov	r6, r1
	int len = strlen(string);
 8010ca0:	4608      	mov	r0, r1
 8010ca2:	f7ef faaf 	bl	8000204 <strlen>
 8010ca6:	4605      	mov	r5, r0
	writeInt(pptr, len);
 8010ca8:	4601      	mov	r1, r0
 8010caa:	4620      	mov	r0, r4
 8010cac:	f7ff ffe0 	bl	8010c70 <writeInt>
	memcpy(*pptr, string, len);
 8010cb0:	462a      	mov	r2, r5
 8010cb2:	4631      	mov	r1, r6
 8010cb4:	6820      	ldr	r0, [r4, #0]
 8010cb6:	f019 fc40 	bl	802a53a <memcpy>
	*pptr += len;
 8010cba:	6820      	ldr	r0, [r4, #0]
 8010cbc:	4428      	add	r0, r5
 8010cbe:	6020      	str	r0, [r4, #0]
}
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}

08010cc2 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8010cc2:	b530      	push	{r4, r5, lr}
 8010cc4:	b085      	sub	sp, #20
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	a804      	add	r0, sp, #16
 8010cca:	e900 000e 	stmdb	r0, {r1, r2, r3}
 8010cce:	9d02      	ldr	r5, [sp, #8]
	if (mqttstring.lenstring.len > 0)
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	dc05      	bgt.n	8010ce0 <writeMQTTString+0x1e>
 8010cd4:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
 8010cd6:	b189      	cbz	r1, 8010cfc <writeMQTTString+0x3a>
		writeCString(pptr, mqttstring.cstring);
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f7ff ffde 	bl	8010c9a <writeCString>
 8010cde:	e00b      	b.n	8010cf8 <writeMQTTString+0x36>
		writeInt(pptr, mqttstring.lenstring.len);
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f7ff ffc4 	bl	8010c70 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8010ce8:	462a      	mov	r2, r5
 8010cea:	9903      	ldr	r1, [sp, #12]
 8010cec:	6820      	ldr	r0, [r4, #0]
 8010cee:	f019 fc24 	bl	802a53a <memcpy>
		*pptr += mqttstring.lenstring.len;
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	441d      	add	r5, r3
 8010cf6:	6025      	str	r5, [r4, #0]
	else
		writeInt(pptr, 0);
}
 8010cf8:	b005      	add	sp, #20
 8010cfa:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, 0);
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f7ff ffb6 	bl	8010c70 <writeInt>
}
 8010d04:	e7f8      	b.n	8010cf8 <writeMQTTString+0x36>

08010d06 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8010d06:	b570      	push	{r4, r5, r6, lr}
 8010d08:	4605      	mov	r5, r0
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8010d0a:	680b      	ldr	r3, [r1, #0]
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	dc03      	bgt.n	8010d1a <readMQTTLenString+0x14>
	int rc = 0;
 8010d12:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 8010d14:	2300      	movs	r3, #0
 8010d16:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010d18:	bd70      	pop	{r4, r5, r6, pc}
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	4616      	mov	r6, r2
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8010d1e:	4608      	mov	r0, r1
 8010d20:	f7ff ff92 	bl	8010c48 <readInt>
 8010d24:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	4418      	add	r0, r3
 8010d2a:	42b0      	cmp	r0, r6
 8010d2c:	d803      	bhi.n	8010d36 <readMQTTLenString+0x30>
			mqttstring->lenstring.data = (char*)*pptr;
 8010d2e:	60ab      	str	r3, [r5, #8]
			*pptr += mqttstring->lenstring.len;
 8010d30:	6020      	str	r0, [r4, #0]
			rc = 1;
 8010d32:	2001      	movs	r0, #1
 8010d34:	e7ee      	b.n	8010d14 <readMQTTLenString+0xe>
	int rc = 0;
 8010d36:	2000      	movs	r0, #0
 8010d38:	e7ec      	b.n	8010d14 <readMQTTLenString+0xe>

08010d3a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8010d3a:	b500      	push	{lr}
 8010d3c:	b085      	sub	sp, #20
 8010d3e:	ab04      	add	r3, sp, #16
 8010d40:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8010d44:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 8010d46:	b120      	cbz	r0, 8010d52 <MQTTstrlen+0x18>
		rc = strlen(mqttstring.cstring);
 8010d48:	f7ef fa5c 	bl	8000204 <strlen>
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 8010d4c:	b005      	add	sp, #20
 8010d4e:	f85d fb04 	ldr.w	pc, [sp], #4
		rc = mqttstring.lenstring.len;
 8010d52:	9802      	ldr	r0, [sp, #8]
	return rc;
 8010d54:	e7fa      	b.n	8010d4c <MQTTstrlen+0x12>

08010d56 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8010d56:	b570      	push	{r4, r5, r6, lr}
 8010d58:	460c      	mov	r4, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 8010d5a:	6806      	ldr	r6, [r0, #0]
 8010d5c:	b156      	cbz	r6, 8010d74 <MQTTPacket_equals+0x1e>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f7ef fa50 	bl	8000204 <strlen>
 8010d64:	4605      	mov	r5, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7ef fa4c 	bl	8000204 <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8010d6c:	4285      	cmp	r5, r0
 8010d6e:	d004      	beq.n	8010d7a <MQTTPacket_equals+0x24>
 8010d70:	2000      	movs	r0, #0
}
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
 8010d74:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
 8010d76:	6845      	ldr	r5, [r0, #4]
 8010d78:	e7f5      	b.n	8010d66 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8010d7a:	462a      	mov	r2, r5
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4630      	mov	r0, r6
 8010d80:	f01a f947 	bl	802b012 <strncmp>
 8010d84:	fab0 f080 	clz	r0, r0
 8010d88:	0940      	lsrs	r0, r0, #5
 8010d8a:	e7f2      	b.n	8010d72 <MQTTPacket_equals+0x1c>

08010d8c <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8010d8c:	b530      	push	{r4, r5, lr}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	4605      	mov	r5, r0
 8010d92:	ac01      	add	r4, sp, #4
 8010d94:	e884 000e 	stmia.w	r4, {r1, r2, r3}
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8010d98:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010d9c:	f7ff ffcd 	bl	8010d3a <MQTTstrlen>
 8010da0:	1c83      	adds	r3, r0, #2
 8010da2:	9808      	ldr	r0, [sp, #32]
 8010da4:	4418      	add	r0, r3
	if (qos > 0)
 8010da6:	2d00      	cmp	r5, #0
		len += 2; /* packetid */
 8010da8:	bfc8      	it	gt
 8010daa:	3002      	addgt	r0, #2
	return len;
}
 8010dac:	b005      	add	sp, #20
 8010dae:	bd30      	pop	{r4, r5, pc}

08010db0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8010db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	4606      	mov	r6, r0
 8010db8:	460f      	mov	r7, r1
 8010dba:	4690      	mov	r8, r2
 8010dbc:	461c      	mov	r4, r3
 8010dbe:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
	unsigned char *ptr = buf;
 8010dc2:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8010dc4:	f8cd 9000 	str.w	r9, [sp]
 8010dc8:	ab0e      	add	r3, sp, #56	; 0x38
 8010dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f7ff ffdd 	bl	8010d8c <MQTTSerialize_publishLength>
 8010dd2:	4682      	mov	sl, r0
 8010dd4:	f7ff ff1a 	bl	8010c0c <MQTTPacket_len>
 8010dd8:	42b8      	cmp	r0, r7
 8010dda:	dc2e      	bgt.n	8010e3a <MQTTSerialize_publish+0x8a>
 8010ddc:	2500      	movs	r5, #0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
 8010dde:	2303      	movs	r3, #3
 8010de0:	f363 1507 	bfi	r5, r3, #4, #4
	header.bits.dup = dup;
 8010de4:	f368 05c3 	bfi	r5, r8, #3, #1
	header.bits.qos = qos;
 8010de8:	f364 0542 	bfi	r5, r4, #1, #2
	header.bits.retain = retained;
 8010dec:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010df0:	f363 0500 	bfi	r5, r3, #0, #1
	writeChar(&ptr, header.byte); /* write header */
 8010df4:	b2e9      	uxtb	r1, r5
 8010df6:	a803      	add	r0, sp, #12
 8010df8:	f7ff ff34 	bl	8010c64 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8010dfc:	4651      	mov	r1, sl
 8010dfe:	9803      	ldr	r0, [sp, #12]
 8010e00:	f7ff fec2 	bl	8010b88 <MQTTPacket_encode>
 8010e04:	9b03      	ldr	r3, [sp, #12]
 8010e06:	4403      	add	r3, r0
 8010e08:	9303      	str	r3, [sp, #12]

	writeMQTTString(&ptr, topicName);
 8010e0a:	ab0e      	add	r3, sp, #56	; 0x38
 8010e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010e0e:	a803      	add	r0, sp, #12
 8010e10:	f7ff ff57 	bl	8010cc2 <writeMQTTString>

	if (qos > 0)
 8010e14:	2c00      	cmp	r4, #0
 8010e16:	dc0a      	bgt.n	8010e2e <MQTTSerialize_publish+0x7e>
		writeInt(&ptr, packetid);

	memcpy(ptr, payload, payloadlen);
 8010e18:	464a      	mov	r2, r9
 8010e1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010e1c:	9803      	ldr	r0, [sp, #12]
 8010e1e:	f019 fb8c 	bl	802a53a <memcpy>
	ptr += payloadlen;
 8010e22:	9a03      	ldr	r2, [sp, #12]
 8010e24:	444a      	add	r2, r9

	rc = ptr - buf;
 8010e26:	1b90      	subs	r0, r2, r6

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010e28:	b004      	add	sp, #16
 8010e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		writeInt(&ptr, packetid);
 8010e2e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8010e32:	a803      	add	r0, sp, #12
 8010e34:	f7ff ff1c 	bl	8010c70 <writeInt>
 8010e38:	e7ee      	b.n	8010e18 <MQTTSerialize_publish+0x68>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8010e3a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8010e3e:	e7f3      	b.n	8010e28 <MQTTSerialize_publish+0x78>

08010e40 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8010e40:	b510      	push	{r4, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	4604      	mov	r4, r0
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
 8010e46:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
 8010e48:	2903      	cmp	r1, #3
 8010e4a:	dd1e      	ble.n	8010e8a <MQTTSerialize_ack+0x4a>
 8010e4c:	2000      	movs	r0, #0
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
 8010e4e:	f362 1007 	bfi	r0, r2, #4, #4
	header.bits.dup = dup;
 8010e52:	f363 00c3 	bfi	r0, r3, #3, #1
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8010e56:	2a06      	cmp	r2, #6
 8010e58:	bf14      	ite	ne
 8010e5a:	2200      	movne	r2, #0
 8010e5c:	2201      	moveq	r2, #1
 8010e5e:	f362 0042 	bfi	r0, r2, #1, #2
	writeChar(&ptr, header.byte); /* write header */
 8010e62:	b2c1      	uxtb	r1, r0
 8010e64:	a801      	add	r0, sp, #4
 8010e66:	f7ff fefd 	bl	8010c64 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8010e6a:	2102      	movs	r1, #2
 8010e6c:	9801      	ldr	r0, [sp, #4]
 8010e6e:	f7ff fe8b 	bl	8010b88 <MQTTPacket_encode>
 8010e72:	9b01      	ldr	r3, [sp, #4]
 8010e74:	4403      	add	r3, r0
 8010e76:	9301      	str	r3, [sp, #4]
	writeInt(&ptr, packetid);
 8010e78:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8010e7c:	a801      	add	r0, sp, #4
 8010e7e:	f7ff fef7 	bl	8010c70 <writeInt>
	rc = ptr - buf;
 8010e82:	9801      	ldr	r0, [sp, #4]
 8010e84:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010e86:	b002      	add	sp, #8
 8010e88:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8010e8a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8010e8e:	e7fa      	b.n	8010e86 <MQTTSerialize_ack+0x46>

08010e90 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8010e90:	b570      	push	{r4, r5, r6, lr}
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
 8010e92:	2800      	cmp	r0, #0
 8010e94:	dd10      	ble.n	8010eb8 <MQTTSerialize_subscribeLength+0x28>
 8010e96:	460c      	mov	r4, r1
 8010e98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010e9c:	eb01 0680 	add.w	r6, r1, r0, lsl #2
	int len = 2; /* packetid */
 8010ea0:	2502      	movs	r5, #2
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8010ea2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8010ea6:	f7ff ff48 	bl	8010d3a <MQTTstrlen>
 8010eaa:	3003      	adds	r0, #3
 8010eac:	4405      	add	r5, r0
	for (i = 0; i < count; ++i)
 8010eae:	340c      	adds	r4, #12
 8010eb0:	42b4      	cmp	r4, r6
 8010eb2:	d1f6      	bne.n	8010ea2 <MQTTSerialize_subscribeLength+0x12>
	return len;
}
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
	int len = 2; /* packetid */
 8010eb8:	2502      	movs	r5, #2
	return len;
 8010eba:	e7fb      	b.n	8010eb4 <MQTTSerialize_subscribeLength+0x24>

08010ebc <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8010ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	4690      	mov	r8, r2
 8010ec8:	461d      	mov	r5, r3
 8010eca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	unsigned char *ptr = buf;
 8010ecc:	9001      	str	r0, [sp, #4]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8010ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f7ff ffdd 	bl	8010e90 <MQTTSerialize_subscribeLength>
 8010ed6:	4681      	mov	r9, r0
 8010ed8:	f7ff fe98 	bl	8010c0c <MQTTPacket_len>
 8010edc:	42a0      	cmp	r0, r4
 8010ede:	dc32      	bgt.n	8010f46 <MQTTSerialize_subscribe+0x8a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.byte = 0;
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	f36f 0107 	bfc	r1, #0, #8
	header.bits.type = SUBSCRIBE;
 8010ee6:	2308      	movs	r3, #8
 8010ee8:	f363 1107 	bfi	r1, r3, #4, #4
	header.bits.dup = dup;
 8010eec:	f368 01c3 	bfi	r1, r8, #3, #1
	header.bits.qos = 1;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	f363 0142 	bfi	r1, r3, #1, #2
	writeChar(&ptr, header.byte); /* write header */
 8010ef6:	b2c9      	uxtb	r1, r1
 8010ef8:	a801      	add	r0, sp, #4
 8010efa:	f7ff feb3 	bl	8010c64 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8010efe:	4649      	mov	r1, r9
 8010f00:	9801      	ldr	r0, [sp, #4]
 8010f02:	f7ff fe41 	bl	8010b88 <MQTTPacket_encode>
 8010f06:	9b01      	ldr	r3, [sp, #4]
 8010f08:	4403      	add	r3, r0
 8010f0a:	9301      	str	r3, [sp, #4]

	writeInt(&ptr, packetid);
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	a801      	add	r0, sp, #4
 8010f10:	f7ff feae 	bl	8010c70 <writeInt>

	for (i = 0; i < count; ++i)
 8010f14:	2e00      	cmp	r6, #0
 8010f16:	dd11      	ble.n	8010f3c <MQTTSerialize_subscribe+0x80>
 8010f18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f1c:	eb05 0686 	add.w	r6, r5, r6, lsl #2
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8010f20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010f24:	a801      	add	r0, sp, #4
 8010f26:	f7ff fecc 	bl	8010cc2 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8010f2a:	f855 1b04 	ldr.w	r1, [r5], #4
 8010f2e:	b2c9      	uxtb	r1, r1
 8010f30:	a801      	add	r0, sp, #4
 8010f32:	f7ff fe97 	bl	8010c64 <writeChar>
	for (i = 0; i < count; ++i)
 8010f36:	340c      	adds	r4, #12
 8010f38:	42b5      	cmp	r5, r6
 8010f3a:	d1f1      	bne.n	8010f20 <MQTTSerialize_subscribe+0x64>
	}

	rc = ptr - buf;
 8010f3c:	9801      	ldr	r0, [sp, #4]
 8010f3e:	1bc0      	subs	r0, r0, r7
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010f40:	b003      	add	sp, #12
 8010f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8010f46:	f06f 0001 	mvn.w	r0, #1
	return rc;
 8010f4a:	e7f9      	b.n	8010f40 <MQTTSerialize_subscribe+0x84>

08010f4c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8010f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f50:	b082      	sub	sp, #8
 8010f52:	4680      	mov	r8, r0
 8010f54:	460d      	mov	r5, r1
 8010f56:	4614      	mov	r4, r2
 8010f58:	461e      	mov	r6, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
 8010f5a:	9b08      	ldr	r3, [sp, #32]
 8010f5c:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8010f5e:	a801      	add	r0, sp, #4
 8010f60:	f7ff fe7a 	bl	8010c58 <readChar>
	if (header.bits.type != SUBACK)
 8010f64:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8010f68:	2b90      	cmp	r3, #144	; 0x90
 8010f6a:	d003      	beq.n	8010f74 <MQTTDeserialize_suback+0x28>
	int rc = 0;
 8010f6c:	2000      	movs	r0, #0

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 8010f6e:	b002      	add	sp, #8
 8010f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8010f74:	4669      	mov	r1, sp
 8010f76:	9801      	ldr	r0, [sp, #4]
 8010f78:	f7ff fe5a 	bl	8010c30 <MQTTPacket_decodeBuf>
 8010f7c:	9f01      	ldr	r7, [sp, #4]
 8010f7e:	4407      	add	r7, r0
 8010f80:	9701      	str	r7, [sp, #4]
	enddata = curdata + mylen;
 8010f82:	9b00      	ldr	r3, [sp, #0]
	if (enddata - curdata < 2)
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	ddf2      	ble.n	8010f6e <MQTTDeserialize_suback+0x22>
	enddata = curdata + mylen;
 8010f88:	441f      	add	r7, r3
	*packetid = readInt(&curdata);
 8010f8a:	a801      	add	r0, sp, #4
 8010f8c:	f7ff fe5c 	bl	8010c48 <readInt>
 8010f90:	f8a8 0000 	strh.w	r0, [r8]
	*count = 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
 8010f98:	9b01      	ldr	r3, [sp, #4]
 8010f9a:	429f      	cmp	r7, r3
 8010f9c:	d90f      	bls.n	8010fbe <MQTTDeserialize_suback+0x72>
		if (*count > maxcount)
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	dc0e      	bgt.n	8010fc2 <MQTTDeserialize_suback+0x76>
		grantedQoSs[(*count)++] = readChar(&curdata);
 8010fa4:	a801      	add	r0, sp, #4
 8010fa6:	f7ff fe57 	bl	8010c58 <readChar>
 8010faa:	6822      	ldr	r2, [r4, #0]
 8010fac:	1c53      	adds	r3, r2, #1
 8010fae:	6023      	str	r3, [r4, #0]
 8010fb0:	f846 0022 	str.w	r0, [r6, r2, lsl #2]
	while (curdata < enddata)
 8010fb4:	9b01      	ldr	r3, [sp, #4]
 8010fb6:	42bb      	cmp	r3, r7
 8010fb8:	d3f1      	bcc.n	8010f9e <MQTTDeserialize_suback+0x52>
	rc = 1;
 8010fba:	2001      	movs	r0, #1
 8010fbc:	e7d7      	b.n	8010f6e <MQTTDeserialize_suback+0x22>
 8010fbe:	2001      	movs	r0, #1
 8010fc0:	e7d5      	b.n	8010f6e <MQTTDeserialize_suback+0x22>
			rc = -1;
 8010fc2:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 8010fc6:	e7d2      	b.n	8010f6e <MQTTDeserialize_suback+0x22>

08010fc8 <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 8010fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint64_t a, b, ra, rb;

    GET_UINT64_LE( a, x, 0 );
 8010fcc:	79cc      	ldrb	r4, [r1, #7]
 8010fce:	798a      	ldrb	r2, [r1, #6]
 8010fd0:	ea4f 4c02 	mov.w	ip, r2, lsl #16
 8010fd4:	ea4c 6c04 	orr.w	ip, ip, r4, lsl #24
 8010fd8:	780a      	ldrb	r2, [r1, #0]
 8010fda:	794c      	ldrb	r4, [r1, #5]
 8010fdc:	ea4c 2c04 	orr.w	ip, ip, r4, lsl #8
 8010fe0:	790c      	ldrb	r4, [r1, #4]
 8010fe2:	78ce      	ldrb	r6, [r1, #3]
 8010fe4:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8010fe8:	788e      	ldrb	r6, [r1, #2]
 8010fea:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 8010fee:	784e      	ldrb	r6, [r1, #1]
 8010ff0:	ea43 2206 	orr.w	r2, r3, r6, lsl #8
 8010ff4:	ea4c 0e04 	orr.w	lr, ip, r4
    GET_UINT64_LE( b, x, 8 );
 8010ff8:	f891 800f 	ldrb.w	r8, [r1, #15]
 8010ffc:	7b8e      	ldrb	r6, [r1, #14]
 8010ffe:	0434      	lsls	r4, r6, #16
 8011000:	ea44 6408 	orr.w	r4, r4, r8, lsl #24
 8011004:	f891 a008 	ldrb.w	sl, [r1, #8]
 8011008:	f891 800d 	ldrb.w	r8, [r1, #13]
 801100c:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 8011010:	7b0e      	ldrb	r6, [r1, #12]
 8011012:	f891 800b 	ldrb.w	r8, [r1, #11]
 8011016:	ea4a 6a08 	orr.w	sl, sl, r8, lsl #24
 801101a:	f891 800a 	ldrb.w	r8, [r1, #10]
 801101e:	ea4a 4808 	orr.w	r8, sl, r8, lsl #16
 8011022:	f891 a009 	ldrb.w	sl, [r1, #9]
 8011026:	ea48 230a 	orr.w	r3, r8, sl, lsl #8
 801102a:	ea44 0106 	orr.w	r1, r4, r6

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 801102e:	0fcc      	lsrs	r4, r1, #31
 8011030:	00e4      	lsls	r4, r4, #3
 8011032:	f1c4 0408 	rsb	r4, r4, #8
 8011036:	f04f 0c87 	mov.w	ip, #135	; 0x87
 801103a:	fa4c fc04 	asr.w	ip, ip, r4
 801103e:	4666      	mov	r6, ip
 8011040:	17f7      	asrs	r7, r6, #31
 8011042:	1894      	adds	r4, r2, r2
 8011044:	eb4e 040e 	adc.w	r4, lr, lr
 8011048:	ea8c 0242 	eor.w	r2, ip, r2, lsl #1
 801104c:	407c      	eors	r4, r7
    rb = ( a >> 63 ) | ( b << 1 );
 801104e:	18db      	adds	r3, r3, r3
 8011050:	4149      	adcs	r1, r1
 8011052:	ea43 75de 	orr.w	r5, r3, lr, lsr #31

    PUT_UINT64_LE( ra, r, 0 );
 8011056:	0e26      	lsrs	r6, r4, #24
 8011058:	71c6      	strb	r6, [r0, #7]
 801105a:	0c26      	lsrs	r6, r4, #16
 801105c:	7186      	strb	r6, [r0, #6]
 801105e:	0a26      	lsrs	r6, r4, #8
 8011060:	7146      	strb	r6, [r0, #5]
 8011062:	7104      	strb	r4, [r0, #4]
 8011064:	0e14      	lsrs	r4, r2, #24
 8011066:	70c4      	strb	r4, [r0, #3]
 8011068:	0c14      	lsrs	r4, r2, #16
 801106a:	7084      	strb	r4, [r0, #2]
 801106c:	0a14      	lsrs	r4, r2, #8
 801106e:	7044      	strb	r4, [r0, #1]
 8011070:	7002      	strb	r2, [r0, #0]
    PUT_UINT64_LE( rb, r, 8 );
 8011072:	0e0a      	lsrs	r2, r1, #24
 8011074:	73c2      	strb	r2, [r0, #15]
 8011076:	0c0a      	lsrs	r2, r1, #16
 8011078:	7382      	strb	r2, [r0, #14]
 801107a:	0a0a      	lsrs	r2, r1, #8
 801107c:	7342      	strb	r2, [r0, #13]
 801107e:	7301      	strb	r1, [r0, #12]
 8011080:	0e1a      	lsrs	r2, r3, #24
 8011082:	72c2      	strb	r2, [r0, #11]
 8011084:	0c1a      	lsrs	r2, r3, #16
 8011086:	7282      	strb	r2, [r0, #10]
 8011088:	0a1b      	lsrs	r3, r3, #8
 801108a:	7243      	strb	r3, [r0, #9]
 801108c:	7205      	strb	r5, [r0, #8]
}
 801108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011092 <mbedtls_aes_init>:
{
 8011092:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8011094:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011098:	2100      	movs	r1, #0
 801109a:	f019 fa76 	bl	802a58a <memset>
}
 801109e:	bd08      	pop	{r3, pc}

080110a0 <mbedtls_aes_free>:
    if( ctx == NULL )
 80110a0:	b128      	cbz	r0, 80110ae <mbedtls_aes_free+0xe>
{
 80110a2:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80110a4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80110a8:	f009 ff4c 	bl	801af44 <mbedtls_platform_zeroize>
}
 80110ac:	bd08      	pop	{r3, pc}
 80110ae:	4770      	bx	lr

080110b0 <mbedtls_aes_xts_init>:
{
 80110b0:	b510      	push	{r4, lr}
 80110b2:	4604      	mov	r4, r0
    mbedtls_aes_init( &ctx->crypt );
 80110b4:	f7ff ffed 	bl	8011092 <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 80110b8:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80110bc:	f7ff ffe9 	bl	8011092 <mbedtls_aes_init>
}
 80110c0:	bd10      	pop	{r4, pc}

080110c2 <mbedtls_aes_xts_free>:
    if( ctx == NULL )
 80110c2:	b140      	cbz	r0, 80110d6 <mbedtls_aes_xts_free+0x14>
{
 80110c4:	b510      	push	{r4, lr}
 80110c6:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->crypt );
 80110c8:	f7ff ffea 	bl	80110a0 <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 80110cc:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80110d0:	f7ff ffe6 	bl	80110a0 <mbedtls_aes_free>
}
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	4770      	bx	lr

080110d8 <mbedtls_aes_setkey_enc>:
    switch( keybits )
 80110d8:	2ac0      	cmp	r2, #192	; 0xc0
 80110da:	d02b      	beq.n	8011134 <mbedtls_aes_setkey_enc+0x5c>
 80110dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80110e0:	d02b      	beq.n	801113a <mbedtls_aes_setkey_enc+0x62>
 80110e2:	2a80      	cmp	r2, #128	; 0x80
 80110e4:	d002      	beq.n	80110ec <mbedtls_aes_setkey_enc+0x14>
 80110e6:	f06f 001f 	mvn.w	r0, #31
}
 80110ea:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
 80110ec:	230a      	movs	r3, #10
 80110ee:	6003      	str	r3, [r0, #0]
{
 80110f0:	b4f0      	push	{r4, r5, r6, r7}
    ctx->rk = RK = ctx->buf;
 80110f2:	f100 0308 	add.w	r3, r0, #8
 80110f6:	4604      	mov	r4, r0
 80110f8:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80110fc:	0955      	lsrs	r5, r2, #5
 80110fe:	2200      	movs	r2, #0
        GET_UINT32_LE( RK[i], key, i << 2 );
 8011100:	784e      	ldrb	r6, [r1, #1]
 8011102:	788b      	ldrb	r3, [r1, #2]
 8011104:	041b      	lsls	r3, r3, #16
 8011106:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801110a:	780e      	ldrb	r6, [r1, #0]
 801110c:	4333      	orrs	r3, r6
 801110e:	78ce      	ldrb	r6, [r1, #3]
 8011110:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8011114:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8011118:	3201      	adds	r2, #1
 801111a:	3104      	adds	r1, #4
 801111c:	4295      	cmp	r5, r2
 801111e:	d8ef      	bhi.n	8011100 <mbedtls_aes_setkey_enc+0x28>
    switch( ctx->nr )
 8011120:	6803      	ldr	r3, [r0, #0]
 8011122:	2b0c      	cmp	r3, #12
 8011124:	d034      	beq.n	8011190 <mbedtls_aes_setkey_enc+0xb8>
 8011126:	2b0e      	cmp	r3, #14
 8011128:	d060      	beq.n	80111ec <mbedtls_aes_setkey_enc+0x114>
 801112a:	2b0a      	cmp	r3, #10
 801112c:	d008      	beq.n	8011140 <mbedtls_aes_setkey_enc+0x68>
 801112e:	2000      	movs	r0, #0
}
 8011130:	bcf0      	pop	{r4, r5, r6, r7}
 8011132:	4770      	bx	lr
        case 192: ctx->nr = 12; break;
 8011134:	230c      	movs	r3, #12
 8011136:	6003      	str	r3, [r0, #0]
 8011138:	e7da      	b.n	80110f0 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
 801113a:	230e      	movs	r3, #14
 801113c:	6003      	str	r3, [r0, #0]
 801113e:	e7d7      	b.n	80110f0 <mbedtls_aes_setkey_enc+0x18>
 8011140:	4d4c      	ldr	r5, [pc, #304]	; (8011274 <mbedtls_aes_setkey_enc+0x19c>)
 8011142:	f105 0628 	add.w	r6, r5, #40	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8011146:	494c      	ldr	r1, [pc, #304]	; (8011278 <mbedtls_aes_setkey_enc+0x1a0>)
                RK[4]  = RK[0] ^ RCON[i] ^
 8011148:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 801114c:	6942      	ldr	r2, [r0, #20]
 801114e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011152:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8011154:	6887      	ldr	r7, [r0, #8]
 8011156:	407c      	eors	r4, r7
 8011158:	4063      	eors	r3, r4
 801115a:	0e14      	lsrs	r4, r2, #24
 801115c:	5d0c      	ldrb	r4, [r1, r4]
 801115e:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8011162:	b2d4      	uxtb	r4, r2
 8011164:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8011166:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 801116a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801116e:	5d0c      	ldrb	r4, [r1, r4]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8011170:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
                RK[4]  = RK[0] ^ RCON[i] ^
 8011174:	6183      	str	r3, [r0, #24]
                RK[5]  = RK[1] ^ RK[4];
 8011176:	68c4      	ldr	r4, [r0, #12]
 8011178:	4063      	eors	r3, r4
 801117a:	61c3      	str	r3, [r0, #28]
                RK[6]  = RK[2] ^ RK[5];
 801117c:	6904      	ldr	r4, [r0, #16]
 801117e:	4063      	eors	r3, r4
 8011180:	6203      	str	r3, [r0, #32]
                RK[7]  = RK[3] ^ RK[6];
 8011182:	4053      	eors	r3, r2
 8011184:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 10; i++, RK += 4 )
 8011186:	3010      	adds	r0, #16
 8011188:	42b5      	cmp	r5, r6
 801118a:	d1dd      	bne.n	8011148 <mbedtls_aes_setkey_enc+0x70>
    return( 0 );
 801118c:	2000      	movs	r0, #0
 801118e:	e7cf      	b.n	8011130 <mbedtls_aes_setkey_enc+0x58>
 8011190:	4c38      	ldr	r4, [pc, #224]	; (8011274 <mbedtls_aes_setkey_enc+0x19c>)
 8011192:	1f21      	subs	r1, r4, #4
 8011194:	341c      	adds	r4, #28
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8011196:	4a38      	ldr	r2, [pc, #224]	; (8011278 <mbedtls_aes_setkey_enc+0x1a0>)
 8011198:	69c5      	ldr	r5, [r0, #28]
 801119a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801119e:	5cd3      	ldrb	r3, [r2, r3]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80111a0:	6886      	ldr	r6, [r0, #8]
 80111a2:	f851 7f04 	ldr.w	r7, [r1, #4]!
 80111a6:	407e      	eors	r6, r7
 80111a8:	4073      	eors	r3, r6
 80111aa:	0e2e      	lsrs	r6, r5, #24
 80111ac:	5d96      	ldrb	r6, [r2, r6]
 80111ae:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80111b2:	b2ee      	uxtb	r6, r5
 80111b4:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80111b6:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80111ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80111be:	5d96      	ldrb	r6, [r2, r6]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80111c0:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[6]  = RK[0] ^ RCON[i] ^
 80111c4:	6203      	str	r3, [r0, #32]
                RK[7]  = RK[1] ^ RK[6];
 80111c6:	68c6      	ldr	r6, [r0, #12]
 80111c8:	4073      	eors	r3, r6
 80111ca:	6243      	str	r3, [r0, #36]	; 0x24
                RK[8]  = RK[2] ^ RK[7];
 80111cc:	6906      	ldr	r6, [r0, #16]
 80111ce:	4073      	eors	r3, r6
 80111d0:	6283      	str	r3, [r0, #40]	; 0x28
                RK[9]  = RK[3] ^ RK[8];
 80111d2:	6946      	ldr	r6, [r0, #20]
 80111d4:	4073      	eors	r3, r6
 80111d6:	62c3      	str	r3, [r0, #44]	; 0x2c
                RK[10] = RK[4] ^ RK[9];
 80111d8:	6986      	ldr	r6, [r0, #24]
 80111da:	4073      	eors	r3, r6
 80111dc:	6303      	str	r3, [r0, #48]	; 0x30
                RK[11] = RK[5] ^ RK[10];
 80111de:	406b      	eors	r3, r5
 80111e0:	6343      	str	r3, [r0, #52]	; 0x34
            for( i = 0; i < 8; i++, RK += 6 )
 80111e2:	3018      	adds	r0, #24
 80111e4:	42a1      	cmp	r1, r4
 80111e6:	d1d7      	bne.n	8011198 <mbedtls_aes_setkey_enc+0xc0>
    return( 0 );
 80111e8:	2000      	movs	r0, #0
 80111ea:	e7a1      	b.n	8011130 <mbedtls_aes_setkey_enc+0x58>
 80111ec:	4e21      	ldr	r6, [pc, #132]	; (8011274 <mbedtls_aes_setkey_enc+0x19c>)
 80111ee:	1f35      	subs	r5, r6, #4
 80111f0:	3618      	adds	r6, #24
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80111f2:	4921      	ldr	r1, [pc, #132]	; (8011278 <mbedtls_aes_setkey_enc+0x1a0>)
 80111f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80111f6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80111fa:	5ccb      	ldrb	r3, [r1, r3]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80111fc:	6882      	ldr	r2, [r0, #8]
 80111fe:	f855 7f04 	ldr.w	r7, [r5, #4]!
 8011202:	407a      	eors	r2, r7
 8011204:	4053      	eors	r3, r2
 8011206:	0e22      	lsrs	r2, r4, #24
 8011208:	5c8a      	ldrb	r2, [r1, r2]
 801120a:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 801120e:	b2e2      	uxtb	r2, r4
 8011210:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8011212:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8011216:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801121a:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 801121c:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[8]  = RK[0] ^ RCON[i] ^
 8011220:	6283      	str	r3, [r0, #40]	; 0x28
                RK[9]  = RK[1] ^ RK[8];
 8011222:	68c2      	ldr	r2, [r0, #12]
 8011224:	4053      	eors	r3, r2
 8011226:	62c3      	str	r3, [r0, #44]	; 0x2c
                RK[10] = RK[2] ^ RK[9];
 8011228:	6902      	ldr	r2, [r0, #16]
 801122a:	4053      	eors	r3, r2
 801122c:	6303      	str	r3, [r0, #48]	; 0x30
                RK[11] = RK[3] ^ RK[10];
 801122e:	6942      	ldr	r2, [r0, #20]
 8011230:	4053      	eors	r3, r2
 8011232:	6343      	str	r3, [r0, #52]	; 0x34
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8011234:	b2da      	uxtb	r2, r3
 8011236:	5c8a      	ldrb	r2, [r1, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8011238:	6987      	ldr	r7, [r0, #24]
 801123a:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 801123c:	0e1f      	lsrs	r7, r3, #24
 801123e:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8011240:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8011244:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8011248:	5dcf      	ldrb	r7, [r1, r7]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 801124a:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 801124e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011252:	5ccb      	ldrb	r3, [r1, r3]
 8011254:	ea82 4303 	eor.w	r3, r2, r3, lsl #16
                RK[12] = RK[4] ^
 8011258:	6383      	str	r3, [r0, #56]	; 0x38
                RK[13] = RK[5] ^ RK[12];
 801125a:	69c2      	ldr	r2, [r0, #28]
 801125c:	4053      	eors	r3, r2
 801125e:	63c3      	str	r3, [r0, #60]	; 0x3c
                RK[14] = RK[6] ^ RK[13];
 8011260:	6a02      	ldr	r2, [r0, #32]
 8011262:	4053      	eors	r3, r2
 8011264:	6403      	str	r3, [r0, #64]	; 0x40
                RK[15] = RK[7] ^ RK[14];
 8011266:	4063      	eors	r3, r4
 8011268:	6443      	str	r3, [r0, #68]	; 0x44
            for( i = 0; i < 7; i++, RK += 8 )
 801126a:	3020      	adds	r0, #32
 801126c:	42b5      	cmp	r5, r6
 801126e:	d1c1      	bne.n	80111f4 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
 8011270:	2000      	movs	r0, #0
 8011272:	e75d      	b.n	8011130 <mbedtls_aes_setkey_enc+0x58>
 8011274:	0802ff7c 	.word	0x0802ff7c
 8011278:	0802ee7c 	.word	0x0802ee7c

0801127c <mbedtls_aes_setkey_dec>:
{
 801127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011280:	b0cb      	sub	sp, #300	; 0x12c
 8011282:	4606      	mov	r6, r0
 8011284:	460c      	mov	r4, r1
 8011286:	4615      	mov	r5, r2
    mbedtls_aes_init( &cty );
 8011288:	a804      	add	r0, sp, #16
 801128a:	f7ff ff02 	bl	8011092 <mbedtls_aes_init>
    ctx->rk = RK = ctx->buf;
 801128e:	f106 0308 	add.w	r3, r6, #8
 8011292:	6073      	str	r3, [r6, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8011294:	462a      	mov	r2, r5
 8011296:	4621      	mov	r1, r4
 8011298:	a804      	add	r0, sp, #16
 801129a:	f7ff ff1d 	bl	80110d8 <mbedtls_aes_setkey_enc>
 801129e:	9002      	str	r0, [sp, #8]
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d169      	bne.n	8011378 <mbedtls_aes_setkey_dec+0xfc>
    ctx->nr = cty.nr;
 80112a4:	9904      	ldr	r1, [sp, #16]
 80112a6:	9103      	str	r1, [sp, #12]
 80112a8:	6031      	str	r1, [r6, #0]
    SK = cty.rk + cty.nr * 4;
 80112aa:	010a      	lsls	r2, r1, #4
 80112ac:	9b05      	ldr	r3, [sp, #20]
 80112ae:	eb03 1b01 	add.w	fp, r3, r1, lsl #4
    *RK++ = *SK++;
 80112b2:	589b      	ldr	r3, [r3, r2]
 80112b4:	60b3      	str	r3, [r6, #8]
    *RK++ = *SK++;
 80112b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80112ba:	60f3      	str	r3, [r6, #12]
    *RK++ = *SK++;
 80112bc:	f8db 3008 	ldr.w	r3, [fp, #8]
 80112c0:	6133      	str	r3, [r6, #16]
    *RK++ = *SK++;
 80112c2:	f106 0318 	add.w	r3, r6, #24
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80112cc:	6173      	str	r3, [r6, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80112ce:	f101 39ff 	add.w	r9, r1, #4294967295
 80112d2:	f1ab 0b10 	sub.w	fp, fp, #16
 80112d6:	f1b9 0f00 	cmp.w	r9, #0
 80112da:	dd40      	ble.n	801135e <mbedtls_aes_setkey_dec+0xe2>
 80112dc:	3628      	adds	r6, #40	; 0x28
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80112de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8011390 <mbedtls_aes_setkey_dec+0x114>
 80112e2:	4929      	ldr	r1, [pc, #164]	; (8011388 <mbedtls_aes_setkey_dec+0x10c>)
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80112e4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 8011394 <mbedtls_aes_setkey_dec+0x118>
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80112e8:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8011398 <mbedtls_aes_setkey_dec+0x11c>
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80112ec:	4f27      	ldr	r7, [pc, #156]	; (801138c <mbedtls_aes_setkey_dec+0x110>)
 80112ee:	4658      	mov	r0, fp
 80112f0:	e005      	b.n	80112fe <mbedtls_aes_setkey_dec+0x82>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80112f2:	f1a4 0010 	sub.w	r0, r4, #16
 80112f6:	3610      	adds	r6, #16
 80112f8:	f1b9 0901 	subs.w	r9, r9, #1
 80112fc:	d023      	beq.n	8011346 <mbedtls_aes_setkey_dec+0xca>
 80112fe:	f1a6 0210 	sub.w	r2, r6, #16
        for( j = 0; j < 4; j++, SK++ )
 8011302:	4604      	mov	r4, r0
 8011304:	3804      	subs	r0, #4
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8011306:	f850 3f04 	ldr.w	r3, [r0, #4]!
 801130a:	b2dd      	uxtb	r5, r3
 801130c:	f811 a005 	ldrb.w	sl, [r1, r5]
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8011310:	0e1d      	lsrs	r5, r3, #24
 8011312:	5d4d      	ldrb	r5, [r1, r5]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8011314:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8011318:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 801131c:	ea8a 0505 	eor.w	r5, sl, r5
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8011320:	f3c3 2a07 	ubfx	sl, r3, #8, #8
 8011324:	f811 a00a 	ldrb.w	sl, [r1, sl]
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8011328:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 801132c:	ea85 050a 	eor.w	r5, r5, sl
 8011330:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011334:	5ccb      	ldrb	r3, [r1, r3]
 8011336:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801133a:	406b      	eors	r3, r5
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 801133c:	f842 3b04 	str.w	r3, [r2], #4
        for( j = 0; j < 4; j++, SK++ )
 8011340:	42b2      	cmp	r2, r6
 8011342:	d1e0      	bne.n	8011306 <mbedtls_aes_setkey_dec+0x8a>
 8011344:	e7d5      	b.n	80112f2 <mbedtls_aes_setkey_dec+0x76>
 8011346:	9a03      	ldr	r2, [sp, #12]
 8011348:	ebc2 7302 	rsb	r3, r2, r2, lsl #28
 801134c:	eb0b 1b03 	add.w	fp, fp, r3, lsl #4
 8011350:	f10b 0b10 	add.w	fp, fp, #16
 8011354:	1e53      	subs	r3, r2, #1
 8011356:	9a01      	ldr	r2, [sp, #4]
 8011358:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801135c:	9301      	str	r3, [sp, #4]
    *RK++ = *SK++;
 801135e:	f8db 3000 	ldr.w	r3, [fp]
 8011362:	9a01      	ldr	r2, [sp, #4]
 8011364:	6013      	str	r3, [r2, #0]
    *RK++ = *SK++;
 8011366:	f8db 3004 	ldr.w	r3, [fp, #4]
 801136a:	6053      	str	r3, [r2, #4]
    *RK++ = *SK++;
 801136c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8011370:	6093      	str	r3, [r2, #8]
    *RK++ = *SK++;
 8011372:	f8db 300c 	ldr.w	r3, [fp, #12]
 8011376:	60d3      	str	r3, [r2, #12]
    mbedtls_aes_free( &cty );
 8011378:	a804      	add	r0, sp, #16
 801137a:	f7ff fe91 	bl	80110a0 <mbedtls_aes_free>
}
 801137e:	9802      	ldr	r0, [sp, #8]
 8011380:	b04b      	add	sp, #300	; 0x12c
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011386:	bf00      	nop
 8011388:	0802ee7c 	.word	0x0802ee7c
 801138c:	080308a4 	.word	0x080308a4
 8011390:	080300a4 	.word	0x080300a4
 8011394:	08030ca4 	.word	0x08030ca4
 8011398:	080304a4 	.word	0x080304a4

0801139c <mbedtls_aes_xts_setkey_enc>:
{
 801139c:	b570      	push	{r4, r5, r6, lr}
 801139e:	4604      	mov	r4, r0
 80113a0:	460d      	mov	r5, r1
    const unsigned int half_keybits = keybits / 2;
 80113a2:	0856      	lsrs	r6, r2, #1
    const unsigned int half_keybytes = half_keybits / 8;
 80113a4:	0911      	lsrs	r1, r2, #4
    switch( keybits )
 80113a6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80113aa:	d002      	beq.n	80113b2 <mbedtls_aes_xts_setkey_enc+0x16>
 80113ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80113b0:	d10d      	bne.n	80113ce <mbedtls_aes_xts_setkey_enc+0x32>
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 80113b2:	4632      	mov	r2, r6
 80113b4:	4429      	add	r1, r5
 80113b6:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80113ba:	f7ff fe8d 	bl	80110d8 <mbedtls_aes_setkey_enc>
    if( ret != 0 )
 80113be:	b100      	cbz	r0, 80113c2 <mbedtls_aes_xts_setkey_enc+0x26>
}
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 80113c2:	4632      	mov	r2, r6
 80113c4:	4629      	mov	r1, r5
 80113c6:	4620      	mov	r0, r4
 80113c8:	f7ff fe86 	bl	80110d8 <mbedtls_aes_setkey_enc>
 80113cc:	e7f8      	b.n	80113c0 <mbedtls_aes_xts_setkey_enc+0x24>
    switch( keybits )
 80113ce:	f06f 001f 	mvn.w	r0, #31
 80113d2:	e7f5      	b.n	80113c0 <mbedtls_aes_xts_setkey_enc+0x24>

080113d4 <mbedtls_aes_xts_setkey_dec>:
{
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
    const unsigned int half_keybits = keybits / 2;
 80113da:	0856      	lsrs	r6, r2, #1
    const unsigned int half_keybytes = half_keybits / 8;
 80113dc:	0911      	lsrs	r1, r2, #4
    switch( keybits )
 80113de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80113e2:	d002      	beq.n	80113ea <mbedtls_aes_xts_setkey_dec+0x16>
 80113e4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80113e8:	d10d      	bne.n	8011406 <mbedtls_aes_xts_setkey_dec+0x32>
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 80113ea:	4632      	mov	r2, r6
 80113ec:	4429      	add	r1, r5
 80113ee:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80113f2:	f7ff fe71 	bl	80110d8 <mbedtls_aes_setkey_enc>
    if( ret != 0 )
 80113f6:	b100      	cbz	r0, 80113fa <mbedtls_aes_xts_setkey_dec+0x26>
}
 80113f8:	bd70      	pop	{r4, r5, r6, pc}
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 80113fa:	4632      	mov	r2, r6
 80113fc:	4629      	mov	r1, r5
 80113fe:	4620      	mov	r0, r4
 8011400:	f7ff ff3c 	bl	801127c <mbedtls_aes_setkey_dec>
 8011404:	e7f8      	b.n	80113f8 <mbedtls_aes_xts_setkey_dec+0x24>
    switch( keybits )
 8011406:	f06f 001f 	mvn.w	r0, #31
 801140a:	e7f5      	b.n	80113f8 <mbedtls_aes_xts_setkey_dec+0x24>

0801140c <mbedtls_internal_aes_encrypt>:
{
 801140c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	b085      	sub	sp, #20
 8011412:	9202      	str	r2, [sp, #8]
    RK = ctx->rk;
 8011414:	6844      	ldr	r4, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8011416:	784b      	ldrb	r3, [r1, #1]
 8011418:	f891 9002 	ldrb.w	r9, [r1, #2]
 801141c:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8011420:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
 8011424:	780b      	ldrb	r3, [r1, #0]
 8011426:	ea49 0903 	orr.w	r9, r9, r3
 801142a:	78cb      	ldrb	r3, [r1, #3]
 801142c:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
 8011430:	6823      	ldr	r3, [r4, #0]
 8011432:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8011436:	794a      	ldrb	r2, [r1, #5]
 8011438:	798b      	ldrb	r3, [r1, #6]
 801143a:	041b      	lsls	r3, r3, #16
 801143c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011440:	790a      	ldrb	r2, [r1, #4]
 8011442:	4313      	orrs	r3, r2
 8011444:	79ca      	ldrb	r2, [r1, #7]
 8011446:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801144a:	6862      	ldr	r2, [r4, #4]
 801144c:	4053      	eors	r3, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 801144e:	7a4d      	ldrb	r5, [r1, #9]
 8011450:	7a8a      	ldrb	r2, [r1, #10]
 8011452:	0412      	lsls	r2, r2, #16
 8011454:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8011458:	7a0d      	ldrb	r5, [r1, #8]
 801145a:	432a      	orrs	r2, r5
 801145c:	7acd      	ldrb	r5, [r1, #11]
 801145e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8011462:	68a5      	ldr	r5, [r4, #8]
 8011464:	406a      	eors	r2, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8011466:	7b4d      	ldrb	r5, [r1, #13]
 8011468:	7b8f      	ldrb	r7, [r1, #14]
 801146a:	043f      	lsls	r7, r7, #16
 801146c:	ea47 2705 	orr.w	r7, r7, r5, lsl #8
 8011470:	7b0d      	ldrb	r5, [r1, #12]
 8011472:	432f      	orrs	r7, r5
 8011474:	7bc9      	ldrb	r1, [r1, #15]
 8011476:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
 801147a:	f104 0110 	add.w	r1, r4, #16
 801147e:	9101      	str	r1, [sp, #4]
 8011480:	68e1      	ldr	r1, [r4, #12]
 8011482:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8011484:	6801      	ldr	r1, [r0, #0]
 8011486:	1049      	asrs	r1, r1, #1
 8011488:	9103      	str	r1, [sp, #12]
 801148a:	f101 3aff 	add.w	sl, r1, #4294967295
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 801148e:	6921      	ldr	r1, [r4, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8011490:	f1ba 0f00 	cmp.w	sl, #0
 8011494:	f340 80c2 	ble.w	801161c <mbedtls_internal_aes_encrypt+0x210>
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8011498:	f8df e32c 	ldr.w	lr, [pc, #812]	; 80117c8 <mbedtls_internal_aes_encrypt+0x3bc>
 801149c:	f8df c320 	ldr.w	ip, [pc, #800]	; 80117c0 <mbedtls_internal_aes_encrypt+0x3b4>
 80114a0:	4ec5      	ldr	r6, [pc, #788]	; (80117b8 <mbedtls_internal_aes_encrypt+0x3ac>)
 80114a2:	4dc6      	ldr	r5, [pc, #792]	; (80117bc <mbedtls_internal_aes_encrypt+0x3b0>)
 80114a4:	fa5f f189 	uxtb.w	r1, r9
 80114a8:	f85e 0021 	ldr.w	r0, [lr, r1, lsl #2]
 80114ac:	6921      	ldr	r1, [r4, #16]
 80114ae:	4041      	eors	r1, r0
 80114b0:	0e38      	lsrs	r0, r7, #24
 80114b2:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80114b6:	4041      	eors	r1, r0
 80114b8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80114bc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80114c0:	4041      	eors	r1, r0
 80114c2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80114c6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80114ca:	4041      	eors	r1, r0
 80114cc:	9100      	str	r1, [sp, #0]
 80114ce:	b2d8      	uxtb	r0, r3
 80114d0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80114d4:	6961      	ldr	r1, [r4, #20]
 80114d6:	ea80 0801 	eor.w	r8, r0, r1
 80114da:	ea4f 6019 	mov.w	r0, r9, lsr #24
 80114de:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80114e2:	ea88 0800 	eor.w	r8, r8, r0
 80114e6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80114ea:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80114ee:	ea88 0800 	eor.w	r8, r8, r0
 80114f2:	f3c7 4007 	ubfx	r0, r7, #16, #8
 80114f6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80114fa:	ea88 0800 	eor.w	r8, r8, r0
 80114fe:	b2d0      	uxtb	r0, r2
 8011500:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8011504:	69a1      	ldr	r1, [r4, #24]
 8011506:	4048      	eors	r0, r1
 8011508:	ea4f 6b13 	mov.w	fp, r3, lsr #24
 801150c:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 8011510:	ea80 000b 	eor.w	r0, r0, fp
 8011514:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8011518:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801151c:	ea80 000b 	eor.w	r0, r0, fp
 8011520:	f3c9 4b07 	ubfx	fp, r9, #16, #8
 8011524:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8011528:	ea80 000b 	eor.w	r0, r0, fp
 801152c:	b2ff      	uxtb	r7, r7
 801152e:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8011532:	69e1      	ldr	r1, [r4, #28]
 8011534:	404f      	eors	r7, r1
 8011536:	0e12      	lsrs	r2, r2, #24
 8011538:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801153c:	4057      	eors	r7, r2
 801153e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8011542:	f856 2029 	ldr.w	r2, [r6, r9, lsl #2]
 8011546:	4057      	eors	r7, r2
 8011548:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801154c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8011550:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8011552:	9900      	ldr	r1, [sp, #0]
 8011554:	b2cb      	uxtb	r3, r1
 8011556:	0e3a      	lsrs	r2, r7, #24
 8011558:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 801155c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8011560:	ea83 0902 	eor.w	r9, r3, r2
 8011564:	6a23      	ldr	r3, [r4, #32]
 8011566:	ea89 0903 	eor.w	r9, r9, r3
 801156a:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801156e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011572:	ea89 0903 	eor.w	r9, r9, r3
 8011576:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801157a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801157e:	ea89 0903 	eor.w	r9, r9, r3
 8011582:	fa5f f388 	uxtb.w	r3, r8
 8011586:	0e0a      	lsrs	r2, r1, #24
 8011588:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 801158c:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8011590:	405a      	eors	r2, r3
 8011592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011594:	4053      	eors	r3, r2
 8011596:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801159a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801159e:	4053      	eors	r3, r2
 80115a0:	f3c7 4207 	ubfx	r2, r7, #16, #8
 80115a4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80115a8:	4053      	eors	r3, r2
 80115aa:	b2c2      	uxtb	r2, r0
 80115ac:	ea4f 6b18 	mov.w	fp, r8, lsr #24
 80115b0:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80115b4:	f85c b02b 	ldr.w	fp, [ip, fp, lsl #2]
 80115b8:	ea82 0b0b 	eor.w	fp, r2, fp
 80115bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80115be:	ea8b 0202 	eor.w	r2, fp, r2
 80115c2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80115c6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 80115ca:	ea82 020b 	eor.w	r2, r2, fp
 80115ce:	9200      	str	r2, [sp, #0]
 80115d0:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80115d4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80115d8:	9a00      	ldr	r2, [sp, #0]
 80115da:	ea82 020b 	eor.w	r2, r2, fp
 80115de:	b2ff      	uxtb	r7, r7
 80115e0:	0e00      	lsrs	r0, r0, #24
 80115e2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80115e6:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80115ea:	4078      	eors	r0, r7
 80115ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80115ee:	4047      	eors	r7, r0
 80115f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80115f4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80115f8:	404f      	eors	r7, r1
 80115fa:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80115fe:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
 8011602:	404f      	eors	r7, r1
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8011604:	3420      	adds	r4, #32
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8011606:	6921      	ldr	r1, [r4, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8011608:	f1ba 0a01 	subs.w	sl, sl, #1
 801160c:	f47f af4a 	bne.w	80114a4 <mbedtls_internal_aes_encrypt+0x98>
 8011610:	9803      	ldr	r0, [sp, #12]
 8011612:	3801      	subs	r0, #1
 8011614:	9c01      	ldr	r4, [sp, #4]
 8011616:	eb04 1040 	add.w	r0, r4, r0, lsl #5
 801161a:	9001      	str	r0, [sp, #4]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 801161c:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80117c8 <mbedtls_internal_aes_encrypt+0x3bc>
 8011620:	fa5f f089 	uxtb.w	r0, r9
 8011624:	4e66      	ldr	r6, [pc, #408]	; (80117c0 <mbedtls_internal_aes_encrypt+0x3b4>)
 8011626:	0e3c      	lsrs	r4, r7, #24
 8011628:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 801162c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8011630:	4060      	eors	r0, r4
 8011632:	4041      	eors	r1, r0
 8011634:	4d60      	ldr	r5, [pc, #384]	; (80117b8 <mbedtls_internal_aes_encrypt+0x3ac>)
 8011636:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801163a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801163e:	4041      	eors	r1, r0
 8011640:	4c5e      	ldr	r4, [pc, #376]	; (80117bc <mbedtls_internal_aes_encrypt+0x3b0>)
 8011642:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8011646:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801164a:	4041      	eors	r1, r0
 801164c:	b2d8      	uxtb	r0, r3
 801164e:	ea4f 6e19 	mov.w	lr, r9, lsr #24
 8011652:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8011656:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 801165a:	ea80 0e0e 	eor.w	lr, r0, lr
 801165e:	9801      	ldr	r0, [sp, #4]
 8011660:	6840      	ldr	r0, [r0, #4]
 8011662:	ea8e 0e00 	eor.w	lr, lr, r0
 8011666:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801166a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801166e:	ea8e 0e00 	eor.w	lr, lr, r0
 8011672:	f3c7 4007 	ubfx	r0, r7, #16, #8
 8011676:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801167a:	ea8e 0e00 	eor.w	lr, lr, r0
 801167e:	b2d0      	uxtb	r0, r2
 8011680:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8011684:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 8011688:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 801168c:	ea80 0808 	eor.w	r8, r0, r8
 8011690:	9801      	ldr	r0, [sp, #4]
 8011692:	6880      	ldr	r0, [r0, #8]
 8011694:	ea88 0000 	eor.w	r0, r8, r0
 8011698:	f3c7 2807 	ubfx	r8, r7, #8, #8
 801169c:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 80116a0:	ea80 0008 	eor.w	r0, r0, r8
 80116a4:	f3c9 4807 	ubfx	r8, r9, #16, #8
 80116a8:	f854 8028 	ldr.w	r8, [r4, r8, lsl #2]
 80116ac:	ea80 0008 	eor.w	r0, r0, r8
 80116b0:	b2ff      	uxtb	r7, r7
 80116b2:	0e12      	lsrs	r2, r2, #24
 80116b4:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80116b8:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80116bc:	407e      	eors	r6, r7
 80116be:	9f01      	ldr	r7, [sp, #4]
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	4072      	eors	r2, r6
 80116c4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80116c8:	f855 5029 	ldr.w	r5, [r5, r9, lsl #2]
 80116cc:	406a      	eors	r2, r5
 80116ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80116d2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80116d6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80116d8:	4b3a      	ldr	r3, [pc, #232]	; (80117c4 <mbedtls_internal_aes_encrypt+0x3b8>)
 80116da:	b2cc      	uxtb	r4, r1
 80116dc:	5d1e      	ldrb	r6, [r3, r4]
    X0 = *RK++ ^ \
 80116de:	693c      	ldr	r4, [r7, #16]
 80116e0:	4066      	eors	r6, r4
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80116e2:	0e14      	lsrs	r4, r2, #24
 80116e4:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80116e6:	ea86 6604 	eor.w	r6, r6, r4, lsl #24
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80116ea:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80116ee:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80116f0:	ea86 2604 	eor.w	r6, r6, r4, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80116f4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80116f8:	5d1c      	ldrb	r4, [r3, r4]
    X0 = *RK++ ^ \
 80116fa:	ea86 4604 	eor.w	r6, r6, r4, lsl #16
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80116fe:	fa5f f48e 	uxtb.w	r4, lr
 8011702:	5d1d      	ldrb	r5, [r3, r4]
    X1 = *RK++ ^ \
 8011704:	697c      	ldr	r4, [r7, #20]
 8011706:	406c      	eors	r4, r5
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8011708:	0e0d      	lsrs	r5, r1, #24
 801170a:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 801170c:	ea84 6405 	eor.w	r4, r4, r5, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8011710:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011714:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8011716:	ea84 2405 	eor.w	r4, r4, r5, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 801171a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801171e:	5d5d      	ldrb	r5, [r3, r5]
    X1 = *RK++ ^ \
 8011720:	ea84 4405 	eor.w	r4, r4, r5, lsl #16
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8011724:	b2c5      	uxtb	r5, r0
 8011726:	5d5f      	ldrb	r7, [r3, r5]
    X2 = *RK++ ^ \
 8011728:	9d01      	ldr	r5, [sp, #4]
 801172a:	69ad      	ldr	r5, [r5, #24]
 801172c:	407d      	eors	r5, r7
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 801172e:	ea4f 671e 	mov.w	r7, lr, lsr #24
 8011732:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8011734:	ea85 6507 	eor.w	r5, r5, r7, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8011738:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801173c:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 801173e:	ea85 2507 	eor.w	r5, r5, r7, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8011742:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8011746:	5ddf      	ldrb	r7, [r3, r7]
    X2 = *RK++ ^ \
 8011748:	ea85 4507 	eor.w	r5, r5, r7, lsl #16
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 801174c:	b2d2      	uxtb	r2, r2
 801174e:	5c9a      	ldrb	r2, [r3, r2]
    X3 = *RK++ ^ \
 8011750:	9f01      	ldr	r7, [sp, #4]
 8011752:	69ff      	ldr	r7, [r7, #28]
 8011754:	407a      	eors	r2, r7
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8011756:	0e00      	lsrs	r0, r0, #24
 8011758:	5c18      	ldrb	r0, [r3, r0]
    X3 = *RK++ ^ \
 801175a:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 801175e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011762:	5c59      	ldrb	r1, [r3, r1]
    X3 = *RK++ ^ \
 8011764:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8011768:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 801176c:	f813 300e 	ldrb.w	r3, [r3, lr]
    X3 = *RK++ ^ \
 8011770:	ea82 4303 	eor.w	r3, r2, r3, lsl #16
    PUT_UINT32_LE( X0, output,  0 );
 8011774:	9902      	ldr	r1, [sp, #8]
 8011776:	700e      	strb	r6, [r1, #0]
 8011778:	0a32      	lsrs	r2, r6, #8
 801177a:	704a      	strb	r2, [r1, #1]
 801177c:	0c32      	lsrs	r2, r6, #16
 801177e:	708a      	strb	r2, [r1, #2]
 8011780:	0e36      	lsrs	r6, r6, #24
 8011782:	70ce      	strb	r6, [r1, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8011784:	710c      	strb	r4, [r1, #4]
 8011786:	0a22      	lsrs	r2, r4, #8
 8011788:	714a      	strb	r2, [r1, #5]
 801178a:	0c22      	lsrs	r2, r4, #16
 801178c:	718a      	strb	r2, [r1, #6]
 801178e:	0e24      	lsrs	r4, r4, #24
 8011790:	71cc      	strb	r4, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8011792:	720d      	strb	r5, [r1, #8]
 8011794:	0a2a      	lsrs	r2, r5, #8
 8011796:	724a      	strb	r2, [r1, #9]
 8011798:	0c2a      	lsrs	r2, r5, #16
 801179a:	728a      	strb	r2, [r1, #10]
 801179c:	0e2d      	lsrs	r5, r5, #24
 801179e:	72cd      	strb	r5, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80117a0:	730b      	strb	r3, [r1, #12]
 80117a2:	0a1a      	lsrs	r2, r3, #8
 80117a4:	734a      	strb	r2, [r1, #13]
 80117a6:	0c1a      	lsrs	r2, r3, #16
 80117a8:	738a      	strb	r2, [r1, #14]
 80117aa:	0e1b      	lsrs	r3, r3, #24
 80117ac:	73cb      	strb	r3, [r1, #15]
}
 80117ae:	2000      	movs	r0, #0
 80117b0:	b005      	add	sp, #20
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b6:	bf00      	nop
 80117b8:	0802f37c 	.word	0x0802f37c
 80117bc:	0802f77c 	.word	0x0802f77c
 80117c0:	0802fb7c 	.word	0x0802fb7c
 80117c4:	0802ee7c 	.word	0x0802ee7c
 80117c8:	0802ef7c 	.word	0x0802ef7c

080117cc <mbedtls_internal_aes_decrypt>:
{
 80117cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d0:	b085      	sub	sp, #20
 80117d2:	4604      	mov	r4, r0
 80117d4:	9202      	str	r2, [sp, #8]
    RK = ctx->rk;
 80117d6:	6840      	ldr	r0, [r0, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80117d8:	784b      	ldrb	r3, [r1, #1]
 80117da:	f891 a002 	ldrb.w	sl, [r1, #2]
 80117de:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 80117e2:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
 80117e6:	780b      	ldrb	r3, [r1, #0]
 80117e8:	ea4a 0a03 	orr.w	sl, sl, r3
 80117ec:	78cb      	ldrb	r3, [r1, #3]
 80117ee:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80117f2:	6803      	ldr	r3, [r0, #0]
 80117f4:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80117f8:	794a      	ldrb	r2, [r1, #5]
 80117fa:	798b      	ldrb	r3, [r1, #6]
 80117fc:	041b      	lsls	r3, r3, #16
 80117fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011802:	790a      	ldrb	r2, [r1, #4]
 8011804:	4313      	orrs	r3, r2
 8011806:	79ca      	ldrb	r2, [r1, #7]
 8011808:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801180c:	6842      	ldr	r2, [r0, #4]
 801180e:	4053      	eors	r3, r2
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8011810:	7a4a      	ldrb	r2, [r1, #9]
 8011812:	f891 800a 	ldrb.w	r8, [r1, #10]
 8011816:	ea4f 4808 	mov.w	r8, r8, lsl #16
 801181a:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
 801181e:	7a0a      	ldrb	r2, [r1, #8]
 8011820:	ea48 0802 	orr.w	r8, r8, r2
 8011824:	7aca      	ldrb	r2, [r1, #11]
 8011826:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 801182a:	6887      	ldr	r7, [r0, #8]
 801182c:	ea88 0807 	eor.w	r8, r8, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8011830:	7b4a      	ldrb	r2, [r1, #13]
 8011832:	7b8f      	ldrb	r7, [r1, #14]
 8011834:	043f      	lsls	r7, r7, #16
 8011836:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
 801183a:	7b0a      	ldrb	r2, [r1, #12]
 801183c:	4317      	orrs	r7, r2
 801183e:	7bca      	ldrb	r2, [r1, #15]
 8011840:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8011844:	f100 0210 	add.w	r2, r0, #16
 8011848:	9201      	str	r2, [sp, #4]
 801184a:	68c2      	ldr	r2, [r0, #12]
 801184c:	4057      	eors	r7, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801184e:	6822      	ldr	r2, [r4, #0]
 8011850:	1052      	asrs	r2, r2, #1
 8011852:	9203      	str	r2, [sp, #12]
 8011854:	f102 3bff 	add.w	fp, r2, #4294967295
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8011858:	6902      	ldr	r2, [r0, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 801185a:	f1bb 0f00 	cmp.w	fp, #0
 801185e:	f340 80c2 	ble.w	80119e6 <mbedtls_internal_aes_decrypt+0x21a>
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8011862:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8011b90 <mbedtls_internal_aes_decrypt+0x3c4>
 8011866:	4ec7      	ldr	r6, [pc, #796]	; (8011b84 <mbedtls_internal_aes_decrypt+0x3b8>)
 8011868:	4dc7      	ldr	r5, [pc, #796]	; (8011b88 <mbedtls_internal_aes_decrypt+0x3bc>)
 801186a:	4cc8      	ldr	r4, [pc, #800]	; (8011b8c <mbedtls_internal_aes_decrypt+0x3c0>)
 801186c:	fa5f f28a 	uxtb.w	r2, sl
 8011870:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8011874:	6902      	ldr	r2, [r0, #16]
 8011876:	ea81 0902 	eor.w	r9, r1, r2
 801187a:	0e1a      	lsrs	r2, r3, #24
 801187c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8011880:	ea89 0902 	eor.w	r9, r9, r2
 8011884:	f3c7 2207 	ubfx	r2, r7, #8, #8
 8011888:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801188c:	ea89 0902 	eor.w	r9, r9, r2
 8011890:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8011894:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011898:	ea89 0902 	eor.w	r9, r9, r2
 801189c:	b2da      	uxtb	r2, r3
 801189e:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80118a2:	6942      	ldr	r2, [r0, #20]
 80118a4:	ea81 0e02 	eor.w	lr, r1, r2
 80118a8:	ea4f 6218 	mov.w	r2, r8, lsr #24
 80118ac:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80118b0:	ea8e 0e02 	eor.w	lr, lr, r2
 80118b4:	f3ca 2207 	ubfx	r2, sl, #8, #8
 80118b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80118bc:	ea8e 0e02 	eor.w	lr, lr, r2
 80118c0:	f3c7 4207 	ubfx	r2, r7, #16, #8
 80118c4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118c8:	ea8e 0e02 	eor.w	lr, lr, r2
 80118cc:	fa5f f288 	uxtb.w	r2, r8
 80118d0:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80118d4:	6982      	ldr	r2, [r0, #24]
 80118d6:	404a      	eors	r2, r1
 80118d8:	0e39      	lsrs	r1, r7, #24
 80118da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80118de:	404a      	eors	r2, r1
 80118e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80118e4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80118e8:	404a      	eors	r2, r1
 80118ea:	f3ca 4107 	ubfx	r1, sl, #16, #8
 80118ee:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80118f2:	404a      	eors	r2, r1
 80118f4:	b2ff      	uxtb	r7, r7
 80118f6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80118fa:	69c1      	ldr	r1, [r0, #28]
 80118fc:	4079      	eors	r1, r7
 80118fe:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8011902:	f856 702a 	ldr.w	r7, [r6, sl, lsl #2]
 8011906:	4079      	eors	r1, r7
 8011908:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801190c:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 8011910:	4079      	eors	r1, r7
 8011912:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011916:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801191a:	4059      	eors	r1, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 801191c:	fa5f f389 	uxtb.w	r3, r9
 8011920:	ea4f 671e 	mov.w	r7, lr, lsr #24
 8011924:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8011928:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801192c:	ea83 0a07 	eor.w	sl, r3, r7
 8011930:	6a03      	ldr	r3, [r0, #32]
 8011932:	ea8a 0a03 	eor.w	sl, sl, r3
 8011936:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801193a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801193e:	ea8a 0a03 	eor.w	sl, sl, r3
 8011942:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011946:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801194a:	ea8a 0a03 	eor.w	sl, sl, r3
 801194e:	fa5f f38e 	uxtb.w	r3, lr
 8011952:	0e17      	lsrs	r7, r2, #24
 8011954:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8011958:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801195c:	405f      	eors	r7, r3
 801195e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011960:	407b      	eors	r3, r7
 8011962:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8011966:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 801196a:	407b      	eors	r3, r7
 801196c:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8011970:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8011974:	407b      	eors	r3, r7
 8011976:	b2d7      	uxtb	r7, r2
 8011978:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801197c:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8011980:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8011984:	ea87 0808 	eor.w	r8, r7, r8
 8011988:	6a87      	ldr	r7, [r0, #40]	; 0x28
 801198a:	ea88 0807 	eor.w	r8, r8, r7
 801198e:	f3ce 2707 	ubfx	r7, lr, #8, #8
 8011992:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8011996:	ea88 0807 	eor.w	r8, r8, r7
 801199a:	f3c9 4707 	ubfx	r7, r9, #16, #8
 801199e:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 80119a2:	ea88 0807 	eor.w	r8, r8, r7
 80119a6:	b2c9      	uxtb	r1, r1
 80119a8:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80119ac:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80119b0:	f856 1029 	ldr.w	r1, [r6, r9, lsl #2]
 80119b4:	404f      	eors	r7, r1
 80119b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80119b8:	404f      	eors	r7, r1
 80119ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80119be:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 80119c2:	404f      	eors	r7, r1
 80119c4:	f3ce 4e07 	ubfx	lr, lr, #16, #8
 80119c8:	f854 202e 	ldr.w	r2, [r4, lr, lsl #2]
 80119cc:	4057      	eors	r7, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80119ce:	3020      	adds	r0, #32
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80119d0:	6902      	ldr	r2, [r0, #16]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80119d2:	f1bb 0b01 	subs.w	fp, fp, #1
 80119d6:	f47f af49 	bne.w	801186c <mbedtls_internal_aes_decrypt+0xa0>
 80119da:	9903      	ldr	r1, [sp, #12]
 80119dc:	3901      	subs	r1, #1
 80119de:	9801      	ldr	r0, [sp, #4]
 80119e0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80119e4:	9101      	str	r1, [sp, #4]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80119e6:	4e6a      	ldr	r6, [pc, #424]	; (8011b90 <mbedtls_internal_aes_decrypt+0x3c4>)
 80119e8:	fa5f f18a 	uxtb.w	r1, sl
 80119ec:	4d65      	ldr	r5, [pc, #404]	; (8011b84 <mbedtls_internal_aes_decrypt+0x3b8>)
 80119ee:	0e18      	lsrs	r0, r3, #24
 80119f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80119f4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80119f8:	4041      	eors	r1, r0
 80119fa:	404a      	eors	r2, r1
 80119fc:	4c62      	ldr	r4, [pc, #392]	; (8011b88 <mbedtls_internal_aes_decrypt+0x3bc>)
 80119fe:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8011a02:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8011a06:	404a      	eors	r2, r1
 8011a08:	4860      	ldr	r0, [pc, #384]	; (8011b8c <mbedtls_internal_aes_decrypt+0x3c0>)
 8011a0a:	f3c8 4107 	ubfx	r1, r8, #16, #8
 8011a0e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8011a12:	404a      	eors	r2, r1
 8011a14:	b2d9      	uxtb	r1, r3
 8011a16:	ea4f 6c18 	mov.w	ip, r8, lsr #24
 8011a1a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8011a1e:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8011a22:	ea81 0c0c 	eor.w	ip, r1, ip
 8011a26:	9901      	ldr	r1, [sp, #4]
 8011a28:	6849      	ldr	r1, [r1, #4]
 8011a2a:	ea8c 0c01 	eor.w	ip, ip, r1
 8011a2e:	f3ca 2107 	ubfx	r1, sl, #8, #8
 8011a32:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8011a36:	ea8c 0c01 	eor.w	ip, ip, r1
 8011a3a:	f3c7 4107 	ubfx	r1, r7, #16, #8
 8011a3e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8011a42:	ea8c 0c01 	eor.w	ip, ip, r1
 8011a46:	fa5f f188 	uxtb.w	r1, r8
 8011a4a:	ea4f 6e17 	mov.w	lr, r7, lsr #24
 8011a4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8011a52:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8011a56:	ea81 0e0e 	eor.w	lr, r1, lr
 8011a5a:	9901      	ldr	r1, [sp, #4]
 8011a5c:	6889      	ldr	r1, [r1, #8]
 8011a5e:	ea8e 0101 	eor.w	r1, lr, r1
 8011a62:	f3c3 2e07 	ubfx	lr, r3, #8, #8
 8011a66:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8011a6a:	ea81 010e 	eor.w	r1, r1, lr
 8011a6e:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 8011a72:	f850 e02e 	ldr.w	lr, [r0, lr, lsl #2]
 8011a76:	ea81 010e 	eor.w	r1, r1, lr
 8011a7a:	b2ff      	uxtb	r7, r7
 8011a7c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8011a80:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
 8011a84:	f855 502a 	ldr.w	r5, [r5, sl, lsl #2]
 8011a88:	406e      	eors	r6, r5
 8011a8a:	9f01      	ldr	r7, [sp, #4]
 8011a8c:	68fd      	ldr	r5, [r7, #12]
 8011a8e:	4075      	eors	r5, r6
 8011a90:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8011a94:	f854 4028 	ldr.w	r4, [r4, r8, lsl #2]
 8011a98:	4065      	eors	r5, r4
 8011a9a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011a9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011aa2:	405d      	eors	r5, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8011aa4:	4b3b      	ldr	r3, [pc, #236]	; (8011b94 <mbedtls_internal_aes_decrypt+0x3c8>)
 8011aa6:	b2d0      	uxtb	r0, r2
 8011aa8:	5c1e      	ldrb	r6, [r3, r0]
    X0 = *RK++ ^ \
 8011aaa:	6938      	ldr	r0, [r7, #16]
 8011aac:	4046      	eors	r6, r0
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8011aae:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8011ab2:	5c18      	ldrb	r0, [r3, r0]
    X0 = *RK++ ^ \
 8011ab4:	ea86 6600 	eor.w	r6, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8011ab8:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8011abc:	5c18      	ldrb	r0, [r3, r0]
    X0 = *RK++ ^ \
 8011abe:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8011ac2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8011ac6:	5c18      	ldrb	r0, [r3, r0]
    X0 = *RK++ ^ \
 8011ac8:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8011acc:	fa5f f08c 	uxtb.w	r0, ip
 8011ad0:	5c1c      	ldrb	r4, [r3, r0]
    X1 = *RK++ ^ \
 8011ad2:	6978      	ldr	r0, [r7, #20]
 8011ad4:	4044      	eors	r4, r0
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8011ad6:	0e08      	lsrs	r0, r1, #24
 8011ad8:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
 8011ada:	ea84 6400 	eor.w	r4, r4, r0, lsl #24
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8011ade:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8011ae2:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
 8011ae4:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8011ae8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8011aec:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
 8011aee:	ea84 4400 	eor.w	r4, r4, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8011af2:	b2c8      	uxtb	r0, r1
 8011af4:	5c1f      	ldrb	r7, [r3, r0]
    X2 = *RK++ ^ \
 8011af6:	9801      	ldr	r0, [sp, #4]
 8011af8:	6980      	ldr	r0, [r0, #24]
 8011afa:	4047      	eors	r7, r0
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8011afc:	0e28      	lsrs	r0, r5, #24
 8011afe:	5c18      	ldrb	r0, [r3, r0]
    X2 = *RK++ ^ \
 8011b00:	ea87 6700 	eor.w	r7, r7, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8011b04:	f3cc 2007 	ubfx	r0, ip, #8, #8
 8011b08:	5c18      	ldrb	r0, [r3, r0]
    X2 = *RK++ ^ \
 8011b0a:	ea87 2700 	eor.w	r7, r7, r0, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8011b0e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8011b12:	5c18      	ldrb	r0, [r3, r0]
    X2 = *RK++ ^ \
 8011b14:	ea87 4700 	eor.w	r7, r7, r0, lsl #16
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8011b18:	b2ed      	uxtb	r5, r5
 8011b1a:	5d58      	ldrb	r0, [r3, r5]
    X3 = *RK++ ^ \
 8011b1c:	9d01      	ldr	r5, [sp, #4]
 8011b1e:	69ed      	ldr	r5, [r5, #28]
 8011b20:	4068      	eors	r0, r5
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8011b22:	0e12      	lsrs	r2, r2, #24
 8011b24:	5c9a      	ldrb	r2, [r3, r2]
    X3 = *RK++ ^ \
 8011b26:	ea80 6202 	eor.w	r2, r0, r2, lsl #24
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8011b2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011b2e:	5c59      	ldrb	r1, [r3, r1]
    X3 = *RK++ ^ \
 8011b30:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8011b34:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8011b38:	f813 300c 	ldrb.w	r3, [r3, ip]
    X3 = *RK++ ^ \
 8011b3c:	ea82 4303 	eor.w	r3, r2, r3, lsl #16
    PUT_UINT32_LE( X0, output,  0 );
 8011b40:	9902      	ldr	r1, [sp, #8]
 8011b42:	700e      	strb	r6, [r1, #0]
 8011b44:	0a32      	lsrs	r2, r6, #8
 8011b46:	704a      	strb	r2, [r1, #1]
 8011b48:	0c32      	lsrs	r2, r6, #16
 8011b4a:	708a      	strb	r2, [r1, #2]
 8011b4c:	0e36      	lsrs	r6, r6, #24
 8011b4e:	70ce      	strb	r6, [r1, #3]
    PUT_UINT32_LE( X1, output,  4 );
 8011b50:	710c      	strb	r4, [r1, #4]
 8011b52:	0a22      	lsrs	r2, r4, #8
 8011b54:	714a      	strb	r2, [r1, #5]
 8011b56:	0c22      	lsrs	r2, r4, #16
 8011b58:	718a      	strb	r2, [r1, #6]
 8011b5a:	0e24      	lsrs	r4, r4, #24
 8011b5c:	71cc      	strb	r4, [r1, #7]
    PUT_UINT32_LE( X2, output,  8 );
 8011b5e:	720f      	strb	r7, [r1, #8]
 8011b60:	0a3a      	lsrs	r2, r7, #8
 8011b62:	724a      	strb	r2, [r1, #9]
 8011b64:	0c3a      	lsrs	r2, r7, #16
 8011b66:	728a      	strb	r2, [r1, #10]
 8011b68:	0e3f      	lsrs	r7, r7, #24
 8011b6a:	72cf      	strb	r7, [r1, #11]
    PUT_UINT32_LE( X3, output, 12 );
 8011b6c:	730b      	strb	r3, [r1, #12]
 8011b6e:	0a1a      	lsrs	r2, r3, #8
 8011b70:	734a      	strb	r2, [r1, #13]
 8011b72:	0c1a      	lsrs	r2, r3, #16
 8011b74:	738a      	strb	r2, [r1, #14]
 8011b76:	0e1b      	lsrs	r3, r3, #24
 8011b78:	73cb      	strb	r3, [r1, #15]
}
 8011b7a:	2000      	movs	r0, #0
 8011b7c:	b005      	add	sp, #20
 8011b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b82:	bf00      	nop
 8011b84:	08030ca4 	.word	0x08030ca4
 8011b88:	080304a4 	.word	0x080304a4
 8011b8c:	080308a4 	.word	0x080308a4
 8011b90:	080300a4 	.word	0x080300a4
 8011b94:	0802ffa4 	.word	0x0802ffa4

08011b98 <mbedtls_aes_crypt_ecb>:
{
 8011b98:	b510      	push	{r4, lr}
 8011b9a:	460c      	mov	r4, r1
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 8011ba0:	2c01      	cmp	r4, #1
 8011ba2:	d002      	beq.n	8011baa <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8011ba4:	f7ff fe12 	bl	80117cc <mbedtls_internal_aes_decrypt>
}
 8011ba8:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8011baa:	f7ff fc2f 	bl	801140c <mbedtls_internal_aes_encrypt>
 8011bae:	e7fb      	b.n	8011ba8 <mbedtls_aes_crypt_ecb+0x10>

08011bb0 <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	b08f      	sub	sp, #60	; 0x3c
 8011bb6:	468a      	mov	sl, r1
 8011bb8:	4614      	mov	r4, r2
 8011bba:	461a      	mov	r2, r3
 8011bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011bc0:	9f19      	ldr	r7, [sp, #100]	; 0x64
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8011bc2:	f1a4 0110 	sub.w	r1, r4, #16
 8011bc6:	4b57      	ldr	r3, [pc, #348]	; (8011d24 <mbedtls_aes_crypt_xts+0x174>)
 8011bc8:	4299      	cmp	r1, r3
 8011bca:	f200 80a7 	bhi.w	8011d1c <mbedtls_aes_crypt_xts+0x16c>
 8011bce:	4683      	mov	fp, r0
    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8011bd0:	ab0a      	add	r3, sp, #40	; 0x28
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8011bd8:	f7ff ffde 	bl	8011b98 <mbedtls_aes_crypt_ecb>
                                 data_unit, tweak );
    if( ret != 0 )
 8011bdc:	9000      	str	r0, [sp, #0]
 8011bde:	2800      	cmp	r0, #0
 8011be0:	f040 8096 	bne.w	8011d10 <mbedtls_aes_crypt_xts+0x160>
    size_t leftover = length % 16;
 8011be4:	f004 030f 	and.w	r3, r4, #15
 8011be8:	9301      	str	r3, [sp, #4]
    size_t blocks = length / 16;
 8011bea:	0924      	lsrs	r4, r4, #4
        return( ret );

    while( blocks-- )
 8011bec:	1e66      	subs	r6, r4, #1
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 8011bee:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8011bf2:	ad0e      	add	r5, sp, #56	; 0x38
 8011bf4:	e033      	b.n	8011c5e <mbedtls_aes_crypt_xts+0xae>
            mbedtls_gf128mul_x_ble( tweak, tweak );
        }

        for( i = 0; i < 16; i++ )
 8011bf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8011bfa:	aa0a      	add	r2, sp, #40	; 0x28
 8011bfc:	f10d 0407 	add.w	r4, sp, #7

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );

        output += 16;
        input += 16;
 8011c00:	4621      	mov	r1, r4
            tmp[i] = input[i] ^ tweak[i];
 8011c02:	f812 3b01 	ldrb.w	r3, [r2], #1
 8011c06:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8011c0a:	ea83 030c 	eor.w	r3, r3, ip
 8011c0e:	f801 3f01 	strb.w	r3, [r1, #1]!
        for( i = 0; i < 16; i++ )
 8011c12:	42aa      	cmp	r2, r5
 8011c14:	d1f5      	bne.n	8011c02 <mbedtls_aes_crypt_xts+0x52>
        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8011c16:	ab02      	add	r3, sp, #8
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4651      	mov	r1, sl
 8011c1c:	4658      	mov	r0, fp
 8011c1e:	f7ff ffbb 	bl	8011b98 <mbedtls_aes_crypt_ecb>
        if( ret != 0 )
 8011c22:	9000      	str	r0, [sp, #0]
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d173      	bne.n	8011d10 <mbedtls_aes_crypt_xts+0x160>
 8011c28:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8011c2c:	1e7a      	subs	r2, r7, #1
 8011c2e:	f10d 0c17 	add.w	ip, sp, #23
            output[i] = tmp[i] ^ tweak[i];
 8011c32:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011c36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c3a:	4043      	eors	r3, r0
 8011c3c:	f802 3f01 	strb.w	r3, [r2, #1]!
        for( i = 0; i < 16; i++ )
 8011c40:	4564      	cmp	r4, ip
 8011c42:	d1f6      	bne.n	8011c32 <mbedtls_aes_crypt_xts+0x82>
        mbedtls_gf128mul_x_ble( tweak, tweak );
 8011c44:	4649      	mov	r1, r9
 8011c46:	4648      	mov	r0, r9
 8011c48:	f7ff f9be 	bl	8010fc8 <mbedtls_gf128mul_x_ble>
        output += 16;
 8011c4c:	f107 0310 	add.w	r3, r7, #16
        input += 16;
 8011c50:	f108 0110 	add.w	r1, r8, #16
    while( blocks-- )
 8011c54:	1e72      	subs	r2, r6, #1
 8011c56:	b196      	cbz	r6, 8011c7e <mbedtls_aes_crypt_xts+0xce>
 8011c58:	4616      	mov	r6, r2
        output += 16;
 8011c5a:	461f      	mov	r7, r3
        input += 16;
 8011c5c:	4688      	mov	r8, r1
        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 8011c5e:	9b01      	ldr	r3, [sp, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d0c8      	beq.n	8011bf6 <mbedtls_aes_crypt_xts+0x46>
 8011c64:	ea5a 0306 	orrs.w	r3, sl, r6
 8011c68:	d1c5      	bne.n	8011bf6 <mbedtls_aes_crypt_xts+0x46>
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 8011c6a:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8011c6e:	ac06      	add	r4, sp, #24
 8011c70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 8011c74:	4649      	mov	r1, r9
 8011c76:	4648      	mov	r0, r9
 8011c78:	f7ff f9a6 	bl	8010fc8 <mbedtls_gf128mul_x_ble>
 8011c7c:	e7bb      	b.n	8011bf6 <mbedtls_aes_crypt_xts+0x46>
    }

    if( leftover )
 8011c7e:	9a01      	ldr	r2, [sp, #4]
 8011c80:	2a00      	cmp	r2, #0
 8011c82:	d045      	beq.n	8011d10 <mbedtls_aes_crypt_xts+0x160>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8011c84:	f1ba 0f00 	cmp.w	sl, #0
 8011c88:	d046      	beq.n	8011d18 <mbedtls_aes_crypt_xts+0x168>
 8011c8a:	a80a      	add	r0, sp, #40	; 0x28

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8011c8c:	f107 020f 	add.w	r2, r7, #15
 8011c90:	f108 080f 	add.w	r8, r8, #15
 8011c94:	1e44      	subs	r4, r0, #1
 8011c96:	9901      	ldr	r1, [sp, #4]
 8011c98:	f101 39ff 	add.w	r9, r1, #4294967295
 8011c9c:	eb09 0e03 	add.w	lr, r9, r3
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8011ca0:	ae02      	add	r6, sp, #8
 8011ca2:	4625      	mov	r5, r4
        {
            output[i] = prev_output[i];
 8011ca4:	f812 1c0f 	ldrb.w	r1, [r2, #-15]
 8011ca8:	f802 1f01 	strb.w	r1, [r2, #1]!
            tmp[i] = input[i] ^ t[i];
 8011cac:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8011cb0:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 8011cb4:	ea81 010c 	eor.w	r1, r1, ip
 8011cb8:	f806 1b01 	strb.w	r1, [r6], #1
        for( i = 0; i < leftover; i++ )
 8011cbc:	4572      	cmp	r2, lr
 8011cbe:	d1f1      	bne.n	8011ca4 <mbedtls_aes_crypt_xts+0xf4>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	f1a2 0511 	sub.w	r5, r2, #17
 8011cc6:	441d      	add	r5, r3
 8011cc8:	4448      	add	r0, r9
 8011cca:	a90e      	add	r1, sp, #56	; 0x38
 8011ccc:	188a      	adds	r2, r1, r2
 8011cce:	3a31      	subs	r2, #49	; 0x31
 8011cd0:	3b01      	subs	r3, #1
            tmp[i] = prev_output[i] ^ t[i];
 8011cd2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8011cd6:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8011cda:	4071      	eors	r1, r6
 8011cdc:	f802 1f01 	strb.w	r1, [r2, #1]!
        for( ; i < 16; i++ )
 8011ce0:	429d      	cmp	r5, r3
 8011ce2:	d1f6      	bne.n	8011cd2 <mbedtls_aes_crypt_xts+0x122>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8011ce4:	ab02      	add	r3, sp, #8
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	4651      	mov	r1, sl
 8011cea:	4658      	mov	r0, fp
 8011cec:	f7ff ff54 	bl	8011b98 <mbedtls_aes_crypt_ecb>
        if( ret != 0 )
 8011cf0:	9000      	str	r0, [sp, #0]
 8011cf2:	b968      	cbnz	r0, 8011d10 <mbedtls_aes_crypt_xts+0x160>
 8011cf4:	f10d 0207 	add.w	r2, sp, #7
 8011cf8:	3f01      	subs	r7, #1
 8011cfa:	f10d 0017 	add.w	r0, sp, #23
            return ret;

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
            prev_output[i] = tmp[i] ^ t[i];
 8011cfe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011d02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011d06:	404b      	eors	r3, r1
 8011d08:	f807 3f01 	strb.w	r3, [r7, #1]!
        for( i = 0; i < 16; i++ )
 8011d0c:	4282      	cmp	r2, r0
 8011d0e:	d1f6      	bne.n	8011cfe <mbedtls_aes_crypt_xts+0x14e>
    }

    return( 0 );
}
 8011d10:	9800      	ldr	r0, [sp, #0]
 8011d12:	b00f      	add	sp, #60	; 0x3c
 8011d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8011d18:	a806      	add	r0, sp, #24
 8011d1a:	e7b7      	b.n	8011c8c <mbedtls_aes_crypt_xts+0xdc>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8011d1c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8011d20:	9300      	str	r3, [sp, #0]
 8011d22:	e7f5      	b.n	8011d10 <mbedtls_aes_crypt_xts+0x160>
 8011d24:	00fffff0 	.word	0x00fffff0

08011d28 <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8011d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011d2e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8011d30:	6814      	ldr	r4, [r2, #0]

    if( n > 15 )
 8011d32:	2c0f      	cmp	r4, #15
 8011d34:	d825      	bhi.n	8011d82 <mbedtls_aes_crypt_ofb+0x5a>
 8011d36:	4681      	mov	r9, r0
 8011d38:	4693      	mov	fp, r2
 8011d3a:	461f      	mov	r7, r3
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );

    while( length-- )
 8011d3c:	b1d9      	cbz	r1, 8011d76 <mbedtls_aes_crypt_ofb+0x4e>
 8011d3e:	eb05 0801 	add.w	r8, r5, r1
    {
        if( n == 0 )
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8011d42:	f04f 0a01 	mov.w	sl, #1
 8011d46:	e00a      	b.n	8011d5e <mbedtls_aes_crypt_ofb+0x36>
            if( ret != 0 )
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 8011d48:	5d3b      	ldrb	r3, [r7, r4]
 8011d4a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8011d4e:	4053      	eors	r3, r2
 8011d50:	f806 3b01 	strb.w	r3, [r6], #1

        n = ( n + 1 ) & 0x0F;
 8011d54:	3401      	adds	r4, #1
 8011d56:	f004 040f 	and.w	r4, r4, #15
    while( length-- )
 8011d5a:	45a8      	cmp	r8, r5
 8011d5c:	d00b      	beq.n	8011d76 <mbedtls_aes_crypt_ofb+0x4e>
        if( n == 0 )
 8011d5e:	2c00      	cmp	r4, #0
 8011d60:	d1f2      	bne.n	8011d48 <mbedtls_aes_crypt_ofb+0x20>
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8011d62:	463b      	mov	r3, r7
 8011d64:	463a      	mov	r2, r7
 8011d66:	4651      	mov	r1, sl
 8011d68:	4648      	mov	r0, r9
 8011d6a:	f7ff ff15 	bl	8011b98 <mbedtls_aes_crypt_ecb>
            if( ret != 0 )
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d0e9      	beq.n	8011d48 <mbedtls_aes_crypt_ofb+0x20>
 8011d74:	e002      	b.n	8011d7c <mbedtls_aes_crypt_ofb+0x54>
    }

    *iv_off = n;
 8011d76:	f8cb 4000 	str.w	r4, [fp]
 8011d7a:	2300      	movs	r3, #0

exit:
    return( ret );
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8011d82:	f06f 0320 	mvn.w	r3, #32
 8011d86:	e7f9      	b.n	8011d7c <mbedtls_aes_crypt_ofb+0x54>

08011d88 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8011d88:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8011d8a:	6803      	ldr	r3, [r0, #0]
 8011d8c:	1acd      	subs	r5, r1, r3
 8011d8e:	2d00      	cmp	r5, #0
 8011d90:	dd4d      	ble.n	8011e2e <mbedtls_asn1_get_len+0xa6>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
 8011d92:	781c      	ldrb	r4, [r3, #0]
 8011d94:	f993 6000 	ldrsb.w	r6, [r3]
 8011d98:	2e00      	cmp	r6, #0
 8011d9a:	db0d      	blt.n	8011db8 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
 8011d9c:	1c5c      	adds	r4, r3, #1
 8011d9e:	6004      	str	r4, [r0, #0]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8011da4:	6803      	ldr	r3, [r0, #0]
 8011da6:	1ac9      	subs	r1, r1, r3
 8011da8:	6813      	ldr	r3, [r2, #0]
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011daa:	428b      	cmp	r3, r1
 8011dac:	bf94      	ite	ls
 8011dae:	2000      	movls	r0, #0
 8011db0:	f06f 005f 	mvnhi.w	r0, #95	; 0x5f

    return( 0 );
}
 8011db4:	bc70      	pop	{r4, r5, r6}
 8011db6:	4770      	bx	lr
        switch( **p & 0x7F )
 8011db8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8011dbc:	3c01      	subs	r4, #1
 8011dbe:	2c03      	cmp	r4, #3
 8011dc0:	d838      	bhi.n	8011e34 <mbedtls_asn1_get_len+0xac>
 8011dc2:	e8df f004 	tbb	[pc, r4]
 8011dc6:	0a02      	.short	0x0a02
 8011dc8:	2315      	.short	0x2315
            if( ( end - *p ) < 2 )
 8011dca:	2d01      	cmp	r5, #1
 8011dcc:	dd35      	ble.n	8011e3a <mbedtls_asn1_get_len+0xb2>
            *len = (*p)[1];
 8011dce:	785b      	ldrb	r3, [r3, #1]
 8011dd0:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 8011dd2:	6803      	ldr	r3, [r0, #0]
 8011dd4:	3302      	adds	r3, #2
 8011dd6:	6003      	str	r3, [r0, #0]
            break;
 8011dd8:	e7e4      	b.n	8011da4 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
 8011dda:	2d02      	cmp	r5, #2
 8011ddc:	dd30      	ble.n	8011e40 <mbedtls_asn1_get_len+0xb8>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8011dde:	785c      	ldrb	r4, [r3, #1]
 8011de0:	789b      	ldrb	r3, [r3, #2]
 8011de2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8011de6:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8011de8:	6803      	ldr	r3, [r0, #0]
 8011dea:	3303      	adds	r3, #3
 8011dec:	6003      	str	r3, [r0, #0]
            break;
 8011dee:	e7d9      	b.n	8011da4 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 4 )
 8011df0:	2d03      	cmp	r5, #3
 8011df2:	dd28      	ble.n	8011e46 <mbedtls_asn1_get_len+0xbe>
            *len = ( (size_t)(*p)[1] << 16 ) |
 8011df4:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8011df6:	789c      	ldrb	r4, [r3, #2]
 8011df8:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 8011dfa:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8011dfe:	78db      	ldrb	r3, [r3, #3]
 8011e00:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
 8011e02:	6013      	str	r3, [r2, #0]
            (*p) += 4;
 8011e04:	6803      	ldr	r3, [r0, #0]
 8011e06:	3304      	adds	r3, #4
 8011e08:	6003      	str	r3, [r0, #0]
            break;
 8011e0a:	e7cb      	b.n	8011da4 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 5 )
 8011e0c:	2d04      	cmp	r5, #4
 8011e0e:	dd1d      	ble.n	8011e4c <mbedtls_asn1_get_len+0xc4>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8011e10:	785d      	ldrb	r5, [r3, #1]
 8011e12:	789c      	ldrb	r4, [r3, #2]
 8011e14:	0424      	lsls	r4, r4, #16
 8011e16:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8011e1a:	791d      	ldrb	r5, [r3, #4]
 8011e1c:	432c      	orrs	r4, r5
 8011e1e:	78db      	ldrb	r3, [r3, #3]
 8011e20:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 8011e24:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 8011e26:	6803      	ldr	r3, [r0, #0]
 8011e28:	3305      	adds	r3, #5
 8011e2a:	6003      	str	r3, [r0, #0]
            break;
 8011e2c:	e7ba      	b.n	8011da4 <mbedtls_asn1_get_len+0x1c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e2e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e32:	e7bf      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>
    if( ( **p & 0x80 ) == 0 )
 8011e34:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8011e38:	e7bc      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e3a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e3e:	e7b9      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e40:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e44:	e7b6      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e46:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e4a:	e7b3      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e4c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e50:	e7b0      	b.n	8011db4 <mbedtls_asn1_get_len+0x2c>

08011e52 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8011e52:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 8011e54:	6804      	ldr	r4, [r0, #0]
 8011e56:	1b0d      	subs	r5, r1, r4
 8011e58:	2d00      	cmp	r5, #0
 8011e5a:	dd07      	ble.n	8011e6c <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8011e5c:	7825      	ldrb	r5, [r4, #0]
 8011e5e:	429d      	cmp	r5, r3
 8011e60:	d107      	bne.n	8011e72 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8011e62:	3401      	adds	r4, #1
 8011e64:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
 8011e66:	f7ff ff8f 	bl	8011d88 <mbedtls_asn1_get_len>
}
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011e6c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8011e70:	e7fb      	b.n	8011e6a <mbedtls_asn1_get_tag+0x18>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8011e72:	f06f 0061 	mvn.w	r0, #97	; 0x61
 8011e76:	e7f8      	b.n	8011e6a <mbedtls_asn1_get_tag+0x18>

08011e78 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8011e78:	b530      	push	{r4, r5, lr}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8011e80:	2301      	movs	r3, #1
 8011e82:	aa01      	add	r2, sp, #4
 8011e84:	f7ff ffe5 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011e88:	b958      	cbnz	r0, 8011ea2 <mbedtls_asn1_get_bool+0x2a>
        return( ret );

    if( len != 1 )
 8011e8a:	9b01      	ldr	r3, [sp, #4]
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d10a      	bne.n	8011ea6 <mbedtls_asn1_get_bool+0x2e>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 8011e90:	6823      	ldr	r3, [r4, #0]
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	3b00      	subs	r3, #0
 8011e96:	bf18      	it	ne
 8011e98:	2301      	movne	r3, #1
 8011e9a:	602b      	str	r3, [r5, #0]
    (*p)++;
 8011e9c:	6823      	ldr	r3, [r4, #0]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8011ea2:	b003      	add	sp, #12
 8011ea4:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8011ea6:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8011eaa:	e7fa      	b.n	8011ea2 <mbedtls_asn1_get_bool+0x2a>

08011eac <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8011eac:	b530      	push	{r4, r5, lr}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8011eb4:	2302      	movs	r3, #2
 8011eb6:	aa01      	add	r2, sp, #4
 8011eb8:	f7ff ffcb 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011ebc:	b9c8      	cbnz	r0, 8011ef2 <mbedtls_asn1_get_int+0x46>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d817      	bhi.n	8011ef6 <mbedtls_asn1_get_int+0x4a>
 8011ec6:	6822      	ldr	r2, [r4, #0]
 8011ec8:	f992 2000 	ldrsb.w	r2, [r2]
 8011ecc:	2a00      	cmp	r2, #0
 8011ece:	db15      	blt.n	8011efc <mbedtls_asn1_get_int+0x50>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	602a      	str	r2, [r5, #0]

    while( len-- > 0 )
 8011ed4:	9301      	str	r3, [sp, #4]
    {
        *val = ( *val << 8 ) | **p;
 8011ed6:	682a      	ldr	r2, [r5, #0]
 8011ed8:	6823      	ldr	r3, [r4, #0]
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011ee0:	602b      	str	r3, [r5, #0]
        (*p)++;
 8011ee2:	6823      	ldr	r3, [r4, #0]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	6023      	str	r3, [r4, #0]
    while( len-- > 0 )
 8011ee8:	9b01      	ldr	r3, [sp, #4]
 8011eea:	1e5a      	subs	r2, r3, #1
 8011eec:	9201      	str	r2, [sp, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d1f1      	bne.n	8011ed6 <mbedtls_asn1_get_int+0x2a>
    }

    return( 0 );
}
 8011ef2:	b003      	add	sp, #12
 8011ef4:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8011ef6:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8011efa:	e7fa      	b.n	8011ef2 <mbedtls_asn1_get_int+0x46>
 8011efc:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8011f00:	e7f7      	b.n	8011ef2 <mbedtls_asn1_get_int+0x46>

08011f02 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8011f02:	b530      	push	{r4, r5, lr}
 8011f04:	b083      	sub	sp, #12
 8011f06:	4604      	mov	r4, r0
 8011f08:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	aa01      	add	r2, sp, #4
 8011f0e:	f7ff ffa0 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011f12:	b108      	cbz	r0, 8011f18 <mbedtls_asn1_get_mpi+0x16>
    ret = mbedtls_mpi_read_binary( X, *p, len );

    *p += len;

    return( ret );
}
 8011f14:	b003      	add	sp, #12
 8011f16:	bd30      	pop	{r4, r5, pc}
    ret = mbedtls_mpi_read_binary( X, *p, len );
 8011f18:	9a01      	ldr	r2, [sp, #4]
 8011f1a:	6821      	ldr	r1, [r4, #0]
 8011f1c:	4628      	mov	r0, r5
 8011f1e:	f000 fce0 	bl	80128e2 <mbedtls_mpi_read_binary>
    *p += len;
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	9a01      	ldr	r2, [sp, #4]
 8011f26:	4413      	add	r3, r2
 8011f28:	6023      	str	r3, [r4, #0]
    return( ret );
 8011f2a:	e7f3      	b.n	8011f14 <mbedtls_asn1_get_mpi+0x12>

08011f2c <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	4605      	mov	r5, r0
 8011f30:	460e      	mov	r6, r1
 8011f32:	4614      	mov	r4, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8011f34:	2303      	movs	r3, #3
 8011f36:	f7ff ff8c 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	b9a0      	cbnz	r0, 8011f68 <mbedtls_asn1_get_bitstring+0x3c>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	b1a3      	cbz	r3, 8011f6c <mbedtls_asn1_get_bitstring+0x40>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8011f42:	3b01      	subs	r3, #1
 8011f44:	6023      	str	r3, [r4, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8011f46:	682b      	ldr	r3, [r5, #0]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	7123      	strb	r3, [r4, #4]
    if( bs->unused_bits > 7 )
 8011f4c:	2b07      	cmp	r3, #7
 8011f4e:	d810      	bhi.n	8011f72 <mbedtls_asn1_get_bitstring+0x46>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	3301      	adds	r3, #1
 8011f54:	602b      	str	r3, [r5, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8011f56:	60a3      	str	r3, [r4, #8]
    *p += bs->len;
 8011f58:	6821      	ldr	r1, [r4, #0]
 8011f5a:	440b      	add	r3, r1
 8011f5c:	602b      	str	r3, [r5, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8011f5e:	42b3      	cmp	r3, r6
 8011f60:	bf0c      	ite	eq
 8011f62:	4602      	moveq	r2, r0
 8011f64:	f06f 0265 	mvnne.w	r2, #101	; 0x65

    return( 0 );
}
 8011f68:	4610      	mov	r0, r2
 8011f6a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8011f6c:	f06f 025f 	mvn.w	r2, #95	; 0x5f
 8011f70:	e7fa      	b.n	8011f68 <mbedtls_asn1_get_bitstring+0x3c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8011f72:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8011f76:	e7f7      	b.n	8011f68 <mbedtls_asn1_get_bitstring+0x3c>

08011f78 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	4614      	mov	r4, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8011f7e:	2303      	movs	r3, #3
 8011f80:	f7ff ff67 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011f84:	4603      	mov	r3, r0
 8011f86:	b968      	cbnz	r0, 8011fa4 <mbedtls_asn1_get_bitstring_null+0x2c>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8011f88:	6822      	ldr	r2, [r4, #0]
 8011f8a:	1e51      	subs	r1, r2, #1
 8011f8c:	6021      	str	r1, [r4, #0]
 8011f8e:	2a01      	cmp	r2, #1
 8011f90:	d90a      	bls.n	8011fa8 <mbedtls_asn1_get_bitstring_null+0x30>
 8011f92:	682a      	ldr	r2, [r5, #0]
 8011f94:	1c51      	adds	r1, r2, #1
 8011f96:	6029      	str	r1, [r5, #0]
 8011f98:	7812      	ldrb	r2, [r2, #0]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8011f9a:	2a00      	cmp	r2, #0
 8011f9c:	bf0c      	ite	eq
 8011f9e:	4603      	moveq	r3, r0
 8011fa0:	f06f 0367 	mvnne.w	r3, #103	; 0x67

    return( 0 );
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8011fa8:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8011fac:	e7fa      	b.n	8011fa4 <mbedtls_asn1_get_bitstring_null+0x2c>

08011fae <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8011fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	460e      	mov	r6, r1
 8011fb8:	4615      	mov	r5, r2
 8011fba:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8011fbc:	2330      	movs	r3, #48	; 0x30
 8011fbe:	aa01      	add	r2, sp, #4
 8011fc0:	f7ff ff47 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011fc4:	4681      	mov	r9, r0
 8011fc6:	bb60      	cbnz	r0, 8012022 <mbedtls_asn1_get_sequence_of+0x74>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	9a01      	ldr	r2, [sp, #4]
 8011fcc:	4413      	add	r3, r2
 8011fce:	429e      	cmp	r6, r3
 8011fd0:	d12b      	bne.n	801202a <mbedtls_asn1_get_sequence_of+0x7c>
        *p += buf->len;

        /* Allocate and assign next pointer */
        if( *p < end )
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8011fd2:	f04f 0b10 	mov.w	fp, #16
 8011fd6:	f04f 0a01 	mov.w	sl, #1
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8011fda:	f105 0804 	add.w	r8, r5, #4
    while( *p < end )
 8011fde:	6823      	ldr	r3, [r4, #0]
 8011fe0:	42b3      	cmp	r3, r6
 8011fe2:	d217      	bcs.n	8012014 <mbedtls_asn1_get_sequence_of+0x66>
        buf->tag = **p;
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	602b      	str	r3, [r5, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8011fe8:	463b      	mov	r3, r7
 8011fea:	4642      	mov	r2, r8
 8011fec:	4631      	mov	r1, r6
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f7ff ff2f 	bl	8011e52 <mbedtls_asn1_get_tag>
 8011ff4:	b9e0      	cbnz	r0, 8012030 <mbedtls_asn1_get_sequence_of+0x82>
        buf->p = *p;
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8011ffa:	686a      	ldr	r2, [r5, #4]
 8011ffc:	4413      	add	r3, r2
 8011ffe:	6023      	str	r3, [r4, #0]
        if( *p < end )
 8012000:	42b3      	cmp	r3, r6
 8012002:	d2ec      	bcs.n	8011fde <mbedtls_asn1_get_sequence_of+0x30>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8012004:	4659      	mov	r1, fp
 8012006:	4650      	mov	r0, sl
 8012008:	f016 ff40 	bl	8028e8c <mbedtls_calloc>
 801200c:	60e8      	str	r0, [r5, #12]
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
 801200e:	b188      	cbz	r0, 8012034 <mbedtls_asn1_get_sequence_of+0x86>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );

            cur = cur->next;
 8012010:	4605      	mov	r5, r0
 8012012:	e7e2      	b.n	8011fda <mbedtls_asn1_get_sequence_of+0x2c>
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8012014:	2300      	movs	r3, #0
 8012016:	60eb      	str	r3, [r5, #12]

    if( *p != end )
 8012018:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 801201a:	42b3      	cmp	r3, r6
 801201c:	bf18      	it	ne
 801201e:	f06f 0965 	mvnne.w	r9, #101	; 0x65

    return( 0 );
}
 8012022:	4648      	mov	r0, r9
 8012024:	b003      	add	sp, #12
 8012026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 801202a:	f06f 0965 	mvn.w	r9, #101	; 0x65
 801202e:	e7f8      	b.n	8012022 <mbedtls_asn1_get_sequence_of+0x74>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8012030:	4681      	mov	r9, r0
 8012032:	e7f6      	b.n	8012022 <mbedtls_asn1_get_sequence_of+0x74>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8012034:	f06f 0969 	mvn.w	r9, #105	; 0x69
 8012038:	e7f3      	b.n	8012022 <mbedtls_asn1_get_sequence_of+0x74>

0801203a <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 801203a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	4604      	mov	r4, r0
 8012042:	460d      	mov	r5, r1
 8012044:	4617      	mov	r7, r2
 8012046:	4698      	mov	r8, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8012048:	2330      	movs	r3, #48	; 0x30
 801204a:	aa01      	add	r2, sp, #4
 801204c:	f7ff ff01 	bl	8011e52 <mbedtls_asn1_get_tag>
 8012050:	4606      	mov	r6, r0
 8012052:	bb88      	cbnz	r0, 80120b8 <mbedtls_asn1_get_alg+0x7e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8012054:	6823      	ldr	r3, [r4, #0]
 8012056:	1ae9      	subs	r1, r5, r3
 8012058:	2900      	cmp	r1, #0
 801205a:	dd36      	ble.n	80120ca <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	463a      	mov	r2, r7
 8012060:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8012064:	6825      	ldr	r5, [r4, #0]
 8012066:	9b01      	ldr	r3, [sp, #4]
 8012068:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801206a:	2306      	movs	r3, #6
 801206c:	4629      	mov	r1, r5
 801206e:	4620      	mov	r0, r4
 8012070:	f7ff feef 	bl	8011e52 <mbedtls_asn1_get_tag>
 8012074:	4606      	mov	r6, r0
 8012076:	b9f8      	cbnz	r0, 80120b8 <mbedtls_asn1_get_alg+0x7e>
        return( ret );

    alg->p = *p;
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 801207c:	6879      	ldr	r1, [r7, #4]
 801207e:	185a      	adds	r2, r3, r1
 8012080:	6022      	str	r2, [r4, #0]

    if( *p == end )
 8012082:	42aa      	cmp	r2, r5
 8012084:	d01c      	beq.n	80120c0 <mbedtls_asn1_get_alg+0x86>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 8012086:	5c5b      	ldrb	r3, [r3, r1]
 8012088:	4642      	mov	r2, r8
 801208a:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	3301      	adds	r3, #1
 8012092:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8012094:	4629      	mov	r1, r5
 8012096:	4620      	mov	r0, r4
 8012098:	f7ff fe76 	bl	8011d88 <mbedtls_asn1_get_len>
 801209c:	4606      	mov	r6, r0
 801209e:	b958      	cbnz	r0, 80120b8 <mbedtls_asn1_get_alg+0x7e>
        return( ret );

    params->p = *p;
 80120a0:	6823      	ldr	r3, [r4, #0]
 80120a2:	f8c8 3008 	str.w	r3, [r8, #8]
    *p += params->len;
 80120a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80120aa:	4413      	add	r3, r2
 80120ac:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80120ae:	42ab      	cmp	r3, r5
 80120b0:	bf0c      	ite	eq
 80120b2:	4606      	moveq	r6, r0
 80120b4:	f06f 0665 	mvnne.w	r6, #101	; 0x65

    return( 0 );
}
 80120b8:	4630      	mov	r0, r6
 80120ba:	b002      	add	sp, #8
 80120bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
 80120c0:	210c      	movs	r1, #12
 80120c2:	4640      	mov	r0, r8
 80120c4:	f008 ff3e 	bl	801af44 <mbedtls_platform_zeroize>
        return( 0 );
 80120c8:	e7f6      	b.n	80120b8 <mbedtls_asn1_get_alg+0x7e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80120ca:	f06f 065f 	mvn.w	r6, #95	; 0x5f
 80120ce:	e7f3      	b.n	80120b8 <mbedtls_asn1_get_alg+0x7e>

080120d0 <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
 80120d0:	2a7f      	cmp	r2, #127	; 0x7f
 80120d2:	d809      	bhi.n	80120e8 <mbedtls_asn1_write_len+0x18>
    {
        if( *p - start < 1 )
 80120d4:	6803      	ldr	r3, [r0, #0]
 80120d6:	1a59      	subs	r1, r3, r1
 80120d8:	2900      	cmp	r1, #0
 80120da:	dd71      	ble.n	80121c0 <mbedtls_asn1_write_len+0xf0>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 80120dc:	1e59      	subs	r1, r3, #1
 80120de:	6001      	str	r1, [r0, #0]
 80120e0:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 80120e4:	2001      	movs	r0, #1
 80120e6:	4770      	bx	lr
    }

    if( len <= 0xFF )
 80120e8:	2aff      	cmp	r2, #255	; 0xff
 80120ea:	d80f      	bhi.n	801210c <mbedtls_asn1_write_len+0x3c>
    {
        if( *p - start < 2 )
 80120ec:	6803      	ldr	r3, [r0, #0]
 80120ee:	1a59      	subs	r1, r3, r1
 80120f0:	2901      	cmp	r1, #1
 80120f2:	dd68      	ble.n	80121c6 <mbedtls_asn1_write_len+0xf6>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 80120f4:	1e59      	subs	r1, r3, #1
 80120f6:	6001      	str	r1, [r0, #0]
 80120f8:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 80120fc:	6803      	ldr	r3, [r0, #0]
 80120fe:	1e5a      	subs	r2, r3, #1
 8012100:	6002      	str	r2, [r0, #0]
 8012102:	2281      	movs	r2, #129	; 0x81
 8012104:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 8012108:	2002      	movs	r0, #2
 801210a:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 801210c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012110:	d215      	bcs.n	801213e <mbedtls_asn1_write_len+0x6e>
    {
        if( *p - start < 3 )
 8012112:	6803      	ldr	r3, [r0, #0]
 8012114:	1a59      	subs	r1, r3, r1
 8012116:	2902      	cmp	r1, #2
 8012118:	dd58      	ble.n	80121cc <mbedtls_asn1_write_len+0xfc>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 801211a:	1e59      	subs	r1, r3, #1
 801211c:	6001      	str	r1, [r0, #0]
 801211e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8012122:	6803      	ldr	r3, [r0, #0]
 8012124:	1e59      	subs	r1, r3, #1
 8012126:	6001      	str	r1, [r0, #0]
 8012128:	0a12      	lsrs	r2, r2, #8
 801212a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 801212e:	6803      	ldr	r3, [r0, #0]
 8012130:	1e5a      	subs	r2, r3, #1
 8012132:	6002      	str	r2, [r0, #0]
 8012134:	2282      	movs	r2, #130	; 0x82
 8012136:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 801213a:	2003      	movs	r0, #3
 801213c:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 801213e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012142:	d21b      	bcs.n	801217c <mbedtls_asn1_write_len+0xac>
    {
        if( *p - start < 4 )
 8012144:	6803      	ldr	r3, [r0, #0]
 8012146:	1a59      	subs	r1, r3, r1
 8012148:	2903      	cmp	r1, #3
 801214a:	dd42      	ble.n	80121d2 <mbedtls_asn1_write_len+0x102>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 801214c:	1e59      	subs	r1, r3, #1
 801214e:	6001      	str	r1, [r0, #0]
 8012150:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 8012154:	6803      	ldr	r3, [r0, #0]
 8012156:	1e59      	subs	r1, r3, #1
 8012158:	6001      	str	r1, [r0, #0]
 801215a:	0a11      	lsrs	r1, r2, #8
 801215c:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8012160:	6803      	ldr	r3, [r0, #0]
 8012162:	1e59      	subs	r1, r3, #1
 8012164:	6001      	str	r1, [r0, #0]
 8012166:	0c12      	lsrs	r2, r2, #16
 8012168:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 801216c:	6803      	ldr	r3, [r0, #0]
 801216e:	1e5a      	subs	r2, r3, #1
 8012170:	6002      	str	r2, [r0, #0]
 8012172:	2283      	movs	r2, #131	; 0x83
 8012174:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 8012178:	2004      	movs	r0, #4
 801217a:	4770      	bx	lr

#if SIZE_MAX > 0xFFFFFFFF
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 801217c:	6803      	ldr	r3, [r0, #0]
 801217e:	1a59      	subs	r1, r3, r1
 8012180:	2904      	cmp	r1, #4
 8012182:	dd29      	ble.n	80121d8 <mbedtls_asn1_write_len+0x108>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 8012184:	1e59      	subs	r1, r3, #1
 8012186:	6001      	str	r1, [r0, #0]
 8012188:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 801218c:	6803      	ldr	r3, [r0, #0]
 801218e:	1e59      	subs	r1, r3, #1
 8012190:	6001      	str	r1, [r0, #0]
 8012192:	0a11      	lsrs	r1, r2, #8
 8012194:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 8012198:	6803      	ldr	r3, [r0, #0]
 801219a:	1e59      	subs	r1, r3, #1
 801219c:	6001      	str	r1, [r0, #0]
 801219e:	0c11      	lsrs	r1, r2, #16
 80121a0:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 80121a4:	6803      	ldr	r3, [r0, #0]
 80121a6:	1e59      	subs	r1, r3, #1
 80121a8:	6001      	str	r1, [r0, #0]
 80121aa:	0e12      	lsrs	r2, r2, #24
 80121ac:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 80121b0:	6803      	ldr	r3, [r0, #0]
 80121b2:	1e5a      	subs	r2, r3, #1
 80121b4:	6002      	str	r2, [r0, #0]
 80121b6:	2284      	movs	r2, #132	; 0x84
 80121b8:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 80121bc:	2005      	movs	r0, #5
 80121be:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121c0:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 80121c4:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121c6:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 80121ca:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121cc:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 80121d0:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121d2:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 80121d6:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121d8:	f06f 006b 	mvn.w	r0, #107	; 0x6b
    }

#if SIZE_MAX > 0xFFFFFFFF
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 80121dc:	4770      	bx	lr

080121de <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 80121de:	6803      	ldr	r3, [r0, #0]
 80121e0:	1a59      	subs	r1, r3, r1
 80121e2:	2900      	cmp	r1, #0
 80121e4:	dd05      	ble.n	80121f2 <mbedtls_asn1_write_tag+0x14>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 80121e6:	1e59      	subs	r1, r3, #1
 80121e8:	6001      	str	r1, [r0, #0]
 80121ea:	f803 2c01 	strb.w	r2, [r3, #-1]

    return( 1 );
 80121ee:	2001      	movs	r0, #1
 80121f0:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 80121f2:	f06f 006b 	mvn.w	r0, #107	; 0x6b
}
 80121f6:	4770      	bx	lr

080121f8 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	4605      	mov	r5, r0
 80121fe:	460e      	mov	r6, r1
 8012200:	4690      	mov	r8, r2
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 8012202:	4610      	mov	r0, r2
 8012204:	f000 fb67 	bl	80128d6 <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 8012208:	6829      	ldr	r1, [r5, #0]
 801220a:	42b1      	cmp	r1, r6
 801220c:	d331      	bcc.n	8012272 <mbedtls_asn1_write_mpi+0x7a>
 801220e:	4604      	mov	r4, r0
 8012210:	1b8a      	subs	r2, r1, r6
 8012212:	4282      	cmp	r2, r0
 8012214:	d330      	bcc.n	8012278 <mbedtls_asn1_write_mpi+0x80>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    (*p) -= len;
 8012216:	1a09      	subs	r1, r1, r0
 8012218:	6029      	str	r1, [r5, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 801221a:	4602      	mov	r2, r0
 801221c:	4640      	mov	r0, r8
 801221e:	f000 fb91 	bl	8012944 <mbedtls_mpi_write_binary>
 8012222:	4607      	mov	r7, r0
 8012224:	b9c0      	cbnz	r0, 8012258 <mbedtls_asn1_write_mpi+0x60>

    // DER format assumes 2s complement for numbers, so the leftmost bit
    // should be 0 for positive numbers and 1 for negative numbers.
    //
    if( X->s ==1 && **p & 0x80 )
 8012226:	f8d8 3000 	ldr.w	r3, [r8]
 801222a:	2b01      	cmp	r3, #1
 801222c:	d104      	bne.n	8012238 <mbedtls_asn1_write_mpi+0x40>
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	f993 2000 	ldrsb.w	r2, [r3]
 8012234:	2a00      	cmp	r2, #0
 8012236:	db12      	blt.n	801225e <mbedtls_asn1_write_mpi+0x66>

        *--(*p) = 0x00;
        len += 1;
    }

    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8012238:	4622      	mov	r2, r4
 801223a:	4631      	mov	r1, r6
 801223c:	4628      	mov	r0, r5
 801223e:	f7ff ff47 	bl	80120d0 <mbedtls_asn1_write_len>
 8012242:	1e07      	subs	r7, r0, #0
 8012244:	db08      	blt.n	8012258 <mbedtls_asn1_write_mpi+0x60>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8012246:	2202      	movs	r2, #2
 8012248:	4631      	mov	r1, r6
 801224a:	4628      	mov	r0, r5
 801224c:	f7ff ffc7 	bl	80121de <mbedtls_asn1_write_tag>
 8012250:	2800      	cmp	r0, #0
 8012252:	db17      	blt.n	8012284 <mbedtls_asn1_write_mpi+0x8c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 8012254:	4427      	add	r7, r4
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8012256:	4407      	add	r7, r0

    ret = (int) len;

cleanup:
    return( ret );
}
 8012258:	4638      	mov	r0, r7
 801225a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( *p - start < 1 )
 801225e:	1b9a      	subs	r2, r3, r6
 8012260:	2a00      	cmp	r2, #0
 8012262:	dd0c      	ble.n	801227e <mbedtls_asn1_write_mpi+0x86>
        *--(*p) = 0x00;
 8012264:	1e5a      	subs	r2, r3, #1
 8012266:	602a      	str	r2, [r5, #0]
 8012268:	2200      	movs	r2, #0
 801226a:	f803 2c01 	strb.w	r2, [r3, #-1]
        len += 1;
 801226e:	3401      	adds	r4, #1
 8012270:	e7e2      	b.n	8012238 <mbedtls_asn1_write_mpi+0x40>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 8012272:	f06f 076b 	mvn.w	r7, #107	; 0x6b
 8012276:	e7ef      	b.n	8012258 <mbedtls_asn1_write_mpi+0x60>
 8012278:	f06f 076b 	mvn.w	r7, #107	; 0x6b
 801227c:	e7ec      	b.n	8012258 <mbedtls_asn1_write_mpi+0x60>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 801227e:	f06f 076b 	mvn.w	r7, #107	; 0x6b
 8012282:	e7e9      	b.n	8012258 <mbedtls_asn1_write_mpi+0x60>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 8012284:	4607      	mov	r7, r0
 8012286:	e7e7      	b.n	8012258 <mbedtls_asn1_write_mpi+0x60>

08012288 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8012288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	4691      	mov	r9, r2
 801228e:	469e      	mov	lr, r3
 8012290:	9b08      	ldr	r3, [sp, #32]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8012292:	2b00      	cmp	r3, #0
 8012294:	d068      	beq.n	8012368 <mbedtls_base64_decode+0xe0>
 8012296:	4688      	mov	r8, r1
 8012298:	2100      	movs	r1, #0
 801229a:	460a      	mov	r2, r1
 801229c:	460d      	mov	r5, r1
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 801229e:	f8df a160 	ldr.w	sl, [pc, #352]	; 8012400 <mbedtls_base64_decode+0x178>
 80122a2:	e01b      	b.n	80122dc <mbedtls_base64_decode+0x54>
        x = 0;
 80122a4:	2400      	movs	r4, #0
 80122a6:	e029      	b.n	80122fc <mbedtls_base64_decode+0x74>
            src[i] == '\r' && src[i + 1] == '\n' )
 80122a8:	eb0e 0705 	add.w	r7, lr, r5
 80122ac:	787f      	ldrb	r7, [r7, #1]
 80122ae:	2f0a      	cmp	r7, #10
 80122b0:	d011      	beq.n	80122d6 <mbedtls_base64_decode+0x4e>
        if( x != 0 )
 80122b2:	2c00      	cmp	r4, #0
 80122b4:	f040 809f 	bne.w	80123f6 <mbedtls_base64_decode+0x16e>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80122b8:	f016 0f80 	tst.w	r6, #128	; 0x80
 80122bc:	f040 8092 	bne.w	80123e4 <mbedtls_base64_decode+0x15c>
 80122c0:	f81a 4006 	ldrb.w	r4, [sl, r6]
 80122c4:	2c7f      	cmp	r4, #127	; 0x7f
 80122c6:	f000 8090 	beq.w	80123ea <mbedtls_base64_decode+0x162>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80122ca:	2c3f      	cmp	r4, #63	; 0x3f
 80122cc:	d802      	bhi.n	80122d4 <mbedtls_base64_decode+0x4c>
 80122ce:	2900      	cmp	r1, #0
 80122d0:	f040 808e 	bne.w	80123f0 <mbedtls_base64_decode+0x168>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80122d4:	3201      	adds	r2, #1
    for( i = n = j = 0; i < slen; i++ )
 80122d6:	3501      	adds	r5, #1
 80122d8:	42ab      	cmp	r3, r5
 80122da:	d926      	bls.n	801232a <mbedtls_base64_decode+0xa2>
        while( i < slen && src[i] == ' ' )
 80122dc:	42ab      	cmp	r3, r5
 80122de:	d9e1      	bls.n	80122a4 <mbedtls_base64_decode+0x1c>
 80122e0:	1e6e      	subs	r6, r5, #1
 80122e2:	4476      	add	r6, lr
 80122e4:	eba3 0c05 	sub.w	ip, r3, r5
        x = 0;
 80122e8:	2400      	movs	r4, #0
        while( i < slen && src[i] == ' ' )
 80122ea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80122ee:	2f20      	cmp	r7, #32
 80122f0:	d104      	bne.n	80122fc <mbedtls_base64_decode+0x74>
            ++i;
 80122f2:	3501      	adds	r5, #1
            ++x;
 80122f4:	3401      	adds	r4, #1
        while( i < slen && src[i] == ' ' )
 80122f6:	4564      	cmp	r4, ip
 80122f8:	d1f7      	bne.n	80122ea <mbedtls_base64_decode+0x62>
            ++x;
 80122fa:	4664      	mov	r4, ip
        if( i == slen )
 80122fc:	42ab      	cmp	r3, r5
 80122fe:	d015      	beq.n	801232c <mbedtls_base64_decode+0xa4>
        if( ( slen - i ) >= 2 &&
 8012300:	1b5e      	subs	r6, r3, r5
 8012302:	2e01      	cmp	r6, #1
 8012304:	d903      	bls.n	801230e <mbedtls_base64_decode+0x86>
            src[i] == '\r' && src[i + 1] == '\n' )
 8012306:	f81e 6005 	ldrb.w	r6, [lr, r5]
        if( ( slen - i ) >= 2 &&
 801230a:	2e0d      	cmp	r6, #13
 801230c:	d0cc      	beq.n	80122a8 <mbedtls_base64_decode+0x20>
        if( src[i] == '\n' )
 801230e:	f81e 6005 	ldrb.w	r6, [lr, r5]
 8012312:	2e0a      	cmp	r6, #10
 8012314:	d0df      	beq.n	80122d6 <mbedtls_base64_decode+0x4e>
        if( x != 0 )
 8012316:	2c00      	cmp	r4, #0
 8012318:	d161      	bne.n	80123de <mbedtls_base64_decode+0x156>
        if( src[i] == '=' && ++j > 2 )
 801231a:	2e3d      	cmp	r6, #61	; 0x3d
 801231c:	d1cc      	bne.n	80122b8 <mbedtls_base64_decode+0x30>
 801231e:	3101      	adds	r1, #1
 8012320:	2902      	cmp	r1, #2
 8012322:	d9d7      	bls.n	80122d4 <mbedtls_base64_decode+0x4c>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8012324:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8012328:	e057      	b.n	80123da <mbedtls_base64_decode+0x152>
    for( i = n = j = 0; i < slen; i++ )
 801232a:	462b      	mov	r3, r5
    }

    if( n == 0 )
 801232c:	b1e2      	cbz	r2, 8012368 <mbedtls_base64_decode+0xe0>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 801232e:	f002 0407 	and.w	r4, r2, #7
 8012332:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012336:	0064      	lsls	r4, r4, #1
 8012338:	3407      	adds	r4, #7
 801233a:	08d2      	lsrs	r2, r2, #3
 801233c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012340:	ebc1 0242 	rsb	r2, r1, r2, lsl #1
    n -= j;
 8012344:	eb02 02d4 	add.w	r2, r2, r4, lsr #3

    if( dst == NULL || dlen < n )
 8012348:	b190      	cbz	r0, 8012370 <mbedtls_base64_decode+0xe8>
 801234a:	4542      	cmp	r2, r8
 801234c:	d810      	bhi.n	8012370 <mbedtls_base64_decode+0xe8>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 801234e:	4606      	mov	r6, r0
 8012350:	2b00      	cmp	r3, #0
 8012352:	d03e      	beq.n	80123d2 <mbedtls_base64_decode+0x14a>
 8012354:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012358:	4473      	add	r3, lr
 801235a:	2400      	movs	r4, #0
 801235c:	2503      	movs	r5, #3
 801235e:	4621      	mov	r1, r4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8012360:	4f27      	ldr	r7, [pc, #156]	; (8012400 <mbedtls_base64_decode+0x178>)
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8012362:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8012404 <mbedtls_base64_decode+0x17c>
 8012366:	e016      	b.n	8012396 <mbedtls_base64_decode+0x10e>
        *olen = 0;
 8012368:	2000      	movs	r0, #0
 801236a:	f8c9 0000 	str.w	r0, [r9]
        return( 0 );
 801236e:	e034      	b.n	80123da <mbedtls_base64_decode+0x152>
        *olen = n;
 8012370:	f8c9 2000 	str.w	r2, [r9]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8012374:	f06f 0029 	mvn.w	r0, #41	; 0x29
 8012378:	e02f      	b.n	80123da <mbedtls_base64_decode+0x152>
        j -= ( base64_dec_map[*src] == 64 );
 801237a:	f817 2008 	ldrb.w	r2, [r7, r8]
 801237e:	2a40      	cmp	r2, #64	; 0x40
 8012380:	bf08      	it	eq
 8012382:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8012384:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012388:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

        if( ++n == 4 )
 801238c:	3101      	adds	r1, #1
 801238e:	2904      	cmp	r1, #4
 8012390:	d00e      	beq.n	80123b0 <mbedtls_base64_decode+0x128>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8012392:	459e      	cmp	lr, r3
 8012394:	d01d      	beq.n	80123d2 <mbedtls_base64_decode+0x14a>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8012396:	f81e 8f01 	ldrb.w	r8, [lr, #1]!
 801239a:	f1a8 020a 	sub.w	r2, r8, #10
 801239e:	b2d2      	uxtb	r2, r2
 80123a0:	2a16      	cmp	r2, #22
 80123a2:	d8ea      	bhi.n	801237a <mbedtls_base64_decode+0xf2>
 80123a4:	fa2c f202 	lsr.w	r2, ip, r2
 80123a8:	f012 0f01 	tst.w	r2, #1
 80123ac:	d1f1      	bne.n	8012392 <mbedtls_base64_decode+0x10a>
 80123ae:	e7e4      	b.n	801237a <mbedtls_base64_decode+0xf2>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80123b0:	b325      	cbz	r5, 80123fc <mbedtls_base64_decode+0x174>
 80123b2:	0c22      	lsrs	r2, r4, #16
 80123b4:	7032      	strb	r2, [r6, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80123b6:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80123b8:	bf98      	it	ls
 80123ba:	3601      	addls	r6, #1
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80123bc:	d91e      	bls.n	80123fc <mbedtls_base64_decode+0x174>
 80123be:	1cb1      	adds	r1, r6, #2
 80123c0:	0a22      	lsrs	r2, r4, #8
 80123c2:	7072      	strb	r2, [r6, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80123c4:	2d02      	cmp	r5, #2
 80123c6:	bf86      	itte	hi
 80123c8:	70b4      	strbhi	r4, [r6, #2]
 80123ca:	3603      	addhi	r6, #3
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80123cc:	460e      	movls	r6, r1
            n = 0;
 80123ce:	2100      	movs	r1, #0
 80123d0:	e7df      	b.n	8012392 <mbedtls_base64_decode+0x10a>
        }
    }

    *olen = p - dst;
 80123d2:	1a30      	subs	r0, r6, r0
 80123d4:	f8c9 0000 	str.w	r0, [r9]

    return( 0 );
 80123d8:	2000      	movs	r0, #0
}
 80123da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80123de:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80123e2:	e7fa      	b.n	80123da <mbedtls_base64_decode+0x152>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80123e4:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80123e8:	e7f7      	b.n	80123da <mbedtls_base64_decode+0x152>
 80123ea:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80123ee:	e7f4      	b.n	80123da <mbedtls_base64_decode+0x152>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80123f0:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80123f4:	e7f1      	b.n	80123da <mbedtls_base64_decode+0x152>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80123f6:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80123fa:	e7ee      	b.n	80123da <mbedtls_base64_decode+0x152>
            n = 0;
 80123fc:	2100      	movs	r1, #0
 80123fe:	e7c8      	b.n	8012392 <mbedtls_base64_decode+0x10a>
 8012400:	080310a4 	.word	0x080310a4
 8012404:	00400009 	.word	0x00400009

08012408 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 8012408:	b338      	cbz	r0, 801245a <mpi_sub_hlp+0x52>
{
 801240a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801240c:	4686      	mov	lr, r0
 801240e:	1f14      	subs	r4, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 8012410:	2300      	movs	r3, #0
 8012412:	461d      	mov	r5, r3
    {
        z = ( *d <  c );     *d -=  c;
 8012414:	f854 7f04 	ldr.w	r7, [r4, #4]!
 8012418:	1af8      	subs	r0, r7, r3
 801241a:	6020      	str	r0, [r4, #0]
        c = ( *d < *s ) + z; *d -= *s;
 801241c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012420:	42b0      	cmp	r0, r6
 8012422:	bf2c      	ite	cs
 8012424:	f04f 0c00 	movcs.w	ip, #0
 8012428:	f04f 0c01 	movcc.w	ip, #1
 801242c:	429f      	cmp	r7, r3
 801242e:	bf2c      	ite	cs
 8012430:	4663      	movcs	r3, ip
 8012432:	f10c 0301 	addcc.w	r3, ip, #1
 8012436:	1b80      	subs	r0, r0, r6
 8012438:	6020      	str	r0, [r4, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 801243a:	3501      	adds	r5, #1
 801243c:	45ae      	cmp	lr, r5
 801243e:	d1e9      	bne.n	8012414 <mpi_sub_hlp+0xc>
 8012440:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    }

    while( c != 0 )
 8012444:	b143      	cbz	r3, 8012458 <mpi_sub_hlp+0x50>
    {
        z = ( *d < c ); *d -= c;
        c = z; d++;
 8012446:	2401      	movs	r4, #1
 8012448:	e000      	b.n	801244c <mpi_sub_hlp+0x44>
 801244a:	4623      	mov	r3, r4
        z = ( *d < c ); *d -= c;
 801244c:	6811      	ldr	r1, [r2, #0]
 801244e:	1ac8      	subs	r0, r1, r3
 8012450:	f842 0b04 	str.w	r0, [r2], #4
    while( c != 0 )
 8012454:	4299      	cmp	r1, r3
 8012456:	d3f8      	bcc.n	801244a <mpi_sub_hlp+0x42>
    }
}
 8012458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801245a:	4770      	bx	lr

0801245c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 801245c:	b4f0      	push	{r4, r5, r6, r7}
 801245e:	4606      	mov	r6, r0
 8012460:	460d      	mov	r5, r1
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 8012462:	280f      	cmp	r0, #15
 8012464:	f240 80c3 	bls.w	80125ee <mpi_mul_hlp+0x192>
 8012468:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0, t = 0;
 801246a:	2400      	movs	r4, #0
    {
        MULADDC_INIT
 801246c:	f855 0b04 	ldr.w	r0, [r5], #4
 8012470:	6811      	ldr	r1, [r2, #0]
 8012472:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012476:	f842 1b04 	str.w	r1, [r2], #4
 801247a:	f855 0b04 	ldr.w	r0, [r5], #4
 801247e:	6811      	ldr	r1, [r2, #0]
 8012480:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012484:	f842 1b04 	str.w	r1, [r2], #4
 8012488:	f855 0b04 	ldr.w	r0, [r5], #4
 801248c:	6811      	ldr	r1, [r2, #0]
 801248e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012492:	f842 1b04 	str.w	r1, [r2], #4
 8012496:	f855 0b04 	ldr.w	r0, [r5], #4
 801249a:	6811      	ldr	r1, [r2, #0]
 801249c:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124a0:	f842 1b04 	str.w	r1, [r2], #4
 80124a4:	f855 0b04 	ldr.w	r0, [r5], #4
 80124a8:	6811      	ldr	r1, [r2, #0]
 80124aa:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124ae:	f842 1b04 	str.w	r1, [r2], #4
 80124b2:	f855 0b04 	ldr.w	r0, [r5], #4
 80124b6:	6811      	ldr	r1, [r2, #0]
 80124b8:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124bc:	f842 1b04 	str.w	r1, [r2], #4
 80124c0:	f855 0b04 	ldr.w	r0, [r5], #4
 80124c4:	6811      	ldr	r1, [r2, #0]
 80124c6:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124ca:	f842 1b04 	str.w	r1, [r2], #4
 80124ce:	f855 0b04 	ldr.w	r0, [r5], #4
 80124d2:	6811      	ldr	r1, [r2, #0]
 80124d4:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124d8:	f842 1b04 	str.w	r1, [r2], #4
 80124dc:	f855 0b04 	ldr.w	r0, [r5], #4
 80124e0:	6811      	ldr	r1, [r2, #0]
 80124e2:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124e6:	f842 1b04 	str.w	r1, [r2], #4
 80124ea:	f855 0b04 	ldr.w	r0, [r5], #4
 80124ee:	6811      	ldr	r1, [r2, #0]
 80124f0:	fbe3 1460 	umaal	r1, r4, r3, r0
 80124f4:	f842 1b04 	str.w	r1, [r2], #4
 80124f8:	f855 0b04 	ldr.w	r0, [r5], #4
 80124fc:	6811      	ldr	r1, [r2, #0]
 80124fe:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012502:	f842 1b04 	str.w	r1, [r2], #4
 8012506:	f855 0b04 	ldr.w	r0, [r5], #4
 801250a:	6811      	ldr	r1, [r2, #0]
 801250c:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012510:	f842 1b04 	str.w	r1, [r2], #4
 8012514:	f855 0b04 	ldr.w	r0, [r5], #4
 8012518:	6811      	ldr	r1, [r2, #0]
 801251a:	fbe3 1460 	umaal	r1, r4, r3, r0
 801251e:	f842 1b04 	str.w	r1, [r2], #4
 8012522:	f855 0b04 	ldr.w	r0, [r5], #4
 8012526:	6811      	ldr	r1, [r2, #0]
 8012528:	fbe3 1460 	umaal	r1, r4, r3, r0
 801252c:	f842 1b04 	str.w	r1, [r2], #4
 8012530:	f855 0b04 	ldr.w	r0, [r5], #4
 8012534:	6811      	ldr	r1, [r2, #0]
 8012536:	fbe3 1460 	umaal	r1, r4, r3, r0
 801253a:	f842 1b04 	str.w	r1, [r2], #4
 801253e:	f855 0b04 	ldr.w	r0, [r5], #4
 8012542:	6811      	ldr	r1, [r2, #0]
 8012544:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012548:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 16; i -= 16 )
 801254c:	3f10      	subs	r7, #16
 801254e:	2f0f      	cmp	r7, #15
 8012550:	d88c      	bhi.n	801246c <mpi_mul_hlp+0x10>
 8012552:	f006 060f 	and.w	r6, r6, #15
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 8012556:	2e07      	cmp	r6, #7
 8012558:	d93d      	bls.n	80125d6 <mpi_mul_hlp+0x17a>
 801255a:	4637      	mov	r7, r6
    {
        MULADDC_INIT
 801255c:	f855 0b04 	ldr.w	r0, [r5], #4
 8012560:	6811      	ldr	r1, [r2, #0]
 8012562:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012566:	f842 1b04 	str.w	r1, [r2], #4
 801256a:	f855 0b04 	ldr.w	r0, [r5], #4
 801256e:	6811      	ldr	r1, [r2, #0]
 8012570:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012574:	f842 1b04 	str.w	r1, [r2], #4
 8012578:	f855 0b04 	ldr.w	r0, [r5], #4
 801257c:	6811      	ldr	r1, [r2, #0]
 801257e:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012582:	f842 1b04 	str.w	r1, [r2], #4
 8012586:	f855 0b04 	ldr.w	r0, [r5], #4
 801258a:	6811      	ldr	r1, [r2, #0]
 801258c:	fbe3 1460 	umaal	r1, r4, r3, r0
 8012590:	f842 1b04 	str.w	r1, [r2], #4
 8012594:	f855 0b04 	ldr.w	r0, [r5], #4
 8012598:	6811      	ldr	r1, [r2, #0]
 801259a:	fbe3 1460 	umaal	r1, r4, r3, r0
 801259e:	f842 1b04 	str.w	r1, [r2], #4
 80125a2:	f855 0b04 	ldr.w	r0, [r5], #4
 80125a6:	6811      	ldr	r1, [r2, #0]
 80125a8:	fbe3 1460 	umaal	r1, r4, r3, r0
 80125ac:	f842 1b04 	str.w	r1, [r2], #4
 80125b0:	f855 0b04 	ldr.w	r0, [r5], #4
 80125b4:	6811      	ldr	r1, [r2, #0]
 80125b6:	fbe3 1460 	umaal	r1, r4, r3, r0
 80125ba:	f842 1b04 	str.w	r1, [r2], #4
 80125be:	f855 0b04 	ldr.w	r0, [r5], #4
 80125c2:	6811      	ldr	r1, [r2, #0]
 80125c4:	fbe3 1460 	umaal	r1, r4, r3, r0
 80125c8:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i >= 8; i -= 8 )
 80125cc:	3f08      	subs	r7, #8
 80125ce:	2f07      	cmp	r7, #7
 80125d0:	d8c4      	bhi.n	801255c <mpi_mul_hlp+0x100>
 80125d2:	f006 0607 	and.w	r6, r6, #7
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80125d6:	b146      	cbz	r6, 80125ea <mpi_mul_hlp+0x18e>
    {
        MULADDC_INIT
 80125d8:	f855 0b04 	ldr.w	r0, [r5], #4
 80125dc:	6811      	ldr	r1, [r2, #0]
 80125de:	fbe3 1460 	umaal	r1, r4, r3, r0
 80125e2:	f842 1b04 	str.w	r1, [r2], #4
    for( ; i > 0; i-- )
 80125e6:	3e01      	subs	r6, #1
 80125e8:	d1f6      	bne.n	80125d8 <mpi_mul_hlp+0x17c>
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 80125ea:	2101      	movs	r1, #1
 80125ec:	e002      	b.n	80125f4 <mpi_mul_hlp+0x198>
    mbedtls_mpi_uint c = 0, t = 0;
 80125ee:	2400      	movs	r4, #0
 80125f0:	e7b1      	b.n	8012556 <mpi_mul_hlp+0xfa>
        *d += c; c = ( *d < c ); d++;
 80125f2:	460c      	mov	r4, r1
 80125f4:	6813      	ldr	r3, [r2, #0]
 80125f6:	4423      	add	r3, r4
 80125f8:	f842 3b04 	str.w	r3, [r2], #4
    }
    while( c != 0 );
 80125fc:	42a3      	cmp	r3, r4
 80125fe:	d3f8      	bcc.n	80125f2 <mpi_mul_hlp+0x196>
}
 8012600:	bcf0      	pop	{r4, r5, r6, r7}
 8012602:	4770      	bx	lr

08012604 <mpi_bigendian_to_host>:
    if( limbs == 0 )
 8012604:	b181      	cbz	r1, 8012628 <mpi_bigendian_to_host+0x24>
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8012606:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 801260a:	3b01      	subs	r3, #1
 801260c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012610:	4298      	cmp	r0, r3
 8012612:	d809      	bhi.n	8012628 <mpi_bigendian_to_host+0x24>
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 8012614:	6802      	ldr	r2, [r0, #0]
            return( __builtin_bswap32(x) );
 8012616:	ba12      	rev	r2, r2
 8012618:	6819      	ldr	r1, [r3, #0]
 801261a:	ba09      	rev	r1, r1
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 801261c:	f840 1b04 	str.w	r1, [r0], #4
        *cur_limb_right = tmp;
 8012620:	f843 2904 	str.w	r2, [r3], #-4
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 8012624:	4298      	cmp	r0, r3
 8012626:	d9f5      	bls.n	8012614 <mpi_bigendian_to_host+0x10>
}
 8012628:	4770      	bx	lr

0801262a <mbedtls_mpi_init>:
    X->s = 1;
 801262a:	2301      	movs	r3, #1
 801262c:	6003      	str	r3, [r0, #0]
    X->n = 0;
 801262e:	2300      	movs	r3, #0
 8012630:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 8012632:	6083      	str	r3, [r0, #8]
}
 8012634:	4770      	bx	lr

08012636 <mbedtls_mpi_free>:
    if( X == NULL )
 8012636:	b180      	cbz	r0, 801265a <mbedtls_mpi_free+0x24>
{
 8012638:	b510      	push	{r4, lr}
 801263a:	4604      	mov	r4, r0
    if( X->p != NULL )
 801263c:	6880      	ldr	r0, [r0, #8]
 801263e:	b130      	cbz	r0, 801264e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
 8012640:	6861      	ldr	r1, [r4, #4]
 8012642:	0089      	lsls	r1, r1, #2
 8012644:	f008 fc7e 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8012648:	68a0      	ldr	r0, [r4, #8]
 801264a:	f016 fc2d 	bl	8028ea8 <mbedtls_free>
    X->s = 1;
 801264e:	2301      	movs	r3, #1
 8012650:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8012652:	2300      	movs	r3, #0
 8012654:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 8012656:	60a3      	str	r3, [r4, #8]
}
 8012658:	bd10      	pop	{r4, pc}
 801265a:	4770      	bx	lr

0801265c <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 801265c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012660:	4299      	cmp	r1, r3
 8012662:	d81f      	bhi.n	80126a4 <mbedtls_mpi_grow+0x48>
{
 8012664:	b570      	push	{r4, r5, r6, lr}
 8012666:	4604      	mov	r4, r0
 8012668:	460d      	mov	r5, r1
    if( X->n < nblimbs )
 801266a:	6843      	ldr	r3, [r0, #4]
 801266c:	428b      	cmp	r3, r1
 801266e:	d301      	bcc.n	8012674 <mbedtls_mpi_grow+0x18>
    return( 0 );
 8012670:	2000      	movs	r0, #0
}
 8012672:	bd70      	pop	{r4, r5, r6, pc}
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 8012674:	2104      	movs	r1, #4
 8012676:	4628      	mov	r0, r5
 8012678:	f016 fc08 	bl	8028e8c <mbedtls_calloc>
 801267c:	4606      	mov	r6, r0
 801267e:	b1a0      	cbz	r0, 80126aa <mbedtls_mpi_grow+0x4e>
        if( X->p != NULL )
 8012680:	68a1      	ldr	r1, [r4, #8]
 8012682:	b159      	cbz	r1, 801269c <mbedtls_mpi_grow+0x40>
            memcpy( p, X->p, X->n * ciL );
 8012684:	6862      	ldr	r2, [r4, #4]
 8012686:	0092      	lsls	r2, r2, #2
 8012688:	f017 ff57 	bl	802a53a <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 801268c:	6861      	ldr	r1, [r4, #4]
 801268e:	0089      	lsls	r1, r1, #2
 8012690:	68a0      	ldr	r0, [r4, #8]
 8012692:	f008 fc57 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
 8012696:	68a0      	ldr	r0, [r4, #8]
 8012698:	f016 fc06 	bl	8028ea8 <mbedtls_free>
        X->n = nblimbs;
 801269c:	6065      	str	r5, [r4, #4]
        X->p = p;
 801269e:	60a6      	str	r6, [r4, #8]
    return( 0 );
 80126a0:	2000      	movs	r0, #0
 80126a2:	e7e6      	b.n	8012672 <mbedtls_mpi_grow+0x16>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80126a4:	f06f 000f 	mvn.w	r0, #15
}
 80126a8:	4770      	bx	lr
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80126aa:	f06f 000f 	mvn.w	r0, #15
 80126ae:	e7e0      	b.n	8012672 <mbedtls_mpi_grow+0x16>

080126b0 <mbedtls_mpi_shrink>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80126b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80126b4:	4299      	cmp	r1, r3
 80126b6:	d82e      	bhi.n	8012716 <mbedtls_mpi_shrink+0x66>
{
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	4605      	mov	r5, r0
    if( X->n <= nblimbs )
 80126bc:	6840      	ldr	r0, [r0, #4]
 80126be:	4288      	cmp	r0, r1
 80126c0:	d925      	bls.n	801270e <mbedtls_mpi_shrink+0x5e>
    for( i = X->n - 1; i > 0; i-- )
 80126c2:	1e43      	subs	r3, r0, #1
 80126c4:	d007      	beq.n	80126d6 <mbedtls_mpi_shrink+0x26>
 80126c6:	68aa      	ldr	r2, [r5, #8]
 80126c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
        if( X->p[i] != 0 )
 80126cc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80126d0:	b90c      	cbnz	r4, 80126d6 <mbedtls_mpi_shrink+0x26>
    for( i = X->n - 1; i > 0; i-- )
 80126d2:	3b01      	subs	r3, #1
 80126d4:	d1fa      	bne.n	80126cc <mbedtls_mpi_shrink+0x1c>
    i++;
 80126d6:	3301      	adds	r3, #1
    if( i < nblimbs )
 80126d8:	4299      	cmp	r1, r3
 80126da:	bf38      	it	cc
 80126dc:	4619      	movcc	r1, r3
 80126de:	460c      	mov	r4, r1
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 80126e0:	2104      	movs	r1, #4
 80126e2:	4620      	mov	r0, r4
 80126e4:	f016 fbd2 	bl	8028e8c <mbedtls_calloc>
 80126e8:	4606      	mov	r6, r0
 80126ea:	b1b8      	cbz	r0, 801271c <mbedtls_mpi_shrink+0x6c>
    if( X->p != NULL )
 80126ec:	68a9      	ldr	r1, [r5, #8]
 80126ee:	b151      	cbz	r1, 8012706 <mbedtls_mpi_shrink+0x56>
        memcpy( p, X->p, i * ciL );
 80126f0:	00a2      	lsls	r2, r4, #2
 80126f2:	f017 ff22 	bl	802a53a <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
 80126f6:	6869      	ldr	r1, [r5, #4]
 80126f8:	0089      	lsls	r1, r1, #2
 80126fa:	68a8      	ldr	r0, [r5, #8]
 80126fc:	f008 fc22 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
 8012700:	68a8      	ldr	r0, [r5, #8]
 8012702:	f016 fbd1 	bl	8028ea8 <mbedtls_free>
    X->n = i;
 8012706:	606c      	str	r4, [r5, #4]
    X->p = p;
 8012708:	60ae      	str	r6, [r5, #8]
    return( 0 );
 801270a:	2000      	movs	r0, #0
}
 801270c:	bd70      	pop	{r4, r5, r6, pc}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 801270e:	4628      	mov	r0, r5
 8012710:	f7ff ffa4 	bl	801265c <mbedtls_mpi_grow>
 8012714:	e7fa      	b.n	801270c <mbedtls_mpi_shrink+0x5c>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8012716:	f06f 000f 	mvn.w	r0, #15
}
 801271a:	4770      	bx	lr
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801271c:	f06f 000f 	mvn.w	r0, #15
 8012720:	e7f4      	b.n	801270c <mbedtls_mpi_shrink+0x5c>

08012722 <mbedtls_mpi_copy>:
    if( X == Y )
 8012722:	4288      	cmp	r0, r1
 8012724:	d02d      	beq.n	8012782 <mbedtls_mpi_copy+0x60>
{
 8012726:	b570      	push	{r4, r5, r6, lr}
 8012728:	4606      	mov	r6, r0
 801272a:	460d      	mov	r5, r1
    if( Y->p == NULL )
 801272c:	688a      	ldr	r2, [r1, #8]
 801272e:	b1aa      	cbz	r2, 801275c <mbedtls_mpi_copy+0x3a>
    for( i = Y->n - 1; i > 0; i-- )
 8012730:	6849      	ldr	r1, [r1, #4]
 8012732:	1e4b      	subs	r3, r1, #1
 8012734:	d006      	beq.n	8012744 <mbedtls_mpi_copy+0x22>
 8012736:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        if( Y->p[i] != 0 )
 801273a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 801273e:	b90c      	cbnz	r4, 8012744 <mbedtls_mpi_copy+0x22>
    for( i = Y->n - 1; i > 0; i-- )
 8012740:	3b01      	subs	r3, #1
 8012742:	d1fa      	bne.n	801273a <mbedtls_mpi_copy+0x18>
    i++;
 8012744:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
 8012746:	682b      	ldr	r3, [r5, #0]
 8012748:	6033      	str	r3, [r6, #0]
    if( X->n < i )
 801274a:	6872      	ldr	r2, [r6, #4]
 801274c:	42a2      	cmp	r2, r4
 801274e:	d209      	bcs.n	8012764 <mbedtls_mpi_copy+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 8012750:	4621      	mov	r1, r4
 8012752:	4630      	mov	r0, r6
 8012754:	f7ff ff82 	bl	801265c <mbedtls_mpi_grow>
 8012758:	b160      	cbz	r0, 8012774 <mbedtls_mpi_copy+0x52>
 801275a:	e011      	b.n	8012780 <mbedtls_mpi_copy+0x5e>
        mbedtls_mpi_free( X );
 801275c:	f7ff ff6b 	bl	8012636 <mbedtls_mpi_free>
        return( 0 );
 8012760:	2000      	movs	r0, #0
 8012762:	e00d      	b.n	8012780 <mbedtls_mpi_copy+0x5e>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 8012764:	1b12      	subs	r2, r2, r4
 8012766:	68b0      	ldr	r0, [r6, #8]
 8012768:	0092      	lsls	r2, r2, #2
 801276a:	2100      	movs	r1, #0
 801276c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8012770:	f017 ff0b 	bl	802a58a <memset>
    memcpy( X->p, Y->p, i * ciL );
 8012774:	00a2      	lsls	r2, r4, #2
 8012776:	68a9      	ldr	r1, [r5, #8]
 8012778:	68b0      	ldr	r0, [r6, #8]
 801277a:	f017 fede 	bl	802a53a <memcpy>
 801277e:	2000      	movs	r0, #0
}
 8012780:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 8012782:	2000      	movs	r0, #0
}
 8012784:	4770      	bx	lr

08012786 <mbedtls_mpi_safe_cond_assign>:
{
 8012786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012788:	4605      	mov	r5, r0
 801278a:	460f      	mov	r7, r1
 801278c:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 801278e:	6849      	ldr	r1, [r1, #4]
 8012790:	f7ff ff64 	bl	801265c <mbedtls_mpi_grow>
 8012794:	bb68      	cbnz	r0, 80127f2 <mbedtls_mpi_safe_cond_assign+0x6c>
    assign = (assign | (unsigned char)-assign) >> 7;
 8012796:	4261      	negs	r1, r4
 8012798:	4321      	orrs	r1, r4
 801279a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 801279e:	f1c1 0c01 	rsb	ip, r1, #1
 80127a2:	682b      	ldr	r3, [r5, #0]
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	fb02 f201 	mul.w	r2, r2, r1
 80127aa:	fb03 230c 	mla	r3, r3, ip, r2
 80127ae:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	b183      	cbz	r3, 80127d6 <mbedtls_mpi_safe_cond_assign+0x50>
 80127b4:	2300      	movs	r3, #0
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 80127b6:	68ae      	ldr	r6, [r5, #8]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80127be:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
 80127c2:	fb04 f40c 	mul.w	r4, r4, ip
 80127c6:	fb02 4201 	mla	r2, r2, r1, r4
 80127ca:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 80127ce:	3301      	adds	r3, #1
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d8ef      	bhi.n	80127b6 <mbedtls_mpi_safe_cond_assign+0x30>
    for( ; i < X->n; i++ )
 80127d6:	686a      	ldr	r2, [r5, #4]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d90a      	bls.n	80127f2 <mbedtls_mpi_safe_cond_assign+0x6c>
        X->p[i] *= ( 1 - assign );
 80127dc:	68a9      	ldr	r1, [r5, #8]
 80127de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80127e2:	fb0c f202 	mul.w	r2, ip, r2
 80127e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i < X->n; i++ )
 80127ea:	3301      	adds	r3, #1
 80127ec:	686a      	ldr	r2, [r5, #4]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d8f4      	bhi.n	80127dc <mbedtls_mpi_safe_cond_assign+0x56>
}
 80127f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127f4 <mbedtls_mpi_lset>:
{
 80127f4:	b570      	push	{r4, r5, r6, lr}
 80127f6:	4604      	mov	r4, r0
 80127f8:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80127fa:	2101      	movs	r1, #1
 80127fc:	f7ff ff2e 	bl	801265c <mbedtls_mpi_grow>
 8012800:	4606      	mov	r6, r0
 8012802:	b108      	cbz	r0, 8012808 <mbedtls_mpi_lset+0x14>
}
 8012804:	4630      	mov	r0, r6
 8012806:	bd70      	pop	{r4, r5, r6, pc}
    memset( X->p, 0, X->n * ciL );
 8012808:	6862      	ldr	r2, [r4, #4]
 801280a:	0092      	lsls	r2, r2, #2
 801280c:	2100      	movs	r1, #0
 801280e:	68a0      	ldr	r0, [r4, #8]
 8012810:	f017 febb 	bl	802a58a <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 8012814:	68a3      	ldr	r3, [r4, #8]
 8012816:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 801281a:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 801281e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 8012820:	2d00      	cmp	r5, #0
 8012822:	bfb4      	ite	lt
 8012824:	f04f 33ff 	movlt.w	r3, #4294967295
 8012828:	2301      	movge	r3, #1
 801282a:	6023      	str	r3, [r4, #0]
    return( ret );
 801282c:	e7ea      	b.n	8012804 <mbedtls_mpi_lset+0x10>

0801282e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 801282e:	6843      	ldr	r3, [r0, #4]
 8012830:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 8012834:	d20a      	bcs.n	801284c <mbedtls_mpi_get_bit+0x1e>
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 8012836:	094a      	lsrs	r2, r1, #5
 8012838:	6883      	ldr	r3, [r0, #8]
 801283a:	f001 011f 	and.w	r1, r1, #31
 801283e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012842:	fa20 f101 	lsr.w	r1, r0, r1
 8012846:	f001 0001 	and.w	r0, r1, #1
 801284a:	4770      	bx	lr
        return( 0 );
 801284c:	2000      	movs	r0, #0
}
 801284e:	4770      	bx	lr

08012850 <mbedtls_mpi_lsb>:
{
 8012850:	b470      	push	{r4, r5, r6}
    for( i = 0; i < X->n; i++ )
 8012852:	6845      	ldr	r5, [r0, #4]
 8012854:	b1c5      	cbz	r5, 8012888 <mbedtls_mpi_lsb+0x38>
 8012856:	6884      	ldr	r4, [r0, #8]
 8012858:	3c04      	subs	r4, #4
    size_t i, j, count = 0;
 801285a:	2000      	movs	r0, #0
    for( i = 0; i < X->n; i++ )
 801285c:	4606      	mov	r6, r0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 801285e:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8012862:	f011 0f01 	tst.w	r1, #1
 8012866:	d110      	bne.n	801288a <mbedtls_mpi_lsb+0x3a>
        for( j = 0; j < biL; j++, count++ )
 8012868:	3001      	adds	r0, #1
 801286a:	2201      	movs	r2, #1
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 801286c:	fa21 f302 	lsr.w	r3, r1, r2
 8012870:	f013 0301 	ands.w	r3, r3, #1
 8012874:	d109      	bne.n	801288a <mbedtls_mpi_lsb+0x3a>
        for( j = 0; j < biL; j++, count++ )
 8012876:	3201      	adds	r2, #1
 8012878:	3001      	adds	r0, #1
 801287a:	2a20      	cmp	r2, #32
 801287c:	d1f6      	bne.n	801286c <mbedtls_mpi_lsb+0x1c>
    for( i = 0; i < X->n; i++ )
 801287e:	3601      	adds	r6, #1
 8012880:	42ae      	cmp	r6, r5
 8012882:	d1ec      	bne.n	801285e <mbedtls_mpi_lsb+0xe>
    return( 0 );
 8012884:	4618      	mov	r0, r3
 8012886:	e000      	b.n	801288a <mbedtls_mpi_lsb+0x3a>
 8012888:	4628      	mov	r0, r5
}
 801288a:	bc70      	pop	{r4, r5, r6}
 801288c:	4770      	bx	lr

0801288e <mbedtls_mpi_bitlen>:
{
 801288e:	b410      	push	{r4}
 8012890:	4604      	mov	r4, r0
    if( X->n == 0 )
 8012892:	6840      	ldr	r0, [r0, #4]
 8012894:	b1d0      	cbz	r0, 80128cc <mbedtls_mpi_bitlen+0x3e>
    for( i = X->n - 1; i > 0; i-- )
 8012896:	1e43      	subs	r3, r0, #1
 8012898:	d007      	beq.n	80128aa <mbedtls_mpi_bitlen+0x1c>
 801289a:	68a2      	ldr	r2, [r4, #8]
 801289c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
        if( X->p[i] != 0 )
 80128a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80128a4:	b909      	cbnz	r1, 80128aa <mbedtls_mpi_bitlen+0x1c>
    for( i = X->n - 1; i > 0; i-- )
 80128a6:	3b01      	subs	r3, #1
 80128a8:	d1fa      	bne.n	80128a0 <mbedtls_mpi_bitlen+0x12>
    j = biL - mbedtls_clz( X->p[i] );
 80128aa:	68a2      	ldr	r2, [r4, #8]
 80128ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
        if( x & mask ) break;
 80128b0:	2900      	cmp	r1, #0
 80128b2:	db0e      	blt.n	80128d2 <mbedtls_mpi_bitlen+0x44>
    for( j = 0; j < biL; j++ )
 80128b4:	2001      	movs	r0, #1
        mask >>= 1;
 80128b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        if( x & mask ) break;
 80128ba:	4211      	tst	r1, r2
 80128bc:	d103      	bne.n	80128c6 <mbedtls_mpi_bitlen+0x38>
        mask >>= 1;
 80128be:	0852      	lsrs	r2, r2, #1
    for( j = 0; j < biL; j++ )
 80128c0:	3001      	adds	r0, #1
 80128c2:	2820      	cmp	r0, #32
 80128c4:	d1f9      	bne.n	80128ba <mbedtls_mpi_bitlen+0x2c>
    return( ( i * biL ) + j );
 80128c6:	3301      	adds	r3, #1
 80128c8:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
 80128cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128d0:	4770      	bx	lr
    for( j = 0; j < biL; j++ )
 80128d2:	2000      	movs	r0, #0
 80128d4:	e7f7      	b.n	80128c6 <mbedtls_mpi_bitlen+0x38>

080128d6 <mbedtls_mpi_size>:
{
 80128d6:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 80128d8:	f7ff ffd9 	bl	801288e <mbedtls_mpi_bitlen>
 80128dc:	3007      	adds	r0, #7
}
 80128de:	08c0      	lsrs	r0, r0, #3
 80128e0:	bd08      	pop	{r3, pc}

080128e2 <mbedtls_mpi_read_binary>:
{
 80128e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e6:	4604      	mov	r4, r0
 80128e8:	460f      	mov	r7, r1
 80128ea:	4616      	mov	r6, r2
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 80128ec:	f012 0303 	ands.w	r3, r2, #3
 80128f0:	bf18      	it	ne
 80128f2:	2301      	movne	r3, #1
 80128f4:	eb03 0592 	add.w	r5, r3, r2, lsr #2
    if( X->n != limbs )
 80128f8:	6843      	ldr	r3, [r0, #4]
 80128fa:	42ab      	cmp	r3, r5
 80128fc:	d00c      	beq.n	8012918 <mbedtls_mpi_read_binary+0x36>
        mbedtls_mpi_free( X );
 80128fe:	f7ff fe9a 	bl	8012636 <mbedtls_mpi_free>
    X->s = 1;
 8012902:	2301      	movs	r3, #1
 8012904:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 801290a:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 801290c:	4629      	mov	r1, r5
 801290e:	4620      	mov	r0, r4
 8012910:	f7ff fea4 	bl	801265c <mbedtls_mpi_grow>
 8012914:	4680      	mov	r8, r0
 8012916:	b990      	cbnz	r0, 801293e <mbedtls_mpi_read_binary+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8012918:	2100      	movs	r1, #0
 801291a:	4620      	mov	r0, r4
 801291c:	f7ff ff6a 	bl	80127f4 <mbedtls_mpi_lset>
 8012920:	4680      	mov	r8, r0
 8012922:	b960      	cbnz	r0, 801293e <mbedtls_mpi_read_binary+0x5c>
    if( buf != NULL )
 8012924:	b15f      	cbz	r7, 801293e <mbedtls_mpi_read_binary+0x5c>
    size_t const overhead = ( limbs * ciL ) - buflen;
 8012926:	ebc6 0385 	rsb	r3, r6, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
 801292a:	68a0      	ldr	r0, [r4, #8]
 801292c:	4632      	mov	r2, r6
 801292e:	4639      	mov	r1, r7
 8012930:	4418      	add	r0, r3
 8012932:	f017 fe02 	bl	802a53a <memcpy>
        mpi_bigendian_to_host( X->p, limbs );
 8012936:	4629      	mov	r1, r5
 8012938:	68a0      	ldr	r0, [r4, #8]
 801293a:	f7ff fe63 	bl	8012604 <mpi_bigendian_to_host>
}
 801293e:	4640      	mov	r0, r8
 8012940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012944 <mbedtls_mpi_write_binary>:
{
 8012944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012946:	4606      	mov	r6, r0
 8012948:	4608      	mov	r0, r1
    stored_bytes = X->n * ciL;
 801294a:	6873      	ldr	r3, [r6, #4]
 801294c:	009f      	lsls	r7, r3, #2
    if( stored_bytes < buflen )
 801294e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8012952:	d81e      	bhi.n	8012992 <mbedtls_mpi_write_binary+0x4e>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 8012954:	4297      	cmp	r7, r2
 8012956:	d923      	bls.n	80129a0 <mbedtls_mpi_write_binary+0x5c>
            if( GET_BYTE( X, i ) != 0 )
 8012958:	68b1      	ldr	r1, [r6, #8]
 801295a:	f022 0503 	bic.w	r5, r2, #3
 801295e:	f002 0303 	and.w	r3, r2, #3
 8012962:	00dc      	lsls	r4, r3, #3
 8012964:	594b      	ldr	r3, [r1, r5]
 8012966:	40e3      	lsrs	r3, r4
 8012968:	f013 0fff 	tst.w	r3, #255	; 0xff
 801296c:	d12a      	bne.n	80129c4 <mbedtls_mpi_write_binary+0x80>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
 801296e:	4613      	mov	r3, r2
 8012970:	3301      	adds	r3, #1
 8012972:	429f      	cmp	r7, r3
 8012974:	d014      	beq.n	80129a0 <mbedtls_mpi_write_binary+0x5c>
            if( GET_BYTE( X, i ) != 0 )
 8012976:	f023 0c03 	bic.w	ip, r3, #3
 801297a:	f003 0403 	and.w	r4, r3, #3
 801297e:	00e5      	lsls	r5, r4, #3
 8012980:	f851 400c 	ldr.w	r4, [r1, ip]
 8012984:	40ec      	lsrs	r4, r5
 8012986:	f014 0fff 	tst.w	r4, #255	; 0xff
 801298a:	d0f1      	beq.n	8012970 <mbedtls_mpi_write_binary+0x2c>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 801298c:	f06f 0007 	mvn.w	r0, #7
 8012990:	e017      	b.n	80129c2 <mbedtls_mpi_write_binary+0x7e>
        p = buf + buflen - stored_bytes;
 8012992:	1bd2      	subs	r2, r2, r7
 8012994:	188c      	adds	r4, r1, r2
        memset( buf, 0, buflen - stored_bytes );
 8012996:	2100      	movs	r1, #0
 8012998:	f017 fdf7 	bl	802a58a <memset>
        p = buf + buflen - stored_bytes;
 801299c:	4620      	mov	r0, r4
        bytes_to_copy = stored_bytes;
 801299e:	463a      	mov	r2, r7
    for( i = 0; i < bytes_to_copy; i++ )
 80129a0:	b19a      	cbz	r2, 80129ca <mbedtls_mpi_write_binary+0x86>
 80129a2:	1881      	adds	r1, r0, r2
 80129a4:	2300      	movs	r3, #0
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
 80129a6:	f023 0003 	bic.w	r0, r3, #3
 80129aa:	68b7      	ldr	r7, [r6, #8]
 80129ac:	f003 0403 	and.w	r4, r3, #3
 80129b0:	00e5      	lsls	r5, r4, #3
 80129b2:	583c      	ldr	r4, [r7, r0]
 80129b4:	40ec      	lsrs	r4, r5
 80129b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
 80129ba:	3301      	adds	r3, #1
 80129bc:	429a      	cmp	r2, r3
 80129be:	d1f2      	bne.n	80129a6 <mbedtls_mpi_write_binary+0x62>
    return( 0 );
 80129c0:	2000      	movs	r0, #0
}
 80129c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 80129c4:	f06f 0007 	mvn.w	r0, #7
 80129c8:	e7fb      	b.n	80129c2 <mbedtls_mpi_write_binary+0x7e>
    return( 0 );
 80129ca:	2000      	movs	r0, #0
 80129cc:	e7f9      	b.n	80129c2 <mbedtls_mpi_write_binary+0x7e>

080129ce <mbedtls_mpi_shift_l>:
{
 80129ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129d0:	4605      	mov	r5, r0
 80129d2:	460f      	mov	r7, r1
    v0 = count / (biL    );
 80129d4:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
 80129d6:	f001 061f 	and.w	r6, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 80129da:	f7ff ff58 	bl	801288e <mbedtls_mpi_bitlen>
 80129de:	4438      	add	r0, r7
    if( X->n * biL < i )
 80129e0:	686b      	ldr	r3, [r5, #4]
 80129e2:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 80129e6:	d83a      	bhi.n	8012a5e <mbedtls_mpi_shift_l+0x90>
    if( v0 > 0 )
 80129e8:	2f1f      	cmp	r7, #31
 80129ea:	d91c      	bls.n	8012a26 <mbedtls_mpi_shift_l+0x58>
        for( i = X->n; i > v0; i-- )
 80129ec:	686b      	ldr	r3, [r5, #4]
 80129ee:	429c      	cmp	r4, r3
 80129f0:	d20f      	bcs.n	8012a12 <mbedtls_mpi_shift_l+0x44>
 80129f2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80129f6:	3a01      	subs	r2, #1
 80129f8:	0092      	lsls	r2, r2, #2
 80129fa:	ebc4 7784 	rsb	r7, r4, r4, lsl #30
 80129fe:	00bf      	lsls	r7, r7, #2
            X->p[i - 1] = X->p[i - v0 - 1];
 8012a00:	68a9      	ldr	r1, [r5, #8]
 8012a02:	1888      	adds	r0, r1, r2
 8012a04:	59c0      	ldr	r0, [r0, r7]
 8012a06:	5088      	str	r0, [r1, r2]
        for( i = X->n; i > v0; i-- )
 8012a08:	3b01      	subs	r3, #1
 8012a0a:	3a04      	subs	r2, #4
 8012a0c:	429c      	cmp	r4, r3
 8012a0e:	d1f7      	bne.n	8012a00 <mbedtls_mpi_shift_l+0x32>
 8012a10:	4623      	mov	r3, r4
        for( ; i > 0; i-- )
 8012a12:	b143      	cbz	r3, 8012a26 <mbedtls_mpi_shift_l+0x58>
 8012a14:	3b01      	subs	r3, #1
            X->p[i - 1] = 0;
 8012a16:	2100      	movs	r1, #0
 8012a18:	68aa      	ldr	r2, [r5, #8]
 8012a1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i > 0; i-- )
 8012a1e:	3b01      	subs	r3, #1
 8012a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a24:	d1f8      	bne.n	8012a18 <mbedtls_mpi_shift_l+0x4a>
    if( t1 > 0 )
 8012a26:	b336      	cbz	r6, 8012a76 <mbedtls_mpi_shift_l+0xa8>
        for( i = v0; i < X->n; i++ )
 8012a28:	686b      	ldr	r3, [r5, #4]
 8012a2a:	429c      	cmp	r4, r3
 8012a2c:	d225      	bcs.n	8012a7a <mbedtls_mpi_shift_l+0xac>
    mbedtls_mpi_uint r0 = 0, r1;
 8012a2e:	2100      	movs	r1, #0
            r1 = X->p[i] >> (biL - t1);
 8012a30:	f1c6 0720 	rsb	r7, r6, #32
 8012a34:	68aa      	ldr	r2, [r5, #8]
 8012a36:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8012a3a:	4608      	mov	r0, r1
 8012a3c:	fa23 f107 	lsr.w	r1, r3, r7
            X->p[i] <<= t1;
 8012a40:	40b3      	lsls	r3, r6
 8012a42:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            X->p[i] |= r0;
 8012a46:	68aa      	ldr	r2, [r5, #8]
 8012a48:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8012a4c:	4303      	orrs	r3, r0
 8012a4e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for( i = v0; i < X->n; i++ )
 8012a52:	3401      	adds	r4, #1
 8012a54:	686b      	ldr	r3, [r5, #4]
 8012a56:	42a3      	cmp	r3, r4
 8012a58:	d8ec      	bhi.n	8012a34 <mbedtls_mpi_shift_l+0x66>
    ret = 0;
 8012a5a:	2000      	movs	r0, #0
cleanup:
 8012a5c:	e00c      	b.n	8012a78 <mbedtls_mpi_shift_l+0xaa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 8012a5e:	f010 011f 	ands.w	r1, r0, #31
 8012a62:	bf18      	it	ne
 8012a64:	2101      	movne	r1, #1
 8012a66:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8012a6a:	4628      	mov	r0, r5
 8012a6c:	f7ff fdf6 	bl	801265c <mbedtls_mpi_grow>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d0b9      	beq.n	80129e8 <mbedtls_mpi_shift_l+0x1a>
 8012a74:	e000      	b.n	8012a78 <mbedtls_mpi_shift_l+0xaa>
    ret = 0;
 8012a76:	2000      	movs	r0, #0
}
 8012a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 0;
 8012a7a:	2000      	movs	r0, #0
    return( ret );
 8012a7c:	e7fc      	b.n	8012a78 <mbedtls_mpi_shift_l+0xaa>

08012a7e <mbedtls_mpi_shift_r>:
{
 8012a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8012a80:	6843      	ldr	r3, [r0, #4]
 8012a82:	ebb3 1f51 	cmp.w	r3, r1, lsr #5
 8012a86:	d33e      	bcc.n	8012b06 <mbedtls_mpi_shift_r+0x88>
 8012a88:	094e      	lsrs	r6, r1, #5
 8012a8a:	f001 041f 	and.w	r4, r1, #31
 8012a8e:	42b3      	cmp	r3, r6
 8012a90:	d034      	beq.n	8012afc <mbedtls_mpi_shift_r+0x7e>
    if( v0 > 0 )
 8012a92:	291f      	cmp	r1, #31
 8012a94:	d916      	bls.n	8012ac4 <mbedtls_mpi_shift_r+0x46>
        for( i = 0; i < X->n - v0; i++ )
 8012a96:	00b1      	lsls	r1, r6, #2
 8012a98:	2300      	movs	r3, #0
            X->p[i] = X->p[i + v0];
 8012a9a:	6882      	ldr	r2, [r0, #8]
 8012a9c:	5855      	ldr	r5, [r2, r1]
 8012a9e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	3104      	adds	r1, #4
 8012aa6:	6842      	ldr	r2, [r0, #4]
 8012aa8:	1b92      	subs	r2, r2, r6
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d8f5      	bhi.n	8012a9a <mbedtls_mpi_shift_r+0x1c>
        for( ; i < X->n; i++ )
 8012aae:	6842      	ldr	r2, [r0, #4]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d907      	bls.n	8012ac4 <mbedtls_mpi_shift_r+0x46>
            X->p[i] = 0;
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	6882      	ldr	r2, [r0, #8]
 8012ab8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for( ; i < X->n; i++ )
 8012abc:	3301      	adds	r3, #1
 8012abe:	6842      	ldr	r2, [r0, #4]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d8f8      	bhi.n	8012ab6 <mbedtls_mpi_shift_r+0x38>
    if( v1 > 0 )
 8012ac4:	b32c      	cbz	r4, 8012b12 <mbedtls_mpi_shift_r+0x94>
        for( i = X->n; i > 0; i-- )
 8012ac6:	6843      	ldr	r3, [r0, #4]
 8012ac8:	b32b      	cbz	r3, 8012b16 <mbedtls_mpi_shift_r+0x98>
 8012aca:	3b01      	subs	r3, #1
    mbedtls_mpi_uint r0 = 0, r1;
 8012acc:	2500      	movs	r5, #0
            r1 = X->p[i - 1] << (biL - v1);
 8012ace:	f1c4 0720 	rsb	r7, r4, #32
 8012ad2:	6881      	ldr	r1, [r0, #8]
 8012ad4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8012ad8:	462e      	mov	r6, r5
 8012ada:	fa02 f507 	lsl.w	r5, r2, r7
            X->p[i - 1] >>= v1;
 8012ade:	40e2      	lsrs	r2, r4
 8012ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            X->p[i - 1] |= r0;
 8012ae4:	6881      	ldr	r1, [r0, #8]
 8012ae6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8012aea:	4332      	orrs	r2, r6
 8012aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for( i = X->n; i > 0; i-- )
 8012af0:	3b01      	subs	r3, #1
 8012af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012af6:	d1ec      	bne.n	8012ad2 <mbedtls_mpi_shift_r+0x54>
    return( 0 );
 8012af8:	2000      	movs	r0, #0
}
 8012afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 8012afc:	b91c      	cbnz	r4, 8012b06 <mbedtls_mpi_shift_r+0x88>
    if( v0 > 0 )
 8012afe:	291f      	cmp	r1, #31
 8012b00:	d805      	bhi.n	8012b0e <mbedtls_mpi_shift_r+0x90>
    return( 0 );
 8012b02:	2000      	movs	r0, #0
 8012b04:	e7f9      	b.n	8012afa <mbedtls_mpi_shift_r+0x7c>
        return mbedtls_mpi_lset( X, 0 );
 8012b06:	2100      	movs	r1, #0
 8012b08:	f7ff fe74 	bl	80127f4 <mbedtls_mpi_lset>
 8012b0c:	e7f5      	b.n	8012afa <mbedtls_mpi_shift_r+0x7c>
        for( i = 0; i < X->n - v0; i++ )
 8012b0e:	4623      	mov	r3, r4
 8012b10:	e7cd      	b.n	8012aae <mbedtls_mpi_shift_r+0x30>
    return( 0 );
 8012b12:	2000      	movs	r0, #0
 8012b14:	e7f1      	b.n	8012afa <mbedtls_mpi_shift_r+0x7c>
 8012b16:	2000      	movs	r0, #0
 8012b18:	e7ef      	b.n	8012afa <mbedtls_mpi_shift_r+0x7c>

08012b1a <mbedtls_mpi_cmp_abs>:
{
 8012b1a:	b430      	push	{r4, r5}
    for( i = X->n; i > 0; i-- )
 8012b1c:	6843      	ldr	r3, [r0, #4]
 8012b1e:	b13b      	cbz	r3, 8012b30 <mbedtls_mpi_cmp_abs+0x16>
 8012b20:	6882      	ldr	r2, [r0, #8]
 8012b22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        if( X->p[i - 1] != 0 )
 8012b26:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8012b2a:	b98c      	cbnz	r4, 8012b50 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	d1fa      	bne.n	8012b26 <mbedtls_mpi_cmp_abs+0xc>
    for( j = Y->n; j > 0; j-- )
 8012b30:	684a      	ldr	r2, [r1, #4]
 8012b32:	2300      	movs	r3, #0
 8012b34:	b3c2      	cbz	r2, 8012ba8 <mbedtls_mpi_cmp_abs+0x8e>
 8012b36:	688c      	ldr	r4, [r1, #8]
 8012b38:	eb04 0482 	add.w	r4, r4, r2, lsl #2
        if( Y->p[j - 1] != 0 )
 8012b3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b40:	b955      	cbnz	r5, 8012b58 <mbedtls_mpi_cmp_abs+0x3e>
    for( j = Y->n; j > 0; j-- )
 8012b42:	3a01      	subs	r2, #1
 8012b44:	d1fa      	bne.n	8012b3c <mbedtls_mpi_cmp_abs+0x22>
    if( i == 0 && j == 0 )
 8012b46:	b36b      	cbz	r3, 8012ba4 <mbedtls_mpi_cmp_abs+0x8a>
    if( i > j ) return(  1 );
 8012b48:	b15b      	cbz	r3, 8012b62 <mbedtls_mpi_cmp_abs+0x48>
 8012b4a:	2001      	movs	r0, #1
}
 8012b4c:	bc30      	pop	{r4, r5}
 8012b4e:	4770      	bx	lr
    for( j = Y->n; j > 0; j-- )
 8012b50:	684a      	ldr	r2, [r1, #4]
 8012b52:	2a00      	cmp	r2, #0
 8012b54:	d1ef      	bne.n	8012b36 <mbedtls_mpi_cmp_abs+0x1c>
 8012b56:	e7f6      	b.n	8012b46 <mbedtls_mpi_cmp_abs+0x2c>
    if( i == 0 && j == 0 )
 8012b58:	b9a3      	cbnz	r3, 8012b84 <mbedtls_mpi_cmp_abs+0x6a>
 8012b5a:	b1ba      	cbz	r2, 8012b8c <mbedtls_mpi_cmp_abs+0x72>
    if( j > i ) return( -1 );
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d317      	bcc.n	8012b90 <mbedtls_mpi_cmp_abs+0x76>
    for( ; i > 0; i-- )
 8012b60:	b1cb      	cbz	r3, 8012b96 <mbedtls_mpi_cmp_abs+0x7c>
 8012b62:	6884      	ldr	r4, [r0, #8]
 8012b64:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012b68:	6888      	ldr	r0, [r1, #8]
 8012b6a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8012b6e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8012b72:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8012b76:	4291      	cmp	r1, r2
 8012b78:	d80f      	bhi.n	8012b9a <mbedtls_mpi_cmp_abs+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8012b7a:	d310      	bcc.n	8012b9e <mbedtls_mpi_cmp_abs+0x84>
    for( ; i > 0; i-- )
 8012b7c:	3b01      	subs	r3, #1
 8012b7e:	d1f6      	bne.n	8012b6e <mbedtls_mpi_cmp_abs+0x54>
    return( 0 );
 8012b80:	2000      	movs	r0, #0
 8012b82:	e7e3      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
    if( i > j ) return(  1 );
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d9e9      	bls.n	8012b5c <mbedtls_mpi_cmp_abs+0x42>
 8012b88:	2001      	movs	r0, #1
 8012b8a:	e7df      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
        return( 0 );
 8012b8c:	2000      	movs	r0, #0
 8012b8e:	e7dd      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
    if( j > i ) return( -1 );
 8012b90:	f04f 30ff 	mov.w	r0, #4294967295
 8012b94:	e7da      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
    return( 0 );
 8012b96:	2000      	movs	r0, #0
 8012b98:	e7d8      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 8012b9a:	2001      	movs	r0, #1
 8012b9c:	e7d6      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 8012b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012ba2:	e7d3      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
        return( 0 );
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	e7d1      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>
 8012ba8:	2000      	movs	r0, #0
 8012baa:	e7cf      	b.n	8012b4c <mbedtls_mpi_cmp_abs+0x32>

08012bac <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 8012bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb0:	b087      	sub	sp, #28
 8012bb2:	4614      	mov	r4, r2
 8012bb4:	9201      	str	r2, [sp, #4]
 8012bb6:	9302      	str	r3, [sp, #8]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 8012bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012bba:	685a      	ldr	r2, [r3, #4]
 8012bbc:	6863      	ldr	r3, [r4, #4]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d368      	bcc.n	8012c96 <mpi_montmul+0xea>
 8012bc4:	4682      	mov	sl, r0
 8012bc6:	468b      	mov	fp, r1
 8012bc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012bca:	6898      	ldr	r0, [r3, #8]
 8012bcc:	2800      	cmp	r0, #0
 8012bce:	d065      	beq.n	8012c9c <mpi_montmul+0xf0>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 8012bd0:	0092      	lsls	r2, r2, #2
 8012bd2:	2100      	movs	r1, #0
 8012bd4:	f017 fcd9 	bl	802a58a <memset>

    d = T->p;
 8012bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012bda:	689a      	ldr	r2, [r3, #8]
 8012bdc:	4615      	mov	r5, r2
 8012bde:	9204      	str	r2, [sp, #16]
    n = N->n;
 8012be0:	f8d4 8004 	ldr.w	r8, [r4, #4]
    m = ( B->n < n ) ? B->n : n;
 8012be4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8012be8:	4543      	cmp	r3, r8
 8012bea:	bf28      	it	cs
 8012bec:	4643      	movcs	r3, r8
 8012bee:	9303      	str	r3, [sp, #12]

    for( i = 0; i < n; i++ )
 8012bf0:	f1b8 0f00 	cmp.w	r8, #0
 8012bf4:	d02d      	beq.n	8012c52 <mpi_montmul+0xa6>
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 8012bf6:	f108 0901 	add.w	r9, r8, #1
 8012bfa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8012bfe:	9305      	str	r3, [sp, #20]
 8012c00:	eb02 0989 	add.w	r9, r2, r9, lsl #2
    for( i = 0; i < n; i++ )
 8012c04:	2600      	movs	r6, #0
        u0 = A->p[i];
 8012c06:	f8da 3008 	ldr.w	r3, [sl, #8]
 8012c0a:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 8012c0e:	f8db 1008 	ldr.w	r1, [fp, #8]
 8012c12:	680c      	ldr	r4, [r1, #0]
 8012c14:	682b      	ldr	r3, [r5, #0]
 8012c16:	fb04 3407 	mla	r4, r4, r7, r3
 8012c1a:	9b02      	ldr	r3, [sp, #8]
 8012c1c:	fb03 f404 	mul.w	r4, r3, r4
        mpi_mul_hlp( m, B->p, d, u0 );
 8012c20:	463b      	mov	r3, r7
 8012c22:	462a      	mov	r2, r5
 8012c24:	9803      	ldr	r0, [sp, #12]
 8012c26:	f7ff fc19 	bl	801245c <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 8012c2a:	4623      	mov	r3, r4
 8012c2c:	462a      	mov	r2, r5
 8012c2e:	9901      	ldr	r1, [sp, #4]
 8012c30:	6889      	ldr	r1, [r1, #8]
 8012c32:	4640      	mov	r0, r8
 8012c34:	f7ff fc12 	bl	801245c <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 8012c38:	f845 7b04 	str.w	r7, [r5], #4
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f849 3f04 	str.w	r3, [r9, #4]!
    for( i = 0; i < n; i++ )
 8012c42:	3601      	adds	r6, #1
 8012c44:	45b0      	cmp	r8, r6
 8012c46:	d1de      	bne.n	8012c06 <mpi_montmul+0x5a>
 8012c48:	9b05      	ldr	r3, [sp, #20]
 8012c4a:	3b04      	subs	r3, #4
 8012c4c:	9a04      	ldr	r2, [sp, #16]
 8012c4e:	441a      	add	r2, r3
 8012c50:	9204      	str	r2, [sp, #16]
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 8012c52:	f108 0201 	add.w	r2, r8, #1
 8012c56:	0092      	lsls	r2, r2, #2
 8012c58:	9904      	ldr	r1, [sp, #16]
 8012c5a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012c5e:	f017 fc6c 	bl	802a53a <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 8012c62:	9c01      	ldr	r4, [sp, #4]
 8012c64:	4621      	mov	r1, r4
 8012c66:	4650      	mov	r0, sl
 8012c68:	f7ff ff57 	bl	8012b1a <mbedtls_mpi_cmp_abs>
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	db09      	blt.n	8012c84 <mpi_montmul+0xd8>
        mpi_sub_hlp( n, N->p, A->p );
 8012c70:	f8da 2008 	ldr.w	r2, [sl, #8]
 8012c74:	68a1      	ldr	r1, [r4, #8]
 8012c76:	4640      	mov	r0, r8
 8012c78:	f7ff fbc6 	bl	8012408 <mpi_sub_hlp>
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
 8012c7c:	2000      	movs	r0, #0
}
 8012c7e:	b007      	add	sp, #28
 8012c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mpi_sub_hlp( n, A->p, T->p );
 8012c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c86:	689a      	ldr	r2, [r3, #8]
 8012c88:	f8da 1008 	ldr.w	r1, [sl, #8]
 8012c8c:	4640      	mov	r0, r8
 8012c8e:	f7ff fbbb 	bl	8012408 <mpi_sub_hlp>
    return( 0 );
 8012c92:	2000      	movs	r0, #0
 8012c94:	e7f3      	b.n	8012c7e <mpi_montmul+0xd2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8012c96:	f06f 0003 	mvn.w	r0, #3
 8012c9a:	e7f0      	b.n	8012c7e <mpi_montmul+0xd2>
 8012c9c:	f06f 0003 	mvn.w	r0, #3
 8012ca0:	e7ed      	b.n	8012c7e <mpi_montmul+0xd2>

08012ca2 <mbedtls_mpi_cmp_mpi>:
{
 8012ca2:	b470      	push	{r4, r5, r6}
 8012ca4:	4606      	mov	r6, r0
    for( i = X->n; i > 0; i-- )
 8012ca6:	6843      	ldr	r3, [r0, #4]
 8012ca8:	b13b      	cbz	r3, 8012cba <mbedtls_mpi_cmp_mpi+0x18>
 8012caa:	6882      	ldr	r2, [r0, #8]
 8012cac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        if( X->p[i - 1] != 0 )
 8012cb0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8012cb4:	b99c      	cbnz	r4, 8012cde <mbedtls_mpi_cmp_mpi+0x3c>
    for( i = X->n; i > 0; i-- )
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	d1fa      	bne.n	8012cb0 <mbedtls_mpi_cmp_mpi+0xe>
    for( j = Y->n; j > 0; j-- )
 8012cba:	684a      	ldr	r2, [r1, #4]
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	2a00      	cmp	r2, #0
 8012cc0:	d045      	beq.n	8012d4e <mbedtls_mpi_cmp_mpi+0xac>
 8012cc2:	688c      	ldr	r4, [r1, #8]
 8012cc4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
        if( Y->p[j - 1] != 0 )
 8012cc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012ccc:	b95d      	cbnz	r5, 8012ce6 <mbedtls_mpi_cmp_mpi+0x44>
    for( j = Y->n; j > 0; j-- )
 8012cce:	3a01      	subs	r2, #1
 8012cd0:	d1fa      	bne.n	8012cc8 <mbedtls_mpi_cmp_mpi+0x26>
    if( i == 0 && j == 0 )
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d039      	beq.n	8012d4a <mbedtls_mpi_cmp_mpi+0xa8>
    if( i > j ) return(  X->s );
 8012cd6:	b153      	cbz	r3, 8012cee <mbedtls_mpi_cmp_mpi+0x4c>
 8012cd8:	6830      	ldr	r0, [r6, #0]
}
 8012cda:	bc70      	pop	{r4, r5, r6}
 8012cdc:	4770      	bx	lr
    for( j = Y->n; j > 0; j-- )
 8012cde:	684a      	ldr	r2, [r1, #4]
 8012ce0:	2a00      	cmp	r2, #0
 8012ce2:	d1ee      	bne.n	8012cc2 <mbedtls_mpi_cmp_mpi+0x20>
 8012ce4:	e7f5      	b.n	8012cd2 <mbedtls_mpi_cmp_mpi+0x30>
    if( i == 0 && j == 0 )
 8012ce6:	b9d3      	cbnz	r3, 8012d1e <mbedtls_mpi_cmp_mpi+0x7c>
 8012ce8:	b35a      	cbz	r2, 8012d42 <mbedtls_mpi_cmp_mpi+0xa0>
    if( j > i ) return( -Y->s );
 8012cea:	4293      	cmp	r3, r2
 8012cec:	d31a      	bcc.n	8012d24 <mbedtls_mpi_cmp_mpi+0x82>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8012cee:	6830      	ldr	r0, [r6, #0]
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	dd1a      	ble.n	8012d2a <mbedtls_mpi_cmp_mpi+0x88>
 8012cf4:	680a      	ldr	r2, [r1, #0]
 8012cf6:	2a00      	cmp	r2, #0
 8012cf8:	db25      	blt.n	8012d46 <mbedtls_mpi_cmp_mpi+0xa4>
    for( ; i > 0; i-- )
 8012cfa:	b1f3      	cbz	r3, 8012d3a <mbedtls_mpi_cmp_mpi+0x98>
 8012cfc:	68b5      	ldr	r5, [r6, #8]
 8012cfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8012d02:	688c      	ldr	r4, [r1, #8]
 8012d04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 8012d08:	f855 1d04 	ldr.w	r1, [r5, #-4]!
 8012d0c:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8012d10:	4291      	cmp	r1, r2
 8012d12:	d8e2      	bhi.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8012d14:	d313      	bcc.n	8012d3e <mbedtls_mpi_cmp_mpi+0x9c>
    for( ; i > 0; i-- )
 8012d16:	3b01      	subs	r3, #1
 8012d18:	d1f6      	bne.n	8012d08 <mbedtls_mpi_cmp_mpi+0x66>
    return( 0 );
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	e7dd      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d8da      	bhi.n	8012cd8 <mbedtls_mpi_cmp_mpi+0x36>
 8012d22:	e7e2      	b.n	8012cea <mbedtls_mpi_cmp_mpi+0x48>
    if( j > i ) return( -Y->s );
 8012d24:	6808      	ldr	r0, [r1, #0]
 8012d26:	4240      	negs	r0, r0
 8012d28:	e7d7      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 8012d2a:	680a      	ldr	r2, [r1, #0]
 8012d2c:	2a00      	cmp	r2, #0
 8012d2e:	dde4      	ble.n	8012cfa <mbedtls_mpi_cmp_mpi+0x58>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	dae2      	bge.n	8012cfa <mbedtls_mpi_cmp_mpi+0x58>
 8012d34:	f04f 30ff 	mov.w	r0, #4294967295
 8012d38:	e7cf      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
    return( 0 );
 8012d3a:	2000      	movs	r0, #0
 8012d3c:	e7cd      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 8012d3e:	4240      	negs	r0, r0
 8012d40:	e7cb      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
        return( 0 );
 8012d42:	2000      	movs	r0, #0
 8012d44:	e7c9      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 8012d46:	2001      	movs	r0, #1
 8012d48:	e7c7      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
        return( 0 );
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	e7c5      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>
 8012d4e:	2000      	movs	r0, #0
 8012d50:	e7c3      	b.n	8012cda <mbedtls_mpi_cmp_mpi+0x38>

08012d52 <mbedtls_mpi_cmp_int>:
{
 8012d52:	b500      	push	{lr}
 8012d54:	b085      	sub	sp, #20
    *p  = ( z < 0 ) ? -z : z;
 8012d56:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 8012d5a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8012d5e:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 8012d60:	2900      	cmp	r1, #0
 8012d62:	bfb4      	ite	lt
 8012d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d68:	2301      	movge	r3, #1
 8012d6a:	9301      	str	r3, [sp, #4]
    Y.n = 1;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	9302      	str	r3, [sp, #8]
    Y.p = p;
 8012d70:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 8012d74:	a901      	add	r1, sp, #4
 8012d76:	f7ff ff94 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
}
 8012d7a:	b005      	add	sp, #20
 8012d7c:	f85d fb04 	ldr.w	pc, [sp], #4

08012d80 <mbedtls_mpi_add_abs>:
{
 8012d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d84:	4606      	mov	r6, r0
    if( X == B )
 8012d86:	4290      	cmp	r0, r2
 8012d88:	d039      	beq.n	8012dfe <mbedtls_mpi_add_abs+0x7e>
 8012d8a:	4615      	mov	r5, r2
    if( X != A )
 8012d8c:	4288      	cmp	r0, r1
 8012d8e:	d004      	beq.n	8012d9a <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8012d90:	f7ff fcc7 	bl	8012722 <mbedtls_mpi_copy>
 8012d94:	4607      	mov	r7, r0
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d148      	bne.n	8012e2c <mbedtls_mpi_add_abs+0xac>
    X->s = 1;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	6033      	str	r3, [r6, #0]
    for( j = B->n; j > 0; j-- )
 8012d9e:	686c      	ldr	r4, [r5, #4]
 8012da0:	b13c      	cbz	r4, 8012db2 <mbedtls_mpi_add_abs+0x32>
 8012da2:	68ab      	ldr	r3, [r5, #8]
 8012da4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        if( B->p[j - 1] != 0 )
 8012da8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012dac:	b909      	cbnz	r1, 8012db2 <mbedtls_mpi_add_abs+0x32>
    for( j = B->n; j > 0; j-- )
 8012dae:	3c01      	subs	r4, #1
 8012db0:	d1fa      	bne.n	8012da8 <mbedtls_mpi_add_abs+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 8012db2:	4621      	mov	r1, r4
 8012db4:	4630      	mov	r0, r6
 8012db6:	f7ff fc51 	bl	801265c <mbedtls_mpi_grow>
 8012dba:	4607      	mov	r7, r0
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	d135      	bne.n	8012e2c <mbedtls_mpi_add_abs+0xac>
    o = B->p; p = X->p; c = 0;
 8012dc0:	68ab      	ldr	r3, [r5, #8]
 8012dc2:	68b2      	ldr	r2, [r6, #8]
    for( i = 0; i < j; i++, o++, p++ )
 8012dc4:	b394      	cbz	r4, 8012e2c <mbedtls_mpi_add_abs+0xac>
 8012dc6:	f1a3 0e04 	sub.w	lr, r3, #4
    o = B->p; p = X->p; c = 0;
 8012dca:	4610      	mov	r0, r2
 8012dcc:	2500      	movs	r5, #0
    for( i = 0; i < j; i++, o++, p++ )
 8012dce:	4629      	mov	r1, r5
        tmp= *o;
 8012dd0:	f85e cf04 	ldr.w	ip, [lr, #4]!
        *p +=  c; c  = ( *p <  c );
 8012dd4:	6803      	ldr	r3, [r0, #0]
 8012dd6:	18ed      	adds	r5, r5, r3
 8012dd8:	bf2c      	ite	cs
 8012dda:	2301      	movcs	r3, #1
 8012ddc:	2300      	movcc	r3, #0
        *p += tmp; c += ( *p < tmp );
 8012dde:	4465      	add	r5, ip
 8012de0:	f840 5b04 	str.w	r5, [r0], #4
 8012de4:	4565      	cmp	r5, ip
 8012de6:	bf2c      	ite	cs
 8012de8:	461d      	movcs	r5, r3
 8012dea:	1c5d      	addcc	r5, r3, #1
    for( i = 0; i < j; i++, o++, p++ )
 8012dec:	3101      	adds	r1, #1
 8012dee:	42a1      	cmp	r1, r4
 8012df0:	d1ee      	bne.n	8012dd0 <mbedtls_mpi_add_abs+0x50>
 8012df2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    while( c != 0 )
 8012df6:	b1cd      	cbz	r5, 8012e2c <mbedtls_mpi_add_abs+0xac>
        *p += c; c = ( *p < c ); i++; p++;
 8012df8:	f04f 0801 	mov.w	r8, #1
 8012dfc:	e009      	b.n	8012e12 <mbedtls_mpi_add_abs+0x92>
        const mbedtls_mpi *T = A; A = X; B = T;
 8012dfe:	460d      	mov	r5, r1
 8012e00:	e7cb      	b.n	8012d9a <mbedtls_mpi_add_abs+0x1a>
        *p += c; c = ( *p < c ); i++; p++;
 8012e02:	6813      	ldr	r3, [r2, #0]
 8012e04:	442b      	add	r3, r5
 8012e06:	f842 3b04 	str.w	r3, [r2], #4
 8012e0a:	3401      	adds	r4, #1
    while( c != 0 )
 8012e0c:	42ab      	cmp	r3, r5
 8012e0e:	d20d      	bcs.n	8012e2c <mbedtls_mpi_add_abs+0xac>
        *p += c; c = ( *p < c ); i++; p++;
 8012e10:	4645      	mov	r5, r8
        if( i >= X->n )
 8012e12:	6873      	ldr	r3, [r6, #4]
 8012e14:	42a3      	cmp	r3, r4
 8012e16:	d8f4      	bhi.n	8012e02 <mbedtls_mpi_add_abs+0x82>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8012e18:	1c61      	adds	r1, r4, #1
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7ff fc1e 	bl	801265c <mbedtls_mpi_grow>
 8012e20:	b918      	cbnz	r0, 8012e2a <mbedtls_mpi_add_abs+0xaa>
            p = X->p + i;
 8012e22:	68b2      	ldr	r2, [r6, #8]
 8012e24:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012e28:	e7eb      	b.n	8012e02 <mbedtls_mpi_add_abs+0x82>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 8012e2a:	4607      	mov	r7, r0
}
 8012e2c:	4638      	mov	r0, r7
 8012e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e32 <mbedtls_mpi_sub_abs>:
{
 8012e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e34:	b085      	sub	sp, #20
 8012e36:	4605      	mov	r5, r0
 8012e38:	460e      	mov	r6, r1
 8012e3a:	4614      	mov	r4, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 8012e3c:	4611      	mov	r1, r2
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f7ff fe6b 	bl	8012b1a <mbedtls_mpi_cmp_abs>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	db2e      	blt.n	8012ea6 <mbedtls_mpi_sub_abs+0x74>
    X->s = 1;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	9301      	str	r3, [sp, #4]
    X->n = 0;
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8012e50:	9303      	str	r3, [sp, #12]
    if( X == B )
 8012e52:	42ac      	cmp	r4, r5
 8012e54:	d01e      	beq.n	8012e94 <mbedtls_mpi_sub_abs+0x62>
    if( X != A )
 8012e56:	42ae      	cmp	r6, r5
 8012e58:	d005      	beq.n	8012e66 <mbedtls_mpi_sub_abs+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	4628      	mov	r0, r5
 8012e5e:	f7ff fc60 	bl	8012722 <mbedtls_mpi_copy>
 8012e62:	4607      	mov	r7, r0
 8012e64:	b980      	cbnz	r0, 8012e88 <mbedtls_mpi_sub_abs+0x56>
    X->s = 1;
 8012e66:	2301      	movs	r3, #1
 8012e68:	602b      	str	r3, [r5, #0]
    for( n = B->n; n > 0; n-- )
 8012e6a:	6860      	ldr	r0, [r4, #4]
 8012e6c:	b138      	cbz	r0, 8012e7e <mbedtls_mpi_sub_abs+0x4c>
 8012e6e:	68a3      	ldr	r3, [r4, #8]
 8012e70:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        if( B->p[n - 1] != 0 )
 8012e74:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e78:	b909      	cbnz	r1, 8012e7e <mbedtls_mpi_sub_abs+0x4c>
    for( n = B->n; n > 0; n-- )
 8012e7a:	3801      	subs	r0, #1
 8012e7c:	d1fa      	bne.n	8012e74 <mbedtls_mpi_sub_abs+0x42>
    mpi_sub_hlp( n, B->p, X->p );
 8012e7e:	68aa      	ldr	r2, [r5, #8]
 8012e80:	68a1      	ldr	r1, [r4, #8]
 8012e82:	f7ff fac1 	bl	8012408 <mpi_sub_hlp>
    ret = 0;
 8012e86:	2700      	movs	r7, #0
    mbedtls_mpi_free( &TB );
 8012e88:	a801      	add	r0, sp, #4
 8012e8a:	f7ff fbd4 	bl	8012636 <mbedtls_mpi_free>
}
 8012e8e:	4638      	mov	r0, r7
 8012e90:	b005      	add	sp, #20
 8012e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8012e94:	4621      	mov	r1, r4
 8012e96:	a801      	add	r0, sp, #4
 8012e98:	f7ff fc43 	bl	8012722 <mbedtls_mpi_copy>
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d1f2      	bne.n	8012e88 <mbedtls_mpi_sub_abs+0x56>
        B = &TB;
 8012ea2:	ac01      	add	r4, sp, #4
 8012ea4:	e7d7      	b.n	8012e56 <mbedtls_mpi_sub_abs+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 8012ea6:	f06f 0709 	mvn.w	r7, #9
 8012eaa:	e7f0      	b.n	8012e8e <mbedtls_mpi_sub_abs+0x5c>

08012eac <mbedtls_mpi_add_mpi>:
{
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	4606      	mov	r6, r0
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	4615      	mov	r5, r2
    s = A->s;
 8012eb4:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s < 0 )
 8012eb6:	6813      	ldr	r3, [r2, #0]
 8012eb8:	fb03 f307 	mul.w	r3, r3, r7
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	da16      	bge.n	8012eee <mbedtls_mpi_add_mpi+0x42>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f7ff fe29 	bl	8012b1a <mbedtls_mpi_cmp_abs>
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	db07      	blt.n	8012edc <mbedtls_mpi_add_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8012ecc:	462a      	mov	r2, r5
 8012ece:	4621      	mov	r1, r4
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ff ffae 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8012ed6:	b970      	cbnz	r0, 8012ef6 <mbedtls_mpi_add_mpi+0x4a>
            X->s =  s;
 8012ed8:	6037      	str	r7, [r6, #0]
 8012eda:	e00c      	b.n	8012ef6 <mbedtls_mpi_add_mpi+0x4a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8012edc:	4622      	mov	r2, r4
 8012ede:	4629      	mov	r1, r5
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	f7ff ffa6 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8012ee6:	b930      	cbnz	r0, 8012ef6 <mbedtls_mpi_add_mpi+0x4a>
            X->s = -s;
 8012ee8:	427f      	negs	r7, r7
 8012eea:	6037      	str	r7, [r6, #0]
 8012eec:	e003      	b.n	8012ef6 <mbedtls_mpi_add_mpi+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8012eee:	f7ff ff47 	bl	8012d80 <mbedtls_mpi_add_abs>
 8012ef2:	b900      	cbnz	r0, 8012ef6 <mbedtls_mpi_add_mpi+0x4a>
        X->s = s;
 8012ef4:	6037      	str	r7, [r6, #0]
}
 8012ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ef8 <mbedtls_mpi_sub_mpi>:
{
 8012ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012efa:	4606      	mov	r6, r0
 8012efc:	460c      	mov	r4, r1
 8012efe:	4615      	mov	r5, r2
    s = A->s;
 8012f00:	680f      	ldr	r7, [r1, #0]
    if( A->s * B->s > 0 )
 8012f02:	6813      	ldr	r3, [r2, #0]
 8012f04:	fb03 f307 	mul.w	r3, r3, r7
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	dd17      	ble.n	8012f3c <mbedtls_mpi_sub_mpi+0x44>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f7ff fe03 	bl	8012b1a <mbedtls_mpi_cmp_abs>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	db07      	blt.n	8012f28 <mbedtls_mpi_sub_mpi+0x30>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 8012f18:	462a      	mov	r2, r5
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	f7ff ff88 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8012f22:	b900      	cbnz	r0, 8012f26 <mbedtls_mpi_sub_mpi+0x2e>
            X->s =  s;
 8012f24:	6037      	str	r7, [r6, #0]
}
 8012f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 8012f28:	4622      	mov	r2, r4
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	4630      	mov	r0, r6
 8012f2e:	f7ff ff80 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8012f32:	2800      	cmp	r0, #0
 8012f34:	d1f7      	bne.n	8012f26 <mbedtls_mpi_sub_mpi+0x2e>
            X->s = -s;
 8012f36:	427f      	negs	r7, r7
 8012f38:	6037      	str	r7, [r6, #0]
 8012f3a:	e7f4      	b.n	8012f26 <mbedtls_mpi_sub_mpi+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 8012f3c:	f7ff ff20 	bl	8012d80 <mbedtls_mpi_add_abs>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d1f0      	bne.n	8012f26 <mbedtls_mpi_sub_mpi+0x2e>
        X->s = s;
 8012f44:	6037      	str	r7, [r6, #0]
    return( ret );
 8012f46:	e7ee      	b.n	8012f26 <mbedtls_mpi_sub_mpi+0x2e>

08012f48 <mbedtls_mpi_add_int>:
{
 8012f48:	b500      	push	{lr}
 8012f4a:	b085      	sub	sp, #20
    p[0] = ( b < 0 ) ? -b : b;
 8012f4c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8012f50:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8012f54:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8012f56:	2a00      	cmp	r2, #0
 8012f58:	bfb4      	ite	lt
 8012f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f5e:	2301      	movge	r3, #1
 8012f60:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 8012f62:	2301      	movs	r3, #1
 8012f64:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8012f66:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 8012f6a:	aa01      	add	r2, sp, #4
 8012f6c:	f7ff ff9e 	bl	8012eac <mbedtls_mpi_add_mpi>
}
 8012f70:	b005      	add	sp, #20
 8012f72:	f85d fb04 	ldr.w	pc, [sp], #4

08012f76 <mbedtls_mpi_sub_int>:
{
 8012f76:	b500      	push	{lr}
 8012f78:	b085      	sub	sp, #20
    p[0] = ( b < 0 ) ? -b : b;
 8012f7a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8012f7e:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8012f82:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 8012f84:	2a00      	cmp	r2, #0
 8012f86:	bfb4      	ite	lt
 8012f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8012f8c:	2301      	movge	r3, #1
 8012f8e:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 8012f90:	2301      	movs	r3, #1
 8012f92:	9302      	str	r3, [sp, #8]
    _B.p = p;
 8012f94:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 8012f98:	aa01      	add	r2, sp, #4
 8012f9a:	f7ff ffad 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
}
 8012f9e:	b005      	add	sp, #20
 8012fa0:	f85d fb04 	ldr.w	pc, [sp], #4

08012fa4 <mbedtls_mpi_mul_mpi>:
{
 8012fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	b087      	sub	sp, #28
 8012faa:	4606      	mov	r6, r0
 8012fac:	460f      	mov	r7, r1
 8012fae:	4690      	mov	r8, r2
    X->s = 1;
 8012fb0:	2201      	movs	r2, #1
 8012fb2:	9203      	str	r2, [sp, #12]
    X->n = 0;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 8012fb8:	9305      	str	r3, [sp, #20]
    X->s = 1;
 8012fba:	9200      	str	r2, [sp, #0]
    X->n = 0;
 8012fbc:	9301      	str	r3, [sp, #4]
    X->p = NULL;
 8012fbe:	9302      	str	r3, [sp, #8]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8012fc0:	4288      	cmp	r0, r1
 8012fc2:	d027      	beq.n	8013014 <mbedtls_mpi_mul_mpi+0x70>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8012fc4:	4546      	cmp	r6, r8
 8012fc6:	d02d      	beq.n	8013024 <mbedtls_mpi_mul_mpi+0x80>
    for( i = A->n; i > 0; i-- )
 8012fc8:	687d      	ldr	r5, [r7, #4]
 8012fca:	b13d      	cbz	r5, 8012fdc <mbedtls_mpi_mul_mpi+0x38>
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        if( A->p[i - 1] != 0 )
 8012fd2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012fd6:	b90a      	cbnz	r2, 8012fdc <mbedtls_mpi_mul_mpi+0x38>
    for( i = A->n; i > 0; i-- )
 8012fd8:	3d01      	subs	r5, #1
 8012fda:	d1fa      	bne.n	8012fd2 <mbedtls_mpi_mul_mpi+0x2e>
    for( j = B->n; j > 0; j-- )
 8012fdc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012fe0:	b144      	cbz	r4, 8012ff4 <mbedtls_mpi_mul_mpi+0x50>
 8012fe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fe6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        if( B->p[j - 1] != 0 )
 8012fea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012fee:	b90a      	cbnz	r2, 8012ff4 <mbedtls_mpi_mul_mpi+0x50>
    for( j = B->n; j > 0; j-- )
 8012ff0:	3c01      	subs	r4, #1
 8012ff2:	d1fa      	bne.n	8012fea <mbedtls_mpi_mul_mpi+0x46>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 8012ff4:	1929      	adds	r1, r5, r4
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f7ff fb30 	bl	801265c <mbedtls_mpi_grow>
 8012ffc:	4681      	mov	r9, r0
 8012ffe:	b1d0      	cbz	r0, 8013036 <mbedtls_mpi_mul_mpi+0x92>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 8013000:	4668      	mov	r0, sp
 8013002:	f7ff fb18 	bl	8012636 <mbedtls_mpi_free>
 8013006:	a803      	add	r0, sp, #12
 8013008:	f7ff fb15 	bl	8012636 <mbedtls_mpi_free>
}
 801300c:	4648      	mov	r0, r9
 801300e:	b007      	add	sp, #28
 8013010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 8013014:	a803      	add	r0, sp, #12
 8013016:	f7ff fb84 	bl	8012722 <mbedtls_mpi_copy>
 801301a:	4681      	mov	r9, r0
 801301c:	2800      	cmp	r0, #0
 801301e:	d1ef      	bne.n	8013000 <mbedtls_mpi_mul_mpi+0x5c>
 8013020:	af03      	add	r7, sp, #12
 8013022:	e7cf      	b.n	8012fc4 <mbedtls_mpi_mul_mpi+0x20>
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 8013024:	4641      	mov	r1, r8
 8013026:	4668      	mov	r0, sp
 8013028:	f7ff fb7b 	bl	8012722 <mbedtls_mpi_copy>
 801302c:	4681      	mov	r9, r0
 801302e:	2800      	cmp	r0, #0
 8013030:	d1e6      	bne.n	8013000 <mbedtls_mpi_mul_mpi+0x5c>
 8013032:	46e8      	mov	r8, sp
 8013034:	e7c8      	b.n	8012fc8 <mbedtls_mpi_mul_mpi+0x24>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8013036:	2100      	movs	r1, #0
 8013038:	4630      	mov	r0, r6
 801303a:	f7ff fbdb 	bl	80127f4 <mbedtls_mpi_lset>
 801303e:	4681      	mov	r9, r0
 8013040:	2800      	cmp	r0, #0
 8013042:	d1dd      	bne.n	8013000 <mbedtls_mpi_mul_mpi+0x5c>
    for( ; j > 0; j-- )
 8013044:	b17c      	cbz	r4, 8013066 <mbedtls_mpi_mul_mpi+0xc2>
 8013046:	3c01      	subs	r4, #1
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 8013048:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801304c:	68b2      	ldr	r2, [r6, #8]
 801304e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013052:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013056:	68b9      	ldr	r1, [r7, #8]
 8013058:	4628      	mov	r0, r5
 801305a:	f7ff f9ff 	bl	801245c <mpi_mul_hlp>
    for( ; j > 0; j-- )
 801305e:	3c01      	subs	r4, #1
 8013060:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013064:	d1f0      	bne.n	8013048 <mbedtls_mpi_mul_mpi+0xa4>
    X->s = A->s * B->s;
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	f8d8 3000 	ldr.w	r3, [r8]
 801306c:	fb03 f302 	mul.w	r3, r3, r2
 8013070:	6033      	str	r3, [r6, #0]
 8013072:	e7c5      	b.n	8013000 <mbedtls_mpi_mul_mpi+0x5c>

08013074 <mbedtls_mpi_mul_int>:
{
 8013074:	b500      	push	{lr}
 8013076:	b085      	sub	sp, #20
    _B.s = 1;
 8013078:	2301      	movs	r3, #1
 801307a:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 801307c:	9302      	str	r3, [sp, #8]
    _B.p = p;
 801307e:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;
 8013082:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 8013084:	aa01      	add	r2, sp, #4
 8013086:	f7ff ff8d 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
}
 801308a:	b005      	add	sp, #20
 801308c:	f85d fb04 	ldr.w	pc, [sp], #4

08013090 <mbedtls_mpi_div_mpi>:
{
 8013090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013094:	b09d      	sub	sp, #116	; 0x74
 8013096:	4606      	mov	r6, r0
 8013098:	468b      	mov	fp, r1
 801309a:	4615      	mov	r5, r2
 801309c:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 801309e:	2100      	movs	r1, #0
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7ff fe56 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80130a6:	2800      	cmp	r0, #0
 80130a8:	f000 8220 	beq.w	80134ec <mbedtls_mpi_div_mpi+0x45c>
    X->s = 1;
 80130ac:	2201      	movs	r2, #1
 80130ae:	9219      	str	r2, [sp, #100]	; 0x64
    X->n = 0;
 80130b0:	2300      	movs	r3, #0
 80130b2:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 80130b4:	931b      	str	r3, [sp, #108]	; 0x6c
    X->s = 1;
 80130b6:	9216      	str	r2, [sp, #88]	; 0x58
    X->n = 0;
 80130b8:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 80130ba:	9318      	str	r3, [sp, #96]	; 0x60
    X->s = 1;
 80130bc:	9213      	str	r2, [sp, #76]	; 0x4c
    X->n = 0;
 80130be:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 80130c0:	9315      	str	r3, [sp, #84]	; 0x54
    X->s = 1;
 80130c2:	9210      	str	r2, [sp, #64]	; 0x40
    X->n = 0;
 80130c4:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 80130c6:	9312      	str	r3, [sp, #72]	; 0x48
    X->s = 1;
 80130c8:	920d      	str	r2, [sp, #52]	; 0x34
    X->n = 0;
 80130ca:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 80130cc:	930f      	str	r3, [sp, #60]	; 0x3c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80130ce:	4621      	mov	r1, r4
 80130d0:	4628      	mov	r0, r5
 80130d2:	f7ff fd22 	bl	8012b1a <mbedtls_mpi_cmp_abs>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	da11      	bge.n	80130fe <mbedtls_mpi_div_mpi+0x6e>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80130da:	b12e      	cbz	r6, 80130e8 <mbedtls_mpi_div_mpi+0x58>
 80130dc:	2100      	movs	r1, #0
 80130de:	4630      	mov	r0, r6
 80130e0:	f7ff fb88 	bl	80127f4 <mbedtls_mpi_lset>
 80130e4:	4607      	mov	r7, r0
 80130e6:	b980      	cbnz	r0, 801310a <mbedtls_mpi_div_mpi+0x7a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80130e8:	f1bb 0f00 	cmp.w	fp, #0
 80130ec:	f000 8201 	beq.w	80134f2 <mbedtls_mpi_div_mpi+0x462>
 80130f0:	4629      	mov	r1, r5
 80130f2:	4658      	mov	r0, fp
 80130f4:	f7ff fb15 	bl	8012722 <mbedtls_mpi_copy>
 80130f8:	4607      	mov	r7, r0
 80130fa:	b930      	cbnz	r0, 801310a <mbedtls_mpi_div_mpi+0x7a>
 80130fc:	e014      	b.n	8013128 <mbedtls_mpi_div_mpi+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80130fe:	4629      	mov	r1, r5
 8013100:	a819      	add	r0, sp, #100	; 0x64
 8013102:	f7ff fb0e 	bl	8012722 <mbedtls_mpi_copy>
 8013106:	4607      	mov	r7, r0
 8013108:	b190      	cbz	r0, 8013130 <mbedtls_mpi_div_mpi+0xa0>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 801310a:	a819      	add	r0, sp, #100	; 0x64
 801310c:	f7ff fa93 	bl	8012636 <mbedtls_mpi_free>
 8013110:	a816      	add	r0, sp, #88	; 0x58
 8013112:	f7ff fa90 	bl	8012636 <mbedtls_mpi_free>
 8013116:	a813      	add	r0, sp, #76	; 0x4c
 8013118:	f7ff fa8d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 801311c:	a810      	add	r0, sp, #64	; 0x40
 801311e:	f7ff fa8a 	bl	8012636 <mbedtls_mpi_free>
 8013122:	a80d      	add	r0, sp, #52	; 0x34
 8013124:	f7ff fa87 	bl	8012636 <mbedtls_mpi_free>
}
 8013128:	4638      	mov	r0, r7
 801312a:	b01d      	add	sp, #116	; 0x74
 801312c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 8013130:	4621      	mov	r1, r4
 8013132:	a816      	add	r0, sp, #88	; 0x58
 8013134:	f7ff faf5 	bl	8012722 <mbedtls_mpi_copy>
 8013138:	4607      	mov	r7, r0
 801313a:	2800      	cmp	r0, #0
 801313c:	d1e5      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    X.s = Y.s = 1;
 801313e:	2301      	movs	r3, #1
 8013140:	9316      	str	r3, [sp, #88]	; 0x58
 8013142:	9319      	str	r3, [sp, #100]	; 0x64
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 8013144:	6869      	ldr	r1, [r5, #4]
 8013146:	3102      	adds	r1, #2
 8013148:	a813      	add	r0, sp, #76	; 0x4c
 801314a:	f7ff fa87 	bl	801265c <mbedtls_mpi_grow>
 801314e:	4607      	mov	r7, r0
 8013150:	2800      	cmp	r0, #0
 8013152:	d1da      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 8013154:	2100      	movs	r1, #0
 8013156:	a813      	add	r0, sp, #76	; 0x4c
 8013158:	f7ff fb4c 	bl	80127f4 <mbedtls_mpi_lset>
 801315c:	4607      	mov	r7, r0
 801315e:	2800      	cmp	r0, #0
 8013160:	d1d3      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 8013162:	2102      	movs	r1, #2
 8013164:	a810      	add	r0, sp, #64	; 0x40
 8013166:	f7ff fa79 	bl	801265c <mbedtls_mpi_grow>
 801316a:	4607      	mov	r7, r0
 801316c:	2800      	cmp	r0, #0
 801316e:	d1cc      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 8013170:	2103      	movs	r1, #3
 8013172:	a80d      	add	r0, sp, #52	; 0x34
 8013174:	f7ff fa72 	bl	801265c <mbedtls_mpi_grow>
 8013178:	4607      	mov	r7, r0
 801317a:	2800      	cmp	r0, #0
 801317c:	d1c5      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 801317e:	a816      	add	r0, sp, #88	; 0x58
 8013180:	f7ff fb85 	bl	801288e <mbedtls_mpi_bitlen>
 8013184:	f000 031f 	and.w	r3, r0, #31
    if( k < biL - 1 )
 8013188:	2b1e      	cmp	r3, #30
 801318a:	d811      	bhi.n	80131b0 <mbedtls_mpi_div_mpi+0x120>
        k = biL - 1 - k;
 801318c:	f1c3 031f 	rsb	r3, r3, #31
 8013190:	9302      	str	r3, [sp, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 8013192:	4698      	mov	r8, r3
 8013194:	4619      	mov	r1, r3
 8013196:	a819      	add	r0, sp, #100	; 0x64
 8013198:	f7ff fc19 	bl	80129ce <mbedtls_mpi_shift_l>
 801319c:	4607      	mov	r7, r0
 801319e:	2800      	cmp	r0, #0
 80131a0:	d1b3      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80131a2:	4641      	mov	r1, r8
 80131a4:	a816      	add	r0, sp, #88	; 0x58
 80131a6:	f7ff fc12 	bl	80129ce <mbedtls_mpi_shift_l>
 80131aa:	4607      	mov	r7, r0
 80131ac:	b110      	cbz	r0, 80131b4 <mbedtls_mpi_div_mpi+0x124>
 80131ae:	e7ac      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    else k = 0;
 80131b0:	2300      	movs	r3, #0
 80131b2:	9302      	str	r3, [sp, #8]
    n = X.n - 1;
 80131b4:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    t = Y.n - 1;
 80131b8:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80131bc:	eba9 080a 	sub.w	r8, r9, sl
 80131c0:	ea4f 1348 	mov.w	r3, r8, lsl #5
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	4619      	mov	r1, r3
 80131c8:	a816      	add	r0, sp, #88	; 0x58
 80131ca:	f7ff fc00 	bl	80129ce <mbedtls_mpi_shift_l>
 80131ce:	4607      	mov	r7, r0
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d19a      	bne.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        Z.p[n - t]++;
 80131d4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80131d8:	a916      	add	r1, sp, #88	; 0x58
 80131da:	a819      	add	r0, sp, #100	; 0x64
 80131dc:	f7ff fd61 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	db0e      	blt.n	8013202 <mbedtls_mpi_div_mpi+0x172>
        Z.p[n - t]++;
 80131e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80131e6:	f852 3008 	ldr.w	r3, [r2, r8]
 80131ea:	3301      	adds	r3, #1
 80131ec:	f842 3008 	str.w	r3, [r2, r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80131f0:	aa16      	add	r2, sp, #88	; 0x58
 80131f2:	a919      	add	r1, sp, #100	; 0x64
 80131f4:	4608      	mov	r0, r1
 80131f6:	f7ff fe7f 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 80131fa:	4607      	mov	r7, r0
 80131fc:	2800      	cmp	r0, #0
 80131fe:	d0eb      	beq.n	80131d8 <mbedtls_mpi_div_mpi+0x148>
 8013200:	e783      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 8013202:	9901      	ldr	r1, [sp, #4]
 8013204:	a816      	add	r0, sp, #88	; 0x58
 8013206:	f7ff fc3a 	bl	8012a7e <mbedtls_mpi_shift_r>
 801320a:	4607      	mov	r7, r0
 801320c:	2800      	cmp	r0, #0
 801320e:	f47f af7c 	bne.w	801310a <mbedtls_mpi_div_mpi+0x7a>
    n = X.n - 1;
 8013212:	f109 31ff 	add.w	r1, r9, #4294967295
    t = Y.n - 1;
 8013216:	f10a 32ff 	add.w	r2, sl, #4294967295
    for( i = n; i > t ; i-- )
 801321a:	4291      	cmp	r1, r2
 801321c:	f240 810d 	bls.w	801343a <mbedtls_mpi_div_mpi+0x3aa>
        if( X.p[i] >= Y.p[t] )
 8013220:	0090      	lsls	r0, r2, #2
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8013222:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 8013226:	3b02      	subs	r3, #2
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	f109 4380 	add.w	r3, r9, #1073741824	; 0x40000000
 8013230:	3b01      	subs	r3, #1
 8013232:	eba3 030a 	sub.w	r3, r3, sl
 8013236:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801323a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 801323e:	f1a9 0902 	sub.w	r9, r9, #2
 8013242:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8013246:	9203      	str	r2, [sp, #12]
 8013248:	469a      	mov	sl, r3
 801324a:	9706      	str	r7, [sp, #24]
 801324c:	4617      	mov	r7, r2
 801324e:	9607      	str	r6, [sp, #28]
 8013250:	4606      	mov	r6, r0
 8013252:	f8cd b020 	str.w	fp, [sp, #32]
 8013256:	9509      	str	r5, [sp, #36]	; 0x24
 8013258:	460d      	mov	r5, r1
 801325a:	940a      	str	r4, [sp, #40]	; 0x28
        if( X.p[i] >= Y.p[t] )
 801325c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801325e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8013262:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8013266:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013268:	598c      	ldr	r4, [r1, r6]
 801326a:	42a2      	cmp	r2, r4
 801326c:	d30e      	bcc.n	801328c <mbedtls_mpi_div_mpi+0x1fc>
            Z.p[i - t - 1] = ~0;
 801326e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013270:	f04f 32ff 	mov.w	r2, #4294967295
 8013274:	f843 2008 	str.w	r2, [r3, r8]
        Z.p[i - t - 1]++;
 8013278:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801327a:	f852 3008 	ldr.w	r3, [r2, r8]
 801327e:	3301      	adds	r3, #1
 8013280:	f842 3008 	str.w	r3, [r2, r8]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8013284:	f1aa 0b04 	sub.w	fp, sl, #4
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 8013288:	2400      	movs	r4, #0
 801328a:	e092      	b.n	80133b2 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 801328c:	f853 100a 	ldr.w	r1, [r3, sl]
 8013290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013292:	4443      	add	r3, r8
 8013294:	9304      	str	r3, [sp, #16]
    if( 0 == d || u1 >= d )
 8013296:	2c00      	cmp	r4, #0
 8013298:	d059      	beq.n	801334e <mbedtls_mpi_div_mpi+0x2be>
        if( x & mask ) break;
 801329a:	2c00      	cmp	r4, #0
 801329c:	db26      	blt.n	80132ec <mbedtls_mpi_div_mpi+0x25c>
    for( j = 0; j < biL; j++ )
 801329e:	2301      	movs	r3, #1
        mask >>= 1;
 80132a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
        if( x & mask ) break;
 80132a4:	4204      	tst	r4, r0
 80132a6:	d103      	bne.n	80132b0 <mbedtls_mpi_div_mpi+0x220>
        mask >>= 1;
 80132a8:	0840      	lsrs	r0, r0, #1
    for( j = 0; j < biL; j++ )
 80132aa:	3301      	adds	r3, #1
 80132ac:	2b20      	cmp	r3, #32
 80132ae:	d1f9      	bne.n	80132a4 <mbedtls_mpi_div_mpi+0x214>
    d = d << s;
 80132b0:	fa04 fb03 	lsl.w	fp, r4, r3
    u1 = u1 << s;
 80132b4:	fa02 f003 	lsl.w	r0, r2, r3
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 80132b8:	f1c3 0220 	rsb	r2, r3, #32
 80132bc:	fa21 f202 	lsr.w	r2, r1, r2
 80132c0:	425c      	negs	r4, r3
 80132c2:	ea02 72e4 	and.w	r2, r2, r4, asr #31
 80132c6:	4302      	orrs	r2, r0
    u0 =  u0 << s;
 80132c8:	fa01 f303 	lsl.w	r3, r1, r3
    d1 = d >> biH;
 80132cc:	ea4f 401b 	mov.w	r0, fp, lsr #16
    d0 = d & uint_halfword_mask;
 80132d0:	fa1f f48b 	uxth.w	r4, fp
    u0_msw = u0 >> biH;
 80132d4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    u0_lsw = u0 & uint_halfword_mask;
 80132d8:	b29b      	uxth	r3, r3
 80132da:	9305      	str	r3, [sp, #20]
    q1 = u1 / d1;
 80132dc:	fbb2 f1f0 	udiv	r1, r2, r0
    r0 = u1 - d1 * q1;
 80132e0:	fb00 2311 	mls	r3, r0, r1, r2
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 80132e4:	fb01 fc04 	mul.w	ip, r1, r4
 80132e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80132ea:	e008      	b.n	80132fe <mbedtls_mpi_div_mpi+0x26e>
    for( j = 0; j < biL; j++ )
 80132ec:	2300      	movs	r3, #0
 80132ee:	e7df      	b.n	80132b0 <mbedtls_mpi_div_mpi+0x220>
        q1 -= 1;
 80132f0:	3901      	subs	r1, #1
        r0 += d1;
 80132f2:	4403      	add	r3, r0
        if ( r0 >= radix ) break;
 80132f4:	ebac 0c04 	sub.w	ip, ip, r4
 80132f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132fc:	d206      	bcs.n	801330c <mbedtls_mpi_div_mpi+0x27c>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 80132fe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8013302:	d2f5      	bcs.n	80132f0 <mbedtls_mpi_div_mpi+0x260>
 8013304:	eb0e 4203 	add.w	r2, lr, r3, lsl #16
 8013308:	4594      	cmp	ip, r2
 801330a:	d8f1      	bhi.n	80132f0 <mbedtls_mpi_div_mpi+0x260>
 801330c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 801330e:	eb0e 4302 	add.w	r3, lr, r2, lsl #16
 8013312:	fb01 331b 	mls	r3, r1, fp, r3
    q0 = rAX / d1;
 8013316:	fbb3 f2f0 	udiv	r2, r3, r0
    r0 = rAX - q0 * d1;
 801331a:	fb00 3312 	mls	r3, r0, r2, r3
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 801331e:	fb02 fc04 	mul.w	ip, r2, r4
 8013322:	468b      	mov	fp, r1
 8013324:	e006      	b.n	8013334 <mbedtls_mpi_div_mpi+0x2a4>
        q0 -= 1;
 8013326:	3a01      	subs	r2, #1
        r0 += d1;
 8013328:	4403      	add	r3, r0
        if ( r0 >= radix ) break;
 801332a:	ebac 0c04 	sub.w	ip, ip, r4
 801332e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013332:	d207      	bcs.n	8013344 <mbedtls_mpi_div_mpi+0x2b4>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 8013334:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013338:	d2f5      	bcs.n	8013326 <mbedtls_mpi_div_mpi+0x296>
 801333a:	9905      	ldr	r1, [sp, #20]
 801333c:	eb01 4e03 	add.w	lr, r1, r3, lsl #16
 8013340:	45f4      	cmp	ip, lr
 8013342:	d8f0      	bhi.n	8013326 <mbedtls_mpi_div_mpi+0x296>
    quotient = q1 * radix + q0;
 8013344:	eb02 420b 	add.w	r2, r2, fp, lsl #16
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 8013348:	9b04      	ldr	r3, [sp, #16]
 801334a:	601a      	str	r2, [r3, #0]
 801334c:	e794      	b.n	8013278 <mbedtls_mpi_div_mpi+0x1e8>
        return ( ~0 );
 801334e:	f04f 32ff 	mov.w	r2, #4294967295
 8013352:	e7f9      	b.n	8013348 <mbedtls_mpi_div_mpi+0x2b8>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 8013354:	9a03      	ldr	r2, [sp, #12]
 8013356:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013358:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
 801335a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801335c:	599a      	ldr	r2, [r3, r6]
 801335e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013360:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 8013362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013364:	f853 2008 	ldr.w	r2, [r3, r8]
 8013368:	a910      	add	r1, sp, #64	; 0x40
 801336a:	4608      	mov	r0, r1
 801336c:	f7ff fe82 	bl	8013074 <mbedtls_mpi_mul_int>
 8013370:	2800      	cmp	r0, #0
 8013372:	f040 80a9 	bne.w	80134c8 <mbedtls_mpi_div_mpi+0x438>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 8013376:	4621      	mov	r1, r4
 8013378:	a80d      	add	r0, sp, #52	; 0x34
 801337a:	f7ff fa3b 	bl	80127f4 <mbedtls_mpi_lset>
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 80a4 	bne.w	80134cc <mbedtls_mpi_div_mpi+0x43c>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 8013384:	2d01      	cmp	r5, #1
 8013386:	d926      	bls.n	80133d6 <mbedtls_mpi_div_mpi+0x346>
 8013388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801338a:	f853 200b 	ldr.w	r2, [r3, fp]
 801338e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013390:	601a      	str	r2, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 8013392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013394:	f853 200a 	ldr.w	r2, [r3, sl]
 8013398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801339a:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 801339c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801339e:	f853 2009 	ldr.w	r2, [r3, r9]
 80133a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133a4:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80133a6:	a90d      	add	r1, sp, #52	; 0x34
 80133a8:	a810      	add	r0, sp, #64	; 0x40
 80133aa:	f7ff fc7a 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80133ae:	2800      	cmp	r0, #0
 80133b0:	dd17      	ble.n	80133e2 <mbedtls_mpi_div_mpi+0x352>
            Z.p[i - t - 1]--;
 80133b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80133b4:	f852 3008 	ldr.w	r3, [r2, r8]
 80133b8:	3b01      	subs	r3, #1
 80133ba:	f842 3008 	str.w	r3, [r2, r8]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80133be:	4621      	mov	r1, r4
 80133c0:	a810      	add	r0, sp, #64	; 0x40
 80133c2:	f7ff fa17 	bl	80127f4 <mbedtls_mpi_lset>
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d17c      	bne.n	80134c4 <mbedtls_mpi_div_mpi+0x434>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80133ca:	2f00      	cmp	r7, #0
 80133cc:	d0c2      	beq.n	8013354 <mbedtls_mpi_div_mpi+0x2c4>
 80133ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80133d0:	9a01      	ldr	r2, [sp, #4]
 80133d2:	589a      	ldr	r2, [r3, r2]
 80133d4:	e7bf      	b.n	8013356 <mbedtls_mpi_div_mpi+0x2c6>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80133d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133d8:	601c      	str	r4, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80133da:	462a      	mov	r2, r5
 80133dc:	2d00      	cmp	r5, #0
 80133de:	d0db      	beq.n	8013398 <mbedtls_mpi_div_mpi+0x308>
 80133e0:	e7d7      	b.n	8013392 <mbedtls_mpi_div_mpi+0x302>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80133e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133e4:	f853 2008 	ldr.w	r2, [r3, r8]
 80133e8:	a916      	add	r1, sp, #88	; 0x58
 80133ea:	a810      	add	r0, sp, #64	; 0x40
 80133ec:	f7ff fe42 	bl	8013074 <mbedtls_mpi_mul_int>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d16d      	bne.n	80134d0 <mbedtls_mpi_div_mpi+0x440>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80133f4:	ea4f 04c8 	mov.w	r4, r8, lsl #3
 80133f8:	4621      	mov	r1, r4
 80133fa:	a810      	add	r0, sp, #64	; 0x40
 80133fc:	f7ff fae7 	bl	80129ce <mbedtls_mpi_shift_l>
 8013400:	2800      	cmp	r0, #0
 8013402:	d167      	bne.n	80134d4 <mbedtls_mpi_div_mpi+0x444>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 8013404:	aa10      	add	r2, sp, #64	; 0x40
 8013406:	a919      	add	r1, sp, #100	; 0x64
 8013408:	4608      	mov	r0, r1
 801340a:	f7ff fd75 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801340e:	2800      	cmp	r0, #0
 8013410:	d162      	bne.n	80134d8 <mbedtls_mpi_div_mpi+0x448>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 8013412:	2100      	movs	r1, #0
 8013414:	a819      	add	r0, sp, #100	; 0x64
 8013416:	f7ff fc9c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801341a:	2800      	cmp	r0, #0
 801341c:	db3b      	blt.n	8013496 <mbedtls_mpi_div_mpi+0x406>
    for( i = n; i > t ; i-- )
 801341e:	3d01      	subs	r5, #1
 8013420:	f1a8 0804 	sub.w	r8, r8, #4
 8013424:	f1aa 0a04 	sub.w	sl, sl, #4
 8013428:	42af      	cmp	r7, r5
 801342a:	f4ff af17 	bcc.w	801325c <mbedtls_mpi_div_mpi+0x1cc>
 801342e:	9f06      	ldr	r7, [sp, #24]
 8013430:	9e07      	ldr	r6, [sp, #28]
 8013432:	f8dd b020 	ldr.w	fp, [sp, #32]
 8013436:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013438:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if( Q != NULL )
 801343a:	b156      	cbz	r6, 8013452 <mbedtls_mpi_div_mpi+0x3c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 801343c:	a913      	add	r1, sp, #76	; 0x4c
 801343e:	4630      	mov	r0, r6
 8013440:	f7ff f96f 	bl	8012722 <mbedtls_mpi_copy>
 8013444:	2800      	cmp	r0, #0
 8013446:	d14f      	bne.n	80134e8 <mbedtls_mpi_div_mpi+0x458>
        Q->s = A->s * B->s;
 8013448:	682a      	ldr	r2, [r5, #0]
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	fb03 f302 	mul.w	r3, r3, r2
 8013450:	6033      	str	r3, [r6, #0]
    if( R != NULL )
 8013452:	f1bb 0f00 	cmp.w	fp, #0
 8013456:	f43f ae58 	beq.w	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 801345a:	9902      	ldr	r1, [sp, #8]
 801345c:	a819      	add	r0, sp, #100	; 0x64
 801345e:	f7ff fb0e 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013462:	4607      	mov	r7, r0
 8013464:	2800      	cmp	r0, #0
 8013466:	f47f ae50 	bne.w	801310a <mbedtls_mpi_div_mpi+0x7a>
        X.s = A->s;
 801346a:	682b      	ldr	r3, [r5, #0]
 801346c:	9319      	str	r3, [sp, #100]	; 0x64
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 801346e:	a919      	add	r1, sp, #100	; 0x64
 8013470:	4658      	mov	r0, fp
 8013472:	f7ff f956 	bl	8012722 <mbedtls_mpi_copy>
 8013476:	4607      	mov	r7, r0
 8013478:	2800      	cmp	r0, #0
 801347a:	f47f ae46 	bne.w	801310a <mbedtls_mpi_div_mpi+0x7a>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 801347e:	2100      	movs	r1, #0
 8013480:	4658      	mov	r0, fp
 8013482:	f7ff fc66 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013486:	2800      	cmp	r0, #0
 8013488:	f47f ae3f 	bne.w	801310a <mbedtls_mpi_div_mpi+0x7a>
            R->s = 1;
 801348c:	2201      	movs	r2, #1
 801348e:	f8cb 2000 	str.w	r2, [fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 8013492:	4607      	mov	r7, r0
 8013494:	e639      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 8013496:	a916      	add	r1, sp, #88	; 0x58
 8013498:	a810      	add	r0, sp, #64	; 0x40
 801349a:	f7ff f942 	bl	8012722 <mbedtls_mpi_copy>
 801349e:	b9e8      	cbnz	r0, 80134dc <mbedtls_mpi_div_mpi+0x44c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80134a0:	4621      	mov	r1, r4
 80134a2:	a810      	add	r0, sp, #64	; 0x40
 80134a4:	f7ff fa93 	bl	80129ce <mbedtls_mpi_shift_l>
 80134a8:	b9d0      	cbnz	r0, 80134e0 <mbedtls_mpi_div_mpi+0x450>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80134aa:	aa10      	add	r2, sp, #64	; 0x40
 80134ac:	a919      	add	r1, sp, #100	; 0x64
 80134ae:	4608      	mov	r0, r1
 80134b0:	f7ff fcfc 	bl	8012eac <mbedtls_mpi_add_mpi>
 80134b4:	b9b0      	cbnz	r0, 80134e4 <mbedtls_mpi_div_mpi+0x454>
            Z.p[i - t - 1]--;
 80134b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80134b8:	f852 3008 	ldr.w	r3, [r2, r8]
 80134bc:	3b01      	subs	r3, #1
 80134be:	f842 3008 	str.w	r3, [r2, r8]
 80134c2:	e7ac      	b.n	801341e <mbedtls_mpi_div_mpi+0x38e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80134c4:	4607      	mov	r7, r0
 80134c6:	e620      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80134c8:	4607      	mov	r7, r0
 80134ca:	e61e      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80134cc:	4607      	mov	r7, r0
 80134ce:	e61c      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80134d0:	4607      	mov	r7, r0
 80134d2:	e61a      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80134d4:	4607      	mov	r7, r0
 80134d6:	e618      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80134d8:	4607      	mov	r7, r0
 80134da:	e616      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80134dc:	4607      	mov	r7, r0
 80134de:	e614      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80134e0:	4607      	mov	r7, r0
 80134e2:	e612      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80134e4:	4607      	mov	r7, r0
 80134e6:	e610      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80134e8:	4607      	mov	r7, r0
 80134ea:	e60e      	b.n	801310a <mbedtls_mpi_div_mpi+0x7a>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80134ec:	f06f 070b 	mvn.w	r7, #11
 80134f0:	e61a      	b.n	8013128 <mbedtls_mpi_div_mpi+0x98>
        return( 0 );
 80134f2:	2700      	movs	r7, #0
 80134f4:	e618      	b.n	8013128 <mbedtls_mpi_div_mpi+0x98>

080134f6 <mbedtls_mpi_mod_mpi>:
{
 80134f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f8:	4604      	mov	r4, r0
 80134fa:	460e      	mov	r6, r1
 80134fc:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80134fe:	2100      	movs	r1, #0
 8013500:	4610      	mov	r0, r2
 8013502:	f7ff fc26 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013506:	2800      	cmp	r0, #0
 8013508:	db27      	blt.n	801355a <mbedtls_mpi_mod_mpi+0x64>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 801350a:	462b      	mov	r3, r5
 801350c:	4632      	mov	r2, r6
 801350e:	4621      	mov	r1, r4
 8013510:	2000      	movs	r0, #0
 8013512:	f7ff fdbd 	bl	8013090 <mbedtls_mpi_div_mpi>
 8013516:	4607      	mov	r7, r0
 8013518:	b970      	cbnz	r0, 8013538 <mbedtls_mpi_mod_mpi+0x42>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 801351a:	2600      	movs	r6, #0
 801351c:	4631      	mov	r1, r6
 801351e:	4620      	mov	r0, r4
 8013520:	f7ff fc17 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013524:	2800      	cmp	r0, #0
 8013526:	da09      	bge.n	801353c <mbedtls_mpi_mod_mpi+0x46>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 8013528:	462a      	mov	r2, r5
 801352a:	4621      	mov	r1, r4
 801352c:	4620      	mov	r0, r4
 801352e:	f7ff fcbd 	bl	8012eac <mbedtls_mpi_add_mpi>
 8013532:	2800      	cmp	r0, #0
 8013534:	d0f2      	beq.n	801351c <mbedtls_mpi_mod_mpi+0x26>
 8013536:	4607      	mov	r7, r0
}
 8013538:	4638      	mov	r0, r7
 801353a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 801353c:	4629      	mov	r1, r5
 801353e:	4620      	mov	r0, r4
 8013540:	f7ff fbaf 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8013544:	2800      	cmp	r0, #0
 8013546:	dbf7      	blt.n	8013538 <mbedtls_mpi_mod_mpi+0x42>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 8013548:	462a      	mov	r2, r5
 801354a:	4621      	mov	r1, r4
 801354c:	4620      	mov	r0, r4
 801354e:	f7ff fcd3 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013552:	2800      	cmp	r0, #0
 8013554:	d0f2      	beq.n	801353c <mbedtls_mpi_mod_mpi+0x46>
 8013556:	4607      	mov	r7, r0
 8013558:	e7ee      	b.n	8013538 <mbedtls_mpi_mod_mpi+0x42>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 801355a:	f06f 0709 	mvn.w	r7, #9
 801355e:	e7eb      	b.n	8013538 <mbedtls_mpi_mod_mpi+0x42>

08013560 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
 8013560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013564:	f2ad 6d64 	subw	sp, sp, #1636	; 0x664
 8013568:	4682      	mov	sl, r0
 801356a:	9103      	str	r1, [sp, #12]
 801356c:	4617      	mov	r7, r2
 801356e:	461e      	mov	r6, r3
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 8013570:	2100      	movs	r1, #0
 8013572:	4618      	mov	r0, r3
 8013574:	f7ff fbed 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013578:	2800      	cmp	r0, #0
 801357a:	f340 821b 	ble.w	80139b4 <mbedtls_mpi_exp_mod+0x454>
 801357e:	68b3      	ldr	r3, [r6, #8]
 8013580:	f8d3 8000 	ldr.w	r8, [r3]
 8013584:	f018 0901 	ands.w	r9, r8, #1
 8013588:	f000 8218 	beq.w	80139bc <mbedtls_mpi_exp_mod+0x45c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 801358c:	2100      	movs	r1, #0
 801358e:	4638      	mov	r0, r7
 8013590:	f7ff fbdf 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013594:	2800      	cmp	r0, #0
 8013596:	f2c0 8215 	blt.w	80139c4 <mbedtls_mpi_exp_mod+0x464>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 801359a:	f108 0402 	add.w	r4, r8, #2
 801359e:	0064      	lsls	r4, r4, #1
 80135a0:	f004 0408 	and.w	r4, r4, #8
 80135a4:	4444      	add	r4, r8
 80135a6:	2503      	movs	r5, #3
        x *= ( 2 - ( m0 * x ) );
 80135a8:	fb04 f308 	mul.w	r3, r4, r8
 80135ac:	f1c3 0302 	rsb	r3, r3, #2
 80135b0:	fb03 f404 	mul.w	r4, r3, r4
    for( i = biL; i >= 8; i /= 2 )
 80135b4:	3d01      	subs	r5, #1
 80135b6:	d1f7      	bne.n	80135a8 <mbedtls_mpi_exp_mod+0x48>
    X->s = 1;
 80135b8:	2301      	movs	r3, #1
 80135ba:	f8cd 3654 	str.w	r3, [sp, #1620]	; 0x654
    X->n = 0;
 80135be:	2100      	movs	r1, #0
 80135c0:	f8cd 1658 	str.w	r1, [sp, #1624]	; 0x658
    X->p = NULL;
 80135c4:	f8cd 165c 	str.w	r1, [sp, #1628]	; 0x65c
    X->s = 1;
 80135c8:	f8cd 3648 	str.w	r3, [sp, #1608]	; 0x648
    X->n = 0;
 80135cc:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
    X->p = NULL;
 80135d0:	f8cd 1650 	str.w	r1, [sp, #1616]	; 0x650
    X->s = 1;
 80135d4:	930f      	str	r3, [sp, #60]	; 0x3c
    X->n = 0;
 80135d6:	9110      	str	r1, [sp, #64]	; 0x40
    X->p = NULL;
 80135d8:	9111      	str	r1, [sp, #68]	; 0x44
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80135da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80135de:	a812      	add	r0, sp, #72	; 0x48
 80135e0:	f016 ffd3 	bl	802a58a <memset>

    i = mbedtls_mpi_bitlen( E );
 80135e4:	4638      	mov	r0, r7
 80135e6:	f7ff f952 	bl	801288e <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 80135ea:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 80135ee:	f080 81ed 	bcs.w	80139cc <mbedtls_mpi_exp_mod+0x46c>
 80135f2:	28ef      	cmp	r0, #239	; 0xef
 80135f4:	f200 8220 	bhi.w	8013a38 <mbedtls_mpi_exp_mod+0x4d8>
 80135f8:	284f      	cmp	r0, #79	; 0x4f
 80135fa:	f200 8220 	bhi.w	8013a3e <mbedtls_mpi_exp_mod+0x4de>
 80135fe:	2817      	cmp	r0, #23
 8013600:	bf94      	ite	ls
 8013602:	46cb      	movls	fp, r9
 8013604:	f04f 0b03 	movhi.w	fp, #3
 8013608:	e1e2      	b.n	80139d0 <mbedtls_mpi_exp_mod+0x470>
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 801360a:	4641      	mov	r1, r8
 801360c:	a815      	add	r0, sp, #84	; 0x54
 801360e:	f7ff f825 	bl	801265c <mbedtls_mpi_grow>
 8013612:	9002      	str	r0, [sp, #8]
 8013614:	b150      	cbz	r0, 801362c <mbedtls_mpi_exp_mod+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8013616:	f10b 34ff 	add.w	r4, fp, #4294967295
 801361a:	2301      	movs	r3, #1
 801361c:	fa03 f404 	lsl.w	r4, r3, r4
 8013620:	fa03 fb0b 	lsl.w	fp, r3, fp
 8013624:	45a3      	cmp	fp, r4
 8013626:	f200 81e5 	bhi.w	80139f4 <mbedtls_mpi_exp_mod+0x494>
 801362a:	e1ef      	b.n	8013a0c <mbedtls_mpi_exp_mod+0x4ac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 801362c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8013630:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
 8013634:	f7ff f812 	bl	801265c <mbedtls_mpi_grow>
 8013638:	9002      	str	r0, [sp, #8]
 801363a:	2800      	cmp	r0, #0
 801363c:	d1eb      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    neg = ( A->s == -1 );
 801363e:	9b03      	ldr	r3, [sp, #12]
 8013640:	f8d3 8000 	ldr.w	r8, [r3]
    if( neg )
 8013644:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013648:	d053      	beq.n	80136f2 <mbedtls_mpi_exp_mod+0x192>
    if( _RR == NULL || _RR->p == NULL )
 801364a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 801364e:	2b00      	cmp	r3, #0
 8013650:	d05b      	beq.n	801370a <mbedtls_mpi_exp_mod+0x1aa>
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d058      	beq.n	801370a <mbedtls_mpi_exp_mod+0x1aa>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 8013658:	f20d 6354 	addw	r3, sp, #1620	; 0x654
 801365c:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 8013660:	6810      	ldr	r0, [r2, #0]
 8013662:	6851      	ldr	r1, [r2, #4]
 8013664:	6892      	ldr	r2, [r2, #8]
 8013666:	c307      	stmia	r3!, {r0, r1, r2}
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 8013668:	4631      	mov	r1, r6
 801366a:	9803      	ldr	r0, [sp, #12]
 801366c:	f7ff fb19 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8013670:	2800      	cmp	r0, #0
 8013672:	db74      	blt.n	801375e <mbedtls_mpi_exp_mod+0x1fe>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 8013674:	4632      	mov	r2, r6
 8013676:	9903      	ldr	r1, [sp, #12]
 8013678:	a815      	add	r0, sp, #84	; 0x54
 801367a:	f7ff ff3c 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801367e:	9002      	str	r0, [sp, #8]
 8013680:	2800      	cmp	r0, #0
 8013682:	d1c8      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    *mm = ~x + 1;
 8013684:	4263      	negs	r3, r4
 8013686:	461c      	mov	r4, r3
 8013688:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 801368a:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	4623      	mov	r3, r4
 8013692:	4632      	mov	r2, r6
 8013694:	f20d 6154 	addw	r1, sp, #1620	; 0x654
 8013698:	a815      	add	r0, sp, #84	; 0x54
 801369a:	f7ff fa87 	bl	8012bac <mpi_montmul>
 801369e:	9002      	str	r0, [sp, #8]
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d1b8      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 80136a4:	f20d 6154 	addw	r1, sp, #1620	; 0x654
 80136a8:	4650      	mov	r0, sl
 80136aa:	f7ff f83a 	bl	8012722 <mbedtls_mpi_copy>
 80136ae:	9002      	str	r0, [sp, #8]
 80136b0:	2800      	cmp	r0, #0
 80136b2:	d1b0      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    mbedtls_mpi_uint z = 1;
 80136b4:	aa0b      	add	r2, sp, #44	; 0x2c
 80136b6:	2301      	movs	r3, #1
 80136b8:	930b      	str	r3, [sp, #44]	; 0x2c
    U.n = U.s = (int) z;
 80136ba:	930c      	str	r3, [sp, #48]	; 0x30
 80136bc:	930d      	str	r3, [sp, #52]	; 0x34
    U.p = &z;
 80136be:	920e      	str	r2, [sp, #56]	; 0x38
    return( mpi_montmul( A, &U, N, mm, T ) );
 80136c0:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	4623      	mov	r3, r4
 80136c8:	4632      	mov	r2, r6
 80136ca:	a90c      	add	r1, sp, #48	; 0x30
 80136cc:	4650      	mov	r0, sl
 80136ce:	f7ff fa6d 	bl	8012bac <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80136d2:	9002      	str	r0, [sp, #8]
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d19e      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    if( wsize > 1 )
 80136d8:	f1bb 0f01 	cmp.w	fp, #1
 80136dc:	d847      	bhi.n	801376e <mbedtls_mpi_exp_mod+0x20e>
    nblimbs = E->n;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	9305      	str	r3, [sp, #20]
    state   = 0;
 80136e2:	9507      	str	r5, [sp, #28]
    nbits   = 0;
 80136e4:	9504      	str	r5, [sp, #16]
    bufsize = 0;
 80136e6:	462c      	mov	r4, r5
    wbits   = 0;
 80136e8:	9506      	str	r5, [sp, #24]
            for( i = 0; i < wsize; i++ )
 80136ea:	9508      	str	r5, [sp, #32]
 80136ec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80136f0:	e0bd      	b.n	801386e <mbedtls_mpi_exp_mod+0x30e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 80136f2:	4619      	mov	r1, r3
 80136f4:	a80f      	add	r0, sp, #60	; 0x3c
 80136f6:	f7ff f814 	bl	8012722 <mbedtls_mpi_copy>
 80136fa:	9002      	str	r0, [sp, #8]
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d18a      	bne.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
        Apos.s = 1;
 8013700:	2301      	movs	r3, #1
 8013702:	930f      	str	r3, [sp, #60]	; 0x3c
        A = &Apos;
 8013704:	ab0f      	add	r3, sp, #60	; 0x3c
 8013706:	9303      	str	r3, [sp, #12]
 8013708:	e79f      	b.n	801364a <mbedtls_mpi_exp_mod+0xea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 801370a:	2101      	movs	r1, #1
 801370c:	f20d 6054 	addw	r0, sp, #1620	; 0x654
 8013710:	f7ff f870 	bl	80127f4 <mbedtls_mpi_lset>
 8013714:	9002      	str	r0, [sp, #8]
 8013716:	2800      	cmp	r0, #0
 8013718:	f47f af7d 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 801371c:	6871      	ldr	r1, [r6, #4]
 801371e:	0189      	lsls	r1, r1, #6
 8013720:	f20d 6054 	addw	r0, sp, #1620	; 0x654
 8013724:	f7ff f953 	bl	80129ce <mbedtls_mpi_shift_l>
 8013728:	9002      	str	r0, [sp, #8]
 801372a:	2800      	cmp	r0, #0
 801372c:	f47f af73 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 8013730:	4632      	mov	r2, r6
 8013732:	f20d 6154 	addw	r1, sp, #1620	; 0x654
 8013736:	4608      	mov	r0, r1
 8013738:	f7ff fedd 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801373c:	9002      	str	r0, [sp, #8]
 801373e:	2800      	cmp	r0, #0
 8013740:	f47f af69 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        if( _RR != NULL )
 8013744:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8013748:	2b00      	cmp	r3, #0
 801374a:	d08d      	beq.n	8013668 <mbedtls_mpi_exp_mod+0x108>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 801374c:	f20d 6354 	addw	r3, sp, #1620	; 0x654
 8013750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013752:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8013756:	6018      	str	r0, [r3, #0]
 8013758:	6059      	str	r1, [r3, #4]
 801375a:	609a      	str	r2, [r3, #8]
 801375c:	e784      	b.n	8013668 <mbedtls_mpi_exp_mod+0x108>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 801375e:	9903      	ldr	r1, [sp, #12]
 8013760:	a815      	add	r0, sp, #84	; 0x54
 8013762:	f7fe ffde 	bl	8012722 <mbedtls_mpi_copy>
 8013766:	9002      	str	r0, [sp, #8]
 8013768:	2800      	cmp	r0, #0
 801376a:	d08b      	beq.n	8013684 <mbedtls_mpi_exp_mod+0x124>
 801376c:	e753      	b.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
        j =  one << ( wsize - 1 );
 801376e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013772:	9205      	str	r2, [sp, #20]
 8013774:	2301      	movs	r3, #1
 8013776:	4093      	lsls	r3, r2
 8013778:	9306      	str	r3, [sp, #24]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 801377a:	230c      	movs	r3, #12
 801377c:	4093      	lsls	r3, r2
 801377e:	9307      	str	r3, [sp, #28]
 8013780:	aa12      	add	r2, sp, #72	; 0x48
 8013782:	18d4      	adds	r4, r2, r3
 8013784:	6871      	ldr	r1, [r6, #4]
 8013786:	3101      	adds	r1, #1
 8013788:	4620      	mov	r0, r4
 801378a:	f7fe ff67 	bl	801265c <mbedtls_mpi_grow>
 801378e:	9002      	str	r0, [sp, #8]
 8013790:	2800      	cmp	r0, #0
 8013792:	f47f af40 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 8013796:	a915      	add	r1, sp, #84	; 0x54
 8013798:	4620      	mov	r0, r4
 801379a:	f7fe ffc2 	bl	8012722 <mbedtls_mpi_copy>
 801379e:	9002      	str	r0, [sp, #8]
 80137a0:	2800      	cmp	r0, #0
 80137a2:	f47f af38 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        for( i = 0; i < wsize - 1; i++ )
 80137a6:	9504      	str	r5, [sp, #16]
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 80137a8:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80137ac:	9300      	str	r3, [sp, #0]
 80137ae:	9b03      	ldr	r3, [sp, #12]
 80137b0:	4632      	mov	r2, r6
 80137b2:	4621      	mov	r1, r4
 80137b4:	4620      	mov	r0, r4
 80137b6:	f7ff f9f9 	bl	8012bac <mpi_montmul>
 80137ba:	9002      	str	r0, [sp, #8]
 80137bc:	2800      	cmp	r0, #0
 80137be:	f47f af2a 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        for( i = 0; i < wsize - 1; i++ )
 80137c2:	9b04      	ldr	r3, [sp, #16]
 80137c4:	3301      	adds	r3, #1
 80137c6:	9304      	str	r3, [sp, #16]
 80137c8:	9a05      	ldr	r2, [sp, #20]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d1ec      	bne.n	80137a8 <mbedtls_mpi_exp_mod+0x248>
        for( i = j + 1; i < ( one << wsize ); i++ )
 80137ce:	9a06      	ldr	r2, [sp, #24]
 80137d0:	3201      	adds	r2, #1
 80137d2:	2301      	movs	r3, #1
 80137d4:	fa03 f30b 	lsl.w	r3, r3, fp
 80137d8:	429a      	cmp	r2, r3
 80137da:	d280      	bcs.n	80136de <mbedtls_mpi_exp_mod+0x17e>
 80137dc:	9b07      	ldr	r3, [sp, #28]
 80137de:	330c      	adds	r3, #12
 80137e0:	aa12      	add	r2, sp, #72	; 0x48
 80137e2:	18d4      	adds	r4, r2, r3
 80137e4:	230c      	movs	r3, #12
 80137e6:	fa03 f30b 	lsl.w	r3, r3, fp
 80137ea:	4413      	add	r3, r2
 80137ec:	9305      	str	r3, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 80137ee:	9404      	str	r4, [sp, #16]
 80137f0:	6871      	ldr	r1, [r6, #4]
 80137f2:	3101      	adds	r1, #1
 80137f4:	4620      	mov	r0, r4
 80137f6:	f7fe ff31 	bl	801265c <mbedtls_mpi_grow>
 80137fa:	9002      	str	r0, [sp, #8]
 80137fc:	2800      	cmp	r0, #0
 80137fe:	f47f af0a 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 8013802:	f1a4 010c 	sub.w	r1, r4, #12
 8013806:	4620      	mov	r0, r4
 8013808:	f7fe ff8b 	bl	8012722 <mbedtls_mpi_copy>
 801380c:	9002      	str	r0, [sp, #8]
 801380e:	2800      	cmp	r0, #0
 8013810:	f47f af01 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 8013814:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 8013818:	9300      	str	r3, [sp, #0]
 801381a:	9b03      	ldr	r3, [sp, #12]
 801381c:	4632      	mov	r2, r6
 801381e:	a915      	add	r1, sp, #84	; 0x54
 8013820:	9804      	ldr	r0, [sp, #16]
 8013822:	f7ff f9c3 	bl	8012bac <mpi_montmul>
 8013826:	9002      	str	r0, [sp, #8]
 8013828:	2800      	cmp	r0, #0
 801382a:	f47f aef4 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        for( i = j + 1; i < ( one << wsize ); i++ )
 801382e:	340c      	adds	r4, #12
 8013830:	9b05      	ldr	r3, [sp, #20]
 8013832:	429c      	cmp	r4, r3
 8013834:	d1db      	bne.n	80137ee <mbedtls_mpi_exp_mod+0x28e>
 8013836:	e752      	b.n	80136de <mbedtls_mpi_exp_mod+0x17e>
 8013838:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    for( i = 0; i < nbits; i++ )
 801383c:	9b04      	ldr	r3, [sp, #16]
 801383e:	2b00      	cmp	r3, #0
 8013840:	f000 8087 	beq.w	8013952 <mbedtls_mpi_exp_mod+0x3f2>
        if( ( wbits & ( one << wsize ) ) != 0 )
 8013844:	2501      	movs	r5, #1
 8013846:	fa05 f50b 	lsl.w	r5, r5, fp
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 801384a:	f50d 64c9 	add.w	r4, sp, #1608	; 0x648
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 801384e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013852:	e063      	b.n	801391c <mbedtls_mpi_exp_mod+0x3bc>
        nbits++;
 8013854:	9a04      	ldr	r2, [sp, #16]
 8013856:	3201      	adds	r2, #1
        wbits |= ( ei << ( wsize - nbits ) );
 8013858:	ebab 0102 	sub.w	r1, fp, r2
 801385c:	408b      	lsls	r3, r1
 801385e:	9906      	ldr	r1, [sp, #24]
 8013860:	4319      	orrs	r1, r3
 8013862:	9106      	str	r1, [sp, #24]
        if( nbits == wsize )
 8013864:	4593      	cmp	fp, r2
 8013866:	d026      	beq.n	80138b6 <mbedtls_mpi_exp_mod+0x356>
        nbits++;
 8013868:	9204      	str	r2, [sp, #16]
        state = 2;
 801386a:	2302      	movs	r3, #2
 801386c:	9307      	str	r3, [sp, #28]
        if( bufsize == 0 )
 801386e:	b934      	cbnz	r4, 801387e <mbedtls_mpi_exp_mod+0x31e>
            if( nblimbs == 0 )
 8013870:	9b05      	ldr	r3, [sp, #20]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d0e0      	beq.n	8013838 <mbedtls_mpi_exp_mod+0x2d8>
            nblimbs--;
 8013876:	9b05      	ldr	r3, [sp, #20]
 8013878:	3b01      	subs	r3, #1
 801387a:	9305      	str	r3, [sp, #20]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 801387c:	2420      	movs	r4, #32
        bufsize--;
 801387e:	3c01      	subs	r4, #1
        ei = (E->p[nblimbs] >> bufsize) & 1;
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	9a05      	ldr	r2, [sp, #20]
 8013884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013888:	40e3      	lsrs	r3, r4
        if( ei == 0 && state == 0 )
 801388a:	f013 0301 	ands.w	r3, r3, #1
 801388e:	d1e1      	bne.n	8013854 <mbedtls_mpi_exp_mod+0x2f4>
 8013890:	9a07      	ldr	r2, [sp, #28]
 8013892:	2a00      	cmp	r2, #0
 8013894:	d0eb      	beq.n	801386e <mbedtls_mpi_exp_mod+0x30e>
        if( ei == 0 && state == 1 )
 8013896:	2a01      	cmp	r2, #1
 8013898:	d1dc      	bne.n	8013854 <mbedtls_mpi_exp_mod+0x2f4>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 801389a:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	9b03      	ldr	r3, [sp, #12]
 80138a2:	4632      	mov	r2, r6
 80138a4:	4651      	mov	r1, sl
 80138a6:	4650      	mov	r0, sl
 80138a8:	f7ff f980 	bl	8012bac <mpi_montmul>
 80138ac:	9002      	str	r0, [sp, #8]
 80138ae:	2800      	cmp	r0, #0
 80138b0:	f47f aeb1 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
 80138b4:	e7db      	b.n	801386e <mbedtls_mpi_exp_mod+0x30e>
            for( i = 0; i < wsize; i++ )
 80138b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138ba:	e000      	b.n	80138be <mbedtls_mpi_exp_mod+0x35e>
 80138bc:	4698      	mov	r8, r3
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80138be:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	9b03      	ldr	r3, [sp, #12]
 80138c6:	4632      	mov	r2, r6
 80138c8:	4651      	mov	r1, sl
 80138ca:	4650      	mov	r0, sl
 80138cc:	f7ff f96e 	bl	8012bac <mpi_montmul>
 80138d0:	9002      	str	r0, [sp, #8]
 80138d2:	2800      	cmp	r0, #0
 80138d4:	f47f ae9f 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
            for( i = 0; i < wsize; i++ )
 80138d8:	f108 0301 	add.w	r3, r8, #1
 80138dc:	9a04      	ldr	r2, [sp, #16]
 80138de:	4542      	cmp	r2, r8
 80138e0:	d1ec      	bne.n	80138bc <mbedtls_mpi_exp_mod+0x35c>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 80138e2:	9b06      	ldr	r3, [sp, #24]
 80138e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80138e8:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	9b03      	ldr	r3, [sp, #12]
 80138f0:	4632      	mov	r2, r6
 80138f2:	a812      	add	r0, sp, #72	; 0x48
 80138f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80138f8:	4650      	mov	r0, sl
 80138fa:	f7ff f957 	bl	8012bac <mpi_montmul>
 80138fe:	9002      	str	r0, [sp, #8]
 8013900:	2800      	cmp	r0, #0
 8013902:	f47f ae88 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
            state--;
 8013906:	f8cd 901c 	str.w	r9, [sp, #28]
            nbits = 0;
 801390a:	9b08      	ldr	r3, [sp, #32]
 801390c:	9304      	str	r3, [sp, #16]
            wbits = 0;
 801390e:	9506      	str	r5, [sp, #24]
 8013910:	e7ad      	b.n	801386e <mbedtls_mpi_exp_mod+0x30e>
    for( i = 0; i < nbits; i++ )
 8013912:	f109 0901 	add.w	r9, r9, #1
 8013916:	9b04      	ldr	r3, [sp, #16]
 8013918:	454b      	cmp	r3, r9
 801391a:	d01a      	beq.n	8013952 <mbedtls_mpi_exp_mod+0x3f2>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 801391c:	9400      	str	r4, [sp, #0]
 801391e:	9b03      	ldr	r3, [sp, #12]
 8013920:	4632      	mov	r2, r6
 8013922:	4651      	mov	r1, sl
 8013924:	4650      	mov	r0, sl
 8013926:	f7ff f941 	bl	8012bac <mpi_montmul>
 801392a:	9002      	str	r0, [sp, #8]
 801392c:	2800      	cmp	r0, #0
 801392e:	f47f ae72 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        wbits <<= 1;
 8013932:	9b06      	ldr	r3, [sp, #24]
 8013934:	005b      	lsls	r3, r3, #1
 8013936:	9306      	str	r3, [sp, #24]
        if( ( wbits & ( one << wsize ) ) != 0 )
 8013938:	421d      	tst	r5, r3
 801393a:	d0ea      	beq.n	8013912 <mbedtls_mpi_exp_mod+0x3b2>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 801393c:	9400      	str	r4, [sp, #0]
 801393e:	9b03      	ldr	r3, [sp, #12]
 8013940:	4632      	mov	r2, r6
 8013942:	a915      	add	r1, sp, #84	; 0x54
 8013944:	4650      	mov	r0, sl
 8013946:	f7ff f931 	bl	8012bac <mpi_montmul>
 801394a:	9002      	str	r0, [sp, #8]
 801394c:	2800      	cmp	r0, #0
 801394e:	d0e0      	beq.n	8013912 <mbedtls_mpi_exp_mod+0x3b2>
 8013950:	e661      	b.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
    mbedtls_mpi_uint z = 1;
 8013952:	aa0b      	add	r2, sp, #44	; 0x2c
 8013954:	2301      	movs	r3, #1
 8013956:	930b      	str	r3, [sp, #44]	; 0x2c
    U.n = U.s = (int) z;
 8013958:	930c      	str	r3, [sp, #48]	; 0x30
 801395a:	930d      	str	r3, [sp, #52]	; 0x34
    U.p = &z;
 801395c:	920e      	str	r2, [sp, #56]	; 0x38
    return( mpi_montmul( A, &U, N, mm, T ) );
 801395e:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	9b03      	ldr	r3, [sp, #12]
 8013966:	4632      	mov	r2, r6
 8013968:	a90c      	add	r1, sp, #48	; 0x30
 801396a:	4650      	mov	r0, sl
 801396c:	f7ff f91e 	bl	8012bac <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 8013970:	9002      	str	r0, [sp, #8]
 8013972:	2800      	cmp	r0, #0
 8013974:	f47f ae4f 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 8013978:	f1b8 3fff 	cmp.w	r8, #4294967295
 801397c:	f47f ae4b 	bne.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2b00      	cmp	r3, #0
 8013984:	f43f ae47 	beq.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f013 0f01 	tst.w	r3, #1
 8013990:	f43f ae41 	beq.w	8013616 <mbedtls_mpi_exp_mod+0xb6>
        X->s = -1;
 8013994:	f04f 33ff 	mov.w	r3, #4294967295
 8013998:	f8ca 3000 	str.w	r3, [sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 801399c:	4652      	mov	r2, sl
 801399e:	4631      	mov	r1, r6
 80139a0:	4650      	mov	r0, sl
 80139a2:	f7ff fa83 	bl	8012eac <mbedtls_mpi_add_mpi>
 80139a6:	9002      	str	r0, [sp, #8]
cleanup:
 80139a8:	e635      	b.n	8013616 <mbedtls_mpi_exp_mod+0xb6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );

    if( _RR == NULL || _RR->p == NULL )
        mbedtls_mpi_free( &RR );
 80139aa:	f20d 6054 	addw	r0, sp, #1620	; 0x654
 80139ae:	f7fe fe42 	bl	8012636 <mbedtls_mpi_free>
 80139b2:	e03c      	b.n	8013a2e <mbedtls_mpi_exp_mod+0x4ce>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80139b4:	f06f 0303 	mvn.w	r3, #3
 80139b8:	9302      	str	r3, [sp, #8]
 80139ba:	e038      	b.n	8013a2e <mbedtls_mpi_exp_mod+0x4ce>
 80139bc:	f06f 0303 	mvn.w	r3, #3
 80139c0:	9302      	str	r3, [sp, #8]
 80139c2:	e034      	b.n	8013a2e <mbedtls_mpi_exp_mod+0x4ce>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80139c4:	f06f 0303 	mvn.w	r3, #3
 80139c8:	9302      	str	r3, [sp, #8]
 80139ca:	e030      	b.n	8013a2e <mbedtls_mpi_exp_mod+0x4ce>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 80139cc:	f04f 0b06 	mov.w	fp, #6
    j = N->n + 1;
 80139d0:	6873      	ldr	r3, [r6, #4]
 80139d2:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80139d6:	4641      	mov	r1, r8
 80139d8:	4650      	mov	r0, sl
 80139da:	f7fe fe3f 	bl	801265c <mbedtls_mpi_grow>
 80139de:	9002      	str	r0, [sp, #8]
 80139e0:	2800      	cmp	r0, #0
 80139e2:	f43f ae12 	beq.w	801360a <mbedtls_mpi_exp_mod+0xaa>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80139e6:	f10b 34ff 	add.w	r4, fp, #4294967295
 80139ea:	2301      	movs	r3, #1
 80139ec:	fa03 f404 	lsl.w	r4, r3, r4
 80139f0:	fa03 fb0b 	lsl.w	fp, r3, fp
 80139f4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80139f8:	ab12      	add	r3, sp, #72	; 0x48
 80139fa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
        mbedtls_mpi_free( &W[i] );
 80139fe:	4628      	mov	r0, r5
 8013a00:	f7fe fe19 	bl	8012636 <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 8013a04:	3401      	adds	r4, #1
 8013a06:	350c      	adds	r5, #12
 8013a08:	45a3      	cmp	fp, r4
 8013a0a:	d8f8      	bhi.n	80139fe <mbedtls_mpi_exp_mod+0x49e>
    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 8013a0c:	a815      	add	r0, sp, #84	; 0x54
 8013a0e:	f7fe fe12 	bl	8012636 <mbedtls_mpi_free>
 8013a12:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
 8013a16:	f7fe fe0e 	bl	8012636 <mbedtls_mpi_free>
 8013a1a:	a80f      	add	r0, sp, #60	; 0x3c
 8013a1c:	f7fe fe0b 	bl	8012636 <mbedtls_mpi_free>
    if( _RR == NULL || _RR->p == NULL )
 8013a20:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d0c0      	beq.n	80139aa <mbedtls_mpi_exp_mod+0x44a>
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d0bd      	beq.n	80139aa <mbedtls_mpi_exp_mod+0x44a>

    return( ret );
}
 8013a2e:	9802      	ldr	r0, [sp, #8]
 8013a30:	f20d 6d64 	addw	sp, sp, #1636	; 0x664
 8013a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 8013a38:	f04f 0b05 	mov.w	fp, #5
 8013a3c:	e7c8      	b.n	80139d0 <mbedtls_mpi_exp_mod+0x470>
 8013a3e:	f04f 0b04 	mov.w	fp, #4
 8013a42:	e7c5      	b.n	80139d0 <mbedtls_mpi_exp_mod+0x470>

08013a44 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 8013a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a46:	b08b      	sub	sp, #44	; 0x2c
 8013a48:	4606      	mov	r6, r0
 8013a4a:	4615      	mov	r5, r2
    X->s = 1;
 8013a4c:	2401      	movs	r4, #1
 8013a4e:	9407      	str	r4, [sp, #28]
    X->n = 0;
 8013a50:	2300      	movs	r3, #0
 8013a52:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8013a54:	9309      	str	r3, [sp, #36]	; 0x24
    X->s = 1;
 8013a56:	9404      	str	r4, [sp, #16]
    X->n = 0;
 8013a58:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8013a5a:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8013a5c:	9401      	str	r4, [sp, #4]
    X->n = 0;
 8013a5e:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8013a60:	9303      	str	r3, [sp, #12]
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 8013a62:	a804      	add	r0, sp, #16
 8013a64:	f7fe fe5d 	bl	8012722 <mbedtls_mpi_copy>
 8013a68:	4604      	mov	r4, r0
 8013a6a:	b158      	cbz	r0, 8013a84 <mbedtls_mpi_gcd+0x40>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 8013a6c:	a807      	add	r0, sp, #28
 8013a6e:	f7fe fde2 	bl	8012636 <mbedtls_mpi_free>
 8013a72:	a804      	add	r0, sp, #16
 8013a74:	f7fe fddf 	bl	8012636 <mbedtls_mpi_free>
 8013a78:	a801      	add	r0, sp, #4
 8013a7a:	f7fe fddc 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 8013a7e:	4620      	mov	r0, r4
 8013a80:	b00b      	add	sp, #44	; 0x2c
 8013a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 8013a84:	4629      	mov	r1, r5
 8013a86:	a801      	add	r0, sp, #4
 8013a88:	f7fe fe4b 	bl	8012722 <mbedtls_mpi_copy>
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d1ec      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
    lz = mbedtls_mpi_lsb( &TA );
 8013a92:	a804      	add	r0, sp, #16
 8013a94:	f7fe fedc 	bl	8012850 <mbedtls_mpi_lsb>
 8013a98:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 8013a9a:	a801      	add	r0, sp, #4
 8013a9c:	f7fe fed8 	bl	8012850 <mbedtls_mpi_lsb>
    if( lzt < lz )
 8013aa0:	4285      	cmp	r5, r0
 8013aa2:	bf28      	it	cs
 8013aa4:	4605      	movcs	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 8013aa6:	4629      	mov	r1, r5
 8013aa8:	a804      	add	r0, sp, #16
 8013aaa:	f7fe ffe8 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013aae:	4604      	mov	r4, r0
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d1db      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 8013ab4:	4629      	mov	r1, r5
 8013ab6:	a801      	add	r0, sp, #4
 8013ab8:	f7fe ffe1 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013abc:	4604      	mov	r4, r0
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	d1d4      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
    TA.s = TB.s = 1;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	9301      	str	r3, [sp, #4]
 8013ac6:	9304      	str	r3, [sp, #16]
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8013ac8:	2700      	movs	r7, #0
 8013aca:	e00e      	b.n	8013aea <mbedtls_mpi_gcd+0xa6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 8013acc:	aa04      	add	r2, sp, #16
 8013ace:	a901      	add	r1, sp, #4
 8013ad0:	4608      	mov	r0, r1
 8013ad2:	f7ff f9ae 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	2800      	cmp	r0, #0
 8013ada:	d1c7      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 8013adc:	2101      	movs	r1, #1
 8013ade:	a801      	add	r0, sp, #4
 8013ae0:	f7fe ffcd 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	d1c0      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 8013aea:	4639      	mov	r1, r7
 8013aec:	a804      	add	r0, sp, #16
 8013aee:	f7ff f930 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013af2:	b348      	cbz	r0, 8013b48 <mbedtls_mpi_gcd+0x104>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 8013af4:	a804      	add	r0, sp, #16
 8013af6:	f7fe feab 	bl	8012850 <mbedtls_mpi_lsb>
 8013afa:	4601      	mov	r1, r0
 8013afc:	a804      	add	r0, sp, #16
 8013afe:	f7fe ffbe 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013b02:	4604      	mov	r4, r0
 8013b04:	2800      	cmp	r0, #0
 8013b06:	d1b1      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 8013b08:	a801      	add	r0, sp, #4
 8013b0a:	f7fe fea1 	bl	8012850 <mbedtls_mpi_lsb>
 8013b0e:	4601      	mov	r1, r0
 8013b10:	a801      	add	r0, sp, #4
 8013b12:	f7fe ffb4 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013b16:	4604      	mov	r4, r0
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d1a7      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 8013b1c:	a901      	add	r1, sp, #4
 8013b1e:	a804      	add	r0, sp, #16
 8013b20:	f7ff f8bf 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8013b24:	2800      	cmp	r0, #0
 8013b26:	dbd1      	blt.n	8013acc <mbedtls_mpi_gcd+0x88>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 8013b28:	aa01      	add	r2, sp, #4
 8013b2a:	a904      	add	r1, sp, #16
 8013b2c:	4608      	mov	r0, r1
 8013b2e:	f7ff f980 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8013b32:	4604      	mov	r4, r0
 8013b34:	2800      	cmp	r0, #0
 8013b36:	d199      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 8013b38:	2101      	movs	r1, #1
 8013b3a:	a804      	add	r0, sp, #16
 8013b3c:	f7fe ff9f 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013b40:	4604      	mov	r4, r0
 8013b42:	2800      	cmp	r0, #0
 8013b44:	d0d1      	beq.n	8013aea <mbedtls_mpi_gcd+0xa6>
 8013b46:	e791      	b.n	8013a6c <mbedtls_mpi_gcd+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 8013b48:	4629      	mov	r1, r5
 8013b4a:	a801      	add	r0, sp, #4
 8013b4c:	f7fe ff3f 	bl	80129ce <mbedtls_mpi_shift_l>
 8013b50:	4604      	mov	r4, r0
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d18a      	bne.n	8013a6c <mbedtls_mpi_gcd+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 8013b56:	a901      	add	r1, sp, #4
 8013b58:	4630      	mov	r0, r6
 8013b5a:	f7fe fde2 	bl	8012722 <mbedtls_mpi_copy>
 8013b5e:	4604      	mov	r4, r0
cleanup:
 8013b60:	e784      	b.n	8013a6c <mbedtls_mpi_gcd+0x28>

08013b62 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8013b62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b66:	4604      	mov	r4, r0
 8013b68:	460e      	mov	r6, r1
 8013b6a:	4617      	mov	r7, r2
 8013b6c:	4698      	mov	r8, r3
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 8013b6e:	f011 0003 	ands.w	r0, r1, #3
 8013b72:	bf18      	it	ne
 8013b74:	2001      	movne	r0, #1
 8013b76:	eb00 0591 	add.w	r5, r0, r1, lsr #2

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 8013b7a:	6863      	ldr	r3, [r4, #4]
 8013b7c:	42ab      	cmp	r3, r5
 8013b7e:	d00d      	beq.n	8013b9c <mbedtls_mpi_fill_random+0x3a>
    {
        mbedtls_mpi_free( X );
 8013b80:	4620      	mov	r0, r4
 8013b82:	f7fe fd58 	bl	8012636 <mbedtls_mpi_free>
    X->s = 1;
 8013b86:	2301      	movs	r3, #1
 8013b88:	6023      	str	r3, [r4, #0]
    X->n = 0;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 8013b8e:	60a3      	str	r3, [r4, #8]
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 8013b90:	4629      	mov	r1, r5
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7fe fd62 	bl	801265c <mbedtls_mpi_grow>
 8013b98:	4681      	mov	r9, r0
 8013b9a:	b980      	cbnz	r0, 8013bbe <mbedtls_mpi_fill_random+0x5c>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f7fe fe28 	bl	80127f4 <mbedtls_mpi_lset>
 8013ba4:	4681      	mov	r9, r0
 8013ba6:	b950      	cbnz	r0, 8013bbe <mbedtls_mpi_fill_random+0x5c>
    size_t const overhead = ( limbs * ciL ) - size;
 8013ba8:	ebc6 0385 	rsb	r3, r6, r5, lsl #2

    Xp = (unsigned char*) X->p;
    f_rng( p_rng, Xp + overhead, size );
 8013bac:	68a1      	ldr	r1, [r4, #8]
 8013bae:	4632      	mov	r2, r6
 8013bb0:	4419      	add	r1, r3
 8013bb2:	4640      	mov	r0, r8
 8013bb4:	47b8      	blx	r7

    mpi_bigendian_to_host( X->p, limbs );
 8013bb6:	4629      	mov	r1, r5
 8013bb8:	68a0      	ldr	r0, [r4, #8]
 8013bba:	f7fe fd23 	bl	8012604 <mpi_bigendian_to_host>

cleanup:
    return( ret );
}
 8013bbe:	4648      	mov	r0, r9
 8013bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013bc4 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 8013bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bc6:	b09d      	sub	sp, #116	; 0x74
 8013bc8:	4607      	mov	r7, r0
 8013bca:	460e      	mov	r6, r1
 8013bcc:	4615      	mov	r5, r2
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 8013bce:	2101      	movs	r1, #1
 8013bd0:	4610      	mov	r0, r2
 8013bd2:	f7ff f8be 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013bd6:	2800      	cmp	r0, #0
 8013bd8:	f340 815b 	ble.w	8013e92 <mbedtls_mpi_inv_mod+0x2ce>
    X->s = 1;
 8013bdc:	2401      	movs	r4, #1
 8013bde:	9416      	str	r4, [sp, #88]	; 0x58
    X->n = 0;
 8013be0:	2300      	movs	r3, #0
 8013be2:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 8013be4:	9318      	str	r3, [sp, #96]	; 0x60
    X->s = 1;
 8013be6:	9413      	str	r4, [sp, #76]	; 0x4c
    X->n = 0;
 8013be8:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 8013bea:	9315      	str	r3, [sp, #84]	; 0x54
    X->s = 1;
 8013bec:	9410      	str	r4, [sp, #64]	; 0x40
    X->n = 0;
 8013bee:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 8013bf0:	9312      	str	r3, [sp, #72]	; 0x48
    X->s = 1;
 8013bf2:	940d      	str	r4, [sp, #52]	; 0x34
    X->n = 0;
 8013bf4:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 8013bf6:	930f      	str	r3, [sp, #60]	; 0x3c
    X->s = 1;
 8013bf8:	9419      	str	r4, [sp, #100]	; 0x64
    X->n = 0;
 8013bfa:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 8013bfc:	931b      	str	r3, [sp, #108]	; 0x6c
    X->s = 1;
 8013bfe:	940a      	str	r4, [sp, #40]	; 0x28
    X->n = 0;
 8013c00:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 8013c02:	930c      	str	r3, [sp, #48]	; 0x30
    X->s = 1;
 8013c04:	9407      	str	r4, [sp, #28]
    X->n = 0;
 8013c06:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 8013c08:	9309      	str	r3, [sp, #36]	; 0x24
    X->s = 1;
 8013c0a:	9404      	str	r4, [sp, #16]
    X->n = 0;
 8013c0c:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 8013c0e:	9306      	str	r3, [sp, #24]
    X->s = 1;
 8013c10:	9401      	str	r4, [sp, #4]
    X->n = 0;
 8013c12:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 8013c14:	9303      	str	r3, [sp, #12]

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 8013c16:	462a      	mov	r2, r5
 8013c18:	4631      	mov	r1, r6
 8013c1a:	a819      	add	r0, sp, #100	; 0x64
 8013c1c:	f7ff ff12 	bl	8013a44 <mbedtls_mpi_gcd>
 8013c20:	4604      	mov	r4, r0
 8013c22:	b930      	cbnz	r0, 8013c32 <mbedtls_mpi_inv_mod+0x6e>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8013c24:	2101      	movs	r1, #1
 8013c26:	a819      	add	r0, sp, #100	; 0x64
 8013c28:	f7ff f893 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013c2c:	b1f8      	cbz	r0, 8013c6e <mbedtls_mpi_inv_mod+0xaa>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8013c2e:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 8013c32:	a816      	add	r0, sp, #88	; 0x58
 8013c34:	f7fe fcff 	bl	8012636 <mbedtls_mpi_free>
 8013c38:	a813      	add	r0, sp, #76	; 0x4c
 8013c3a:	f7fe fcfc 	bl	8012636 <mbedtls_mpi_free>
 8013c3e:	a810      	add	r0, sp, #64	; 0x40
 8013c40:	f7fe fcf9 	bl	8012636 <mbedtls_mpi_free>
 8013c44:	a80d      	add	r0, sp, #52	; 0x34
 8013c46:	f7fe fcf6 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 8013c4a:	a819      	add	r0, sp, #100	; 0x64
 8013c4c:	f7fe fcf3 	bl	8012636 <mbedtls_mpi_free>
 8013c50:	a80a      	add	r0, sp, #40	; 0x28
 8013c52:	f7fe fcf0 	bl	8012636 <mbedtls_mpi_free>
 8013c56:	a807      	add	r0, sp, #28
 8013c58:	f7fe fced 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 8013c5c:	a804      	add	r0, sp, #16
 8013c5e:	f7fe fcea 	bl	8012636 <mbedtls_mpi_free>
 8013c62:	a801      	add	r0, sp, #4
 8013c64:	f7fe fce7 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 8013c68:	4620      	mov	r0, r4
 8013c6a:	b01d      	add	sp, #116	; 0x74
 8013c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 8013c6e:	462a      	mov	r2, r5
 8013c70:	4631      	mov	r1, r6
 8013c72:	a816      	add	r0, sp, #88	; 0x58
 8013c74:	f7ff fc3f 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d1d9      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 8013c7e:	a916      	add	r1, sp, #88	; 0x58
 8013c80:	a813      	add	r0, sp, #76	; 0x4c
 8013c82:	f7fe fd4e 	bl	8012722 <mbedtls_mpi_copy>
 8013c86:	4604      	mov	r4, r0
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d1d2      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	a80a      	add	r0, sp, #40	; 0x28
 8013c90:	f7fe fd47 	bl	8012722 <mbedtls_mpi_copy>
 8013c94:	4604      	mov	r4, r0
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d1cb      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 8013c9a:	4629      	mov	r1, r5
 8013c9c:	a807      	add	r0, sp, #28
 8013c9e:	f7fe fd40 	bl	8012722 <mbedtls_mpi_copy>
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d1c4      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 8013ca8:	2101      	movs	r1, #1
 8013caa:	a810      	add	r0, sp, #64	; 0x40
 8013cac:	f7fe fda2 	bl	80127f4 <mbedtls_mpi_lset>
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	d1bd      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	a80d      	add	r0, sp, #52	; 0x34
 8013cba:	f7fe fd9b 	bl	80127f4 <mbedtls_mpi_lset>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	2800      	cmp	r0, #0
 8013cc2:	d1b6      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	a804      	add	r0, sp, #16
 8013cc8:	f7fe fd94 	bl	80127f4 <mbedtls_mpi_lset>
 8013ccc:	4604      	mov	r4, r0
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d1af      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 8013cd2:	2101      	movs	r1, #1
 8013cd4:	a801      	add	r0, sp, #4
 8013cd6:	f7fe fd8d 	bl	80127f4 <mbedtls_mpi_lset>
 8013cda:	4604      	mov	r4, r0
 8013cdc:	b1f0      	cbz	r0, 8013d1c <mbedtls_mpi_inv_mod+0x158>
 8013cde:	e7a8      	b.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 8013ce0:	aa0a      	add	r2, sp, #40	; 0x28
 8013ce2:	a910      	add	r1, sp, #64	; 0x40
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	f7ff f8e1 	bl	8012eac <mbedtls_mpi_add_mpi>
 8013cea:	4604      	mov	r4, r0
 8013cec:	2800      	cmp	r0, #0
 8013cee:	d1a0      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 8013cf0:	aa16      	add	r2, sp, #88	; 0x58
 8013cf2:	a90d      	add	r1, sp, #52	; 0x34
 8013cf4:	4608      	mov	r0, r1
 8013cf6:	f7ff f8ff 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d198      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 8013d00:	2101      	movs	r1, #1
 8013d02:	a810      	add	r0, sp, #64	; 0x40
 8013d04:	f7fe febb 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013d08:	4604      	mov	r4, r0
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d191      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 8013d0e:	2101      	movs	r1, #1
 8013d10:	a80d      	add	r0, sp, #52	; 0x34
 8013d12:	f7fe feb4 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013d16:	4604      	mov	r4, r0
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d18a      	bne.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
        while( ( TU.p[0] & 1 ) == 0 )
 8013d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f013 0f01 	tst.w	r3, #1
 8013d24:	d112      	bne.n	8013d4c <mbedtls_mpi_inv_mod+0x188>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 8013d26:	2101      	movs	r1, #1
 8013d28:	a813      	add	r0, sp, #76	; 0x4c
 8013d2a:	f7fe fea8 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013d2e:	4604      	mov	r4, r0
 8013d30:	2800      	cmp	r0, #0
 8013d32:	f47f af7e 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 8013d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f013 0f01 	tst.w	r3, #1
 8013d3e:	d1cf      	bne.n	8013ce0 <mbedtls_mpi_inv_mod+0x11c>
 8013d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f013 0f01 	tst.w	r3, #1
 8013d48:	d0da      	beq.n	8013d00 <mbedtls_mpi_inv_mod+0x13c>
 8013d4a:	e7c9      	b.n	8013ce0 <mbedtls_mpi_inv_mod+0x11c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8013d4c:	2601      	movs	r6, #1
 8013d4e:	e021      	b.n	8013d94 <mbedtls_mpi_inv_mod+0x1d0>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 8013d50:	aa0a      	add	r2, sp, #40	; 0x28
 8013d52:	a904      	add	r1, sp, #16
 8013d54:	4608      	mov	r0, r1
 8013d56:	f7ff f8a9 	bl	8012eac <mbedtls_mpi_add_mpi>
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f47f af68 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 8013d62:	aa16      	add	r2, sp, #88	; 0x58
 8013d64:	a901      	add	r1, sp, #4
 8013d66:	4608      	mov	r0, r1
 8013d68:	f7ff f8c6 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013d6c:	4604      	mov	r4, r0
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f47f af5f 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 8013d74:	4631      	mov	r1, r6
 8013d76:	a804      	add	r0, sp, #16
 8013d78:	f7fe fe81 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	f47f af57 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 8013d84:	4631      	mov	r1, r6
 8013d86:	a801      	add	r0, sp, #4
 8013d88:	f7fe fe79 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	f47f af4f 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
        while( ( TV.p[0] & 1 ) == 0 )
 8013d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f013 0f01 	tst.w	r3, #1
 8013d9c:	d112      	bne.n	8013dc4 <mbedtls_mpi_inv_mod+0x200>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 8013d9e:	4631      	mov	r1, r6
 8013da0:	a807      	add	r0, sp, #28
 8013da2:	f7fe fe6c 	bl	8012a7e <mbedtls_mpi_shift_r>
 8013da6:	4604      	mov	r4, r0
 8013da8:	2800      	cmp	r0, #0
 8013daa:	f47f af42 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 8013dae:	9b06      	ldr	r3, [sp, #24]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	f013 0f01 	tst.w	r3, #1
 8013db6:	d1cb      	bne.n	8013d50 <mbedtls_mpi_inv_mod+0x18c>
 8013db8:	9b03      	ldr	r3, [sp, #12]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f013 0f01 	tst.w	r3, #1
 8013dc0:	d0d8      	beq.n	8013d74 <mbedtls_mpi_inv_mod+0x1b0>
 8013dc2:	e7c5      	b.n	8013d50 <mbedtls_mpi_inv_mod+0x18c>
        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 8013dc4:	a907      	add	r1, sp, #28
 8013dc6:	a813      	add	r0, sp, #76	; 0x4c
 8013dc8:	f7fe ff6b 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	db30      	blt.n	8013e32 <mbedtls_mpi_inv_mod+0x26e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 8013dd0:	aa07      	add	r2, sp, #28
 8013dd2:	a913      	add	r1, sp, #76	; 0x4c
 8013dd4:	4608      	mov	r0, r1
 8013dd6:	f7ff f88f 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013dda:	4604      	mov	r4, r0
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	f47f af28 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 8013de2:	aa04      	add	r2, sp, #16
 8013de4:	a910      	add	r1, sp, #64	; 0x40
 8013de6:	4608      	mov	r0, r1
 8013de8:	f7ff f886 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013dec:	4604      	mov	r4, r0
 8013dee:	2800      	cmp	r0, #0
 8013df0:	f47f af1f 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 8013df4:	aa01      	add	r2, sp, #4
 8013df6:	a90d      	add	r1, sp, #52	; 0x34
 8013df8:	4608      	mov	r0, r1
 8013dfa:	f7ff f87d 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013dfe:	4604      	mov	r4, r0
 8013e00:	2800      	cmp	r0, #0
 8013e02:	f47f af16 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 8013e06:	2100      	movs	r1, #0
 8013e08:	a813      	add	r0, sp, #76	; 0x4c
 8013e0a:	f7fe ffa2 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d184      	bne.n	8013d1c <mbedtls_mpi_inv_mod+0x158>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 8013e12:	2600      	movs	r6, #0
 8013e14:	4631      	mov	r1, r6
 8013e16:	a804      	add	r0, sp, #16
 8013e18:	f7fe ff9b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8013e1c:	2800      	cmp	r0, #0
 8013e1e:	da23      	bge.n	8013e68 <mbedtls_mpi_inv_mod+0x2a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 8013e20:	462a      	mov	r2, r5
 8013e22:	a904      	add	r1, sp, #16
 8013e24:	4608      	mov	r0, r1
 8013e26:	f7ff f841 	bl	8012eac <mbedtls_mpi_add_mpi>
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d0f1      	beq.n	8013e14 <mbedtls_mpi_inv_mod+0x250>
 8013e30:	e6ff      	b.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 8013e32:	aa13      	add	r2, sp, #76	; 0x4c
 8013e34:	a907      	add	r1, sp, #28
 8013e36:	4608      	mov	r0, r1
 8013e38:	f7ff f85e 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	2800      	cmp	r0, #0
 8013e40:	f47f aef7 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 8013e44:	aa10      	add	r2, sp, #64	; 0x40
 8013e46:	a904      	add	r1, sp, #16
 8013e48:	4608      	mov	r0, r1
 8013e4a:	f7ff f855 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013e4e:	4604      	mov	r4, r0
 8013e50:	2800      	cmp	r0, #0
 8013e52:	f47f aeee 	bne.w	8013c32 <mbedtls_mpi_inv_mod+0x6e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 8013e56:	aa0d      	add	r2, sp, #52	; 0x34
 8013e58:	a901      	add	r1, sp, #4
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	f7ff f84c 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013e60:	4604      	mov	r4, r0
 8013e62:	2800      	cmp	r0, #0
 8013e64:	d0cf      	beq.n	8013e06 <mbedtls_mpi_inv_mod+0x242>
 8013e66:	e6e4      	b.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 8013e68:	4629      	mov	r1, r5
 8013e6a:	a804      	add	r0, sp, #16
 8013e6c:	f7fe ff19 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8013e70:	2800      	cmp	r0, #0
 8013e72:	db08      	blt.n	8013e86 <mbedtls_mpi_inv_mod+0x2c2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 8013e74:	462a      	mov	r2, r5
 8013e76:	a904      	add	r1, sp, #16
 8013e78:	4608      	mov	r0, r1
 8013e7a:	f7ff f83d 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8013e7e:	4604      	mov	r4, r0
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d0f1      	beq.n	8013e68 <mbedtls_mpi_inv_mod+0x2a4>
 8013e84:	e6d5      	b.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 8013e86:	a904      	add	r1, sp, #16
 8013e88:	4638      	mov	r0, r7
 8013e8a:	f7fe fc4a 	bl	8012722 <mbedtls_mpi_copy>
 8013e8e:	4604      	mov	r4, r0
cleanup:
 8013e90:	e6cf      	b.n	8013c32 <mbedtls_mpi_inv_mod+0x6e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 8013e92:	f06f 0403 	mvn.w	r4, #3
 8013e96:	e6e7      	b.n	8013c68 <mbedtls_mpi_inv_mod+0xa4>

08013e98 <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 8013e98:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 8013e9a:	6804      	ldr	r4, [r0, #0]
 8013e9c:	680b      	ldr	r3, [r1, #0]
 8013e9e:	4063      	eors	r3, r4
    I1 = x[1] ^ k[1];
 8013ea0:	6840      	ldr	r0, [r0, #4]
 8013ea2:	6849      	ldr	r1, [r1, #4]
 8013ea4:	4048      	eors	r0, r1

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 8013ea6:	4c1a      	ldr	r4, [pc, #104]	; (8013f10 <camellia_feistel+0x78>)
 8013ea8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013eac:	f814 c001 	ldrb.w	ip, [r4, r1]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8013eb0:	4d18      	ldr	r5, [pc, #96]	; (8013f14 <camellia_feistel+0x7c>)
 8013eb2:	0e19      	lsrs	r1, r3, #24
 8013eb4:	5c6e      	ldrb	r6, [r5, r1]
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 8013eb6:	4f18      	ldr	r7, [pc, #96]	; (8013f18 <camellia_feistel+0x80>)
 8013eb8:	b2d9      	uxtb	r1, r3
 8013eba:	5c79      	ldrb	r1, [r7, r1]
 8013ebc:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 8013ec0:	4e16      	ldr	r6, [pc, #88]	; (8013f1c <camellia_feistel+0x84>)
 8013ec2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8013ec6:	5cf3      	ldrb	r3, [r6, r3]
 8013ec8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8013ecc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 8013ed0:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013ed4:	5cff      	ldrb	r7, [r7, r3]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8013ed6:	0e03      	lsrs	r3, r0, #24
 8013ed8:	5cf6      	ldrb	r6, [r6, r3]
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 8013eda:	b2c3      	uxtb	r3, r0
 8013edc:	5ceb      	ldrb	r3, [r5, r3]
 8013ede:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8013ee2:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8013ee6:	5c20      	ldrb	r0, [r4, r0]
 8013ee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8013eec:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

    I0 ^= (I1 << 8) | (I1 >> 24);
 8013ef0:	ea81 6133 	eor.w	r1, r1, r3, ror #24
    I1 ^= (I0 << 16) | (I0 >> 16);
 8013ef4:	ea83 4331 	eor.w	r3, r3, r1, ror #16
    I0 ^= (I1 >> 8) | (I1 << 24);
 8013ef8:	ea81 2133 	eor.w	r1, r1, r3, ror #8
    I1 ^= (I0 >> 8) | (I0 << 24);

    z[0] ^= I1;
 8013efc:	6810      	ldr	r0, [r2, #0]
 8013efe:	4043      	eors	r3, r0
 8013f00:	ea83 2331 	eor.w	r3, r3, r1, ror #8
 8013f04:	6013      	str	r3, [r2, #0]
    z[1] ^= I0;
 8013f06:	6853      	ldr	r3, [r2, #4]
 8013f08:	4059      	eors	r1, r3
 8013f0a:	6051      	str	r1, [r2, #4]
}
 8013f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8013f0e:	4770      	bx	lr
 8013f10:	08031324 	.word	0x08031324
 8013f14:	08031124 	.word	0x08031124
 8013f18:	08031424 	.word	0x08031424
 8013f1c:	08031224 	.word	0x08031224

08013f20 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8013f20:	b508      	push	{r3, lr}
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 8013f22:	f44f 728a 	mov.w	r2, #276	; 0x114
 8013f26:	2100      	movs	r1, #0
 8013f28:	f016 fb2f 	bl	802a58a <memset>
}
 8013f2c:	bd08      	pop	{r3, pc}

08013f2e <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
    if( ctx == NULL )
 8013f2e:	b128      	cbz	r0, 8013f3c <mbedtls_camellia_free+0xe>
{
 8013f30:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 8013f32:	f44f 718a 	mov.w	r1, #276	; 0x114
 8013f36:	f007 f805 	bl	801af44 <mbedtls_platform_zeroize>
}
 8013f3a:	bd08      	pop	{r3, pc}
 8013f3c:	4770      	bx	lr
	...

08013f40 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8013f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f44:	b0c3      	sub	sp, #268	; 0x10c
 8013f46:	4682      	mov	sl, r0
 8013f48:	460e      	mov	r6, r1
 8013f4a:	4690      	mov	r8, r2
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 8013f4c:	1d04      	adds	r4, r0, #4

    memset( t, 0, 64 );
 8013f4e:	2240      	movs	r2, #64	; 0x40
 8013f50:	2100      	movs	r1, #0
 8013f52:	a832      	add	r0, sp, #200	; 0xc8
 8013f54:	f016 fb19 	bl	802a58a <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 8013f58:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	4620      	mov	r0, r4
 8013f60:	f016 fb13 	bl	802a58a <memset>

    switch( keybits )
 8013f64:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 8013f68:	f000 8205 	beq.w	8014376 <mbedtls_camellia_setkey_enc+0x436>
 8013f6c:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8013f70:	f000 8201 	beq.w	8014376 <mbedtls_camellia_setkey_enc+0x436>
 8013f74:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8013f78:	d002      	beq.n	8013f80 <mbedtls_camellia_setkey_enc+0x40>
 8013f7a:	f06f 0023 	mvn.w	r0, #35	; 0x23
 8013f7e:	e1f7      	b.n	8014370 <mbedtls_camellia_setkey_enc+0x430>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 8013f80:	2303      	movs	r3, #3
 8013f82:	f8ca 3000 	str.w	r3, [sl]
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
    }

    for( i = 0; i < keybits / 8; ++i )
 8013f86:	2710      	movs	r7, #16
        case 128: ctx->nr = 3; idx = 0; break;
 8013f88:	2500      	movs	r5, #0
 8013f8a:	1e72      	subs	r2, r6, #1
 8013f8c:	a932      	add	r1, sp, #200	; 0xc8
        t[i] = key[i];
 8013f8e:	4613      	mov	r3, r2
 8013f90:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013f94:	f801 0b01 	strb.w	r0, [r1], #1
    for( i = 0; i < keybits / 8; ++i )
 8013f98:	3302      	adds	r3, #2
 8013f9a:	1b9b      	subs	r3, r3, r6
 8013f9c:	429f      	cmp	r7, r3
 8013f9e:	d8f6      	bhi.n	8013f8e <mbedtls_camellia_setkey_enc+0x4e>

    if( keybits == 192 ) {
 8013fa0:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 8013fa4:	f000 8095 	beq.w	80140d2 <mbedtls_camellia_setkey_enc+0x192>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 8013fa8:	4b9a      	ldr	r3, [pc, #616]	; (8014214 <mbedtls_camellia_setkey_enc+0x2d4>)
 8013faa:	a926      	add	r1, sp, #152	; 0x98
 8013fac:	f103 0030 	add.w	r0, r3, #48	; 0x30
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 8013fb0:	781e      	ldrb	r6, [r3, #0]
 8013fb2:	785a      	ldrb	r2, [r3, #1]
 8013fb4:	0412      	lsls	r2, r2, #16
 8013fb6:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8013fba:	78de      	ldrb	r6, [r3, #3]
 8013fbc:	4332      	orrs	r2, r6
 8013fbe:	789e      	ldrb	r6, [r3, #2]
 8013fc0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8013fc4:	600a      	str	r2, [r1, #0]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 8013fc6:	791e      	ldrb	r6, [r3, #4]
 8013fc8:	795a      	ldrb	r2, [r3, #5]
 8013fca:	0412      	lsls	r2, r2, #16
 8013fcc:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
 8013fd0:	79de      	ldrb	r6, [r3, #7]
 8013fd2:	4332      	orrs	r2, r6
 8013fd4:	799e      	ldrb	r6, [r3, #6]
 8013fd6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8013fda:	604a      	str	r2, [r1, #4]
    for( i = 0; i < 6; i++ ) {
 8013fdc:	3308      	adds	r3, #8
 8013fde:	3108      	adds	r1, #8
 8013fe0:	4283      	cmp	r3, r0
 8013fe2:	d1e5      	bne.n	8013fb0 <mbedtls_camellia_setkey_enc+0x70>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 8013fe4:	2240      	movs	r2, #64	; 0x40
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	a816      	add	r0, sp, #88	; 0x58
 8013fea:	f016 face 	bl	802a58a <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 8013fee:	aa32      	add	r2, sp, #200	; 0xc8
 8013ff0:	a915      	add	r1, sp, #84	; 0x54
 8013ff2:	ae3a      	add	r6, sp, #232	; 0xe8
        GET_UINT32_BE( KC[i], t, i * 4 );
 8013ff4:	7810      	ldrb	r0, [r2, #0]
 8013ff6:	7853      	ldrb	r3, [r2, #1]
 8013ff8:	041b      	lsls	r3, r3, #16
 8013ffa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8013ffe:	78d0      	ldrb	r0, [r2, #3]
 8014000:	4303      	orrs	r3, r0
 8014002:	7890      	ldrb	r0, [r2, #2]
 8014004:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8014008:	f841 3f04 	str.w	r3, [r1, #4]!
    for( i = 0; i < 8; i++ )
 801400c:	3204      	adds	r2, #4
 801400e:	42b2      	cmp	r2, r6
 8014010:	d1f0      	bne.n	8013ff4 <mbedtls_camellia_setkey_enc+0xb4>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8014012:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014014:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014016:	4053      	eors	r3, r2
 8014018:	931e      	str	r3, [sp, #120]	; 0x78
 801401a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801401c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801401e:	4053      	eors	r3, r2
 8014020:	931f      	str	r3, [sp, #124]	; 0x7c
 8014022:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014024:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014026:	4053      	eors	r3, r2
 8014028:	9320      	str	r3, [sp, #128]	; 0x80
 801402a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801402c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801402e:	4053      	eors	r3, r2
 8014030:	9321      	str	r3, [sp, #132]	; 0x84

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8014032:	aa20      	add	r2, sp, #128	; 0x80
 8014034:	a926      	add	r1, sp, #152	; 0x98
 8014036:	a81e      	add	r0, sp, #120	; 0x78
 8014038:	f7ff ff2e 	bl	8013e98 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 801403c:	aa1e      	add	r2, sp, #120	; 0x78
 801403e:	a928      	add	r1, sp, #160	; 0xa0
 8014040:	a820      	add	r0, sp, #128	; 0x80
 8014042:	f7ff ff29 	bl	8013e98 <camellia_feistel>

    for( i = 0; i < 4; ++i )
 8014046:	ab1e      	add	r3, sp, #120	; 0x78
 8014048:	a822      	add	r0, sp, #136	; 0x88
        KC[8 + i] ^= KC[i];
 801404a:	f853 1b04 	ldr.w	r1, [r3], #4
 801404e:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8014052:	404a      	eors	r2, r1
 8014054:	f843 2c04 	str.w	r2, [r3, #-4]
    for( i = 0; i < 4; ++i )
 8014058:	4283      	cmp	r3, r0
 801405a:	d1f6      	bne.n	801404a <mbedtls_camellia_setkey_enc+0x10a>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 801405c:	aa20      	add	r2, sp, #128	; 0x80
 801405e:	a92a      	add	r1, sp, #168	; 0xa8
 8014060:	a81e      	add	r0, sp, #120	; 0x78
 8014062:	f7ff ff19 	bl	8013e98 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 8014066:	aa1e      	add	r2, sp, #120	; 0x78
 8014068:	a92c      	add	r1, sp, #176	; 0xb0
 801406a:	a820      	add	r0, sp, #128	; 0x80
 801406c:	f7ff ff14 	bl	8013e98 <camellia_feistel>

    if( keybits > 128 ) {
 8014070:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8014074:	d919      	bls.n	80140aa <mbedtls_camellia_setkey_enc+0x16a>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8014076:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014078:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801407a:	4053      	eors	r3, r2
 801407c:	9322      	str	r3, [sp, #136]	; 0x88
 801407e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014080:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014082:	4053      	eors	r3, r2
 8014084:	9323      	str	r3, [sp, #140]	; 0x8c
 8014086:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014088:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801408a:	4053      	eors	r3, r2
 801408c:	9324      	str	r3, [sp, #144]	; 0x90
 801408e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014092:	4053      	eors	r3, r2
 8014094:	9325      	str	r3, [sp, #148]	; 0x94

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 8014096:	aa24      	add	r2, sp, #144	; 0x90
 8014098:	a92e      	add	r1, sp, #184	; 0xb8
 801409a:	a822      	add	r0, sp, #136	; 0x88
 801409c:	f7ff fefc 	bl	8013e98 <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 80140a0:	aa22      	add	r2, sp, #136	; 0x88
 80140a2:	a930      	add	r1, sp, #192	; 0xc0
 80140a4:	a824      	add	r0, sp, #144	; 0x90
 80140a6:	f7ff fef7 	bl	8013e98 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 80140aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80140ac:	9302      	str	r3, [sp, #8]
 80140ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140b0:	9303      	str	r3, [sp, #12]
 80140b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80140b4:	9304      	str	r3, [sp, #16]
 80140b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80140b8:	9305      	str	r3, [sp, #20]
 80140ba:	46a9      	mov	r9, r5
 80140bc:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80140c0:	4b55      	ldr	r3, [pc, #340]	; (8014218 <mbedtls_camellia_setkey_enc+0x2d8>)
 80140c2:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80140c6:	f10d 0c08 	add.w	ip, sp, #8
 80140ca:	4663      	mov	r3, ip
 80140cc:	220f      	movs	r2, #15
 80140ce:	4627      	mov	r7, r4
 80140d0:	e00c      	b.n	80140ec <mbedtls_camellia_setkey_enc+0x1ac>
 80140d2:	ab36      	add	r3, sp, #216	; 0xd8
 80140d4:	a938      	add	r1, sp, #224	; 0xe0
            t[24 + i] = ~t[16 + i];
 80140d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140da:	43d2      	mvns	r2, r2
 80140dc:	71da      	strb	r2, [r3, #7]
        for( i = 0; i < 8; i++ )
 80140de:	428b      	cmp	r3, r1
 80140e0:	d1f9      	bne.n	80140d6 <mbedtls_camellia_setkey_enc+0x196>
 80140e2:	e761      	b.n	8013fa8 <mbedtls_camellia_setkey_enc+0x68>
    SHIFT_AND_PLACE( idx, 0 );
 80140e4:	320f      	adds	r2, #15
 80140e6:	3310      	adds	r3, #16
 80140e8:	2a4b      	cmp	r2, #75	; 0x4b
 80140ea:	d021      	beq.n	8014130 <mbedtls_camellia_setkey_enc+0x1f0>
 80140ec:	f815 1b01 	ldrb.w	r1, [r5], #1
 80140f0:	2900      	cmp	r1, #0
 80140f2:	d0f7      	beq.n	80140e4 <mbedtls_camellia_setkey_enc+0x1a4>
 80140f4:	f002 001f 	and.w	r0, r2, #31
 80140f8:	f1c0 0420 	rsb	r4, r0, #32
 80140fc:	9902      	ldr	r1, [sp, #8]
 80140fe:	4081      	lsls	r1, r0
 8014100:	9e03      	ldr	r6, [sp, #12]
 8014102:	40e6      	lsrs	r6, r4
 8014104:	4071      	eors	r1, r6
 8014106:	6119      	str	r1, [r3, #16]
 8014108:	9903      	ldr	r1, [sp, #12]
 801410a:	4081      	lsls	r1, r0
 801410c:	9e04      	ldr	r6, [sp, #16]
 801410e:	40e6      	lsrs	r6, r4
 8014110:	4071      	eors	r1, r6
 8014112:	6159      	str	r1, [r3, #20]
 8014114:	9904      	ldr	r1, [sp, #16]
 8014116:	4081      	lsls	r1, r0
 8014118:	9e05      	ldr	r6, [sp, #20]
 801411a:	40e6      	lsrs	r6, r4
 801411c:	4071      	eors	r1, r6
 801411e:	6199      	str	r1, [r3, #24]
 8014120:	9905      	ldr	r1, [sp, #20]
 8014122:	4081      	lsls	r1, r0
 8014124:	9e02      	ldr	r6, [sp, #8]
 8014126:	fa26 f404 	lsr.w	r4, r6, r4
 801412a:	4061      	eors	r1, r4
 801412c:	61d9      	str	r1, [r3, #28]
 801412e:	e7d9      	b.n	80140e4 <mbedtls_camellia_setkey_enc+0x1a4>
 8014130:	463c      	mov	r4, r7
 8014132:	ea4f 0589 	mov.w	r5, r9, lsl #2
 8014136:	eb05 0309 	add.w	r3, r5, r9
 801413a:	011a      	lsls	r2, r3, #4
 801413c:	9201      	str	r2, [sp, #4]
 801413e:	4d37      	ldr	r5, [pc, #220]	; (801421c <mbedtls_camellia_setkey_enc+0x2dc>)
 8014140:	eb05 1503 	add.w	r5, r5, r3, lsl #4
 8014144:	f10c 0350 	add.w	r3, ip, #80	; 0x50
 8014148:	4661      	mov	r1, ip
 801414a:	f915 2f01 	ldrsb.w	r2, [r5, #1]!
 801414e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014152:	bf1c      	itt	ne
 8014154:	6808      	ldrne	r0, [r1, #0]
 8014156:	f844 0022 	strne.w	r0, [r4, r2, lsl #2]
 801415a:	3104      	adds	r1, #4
 801415c:	4299      	cmp	r1, r3
 801415e:	d1f4      	bne.n	801414a <mbedtls_camellia_setkey_enc+0x20a>

    /* Manipulating KR */
    if( keybits > 128 ) {
 8014160:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8014164:	d946      	bls.n	80141f4 <mbedtls_camellia_setkey_enc+0x2b4>
        SHIFT_AND_PLACE( idx, 1 );
 8014166:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014168:	9202      	str	r2, [sp, #8]
 801416a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801416c:	9203      	str	r2, [sp, #12]
 801416e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014170:	9204      	str	r2, [sp, #16]
 8014172:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014174:	9205      	str	r2, [sp, #20]
 8014176:	4a2a      	ldr	r2, [pc, #168]	; (8014220 <mbedtls_camellia_setkey_enc+0x2e0>)
 8014178:	eb0b 0e02 	add.w	lr, fp, r2
 801417c:	4662      	mov	r2, ip
 801417e:	210f      	movs	r1, #15
 8014180:	4627      	mov	r7, r4
 8014182:	461e      	mov	r6, r3
 8014184:	e003      	b.n	801418e <mbedtls_camellia_setkey_enc+0x24e>
 8014186:	310f      	adds	r1, #15
 8014188:	3210      	adds	r2, #16
 801418a:	294b      	cmp	r1, #75	; 0x4b
 801418c:	d021      	beq.n	80141d2 <mbedtls_camellia_setkey_enc+0x292>
 801418e:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8014192:	2b00      	cmp	r3, #0
 8014194:	d0f7      	beq.n	8014186 <mbedtls_camellia_setkey_enc+0x246>
 8014196:	f001 001f 	and.w	r0, r1, #31
 801419a:	f1c0 0420 	rsb	r4, r0, #32
 801419e:	9b02      	ldr	r3, [sp, #8]
 80141a0:	4083      	lsls	r3, r0
 80141a2:	9d03      	ldr	r5, [sp, #12]
 80141a4:	40e5      	lsrs	r5, r4
 80141a6:	406b      	eors	r3, r5
 80141a8:	6113      	str	r3, [r2, #16]
 80141aa:	9b03      	ldr	r3, [sp, #12]
 80141ac:	4083      	lsls	r3, r0
 80141ae:	9d04      	ldr	r5, [sp, #16]
 80141b0:	40e5      	lsrs	r5, r4
 80141b2:	406b      	eors	r3, r5
 80141b4:	6153      	str	r3, [r2, #20]
 80141b6:	9b04      	ldr	r3, [sp, #16]
 80141b8:	4083      	lsls	r3, r0
 80141ba:	9d05      	ldr	r5, [sp, #20]
 80141bc:	40e5      	lsrs	r5, r4
 80141be:	406b      	eors	r3, r5
 80141c0:	6193      	str	r3, [r2, #24]
 80141c2:	9b05      	ldr	r3, [sp, #20]
 80141c4:	4083      	lsls	r3, r0
 80141c6:	9d02      	ldr	r5, [sp, #8]
 80141c8:	fa25 f404 	lsr.w	r4, r5, r4
 80141cc:	4063      	eors	r3, r4
 80141ce:	61d3      	str	r3, [r2, #28]
 80141d0:	e7d9      	b.n	8014186 <mbedtls_camellia_setkey_enc+0x246>
 80141d2:	463c      	mov	r4, r7
 80141d4:	4633      	mov	r3, r6
 80141d6:	4d13      	ldr	r5, [pc, #76]	; (8014224 <mbedtls_camellia_setkey_enc+0x2e4>)
 80141d8:	9a01      	ldr	r2, [sp, #4]
 80141da:	4415      	add	r5, r2
 80141dc:	4661      	mov	r1, ip
 80141de:	f915 2f01 	ldrsb.w	r2, [r5, #1]!
 80141e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80141e6:	bf1c      	itt	ne
 80141e8:	6808      	ldrne	r0, [r1, #0]
 80141ea:	f844 0022 	strne.w	r0, [r4, r2, lsl #2]
 80141ee:	3104      	adds	r1, #4
 80141f0:	4299      	cmp	r1, r3
 80141f2:	d1f4      	bne.n	80141de <mbedtls_camellia_setkey_enc+0x29e>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 80141f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141f6:	9202      	str	r2, [sp, #8]
 80141f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80141fa:	9203      	str	r2, [sp, #12]
 80141fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141fe:	9204      	str	r2, [sp, #16]
 8014200:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014202:	9205      	str	r2, [sp, #20]
 8014204:	4a08      	ldr	r2, [pc, #32]	; (8014228 <mbedtls_camellia_setkey_enc+0x2e8>)
 8014206:	eb0b 0e02 	add.w	lr, fp, r2
 801420a:	4662      	mov	r2, ip
 801420c:	210f      	movs	r1, #15
 801420e:	4627      	mov	r7, r4
 8014210:	461e      	mov	r6, r3
 8014212:	e00f      	b.n	8014234 <mbedtls_camellia_setkey_enc+0x2f4>
 8014214:	08031524 	.word	0x08031524
 8014218:	080315f4 	.word	0x080315f4
 801421c:	08031553 	.word	0x08031553
 8014220:	080315f8 	.word	0x080315f8
 8014224:	08031567 	.word	0x08031567
 8014228:	080315fc 	.word	0x080315fc
 801422c:	310f      	adds	r1, #15
 801422e:	3210      	adds	r2, #16
 8014230:	294b      	cmp	r1, #75	; 0x4b
 8014232:	d021      	beq.n	8014278 <mbedtls_camellia_setkey_enc+0x338>
 8014234:	f81e 3b01 	ldrb.w	r3, [lr], #1
 8014238:	2b00      	cmp	r3, #0
 801423a:	d0f7      	beq.n	801422c <mbedtls_camellia_setkey_enc+0x2ec>
 801423c:	f001 001f 	and.w	r0, r1, #31
 8014240:	f1c0 0420 	rsb	r4, r0, #32
 8014244:	9b02      	ldr	r3, [sp, #8]
 8014246:	4083      	lsls	r3, r0
 8014248:	9d03      	ldr	r5, [sp, #12]
 801424a:	40e5      	lsrs	r5, r4
 801424c:	406b      	eors	r3, r5
 801424e:	6113      	str	r3, [r2, #16]
 8014250:	9b03      	ldr	r3, [sp, #12]
 8014252:	4083      	lsls	r3, r0
 8014254:	9d04      	ldr	r5, [sp, #16]
 8014256:	40e5      	lsrs	r5, r4
 8014258:	406b      	eors	r3, r5
 801425a:	6153      	str	r3, [r2, #20]
 801425c:	9b04      	ldr	r3, [sp, #16]
 801425e:	4083      	lsls	r3, r0
 8014260:	9d05      	ldr	r5, [sp, #20]
 8014262:	40e5      	lsrs	r5, r4
 8014264:	406b      	eors	r3, r5
 8014266:	6193      	str	r3, [r2, #24]
 8014268:	9b05      	ldr	r3, [sp, #20]
 801426a:	4083      	lsls	r3, r0
 801426c:	9d02      	ldr	r5, [sp, #8]
 801426e:	fa25 f404 	lsr.w	r4, r5, r4
 8014272:	4063      	eors	r3, r4
 8014274:	61d3      	str	r3, [r2, #28]
 8014276:	e7d9      	b.n	801422c <mbedtls_camellia_setkey_enc+0x2ec>
 8014278:	463c      	mov	r4, r7
 801427a:	4633      	mov	r3, r6
 801427c:	4d41      	ldr	r5, [pc, #260]	; (8014384 <mbedtls_camellia_setkey_enc+0x444>)
 801427e:	9a01      	ldr	r2, [sp, #4]
 8014280:	4415      	add	r5, r2
 8014282:	4661      	mov	r1, ip
 8014284:	f915 2f01 	ldrsb.w	r2, [r5, #1]!
 8014288:	f1b2 3fff 	cmp.w	r2, #4294967295
 801428c:	bf1c      	itt	ne
 801428e:	6808      	ldrne	r0, [r1, #0]
 8014290:	f844 0022 	strne.w	r0, [r4, r2, lsl #2]
 8014294:	3104      	adds	r1, #4
 8014296:	4299      	cmp	r1, r3
 8014298:	d1f4      	bne.n	8014284 <mbedtls_camellia_setkey_enc+0x344>

    /* Manipulating KB */
    if( keybits > 128 ) {
 801429a:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 801429e:	d947      	bls.n	8014330 <mbedtls_camellia_setkey_enc+0x3f0>
        SHIFT_AND_PLACE( idx, 3 );
 80142a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80142a2:	9202      	str	r2, [sp, #8]
 80142a4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80142a6:	9203      	str	r2, [sp, #12]
 80142a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80142aa:	9204      	str	r2, [sp, #16]
 80142ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80142ae:	9205      	str	r2, [sp, #20]
 80142b0:	4e35      	ldr	r6, [pc, #212]	; (8014388 <mbedtls_camellia_setkey_enc+0x448>)
 80142b2:	445e      	add	r6, fp
 80142b4:	4662      	mov	r2, ip
 80142b6:	210f      	movs	r1, #15
 80142b8:	46a6      	mov	lr, r4
 80142ba:	461f      	mov	r7, r3
 80142bc:	e003      	b.n	80142c6 <mbedtls_camellia_setkey_enc+0x386>
 80142be:	310f      	adds	r1, #15
 80142c0:	3210      	adds	r2, #16
 80142c2:	294b      	cmp	r1, #75	; 0x4b
 80142c4:	d021      	beq.n	801430a <mbedtls_camellia_setkey_enc+0x3ca>
 80142c6:	f816 3b01 	ldrb.w	r3, [r6], #1
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d0f7      	beq.n	80142be <mbedtls_camellia_setkey_enc+0x37e>
 80142ce:	f001 001f 	and.w	r0, r1, #31
 80142d2:	f1c0 0420 	rsb	r4, r0, #32
 80142d6:	9b02      	ldr	r3, [sp, #8]
 80142d8:	4083      	lsls	r3, r0
 80142da:	9d03      	ldr	r5, [sp, #12]
 80142dc:	40e5      	lsrs	r5, r4
 80142de:	406b      	eors	r3, r5
 80142e0:	6113      	str	r3, [r2, #16]
 80142e2:	9b03      	ldr	r3, [sp, #12]
 80142e4:	4083      	lsls	r3, r0
 80142e6:	9d04      	ldr	r5, [sp, #16]
 80142e8:	40e5      	lsrs	r5, r4
 80142ea:	406b      	eors	r3, r5
 80142ec:	6153      	str	r3, [r2, #20]
 80142ee:	9b04      	ldr	r3, [sp, #16]
 80142f0:	4083      	lsls	r3, r0
 80142f2:	9d05      	ldr	r5, [sp, #20]
 80142f4:	40e5      	lsrs	r5, r4
 80142f6:	406b      	eors	r3, r5
 80142f8:	6193      	str	r3, [r2, #24]
 80142fa:	9b05      	ldr	r3, [sp, #20]
 80142fc:	4083      	lsls	r3, r0
 80142fe:	9d02      	ldr	r5, [sp, #8]
 8014300:	fa25 f404 	lsr.w	r4, r5, r4
 8014304:	4063      	eors	r3, r4
 8014306:	61d3      	str	r3, [r2, #28]
 8014308:	e7d9      	b.n	80142be <mbedtls_camellia_setkey_enc+0x37e>
 801430a:	4674      	mov	r4, lr
 801430c:	463b      	mov	r3, r7
 801430e:	491f      	ldr	r1, [pc, #124]	; (801438c <mbedtls_camellia_setkey_enc+0x44c>)
 8014310:	9a01      	ldr	r2, [sp, #4]
 8014312:	440a      	add	r2, r1
 8014314:	4611      	mov	r1, r2
 8014316:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 801431a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801431e:	bf1c      	itt	ne
 8014320:	f8dc 0000 	ldrne.w	r0, [ip]
 8014324:	f844 0022 	strne.w	r0, [r4, r2, lsl #2]
 8014328:	f10c 0c04 	add.w	ip, ip, #4
 801432c:	459c      	cmp	ip, r3
 801432e:	d1f2      	bne.n	8014316 <mbedtls_camellia_setkey_enc+0x3d6>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8014330:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8014334:	eb01 0309 	add.w	r3, r1, r9
 8014338:	4915      	ldr	r1, [pc, #84]	; (8014390 <mbedtls_camellia_setkey_enc+0x450>)
 801433a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801433e:	3901      	subs	r1, #1
        if( transposes[idx][i] != -1 ) {
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 8014340:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8014344:	eb02 0309 	add.w	r3, r2, r9
 8014348:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
 801434c:	3384      	adds	r3, #132	; 0x84
 801434e:	4491      	add	r9, r2
 8014350:	f10a 0ad4 	add.w	sl, sl, #212	; 0xd4
 8014354:	eb0a 1909 	add.w	r9, sl, r9, lsl #4
        if( transposes[idx][i] != -1 ) {
 8014358:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 801435c:	f1b2 3fff 	cmp.w	r2, #4294967295
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 8014360:	bf1c      	itt	ne
 8014362:	f854 2022 	ldrne.w	r2, [r4, r2, lsl #2]
 8014366:	601a      	strne	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 8014368:	3304      	adds	r3, #4
 801436a:	4599      	cmp	r9, r3
 801436c:	d1f4      	bne.n	8014358 <mbedtls_camellia_setkey_enc+0x418>
        }
    }

    return( 0 );
 801436e:	2000      	movs	r0, #0
}
 8014370:	b043      	add	sp, #268	; 0x10c
 8014372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case 256: ctx->nr = 4; idx = 1; break;
 8014376:	2304      	movs	r3, #4
 8014378:	f8ca 3000 	str.w	r3, [sl]
    for( i = 0; i < keybits / 8; ++i )
 801437c:	ea4f 07d8 	mov.w	r7, r8, lsr #3
        case 256: ctx->nr = 4; idx = 1; break;
 8014380:	2501      	movs	r5, #1
 8014382:	e602      	b.n	8013f8a <mbedtls_camellia_setkey_enc+0x4a>
 8014384:	0803157b 	.word	0x0803157b
 8014388:	08031600 	.word	0x08031600
 801438c:	0803158f 	.word	0x0803158f
 8014390:	08031614 	.word	0x08031614

08014394 <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8014394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014396:	b0c7      	sub	sp, #284	; 0x11c
 8014398:	4604      	mov	r4, r0
 801439a:	460d      	mov	r5, r1
 801439c:	4616      	mov	r6, r2
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 801439e:	a801      	add	r0, sp, #4
 80143a0:	f7ff fdbe 	bl	8013f20 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 80143a4:	4632      	mov	r2, r6
 80143a6:	4629      	mov	r1, r5
 80143a8:	a801      	add	r0, sp, #4
 80143aa:	f7ff fdc9 	bl	8013f40 <mbedtls_camellia_setkey_enc>
 80143ae:	4605      	mov	r5, r0
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d13b      	bne.n	801442c <mbedtls_camellia_setkey_dec+0x98>
        goto exit;

    ctx->nr = cty.nr;
 80143b4:	9e01      	ldr	r6, [sp, #4]
 80143b6:	6026      	str	r6, [r4, #0]
    idx = ( ctx->nr == 4 );
 80143b8:	2e04      	cmp	r6, #4
 80143ba:	bf14      	ite	ne
 80143bc:	2600      	movne	r6, #0
 80143be:	2601      	moveq	r6, #1

    RK = ctx->rk;
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 80143c0:	00f6      	lsls	r6, r6, #3
 80143c2:	aa02      	add	r2, sp, #8
 80143c4:	f106 0118 	add.w	r1, r6, #24
 80143c8:	eb02 03c1 	add.w	r3, r2, r1, lsl #3

    *RK++ = *SK++;
 80143cc:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 80143d0:	6062      	str	r2, [r4, #4]
    *RK++ = *SK++;
 80143d2:	685a      	ldr	r2, [r3, #4]
 80143d4:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 80143d6:	689a      	ldr	r2, [r3, #8]
 80143d8:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 80143da:	f104 0c14 	add.w	ip, r4, #20
 80143de:	68da      	ldr	r2, [r3, #12]
 80143e0:	6122      	str	r2, [r4, #16]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 80143e2:	f106 0216 	add.w	r2, r6, #22
 80143e6:	f1a3 0708 	sub.w	r7, r3, #8
 80143ea:	f104 001c 	add.w	r0, r4, #28
 80143ee:	3b10      	subs	r3, #16
    {
        *RK++ = *SK++;
 80143f0:	6899      	ldr	r1, [r3, #8]
 80143f2:	f840 1c08 	str.w	r1, [r0, #-8]
        *RK++ = *SK++;
 80143f6:	68d9      	ldr	r1, [r3, #12]
 80143f8:	f840 1c04 	str.w	r1, [r0, #-4]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 80143fc:	3008      	adds	r0, #8
 80143fe:	3b08      	subs	r3, #8
 8014400:	3a01      	subs	r2, #1
 8014402:	d1f5      	bne.n	80143f0 <mbedtls_camellia_setkey_dec+0x5c>
 8014404:	f106 0315 	add.w	r3, r6, #21
 8014408:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801440c:	0772      	lsls	r2, r6, #29
 801440e:	1b96      	subs	r6, r2, r6
 8014410:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
    }

    SK -= 2;

    *RK++ = *SK++;
 8014414:	f856 2cb8 	ldr.w	r2, [r6, #-184]
 8014418:	609a      	str	r2, [r3, #8]
    *RK++ = *SK++;
 801441a:	f856 2cb4 	ldr.w	r2, [r6, #-180]
 801441e:	60da      	str	r2, [r3, #12]
    *RK++ = *SK++;
 8014420:	f856 2cb0 	ldr.w	r2, [r6, #-176]
 8014424:	611a      	str	r2, [r3, #16]
    *RK++ = *SK++;
 8014426:	f856 2cac 	ldr.w	r2, [r6, #-172]
 801442a:	615a      	str	r2, [r3, #20]

exit:
    mbedtls_camellia_free( &cty );
 801442c:	a801      	add	r0, sp, #4
 801442e:	f7ff fd7e 	bl	8013f2e <mbedtls_camellia_free>

    return( ret );
}
 8014432:	4628      	mov	r0, r5
 8014434:	b047      	add	sp, #284	; 0x11c
 8014436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014438 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 8014438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801443c:	b084      	sub	sp, #16
 801443e:	461e      	mov	r6, r3
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 8014440:	f8d0 8000 	ldr.w	r8, [r0]
    RK = ctx->rk;

    GET_UINT32_BE( X[0], input,  0 );
    GET_UINT32_BE( X[1], input,  4 );
 8014444:	7913      	ldrb	r3, [r2, #4]
 8014446:	7955      	ldrb	r5, [r2, #5]
 8014448:	042d      	lsls	r5, r5, #16
 801444a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 801444e:	79d3      	ldrb	r3, [r2, #7]
 8014450:	431d      	orrs	r5, r3
 8014452:	7993      	ldrb	r3, [r2, #6]
 8014454:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    GET_UINT32_BE( X[2], input,  8 );
 8014458:	7a13      	ldrb	r3, [r2, #8]
 801445a:	7a54      	ldrb	r4, [r2, #9]
 801445c:	0424      	lsls	r4, r4, #16
 801445e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8014462:	7ad3      	ldrb	r3, [r2, #11]
 8014464:	431c      	orrs	r4, r3
 8014466:	7a93      	ldrb	r3, [r2, #10]
 8014468:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    GET_UINT32_BE( X[3], input, 12 );
 801446c:	7b13      	ldrb	r3, [r2, #12]
 801446e:	7b51      	ldrb	r1, [r2, #13]
 8014470:	0409      	lsls	r1, r1, #16
 8014472:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8014476:	7bd3      	ldrb	r3, [r2, #15]
 8014478:	4319      	orrs	r1, r3
 801447a:	7b93      	ldrb	r3, [r2, #14]
 801447c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    GET_UINT32_BE( X[0], input,  0 );
 8014480:	7817      	ldrb	r7, [r2, #0]
 8014482:	7853      	ldrb	r3, [r2, #1]
 8014484:	041b      	lsls	r3, r3, #16
 8014486:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 801448a:	78d7      	ldrb	r7, [r2, #3]
 801448c:	433b      	orrs	r3, r7
 801448e:	7892      	ldrb	r2, [r2, #2]
 8014490:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

    X[0] ^= *RK++;
 8014494:	6842      	ldr	r2, [r0, #4]
 8014496:	4053      	eors	r3, r2
 8014498:	9300      	str	r3, [sp, #0]
    X[1] ^= *RK++;
 801449a:	6883      	ldr	r3, [r0, #8]
 801449c:	405d      	eors	r5, r3
 801449e:	9501      	str	r5, [sp, #4]
    X[2] ^= *RK++;
 80144a0:	68c3      	ldr	r3, [r0, #12]
 80144a2:	405c      	eors	r4, r3
 80144a4:	9402      	str	r4, [sp, #8]
    X[3] ^= *RK++;
 80144a6:	f100 0714 	add.w	r7, r0, #20
 80144aa:	6903      	ldr	r3, [r0, #16]
 80144ac:	4059      	eors	r1, r3
 80144ae:	9103      	str	r1, [sp, #12]

    while( NR ) {
 80144b0:	f1b8 0f00 	cmp.w	r8, #0
 80144b4:	d041      	beq.n	801453a <mbedtls_camellia_crypt_ecb+0x102>
    X[3] ^= *RK++;
 80144b6:	463c      	mov	r4, r7
    NR = ctx->nr;
 80144b8:	4645      	mov	r5, r8
        --NR;
 80144ba:	3d01      	subs	r5, #1
        camellia_feistel( X, RK, X + 2 );
 80144bc:	aa02      	add	r2, sp, #8
 80144be:	4621      	mov	r1, r4
 80144c0:	4668      	mov	r0, sp
 80144c2:	f7ff fce9 	bl	8013e98 <camellia_feistel>
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 80144c6:	466a      	mov	r2, sp
 80144c8:	f104 0108 	add.w	r1, r4, #8
 80144cc:	a802      	add	r0, sp, #8
 80144ce:	f7ff fce3 	bl	8013e98 <camellia_feistel>
        RK += 2;
        camellia_feistel( X, RK, X + 2 );
 80144d2:	aa02      	add	r2, sp, #8
 80144d4:	f104 0110 	add.w	r1, r4, #16
 80144d8:	4668      	mov	r0, sp
 80144da:	f7ff fcdd 	bl	8013e98 <camellia_feistel>
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 80144de:	466a      	mov	r2, sp
 80144e0:	f104 0118 	add.w	r1, r4, #24
 80144e4:	a802      	add	r0, sp, #8
 80144e6:	f7ff fcd7 	bl	8013e98 <camellia_feistel>
        RK += 2;
        camellia_feistel( X, RK, X + 2 );
 80144ea:	aa02      	add	r2, sp, #8
 80144ec:	f104 0120 	add.w	r1, r4, #32
 80144f0:	4668      	mov	r0, sp
 80144f2:	f7ff fcd1 	bl	8013e98 <camellia_feistel>
        RK += 2;
        camellia_feistel( X + 2, RK, X );
 80144f6:	466a      	mov	r2, sp
 80144f8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80144fc:	a802      	add	r0, sp, #8
 80144fe:	f7ff fccb 	bl	8013e98 <camellia_feistel>
        RK += 2;

        if( NR ) {
 8014502:	b1bd      	cbz	r5, 8014534 <mbedtls_camellia_crypt_ecb+0xfc>
            FL(X[0], X[1], RK[0], RK[1]);
 8014504:	9900      	ldr	r1, [sp, #0]
 8014506:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014508:	400a      	ands	r2, r1
 801450a:	9b01      	ldr	r3, [sp, #4]
 801450c:	ea83 73f2 	eor.w	r3, r3, r2, ror #31
 8014510:	9301      	str	r3, [sp, #4]
 8014512:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014514:	4313      	orrs	r3, r2
 8014516:	404b      	eors	r3, r1
 8014518:	9300      	str	r3, [sp, #0]
            RK += 2;
            FLInv(X[2], X[3], RK[0], RK[1]);
 801451a:	9b03      	ldr	r3, [sp, #12]
 801451c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801451e:	431a      	orrs	r2, r3
 8014520:	9902      	ldr	r1, [sp, #8]
 8014522:	404a      	eors	r2, r1
 8014524:	9202      	str	r2, [sp, #8]
 8014526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014528:	400a      	ands	r2, r1
 801452a:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 801452e:	9203      	str	r2, [sp, #12]
            RK += 2;
 8014530:	3440      	adds	r4, #64	; 0x40
    while( NR ) {
 8014532:	e7c2      	b.n	80144ba <mbedtls_camellia_crypt_ecb+0x82>
 8014534:	eb07 1788 	add.w	r7, r7, r8, lsl #6
        RK += 2;
 8014538:	3f10      	subs	r7, #16
        }
    }

    X[2] ^= *RK++;
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	9802      	ldr	r0, [sp, #8]
 801453e:	4058      	eors	r0, r3
    X[3] ^= *RK++;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	9903      	ldr	r1, [sp, #12]
 8014544:	4059      	eors	r1, r3
    X[0] ^= *RK++;
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	9a00      	ldr	r2, [sp, #0]
 801454a:	405a      	eors	r2, r3
    X[1] ^= *RK++;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	9c01      	ldr	r4, [sp, #4]
 8014550:	4063      	eors	r3, r4

    PUT_UINT32_BE( X[2], output,  0 );
 8014552:	0e04      	lsrs	r4, r0, #24
 8014554:	7034      	strb	r4, [r6, #0]
 8014556:	0c04      	lsrs	r4, r0, #16
 8014558:	7074      	strb	r4, [r6, #1]
 801455a:	0a04      	lsrs	r4, r0, #8
 801455c:	70b4      	strb	r4, [r6, #2]
 801455e:	70f0      	strb	r0, [r6, #3]
    PUT_UINT32_BE( X[3], output,  4 );
 8014560:	0e08      	lsrs	r0, r1, #24
 8014562:	7130      	strb	r0, [r6, #4]
 8014564:	0c08      	lsrs	r0, r1, #16
 8014566:	7170      	strb	r0, [r6, #5]
 8014568:	0a08      	lsrs	r0, r1, #8
 801456a:	71b0      	strb	r0, [r6, #6]
 801456c:	71f1      	strb	r1, [r6, #7]
    PUT_UINT32_BE( X[0], output,  8 );
 801456e:	0e11      	lsrs	r1, r2, #24
 8014570:	7231      	strb	r1, [r6, #8]
 8014572:	0c11      	lsrs	r1, r2, #16
 8014574:	7271      	strb	r1, [r6, #9]
 8014576:	0a11      	lsrs	r1, r2, #8
 8014578:	72b1      	strb	r1, [r6, #10]
 801457a:	72f2      	strb	r2, [r6, #11]
    PUT_UINT32_BE( X[1], output, 12 );
 801457c:	0e1a      	lsrs	r2, r3, #24
 801457e:	7332      	strb	r2, [r6, #12]
 8014580:	0c1a      	lsrs	r2, r3, #16
 8014582:	7372      	strb	r2, [r6, #13]
 8014584:	0a1a      	lsrs	r2, r3, #8
 8014586:	73b2      	strb	r2, [r6, #14]
 8014588:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
 801458a:	2000      	movs	r0, #0
 801458c:	b004      	add	sp, #16
 801458e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014592 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 8014592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014596:	b09b      	sub	sp, #108	; 0x6c
 8014598:	9008      	str	r0, [sp, #32]
 801459a:	9109      	str	r1, [sp, #36]	; 0x24
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 801459c:	4604      	mov	r4, r0
 801459e:	ae0a      	add	r6, sp, #40	; 0x28
 80145a0:	f100 0740 	add.w	r7, r0, #64	; 0x40
 80145a4:	4635      	mov	r5, r6
 80145a6:	6820      	ldr	r0, [r4, #0]
 80145a8:	6861      	ldr	r1, [r4, #4]
 80145aa:	68a2      	ldr	r2, [r4, #8]
 80145ac:	68e3      	ldr	r3, [r4, #12]
 80145ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145b0:	3410      	adds	r4, #16
 80145b2:	462e      	mov	r6, r5
 80145b4:	42bc      	cmp	r4, r7
 80145b6:	d1f5      	bne.n	80145a4 <chacha20_block+0x12>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 80145b8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80145bc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80145c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80145c2:	9302      	str	r3, [sp, #8]
 80145c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80145c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80145c8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80145cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80145ce:	9201      	str	r2, [sp, #4]
 80145d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80145d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145d4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80145d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145da:	9200      	str	r2, [sp, #0]
 80145dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80145de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145e0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 80145e4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80145e6:	9503      	str	r5, [sp, #12]
 80145e8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    memcpy( working_state,
 80145ec:	250a      	movs	r5, #10
 80145ee:	9504      	str	r5, [sp, #16]
 80145f0:	463d      	mov	r5, r7
 80145f2:	464f      	mov	r7, r9
 80145f4:	46a9      	mov	r9, r5
    state[a] += state[b];
 80145f6:	eb0b 0608 	add.w	r6, fp, r8
    state[d] ^= state[a];
 80145fa:	9d02      	ldr	r5, [sp, #8]
 80145fc:	4075      	eors	r5, r6
    state[c] += state[d];
 80145fe:	eb03 4335 	add.w	r3, r3, r5, ror #16
    state[b] ^= state[c];
 8014602:	ea83 0808 	eor.w	r8, r3, r8
    state[a] += state[b];
 8014606:	eb06 5638 	add.w	r6, r6, r8, ror #20
    state[d] ^= state[a];
 801460a:	ea86 4535 	eor.w	r5, r6, r5, ror #16
    state[c] += state[d];
 801460e:	eb03 6335 	add.w	r3, r3, r5, ror #24
    state[b] ^= state[c];
 8014612:	9306      	str	r3, [sp, #24]
 8014614:	ea83 5838 	eor.w	r8, r3, r8, ror #20
 8014618:	f8cd 801c 	str.w	r8, [sp, #28]
    state[a] += state[b];
 801461c:	4450      	add	r0, sl
    state[d] ^= state[a];
 801461e:	9b01      	ldr	r3, [sp, #4]
 8014620:	4043      	eors	r3, r0
    state[c] += state[d];
 8014622:	eb04 4433 	add.w	r4, r4, r3, ror #16
    state[b] ^= state[c];
 8014626:	ea84 0a0a 	eor.w	sl, r4, sl
    state[a] += state[b];
 801462a:	eb00 503a 	add.w	r0, r0, sl, ror #20
    state[d] ^= state[a];
 801462e:	ea80 4333 	eor.w	r3, r0, r3, ror #16
    state[c] += state[d];
 8014632:	eb04 6433 	add.w	r4, r4, r3, ror #24
    state[b] ^= state[c];
 8014636:	9405      	str	r4, [sp, #20]
 8014638:	ea84 5a3a 	eor.w	sl, r4, sl, ror #20
    state[a] += state[b];
 801463c:	4471      	add	r1, lr
    state[d] ^= state[a];
 801463e:	9c00      	ldr	r4, [sp, #0]
 8014640:	404c      	eors	r4, r1
    state[c] += state[d];
 8014642:	eb09 4834 	add.w	r8, r9, r4, ror #16
    state[b] ^= state[c];
 8014646:	ea88 0e0e 	eor.w	lr, r8, lr
    state[a] += state[b];
 801464a:	eb01 513e 	add.w	r1, r1, lr, ror #20
    state[d] ^= state[a];
 801464e:	ea81 4434 	eor.w	r4, r1, r4, ror #16
    state[c] += state[d];
 8014652:	eb08 6834 	add.w	r8, r8, r4, ror #24
    state[b] ^= state[c];
 8014656:	ea88 5e3e 	eor.w	lr, r8, lr, ror #20
    state[a] += state[b];
 801465a:	eb02 0b0c 	add.w	fp, r2, ip
    state[d] ^= state[a];
 801465e:	9a03      	ldr	r2, [sp, #12]
 8014660:	ea8b 0902 	eor.w	r9, fp, r2
    state[c] += state[d];
 8014664:	eb07 4739 	add.w	r7, r7, r9, ror #16
    state[b] ^= state[c];
 8014668:	ea87 0c0c 	eor.w	ip, r7, ip
    state[a] += state[b];
 801466c:	eb0b 523c 	add.w	r2, fp, ip, ror #20
    state[d] ^= state[a];
 8014670:	ea82 4939 	eor.w	r9, r2, r9, ror #16
    state[c] += state[d];
 8014674:	eb07 6739 	add.w	r7, r7, r9, ror #24
    state[b] ^= state[c];
 8014678:	ea87 5c3c 	eor.w	ip, r7, ip, ror #20
    state[a] += state[b];
 801467c:	eb06 667a 	add.w	r6, r6, sl, ror #25
    state[d] ^= state[a];
 8014680:	ea86 6939 	eor.w	r9, r6, r9, ror #24
    state[c] += state[d];
 8014684:	eb08 4839 	add.w	r8, r8, r9, ror #16
    state[b] ^= state[c];
 8014688:	ea88 6a7a 	eor.w	sl, r8, sl, ror #25
    state[a] += state[b];
 801468c:	eb06 5b3a 	add.w	fp, r6, sl, ror #20
    state[d] ^= state[a];
 8014690:	ea8b 4939 	eor.w	r9, fp, r9, ror #16
    state[d] = ROTL32( state[d], 8 );
 8014694:	ea4f 6639 	mov.w	r6, r9, ror #24
 8014698:	9603      	str	r6, [sp, #12]
    state[c] += state[d];
 801469a:	eb08 6939 	add.w	r9, r8, r9, ror #24
    state[b] ^= state[c];
 801469e:	ea89 5a3a 	eor.w	sl, r9, sl, ror #20
    state[b] = ROTL32( state[b], 7 );
 80146a2:	ea4f 6a7a 	mov.w	sl, sl, ror #25
    state[a] += state[b];
 80146a6:	eb00 607e 	add.w	r0, r0, lr, ror #25
    state[d] ^= state[a];
 80146aa:	ea80 6535 	eor.w	r5, r0, r5, ror #24
    state[c] += state[d];
 80146ae:	eb07 4735 	add.w	r7, r7, r5, ror #16
    state[b] ^= state[c];
 80146b2:	ea87 6e7e 	eor.w	lr, r7, lr, ror #25
    state[a] += state[b];
 80146b6:	eb00 503e 	add.w	r0, r0, lr, ror #20
    state[d] ^= state[a];
 80146ba:	ea80 4535 	eor.w	r5, r0, r5, ror #16
    state[d] = ROTL32( state[d], 8 );
 80146be:	ea4f 6635 	mov.w	r6, r5, ror #24
 80146c2:	9602      	str	r6, [sp, #8]
    state[c] += state[d];
 80146c4:	eb07 6735 	add.w	r7, r7, r5, ror #24
    state[b] ^= state[c];
 80146c8:	ea87 5e3e 	eor.w	lr, r7, lr, ror #20
    state[b] = ROTL32( state[b], 7 );
 80146cc:	ea4f 6e7e 	mov.w	lr, lr, ror #25
    state[a] += state[b];
 80146d0:	eb01 617c 	add.w	r1, r1, ip, ror #25
    state[d] ^= state[a];
 80146d4:	ea81 6333 	eor.w	r3, r1, r3, ror #24
    state[c] += state[d];
 80146d8:	9d06      	ldr	r5, [sp, #24]
 80146da:	eb05 4533 	add.w	r5, r5, r3, ror #16
    state[b] ^= state[c];
 80146de:	ea85 6c7c 	eor.w	ip, r5, ip, ror #25
    state[a] += state[b];
 80146e2:	eb01 513c 	add.w	r1, r1, ip, ror #20
    state[d] ^= state[a];
 80146e6:	ea81 4333 	eor.w	r3, r1, r3, ror #16
    state[d] = ROTL32( state[d], 8 );
 80146ea:	ea4f 6633 	mov.w	r6, r3, ror #24
 80146ee:	9601      	str	r6, [sp, #4]
    state[c] += state[d];
 80146f0:	eb05 6333 	add.w	r3, r5, r3, ror #24
    state[b] ^= state[c];
 80146f4:	ea83 5c3c 	eor.w	ip, r3, ip, ror #20
    state[b] = ROTL32( state[b], 7 );
 80146f8:	ea4f 6c7c 	mov.w	ip, ip, ror #25
    state[a] += state[b];
 80146fc:	9e07      	ldr	r6, [sp, #28]
 80146fe:	eb02 6276 	add.w	r2, r2, r6, ror #25
    state[d] ^= state[a];
 8014702:	ea82 6434 	eor.w	r4, r2, r4, ror #24
    state[c] += state[d];
 8014706:	9d05      	ldr	r5, [sp, #20]
 8014708:	eb05 4534 	add.w	r5, r5, r4, ror #16
    state[b] ^= state[c];
 801470c:	ea85 6876 	eor.w	r8, r5, r6, ror #25
    state[a] += state[b];
 8014710:	eb02 5238 	add.w	r2, r2, r8, ror #20
    state[d] ^= state[a];
 8014714:	ea82 4434 	eor.w	r4, r2, r4, ror #16
    state[d] = ROTL32( state[d], 8 );
 8014718:	ea4f 6634 	mov.w	r6, r4, ror #24
 801471c:	9600      	str	r6, [sp, #0]
    state[c] += state[d];
 801471e:	eb05 6434 	add.w	r4, r5, r4, ror #24
    state[b] ^= state[c];
 8014722:	ea84 5838 	eor.w	r8, r4, r8, ror #20
    state[b] = ROTL32( state[b], 7 );
 8014726:	ea4f 6878 	mov.w	r8, r8, ror #25
    for( i = 0U; i < 10U; i++ )
 801472a:	9d04      	ldr	r5, [sp, #16]
 801472c:	3d01      	subs	r5, #1
 801472e:	9504      	str	r5, [sp, #16]
 8014730:	f47f af61 	bne.w	80145f6 <chacha20_block+0x64>
 8014734:	464d      	mov	r5, r9
 8014736:	46b9      	mov	r9, r7
 8014738:	462f      	mov	r7, r5
        chacha20_inner_block( working_state );

    working_state[ 0] += initial_state[ 0];
 801473a:	9d08      	ldr	r5, [sp, #32]
 801473c:	682e      	ldr	r6, [r5, #0]
 801473e:	445e      	add	r6, fp
 8014740:	960a      	str	r6, [sp, #40]	; 0x28
    working_state[ 1] += initial_state[ 1];
 8014742:	462e      	mov	r6, r5
 8014744:	686d      	ldr	r5, [r5, #4]
 8014746:	4428      	add	r0, r5
 8014748:	900b      	str	r0, [sp, #44]	; 0x2c
    working_state[ 2] += initial_state[ 2];
 801474a:	68b0      	ldr	r0, [r6, #8]
 801474c:	4401      	add	r1, r0
 801474e:	910c      	str	r1, [sp, #48]	; 0x30
    working_state[ 3] += initial_state[ 3];
 8014750:	4635      	mov	r5, r6
 8014752:	68f1      	ldr	r1, [r6, #12]
 8014754:	440a      	add	r2, r1
 8014756:	920d      	str	r2, [sp, #52]	; 0x34
    working_state[ 4] += initial_state[ 4];
 8014758:	4630      	mov	r0, r6
 801475a:	6932      	ldr	r2, [r6, #16]
 801475c:	4442      	add	r2, r8
 801475e:	920e      	str	r2, [sp, #56]	; 0x38
    working_state[ 5] += initial_state[ 5];
 8014760:	6972      	ldr	r2, [r6, #20]
 8014762:	4452      	add	r2, sl
 8014764:	920f      	str	r2, [sp, #60]	; 0x3c
    working_state[ 6] += initial_state[ 6];
 8014766:	69b2      	ldr	r2, [r6, #24]
 8014768:	4472      	add	r2, lr
 801476a:	9210      	str	r2, [sp, #64]	; 0x40
    working_state[ 7] += initial_state[ 7];
 801476c:	69f2      	ldr	r2, [r6, #28]
 801476e:	4462      	add	r2, ip
 8014770:	9211      	str	r2, [sp, #68]	; 0x44
    working_state[ 8] += initial_state[ 8];
 8014772:	6a32      	ldr	r2, [r6, #32]
 8014774:	4413      	add	r3, r2
 8014776:	9312      	str	r3, [sp, #72]	; 0x48
    working_state[ 9] += initial_state[ 9];
 8014778:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801477a:	441c      	add	r4, r3
 801477c:	9413      	str	r4, [sp, #76]	; 0x4c
    working_state[10] += initial_state[10];
 801477e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8014780:	443b      	add	r3, r7
 8014782:	9314      	str	r3, [sp, #80]	; 0x50
    working_state[11] += initial_state[11];
 8014784:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 8014786:	444e      	add	r6, r9
 8014788:	9615      	str	r6, [sp, #84]	; 0x54
    working_state[12] += initial_state[12];
 801478a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 801478c:	9a02      	ldr	r2, [sp, #8]
 801478e:	4416      	add	r6, r2
 8014790:	9616      	str	r6, [sp, #88]	; 0x58
    working_state[13] += initial_state[13];
 8014792:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8014794:	9a01      	ldr	r2, [sp, #4]
 8014796:	4415      	add	r5, r2
 8014798:	9517      	str	r5, [sp, #92]	; 0x5c
    working_state[14] += initial_state[14];
 801479a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801479c:	9a00      	ldr	r2, [sp, #0]
 801479e:	4414      	add	r4, r2
 80147a0:	9418      	str	r4, [sp, #96]	; 0x60
    working_state[15] += initial_state[15];
 80147a2:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80147a4:	9b03      	ldr	r3, [sp, #12]
 80147a6:	441f      	add	r7, r3
 80147a8:	9719      	str	r7, [sp, #100]	; 0x64

    for( i = 0U; i < 16; i++ )
 80147aa:	aa09      	add	r2, sp, #36	; 0x24
 80147ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80147ae:	ac19      	add	r4, sp, #100	; 0x64
    {
        size_t offset = i * 4U;

        keystream[offset     ] = (unsigned char)( working_state[i]       );
 80147b0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80147b4:	700b      	strb	r3, [r1, #0]
        keystream[offset + 1U] = (unsigned char)( working_state[i] >>  8 );
 80147b6:	0a18      	lsrs	r0, r3, #8
 80147b8:	7048      	strb	r0, [r1, #1]
        keystream[offset + 2U] = (unsigned char)( working_state[i] >> 16 );
 80147ba:	0c18      	lsrs	r0, r3, #16
 80147bc:	7088      	strb	r0, [r1, #2]
        keystream[offset + 3U] = (unsigned char)( working_state[i] >> 24 );
 80147be:	0e1b      	lsrs	r3, r3, #24
 80147c0:	70cb      	strb	r3, [r1, #3]
    for( i = 0U; i < 16; i++ )
 80147c2:	3104      	adds	r1, #4
 80147c4:	4294      	cmp	r4, r2
 80147c6:	d1f3      	bne.n	80147b0 <chacha20_block+0x21e>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 80147c8:	2140      	movs	r1, #64	; 0x40
 80147ca:	a80a      	add	r0, sp, #40	; 0x28
 80147cc:	f006 fbba 	bl	801af44 <mbedtls_platform_zeroize>
}
 80147d0:	b01b      	add	sp, #108	; 0x6c
 80147d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080147d6 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 80147d6:	b510      	push	{r4, lr}
 80147d8:	4604      	mov	r4, r0
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 80147da:	2140      	movs	r1, #64	; 0x40
 80147dc:	f006 fbb2 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 80147e0:	2140      	movs	r1, #64	; 0x40
 80147e2:	1860      	adds	r0, r4, r1
 80147e4:	f006 fbae 	bl	801af44 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 80147e8:	2340      	movs	r3, #64	; 0x40
 80147ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80147ee:	bd10      	pop	{r4, pc}

080147f0 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
    if( ctx != NULL )
 80147f0:	b120      	cbz	r0, 80147fc <mbedtls_chacha20_free+0xc>
{
 80147f2:	b508      	push	{r3, lr}
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 80147f4:	2184      	movs	r1, #132	; 0x84
 80147f6:	f006 fba5 	bl	801af44 <mbedtls_platform_zeroize>
    }
}
 80147fa:	bd08      	pop	{r3, pc}
 80147fc:	4770      	bx	lr
	...

08014800 <mbedtls_chacha20_setkey>:
{
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 8014800:	4b33      	ldr	r3, [pc, #204]	; (80148d0 <mbedtls_chacha20_setkey+0xd0>)
 8014802:	6003      	str	r3, [r0, #0]
    ctx->state[1] = 0x3320646e;
 8014804:	4b33      	ldr	r3, [pc, #204]	; (80148d4 <mbedtls_chacha20_setkey+0xd4>)
 8014806:	6043      	str	r3, [r0, #4]
    ctx->state[2] = 0x79622d32;
 8014808:	4b33      	ldr	r3, [pc, #204]	; (80148d8 <mbedtls_chacha20_setkey+0xd8>)
 801480a:	6083      	str	r3, [r0, #8]
    ctx->state[3] = 0x6b206574;
 801480c:	f1a3 6364 	sub.w	r3, r3, #239075328	; 0xe400000
 8014810:	f5a3 33e3 	sub.w	r3, r3, #116224	; 0x1c600
 8014814:	f5a3 73df 	sub.w	r3, r3, #446	; 0x1be
 8014818:	60c3      	str	r3, [r0, #12]

    /* Set key */
    ctx->state[4]  = BYTES_TO_U32_LE( key, 0 );
 801481a:	784a      	ldrb	r2, [r1, #1]
 801481c:	788b      	ldrb	r3, [r1, #2]
 801481e:	041b      	lsls	r3, r3, #16
 8014820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014824:	780a      	ldrb	r2, [r1, #0]
 8014826:	4313      	orrs	r3, r2
 8014828:	78ca      	ldrb	r2, [r1, #3]
 801482a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801482e:	6103      	str	r3, [r0, #16]
    ctx->state[5]  = BYTES_TO_U32_LE( key, 4 );
 8014830:	794a      	ldrb	r2, [r1, #5]
 8014832:	798b      	ldrb	r3, [r1, #6]
 8014834:	041b      	lsls	r3, r3, #16
 8014836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801483a:	790a      	ldrb	r2, [r1, #4]
 801483c:	4313      	orrs	r3, r2
 801483e:	79ca      	ldrb	r2, [r1, #7]
 8014840:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014844:	6143      	str	r3, [r0, #20]
    ctx->state[6]  = BYTES_TO_U32_LE( key, 8 );
 8014846:	7a4a      	ldrb	r2, [r1, #9]
 8014848:	7a8b      	ldrb	r3, [r1, #10]
 801484a:	041b      	lsls	r3, r3, #16
 801484c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014850:	7a0a      	ldrb	r2, [r1, #8]
 8014852:	4313      	orrs	r3, r2
 8014854:	7aca      	ldrb	r2, [r1, #11]
 8014856:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801485a:	6183      	str	r3, [r0, #24]
    ctx->state[7]  = BYTES_TO_U32_LE( key, 12 );
 801485c:	7b4a      	ldrb	r2, [r1, #13]
 801485e:	7b8b      	ldrb	r3, [r1, #14]
 8014860:	041b      	lsls	r3, r3, #16
 8014862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014866:	7b0a      	ldrb	r2, [r1, #12]
 8014868:	4313      	orrs	r3, r2
 801486a:	7bca      	ldrb	r2, [r1, #15]
 801486c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014870:	61c3      	str	r3, [r0, #28]
    ctx->state[8]  = BYTES_TO_U32_LE( key, 16 );
 8014872:	7c4a      	ldrb	r2, [r1, #17]
 8014874:	7c8b      	ldrb	r3, [r1, #18]
 8014876:	041b      	lsls	r3, r3, #16
 8014878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801487c:	7c0a      	ldrb	r2, [r1, #16]
 801487e:	4313      	orrs	r3, r2
 8014880:	7cca      	ldrb	r2, [r1, #19]
 8014882:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014886:	6203      	str	r3, [r0, #32]
    ctx->state[9]  = BYTES_TO_U32_LE( key, 20 );
 8014888:	7d4a      	ldrb	r2, [r1, #21]
 801488a:	7d8b      	ldrb	r3, [r1, #22]
 801488c:	041b      	lsls	r3, r3, #16
 801488e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014892:	7d0a      	ldrb	r2, [r1, #20]
 8014894:	4313      	orrs	r3, r2
 8014896:	7dca      	ldrb	r2, [r1, #23]
 8014898:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801489c:	6243      	str	r3, [r0, #36]	; 0x24
    ctx->state[10] = BYTES_TO_U32_LE( key, 24 );
 801489e:	7e4a      	ldrb	r2, [r1, #25]
 80148a0:	7e8b      	ldrb	r3, [r1, #26]
 80148a2:	041b      	lsls	r3, r3, #16
 80148a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80148a8:	7e0a      	ldrb	r2, [r1, #24]
 80148aa:	4313      	orrs	r3, r2
 80148ac:	7eca      	ldrb	r2, [r1, #27]
 80148ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80148b2:	6283      	str	r3, [r0, #40]	; 0x28
    ctx->state[11] = BYTES_TO_U32_LE( key, 28 );
 80148b4:	7f4a      	ldrb	r2, [r1, #29]
 80148b6:	7f8b      	ldrb	r3, [r1, #30]
 80148b8:	041b      	lsls	r3, r3, #16
 80148ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80148be:	7f0a      	ldrb	r2, [r1, #28]
 80148c0:	4313      	orrs	r3, r2
 80148c2:	7fca      	ldrb	r2, [r1, #31]
 80148c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80148c8:	62c3      	str	r3, [r0, #44]	; 0x2c

    return( 0 );
}
 80148ca:	2000      	movs	r0, #0
 80148cc:	4770      	bx	lr
 80148ce:	bf00      	nop
 80148d0:	61707865 	.word	0x61707865
 80148d4:	3320646e 	.word	0x3320646e
 80148d8:	79622d32 	.word	0x79622d32

080148dc <mbedtls_chacha20_starts>:

int mbedtls_chacha20_starts( mbedtls_chacha20_context* ctx,
                             const unsigned char nonce[12],
                             uint32_t counter )
{
 80148dc:	b510      	push	{r4, lr}
 80148de:	4604      	mov	r4, r0
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( nonce != NULL );

    /* Counter */
    ctx->state[12] = counter;
 80148e0:	6302      	str	r2, [r0, #48]	; 0x30

    /* Nonce */
    ctx->state[13] = BYTES_TO_U32_LE( nonce, 0 );
 80148e2:	784a      	ldrb	r2, [r1, #1]
 80148e4:	788b      	ldrb	r3, [r1, #2]
 80148e6:	041b      	lsls	r3, r3, #16
 80148e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80148ec:	780a      	ldrb	r2, [r1, #0]
 80148ee:	4313      	orrs	r3, r2
 80148f0:	78ca      	ldrb	r2, [r1, #3]
 80148f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80148f6:	6343      	str	r3, [r0, #52]	; 0x34
    ctx->state[14] = BYTES_TO_U32_LE( nonce, 4 );
 80148f8:	794a      	ldrb	r2, [r1, #5]
 80148fa:	798b      	ldrb	r3, [r1, #6]
 80148fc:	041b      	lsls	r3, r3, #16
 80148fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014902:	790a      	ldrb	r2, [r1, #4]
 8014904:	4313      	orrs	r3, r2
 8014906:	79ca      	ldrb	r2, [r1, #7]
 8014908:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801490c:	6383      	str	r3, [r0, #56]	; 0x38
    ctx->state[15] = BYTES_TO_U32_LE( nonce, 8 );
 801490e:	7a4a      	ldrb	r2, [r1, #9]
 8014910:	7a8b      	ldrb	r3, [r1, #10]
 8014912:	041b      	lsls	r3, r3, #16
 8014914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014918:	7a0a      	ldrb	r2, [r1, #8]
 801491a:	4313      	orrs	r3, r2
 801491c:	7aca      	ldrb	r2, [r1, #11]
 801491e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014922:	63c3      	str	r3, [r0, #60]	; 0x3c

    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 8014924:	2140      	movs	r1, #64	; 0x40
 8014926:	4408      	add	r0, r1
 8014928:	f006 fb0c 	bl	801af44 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 801492c:	2340      	movs	r3, #64	; 0x40
 801492e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

    return( 0 );
}
 8014932:	2000      	movs	r0, #0
 8014934:	bd10      	pop	{r4, pc}

08014936 <mbedtls_chacha20_update>:
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8014936:	2900      	cmp	r1, #0
 8014938:	f000 8098 	beq.w	8014a6c <mbedtls_chacha20_update+0x136>
{
 801493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014940:	4605      	mov	r5, r0
 8014942:	4617      	mov	r7, r2
 8014944:	461e      	mov	r6, r3
 8014946:	4608      	mov	r0, r1
 8014948:	f102 3cff 	add.w	ip, r2, #4294967295
 801494c:	1e59      	subs	r1, r3, #1
    size_t offset = 0U;
 801494e:	2400      	movs	r4, #0
 8014950:	eba0 0904 	sub.w	r9, r0, r4
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8014954:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8014958:	2b3f      	cmp	r3, #63	; 0x3f
 801495a:	d810      	bhi.n	801497e <mbedtls_chacha20_update+0x48>
    {
        output[offset] = input[offset]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 801495c:	442b      	add	r3, r5
        output[offset] = input[offset]
 801495e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8014962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014966:	4053      	eors	r3, r2
 8014968:	f801 3f01 	strb.w	r3, [r1, #1]!

        ctx->keystream_bytes_used++;
 801496c:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8014970:	3301      	adds	r3, #1
 8014972:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        offset++;
 8014976:	3401      	adds	r4, #1
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8014978:	42a0      	cmp	r0, r4
 801497a:	d1e9      	bne.n	8014950 <mbedtls_chacha20_update+0x1a>
 801497c:	e057      	b.n	8014a2e <mbedtls_chacha20_update+0xf8>
        size--;
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 801497e:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8014982:	bf98      	it	ls
 8014984:	46a2      	movls	sl, r4
 8014986:	d94f      	bls.n	8014a28 <mbedtls_chacha20_update+0xf2>
 8014988:	f1a9 0a40 	sub.w	sl, r9, #64	; 0x40
 801498c:	f02a 0a3f 	bic.w	sl, sl, #63	; 0x3f
 8014990:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8014994:	449a      	add	sl, r3
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8014996:	f105 0840 	add.w	r8, r5, #64	; 0x40
 801499a:	e002      	b.n	80149a2 <mbedtls_chacha20_update+0x6c>
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 801499c:	3440      	adds	r4, #64	; 0x40
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 801499e:	4554      	cmp	r4, sl
 80149a0:	d040      	beq.n	8014a24 <mbedtls_chacha20_update+0xee>
        chacha20_block( ctx->state, ctx->keystream8 );
 80149a2:	4641      	mov	r1, r8
 80149a4:	4628      	mov	r0, r5
 80149a6:	f7ff fdf4 	bl	8014592 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 80149aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80149ac:	3301      	adds	r3, #1
 80149ae:	632b      	str	r3, [r5, #48]	; 0x30
        for( i = 0U; i < 64U; i += 8U )
 80149b0:	193a      	adds	r2, r7, r4
 80149b2:	4629      	mov	r1, r5
 80149b4:	1933      	adds	r3, r6, r4
 80149b6:	46c4      	mov	ip, r8
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 80149b8:	7810      	ldrb	r0, [r2, #0]
 80149ba:	f891 e040 	ldrb.w	lr, [r1, #64]	; 0x40
 80149be:	ea80 000e 	eor.w	r0, r0, lr
 80149c2:	7018      	strb	r0, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 80149c4:	7850      	ldrb	r0, [r2, #1]
 80149c6:	f891 e041 	ldrb.w	lr, [r1, #65]	; 0x41
 80149ca:	ea80 000e 	eor.w	r0, r0, lr
 80149ce:	7058      	strb	r0, [r3, #1]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 80149d0:	7890      	ldrb	r0, [r2, #2]
 80149d2:	f891 e042 	ldrb.w	lr, [r1, #66]	; 0x42
 80149d6:	ea80 000e 	eor.w	r0, r0, lr
 80149da:	7098      	strb	r0, [r3, #2]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 80149dc:	78d0      	ldrb	r0, [r2, #3]
 80149de:	f891 e043 	ldrb.w	lr, [r1, #67]	; 0x43
 80149e2:	ea80 000e 	eor.w	r0, r0, lr
 80149e6:	70d8      	strb	r0, [r3, #3]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 80149e8:	7910      	ldrb	r0, [r2, #4]
 80149ea:	f891 e044 	ldrb.w	lr, [r1, #68]	; 0x44
 80149ee:	ea80 000e 	eor.w	r0, r0, lr
 80149f2:	7118      	strb	r0, [r3, #4]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 80149f4:	7950      	ldrb	r0, [r2, #5]
 80149f6:	f891 e045 	ldrb.w	lr, [r1, #69]	; 0x45
 80149fa:	ea80 000e 	eor.w	r0, r0, lr
 80149fe:	7158      	strb	r0, [r3, #5]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 8014a00:	7990      	ldrb	r0, [r2, #6]
 8014a02:	f891 e046 	ldrb.w	lr, [r1, #70]	; 0x46
 8014a06:	ea80 000e 	eor.w	r0, r0, lr
 8014a0a:	7198      	strb	r0, [r3, #6]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 8014a0c:	79d0      	ldrb	r0, [r2, #7]
 8014a0e:	f891 e047 	ldrb.w	lr, [r1, #71]	; 0x47
 8014a12:	ea80 000e 	eor.w	r0, r0, lr
 8014a16:	71d8      	strb	r0, [r3, #7]
        for( i = 0U; i < 64U; i += 8U )
 8014a18:	3208      	adds	r2, #8
 8014a1a:	3108      	adds	r1, #8
 8014a1c:	3308      	adds	r3, #8
 8014a1e:	4561      	cmp	r1, ip
 8014a20:	d1ca      	bne.n	80149b8 <mbedtls_chacha20_update+0x82>
 8014a22:	e7bb      	b.n	801499c <mbedtls_chacha20_update+0x66>
 8014a24:	f009 093f 	and.w	r9, r9, #63	; 0x3f
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
    }

    /* Last (partial) block */
    if( size > 0U )
 8014a28:	f1b9 0f00 	cmp.w	r9, #0
 8014a2c:	d102      	bne.n	8014a34 <mbedtls_chacha20_update+0xfe>
        ctx->keystream_bytes_used = size;

    }

    return( 0 );
}
 8014a2e:	2000      	movs	r0, #0
 8014a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        chacha20_block( ctx->state, ctx->keystream8 );
 8014a34:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8014a38:	4628      	mov	r0, r5
 8014a3a:	f7ff fdaa 	bl	8014592 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8014a3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014a40:	3301      	adds	r3, #1
 8014a42:	632b      	str	r3, [r5, #48]	; 0x30
        for( i = 0U; i < size; i++)
 8014a44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a48:	4457      	add	r7, sl
 8014a4a:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 8014a4e:	4456      	add	r6, sl
 8014a50:	eb02 0009 	add.w	r0, r2, r9
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 8014a54:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8014a58:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8014a5c:	404b      	eors	r3, r1
 8014a5e:	f806 3f01 	strb.w	r3, [r6, #1]!
        for( i = 0U; i < size; i++)
 8014a62:	4282      	cmp	r2, r0
 8014a64:	d1f6      	bne.n	8014a54 <mbedtls_chacha20_update+0x11e>
        ctx->keystream_bytes_used = size;
 8014a66:	f8c5 9080 	str.w	r9, [r5, #128]	; 0x80
 8014a6a:	e7e0      	b.n	8014a2e <mbedtls_chacha20_update+0xf8>
}
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	4770      	bx	lr

08014a70 <chachapoly_pad_aad>:
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 8014a70:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 8014a74:	f012 020f 	ands.w	r2, r2, #15
 8014a78:	d101      	bne.n	8014a7e <chachapoly_pad_aad+0xe>
        return( 0 );
 8014a7a:	2000      	movs	r0, #0
    memset( zeroes, 0, sizeof( zeroes ) );

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
                                     zeroes,
                                     16U - partial_block_len ) );
}
 8014a7c:	4770      	bx	lr
{
 8014a7e:	b500      	push	{lr}
 8014a80:	b085      	sub	sp, #20
    memset( zeroes, 0, sizeof( zeroes ) );
 8014a82:	2300      	movs	r3, #0
 8014a84:	9300      	str	r3, [sp, #0]
 8014a86:	9301      	str	r3, [sp, #4]
 8014a88:	9302      	str	r3, [sp, #8]
 8014a8a:	f8cd 300b 	str.w	r3, [sp, #11]
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8014a8e:	f1c2 0210 	rsb	r2, r2, #16
 8014a92:	4669      	mov	r1, sp
 8014a94:	3084      	adds	r0, #132	; 0x84
 8014a96:	f006 fbf1 	bl	801b27c <mbedtls_poly1305_update>
}
 8014a9a:	b005      	add	sp, #20
 8014a9c:	f85d fb04 	ldr.w	pc, [sp], #4

08014aa0 <mbedtls_chachapoly_init>:
                                     zeroes,
                                     16U - partial_block_len ) );
}

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 8014aa0:	b510      	push	{r4, lr}
 8014aa2:	4604      	mov	r4, r0
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 8014aa4:	f7ff fe97 	bl	80147d6 <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 8014aa8:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8014aac:	f006 fb65 	bl	801b17a <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	e9c4 2334 	strd	r2, r3, [r4, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8014ab8:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8014abc:	2300      	movs	r3, #0
 8014abe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8014ac2:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
 8014ac6:	bd10      	pop	{r4, pc}

08014ac8 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
    if( ctx == NULL )
 8014ac8:	b198      	cbz	r0, 8014af2 <mbedtls_chachapoly_free+0x2a>
{
 8014aca:	b510      	push	{r4, lr}
 8014acc:	4604      	mov	r4, r0
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 8014ace:	f7ff fe8f 	bl	80147f0 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 8014ad2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8014ad6:	f006 fb55 	bl	801b184 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8014ada:	2200      	movs	r2, #0
 8014adc:	2300      	movs	r3, #0
 8014ade:	e9c4 2334 	strd	r2, r3, [r4, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8014ae2:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8014aec:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
 8014af0:	bd10      	pop	{r4, pc}
 8014af2:	4770      	bx	lr

08014af4 <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 8014af4:	b508      	push	{r3, lr}
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 8014af6:	f7ff fe83 	bl	8014800 <mbedtls_chacha20_setkey>

    return( ret );
}
 8014afa:	bd08      	pop	{r3, pc}

08014afc <mbedtls_chachapoly_starts>:

int mbedtls_chachapoly_starts( mbedtls_chachapoly_context *ctx,
                               const unsigned char nonce[12],
                               mbedtls_chachapoly_mode_t mode  )
{
 8014afc:	b570      	push	{r4, r5, r6, lr}
 8014afe:	b090      	sub	sp, #64	; 0x40
 8014b00:	4604      	mov	r4, r0
 8014b02:	4616      	mov	r6, r2
    unsigned char poly1305_key[64];
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( nonce != NULL );

    /* Set counter = 0, will be update to 1 when generating Poly1305 key */
    ret = mbedtls_chacha20_starts( &ctx->chacha20_ctx, nonce, 0U );
 8014b04:	2200      	movs	r2, #0
 8014b06:	f7ff fee9 	bl	80148dc <mbedtls_chacha20_starts>
    if( ret != 0 )
 8014b0a:	4605      	mov	r5, r0
 8014b0c:	b130      	cbz	r0, 8014b1c <mbedtls_chachapoly_starts+0x20>
        ctx->state          = CHACHAPOLY_STATE_AAD;
        ctx->mode           = mode;
    }

cleanup:
    mbedtls_platform_zeroize( poly1305_key, 64U );
 8014b0e:	2140      	movs	r1, #64	; 0x40
 8014b10:	4668      	mov	r0, sp
 8014b12:	f006 fa17 	bl	801af44 <mbedtls_platform_zeroize>
    return( ret );
}
 8014b16:	4628      	mov	r0, r5
 8014b18:	b010      	add	sp, #64	; 0x40
 8014b1a:	bd70      	pop	{r4, r5, r6, pc}
    memset( poly1305_key, 0, sizeof( poly1305_key ) );
 8014b1c:	2540      	movs	r5, #64	; 0x40
 8014b1e:	462a      	mov	r2, r5
 8014b20:	2100      	movs	r1, #0
 8014b22:	4668      	mov	r0, sp
 8014b24:	f015 fd31 	bl	802a58a <memset>
    ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, sizeof( poly1305_key ),
 8014b28:	466b      	mov	r3, sp
 8014b2a:	466a      	mov	r2, sp
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7ff ff01 	bl	8014936 <mbedtls_chacha20_update>
    if( ret != 0 )
 8014b34:	4605      	mov	r5, r0
 8014b36:	2800      	cmp	r0, #0
 8014b38:	d1e9      	bne.n	8014b0e <mbedtls_chachapoly_starts+0x12>
    ret = mbedtls_poly1305_starts( &ctx->poly1305_ctx, poly1305_key );
 8014b3a:	4669      	mov	r1, sp
 8014b3c:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8014b40:	f006 fb27 	bl	801b192 <mbedtls_poly1305_starts>
    if( ret == 0 )
 8014b44:	4605      	mov	r5, r0
 8014b46:	2800      	cmp	r0, #0
 8014b48:	d1e1      	bne.n	8014b0e <mbedtls_chachapoly_starts+0x12>
        ctx->aad_len        = 0U;
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	e9c4 2334 	strd	r2, r3, [r4, #208]	; 0xd0
        ctx->ciphertext_len = 0U;
 8014b52:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
        ctx->state          = CHACHAPOLY_STATE_AAD;
 8014b56:	2301      	movs	r3, #1
 8014b58:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
        ctx->mode           = mode;
 8014b5c:	f884 60e4 	strb.w	r6, [r4, #228]	; 0xe4
 8014b60:	e7d5      	b.n	8014b0e <mbedtls_chachapoly_starts+0x12>

08014b62 <mbedtls_chachapoly_update_aad>:

int mbedtls_chachapoly_update_aad( mbedtls_chachapoly_context *ctx,
                                   const unsigned char *aad,
                                   size_t aad_len )
{
 8014b62:	b538      	push	{r3, r4, r5, lr}
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad != NULL );

    if( ctx->state != CHACHAPOLY_STATE_AAD )
 8014b64:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8014b68:	2b01      	cmp	r3, #1
 8014b6a:	d10a      	bne.n	8014b82 <mbedtls_chachapoly_update_aad+0x20>
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );

    ctx->aad_len += aad_len;
 8014b6c:	e9d0 4534 	ldrd	r4, r5, [r0, #208]	; 0xd0
 8014b70:	18a4      	adds	r4, r4, r2
 8014b72:	f145 0500 	adc.w	r5, r5, #0
 8014b76:	e9c0 4534 	strd	r4, r5, [r0, #208]	; 0xd0

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx, aad, aad_len ) );
 8014b7a:	3084      	adds	r0, #132	; 0x84
 8014b7c:	f006 fb7e 	bl	801b27c <mbedtls_poly1305_update>
}
 8014b80:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8014b82:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8014b86:	e7fb      	b.n	8014b80 <mbedtls_chachapoly_update_aad+0x1e>

08014b88 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 8014b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b8a:	4616      	mov	r6, r2
 8014b8c:	461f      	mov	r7, r3
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 8014b8e:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8014b92:	1e5a      	subs	r2, r3, #1
 8014b94:	2a01      	cmp	r2, #1
 8014b96:	d839      	bhi.n	8014c0c <mbedtls_chachapoly_update+0x84>
 8014b98:	4604      	mov	r4, r0
 8014b9a:	460d      	mov	r5, r1
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d013      	beq.n	8014bc8 <mbedtls_chachapoly_update+0x40>
        ret = chachapoly_pad_aad( ctx );
        if( ret != 0 )
            return( ret );
    }

    ctx->ciphertext_len += len;
 8014ba0:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	; 0xd8
 8014ba4:	1952      	adds	r2, r2, r5
 8014ba6:	f143 0300 	adc.w	r3, r3, #0
 8014baa:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 8014bae:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8014bb2:	b9d3      	cbnz	r3, 8014bea <mbedtls_chachapoly_update+0x62>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 8014bb4:	463b      	mov	r3, r7
 8014bb6:	4632      	mov	r2, r6
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4620      	mov	r0, r4
 8014bbc:	f7ff febb 	bl	8014936 <mbedtls_chacha20_update>
        if( ret != 0 )
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	b150      	cbz	r0, 8014bda <mbedtls_chachapoly_update+0x52>
        if( ret != 0 )
            return( ret );
    }

    return( 0 );
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 8014bc8:	2302      	movs	r3, #2
 8014bca:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
        ret = chachapoly_pad_aad( ctx );
 8014bce:	f7ff ff4f 	bl	8014a70 <chachapoly_pad_aad>
        if( ret != 0 )
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2800      	cmp	r0, #0
 8014bd6:	d0e3      	beq.n	8014ba0 <mbedtls_chachapoly_update+0x18>
 8014bd8:	e7f4      	b.n	8014bc4 <mbedtls_chachapoly_update+0x3c>
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 8014bda:	462a      	mov	r2, r5
 8014bdc:	4639      	mov	r1, r7
 8014bde:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8014be2:	f006 fb4b 	bl	801b27c <mbedtls_poly1305_update>
 8014be6:	4603      	mov	r3, r0
        if( ret != 0 )
 8014be8:	e7ec      	b.n	8014bc4 <mbedtls_chachapoly_update+0x3c>
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 8014bea:	462a      	mov	r2, r5
 8014bec:	4631      	mov	r1, r6
 8014bee:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8014bf2:	f006 fb43 	bl	801b27c <mbedtls_poly1305_update>
        if( ret != 0 )
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d1e3      	bne.n	8014bc4 <mbedtls_chachapoly_update+0x3c>
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 8014bfc:	463b      	mov	r3, r7
 8014bfe:	4632      	mov	r2, r6
 8014c00:	4629      	mov	r1, r5
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7ff fe97 	bl	8014936 <mbedtls_chacha20_update>
 8014c08:	4603      	mov	r3, r0
        if( ret != 0 )
 8014c0a:	e7db      	b.n	8014bc4 <mbedtls_chachapoly_update+0x3c>
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8014c0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8014c10:	e7d8      	b.n	8014bc4 <mbedtls_chachapoly_update+0x3c>

08014c12 <mbedtls_chachapoly_finish>:
    int ret;
    unsigned char len_block[16];
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( mac != NULL );

    if( ctx->state == CHACHAPOLY_STATE_INIT )
 8014c12:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d06b      	beq.n	8014cf2 <mbedtls_chachapoly_finish+0xe0>
{
 8014c1a:	b530      	push	{r4, r5, lr}
 8014c1c:	b089      	sub	sp, #36	; 0x24
 8014c1e:	4604      	mov	r4, r0
 8014c20:	460d      	mov	r5, r1
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	d044      	beq.n	8014cb0 <mbedtls_chachapoly_finish+0x9e>
    {
        ret = chachapoly_pad_aad( ctx );
        if( ret != 0 )
            return( ret );
    }
    else if( ctx->state == CHACHAPOLY_STATE_CIPHERTEXT )
 8014c26:	2b02      	cmp	r3, #2
 8014c28:	d048      	beq.n	8014cbc <mbedtls_chachapoly_finish+0xaa>
        ret = chachapoly_pad_ciphertext( ctx );
        if( ret != 0 )
            return( ret );
    }

    ctx->state = CHACHAPOLY_STATE_FINISHED;
 8014c2a:	2303      	movs	r3, #3
 8014c2c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0

    /* The lengths of the AAD and ciphertext are processed by
     * Poly1305 as the final 128-bit block, encoded as little-endian integers.
     */
    len_block[ 0] = (unsigned char)( ctx->aad_len       );
 8014c30:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8014c34:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8014c38:	f88d 2010 	strb.w	r2, [sp, #16]
    len_block[ 1] = (unsigned char)( ctx->aad_len >>  8 );
 8014c3c:	0a11      	lsrs	r1, r2, #8
 8014c3e:	f88d 1011 	strb.w	r1, [sp, #17]
    len_block[ 2] = (unsigned char)( ctx->aad_len >> 16 );
 8014c42:	0c11      	lsrs	r1, r2, #16
 8014c44:	f88d 1012 	strb.w	r1, [sp, #18]
    len_block[ 3] = (unsigned char)( ctx->aad_len >> 24 );
 8014c48:	0e12      	lsrs	r2, r2, #24
 8014c4a:	f88d 2013 	strb.w	r2, [sp, #19]
    len_block[ 4] = (unsigned char)( ctx->aad_len >> 32 );
 8014c4e:	f88d 3014 	strb.w	r3, [sp, #20]
    len_block[ 5] = (unsigned char)( ctx->aad_len >> 40 );
 8014c52:	0a1a      	lsrs	r2, r3, #8
 8014c54:	f88d 2015 	strb.w	r2, [sp, #21]
    len_block[ 6] = (unsigned char)( ctx->aad_len >> 48 );
 8014c58:	0c1a      	lsrs	r2, r3, #16
 8014c5a:	f88d 2016 	strb.w	r2, [sp, #22]
    len_block[ 7] = (unsigned char)( ctx->aad_len >> 56 );
 8014c5e:	0e1b      	lsrs	r3, r3, #24
 8014c60:	f88d 3017 	strb.w	r3, [sp, #23]
    len_block[ 8] = (unsigned char)( ctx->ciphertext_len       );
 8014c64:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8014c68:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8014c6c:	f88d 2018 	strb.w	r2, [sp, #24]
    len_block[ 9] = (unsigned char)( ctx->ciphertext_len >>  8 );
 8014c70:	0a11      	lsrs	r1, r2, #8
 8014c72:	f88d 1019 	strb.w	r1, [sp, #25]
    len_block[10] = (unsigned char)( ctx->ciphertext_len >> 16 );
 8014c76:	0c11      	lsrs	r1, r2, #16
 8014c78:	f88d 101a 	strb.w	r1, [sp, #26]
    len_block[11] = (unsigned char)( ctx->ciphertext_len >> 24 );
 8014c7c:	0e12      	lsrs	r2, r2, #24
 8014c7e:	f88d 201b 	strb.w	r2, [sp, #27]
    len_block[12] = (unsigned char)( ctx->ciphertext_len >> 32 );
 8014c82:	f88d 301c 	strb.w	r3, [sp, #28]
    len_block[13] = (unsigned char)( ctx->ciphertext_len >> 40 );
 8014c86:	0a1a      	lsrs	r2, r3, #8
 8014c88:	f88d 201d 	strb.w	r2, [sp, #29]
    len_block[14] = (unsigned char)( ctx->ciphertext_len >> 48 );
 8014c8c:	0c1a      	lsrs	r2, r3, #16
 8014c8e:	f88d 201e 	strb.w	r2, [sp, #30]
    len_block[15] = (unsigned char)( ctx->ciphertext_len >> 56 );
 8014c92:	0e1b      	lsrs	r3, r3, #24
 8014c94:	f88d 301f 	strb.w	r3, [sp, #31]

    ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, len_block, 16U );
 8014c98:	3484      	adds	r4, #132	; 0x84
 8014c9a:	2210      	movs	r2, #16
 8014c9c:	eb0d 0102 	add.w	r1, sp, r2
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f006 faeb 	bl	801b27c <mbedtls_poly1305_update>
    if( ret != 0 )
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	b1e8      	cbz	r0, 8014ce6 <mbedtls_chachapoly_finish+0xd4>
        return( ret );

    ret = mbedtls_poly1305_finish( &ctx->poly1305_ctx, mac );

    return( ret );
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	b009      	add	sp, #36	; 0x24
 8014cae:	bd30      	pop	{r4, r5, pc}
        ret = chachapoly_pad_aad( ctx );
 8014cb0:	f7ff fede 	bl	8014a70 <chachapoly_pad_aad>
        if( ret != 0 )
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d0b7      	beq.n	8014c2a <mbedtls_chachapoly_finish+0x18>
 8014cba:	e7f6      	b.n	8014caa <mbedtls_chachapoly_finish+0x98>
    uint32_t partial_block_len = (uint32_t) ( ctx->ciphertext_len % 16U );
 8014cbc:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
    if( partial_block_len == 0U )
 8014cc0:	f012 020f 	ands.w	r2, r2, #15
 8014cc4:	d0b1      	beq.n	8014c2a <mbedtls_chachapoly_finish+0x18>
    memset( zeroes, 0, sizeof( zeroes ) );
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	9300      	str	r3, [sp, #0]
 8014cca:	9301      	str	r3, [sp, #4]
 8014ccc:	9302      	str	r3, [sp, #8]
 8014cce:	f8cd 300b 	str.w	r3, [sp, #11]
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8014cd2:	f1c2 0210 	rsb	r2, r2, #16
 8014cd6:	4669      	mov	r1, sp
 8014cd8:	3084      	adds	r0, #132	; 0x84
 8014cda:	f006 facf 	bl	801b27c <mbedtls_poly1305_update>
        if( ret != 0 )
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2800      	cmp	r0, #0
 8014ce2:	d1e2      	bne.n	8014caa <mbedtls_chachapoly_finish+0x98>
 8014ce4:	e7a1      	b.n	8014c2a <mbedtls_chachapoly_finish+0x18>
    ret = mbedtls_poly1305_finish( &ctx->poly1305_ctx, mac );
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f006 fb0e 	bl	801b30a <mbedtls_poly1305_finish>
 8014cee:	4603      	mov	r3, r0
    return( ret );
 8014cf0:	e7db      	b.n	8014caa <mbedtls_chachapoly_finish+0x98>
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8014cf2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	4770      	bx	lr

08014cfa <chachapoly_crypt_and_tag>:
                                     const unsigned char *aad,
                                     size_t aad_len,
                                     const unsigned char *input,
                                     unsigned char *output,
                                     unsigned char tag[16] )
{
 8014cfa:	b538      	push	{r3, r4, r5, lr}
 8014cfc:	4605      	mov	r5, r0
 8014cfe:	4614      	mov	r4, r2
    int ret;

    ret = mbedtls_chachapoly_starts( ctx, nonce, mode );
 8014d00:	460a      	mov	r2, r1
 8014d02:	4619      	mov	r1, r3
 8014d04:	f7ff fefa 	bl	8014afc <mbedtls_chachapoly_starts>
    if( ret != 0 )
 8014d08:	4603      	mov	r3, r0
 8014d0a:	b108      	cbz	r0, 8014d10 <chachapoly_crypt_and_tag+0x16>

    ret = mbedtls_chachapoly_finish( ctx, tag );

cleanup:
    return( ret );
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	bd38      	pop	{r3, r4, r5, pc}
    ret = mbedtls_chachapoly_update_aad( ctx, aad, aad_len );
 8014d10:	9a05      	ldr	r2, [sp, #20]
 8014d12:	9904      	ldr	r1, [sp, #16]
 8014d14:	4628      	mov	r0, r5
 8014d16:	f7ff ff24 	bl	8014b62 <mbedtls_chachapoly_update_aad>
    if( ret != 0 )
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d1f5      	bne.n	8014d0c <chachapoly_crypt_and_tag+0x12>
    ret = mbedtls_chachapoly_update( ctx, length, input, output );
 8014d20:	9b07      	ldr	r3, [sp, #28]
 8014d22:	9a06      	ldr	r2, [sp, #24]
 8014d24:	4621      	mov	r1, r4
 8014d26:	4628      	mov	r0, r5
 8014d28:	f7ff ff2e 	bl	8014b88 <mbedtls_chachapoly_update>
    if( ret != 0 )
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d1ec      	bne.n	8014d0c <chachapoly_crypt_and_tag+0x12>
    ret = mbedtls_chachapoly_finish( ctx, tag );
 8014d32:	9908      	ldr	r1, [sp, #32]
 8014d34:	4628      	mov	r0, r5
 8014d36:	f7ff ff6c 	bl	8014c12 <mbedtls_chachapoly_finish>
 8014d3a:	4603      	mov	r3, r0
    return( ret );
 8014d3c:	e7e6      	b.n	8014d0c <chachapoly_crypt_and_tag+0x12>

08014d3e <mbedtls_chachapoly_encrypt_and_tag>:
                                        const unsigned char *aad,
                                        size_t aad_len,
                                        const unsigned char *input,
                                        unsigned char *output,
                                        unsigned char tag[16] )
{
 8014d3e:	b510      	push	{r4, lr}
 8014d40:	b086      	sub	sp, #24
    CHACHAPOLY_VALIDATE_RET( tag   != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad    != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || input  != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || output != NULL );

    return( chachapoly_crypt_and_tag( ctx, MBEDTLS_CHACHAPOLY_ENCRYPT,
 8014d42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014d44:	9404      	str	r4, [sp, #16]
 8014d46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014d48:	9403      	str	r4, [sp, #12]
 8014d4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d4c:	9402      	str	r4, [sp, #8]
 8014d4e:	9c08      	ldr	r4, [sp, #32]
 8014d50:	9401      	str	r4, [sp, #4]
 8014d52:	9300      	str	r3, [sp, #0]
 8014d54:	4613      	mov	r3, r2
 8014d56:	460a      	mov	r2, r1
 8014d58:	2100      	movs	r1, #0
 8014d5a:	f7ff ffce 	bl	8014cfa <chachapoly_crypt_and_tag>
                                      length, nonce, aad, aad_len,
                                      input, output, tag ) );
}
 8014d5e:	b006      	add	sp, #24
 8014d60:	bd10      	pop	{r4, pc}

08014d62 <mbedtls_chachapoly_auth_decrypt>:
                                     const unsigned char *aad,
                                     size_t aad_len,
                                     const unsigned char tag[16],
                                     const unsigned char *input,
                                     unsigned char *output )
{
 8014d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d64:	b08b      	sub	sp, #44	; 0x2c
 8014d66:	460e      	mov	r6, r1
 8014d68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    CHACHAPOLY_VALIDATE_RET( tag   != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad    != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || input  != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || output != NULL );

    if( ( ret = chachapoly_crypt_and_tag( ctx,
 8014d6a:	a906      	add	r1, sp, #24
 8014d6c:	9104      	str	r1, [sp, #16]
 8014d6e:	9403      	str	r4, [sp, #12]
 8014d70:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014d72:	9102      	str	r1, [sp, #8]
 8014d74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014d76:	9101      	str	r1, [sp, #4]
 8014d78:	9300      	str	r3, [sp, #0]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	4632      	mov	r2, r6
 8014d7e:	2101      	movs	r1, #1
 8014d80:	f7ff ffbb 	bl	8014cfa <chachapoly_crypt_and_tag>
 8014d84:	b960      	cbnz	r0, 8014da0 <mbedtls_chachapoly_auth_decrypt+0x3e>
 8014d86:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014d88:	3d01      	subs	r5, #1
 8014d8a:	aa06      	add	r2, sp, #24
 8014d8c:	af0a      	add	r7, sp, #40	; 0x28
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < sizeof( check_tag ); i++ )
        diff |= tag[i] ^ check_tag[i];
 8014d8e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014d92:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8014d96:	404b      	eors	r3, r1
 8014d98:	4318      	orrs	r0, r3
    for( diff = 0, i = 0; i < sizeof( check_tag ); i++ )
 8014d9a:	42ba      	cmp	r2, r7
 8014d9c:	d1f7      	bne.n	8014d8e <mbedtls_chachapoly_auth_decrypt+0x2c>

    if( diff != 0 )
 8014d9e:	b908      	cbnz	r0, 8014da4 <mbedtls_chachapoly_auth_decrypt+0x42>
        mbedtls_platform_zeroize( output, length );
        return( MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED );
    }

    return( 0 );
}
 8014da0:	b00b      	add	sp, #44	; 0x2c
 8014da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_platform_zeroize( output, length );
 8014da4:	4631      	mov	r1, r6
 8014da6:	4620      	mov	r0, r4
 8014da8:	f006 f8cc 	bl	801af44 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED );
 8014dac:	f06f 0055 	mvn.w	r0, #85	; 0x55
 8014db0:	e7f6      	b.n	8014da0 <mbedtls_chachapoly_auth_decrypt+0x3e>
	...

08014db4 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 8014db4:	4601      	mov	r1, r0
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8014db6:	4b07      	ldr	r3, [pc, #28]	; (8014dd4 <mbedtls_cipher_info_from_type+0x20>)
 8014db8:	6858      	ldr	r0, [r3, #4]
 8014dba:	b148      	cbz	r0, 8014dd0 <mbedtls_cipher_info_from_type+0x1c>
 8014dbc:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8014dbe:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8014dc2:	428a      	cmp	r2, r1
 8014dc4:	d004      	beq.n	8014dd0 <mbedtls_cipher_info_from_type+0x1c>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8014dc6:	3308      	adds	r3, #8
 8014dc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d1f6      	bne.n	8014dbe <mbedtls_cipher_info_from_type+0xa>
            return( def->info );

    return( NULL );
}
 8014dd0:	4770      	bx	lr
 8014dd2:	bf00      	nop
 8014dd4:	08031a44 	.word	0x08031a44

08014dd8 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8014dd8:	b430      	push	{r4, r5}
 8014dda:	4605      	mov	r5, r0
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8014ddc:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <mbedtls_cipher_info_from_values+0x2c>)
 8014dde:	6858      	ldr	r0, [r3, #4]
 8014de0:	b918      	cbnz	r0, 8014dea <mbedtls_cipher_info_from_values+0x12>
 8014de2:	e00c      	b.n	8014dfe <mbedtls_cipher_info_from_values+0x26>
 8014de4:	3308      	adds	r3, #8
 8014de6:	6858      	ldr	r0, [r3, #4]
 8014de8:	b148      	cbz	r0, 8014dfe <mbedtls_cipher_info_from_values+0x26>
        if( def->info->base->cipher == cipher_id &&
 8014dea:	6984      	ldr	r4, [r0, #24]
 8014dec:	7824      	ldrb	r4, [r4, #0]
 8014dee:	42ac      	cmp	r4, r5
 8014df0:	d1f8      	bne.n	8014de4 <mbedtls_cipher_info_from_values+0xc>
 8014df2:	6844      	ldr	r4, [r0, #4]
 8014df4:	428c      	cmp	r4, r1
 8014df6:	d1f5      	bne.n	8014de4 <mbedtls_cipher_info_from_values+0xc>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8014df8:	7844      	ldrb	r4, [r0, #1]
 8014dfa:	4294      	cmp	r4, r2
 8014dfc:	d1f2      	bne.n	8014de4 <mbedtls_cipher_info_from_values+0xc>
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8014dfe:	bc30      	pop	{r4, r5}
 8014e00:	4770      	bx	lr
 8014e02:	bf00      	nop
 8014e04:	08031a44 	.word	0x08031a44

08014e08 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
 8014e08:	b508      	push	{r3, lr}
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8014e0a:	2238      	movs	r2, #56	; 0x38
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	f015 fbbc 	bl	802a58a <memset>
}
 8014e12:	bd08      	pop	{r3, pc}

08014e14 <mbedtls_cipher_free>:

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
    if( ctx == NULL )
 8014e14:	b160      	cbz	r0, 8014e30 <mbedtls_cipher_free+0x1c>
{
 8014e16:	b510      	push	{r4, lr}
 8014e18:	4604      	mov	r4, r0
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8014e1a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014e1c:	b118      	cbz	r0, 8014e26 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	699b      	ldr	r3, [r3, #24]
 8014e22:	6a1b      	ldr	r3, [r3, #32]
 8014e24:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8014e26:	2138      	movs	r1, #56	; 0x38
 8014e28:	4620      	mov	r0, r4
 8014e2a:	f006 f88b 	bl	801af44 <mbedtls_platform_zeroize>
}
 8014e2e:	bd10      	pop	{r4, pc}
 8014e30:	4770      	bx	lr
	...

08014e34 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 8014e34:	b171      	cbz	r1, 8014e54 <mbedtls_cipher_setup+0x20>
{
 8014e36:	b538      	push	{r3, r4, r5, lr}
 8014e38:	4604      	mov	r4, r0
 8014e3a:	460d      	mov	r5, r1
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8014e3c:	2238      	movs	r2, #56	; 0x38
 8014e3e:	2100      	movs	r1, #0
 8014e40:	f015 fba3 	bl	802a58a <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8014e44:	69ab      	ldr	r3, [r5, #24]
 8014e46:	69db      	ldr	r3, [r3, #28]
 8014e48:	4798      	blx	r3
 8014e4a:	6360      	str	r0, [r4, #52]	; 0x34
 8014e4c:	b120      	cbz	r0, 8014e58 <mbedtls_cipher_setup+0x24>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8014e4e:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8014e50:	2000      	movs	r0, #0
}
 8014e52:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014e54:	4801      	ldr	r0, [pc, #4]	; (8014e5c <mbedtls_cipher_setup+0x28>)
}
 8014e56:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8014e58:	4801      	ldr	r0, [pc, #4]	; (8014e60 <mbedtls_cipher_setup+0x2c>)
 8014e5a:	e7fa      	b.n	8014e52 <mbedtls_cipher_setup+0x1e>
 8014e5c:	ffff9f00 	.word	0xffff9f00
 8014e60:	ffff9e80 	.word	0xffff9e80

08014e64 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 8014e64:	b538      	push	{r3, r4, r5, lr}
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 8014e66:	6804      	ldr	r4, [r0, #0]
 8014e68:	b1d4      	cbz	r4, 8014ea0 <mbedtls_cipher_setkey+0x3c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8014e6a:	6925      	ldr	r5, [r4, #16]
 8014e6c:	f015 0f02 	tst.w	r5, #2
 8014e70:	d102      	bne.n	8014e78 <mbedtls_cipher_setkey+0x14>
 8014e72:	6865      	ldr	r5, [r4, #4]
 8014e74:	4295      	cmp	r5, r2
 8014e76:	d115      	bne.n	8014ea4 <mbedtls_cipher_setkey+0x40>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8014e78:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8014e7a:	7203      	strb	r3, [r0, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d00a      	beq.n	8014e96 <mbedtls_cipher_setkey+0x32>
 8014e80:	7865      	ldrb	r5, [r4, #1]
 8014e82:	3d03      	subs	r5, #3
 8014e84:	b2ed      	uxtb	r5, r5
 8014e86:	2d02      	cmp	r5, #2
 8014e88:	d905      	bls.n	8014e96 <mbedtls_cipher_setkey+0x32>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
                                                         ctx->key_bitlen ) );
    }

    if( MBEDTLS_DECRYPT == operation )
 8014e8a:	b96b      	cbnz	r3, 8014ea8 <mbedtls_cipher_setkey+0x44>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8014e8c:	69a3      	ldr	r3, [r4, #24]
 8014e8e:	699b      	ldr	r3, [r3, #24]
 8014e90:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014e92:	4798      	blx	r3
 8014e94:	e003      	b.n	8014e9e <mbedtls_cipher_setkey+0x3a>
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8014e96:	69a3      	ldr	r3, [r4, #24]
 8014e98:	695b      	ldr	r3, [r3, #20]
 8014e9a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014e9c:	4798      	blx	r3
                                                         ctx->key_bitlen ) );

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8014e9e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014ea0:	4802      	ldr	r0, [pc, #8]	; (8014eac <mbedtls_cipher_setkey+0x48>)
 8014ea2:	e7fc      	b.n	8014e9e <mbedtls_cipher_setkey+0x3a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014ea4:	4801      	ldr	r0, [pc, #4]	; (8014eac <mbedtls_cipher_setkey+0x48>)
 8014ea6:	e7fa      	b.n	8014e9e <mbedtls_cipher_setkey+0x3a>
    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014ea8:	4800      	ldr	r0, [pc, #0]	; (8014eac <mbedtls_cipher_setkey+0x48>)
 8014eaa:	e7f8      	b.n	8014e9e <mbedtls_cipher_setkey+0x3a>
 8014eac:	ffff9f00 	.word	0xffff9f00

08014eb0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8014eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	4614      	mov	r4, r2
 8014eb6:	9e08      	ldr	r6, [sp, #32]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8014eb8:	6802      	ldr	r2, [r0, #0]
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	d06a      	beq.n	8014f94 <mbedtls_cipher_update+0xe4>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	6032      	str	r2, [r6, #0]
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 8014ec2:	6802      	ldr	r2, [r0, #0]
 8014ec4:	b1ea      	cbz	r2, 8014f02 <mbedtls_cipher_update+0x52>
        return 0;

    return ctx->cipher_info->block_size;
 8014ec6:	f8d2 c014 	ldr.w	ip, [r2, #20]
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8014eca:	7855      	ldrb	r5, [r2, #1]
 8014ecc:	2d01      	cmp	r5, #1
 8014ece:	d01b      	beq.n	8014f08 <mbedtls_cipher_update+0x58>

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8014ed0:	2d06      	cmp	r5, #6
 8014ed2:	d026      	beq.n	8014f22 <mbedtls_cipher_update+0x72>
                                    output ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 8014ed4:	7817      	ldrb	r7, [r2, #0]
 8014ed6:	2f49      	cmp	r7, #73	; 0x49
 8014ed8:	d02a      	beq.n	8014f30 <mbedtls_cipher_update+0x80>
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 8014eda:	f1bc 0f00 	cmp.w	ip, #0
 8014ede:	d05d      	beq.n	8014f9c <mbedtls_cipher_update+0xec>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
    }

    if( input == output &&
 8014ee0:	4299      	cmp	r1, r3
 8014ee2:	d02c      	beq.n	8014f3e <mbedtls_cipher_update+0x8e>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 8014ee4:	2d04      	cmp	r5, #4
 8014ee6:	d035      	beq.n	8014f54 <mbedtls_cipher_update+0xa4>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 8014ee8:	2d09      	cmp	r5, #9
 8014eea:	d042      	beq.n	8014f72 <mbedtls_cipher_update+0xc2>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 8014eec:	2d07      	cmp	r5, #7
 8014eee:	d15b      	bne.n	8014fa8 <mbedtls_cipher_update+0xf8>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 8014ef0:	6992      	ldr	r2, [r2, #24]
 8014ef2:	6915      	ldr	r5, [r2, #16]
 8014ef4:	460a      	mov	r2, r1
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014efa:	47a8      	blx	r5
 8014efc:	b978      	cbnz	r0, 8014f1e <mbedtls_cipher_update+0x6e>
                                                    ilen, input, output ) ) )
        {
            return( ret );
        }

        *olen = ilen;
 8014efe:	6034      	str	r4, [r6, #0]

        return( 0 );
 8014f00:	e00d      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        return 0;
 8014f02:	f04f 0c00 	mov.w	ip, #0
 8014f06:	e7e0      	b.n	8014eca <mbedtls_cipher_update+0x1a>
        if( ilen != block_size )
 8014f08:	4564      	cmp	r4, ip
 8014f0a:	d145      	bne.n	8014f98 <mbedtls_cipher_update+0xe8>
        *olen = ilen;
 8014f0c:	6034      	str	r4, [r6, #0]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8014f0e:	6802      	ldr	r2, [r0, #0]
 8014f10:	6992      	ldr	r2, [r2, #24]
 8014f12:	6854      	ldr	r4, [r2, #4]
 8014f14:	460a      	mov	r2, r1
 8014f16:	f990 1008 	ldrsb.w	r1, [r0, #8]
 8014f1a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f1c:	47a0      	blx	r4
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8014f1e:	b003      	add	sp, #12
 8014f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *olen = ilen;
 8014f22:	6034      	str	r4, [r6, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8014f24:	460a      	mov	r2, r1
 8014f26:	4621      	mov	r1, r4
 8014f28:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f2a:	f003 fe1d 	bl	8018b68 <mbedtls_gcm_update>
 8014f2e:	e7f6      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        *olen = ilen;
 8014f30:	6034      	str	r4, [r6, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 8014f32:	460a      	mov	r2, r1
 8014f34:	4621      	mov	r1, r4
 8014f36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f38:	f7ff fe26 	bl	8014b88 <mbedtls_chachapoly_update>
 8014f3c:	e7ef      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
    if( input == output &&
 8014f3e:	69c7      	ldr	r7, [r0, #28]
 8014f40:	2f00      	cmp	r7, #0
 8014f42:	d12d      	bne.n	8014fa0 <mbedtls_cipher_update+0xf0>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8014f44:	fbb4 f7fc 	udiv	r7, r4, ip
 8014f48:	fb0c 4717 	mls	r7, ip, r7, r4
 8014f4c:	2f00      	cmp	r7, #0
 8014f4e:	d0c9      	beq.n	8014ee4 <mbedtls_cipher_update+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014f50:	4816      	ldr	r0, [pc, #88]	; (8014fac <mbedtls_cipher_update+0xfc>)
 8014f52:	e7e4      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8014f54:	6992      	ldr	r2, [r2, #24]
 8014f56:	9301      	str	r3, [sp, #4]
 8014f58:	9100      	str	r1, [sp, #0]
 8014f5a:	6895      	ldr	r5, [r2, #8]
 8014f5c:	f100 0320 	add.w	r3, r0, #32
 8014f60:	f100 021c 	add.w	r2, r0, #28
 8014f64:	4621      	mov	r1, r4
 8014f66:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f68:	47a8      	blx	r5
 8014f6a:	2800      	cmp	r0, #0
 8014f6c:	d1d7      	bne.n	8014f1e <mbedtls_cipher_update+0x6e>
        *olen = ilen;
 8014f6e:	6034      	str	r4, [r6, #0]
        return( 0 );
 8014f70:	e7d5      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        if( ctx->unprocessed_len > 0 ) {
 8014f72:	69c5      	ldr	r5, [r0, #28]
 8014f74:	b9b5      	cbnz	r5, 8014fa4 <mbedtls_cipher_update+0xf4>
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8014f76:	6992      	ldr	r2, [r2, #24]
 8014f78:	9301      	str	r3, [sp, #4]
 8014f7a:	9100      	str	r1, [sp, #0]
 8014f7c:	68d5      	ldr	r5, [r2, #12]
 8014f7e:	f100 0320 	add.w	r3, r0, #32
 8014f82:	4622      	mov	r2, r4
 8014f84:	f990 1008 	ldrsb.w	r1, [r0, #8]
 8014f88:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014f8a:	47a8      	blx	r5
        if( ret != 0 )
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	d1c6      	bne.n	8014f1e <mbedtls_cipher_update+0x6e>
        *olen = ilen;
 8014f90:	6034      	str	r4, [r6, #0]
        return( 0 );
 8014f92:	e7c4      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014f94:	4805      	ldr	r0, [pc, #20]	; (8014fac <mbedtls_cipher_update+0xfc>)
 8014f96:	e7c2      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8014f98:	4805      	ldr	r0, [pc, #20]	; (8014fb0 <mbedtls_cipher_update+0x100>)
 8014f9a:	e7c0      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8014f9c:	4805      	ldr	r0, [pc, #20]	; (8014fb4 <mbedtls_cipher_update+0x104>)
 8014f9e:	e7be      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8014fa0:	4802      	ldr	r0, [pc, #8]	; (8014fac <mbedtls_cipher_update+0xfc>)
 8014fa2:	e7bc      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8014fa4:	4804      	ldr	r0, [pc, #16]	; (8014fb8 <mbedtls_cipher_update+0x108>)
 8014fa6:	e7ba      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8014fa8:	4803      	ldr	r0, [pc, #12]	; (8014fb8 <mbedtls_cipher_update+0x108>)
 8014faa:	e7b8      	b.n	8014f1e <mbedtls_cipher_update+0x6e>
 8014fac:	ffff9f00 	.word	0xffff9f00
 8014fb0:	ffff9d80 	.word	0xffff9d80
 8014fb4:	ffff9c80 	.word	0xffff9c80
 8014fb8:	ffff9f80 	.word	0xffff9f80

08014fbc <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8014fbc:	b570      	push	{r4, r5, r6, lr}
 8014fbe:	b088      	sub	sp, #32
 8014fc0:	460c      	mov	r4, r1
 8014fc2:	990e      	ldr	r1, [sp, #56]	; 0x38
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8014fc4:	6805      	ldr	r5, [r0, #0]
 8014fc6:	786e      	ldrb	r6, [r5, #1]
 8014fc8:	2e06      	cmp	r6, #6
 8014fca:	d018      	beq.n	8014ffe <mbedtls_cipher_auth_encrypt+0x42>
                                     iv, iv_len, ad, ad_len, input, output,
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */
#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type )
 8014fcc:	782e      	ldrb	r6, [r5, #0]
 8014fce:	2e49      	cmp	r6, #73	; 0x49
 8014fd0:	d12a      	bne.n	8015028 <mbedtls_cipher_auth_encrypt+0x6c>
    {
        /* ChachaPoly has fixed length nonce and MAC (tag) */
        if ( ( iv_len != ctx->cipher_info->iv_size ) ||
 8014fd2:	68ed      	ldr	r5, [r5, #12]
 8014fd4:	4295      	cmp	r5, r2
 8014fd6:	d129      	bne.n	801502c <mbedtls_cipher_auth_encrypt+0x70>
 8014fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fda:	2a10      	cmp	r2, #16
 8014fdc:	d128      	bne.n	8015030 <mbedtls_cipher_auth_encrypt+0x74>
             ( tag_len != 16U ) )
        {
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }

        *olen = ilen;
 8014fde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014fe0:	6011      	str	r1, [r2, #0]
        return( mbedtls_chachapoly_encrypt_and_tag( ctx->cipher_ctx,
 8014fe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014fe4:	9203      	str	r2, [sp, #12]
 8014fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fe8:	9202      	str	r2, [sp, #8]
 8014fea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014fec:	9201      	str	r2, [sp, #4]
 8014fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ff0:	9200      	str	r2, [sp, #0]
 8014ff2:	4622      	mov	r2, r4
 8014ff4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014ff6:	f7ff fea2 	bl	8014d3e <mbedtls_chachapoly_encrypt_and_tag>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8014ffa:	b008      	add	sp, #32
 8014ffc:	bd70      	pop	{r4, r5, r6, pc}
        *olen = ilen;
 8014ffe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015000:	6029      	str	r1, [r5, #0]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8015002:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015004:	9506      	str	r5, [sp, #24]
 8015006:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015008:	9505      	str	r5, [sp, #20]
 801500a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801500c:	9504      	str	r5, [sp, #16]
 801500e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015010:	9503      	str	r5, [sp, #12]
 8015012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015014:	9502      	str	r5, [sp, #8]
 8015016:	9301      	str	r3, [sp, #4]
 8015018:	9200      	str	r2, [sp, #0]
 801501a:	4623      	mov	r3, r4
 801501c:	460a      	mov	r2, r1
 801501e:	2101      	movs	r1, #1
 8015020:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015022:	f003 feac 	bl	8018d7e <mbedtls_gcm_crypt_and_tag>
 8015026:	e7e8      	b.n	8014ffa <mbedtls_cipher_auth_encrypt+0x3e>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8015028:	4802      	ldr	r0, [pc, #8]	; (8015034 <mbedtls_cipher_auth_encrypt+0x78>)
 801502a:	e7e6      	b.n	8014ffa <mbedtls_cipher_auth_encrypt+0x3e>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801502c:	4802      	ldr	r0, [pc, #8]	; (8015038 <mbedtls_cipher_auth_encrypt+0x7c>)
 801502e:	e7e4      	b.n	8014ffa <mbedtls_cipher_auth_encrypt+0x3e>
 8015030:	4801      	ldr	r0, [pc, #4]	; (8015038 <mbedtls_cipher_auth_encrypt+0x7c>)
 8015032:	e7e2      	b.n	8014ffa <mbedtls_cipher_auth_encrypt+0x3e>
 8015034:	ffff9f80 	.word	0xffff9f80
 8015038:	ffff9f00 	.word	0xffff9f00

0801503c <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	460c      	mov	r4, r1
 8015042:	990c      	ldr	r1, [sp, #48]	; 0x30
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8015044:	6805      	ldr	r5, [r0, #0]
 8015046:	786e      	ldrb	r6, [r5, #1]
 8015048:	2e06      	cmp	r6, #6
 801504a:	d01d      	beq.n	8015088 <mbedtls_cipher_auth_decrypt+0x4c>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */
#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type )
 801504c:	782e      	ldrb	r6, [r5, #0]
 801504e:	2e49      	cmp	r6, #73	; 0x49
 8015050:	d132      	bne.n	80150b8 <mbedtls_cipher_auth_decrypt+0x7c>
    {
        int ret;

        /* ChachaPoly has fixed length nonce and MAC (tag) */
        if ( ( iv_len != ctx->cipher_info->iv_size ) ||
 8015052:	68ed      	ldr	r5, [r5, #12]
 8015054:	4295      	cmp	r5, r2
 8015056:	d131      	bne.n	80150bc <mbedtls_cipher_auth_decrypt+0x80>
 8015058:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801505a:	2a10      	cmp	r2, #16
 801505c:	d130      	bne.n	80150c0 <mbedtls_cipher_auth_decrypt+0x84>
             ( tag_len != 16U ) )
        {
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
        }

        *olen = ilen;
 801505e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015060:	6011      	str	r1, [r2, #0]
        ret = mbedtls_chachapoly_auth_decrypt( ctx->cipher_ctx, ilen,
 8015062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015064:	9203      	str	r2, [sp, #12]
 8015066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015068:	9202      	str	r2, [sp, #8]
 801506a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801506c:	9201      	str	r2, [sp, #4]
 801506e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015070:	9200      	str	r2, [sp, #0]
 8015072:	4622      	mov	r2, r4
 8015074:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015076:	f7ff fe74 	bl	8014d62 <mbedtls_chachapoly_auth_decrypt>
                                iv, ad, ad_len, tag, input, output );

        if( ret == MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 801507a:	4b12      	ldr	r3, [pc, #72]	; (80150c4 <mbedtls_cipher_auth_decrypt+0x88>)
 801507c:	f110 0f56 	cmn.w	r0, #86	; 0x56
 8015080:	bf08      	it	eq
 8015082:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8015084:	b006      	add	sp, #24
 8015086:	bd70      	pop	{r4, r5, r6, pc}
        *olen = ilen;
 8015088:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801508a:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 801508c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801508e:	9505      	str	r5, [sp, #20]
 8015090:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015092:	9504      	str	r5, [sp, #16]
 8015094:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015096:	9503      	str	r5, [sp, #12]
 8015098:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801509a:	9502      	str	r5, [sp, #8]
 801509c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801509e:	9501      	str	r5, [sp, #4]
 80150a0:	9300      	str	r3, [sp, #0]
 80150a2:	4613      	mov	r3, r2
 80150a4:	4622      	mov	r2, r4
 80150a6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80150a8:	f003 fe8a 	bl	8018dc0 <mbedtls_gcm_auth_decrypt>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80150ac:	4b05      	ldr	r3, [pc, #20]	; (80150c4 <mbedtls_cipher_auth_decrypt+0x88>)
 80150ae:	f110 0f12 	cmn.w	r0, #18
 80150b2:	bf08      	it	eq
 80150b4:	4618      	moveq	r0, r3
 80150b6:	e7e5      	b.n	8015084 <mbedtls_cipher_auth_decrypt+0x48>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80150b8:	4803      	ldr	r0, [pc, #12]	; (80150c8 <mbedtls_cipher_auth_decrypt+0x8c>)
 80150ba:	e7e3      	b.n	8015084 <mbedtls_cipher_auth_decrypt+0x48>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80150bc:	4803      	ldr	r0, [pc, #12]	; (80150cc <mbedtls_cipher_auth_decrypt+0x90>)
 80150be:	e7e1      	b.n	8015084 <mbedtls_cipher_auth_decrypt+0x48>
 80150c0:	4802      	ldr	r0, [pc, #8]	; (80150cc <mbedtls_cipher_auth_decrypt+0x90>)
 80150c2:	e7df      	b.n	8015084 <mbedtls_cipher_auth_decrypt+0x48>
 80150c4:	ffff9d00 	.word	0xffff9d00
 80150c8:	ffff9f80 	.word	0xffff9f80
 80150cc:	ffff9f00 	.word	0xffff9f00

080150d0 <chachapoly_ctx_free>:

    return( ctx );
}

static void chachapoly_ctx_free( void *ctx )
{
 80150d0:	b510      	push	{r4, lr}
 80150d2:	4604      	mov	r4, r0
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 80150d4:	f7ff fcf8 	bl	8014ac8 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 80150d8:	4620      	mov	r0, r4
 80150da:	f013 fee5 	bl	8028ea8 <mbedtls_free>
}
 80150de:	bd10      	pop	{r4, pc}

080150e0 <chachapoly_ctx_alloc>:
{
 80150e0:	b510      	push	{r4, lr}
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 80150e2:	21e8      	movs	r1, #232	; 0xe8
 80150e4:	2001      	movs	r0, #1
 80150e6:	f013 fed1 	bl	8028e8c <mbedtls_calloc>
    if( ctx == NULL )
 80150ea:	4604      	mov	r4, r0
 80150ec:	b108      	cbz	r0, 80150f2 <chachapoly_ctx_alloc+0x12>
    mbedtls_chachapoly_init( ctx );
 80150ee:	f7ff fcd7 	bl	8014aa0 <mbedtls_chachapoly_init>
}
 80150f2:	4620      	mov	r0, r4
 80150f4:	bd10      	pop	{r4, pc}
	...

080150f8 <chachapoly_setkey_wrap>:
    if( key_bitlen != 256U )
 80150f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80150fc:	d107      	bne.n	801510e <chachapoly_setkey_wrap+0x16>
{
 80150fe:	b508      	push	{r3, lr}
    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 8015100:	f7ff fcf8 	bl	8014af4 <mbedtls_chachapoly_setkey>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8015104:	2800      	cmp	r0, #0
 8015106:	4b03      	ldr	r3, [pc, #12]	; (8015114 <chachapoly_setkey_wrap+0x1c>)
 8015108:	bf18      	it	ne
 801510a:	4618      	movne	r0, r3
}
 801510c:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801510e:	4801      	ldr	r0, [pc, #4]	; (8015114 <chachapoly_setkey_wrap+0x1c>)
}
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	ffff9f00 	.word	0xffff9f00

08015118 <chacha20_ctx_free>:
{
 8015118:	b510      	push	{r4, lr}
 801511a:	4604      	mov	r4, r0
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 801511c:	f7ff fb68 	bl	80147f0 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 8015120:	4620      	mov	r0, r4
 8015122:	f013 fec1 	bl	8028ea8 <mbedtls_free>
}
 8015126:	bd10      	pop	{r4, pc}

08015128 <chacha20_ctx_alloc>:
{
 8015128:	b510      	push	{r4, lr}
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 801512a:	2184      	movs	r1, #132	; 0x84
 801512c:	2001      	movs	r0, #1
 801512e:	f013 fead 	bl	8028e8c <mbedtls_calloc>
    if( ctx == NULL )
 8015132:	4604      	mov	r4, r0
 8015134:	b108      	cbz	r0, 801513a <chacha20_ctx_alloc+0x12>
    mbedtls_chacha20_init( ctx );
 8015136:	f7ff fb4e 	bl	80147d6 <mbedtls_chacha20_init>
}
 801513a:	4620      	mov	r0, r4
 801513c:	bd10      	pop	{r4, pc}
	...

08015140 <chacha20_setkey_wrap>:
    if( key_bitlen != 256U )
 8015140:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8015144:	d107      	bne.n	8015156 <chacha20_setkey_wrap+0x16>
{
 8015146:	b508      	push	{r3, lr}
    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 8015148:	f7ff fb5a 	bl	8014800 <mbedtls_chacha20_setkey>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801514c:	2800      	cmp	r0, #0
 801514e:	4b03      	ldr	r3, [pc, #12]	; (801515c <chacha20_setkey_wrap+0x1c>)
 8015150:	bf18      	it	ne
 8015152:	4618      	movne	r0, r3
}
 8015154:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8015156:	4801      	ldr	r0, [pc, #4]	; (801515c <chacha20_setkey_wrap+0x1c>)
}
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	ffff9f00 	.word	0xffff9f00

08015160 <chacha20_stream_wrap>:
{
 8015160:	b508      	push	{r3, lr}
    ret = mbedtls_chacha20_update( ctx, length, input, output );
 8015162:	f7ff fbe8 	bl	8014936 <mbedtls_chacha20_update>
}
 8015166:	4b03      	ldr	r3, [pc, #12]	; (8015174 <chacha20_stream_wrap+0x14>)
 8015168:	f110 0f51 	cmn.w	r0, #81	; 0x51
 801516c:	bf08      	it	eq
 801516e:	4618      	moveq	r0, r3
 8015170:	bd08      	pop	{r3, pc}
 8015172:	bf00      	nop
 8015174:	ffff9f00 	.word	0xffff9f00

08015178 <gcm_ctx_free>:
{
 8015178:	b510      	push	{r4, lr}
 801517a:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 801517c:	f003 fe4e 	bl	8018e1c <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8015180:	4620      	mov	r0, r4
 8015182:	f013 fe91 	bl	8028ea8 <mbedtls_free>
}
 8015186:	bd10      	pop	{r4, pc}

08015188 <gcm_ctx_alloc>:
{
 8015188:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 801518a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801518e:	2001      	movs	r0, #1
 8015190:	f013 fe7c 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 8015194:	4604      	mov	r4, r0
 8015196:	b108      	cbz	r0, 801519c <gcm_ctx_alloc+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8015198:	f003 fb30 	bl	80187fc <mbedtls_gcm_init>
}
 801519c:	4620      	mov	r0, r4
 801519e:	bd10      	pop	{r4, pc}

080151a0 <gcm_camellia_setkey_wrap>:
{
 80151a0:	b508      	push	{r3, lr}
 80151a2:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 80151a4:	460a      	mov	r2, r1
 80151a6:	2105      	movs	r1, #5
 80151a8:	f003 fb2f 	bl	801880a <mbedtls_gcm_setkey>
}
 80151ac:	bd08      	pop	{r3, pc}

080151ae <gcm_aes_setkey_wrap>:
{
 80151ae:	b508      	push	{r3, lr}
 80151b0:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 80151b2:	460a      	mov	r2, r1
 80151b4:	2102      	movs	r1, #2
 80151b6:	f003 fb28 	bl	801880a <mbedtls_gcm_setkey>
}
 80151ba:	bd08      	pop	{r3, pc}

080151bc <camellia_ctx_free>:
{
 80151bc:	b510      	push	{r4, lr}
 80151be:	4604      	mov	r4, r0
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 80151c0:	f7fe feb5 	bl	8013f2e <mbedtls_camellia_free>
    mbedtls_free( ctx );
 80151c4:	4620      	mov	r0, r4
 80151c6:	f013 fe6f 	bl	8028ea8 <mbedtls_free>
}
 80151ca:	bd10      	pop	{r4, pc}

080151cc <camellia_ctx_alloc>:
{
 80151cc:	b510      	push	{r4, lr}
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 80151ce:	f44f 718a 	mov.w	r1, #276	; 0x114
 80151d2:	2001      	movs	r0, #1
 80151d4:	f013 fe5a 	bl	8028e8c <mbedtls_calloc>
    if( ctx == NULL )
 80151d8:	4604      	mov	r4, r0
 80151da:	b108      	cbz	r0, 80151e0 <camellia_ctx_alloc+0x14>
    mbedtls_camellia_init( ctx );
 80151dc:	f7fe fea0 	bl	8013f20 <mbedtls_camellia_init>
}
 80151e0:	4620      	mov	r0, r4
 80151e2:	bd10      	pop	{r4, pc}

080151e4 <camellia_setkey_dec_wrap>:
{
 80151e4:	b508      	push	{r3, lr}
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 80151e6:	f7ff f8d5 	bl	8014394 <mbedtls_camellia_setkey_dec>
}
 80151ea:	bd08      	pop	{r3, pc}

080151ec <camellia_setkey_enc_wrap>:
{
 80151ec:	b508      	push	{r3, lr}
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 80151ee:	f7fe fea7 	bl	8013f40 <mbedtls_camellia_setkey_enc>
}
 80151f2:	bd08      	pop	{r3, pc}

080151f4 <camellia_crypt_ecb_wrap>:
{
 80151f4:	b508      	push	{r3, lr}
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 80151f6:	f7ff f91f 	bl	8014438 <mbedtls_camellia_crypt_ecb>
}
 80151fa:	bd08      	pop	{r3, pc}

080151fc <xts_aes_ctx_free>:
    if( xts_ctx == NULL )
 80151fc:	b138      	cbz	r0, 801520e <xts_aes_ctx_free+0x12>
{
 80151fe:	b510      	push	{r4, lr}
 8015200:	4604      	mov	r4, r0
    mbedtls_aes_xts_free( xts_ctx );
 8015202:	f7fb ff5e 	bl	80110c2 <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 8015206:	4620      	mov	r0, r4
 8015208:	f013 fe4e 	bl	8028ea8 <mbedtls_free>
}
 801520c:	bd10      	pop	{r4, pc}
 801520e:	4770      	bx	lr

08015210 <xts_aes_ctx_alloc>:
{
 8015210:	b510      	push	{r4, lr}
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 8015212:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015216:	2001      	movs	r0, #1
 8015218:	f013 fe38 	bl	8028e8c <mbedtls_calloc>
    if( xts_ctx != NULL )
 801521c:	4604      	mov	r4, r0
 801521e:	b108      	cbz	r0, 8015224 <xts_aes_ctx_alloc+0x14>
        mbedtls_aes_xts_init( xts_ctx );
 8015220:	f7fb ff46 	bl	80110b0 <mbedtls_aes_xts_init>
}
 8015224:	4620      	mov	r0, r4
 8015226:	bd10      	pop	{r4, pc}

08015228 <xts_aes_setkey_dec_wrap>:
{
 8015228:	b508      	push	{r3, lr}
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 801522a:	f7fc f8d3 	bl	80113d4 <mbedtls_aes_xts_setkey_dec>
}
 801522e:	bd08      	pop	{r3, pc}

08015230 <xts_aes_setkey_enc_wrap>:
{
 8015230:	b508      	push	{r3, lr}
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 8015232:	f7fc f8b3 	bl	801139c <mbedtls_aes_xts_setkey_enc>
}
 8015236:	bd08      	pop	{r3, pc}

08015238 <aes_crypt_xts_wrap>:
{
 8015238:	b510      	push	{r4, lr}
 801523a:	b082      	sub	sp, #8
    switch( operation )
 801523c:	b151      	cbz	r1, 8015254 <aes_crypt_xts_wrap+0x1c>
 801523e:	2901      	cmp	r1, #1
 8015240:	d10a      	bne.n	8015258 <aes_crypt_xts_wrap+0x20>
            mode = MBEDTLS_AES_ENCRYPT;
 8015242:	2101      	movs	r1, #1
    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 8015244:	9c05      	ldr	r4, [sp, #20]
 8015246:	9401      	str	r4, [sp, #4]
 8015248:	9c04      	ldr	r4, [sp, #16]
 801524a:	9400      	str	r4, [sp, #0]
 801524c:	f7fc fcb0 	bl	8011bb0 <mbedtls_aes_crypt_xts>
}
 8015250:	b002      	add	sp, #8
 8015252:	bd10      	pop	{r4, pc}
    switch( operation )
 8015254:	2100      	movs	r1, #0
 8015256:	e7f5      	b.n	8015244 <aes_crypt_xts_wrap+0xc>
 8015258:	4800      	ldr	r0, [pc, #0]	; (801525c <aes_crypt_xts_wrap+0x24>)
 801525a:	e7f9      	b.n	8015250 <aes_crypt_xts_wrap+0x18>
 801525c:	ffff9f00 	.word	0xffff9f00

08015260 <aes_ctx_free>:
{
 8015260:	b510      	push	{r4, lr}
 8015262:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8015264:	f7fb ff1c 	bl	80110a0 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8015268:	4620      	mov	r0, r4
 801526a:	f013 fe1d 	bl	8028ea8 <mbedtls_free>
}
 801526e:	bd10      	pop	{r4, pc}

08015270 <aes_ctx_alloc>:
{
 8015270:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8015272:	f44f 718c 	mov.w	r1, #280	; 0x118
 8015276:	2001      	movs	r0, #1
 8015278:	f013 fe08 	bl	8028e8c <mbedtls_calloc>
    if( aes == NULL )
 801527c:	4604      	mov	r4, r0
 801527e:	b108      	cbz	r0, 8015284 <aes_ctx_alloc+0x14>
    mbedtls_aes_init( aes );
 8015280:	f7fb ff07 	bl	8011092 <mbedtls_aes_init>
}
 8015284:	4620      	mov	r0, r4
 8015286:	bd10      	pop	{r4, pc}

08015288 <aes_setkey_dec_wrap>:
{
 8015288:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 801528a:	f7fb fff7 	bl	801127c <mbedtls_aes_setkey_dec>
}
 801528e:	bd08      	pop	{r3, pc}

08015290 <aes_setkey_enc_wrap>:
{
 8015290:	b508      	push	{r3, lr}
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8015292:	f7fb ff21 	bl	80110d8 <mbedtls_aes_setkey_enc>
}
 8015296:	bd08      	pop	{r3, pc}

08015298 <aes_crypt_ofb_wrap>:
{
 8015298:	b510      	push	{r4, lr}
 801529a:	b082      	sub	sp, #8
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 801529c:	9c05      	ldr	r4, [sp, #20]
 801529e:	9401      	str	r4, [sp, #4]
 80152a0:	9c04      	ldr	r4, [sp, #16]
 80152a2:	9400      	str	r4, [sp, #0]
 80152a4:	f7fc fd40 	bl	8011d28 <mbedtls_aes_crypt_ofb>
}
 80152a8:	b002      	add	sp, #8
 80152aa:	bd10      	pop	{r4, pc}

080152ac <aes_crypt_ecb_wrap>:
{
 80152ac:	b508      	push	{r3, lr}
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80152ae:	f7fc fc73 	bl	8011b98 <mbedtls_aes_crypt_ecb>
}
 80152b2:	bd08      	pop	{r3, pc}

080152b4 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 80152b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b8:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80152bc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 80152c0:	f200 80a3 	bhi.w	801540a <block_cipher_df+0x156>
 80152c4:	4681      	mov	r9, r0
 80152c6:	460d      	mov	r5, r1
 80152c8:	4617      	mov	r7, r2
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 80152ca:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80152ce:	2100      	movs	r1, #0
 80152d0:	a85e      	add	r0, sp, #376	; 0x178
 80152d2:	f015 f95a 	bl	802a58a <memset>
    mbedtls_aes_init( &aes_ctx );
 80152d6:	4668      	mov	r0, sp
 80152d8:	f7fb fedb 	bl	8011092 <mbedtls_aes_init>
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 80152dc:	2400      	movs	r4, #0
 80152de:	f88d 4188 	strb.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len >> 16 ) & 0xff;
 80152e2:	f88d 4189 	strb.w	r4, [sp, #393]	; 0x189
    *p++ = ( data_len >> 8  ) & 0xff;
 80152e6:	0a3b      	lsrs	r3, r7, #8
 80152e8:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
 80152ec:	f88d 718b 	strb.w	r7, [sp, #395]	; 0x18b
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80152f0:	2330      	movs	r3, #48	; 0x30
 80152f2:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 80152f6:	ae64      	add	r6, sp, #400	; 0x190
 80152f8:	463a      	mov	r2, r7
 80152fa:	4629      	mov	r1, r5
 80152fc:	4630      	mov	r0, r6
 80152fe:	f015 f91c 	bl	802a53a <memcpy>
    p[data_len] = 0x80;
 8015302:	2380      	movs	r3, #128	; 0x80
 8015304:	55f3      	strb	r3, [r6, r7]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8015306:	f20d 1127 	addw	r1, sp, #295	; 0x127
 801530a:	4623      	mov	r3, r4
        key[i] = i;
 801530c:	f801 3f01 	strb.w	r3, [r1, #1]!
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8015310:	3301      	adds	r3, #1
 8015312:	2b20      	cmp	r3, #32
 8015314:	d1fa      	bne.n	801530c <block_cipher_df+0x58>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8015316:	f44f 7280 	mov.w	r2, #256	; 0x100
 801531a:	a94a      	add	r1, sp, #296	; 0x128
 801531c:	4668      	mov	r0, sp
 801531e:	f7fb fedb 	bl	80110d8 <mbedtls_aes_setkey_enc>
 8015322:	4683      	mov	fp, r0
 8015324:	2800      	cmp	r0, #0
 8015326:	d173      	bne.n	8015410 <block_cipher_df+0x15c>
    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8015328:	3719      	adds	r7, #25
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801532a:	4682      	mov	sl, r0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801532c:	f04f 0800 	mov.w	r8, #0
 8015330:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015334:	f8cd 811c 	str.w	r8, [sp, #284]	; 0x11c
 8015338:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 801533c:	f8cd 8124 	str.w	r8, [sp, #292]	; 0x124
        use_len = buf_len;
 8015340:	463d      	mov	r5, r7
        p = buf;
 8015342:	ae5e      	add	r6, sp, #376	; 0x178
 8015344:	f20d 1427 	addw	r4, sp, #295	; 0x127
 8015348:	f20d 1317 	addw	r3, sp, #279	; 0x117
 801534c:	1e71      	subs	r1, r6, #1

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 801534e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8015352:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015356:	4042      	eors	r2, r0
 8015358:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 801535a:	42a3      	cmp	r3, r4
 801535c:	d1f7      	bne.n	801534e <block_cipher_df+0x9a>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 801535e:	3610      	adds	r6, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8015360:	2d10      	cmp	r5, #16
 8015362:	bf94      	ite	ls
 8015364:	1b6d      	subls	r5, r5, r5
 8015366:	3d10      	subhi	r5, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 8015368:	ab46      	add	r3, sp, #280	; 0x118
 801536a:	461a      	mov	r2, r3
 801536c:	2101      	movs	r1, #1
 801536e:	4668      	mov	r0, sp
 8015370:	f7fc fc12 	bl	8011b98 <mbedtls_aes_crypt_ecb>
 8015374:	4683      	mov	fp, r0
 8015376:	2800      	cmp	r0, #0
 8015378:	d14a      	bne.n	8015410 <block_cipher_df+0x15c>
        while( use_len > 0 )
 801537a:	2d00      	cmp	r5, #0
 801537c:	d1e4      	bne.n	8015348 <block_cipher_df+0x94>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801537e:	ae52      	add	r6, sp, #328	; 0x148
 8015380:	eb0a 0506 	add.w	r5, sl, r6
 8015384:	ac46      	add	r4, sp, #280	; 0x118
 8015386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015388:	f84a 0006 	str.w	r0, [sl, r6]
 801538c:	6069      	str	r1, [r5, #4]
 801538e:	60aa      	str	r2, [r5, #8]
 8015390:	60eb      	str	r3, [r5, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8015392:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
 8015396:	3301      	adds	r3, #1
 8015398:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801539c:	f10a 0a10 	add.w	sl, sl, #16
 80153a0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80153a4:	d1c4      	bne.n	8015330 <block_cipher_df+0x7c>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80153a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153aa:	4631      	mov	r1, r6
 80153ac:	4668      	mov	r0, sp
 80153ae:	f7fb fe93 	bl	80110d8 <mbedtls_aes_setkey_enc>
 80153b2:	4683      	mov	fp, r0
 80153b4:	bb60      	cbnz	r0, 8015410 <block_cipher_df+0x15c>
 80153b6:	f109 0730 	add.w	r7, r9, #48	; 0x30
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;
 80153ba:	464c      	mov	r4, r9

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 80153bc:	2601      	movs	r6, #1
 80153be:	ab5a      	add	r3, sp, #360	; 0x168
 80153c0:	461a      	mov	r2, r3
 80153c2:	4631      	mov	r1, r6
 80153c4:	4668      	mov	r0, sp
 80153c6:	f7fc fbe7 	bl	8011b98 <mbedtls_aes_crypt_ecb>
 80153ca:	4683      	mov	fp, r0
 80153cc:	bb00      	cbnz	r0, 8015410 <block_cipher_df+0x15c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80153ce:	ad5a      	add	r5, sp, #360	; 0x168
 80153d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153d2:	6020      	str	r0, [r4, #0]
 80153d4:	6061      	str	r1, [r4, #4]
 80153d6:	60a2      	str	r2, [r4, #8]
 80153d8:	60e3      	str	r3, [r4, #12]
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80153da:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80153dc:	42a7      	cmp	r7, r4
 80153de:	d1ee      	bne.n	80153be <block_cipher_df+0x10a>
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 80153e0:	4668      	mov	r0, sp
 80153e2:	f7fb fe5d 	bl	80110a0 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80153e6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80153ea:	a85e      	add	r0, sp, #376	; 0x178
 80153ec:	f005 fdaa 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80153f0:	2130      	movs	r1, #48	; 0x30
 80153f2:	a852      	add	r0, sp, #328	; 0x148
 80153f4:	f005 fda6 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 80153f8:	2120      	movs	r1, #32
 80153fa:	a84a      	add	r0, sp, #296	; 0x128
 80153fc:	f005 fda2 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8015400:	2110      	movs	r1, #16
 8015402:	a846      	add	r0, sp, #280	; 0x118
 8015404:	f005 fd9e 	bl	801af44 <mbedtls_platform_zeroize>
    if( 0 != ret )
 8015408:	e01a      	b.n	8015440 <block_cipher_df+0x18c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801540a:	f06f 0b37 	mvn.w	fp, #55	; 0x37
 801540e:	e017      	b.n	8015440 <block_cipher_df+0x18c>
    mbedtls_aes_free( &aes_ctx );
 8015410:	4668      	mov	r0, sp
 8015412:	f7fb fe45 	bl	80110a0 <mbedtls_aes_free>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8015416:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801541a:	a85e      	add	r0, sp, #376	; 0x178
 801541c:	f005 fd92 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8015420:	2130      	movs	r1, #48	; 0x30
 8015422:	a852      	add	r0, sp, #328	; 0x148
 8015424:	f005 fd8e 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8015428:	2120      	movs	r1, #32
 801542a:	a84a      	add	r0, sp, #296	; 0x128
 801542c:	f005 fd8a 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8015430:	2110      	movs	r1, #16
 8015432:	a846      	add	r0, sp, #280	; 0x118
 8015434:	f005 fd86 	bl	801af44 <mbedtls_platform_zeroize>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8015438:	2130      	movs	r1, #48	; 0x30
 801543a:	4648      	mov	r0, r9
 801543c:	f005 fd82 	bl	801af44 <mbedtls_platform_zeroize>
    }

    return( ret );
}
 8015440:	4658      	mov	r0, fp
 8015442:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 8015446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801544a <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 801544a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544e:	b08d      	sub	sp, #52	; 0x34
 8015450:	4681      	mov	r9, r0
 8015452:	460c      	mov	r4, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8015454:	2230      	movs	r2, #48	; 0x30
 8015456:	2100      	movs	r1, #0
 8015458:	4668      	mov	r0, sp
 801545a:	f015 f896 	bl	802a58a <memset>
    unsigned char *p = tmp;
 801545e:	466e      	mov	r6, sp
 8015460:	464d      	mov	r5, r9
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 8015462:	f109 0720 	add.w	r7, r9, #32
 8015466:	f04f 0a01 	mov.w	sl, #1
 801546a:	e00c      	b.n	8015486 <ctr_drbg_update_internal+0x3c>
 801546c:	46a8      	mov	r8, r5
 801546e:	4633      	mov	r3, r6
 8015470:	462a      	mov	r2, r5
 8015472:	4651      	mov	r1, sl
 8015474:	4638      	mov	r0, r7
 8015476:	f7fc fb8f 	bl	8011b98 <mbedtls_aes_crypt_ecb>
 801547a:	4683      	mov	fp, r0
 801547c:	bb20      	cbnz	r0, 80154c8 <ctr_drbg_update_internal+0x7e>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 801547e:	3610      	adds	r6, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8015480:	ab0c      	add	r3, sp, #48	; 0x30
 8015482:	429e      	cmp	r6, r3
 8015484:	d00b      	beq.n	801549e <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8015486:	f109 0210 	add.w	r2, r9, #16
            if( ++ctx->counter[i - 1] != 0 )
 801548a:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 801548e:	3301      	adds	r3, #1
 8015490:	b2db      	uxtb	r3, r3
 8015492:	7013      	strb	r3, [r2, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1e9      	bne.n	801546c <ctr_drbg_update_internal+0x22>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8015498:	42aa      	cmp	r2, r5
 801549a:	d1f6      	bne.n	801548a <ctr_drbg_update_internal+0x40>
 801549c:	e7e6      	b.n	801546c <ctr_drbg_update_internal+0x22>
 801549e:	f10d 33ff 	add.w	r3, sp, #4294967295
 80154a2:	3c01      	subs	r4, #1
 80154a4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 80154a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80154ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80154b0:	404a      	eors	r2, r1
 80154b2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80154b4:	4283      	cmp	r3, r0
 80154b6:	d1f7      	bne.n	80154a8 <ctr_drbg_update_internal+0x5e>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80154b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154bc:	4669      	mov	r1, sp
 80154be:	4638      	mov	r0, r7
 80154c0:	f7fb fe0a 	bl	80110d8 <mbedtls_aes_setkey_enc>
 80154c4:	4683      	mov	fp, r0
 80154c6:	b138      	cbz	r0, 80154d8 <ctr_drbg_update_internal+0x8e>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80154c8:	2130      	movs	r1, #48	; 0x30
 80154ca:	4668      	mov	r0, sp
 80154cc:	f005 fd3a 	bl	801af44 <mbedtls_platform_zeroize>
    return( ret );
}
 80154d0:	4658      	mov	r0, fp
 80154d2:	b00d      	add	sp, #52	; 0x34
 80154d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80154d8:	ac08      	add	r4, sp, #32
 80154da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154dc:	f8c8 0000 	str.w	r0, [r8]
 80154e0:	f8c8 1004 	str.w	r1, [r8, #4]
 80154e4:	f8c8 2008 	str.w	r2, [r8, #8]
 80154e8:	f8c8 300c 	str.w	r3, [r8, #12]
 80154ec:	e7ec      	b.n	80154c8 <ctr_drbg_update_internal+0x7e>

080154ee <mbedtls_ctr_drbg_init>:
{
 80154ee:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 80154f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80154f4:	2100      	movs	r1, #0
 80154f6:	f015 f848 	bl	802a58a <memset>
}
 80154fa:	bd08      	pop	{r3, pc}

080154fc <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 80154fc:	b150      	cbz	r0, 8015514 <mbedtls_ctr_drbg_free+0x18>
{
 80154fe:	b510      	push	{r4, lr}
 8015500:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 8015502:	3020      	adds	r0, #32
 8015504:	f7fb fdcc 	bl	80110a0 <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 8015508:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801550c:	4620      	mov	r0, r4
 801550e:	f005 fd19 	bl	801af44 <mbedtls_platform_zeroize>
}
 8015512:	bd10      	pop	{r4, pc}
 8015514:	4770      	bx	lr

08015516 <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 8015516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015518:	b0e1      	sub	sp, #388	; 0x184
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 801551a:	6987      	ldr	r7, [r0, #24]
 801551c:	f5b7 7fc0 	cmp.w	r7, #384	; 0x180
 8015520:	d838      	bhi.n	8015594 <mbedtls_ctr_drbg_reseed+0x7e>
 8015522:	4604      	mov	r4, r0
 8015524:	460e      	mov	r6, r1
 8015526:	4615      	mov	r5, r2
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 8015528:	f5c7 73c0 	rsb	r3, r7, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 801552c:	4293      	cmp	r3, r2
 801552e:	d334      	bcc.n	801559a <mbedtls_ctr_drbg_reseed+0x84>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 8015530:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8015534:	2100      	movs	r1, #0
 8015536:	4668      	mov	r0, sp
 8015538:	f015 f827 	bl	802a58a <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 801553c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8015540:	463a      	mov	r2, r7
 8015542:	4669      	mov	r1, sp
 8015544:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8015548:	4798      	blx	r3
 801554a:	bb48      	cbnz	r0, 80155a0 <mbedtls_ctr_drbg_reseed+0x8a>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 801554c:	69a7      	ldr	r7, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 801554e:	b106      	cbz	r6, 8015552 <mbedtls_ctr_drbg_reseed+0x3c>
 8015550:	b975      	cbnz	r5, 8015570 <mbedtls_ctr_drbg_reseed+0x5a>
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8015552:	463a      	mov	r2, r7
 8015554:	4669      	mov	r1, sp
 8015556:	4668      	mov	r0, sp
 8015558:	f7ff feac 	bl	80152b4 <block_cipher_df>
 801555c:	4605      	mov	r5, r0
 801555e:	b178      	cbz	r0, 8015580 <mbedtls_ctr_drbg_reseed+0x6a>
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
        goto exit;
    ctx->reseed_counter = 1;

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 8015560:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8015564:	4668      	mov	r0, sp
 8015566:	f005 fced 	bl	801af44 <mbedtls_platform_zeroize>
    return( ret );
}
 801556a:	4628      	mov	r0, r5
 801556c:	b061      	add	sp, #388	; 0x184
 801556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy( seed + seedlen, additional, len );
 8015570:	462a      	mov	r2, r5
 8015572:	4631      	mov	r1, r6
 8015574:	eb0d 0007 	add.w	r0, sp, r7
 8015578:	f014 ffdf 	bl	802a53a <memcpy>
        seedlen += len;
 801557c:	442f      	add	r7, r5
 801557e:	e7e8      	b.n	8015552 <mbedtls_ctr_drbg_reseed+0x3c>
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 8015580:	4669      	mov	r1, sp
 8015582:	4620      	mov	r0, r4
 8015584:	f7ff ff61 	bl	801544a <ctr_drbg_update_internal>
 8015588:	4605      	mov	r5, r0
 801558a:	2800      	cmp	r0, #0
 801558c:	d1e8      	bne.n	8015560 <mbedtls_ctr_drbg_reseed+0x4a>
    ctx->reseed_counter = 1;
 801558e:	2301      	movs	r3, #1
 8015590:	6123      	str	r3, [r4, #16]
 8015592:	e7e5      	b.n	8015560 <mbedtls_ctr_drbg_reseed+0x4a>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8015594:	f06f 0537 	mvn.w	r5, #55	; 0x37
 8015598:	e7e7      	b.n	801556a <mbedtls_ctr_drbg_reseed+0x54>
 801559a:	f06f 0537 	mvn.w	r5, #55	; 0x37
 801559e:	e7e4      	b.n	801556a <mbedtls_ctr_drbg_reseed+0x54>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 80155a0:	f06f 0533 	mvn.w	r5, #51	; 0x33
 80155a4:	e7e1      	b.n	801556a <mbedtls_ctr_drbg_reseed+0x54>

080155a6 <mbedtls_ctr_drbg_seed_entropy_len>:
{
 80155a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155aa:	b088      	sub	sp, #32
 80155ac:	4604      	mov	r4, r0
 80155ae:	460e      	mov	r6, r1
 80155b0:	4615      	mov	r5, r2
 80155b2:	461f      	mov	r7, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 80155b4:	2220      	movs	r2, #32
 80155b6:	2100      	movs	r1, #0
 80155b8:	4668      	mov	r0, sp
 80155ba:	f014 ffe6 	bl	802a58a <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 80155be:	f104 0820 	add.w	r8, r4, #32
 80155c2:	4640      	mov	r0, r8
 80155c4:	f7fb fd65 	bl	8011092 <mbedtls_aes_init>
    ctx->f_entropy = f_entropy;
 80155c8:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 80155cc:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    ctx->entropy_len = entropy_len;
 80155d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155d2:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 80155d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80155d8:	61e3      	str	r3, [r4, #28]
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80155da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80155de:	4669      	mov	r1, sp
 80155e0:	4640      	mov	r0, r8
 80155e2:	f7fb fd79 	bl	80110d8 <mbedtls_aes_setkey_enc>
 80155e6:	b110      	cbz	r0, 80155ee <mbedtls_ctr_drbg_seed_entropy_len+0x48>
}
 80155e8:	b008      	add	sp, #32
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80155ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155f0:	4639      	mov	r1, r7
 80155f2:	4620      	mov	r0, r4
 80155f4:	f7ff ff8f 	bl	8015516 <mbedtls_ctr_drbg_reseed>
 80155f8:	e7f6      	b.n	80155e8 <mbedtls_ctr_drbg_seed_entropy_len+0x42>

080155fa <mbedtls_ctr_drbg_seed>:
{
 80155fa:	b510      	push	{r4, lr}
 80155fc:	b082      	sub	sp, #8
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80155fe:	2420      	movs	r4, #32
 8015600:	9401      	str	r4, [sp, #4]
 8015602:	9c04      	ldr	r4, [sp, #16]
 8015604:	9400      	str	r4, [sp, #0]
 8015606:	f7ff ffce 	bl	80155a6 <mbedtls_ctr_drbg_seed_entropy_len>
}
 801560a:	b002      	add	sp, #8
 801560c:	bd10      	pop	{r4, pc}

0801560e <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 801560e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015612:	b091      	sub	sp, #68	; 0x44
 8015614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8015618:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801561c:	d862      	bhi.n	80156e4 <mbedtls_ctr_drbg_random_with_add+0xd6>
 801561e:	4607      	mov	r7, r0
 8015620:	460e      	mov	r6, r1
 8015622:	4615      	mov	r5, r2
 8015624:	461c      	mov	r4, r3
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8015626:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 801562a:	d85e      	bhi.n	80156ea <mbedtls_ctr_drbg_random_with_add+0xdc>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 801562c:	2230      	movs	r2, #48	; 0x30
 801562e:	2100      	movs	r1, #0
 8015630:	a804      	add	r0, sp, #16
 8015632:	f014 ffaa 	bl	802a58a <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8015636:	693a      	ldr	r2, [r7, #16]
 8015638:	69fb      	ldr	r3, [r7, #28]
 801563a:	429a      	cmp	r2, r3
 801563c:	dc01      	bgt.n	8015642 <mbedtls_ctr_drbg_random_with_add+0x34>
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	b15b      	cbz	r3, 801565a <mbedtls_ctr_drbg_random_with_add+0x4c>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8015642:	4642      	mov	r2, r8
 8015644:	4621      	mov	r1, r4
 8015646:	4638      	mov	r0, r7
 8015648:	f7ff ff65 	bl	8015516 <mbedtls_ctr_drbg_reseed>
 801564c:	2800      	cmp	r0, #0
 801564e:	d146      	bne.n	80156de <mbedtls_ctr_drbg_random_with_add+0xd0>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
            goto exit;
    }

    while( output_len > 0 )
 8015650:	b3a5      	cbz	r5, 80156bc <mbedtls_ctr_drbg_random_with_add+0xae>
 8015652:	463c      	mov	r4, r7
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 8015654:	f107 0820 	add.w	r8, r7, #32
 8015658:	e024      	b.n	80156a4 <mbedtls_ctr_drbg_random_with_add+0x96>
    if( add_len > 0 )
 801565a:	f1b8 0f00 	cmp.w	r8, #0
 801565e:	d0f7      	beq.n	8015650 <mbedtls_ctr_drbg_random_with_add+0x42>
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8015660:	4642      	mov	r2, r8
 8015662:	4621      	mov	r1, r4
 8015664:	a804      	add	r0, sp, #16
 8015666:	f7ff fe25 	bl	80152b4 <block_cipher_df>
 801566a:	bb78      	cbnz	r0, 80156cc <mbedtls_ctr_drbg_random_with_add+0xbe>
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 801566c:	a904      	add	r1, sp, #16
 801566e:	4638      	mov	r0, r7
 8015670:	f7ff feeb 	bl	801544a <ctr_drbg_update_internal>
 8015674:	2800      	cmp	r0, #0
 8015676:	d0eb      	beq.n	8015650 <mbedtls_ctr_drbg_random_with_add+0x42>
 8015678:	e028      	b.n	80156cc <mbedtls_ctr_drbg_random_with_add+0xbe>
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 801567a:	466b      	mov	r3, sp
 801567c:	4622      	mov	r2, r4
 801567e:	2101      	movs	r1, #1
 8015680:	4640      	mov	r0, r8
 8015682:	f7fc fa89 	bl	8011b98 <mbedtls_aes_crypt_ecb>
 8015686:	bb08      	cbnz	r0, 80156cc <mbedtls_ctr_drbg_random_with_add+0xbe>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 8015688:	46a9      	mov	r9, r5
 801568a:	2d10      	cmp	r5, #16
 801568c:	bf28      	it	cs
 801568e:	f04f 0910 	movcs.w	r9, #16
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 8015692:	464a      	mov	r2, r9
 8015694:	4669      	mov	r1, sp
 8015696:	4630      	mov	r0, r6
 8015698:	f014 ff4f 	bl	802a53a <memcpy>
        p += use_len;
 801569c:	444e      	add	r6, r9
    while( output_len > 0 )
 801569e:	ebb5 0509 	subs.w	r5, r5, r9
 80156a2:	d00b      	beq.n	80156bc <mbedtls_ctr_drbg_random_with_add+0xae>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80156a4:	f107 0210 	add.w	r2, r7, #16
            if( ++ctx->counter[i - 1] != 0 )
 80156a8:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80156ac:	3301      	adds	r3, #1
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	7013      	strb	r3, [r2, #0]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1e1      	bne.n	801567a <mbedtls_ctr_drbg_random_with_add+0x6c>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80156b6:	42a2      	cmp	r2, r4
 80156b8:	d1f6      	bne.n	80156a8 <mbedtls_ctr_drbg_random_with_add+0x9a>
 80156ba:	e7de      	b.n	801567a <mbedtls_ctr_drbg_random_with_add+0x6c>
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 80156bc:	a904      	add	r1, sp, #16
 80156be:	4638      	mov	r0, r7
 80156c0:	f7ff fec3 	bl	801544a <ctr_drbg_update_internal>
 80156c4:	b910      	cbnz	r0, 80156cc <mbedtls_ctr_drbg_random_with_add+0xbe>
        goto exit;

    ctx->reseed_counter++;
 80156c6:	693b      	ldr	r3, [r7, #16]
 80156c8:	3301      	adds	r3, #1
 80156ca:	613b      	str	r3, [r7, #16]

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 80156cc:	2130      	movs	r1, #48	; 0x30
 80156ce:	a804      	add	r0, sp, #16
 80156d0:	f005 fc38 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80156d4:	2110      	movs	r1, #16
 80156d6:	4668      	mov	r0, sp
 80156d8:	f005 fc34 	bl	801af44 <mbedtls_platform_zeroize>
    return( 0 );
 80156dc:	2000      	movs	r0, #0
}
 80156de:	b011      	add	sp, #68	; 0x44
 80156e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 80156e4:	f06f 0035 	mvn.w	r0, #53	; 0x35
 80156e8:	e7f9      	b.n	80156de <mbedtls_ctr_drbg_random_with_add+0xd0>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80156ea:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80156ee:	e7f6      	b.n	80156de <mbedtls_ctr_drbg_random_with_add+0xd0>

080156f0 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 80156f0:	b500      	push	{lr}
 80156f2:	b083      	sub	sp, #12
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 80156f4:	2300      	movs	r3, #0
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	f7ff ff89 	bl	801560e <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 80156fc:	b003      	add	sp, #12
 80156fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015704 <mbedtls_debug_set_threshold>:

static int debug_threshold = 0;

void mbedtls_debug_set_threshold( int threshold )
{
    debug_threshold = threshold;
 8015704:	4b01      	ldr	r3, [pc, #4]	; (801570c <mbedtls_debug_set_threshold+0x8>)
 8015706:	6018      	str	r0, [r3, #0]
}
 8015708:	4770      	bx	lr
 801570a:	bf00      	nop
 801570c:	2001089c 	.word	0x2001089c

08015710 <mbedtls_debug_print_msg>:
{
    va_list argp;
    char str[DEBUG_BUF_SIZE];
    int ret;

    if( NULL == ssl              ||
 8015710:	b360      	cbz	r0, 801576c <mbedtls_debug_print_msg+0x5c>
{
 8015712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015714:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8015718:	460f      	mov	r7, r1
 801571a:	4616      	mov	r6, r2
 801571c:	461c      	mov	r4, r3
 801571e:	4605      	mov	r5, r0
        NULL == ssl->conf        ||
 8015720:	6800      	ldr	r0, [r0, #0]
    if( NULL == ssl              ||
 8015722:	b128      	cbz	r0, 8015730 <mbedtls_debug_print_msg+0x20>
        NULL == ssl->conf        ||
 8015724:	6903      	ldr	r3, [r0, #16]
 8015726:	b11b      	cbz	r3, 8015730 <mbedtls_debug_print_msg+0x20>
        NULL == ssl->conf->f_dbg ||
        level > debug_threshold )
 8015728:	4b11      	ldr	r3, [pc, #68]	; (8015770 <mbedtls_debug_print_msg+0x60>)
        NULL == ssl->conf->f_dbg ||
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	428b      	cmp	r3, r1
 801572e:	da02      	bge.n	8015736 <mbedtls_debug_print_msg+0x26>
        str[ret]     = '\n';
        str[ret + 1] = '\0';
    }

    debug_send_line( ssl, level, file, line, str );
}
 8015730:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8015734:	bdf0      	pop	{r4, r5, r6, r7, pc}
    va_start( argp, format );
 8015736:	ab8b      	add	r3, sp, #556	; 0x22c
 8015738:	9383      	str	r3, [sp, #524]	; 0x20c
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 801573a:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 801573c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015740:	a803      	add	r0, sp, #12
 8015742:	f015 fd63 	bl	802b20c <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8015746:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 801574a:	d805      	bhi.n	8015758 <mbedtls_debug_print_msg+0x48>
        str[ret]     = '\n';
 801574c:	ab03      	add	r3, sp, #12
 801574e:	220a      	movs	r2, #10
 8015750:	541a      	strb	r2, [r3, r0]
        str[ret + 1] = '\0';
 8015752:	4418      	add	r0, r3
 8015754:	2300      	movs	r3, #0
 8015756:	7043      	strb	r3, [r0, #1]
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015758:	682b      	ldr	r3, [r5, #0]
 801575a:	6958      	ldr	r0, [r3, #20]
 801575c:	aa03      	add	r2, sp, #12
 801575e:	9200      	str	r2, [sp, #0]
 8015760:	691d      	ldr	r5, [r3, #16]
 8015762:	4623      	mov	r3, r4
 8015764:	4632      	mov	r2, r6
 8015766:	4639      	mov	r1, r7
 8015768:	47a8      	blx	r5
 801576a:	e7e1      	b.n	8015730 <mbedtls_debug_print_msg+0x20>
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	2001089c 	.word	0x2001089c

08015774 <mbedtls_debug_print_ret>:
                      const char *file, int line,
                      const char *text, int ret )
{
    char str[DEBUG_BUF_SIZE];

    if( NULL == ssl              ||
 8015774:	b368      	cbz	r0, 80157d2 <mbedtls_debug_print_ret+0x5e>
{
 8015776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801577a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 801577e:	460f      	mov	r7, r1
 8015780:	4616      	mov	r6, r2
 8015782:	461c      	mov	r4, r3
 8015784:	4605      	mov	r5, r0
        NULL == ssl->conf        ||
 8015786:	6800      	ldr	r0, [r0, #0]
    if( NULL == ssl              ||
 8015788:	b1f8      	cbz	r0, 80157ca <mbedtls_debug_print_ret+0x56>
        NULL == ssl->conf        ||
 801578a:	6903      	ldr	r3, [r0, #16]
 801578c:	b1eb      	cbz	r3, 80157ca <mbedtls_debug_print_ret+0x56>
        NULL == ssl->conf->f_dbg ||
        level > debug_threshold )
 801578e:	4b11      	ldr	r3, [pc, #68]	; (80157d4 <mbedtls_debug_print_ret+0x60>)
        NULL == ssl->conf->f_dbg ||
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	428b      	cmp	r3, r1
 8015794:	db19      	blt.n	80157ca <mbedtls_debug_print_ret+0x56>
    /*
     * With non-blocking I/O and examples that just retry immediately,
     * the logs would be quickly flooded with WANT_READ, so ignore that.
     * Don't ignore WANT_WRITE however, since is is usually rare.
     */
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 8015796:	9b89      	ldr	r3, [sp, #548]	; 0x224
 8015798:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 801579c:	d015      	beq.n	80157ca <mbedtls_debug_print_ret+0x56>
        return;

    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 801579e:	f10d 0808 	add.w	r8, sp, #8
 80157a2:	425b      	negs	r3, r3
 80157a4:	9301      	str	r3, [sp, #4]
 80157a6:	9b89      	ldr	r3, [sp, #548]	; 0x224
 80157a8:	9300      	str	r3, [sp, #0]
 80157aa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80157ac:	4a0a      	ldr	r2, [pc, #40]	; (80157d8 <mbedtls_debug_print_ret+0x64>)
 80157ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80157b2:	4640      	mov	r0, r8
 80157b4:	f015 fb96 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80157b8:	682b      	ldr	r3, [r5, #0]
 80157ba:	6958      	ldr	r0, [r3, #20]
 80157bc:	f8cd 8000 	str.w	r8, [sp]
 80157c0:	691d      	ldr	r5, [r3, #16]
 80157c2:	4623      	mov	r3, r4
 80157c4:	4632      	mov	r2, r6
 80157c6:	4639      	mov	r1, r7
 80157c8:	47a8      	blx	r5
              text, ret, -ret );

    debug_send_line( ssl, level, file, line, str );
}
 80157ca:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80157ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d2:	4770      	bx	lr
 80157d4:	2001089c 	.word	0x2001089c
 80157d8:	08031b08 	.word	0x08031b08

080157dc <mbedtls_debug_print_buf>:

void mbedtls_debug_print_buf( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line, const char *text,
                      const unsigned char *buf, size_t len )
{
 80157dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e0:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80157e4:	9103      	str	r1, [sp, #12]
 80157e6:	9204      	str	r2, [sp, #16]
 80157e8:	9305      	str	r3, [sp, #20]
 80157ea:	f8dd a260 	ldr.w	sl, [sp, #608]	; 0x260
    char str[DEBUG_BUF_SIZE];
    char txt[17];
    size_t i, idx = 0;

    if( NULL == ssl              ||
 80157ee:	b158      	cbz	r0, 8015808 <mbedtls_debug_print_buf+0x2c>
 80157f0:	460d      	mov	r5, r1
 80157f2:	4617      	mov	r7, r2
 80157f4:	461e      	mov	r6, r3
 80157f6:	4683      	mov	fp, r0
        NULL == ssl->conf        ||
 80157f8:	6803      	ldr	r3, [r0, #0]
    if( NULL == ssl              ||
 80157fa:	b12b      	cbz	r3, 8015808 <mbedtls_debug_print_buf+0x2c>
        NULL == ssl->conf        ||
 80157fc:	691b      	ldr	r3, [r3, #16]
 80157fe:	b11b      	cbz	r3, 8015808 <mbedtls_debug_print_buf+0x2c>
        NULL == ssl->conf->f_dbg ||
        level > debug_threshold )
 8015800:	4b47      	ldr	r3, [pc, #284]	; (8015920 <mbedtls_debug_print_buf+0x144>)
        NULL == ssl->conf->f_dbg ||
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	428b      	cmp	r3, r1
 8015806:	da03      	bge.n	8015810 <mbedtls_debug_print_buf+0x34>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );

        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
        debug_send_line( ssl, level, file, line, str );
    }
}
 8015808:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 801580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 8015810:	ac0c      	add	r4, sp, #48	; 0x30
 8015812:	f8cd a000 	str.w	sl, [sp]
 8015816:	9b96      	ldr	r3, [sp, #600]	; 0x258
 8015818:	4a42      	ldr	r2, [pc, #264]	; (8015924 <mbedtls_debug_print_buf+0x148>)
 801581a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801581e:	4620      	mov	r0, r4
 8015820:	f015 fb60 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015824:	f8db 3000 	ldr.w	r3, [fp]
 8015828:	6958      	ldr	r0, [r3, #20]
 801582a:	9400      	str	r4, [sp, #0]
 801582c:	691c      	ldr	r4, [r3, #16]
 801582e:	4633      	mov	r3, r6
 8015830:	463a      	mov	r2, r7
 8015832:	4629      	mov	r1, r5
 8015834:	47a0      	blx	r4
    memset( txt, 0, sizeof( txt ) );
 8015836:	2300      	movs	r3, #0
 8015838:	9307      	str	r3, [sp, #28]
 801583a:	9308      	str	r3, [sp, #32]
 801583c:	9309      	str	r3, [sp, #36]	; 0x24
 801583e:	930a      	str	r3, [sp, #40]	; 0x28
 8015840:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    for( i = 0; i < len; i++ )
 8015844:	f1ba 0f00 	cmp.w	sl, #0
 8015848:	d0de      	beq.n	8015808 <mbedtls_debug_print_buf+0x2c>
 801584a:	9e97      	ldr	r6, [sp, #604]	; 0x25c
 801584c:	3e01      	subs	r6, #1
    idx = 0;
 801584e:	461c      	mov	r4, r3
    for( i = 0; i < len; i++ )
 8015850:	461d      	mov	r5, r3
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8015852:	f10d 0930 	add.w	r9, sp, #48	; 0x30
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8015856:	af07      	add	r7, sp, #28
 8015858:	e03a      	b.n	80158d0 <mbedtls_debug_print_buf+0xf4>
 801585a:	463b      	mov	r3, r7
 801585c:	4a32      	ldr	r2, [pc, #200]	; (8015928 <mbedtls_debug_print_buf+0x14c>)
 801585e:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8015862:	eb09 0004 	add.w	r0, r9, r4
 8015866:	f015 fb3d 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 801586a:	f8db 3000 	ldr.w	r3, [fp]
 801586e:	6958      	ldr	r0, [r3, #20]
 8015870:	f8cd 9000 	str.w	r9, [sp]
 8015874:	691c      	ldr	r4, [r3, #16]
 8015876:	9b05      	ldr	r3, [sp, #20]
 8015878:	9a04      	ldr	r2, [sp, #16]
 801587a:	9903      	ldr	r1, [sp, #12]
 801587c:	47a0      	blx	r4
                memset( txt, 0, sizeof( txt ) );
 801587e:	2300      	movs	r3, #0
 8015880:	603b      	str	r3, [r7, #0]
 8015882:	607b      	str	r3, [r7, #4]
 8015884:	60bb      	str	r3, [r7, #8]
 8015886:	60fb      	str	r3, [r7, #12]
 8015888:	743b      	strb	r3, [r7, #16]
                idx = 0;
 801588a:	4644      	mov	r4, r8
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 801588c:	462b      	mov	r3, r5
 801588e:	4a27      	ldr	r2, [pc, #156]	; (801592c <mbedtls_debug_print_buf+0x150>)
 8015890:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8015894:	eb09 0004 	add.w	r0, r9, r4
 8015898:	f015 fb24 	bl	802aee4 <sniprintf>
 801589c:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 801589e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 80158a2:	4a23      	ldr	r2, [pc, #140]	; (8015930 <mbedtls_debug_print_buf+0x154>)
 80158a4:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80158a8:	eb09 0004 	add.w	r0, r9, r4
 80158ac:	f015 fb1a 	bl	802aee4 <sniprintf>
 80158b0:	4404      	add	r4, r0
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 80158b2:	7833      	ldrb	r3, [r6, #0]
 80158b4:	f1a3 0220 	sub.w	r2, r3, #32
 80158b8:	b2d2      	uxtb	r2, r2
 80158ba:	2a5f      	cmp	r2, #95	; 0x5f
 80158bc:	bf28      	it	cs
 80158be:	232e      	movcs	r3, #46	; 0x2e
 80158c0:	f807 3008 	strb.w	r3, [r7, r8]
    for( i = 0; i < len; i++ )
 80158c4:	3501      	adds	r5, #1
 80158c6:	45aa      	cmp	sl, r5
 80158c8:	d008      	beq.n	80158dc <mbedtls_debug_print_buf+0x100>
        if( i >= 4096 )
 80158ca:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80158ce:	d015      	beq.n	80158fc <mbedtls_debug_print_buf+0x120>
        if( i % 16 == 0 )
 80158d0:	f015 080f 	ands.w	r8, r5, #15
 80158d4:	d1e3      	bne.n	801589e <mbedtls_debug_print_buf+0xc2>
            if( i > 0 )
 80158d6:	2d00      	cmp	r5, #0
 80158d8:	d0d8      	beq.n	801588c <mbedtls_debug_print_buf+0xb0>
 80158da:	e7be      	b.n	801585a <mbedtls_debug_print_buf+0x7e>
        for( /* i = i */; i % 16 != 0; i++ )
 80158dc:	f015 0f0f 	tst.w	r5, #15
 80158e0:	d00c      	beq.n	80158fc <mbedtls_debug_print_buf+0x120>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80158e2:	4e14      	ldr	r6, [pc, #80]	; (8015934 <mbedtls_debug_print_buf+0x158>)
 80158e4:	4632      	mov	r2, r6
 80158e6:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80158ea:	ab0c      	add	r3, sp, #48	; 0x30
 80158ec:	1918      	adds	r0, r3, r4
 80158ee:	f015 faf9 	bl	802aee4 <sniprintf>
 80158f2:	4404      	add	r4, r0
        for( /* i = i */; i % 16 != 0; i++ )
 80158f4:	3501      	adds	r5, #1
 80158f6:	f015 0f0f 	tst.w	r5, #15
 80158fa:	d1f3      	bne.n	80158e4 <mbedtls_debug_print_buf+0x108>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 80158fc:	ad0c      	add	r5, sp, #48	; 0x30
 80158fe:	ab07      	add	r3, sp, #28
 8015900:	4a09      	ldr	r2, [pc, #36]	; (8015928 <mbedtls_debug_print_buf+0x14c>)
 8015902:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8015906:	1928      	adds	r0, r5, r4
 8015908:	f015 faec 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 801590c:	f8db 3000 	ldr.w	r3, [fp]
 8015910:	6958      	ldr	r0, [r3, #20]
 8015912:	9500      	str	r5, [sp, #0]
 8015914:	691c      	ldr	r4, [r3, #16]
 8015916:	9b05      	ldr	r3, [sp, #20]
 8015918:	9a04      	ldr	r2, [sp, #16]
 801591a:	9903      	ldr	r1, [sp, #12]
 801591c:	47a0      	blx	r4
}
 801591e:	e773      	b.n	8015808 <mbedtls_debug_print_buf+0x2c>
 8015920:	2001089c 	.word	0x2001089c
 8015924:	08031b24 	.word	0x08031b24
 8015928:	08031b40 	.word	0x08031b40
 801592c:	08031b48 	.word	0x08031b48
 8015930:	08031b50 	.word	0x08031b50
 8015934:	08031b58 	.word	0x08031b58

08015938 <mbedtls_debug_print_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_mpi *X )
{
 8015938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801593c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8015940:	9103      	str	r1, [sp, #12]
 8015942:	9204      	str	r2, [sp, #16]
 8015944:	9305      	str	r3, [sp, #20]
 8015946:	f8dd 8244 	ldr.w	r8, [sp, #580]	; 0x244
    char str[DEBUG_BUF_SIZE];
    int j, k, zeros = 1;
    size_t i, n, idx = 0;

    if( NULL == ssl              ||
 801594a:	9002      	str	r0, [sp, #8]
 801594c:	2800      	cmp	r0, #0
 801594e:	f000 80a3 	beq.w	8015a98 <mbedtls_debug_print_mpi+0x160>
        NULL == ssl->conf        ||
 8015952:	6803      	ldr	r3, [r0, #0]
    if( NULL == ssl              ||
 8015954:	2b00      	cmp	r3, #0
 8015956:	f000 809f 	beq.w	8015a98 <mbedtls_debug_print_mpi+0x160>
        NULL == ssl->conf        ||
 801595a:	691b      	ldr	r3, [r3, #16]
 801595c:	2b00      	cmp	r3, #0
 801595e:	f000 809b 	beq.w	8015a98 <mbedtls_debug_print_mpi+0x160>
        NULL == ssl->conf->f_dbg ||
 8015962:	f1b8 0f00 	cmp.w	r8, #0
 8015966:	f000 8097 	beq.w	8015a98 <mbedtls_debug_print_mpi+0x160>
        NULL == X                ||
        level > debug_threshold )
 801596a:	4b52      	ldr	r3, [pc, #328]	; (8015ab4 <mbedtls_debug_print_mpi+0x17c>)
        NULL == X                ||
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	428b      	cmp	r3, r1
 8015970:	f2c0 8092 	blt.w	8015a98 <mbedtls_debug_print_mpi+0x160>
    {
        return;
    }

    for( n = X->n - 1; n > 0; n-- )
 8015974:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8015978:	1e57      	subs	r7, r2, #1
 801597a:	d008      	beq.n	801598e <mbedtls_debug_print_mpi+0x56>
 801597c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015980:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        if( X->p[n] != 0 )
 8015984:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015988:	b90a      	cbnz	r2, 801598e <mbedtls_debug_print_mpi+0x56>
    for( n = X->n - 1; n > 0; n-- )
 801598a:	3f01      	subs	r7, #1
 801598c:	d1fa      	bne.n	8015984 <mbedtls_debug_print_mpi+0x4c>
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 801598e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015992:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8015996:	2900      	cmp	r1, #0
 8015998:	db27      	blt.n	80159ea <mbedtls_debug_print_mpi+0xb2>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 801599a:	231e      	movs	r3, #30
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 801599c:	fa21 f203 	lsr.w	r2, r1, r3
 80159a0:	f012 0f01 	tst.w	r2, #1
 80159a4:	d103      	bne.n	80159ae <mbedtls_debug_print_mpi+0x76>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 80159a6:	3b01      	subs	r3, #1
 80159a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ac:	d1f6      	bne.n	801599c <mbedtls_debug_print_mpi+0x64>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80159ae:	ac06      	add	r4, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 80159b0:	eb03 1347 	add.w	r3, r3, r7, lsl #5
 80159b4:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80159ba:	4a3f      	ldr	r2, [pc, #252]	; (8015ab8 <mbedtls_debug_print_mpi+0x180>)
 80159bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80159c0:	4620      	mov	r0, r4
 80159c2:	f015 fa8f 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 80159c6:	9b02      	ldr	r3, [sp, #8]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	6958      	ldr	r0, [r3, #20]
 80159cc:	9400      	str	r4, [sp, #0]
 80159ce:	691c      	ldr	r4, [r3, #16]
 80159d0:	9b05      	ldr	r3, [sp, #20]
 80159d2:	9a04      	ldr	r2, [sp, #16]
 80159d4:	9903      	ldr	r1, [sp, #12]
 80159d6:	47a0      	blx	r4

    debug_send_line( ssl, level, file, line, str );

    idx = 0;
    for( i = n + 1, j = 0; i > 0; i-- )
 80159d8:	f1b7 3fff 	cmp.w	r7, #4294967295
 80159dc:	d060      	beq.n	8015aa0 <mbedtls_debug_print_mpi+0x168>
    idx = 0;
 80159de:	2500      	movs	r5, #0
    int j, k, zeros = 1;
 80159e0:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 80159e2:	462e      	mov	r6, r5
                    debug_send_line( ssl, level, file, line, str );
                    idx = 0;
                }
            }

            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80159e4:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8015ac4 <mbedtls_debug_print_mpi+0x18c>
 80159e8:	e03a      	b.n	8015a60 <mbedtls_debug_print_mpi+0x128>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 80159ea:	231f      	movs	r3, #31
 80159ec:	e7df      	b.n	80159ae <mbedtls_debug_print_mpi+0x76>
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 80159ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80159f2:	f853 3009 	ldr.w	r3, [r3, r9]
 80159f6:	40e3      	lsrs	r3, r4
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 80159f8:	b2db      	uxtb	r3, r3
 80159fa:	465a      	mov	r2, fp
 80159fc:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
 8015a00:	a806      	add	r0, sp, #24
 8015a02:	4428      	add	r0, r5
 8015a04:	f015 fa6e 	bl	802aee4 <sniprintf>
 8015a08:	4405      	add	r5, r0

            j++;
 8015a0a:	3601      	adds	r6, #1
                zeros = 0;
 8015a0c:	2300      	movs	r3, #0
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8015a0e:	3c08      	subs	r4, #8
 8015a10:	f114 0f08 	cmn.w	r4, #8
 8015a14:	d020      	beq.n	8015a58 <mbedtls_debug_print_mpi+0x120>
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 8015a16:	b13b      	cbz	r3, 8015a28 <mbedtls_debug_print_mpi+0xf0>
 8015a18:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015a1c:	f852 2009 	ldr.w	r2, [r2, r9]
 8015a20:	40e2      	lsrs	r2, r4
 8015a22:	f012 0fff 	tst.w	r2, #255	; 0xff
 8015a26:	d0f2      	beq.n	8015a0e <mbedtls_debug_print_mpi+0xd6>
            if( j % 16 == 0 )
 8015a28:	f016 0a0f 	ands.w	sl, r6, #15
 8015a2c:	d1df      	bne.n	80159ee <mbedtls_debug_print_mpi+0xb6>
                if( j > 0 )
 8015a2e:	2e00      	cmp	r6, #0
 8015a30:	dddd      	ble.n	80159ee <mbedtls_debug_print_mpi+0xb6>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8015a32:	4a22      	ldr	r2, [pc, #136]	; (8015abc <mbedtls_debug_print_mpi+0x184>)
 8015a34:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
 8015a38:	ab06      	add	r3, sp, #24
 8015a3a:	1958      	adds	r0, r3, r5
 8015a3c:	f015 fa52 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015a40:	9b02      	ldr	r3, [sp, #8]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	6958      	ldr	r0, [r3, #20]
 8015a46:	aa06      	add	r2, sp, #24
 8015a48:	9200      	str	r2, [sp, #0]
 8015a4a:	691d      	ldr	r5, [r3, #16]
 8015a4c:	9b05      	ldr	r3, [sp, #20]
 8015a4e:	9a04      	ldr	r2, [sp, #16]
 8015a50:	9903      	ldr	r1, [sp, #12]
 8015a52:	47a8      	blx	r5
                    idx = 0;
 8015a54:	4655      	mov	r5, sl
 8015a56:	e7ca      	b.n	80159ee <mbedtls_debug_print_mpi+0xb6>
    for( i = n + 1, j = 0; i > 0; i-- )
 8015a58:	3f01      	subs	r7, #1
 8015a5a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015a5e:	d00a      	beq.n	8015a76 <mbedtls_debug_print_mpi+0x13e>
        if( zeros && X->p[i - 1] == 0 )
 8015a60:	b12b      	cbz	r3, 8015a6e <mbedtls_debug_print_mpi+0x136>
 8015a62:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015a66:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8015a6a:	2a00      	cmp	r2, #0
 8015a6c:	d0f4      	beq.n	8015a58 <mbedtls_debug_print_mpi+0x120>
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8015a6e:	ea4f 0987 	mov.w	r9, r7, lsl #2
    for( i = n + 1, j = 0; i > 0; i-- )
 8015a72:	2418      	movs	r4, #24
 8015a74:	e7cf      	b.n	8015a16 <mbedtls_debug_print_mpi+0xde>
        }

    }

    if( zeros == 1 )
 8015a76:	b9a3      	cbnz	r3, 8015aa2 <mbedtls_debug_print_mpi+0x16a>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8015a78:	ac06      	add	r4, sp, #24
 8015a7a:	4a10      	ldr	r2, [pc, #64]	; (8015abc <mbedtls_debug_print_mpi+0x184>)
 8015a7c:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
 8015a80:	1960      	adds	r0, r4, r5
 8015a82:	f015 fa2f 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015a86:	9b02      	ldr	r3, [sp, #8]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	6958      	ldr	r0, [r3, #20]
 8015a8c:	9400      	str	r4, [sp, #0]
 8015a8e:	691c      	ldr	r4, [r3, #16]
 8015a90:	9b05      	ldr	r3, [sp, #20]
 8015a92:	9a04      	ldr	r2, [sp, #16]
 8015a94:	9903      	ldr	r1, [sp, #12]
 8015a96:	47a0      	blx	r4
    debug_send_line( ssl, level, file, line, str );
}
 8015a98:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8015a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    idx = 0;
 8015aa0:	2500      	movs	r5, #0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 8015aa2:	4a07      	ldr	r2, [pc, #28]	; (8015ac0 <mbedtls_debug_print_mpi+0x188>)
 8015aa4:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
 8015aa8:	ab06      	add	r3, sp, #24
 8015aaa:	1958      	adds	r0, r3, r5
 8015aac:	f015 fa1a 	bl	802aee4 <sniprintf>
 8015ab0:	4405      	add	r5, r0
 8015ab2:	e7e1      	b.n	8015a78 <mbedtls_debug_print_mpi+0x140>
 8015ab4:	2001089c 	.word	0x2001089c
 8015ab8:	08031b5c 	.word	0x08031b5c
 8015abc:	080322d4 	.word	0x080322d4
 8015ac0:	08031b7c 	.word	0x08031b7c
 8015ac4:	08031b50 	.word	0x08031b50

08015ac8 <mbedtls_debug_print_ecp>:
    if( NULL == ssl              ||
 8015ac8:	2800      	cmp	r0, #0
 8015aca:	d036      	beq.n	8015b3a <mbedtls_debug_print_ecp+0x72>
{
 8015acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ace:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8015ad2:	460c      	mov	r4, r1
 8015ad4:	4617      	mov	r7, r2
 8015ad6:	461e      	mov	r6, r3
 8015ad8:	4605      	mov	r5, r0
        NULL == ssl->conf        ||
 8015ada:	6801      	ldr	r1, [r0, #0]
    if( NULL == ssl              ||
 8015adc:	b129      	cbz	r1, 8015aea <mbedtls_debug_print_ecp+0x22>
        NULL == ssl->conf        ||
 8015ade:	690b      	ldr	r3, [r1, #16]
 8015ae0:	b11b      	cbz	r3, 8015aea <mbedtls_debug_print_ecp+0x22>
        level > debug_threshold )
 8015ae2:	4b16      	ldr	r3, [pc, #88]	; (8015b3c <mbedtls_debug_print_ecp+0x74>)
        NULL == ssl->conf->f_dbg ||
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	42a3      	cmp	r3, r4
 8015ae8:	da02      	bge.n	8015af0 <mbedtls_debug_print_ecp+0x28>
}
 8015aea:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8015aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8015af0:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8015af2:	4a13      	ldr	r2, [pc, #76]	; (8015b40 <mbedtls_debug_print_ecp+0x78>)
 8015af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015af8:	a802      	add	r0, sp, #8
 8015afa:	f015 f9f3 	bl	802aee4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );
 8015afe:	9b89      	ldr	r3, [sp, #548]	; 0x224
 8015b00:	9301      	str	r3, [sp, #4]
 8015b02:	ab02      	add	r3, sp, #8
 8015b04:	9300      	str	r3, [sp, #0]
 8015b06:	4633      	mov	r3, r6
 8015b08:	463a      	mov	r2, r7
 8015b0a:	4621      	mov	r1, r4
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	f7ff ff13 	bl	8015938 <mbedtls_debug_print_mpi>
    mbedtls_snprintf( str, sizeof( str ), "%s(Y)", text );
 8015b12:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8015b14:	4a0b      	ldr	r2, [pc, #44]	; (8015b44 <mbedtls_debug_print_ecp+0x7c>)
 8015b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015b1a:	a802      	add	r0, sp, #8
 8015b1c:	f015 f9e2 	bl	802aee4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 8015b20:	9b89      	ldr	r3, [sp, #548]	; 0x224
 8015b22:	f103 010c 	add.w	r1, r3, #12
 8015b26:	9101      	str	r1, [sp, #4]
 8015b28:	ab02      	add	r3, sp, #8
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	4633      	mov	r3, r6
 8015b2e:	463a      	mov	r2, r7
 8015b30:	4621      	mov	r1, r4
 8015b32:	4628      	mov	r0, r5
 8015b34:	f7ff ff00 	bl	8015938 <mbedtls_debug_print_mpi>
 8015b38:	e7d7      	b.n	8015aea <mbedtls_debug_print_ecp+0x22>
 8015b3a:	4770      	bx	lr
 8015b3c:	2001089c 	.word	0x2001089c
 8015b40:	08031b80 	.word	0x08031b80
 8015b44:	08031b88 	.word	0x08031b88

08015b48 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 8015b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b4c:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
 8015b50:	f8dd 584c 	ldr.w	r5, [sp, #2124]	; 0x84c
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( NULL == ssl              ||
 8015b54:	2800      	cmp	r0, #0
 8015b56:	f000 80b3 	beq.w	8015cc0 <mbedtls_debug_print_crt+0x178>
 8015b5a:	4692      	mov	sl, r2
 8015b5c:	4699      	mov	r9, r3
        NULL == ssl->conf        ||
 8015b5e:	6803      	ldr	r3, [r0, #0]
    if( NULL == ssl              ||
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	f000 80ad 	beq.w	8015cc0 <mbedtls_debug_print_crt+0x178>
        NULL == ssl->conf        ||
 8015b66:	691b      	ldr	r3, [r3, #16]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	f000 80a9 	beq.w	8015cc0 <mbedtls_debug_print_crt+0x178>
        NULL == ssl->conf->f_dbg ||
 8015b6e:	2d00      	cmp	r5, #0
 8015b70:	f000 80a6 	beq.w	8015cc0 <mbedtls_debug_print_crt+0x178>
        NULL == crt              ||
        level > debug_threshold )
 8015b74:	4b54      	ldr	r3, [pc, #336]	; (8015cc8 <mbedtls_debug_print_crt+0x180>)
        NULL == crt              ||
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	428b      	cmp	r3, r1
 8015b7a:	f2c0 80a1 	blt.w	8015cc0 <mbedtls_debug_print_crt+0x178>
    int i = 0;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	9303      	str	r3, [sp, #12]
            memcpy( str, start, len );
 8015b82:	f10d 0b20 	add.w	fp, sp, #32
 8015b86:	465b      	mov	r3, fp
 8015b88:	468b      	mov	fp, r1
 8015b8a:	4680      	mov	r8, r0
 8015b8c:	461e      	mov	r6, r3
 8015b8e:	e039      	b.n	8015c04 <mbedtls_debug_print_crt+0xbc>
            size_t len = cur - start + 1;
 8015b90:	1a7c      	subs	r4, r7, r1
 8015b92:	3401      	adds	r4, #1
            if( len > DEBUG_BUF_SIZE - 1 )
 8015b94:	f240 13ff 	movw	r3, #511	; 0x1ff
 8015b98:	429c      	cmp	r4, r3
 8015b9a:	bf28      	it	cs
 8015b9c:	461c      	movcs	r4, r3
            memcpy( str, start, len );
 8015b9e:	4622      	mov	r2, r4
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f014 fcca 	bl	802a53a <memcpy>
            str[len] = '\0';
 8015ba6:	ab08      	add	r3, sp, #32
 8015ba8:	f04f 0200 	mov.w	r2, #0
 8015bac:	551a      	strb	r2, [r3, r4]
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015bae:	f8d8 3000 	ldr.w	r3, [r8]
 8015bb2:	6958      	ldr	r0, [r3, #20]
 8015bb4:	9600      	str	r6, [sp, #0]
 8015bb6:	691c      	ldr	r4, [r3, #16]
 8015bb8:	464b      	mov	r3, r9
 8015bba:	4652      	mov	r2, sl
 8015bbc:	4659      	mov	r1, fp
 8015bbe:	47a0      	blx	r4
            start = cur + 1;
 8015bc0:	1c79      	adds	r1, r7, #1
    for( cur = text; *cur != '\0'; cur++ )
 8015bc2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8015bc6:	b113      	cbz	r3, 8015bce <mbedtls_debug_print_crt+0x86>
        if( *cur == '\n' )
 8015bc8:	2b0a      	cmp	r3, #10
 8015bca:	d1fa      	bne.n	8015bc2 <mbedtls_debug_print_crt+0x7a>
 8015bcc:	e7e0      	b.n	8015b90 <mbedtls_debug_print_crt+0x48>
    memset( items, 0, sizeof( items ) );
 8015bce:	2224      	movs	r2, #36	; 0x24
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	f014 fcd9 	bl	802a58a <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8015bd8:	4631      	mov	r1, r6
 8015bda:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
 8015bde:	f004 fba1 	bl	801a324 <mbedtls_pk_debug>
 8015be2:	b908      	cbnz	r0, 8015be8 <mbedtls_debug_print_crt+0xa0>
 8015be4:	ac08      	add	r4, sp, #32
 8015be6:	e04b      	b.n	8015c80 <mbedtls_debug_print_crt+0x138>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015be8:	f8d8 3000 	ldr.w	r3, [r8]
 8015bec:	6958      	ldr	r0, [r3, #20]
 8015bee:	4a37      	ldr	r2, [pc, #220]	; (8015ccc <mbedtls_debug_print_crt+0x184>)
 8015bf0:	9200      	str	r2, [sp, #0]
 8015bf2:	691c      	ldr	r4, [r3, #16]
 8015bf4:	464b      	mov	r3, r9
 8015bf6:	4652      	mov	r2, sl
 8015bf8:	4659      	mov	r1, fp
 8015bfa:	47a0      	blx	r4
        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8015bfc:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
    while( crt != NULL )
 8015c00:	2d00      	cmp	r5, #0
 8015c02:	d05d      	beq.n	8015cc0 <mbedtls_debug_print_crt+0x178>
        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8015c04:	9b03      	ldr	r3, [sp, #12]
 8015c06:	3301      	adds	r3, #1
 8015c08:	9303      	str	r3, [sp, #12]
 8015c0a:	f50d 64c4 	add.w	r4, sp, #1568	; 0x620
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8015c14:	4a2e      	ldr	r2, [pc, #184]	; (8015cd0 <mbedtls_debug_print_crt+0x188>)
 8015c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f015 f962 	bl	802aee4 <sniprintf>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015c20:	f8d8 3000 	ldr.w	r3, [r8]
 8015c24:	6958      	ldr	r0, [r3, #20]
 8015c26:	9400      	str	r4, [sp, #0]
 8015c28:	691c      	ldr	r4, [r3, #16]
 8015c2a:	464b      	mov	r3, r9
 8015c2c:	4652      	mov	r2, sl
 8015c2e:	4659      	mov	r1, fp
 8015c30:	47a0      	blx	r4
        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 8015c32:	462b      	mov	r3, r5
 8015c34:	4a27      	ldr	r2, [pc, #156]	; (8015cd4 <mbedtls_debug_print_crt+0x18c>)
 8015c36:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8015c3a:	a888      	add	r0, sp, #544	; 0x220
 8015c3c:	f011 fdc2 	bl	80277c4 <mbedtls_x509_crt_info>
    for( cur = text; *cur != '\0'; cur++ )
 8015c40:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d0c2      	beq.n	8015bce <mbedtls_debug_print_crt+0x86>
    start = text;
 8015c48:	a988      	add	r1, sp, #544	; 0x220
    for( cur = text; *cur != '\0'; cur++ )
 8015c4a:	460f      	mov	r7, r1
 8015c4c:	e7bc      	b.n	8015bc8 <mbedtls_debug_print_crt+0x80>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8015c4e:	68a3      	ldr	r3, [r4, #8]
 8015c50:	9301      	str	r3, [sp, #4]
 8015c52:	ab04      	add	r3, sp, #16
 8015c54:	9300      	str	r3, [sp, #0]
 8015c56:	464b      	mov	r3, r9
 8015c58:	4652      	mov	r2, sl
 8015c5a:	4659      	mov	r1, fp
 8015c5c:	4640      	mov	r0, r8
 8015c5e:	f7ff fe6b 	bl	8015938 <mbedtls_debug_print_mpi>
 8015c62:	e009      	b.n	8015c78 <mbedtls_debug_print_crt+0x130>
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8015c64:	f8d8 3000 	ldr.w	r3, [r8]
 8015c68:	6958      	ldr	r0, [r3, #20]
 8015c6a:	4a1b      	ldr	r2, [pc, #108]	; (8015cd8 <mbedtls_debug_print_crt+0x190>)
 8015c6c:	9200      	str	r2, [sp, #0]
 8015c6e:	691f      	ldr	r7, [r3, #16]
 8015c70:	464b      	mov	r3, r9
 8015c72:	4652      	mov	r2, sl
 8015c74:	4659      	mov	r1, fp
 8015c76:	47b8      	blx	r7
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8015c78:	340c      	adds	r4, #12
 8015c7a:	ab11      	add	r3, sp, #68	; 0x44
 8015c7c:	42a3      	cmp	r3, r4
 8015c7e:	d0bd      	beq.n	8015bfc <mbedtls_debug_print_crt+0xb4>
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8015c80:	7823      	ldrb	r3, [r4, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d0ba      	beq.n	8015bfc <mbedtls_debug_print_crt+0xb4>
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 8015c86:	6863      	ldr	r3, [r4, #4]
 8015c88:	9300      	str	r3, [sp, #0]
 8015c8a:	4b14      	ldr	r3, [pc, #80]	; (8015cdc <mbedtls_debug_print_crt+0x194>)
 8015c8c:	4a14      	ldr	r2, [pc, #80]	; (8015ce0 <mbedtls_debug_print_crt+0x198>)
 8015c8e:	2110      	movs	r1, #16
 8015c90:	eb0d 0001 	add.w	r0, sp, r1
 8015c94:	f015 f926 	bl	802aee4 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8015c98:	f04f 0300 	mov.w	r3, #0
 8015c9c:	f88d 301f 	strb.w	r3, [sp, #31]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8015ca0:	7823      	ldrb	r3, [r4, #0]
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	d0d3      	beq.n	8015c4e <mbedtls_debug_print_crt+0x106>
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
 8015ca6:	2b02      	cmp	r3, #2
 8015ca8:	d1dc      	bne.n	8015c64 <mbedtls_debug_print_crt+0x11c>
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
 8015caa:	68a3      	ldr	r3, [r4, #8]
 8015cac:	9301      	str	r3, [sp, #4]
 8015cae:	ab04      	add	r3, sp, #16
 8015cb0:	9300      	str	r3, [sp, #0]
 8015cb2:	464b      	mov	r3, r9
 8015cb4:	4652      	mov	r2, sl
 8015cb6:	4659      	mov	r1, fp
 8015cb8:	4640      	mov	r0, r8
 8015cba:	f7ff ff05 	bl	8015ac8 <mbedtls_debug_print_ecp>
 8015cbe:	e7db      	b.n	8015c78 <mbedtls_debug_print_crt+0x130>
    }
}
 8015cc0:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8015cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cc8:	2001089c 	.word	0x2001089c
 8015ccc:	08031b9c 	.word	0x08031b9c
 8015cd0:	08031b90 	.word	0x08031b90
 8015cd4:	08032204 	.word	0x08032204
 8015cd8:	08031bc0 	.word	0x08031bc0
 8015cdc:	08031bb0 	.word	0x08031bb0
 8015ce0:	08031bb8 	.word	0x08031bb8

08015ce4 <mbedtls_debug_printf_ecdh>:

void mbedtls_debug_printf_ecdh( const mbedtls_ssl_context *ssl, int level,
                                const char *file, int line,
                                const mbedtls_ecdh_context *ecdh,
                                mbedtls_debug_ecdh_attr attr )
{
 8015ce4:	b510      	push	{r4, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    switch( attr )
 8015cec:	2c01      	cmp	r4, #1
 8015cee:	d00c      	beq.n	8015d0a <mbedtls_debug_printf_ecdh+0x26>
 8015cf0:	2c02      	cmp	r4, #2
 8015cf2:	d012      	beq.n	8015d1a <mbedtls_debug_printf_ecdh+0x36>
 8015cf4:	b10c      	cbz	r4, 8015cfa <mbedtls_debug_printf_ecdh+0x16>
        default:
            mbedtls_debug_printf_ecdh_internal( ssl, level, file, line, ecdh,
                                                attr );
    }
#endif
}
 8015cf6:	b002      	add	sp, #8
 8015cf8:	bd10      	pop	{r4, pc}
            mbedtls_debug_print_ecp( ssl, level, file, line, "ECDH: Q",
 8015cfa:	9c04      	ldr	r4, [sp, #16]
 8015cfc:	3488      	adds	r4, #136	; 0x88
 8015cfe:	9401      	str	r4, [sp, #4]
 8015d00:	4c0a      	ldr	r4, [pc, #40]	; (8015d2c <mbedtls_debug_printf_ecdh+0x48>)
 8015d02:	9400      	str	r4, [sp, #0]
 8015d04:	f7ff fee0 	bl	8015ac8 <mbedtls_debug_print_ecp>
            break;
 8015d08:	e7f5      	b.n	8015cf6 <mbedtls_debug_printf_ecdh+0x12>
            mbedtls_debug_print_ecp( ssl, level, file, line, "ECDH: Qp",
 8015d0a:	9c04      	ldr	r4, [sp, #16]
 8015d0c:	34ac      	adds	r4, #172	; 0xac
 8015d0e:	9401      	str	r4, [sp, #4]
 8015d10:	4c07      	ldr	r4, [pc, #28]	; (8015d30 <mbedtls_debug_printf_ecdh+0x4c>)
 8015d12:	9400      	str	r4, [sp, #0]
 8015d14:	f7ff fed8 	bl	8015ac8 <mbedtls_debug_print_ecp>
            break;
 8015d18:	e7ed      	b.n	8015cf6 <mbedtls_debug_printf_ecdh+0x12>
            mbedtls_debug_print_mpi( ssl, level, file, line, "ECDH: z",
 8015d1a:	9c04      	ldr	r4, [sp, #16]
 8015d1c:	34d0      	adds	r4, #208	; 0xd0
 8015d1e:	9401      	str	r4, [sp, #4]
 8015d20:	4c04      	ldr	r4, [pc, #16]	; (8015d34 <mbedtls_debug_printf_ecdh+0x50>)
 8015d22:	9400      	str	r4, [sp, #0]
 8015d24:	f7ff fe08 	bl	8015938 <mbedtls_debug_print_mpi>
}
 8015d28:	e7e5      	b.n	8015cf6 <mbedtls_debug_printf_ecdh+0x12>
 8015d2a:	bf00      	nop
 8015d2c:	08031bd4 	.word	0x08031bd4
 8015d30:	08031bdc 	.word	0x08031bdc
 8015d34:	08031be8 	.word	0x08031be8

08015d38 <mbedtls_dhm_init>:
    mbedtls_mpi_free( &L ); mbedtls_mpi_free( &U );
    return( ret );
}

void mbedtls_dhm_init( mbedtls_dhm_context *ctx )
{
 8015d38:	b508      	push	{r3, lr}
    DHM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_dhm_context ) );
 8015d3a:	227c      	movs	r2, #124	; 0x7c
 8015d3c:	2100      	movs	r1, #0
 8015d3e:	f014 fc24 	bl	802a58a <memset>
}
 8015d42:	bd08      	pop	{r3, pc}

08015d44 <mbedtls_dhm_free>:
/*
 * Free the components of a DHM key
 */
void mbedtls_dhm_free( mbedtls_dhm_context *ctx )
{
    if( ctx == NULL )
 8015d44:	b360      	cbz	r0, 8015da0 <mbedtls_dhm_free+0x5c>
{
 8015d46:	b510      	push	{r4, lr}
 8015d48:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->pX );
 8015d4a:	3070      	adds	r0, #112	; 0x70
 8015d4c:	f7fc fc73 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 8015d50:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8015d54:	f7fc fc6f 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vi );
 8015d58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d5c:	f7fc fc6b 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 8015d60:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8015d64:	f7fc fc67 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->K  );
 8015d68:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8015d6c:	f7fc fc63 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->GY );
 8015d70:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015d74:	f7fc fc5f 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->GX );
 8015d78:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d7c:	f7fc fc5b 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->X  );
 8015d80:	f104 001c 	add.w	r0, r4, #28
 8015d84:	f7fc fc57 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->G  );
 8015d88:	f104 0010 	add.w	r0, r4, #16
 8015d8c:	f7fc fc53 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 8015d90:	1d20      	adds	r0, r4, #4
 8015d92:	f7fc fc50 	bl	8012636 <mbedtls_mpi_free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_dhm_context ) );
 8015d96:	217c      	movs	r1, #124	; 0x7c
 8015d98:	4620      	mov	r0, r4
 8015d9a:	f005 f8d3 	bl	801af44 <mbedtls_platform_zeroize>
}
 8015d9e:	bd10      	pop	{r4, pc}
 8015da0:	4770      	bx	lr

08015da2 <mbedtls_ecdh_gen_public>:
 * Generate public key
 */
int mbedtls_ecdh_gen_public( mbedtls_ecp_group *grp, mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8015da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da6:	b084      	sub	sp, #16
 8015da8:	4605      	mov	r5, r0
 8015daa:	460f      	mov	r7, r1
 8015dac:	4690      	mov	r8, r2
 8015dae:	461c      	mov	r4, r3
 8015db0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, d, f_rng, p_rng ) );
 8015db2:	4633      	mov	r3, r6
 8015db4:	4622      	mov	r2, r4
 8015db6:	f002 f82b 	bl	8017e10 <mbedtls_ecp_gen_privkey>
 8015dba:	b110      	cbz	r0, 8015dc2 <mbedtls_ecdh_gen_public+0x20>
    ECDH_VALIDATE_RET( grp != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( f_rng != NULL );
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
}
 8015dbc:	b004      	add	sp, #16
 8015dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, Q, d, &grp->G,
 8015dc2:	9002      	str	r0, [sp, #8]
 8015dc4:	9601      	str	r6, [sp, #4]
 8015dc6:	9400      	str	r4, [sp, #0]
 8015dc8:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015dcc:	463a      	mov	r2, r7
 8015dce:	4641      	mov	r1, r8
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	f001 fd93 	bl	80178fc <mbedtls_ecp_mul_restartable>
    return( ecdh_gen_public_restartable( grp, d, Q, f_rng, p_rng, NULL ) );
 8015dd6:	e7f1      	b.n	8015dbc <mbedtls_ecdh_gen_public+0x1a>

08015dd8 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8015dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dda:	b08f      	sub	sp, #60	; 0x3c
 8015ddc:	4604      	mov	r4, r0
 8015dde:	460f      	mov	r7, r1
 8015de0:	4616      	mov	r6, r2
 8015de2:	461d      	mov	r5, r3
    mbedtls_ecp_point_init( &P );
 8015de4:	a805      	add	r0, sp, #20
 8015de6:	f001 f8bf 	bl	8016f68 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &P, d, Q,
 8015dea:	2300      	movs	r3, #0
 8015dec:	9302      	str	r3, [sp, #8]
 8015dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015df0:	9301      	str	r3, [sp, #4]
 8015df2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015df4:	9300      	str	r3, [sp, #0]
 8015df6:	4633      	mov	r3, r6
 8015df8:	462a      	mov	r2, r5
 8015dfa:	a905      	add	r1, sp, #20
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	f001 fd7d 	bl	80178fc <mbedtls_ecp_mul_restartable>
 8015e02:	4604      	mov	r4, r0
 8015e04:	b128      	cbz	r0, 8015e12 <mbedtls_ecdh_compute_shared+0x3a>
    mbedtls_ecp_point_free( &P );
 8015e06:	a805      	add	r0, sp, #20
 8015e08:	f001 f8e9 	bl	8016fde <mbedtls_ecp_point_free>
    ECDH_VALIDATE_RET( Q != NULL );
    ECDH_VALIDATE_RET( d != NULL );
    ECDH_VALIDATE_RET( z != NULL );
    return( ecdh_compute_shared_restartable( grp, z, Q, d,
                                             f_rng, p_rng, NULL ) );
}
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	b00f      	add	sp, #60	; 0x3c
 8015e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( mbedtls_ecp_is_zero( &P ) )
 8015e12:	a805      	add	r0, sp, #20
 8015e14:	f001 fb6e 	bl	80174f4 <mbedtls_ecp_is_zero>
 8015e18:	b928      	cbnz	r0, 8015e26 <mbedtls_ecdh_compute_shared+0x4e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 8015e1a:	a905      	add	r1, sp, #20
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	f7fc fc80 	bl	8012722 <mbedtls_mpi_copy>
 8015e22:	4604      	mov	r4, r0
cleanup:
 8015e24:	e7ef      	b.n	8015e06 <mbedtls_ecdh_compute_shared+0x2e>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8015e26:	4c01      	ldr	r4, [pc, #4]	; (8015e2c <mbedtls_ecdh_compute_shared+0x54>)
 8015e28:	e7ed      	b.n	8015e06 <mbedtls_ecdh_compute_shared+0x2e>
 8015e2a:	bf00      	nop
 8015e2c:	ffffb080 	.word	0xffffb080

08015e30 <mbedtls_ecdh_init>:

/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
 8015e30:	b510      	push	{r4, lr}
 8015e32:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &ctx->grp );
 8015e34:	f001 f8a5 	bl	8016f82 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &ctx->d  );
 8015e38:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8015e3c:	f7fc fbf5 	bl	801262a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &ctx->Q   );
 8015e40:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8015e44:	f001 f890 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Qp  );
 8015e48:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015e4c:	f001 f88c 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->z  );
 8015e50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015e54:	f7fc fbe9 	bl	801262a <mbedtls_mpi_init>
    ECDH_VALIDATE( ctx != NULL );

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    ecdh_init_internal( ctx );
    mbedtls_ecp_point_init( &ctx->Vi  );
 8015e58:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8015e5c:	f001 f884 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_ecp_point_init( &ctx->Vf  );
 8015e60:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8015e64:	f001 f880 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &ctx->_d );
 8015e68:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8015e6c:	f7fc fbdd 	bl	801262a <mbedtls_mpi_init>
#else
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );

    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
#endif
    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
 8015e70:	2300      	movs	r3, #0
 8015e72:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
#if defined(MBEDTLS_ECP_RESTARTABLE)
    ctx->restart_enabled = 0;
#endif
}
 8015e76:	bd10      	pop	{r4, pc}

08015e78 <mbedtls_ecdh_setup>:

/*
 * Setup context
 */
int mbedtls_ecdh_setup( mbedtls_ecdh_context *ctx, mbedtls_ecp_group_id grp_id )
{
 8015e78:	b508      	push	{r3, lr}
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 8015e7a:	f002 fac9 	bl	8018410 <mbedtls_ecp_group_load>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8015e7e:	2800      	cmp	r0, #0
            ctx->grp_id = grp_id;
            ecdh_init_internal( &ctx->ctx.mbed_ecdh );
            return( ecdh_setup_internal( &ctx->ctx.mbed_ecdh, grp_id ) );
    }
#endif
}
 8015e80:	4b01      	ldr	r3, [pc, #4]	; (8015e88 <mbedtls_ecdh_setup+0x10>)
 8015e82:	bf18      	it	ne
 8015e84:	4618      	movne	r0, r3
 8015e86:	bd08      	pop	{r3, pc}
 8015e88:	ffffb180 	.word	0xffffb180

08015e8c <mbedtls_ecdh_free>:
/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
    if( ctx == NULL )
 8015e8c:	b300      	cbz	r0, 8015ed0 <mbedtls_ecdh_free+0x44>
{
 8015e8e:	b510      	push	{r4, lr}
 8015e90:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    mbedtls_ecp_point_free( &ctx->Vi );
 8015e92:	30e0      	adds	r0, #224	; 0xe0
 8015e94:	f001 f8a3 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf );
 8015e98:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8015e9c:	f001 f89f 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->_d );
 8015ea0:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8015ea4:	f7fc fbc7 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_ecp_group_free( &ctx->grp );
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f001 f8a7 	bl	8016ffc <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &ctx->d  );
 8015eae:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8015eb2:	f7fc fbc0 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 8015eb6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8015eba:	f001 f890 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 8015ebe:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8015ec2:	f001 f88c 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->z  );
 8015ec6:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015eca:	f7fc fbb4 	bl	8012636 <mbedtls_mpi_free>

    ctx->point_format = MBEDTLS_ECP_PF_UNCOMPRESSED;
    ctx->var = MBEDTLS_ECDH_VARIANT_NONE;
    ctx->grp_id = MBEDTLS_ECP_DP_NONE;
#endif
}
 8015ece:	bd10      	pop	{r4, pc}
 8015ed0:	4770      	bx	lr
	...

08015ed4 <mbedtls_ecdh_make_params>:
 */
int mbedtls_ecdh_make_params( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 8015ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ed8:	b085      	sub	sp, #20
 8015eda:	461e      	mov	r6, r3
#else
    (void) restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_params_internal( ctx, olen, ctx->point_format, buf, blen,
 8015edc:	f8d0 90dc 	ldr.w	r9, [r0, #220]	; 0xdc
    if( ctx->grp.pbits == 0 )
 8015ee0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8015ee2:	b353      	cbz	r3, 8015f3a <mbedtls_ecdh_make_params+0x66>
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	460f      	mov	r7, r1
 8015ee8:	4615      	mov	r5, r2
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
 8015eea:	f100 0888 	add.w	r8, r0, #136	; 0x88
 8015eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ef4:	4642      	mov	r2, r8
 8015ef6:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8015efa:	f7ff ff52 	bl	8015da2 <mbedtls_ecdh_gen_public>
 8015efe:	b110      	cbz	r0, 8015f06 <mbedtls_ecdh_make_params+0x32>
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 8015f00:	b005      	add	sp, #20
 8015f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( ret = mbedtls_ecp_tls_write_group( &ctx->grp, &grp_len, buf,
 8015f06:	4633      	mov	r3, r6
 8015f08:	462a      	mov	r2, r5
 8015f0a:	a902      	add	r1, sp, #8
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f001 fbdf 	bl	80176d0 <mbedtls_ecp_tls_write_group>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	d1f4      	bne.n	8015f00 <mbedtls_ecdh_make_params+0x2c>
    buf += grp_len;
 8015f16:	9a02      	ldr	r2, [sp, #8]
    blen -= grp_len;
 8015f18:	1ab6      	subs	r6, r6, r2
    if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format,
 8015f1a:	9601      	str	r6, [sp, #4]
    buf += grp_len;
 8015f1c:	4415      	add	r5, r2
    if( ( ret = mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format,
 8015f1e:	9500      	str	r5, [sp, #0]
 8015f20:	ab03      	add	r3, sp, #12
 8015f22:	464a      	mov	r2, r9
 8015f24:	4641      	mov	r1, r8
 8015f26:	4620      	mov	r0, r4
 8015f28:	f001 fb94 	bl	8017654 <mbedtls_ecp_tls_write_point>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d1e7      	bne.n	8015f00 <mbedtls_ecdh_make_params+0x2c>
    *olen = grp_len + pt_len;
 8015f30:	9b02      	ldr	r3, [sp, #8]
 8015f32:	9a03      	ldr	r2, [sp, #12]
 8015f34:	4413      	add	r3, r2
 8015f36:	603b      	str	r3, [r7, #0]
    return( 0 );
 8015f38:	e7e2      	b.n	8015f00 <mbedtls_ecdh_make_params+0x2c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8015f3a:	4801      	ldr	r0, [pc, #4]	; (8015f40 <mbedtls_ecdh_make_params+0x6c>)
    return( ecdh_make_params_internal( ctx, olen, ctx->point_format, buf, blen,
 8015f3c:	e7e0      	b.n	8015f00 <mbedtls_ecdh_make_params+0x2c>
 8015f3e:	bf00      	nop
 8015f40:	ffffb080 	.word	0xffffb080

08015f44 <mbedtls_ecdh_read_params>:
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                              const unsigned char **buf,
                              const unsigned char *end )
{
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	4606      	mov	r6, r0
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	4615      	mov	r5, r2
    ECDH_VALIDATE_RET( ctx != NULL );
    ECDH_VALIDATE_RET( buf != NULL );
    ECDH_VALIDATE_RET( *buf != NULL );
    ECDH_VALIDATE_RET( end != NULL );

    if( ( ret = mbedtls_ecp_tls_read_group_id( &grp_id, buf, end - *buf ) )
 8015f4e:	680a      	ldr	r2, [r1, #0]
 8015f50:	1aaa      	subs	r2, r5, r2
 8015f52:	f10d 0007 	add.w	r0, sp, #7
 8015f56:	f001 fb97 	bl	8017688 <mbedtls_ecp_tls_read_group_id>
 8015f5a:	b108      	cbz	r0, 8015f60 <mbedtls_ecdh_read_params+0x1c>
                                               buf, end ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 8015f5c:	b002      	add	sp, #8
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}
    ret = mbedtls_ecp_group_load( &ctx->grp, grp_id );
 8015f60:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015f64:	4630      	mov	r0, r6
 8015f66:	f002 fa53 	bl	8018410 <mbedtls_ecp_group_load>
    if( ret != 0 )
 8015f6a:	b940      	cbnz	r0, 8015f7e <mbedtls_ecdh_read_params+0x3a>
                                        end - *buf ) );
 8015f6c:	6823      	ldr	r3, [r4, #0]
    return( mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf,
 8015f6e:	1aeb      	subs	r3, r5, r3
 8015f70:	4622      	mov	r2, r4
 8015f72:	f106 01ac 	add.w	r1, r6, #172	; 0xac
 8015f76:	4630      	mov	r0, r6
 8015f78:	f001 fb52 	bl	8017620 <mbedtls_ecp_tls_read_point>
    return( ecdh_read_params_internal( ctx, buf, end ) );
 8015f7c:	e7ee      	b.n	8015f5c <mbedtls_ecdh_read_params+0x18>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8015f7e:	4801      	ldr	r0, [pc, #4]	; (8015f84 <mbedtls_ecdh_read_params+0x40>)
 8015f80:	e7ec      	b.n	8015f5c <mbedtls_ecdh_read_params+0x18>
 8015f82:	bf00      	nop
 8015f84:	ffffb180 	.word	0xffffb180

08015f88 <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 8015f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f8c:	b083      	sub	sp, #12
 8015f8e:	461f      	mov	r7, r3
#if defined(MBEDTLS_ECP_RESTARTABLE)
    restart_enabled = ctx->restart_enabled;
#endif

#if defined(MBEDTLS_ECDH_LEGACY_CONTEXT)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
 8015f90:	f8d0 90dc 	ldr.w	r9, [r0, #220]	; 0xdc
    if( ctx->grp.pbits == 0 )
 8015f94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8015f96:	b1cb      	cbz	r3, 8015fcc <mbedtls_ecdh_make_public+0x44>
 8015f98:	4604      	mov	r4, r0
 8015f9a:	460d      	mov	r5, r1
 8015f9c:	4616      	mov	r6, r2
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q,
 8015f9e:	f100 0888 	add.w	r8, r0, #136	; 0x88
 8015fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fa4:	9300      	str	r3, [sp, #0]
 8015fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fa8:	4642      	mov	r2, r8
 8015faa:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8015fae:	f7ff fef8 	bl	8015da2 <mbedtls_ecdh_gen_public>
 8015fb2:	b110      	cbz	r0, 8015fba <mbedtls_ecdh_make_public+0x32>
                                               restart_enabled ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 8015fb4:	b003      	add	sp, #12
 8015fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, point_format, olen,
 8015fba:	9701      	str	r7, [sp, #4]
 8015fbc:	9600      	str	r6, [sp, #0]
 8015fbe:	462b      	mov	r3, r5
 8015fc0:	464a      	mov	r2, r9
 8015fc2:	4641      	mov	r1, r8
 8015fc4:	4620      	mov	r0, r4
 8015fc6:	f001 fb45 	bl	8017654 <mbedtls_ecp_tls_write_point>
 8015fca:	e7f3      	b.n	8015fb4 <mbedtls_ecdh_make_public+0x2c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8015fcc:	4800      	ldr	r0, [pc, #0]	; (8015fd0 <mbedtls_ecdh_make_public+0x48>)
    return( ecdh_make_public_internal( ctx, olen, ctx->point_format, buf, blen,
 8015fce:	e7f1      	b.n	8015fb4 <mbedtls_ecdh_make_public+0x2c>
 8015fd0:	ffffb080 	.word	0xffffb080

08015fd4 <mbedtls_ecdh_read_public>:
/*
 * Parse and import the client's public value
 */
int mbedtls_ecdh_read_public( mbedtls_ecdh_context *ctx,
                              const unsigned char *buf, size_t blen )
{
 8015fd4:	b530      	push	{r4, r5, lr}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	460d      	mov	r5, r1
 8015fda:	4614      	mov	r4, r2
    const unsigned char *p = buf;
 8015fdc:	9101      	str	r1, [sp, #4]
    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, &p,
 8015fde:	4613      	mov	r3, r2
 8015fe0:	aa01      	add	r2, sp, #4
 8015fe2:	f100 01ac 	add.w	r1, r0, #172	; 0xac
 8015fe6:	f001 fb1b 	bl	8017620 <mbedtls_ecp_tls_read_point>
 8015fea:	4603      	mov	r3, r0
 8015fec:	b928      	cbnz	r0, 8015ffa <mbedtls_ecdh_read_public+0x26>
    if( (size_t)( p - buf ) != blen )
 8015fee:	9901      	ldr	r1, [sp, #4]
 8015ff0:	1b49      	subs	r1, r1, r5
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8015ff2:	4a03      	ldr	r2, [pc, #12]	; (8016000 <mbedtls_ecdh_read_public+0x2c>)
 8015ff4:	42a1      	cmp	r1, r4
 8015ff6:	bf18      	it	ne
 8015ff8:	4613      	movne	r3, r2
                                                       buf, blen ) );
        default:
            return MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    }
#endif
}
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	b003      	add	sp, #12
 8015ffe:	bd30      	pop	{r4, r5, pc}
 8016000:	ffffb080 	.word	0xffffb080

08016004 <mbedtls_ecdh_calc_secret>:
    int ret;
#if defined(MBEDTLS_ECP_RESTARTABLE)
    mbedtls_ecp_restart_ctx *rs_ctx = NULL;
#endif

    if( ctx == NULL || ctx->grp.pbits == 0 )
 8016004:	b358      	cbz	r0, 801605e <mbedtls_ecdh_calc_secret+0x5a>
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                              unsigned char *buf, size_t blen,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng )
{
 8016006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	460e      	mov	r6, r1
 801600e:	4615      	mov	r5, r2
 8016010:	4698      	mov	r8, r3
 8016012:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->grp.pbits == 0 )
 8016014:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8016016:	b323      	cbz	r3, 8016062 <mbedtls_ecdh_calc_secret+0x5e>
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp,
 8016018:	f100 07d0 	add.w	r7, r0, #208	; 0xd0
 801601c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801601e:	9301      	str	r3, [sp, #4]
 8016020:	9b08      	ldr	r3, [sp, #32]
 8016022:	9300      	str	r3, [sp, #0]
 8016024:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8016028:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 801602c:	4639      	mov	r1, r7
 801602e:	f7ff fed3 	bl	8015dd8 <mbedtls_ecdh_compute_shared>
 8016032:	b110      	cbz	r0, 801603a <mbedtls_ecdh_calc_secret+0x36>
                                               restart_enabled ) );
        default:
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }
#endif
}
 8016034:	b002      	add	sp, #8
 8016036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 801603a:	4638      	mov	r0, r7
 801603c:	f7fc fc4b 	bl	80128d6 <mbedtls_mpi_size>
 8016040:	4580      	cmp	r8, r0
 8016042:	d310      	bcc.n	8016066 <mbedtls_ecdh_calc_secret+0x62>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8016044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016046:	f013 0207 	ands.w	r2, r3, #7
 801604a:	bf18      	it	ne
 801604c:	2201      	movne	r2, #1
 801604e:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016052:	6032      	str	r2, [r6, #0]
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8016054:	4629      	mov	r1, r5
 8016056:	4638      	mov	r0, r7
 8016058:	f7fc fc74 	bl	8012944 <mbedtls_mpi_write_binary>
 801605c:	e7ea      	b.n	8016034 <mbedtls_ecdh_calc_secret+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801605e:	4803      	ldr	r0, [pc, #12]	; (801606c <mbedtls_ecdh_calc_secret+0x68>)
}
 8016060:	4770      	bx	lr
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8016062:	4802      	ldr	r0, [pc, #8]	; (801606c <mbedtls_ecdh_calc_secret+0x68>)
 8016064:	e7e6      	b.n	8016034 <mbedtls_ecdh_calc_secret+0x30>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8016066:	4801      	ldr	r0, [pc, #4]	; (801606c <mbedtls_ecdh_calc_secret+0x68>)
    return( ecdh_calc_secret_internal( ctx, olen, buf, blen, f_rng, p_rng,
 8016068:	e7e4      	b.n	8016034 <mbedtls_ecdh_calc_secret+0x30>
 801606a:	bf00      	nop
 801606c:	ffffb080 	.word	0xffffb080

08016070 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8016070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016072:	4606      	mov	r6, r0
 8016074:	460f      	mov	r7, r1
 8016076:	4611      	mov	r1, r2
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8016078:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 801607a:	3507      	adds	r5, #7
 801607c:	08ec      	lsrs	r4, r5, #3
    size_t use_size = blen > n_size ? n_size : blen;
 801607e:	429c      	cmp	r4, r3
 8016080:	bf28      	it	cs
 8016082:	461c      	movcs	r4, r3

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8016084:	4622      	mov	r2, r4
 8016086:	4638      	mov	r0, r7
 8016088:	f7fc fc2b 	bl	80128e2 <mbedtls_mpi_read_binary>
 801608c:	4605      	mov	r5, r0
 801608e:	b980      	cbnz	r0, 80160b2 <derive_mpi+0x42>
    if( use_size * 8 > grp->nbits )
 8016090:	00e1      	lsls	r1, r4, #3
 8016092:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8016094:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 8016098:	d204      	bcs.n	80160a4 <derive_mpi+0x34>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 801609a:	1ac9      	subs	r1, r1, r3
 801609c:	4638      	mov	r0, r7
 801609e:	f7fc fcee 	bl	8012a7e <mbedtls_mpi_shift_r>
 80160a2:	b978      	cbnz	r0, 80160c4 <derive_mpi+0x54>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 80160a4:	364c      	adds	r6, #76	; 0x4c
 80160a6:	4631      	mov	r1, r6
 80160a8:	4638      	mov	r0, r7
 80160aa:	f7fc fdfa 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	da01      	bge.n	80160b6 <derive_mpi+0x46>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );

cleanup:
    return( ret );
}
 80160b2:	4628      	mov	r0, r5
 80160b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 80160b6:	4632      	mov	r2, r6
 80160b8:	4639      	mov	r1, r7
 80160ba:	4638      	mov	r0, r7
 80160bc:	f7fc ff1c 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 80160c0:	4605      	mov	r5, r0
cleanup:
 80160c2:	e7f6      	b.n	80160b2 <derive_mpi+0x42>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 80160c4:	4605      	mov	r5, r0
    return( ret );
 80160c6:	e7f4      	b.n	80160b2 <derive_mpi+0x42>

080160c8 <ecdsa_sign_restartable>:
static int ecdsa_sign_restartable( mbedtls_ecp_group *grp,
                mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
                mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80160c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160cc:	b09d      	sub	sp, #116	; 0x74
 80160ce:	9206      	str	r2, [sp, #24]
 80160d0:	461c      	mov	r4, r3
 80160d2:	9307      	str	r3, [sp, #28]
 80160d4:	f8dd 90a0 	ldr.w	r9, [sp, #160]	; 0xa0
 80160d8:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;
    mbedtls_mpi *pk = &k, *pr = r;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80160dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80160de:	2b00      	cmp	r3, #0
 80160e0:	f000 80cc 	beq.w	801627c <ecdsa_sign_restartable+0x1b4>
 80160e4:	4605      	mov	r5, r0
 80160e6:	460e      	mov	r6, r1
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /* Make sure d is in range 1..n-1 */
    if( mbedtls_mpi_cmp_int( d, 1 ) < 0 || mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 80160e8:	2101      	movs	r1, #1
 80160ea:	4620      	mov	r0, r4
 80160ec:	f7fc fe31 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80160f0:	2800      	cmp	r0, #0
 80160f2:	f2c0 80c6 	blt.w	8016282 <ecdsa_sign_restartable+0x1ba>
 80160f6:	f105 0b4c 	add.w	fp, r5, #76	; 0x4c
 80160fa:	4659      	mov	r1, fp
 80160fc:	4620      	mov	r0, r4
 80160fe:	f7fc fdd0 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8016102:	2800      	cmp	r0, #0
 8016104:	f280 80c0 	bge.w	8016288 <ecdsa_sign_restartable+0x1c0>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );

    mbedtls_ecp_point_init( &R );
 8016108:	a811      	add	r0, sp, #68	; 0x44
 801610a:	f000 ff2d 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 801610e:	a80e      	add	r0, sp, #56	; 0x38
 8016110:	f7fc fa8b 	bl	801262a <mbedtls_mpi_init>
 8016114:	a80b      	add	r0, sp, #44	; 0x2c
 8016116:	f7fc fa88 	bl	801262a <mbedtls_mpi_init>
 801611a:	a808      	add	r0, sp, #32
 801611c:	f7fc fa85 	bl	801262a <mbedtls_mpi_init>
        if( rs_ctx->sig->state == ecdsa_sig_modn )
            goto modn;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    *p_sign_tries = 0;
 8016120:	2300      	movs	r3, #0
 8016122:	931a      	str	r3, [sp, #104]	; 0x68
    int *p_sign_tries = &sign_tries, *p_key_tries = &key_tries;
 8016124:	af1b      	add	r7, sp, #108	; 0x6c
 8016126:	ab1a      	add	r3, sp, #104	; 0x68
 8016128:	9305      	str	r3, [sp, #20]

        /*
         * Steps 1-3: generate a suitable ephemeral keypair
         * and set r = xR mod n
         */
        *p_key_tries = 0;
 801612a:	f04f 0800 	mov.w	r8, #0
            if( rs_ctx != NULL && rs_ctx->sig != NULL )
                rs_ctx->sig->state = ecdsa_sig_mul;

mul:
#endif
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 801612e:	f105 0428 	add.w	r4, r5, #40	; 0x28
 8016132:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 8016136:	46b1      	mov	r9, r6
 8016138:	9e28      	ldr	r6, [sp, #160]	; 0xa0
        if( *p_sign_tries++ > 10 )
 801613a:	9a05      	ldr	r2, [sp, #20]
 801613c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016140:	9205      	str	r2, [sp, #20]
 8016142:	2b0a      	cmp	r3, #10
 8016144:	f300 8091 	bgt.w	801626a <ecdsa_sign_restartable+0x1a2>
        *p_key_tries = 0;
 8016148:	f847 8b04 	str.w	r8, [r7], #4
            if( *p_key_tries++ > 10 )
 801614c:	4623      	mov	r3, r4
 801614e:	4654      	mov	r4, sl
 8016150:	469a      	mov	sl, r3
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, pk, f_rng, p_rng ) );
 8016152:	4623      	mov	r3, r4
 8016154:	4632      	mov	r2, r6
 8016156:	a90e      	add	r1, sp, #56	; 0x38
 8016158:	4628      	mov	r0, r5
 801615a:	f001 fe59 	bl	8017e10 <mbedtls_ecp_gen_privkey>
 801615e:	2800      	cmp	r0, #0
 8016160:	f040 8086 	bne.w	8016270 <ecdsa_sign_restartable+0x1a8>
            MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, &R, pk, &grp->G,
 8016164:	f8cd 8008 	str.w	r8, [sp, #8]
 8016168:	9401      	str	r4, [sp, #4]
 801616a:	9600      	str	r6, [sp, #0]
 801616c:	4653      	mov	r3, sl
 801616e:	aa0e      	add	r2, sp, #56	; 0x38
 8016170:	a911      	add	r1, sp, #68	; 0x44
 8016172:	4628      	mov	r0, r5
 8016174:	f001 fbc2 	bl	80178fc <mbedtls_ecp_mul_restartable>
 8016178:	2800      	cmp	r0, #0
 801617a:	d17b      	bne.n	8016274 <ecdsa_sign_restartable+0x1ac>
                                                  f_rng, p_rng, ECDSA_RS_ECP ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pr, &R.X, &grp->N ) );
 801617c:	465a      	mov	r2, fp
 801617e:	a911      	add	r1, sp, #68	; 0x44
 8016180:	4648      	mov	r0, r9
 8016182:	f7fd f9b8 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 8016186:	2800      	cmp	r0, #0
 8016188:	d176      	bne.n	8016278 <ecdsa_sign_restartable+0x1b0>
        }
        while( mbedtls_mpi_cmp_int( pr, 0 ) == 0 );
 801618a:	4641      	mov	r1, r8
 801618c:	4648      	mov	r0, r9
 801618e:	f7fc fde0 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016192:	b9a8      	cbnz	r0, 80161c0 <ecdsa_sign_restartable+0xf8>
            if( *p_key_tries++ > 10 )
 8016194:	f857 3b04 	ldr.w	r3, [r7], #4
 8016198:	2b0a      	cmp	r3, #10
 801619a:	ddda      	ble.n	8016152 <ecdsa_sign_restartable+0x8a>
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 801619c:	4b3c      	ldr	r3, [pc, #240]	; (8016290 <ecdsa_sign_restartable+0x1c8>)
 801619e:	9304      	str	r3, [sp, #16]
    if( rs_ctx != NULL && rs_ctx->sig != NULL )
        mbedtls_mpi_copy( r, pr );
#endif

cleanup:
    mbedtls_ecp_point_free( &R );
 80161a0:	a811      	add	r0, sp, #68	; 0x44
 80161a2:	f000 ff1c 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 80161a6:	a80e      	add	r0, sp, #56	; 0x38
 80161a8:	f7fc fa45 	bl	8012636 <mbedtls_mpi_free>
 80161ac:	a80b      	add	r0, sp, #44	; 0x2c
 80161ae:	f7fc fa42 	bl	8012636 <mbedtls_mpi_free>
 80161b2:	a808      	add	r0, sp, #32
 80161b4:	f7fc fa3f 	bl	8012636 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( sig );

    return( ret );
}
 80161b8:	9804      	ldr	r0, [sp, #16]
 80161ba:	b01d      	add	sp, #116	; 0x74
 80161bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c0:	4653      	mov	r3, sl
 80161c2:	46a2      	mov	sl, r4
 80161c4:	461c      	mov	r4, r3
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 80161c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80161c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80161ca:	a90b      	add	r1, sp, #44	; 0x2c
 80161cc:	4628      	mov	r0, r5
 80161ce:	f7ff ff4f 	bl	8016070 <derive_mpi>
 80161d2:	9004      	str	r0, [sp, #16]
 80161d4:	2800      	cmp	r0, #0
 80161d6:	d1e3      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_ecp_gen_privkey( grp, &t, f_rng, p_rng ) );
 80161d8:	4653      	mov	r3, sl
 80161da:	4632      	mov	r2, r6
 80161dc:	a908      	add	r1, sp, #32
 80161de:	4628      	mov	r0, r5
 80161e0:	f001 fe16 	bl	8017e10 <mbedtls_ecp_gen_privkey>
 80161e4:	9004      	str	r0, [sp, #16]
 80161e6:	2800      	cmp	r0, #0
 80161e8:	d1da      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, pr, d ) );
 80161ea:	9a07      	ldr	r2, [sp, #28]
 80161ec:	4649      	mov	r1, r9
 80161ee:	9806      	ldr	r0, [sp, #24]
 80161f0:	f7fc fed8 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80161f4:	9004      	str	r0, [sp, #16]
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d1d2      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 80161fa:	9a06      	ldr	r2, [sp, #24]
 80161fc:	a90b      	add	r1, sp, #44	; 0x2c
 80161fe:	4608      	mov	r0, r1
 8016200:	f7fc fe54 	bl	8012eac <mbedtls_mpi_add_mpi>
 8016204:	9004      	str	r0, [sp, #16]
 8016206:	2800      	cmp	r0, #0
 8016208:	d1ca      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 801620a:	aa08      	add	r2, sp, #32
 801620c:	a90b      	add	r1, sp, #44	; 0x2c
 801620e:	4608      	mov	r0, r1
 8016210:	f7fc fec8 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016214:	9004      	str	r0, [sp, #16]
 8016216:	2800      	cmp	r0, #0
 8016218:	d1c2      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pk, pk, &t ) );
 801621a:	aa08      	add	r2, sp, #32
 801621c:	a90e      	add	r1, sp, #56	; 0x38
 801621e:	4608      	mov	r0, r1
 8016220:	f7fc fec0 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016224:	9004      	str	r0, [sp, #16]
 8016226:	2800      	cmp	r0, #0
 8016228:	d1ba      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, pk, &grp->N ) );
 801622a:	465a      	mov	r2, fp
 801622c:	a90e      	add	r1, sp, #56	; 0x38
 801622e:	9806      	ldr	r0, [sp, #24]
 8016230:	f7fd fcc8 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 8016234:	9004      	str	r0, [sp, #16]
 8016236:	2800      	cmp	r0, #0
 8016238:	d1b2      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 801623a:	aa0b      	add	r2, sp, #44	; 0x2c
 801623c:	9906      	ldr	r1, [sp, #24]
 801623e:	4608      	mov	r0, r1
 8016240:	f7fc feb0 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016244:	9004      	str	r0, [sp, #16]
 8016246:	2800      	cmp	r0, #0
 8016248:	d1aa      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 801624a:	465a      	mov	r2, fp
 801624c:	9906      	ldr	r1, [sp, #24]
 801624e:	4608      	mov	r0, r1
 8016250:	f7fd f951 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 8016254:	9004      	str	r0, [sp, #16]
 8016256:	2800      	cmp	r0, #0
 8016258:	d1a2      	bne.n	80161a0 <ecdsa_sign_restartable+0xd8>
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 801625a:	4641      	mov	r1, r8
 801625c:	9806      	ldr	r0, [sp, #24]
 801625e:	f7fc fd78 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016262:	2800      	cmp	r0, #0
 8016264:	f43f af69 	beq.w	801613a <ecdsa_sign_restartable+0x72>
 8016268:	e79a      	b.n	80161a0 <ecdsa_sign_restartable+0xd8>
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 801626a:	4b09      	ldr	r3, [pc, #36]	; (8016290 <ecdsa_sign_restartable+0x1c8>)
 801626c:	9304      	str	r3, [sp, #16]
 801626e:	e797      	b.n	80161a0 <ecdsa_sign_restartable+0xd8>
 8016270:	9004      	str	r0, [sp, #16]
 8016272:	e795      	b.n	80161a0 <ecdsa_sign_restartable+0xd8>
 8016274:	9004      	str	r0, [sp, #16]
 8016276:	e793      	b.n	80161a0 <ecdsa_sign_restartable+0xd8>
 8016278:	9004      	str	r0, [sp, #16]
 801627a:	e791      	b.n	80161a0 <ecdsa_sign_restartable+0xd8>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801627c:	4b05      	ldr	r3, [pc, #20]	; (8016294 <ecdsa_sign_restartable+0x1cc>)
 801627e:	9304      	str	r3, [sp, #16]
 8016280:	e79a      	b.n	80161b8 <ecdsa_sign_restartable+0xf0>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8016282:	4b05      	ldr	r3, [pc, #20]	; (8016298 <ecdsa_sign_restartable+0x1d0>)
 8016284:	9304      	str	r3, [sp, #16]
 8016286:	e797      	b.n	80161b8 <ecdsa_sign_restartable+0xf0>
 8016288:	4b03      	ldr	r3, [pc, #12]	; (8016298 <ecdsa_sign_restartable+0x1d0>)
 801628a:	9304      	str	r3, [sp, #16]
 801628c:	e794      	b.n	80161b8 <ecdsa_sign_restartable+0xf0>
 801628e:	bf00      	nop
 8016290:	ffffb300 	.word	0xffffb300
 8016294:	ffffb080 	.word	0xffffb080
 8016298:	ffffb380 	.word	0xffffb380

0801629c <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 801629c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162a0:	b09b      	sub	sp, #108	; 0x6c
 80162a2:	4604      	mov	r4, r0
 80162a4:	4688      	mov	r8, r1
 80162a6:	4616      	mov	r6, r2
 80162a8:	461f      	mov	r7, r3
 80162aa:	9d22      	ldr	r5, [sp, #136]	; 0x88
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;

    mbedtls_ecp_point_init( &R );
 80162ac:	a805      	add	r0, sp, #20
 80162ae:	f000 fe5b 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 80162b2:	a817      	add	r0, sp, #92	; 0x5c
 80162b4:	f7fc f9b9 	bl	801262a <mbedtls_mpi_init>
 80162b8:	a814      	add	r0, sp, #80	; 0x50
 80162ba:	f7fc f9b6 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 80162be:	a811      	add	r0, sp, #68	; 0x44
 80162c0:	f7fc f9b3 	bl	801262a <mbedtls_mpi_init>
 80162c4:	a80e      	add	r0, sp, #56	; 0x38
 80162c6:	f7fc f9b0 	bl	801262a <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80162ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162cc:	2800      	cmp	r0, #0
 80162ce:	f000 8087 	beq.w	80163e0 <ecdsa_verify_restartable+0x144>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80162d2:	2101      	movs	r1, #1
 80162d4:	4628      	mov	r0, r5
 80162d6:	f7fc fd3c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80162da:	2800      	cmp	r0, #0
 80162dc:	db6a      	blt.n	80163b4 <ecdsa_verify_restartable+0x118>
 80162de:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 80162e2:	4649      	mov	r1, r9
 80162e4:	4628      	mov	r0, r5
 80162e6:	f7fc fcdc 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80162ea:	2800      	cmp	r0, #0
 80162ec:	db01      	blt.n	80162f2 <ecdsa_verify_restartable+0x56>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80162ee:	4e3d      	ldr	r6, [pc, #244]	; (80163e4 <ecdsa_verify_restartable+0x148>)
 80162f0:	e061      	b.n	80163b6 <ecdsa_verify_restartable+0x11a>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 80162f2:	2101      	movs	r1, #1
 80162f4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80162f6:	f7fc fd2c 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 80162fa:	2800      	cmp	r0, #0
 80162fc:	db6e      	blt.n	80163dc <ecdsa_verify_restartable+0x140>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 80162fe:	4649      	mov	r1, r9
 8016300:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8016302:	f7fc fcce 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8016306:	2800      	cmp	r0, #0
 8016308:	db01      	blt.n	801630e <ecdsa_verify_restartable+0x72>
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 801630a:	4e36      	ldr	r6, [pc, #216]	; (80163e4 <ecdsa_verify_restartable+0x148>)
 801630c:	e053      	b.n	80163b6 <ecdsa_verify_restartable+0x11a>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 801630e:	4633      	mov	r3, r6
 8016310:	4642      	mov	r2, r8
 8016312:	a917      	add	r1, sp, #92	; 0x5c
 8016314:	4620      	mov	r0, r4
 8016316:	f7ff feab 	bl	8016070 <derive_mpi>
 801631a:	4606      	mov	r6, r0
 801631c:	2800      	cmp	r0, #0
 801631e:	d14a      	bne.n	80163b6 <ecdsa_verify_restartable+0x11a>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 8016320:	464a      	mov	r2, r9
 8016322:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8016324:	a814      	add	r0, sp, #80	; 0x50
 8016326:	f7fd fc4d 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 801632a:	4606      	mov	r6, r0
 801632c:	2800      	cmp	r0, #0
 801632e:	d142      	bne.n	80163b6 <ecdsa_verify_restartable+0x11a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 8016330:	aa14      	add	r2, sp, #80	; 0x50
 8016332:	a917      	add	r1, sp, #92	; 0x5c
 8016334:	a811      	add	r0, sp, #68	; 0x44
 8016336:	f7fc fe35 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801633a:	4606      	mov	r6, r0
 801633c:	2800      	cmp	r0, #0
 801633e:	d13a      	bne.n	80163b6 <ecdsa_verify_restartable+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 8016340:	464a      	mov	r2, r9
 8016342:	a911      	add	r1, sp, #68	; 0x44
 8016344:	4608      	mov	r0, r1
 8016346:	f7fd f8d6 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801634a:	4606      	mov	r6, r0
 801634c:	2800      	cmp	r0, #0
 801634e:	d132      	bne.n	80163b6 <ecdsa_verify_restartable+0x11a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 8016350:	aa14      	add	r2, sp, #80	; 0x50
 8016352:	4629      	mov	r1, r5
 8016354:	a80e      	add	r0, sp, #56	; 0x38
 8016356:	f7fc fe25 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801635a:	4606      	mov	r6, r0
 801635c:	bb58      	cbnz	r0, 80163b6 <ecdsa_verify_restartable+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 801635e:	464a      	mov	r2, r9
 8016360:	a90e      	add	r1, sp, #56	; 0x38
 8016362:	4608      	mov	r0, r1
 8016364:	f7fd f8c7 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 8016368:	4606      	mov	r6, r0
 801636a:	bb20      	cbnz	r0, 80163b6 <ecdsa_verify_restartable+0x11a>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 801636c:	2300      	movs	r3, #0
 801636e:	9302      	str	r3, [sp, #8]
 8016370:	9701      	str	r7, [sp, #4]
 8016372:	ab0e      	add	r3, sp, #56	; 0x38
 8016374:	9300      	str	r3, [sp, #0]
 8016376:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801637a:	aa11      	add	r2, sp, #68	; 0x44
 801637c:	a905      	add	r1, sp, #20
 801637e:	4620      	mov	r0, r4
 8016380:	f001 fd08 	bl	8017d94 <mbedtls_ecp_muladd_restartable>
 8016384:	4606      	mov	r6, r0
 8016386:	b9b0      	cbnz	r0, 80163b6 <ecdsa_verify_restartable+0x11a>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 8016388:	a805      	add	r0, sp, #20
 801638a:	f001 f8b3 	bl	80174f4 <mbedtls_ecp_is_zero>
 801638e:	b108      	cbz	r0, 8016394 <ecdsa_verify_restartable+0xf8>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8016390:	4e14      	ldr	r6, [pc, #80]	; (80163e4 <ecdsa_verify_restartable+0x148>)
 8016392:	e010      	b.n	80163b6 <ecdsa_verify_restartable+0x11a>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 8016394:	464a      	mov	r2, r9
 8016396:	a905      	add	r1, sp, #20
 8016398:	4608      	mov	r0, r1
 801639a:	f7fd f8ac 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801639e:	4606      	mov	r6, r0
 80163a0:	b948      	cbnz	r0, 80163b6 <ecdsa_verify_restartable+0x11a>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 80163a2:	4629      	mov	r1, r5
 80163a4:	a805      	add	r0, sp, #20
 80163a6:	f7fc fc7c 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80163aa:	1e06      	subs	r6, r0, #0
 80163ac:	4b0d      	ldr	r3, [pc, #52]	; (80163e4 <ecdsa_verify_restartable+0x148>)
 80163ae:	bf18      	it	ne
 80163b0:	461e      	movne	r6, r3
 80163b2:	e000      	b.n	80163b6 <ecdsa_verify_restartable+0x11a>
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80163b4:	4e0b      	ldr	r6, [pc, #44]	; (80163e4 <ecdsa_verify_restartable+0x148>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 80163b6:	a805      	add	r0, sp, #20
 80163b8:	f000 fe11 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 80163bc:	a817      	add	r0, sp, #92	; 0x5c
 80163be:	f7fc f93a 	bl	8012636 <mbedtls_mpi_free>
 80163c2:	a814      	add	r0, sp, #80	; 0x50
 80163c4:	f7fc f937 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 80163c8:	a811      	add	r0, sp, #68	; 0x44
 80163ca:	f7fc f934 	bl	8012636 <mbedtls_mpi_free>
 80163ce:	a80e      	add	r0, sp, #56	; 0x38
 80163d0:	f7fc f931 	bl	8012636 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
}
 80163d4:	4630      	mov	r0, r6
 80163d6:	b01b      	add	sp, #108	; 0x6c
 80163d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80163dc:	4e01      	ldr	r6, [pc, #4]	; (80163e4 <ecdsa_verify_restartable+0x148>)
 80163de:	e7ea      	b.n	80163b6 <ecdsa_verify_restartable+0x11a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80163e0:	4e01      	ldr	r6, [pc, #4]	; (80163e8 <ecdsa_verify_restartable+0x14c>)
 80163e2:	e7f7      	b.n	80163d4 <ecdsa_verify_restartable+0x138>
 80163e4:	ffffb200 	.word	0xffffb200
 80163e8:	ffffb080 	.word	0xffffb080

080163ec <mbedtls_ecdsa_write_signature_restartable>:
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng,
                           mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80163ec:	b570      	push	{r4, r5, r6, lr}
 80163ee:	b0a8      	sub	sp, #160	; 0xa0
 80163f0:	4604      	mov	r4, r0
 80163f2:	4615      	mov	r5, r2
 80163f4:	461e      	mov	r6, r3
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );

    mbedtls_mpi_init( &r );
 80163f6:	a825      	add	r0, sp, #148	; 0x94
 80163f8:	f7fc f917 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80163fc:	a822      	add	r0, sp, #136	; 0x88
 80163fe:	f7fc f914 	bl	801262a <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_SIGN_ALT)
    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#else
    MBEDTLS_MPI_CHK( ecdsa_sign_restartable( &ctx->grp, &r, &s, &ctx->d,
 8016402:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016404:	9304      	str	r3, [sp, #16]
 8016406:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016408:	9303      	str	r3, [sp, #12]
 801640a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801640c:	9302      	str	r3, [sp, #8]
 801640e:	9601      	str	r6, [sp, #4]
 8016410:	9500      	str	r5, [sp, #0]
 8016412:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 8016416:	aa22      	add	r2, sp, #136	; 0x88
 8016418:	a925      	add	r1, sp, #148	; 0x94
 801641a:	4620      	mov	r0, r4
 801641c:	f7ff fe54 	bl	80160c8 <ecdsa_sign_restartable>
 8016420:	4605      	mov	r5, r0
 8016422:	b140      	cbz	r0, 8016436 <mbedtls_ecdsa_write_signature_restartable+0x4a>
#endif /* MBEDTLS_ECDSA_DETERMINISTIC */

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );

cleanup:
    mbedtls_mpi_free( &r );
 8016424:	a825      	add	r0, sp, #148	; 0x94
 8016426:	f7fc f906 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 801642a:	a822      	add	r0, sp, #136	; 0x88
 801642c:	f7fc f903 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 8016430:	4628      	mov	r0, r5
 8016432:	b028      	add	sp, #160	; 0xa0
 8016434:	bd70      	pop	{r4, r5, r6, pc}
    unsigned char *p = buf + sizeof( buf );
 8016436:	f10d 0385 	add.w	r3, sp, #133	; 0x85
 801643a:	9306      	str	r3, [sp, #24]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 801643c:	aa22      	add	r2, sp, #136	; 0x88
 801643e:	a907      	add	r1, sp, #28
 8016440:	a806      	add	r0, sp, #24
 8016442:	f7fb fed9 	bl	80121f8 <mbedtls_asn1_write_mpi>
 8016446:	1e04      	subs	r4, r0, #0
 8016448:	db1f      	blt.n	801648a <mbedtls_ecdsa_write_signature_restartable+0x9e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 801644a:	aa25      	add	r2, sp, #148	; 0x94
 801644c:	a907      	add	r1, sp, #28
 801644e:	a806      	add	r0, sp, #24
 8016450:	f7fb fed2 	bl	80121f8 <mbedtls_asn1_write_mpi>
 8016454:	2800      	cmp	r0, #0
 8016456:	db1a      	blt.n	801648e <mbedtls_ecdsa_write_signature_restartable+0xa2>
 8016458:	4404      	add	r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 801645a:	4622      	mov	r2, r4
 801645c:	a907      	add	r1, sp, #28
 801645e:	a806      	add	r0, sp, #24
 8016460:	f7fb fe36 	bl	80120d0 <mbedtls_asn1_write_len>
 8016464:	1e06      	subs	r6, r0, #0
 8016466:	db14      	blt.n	8016492 <mbedtls_ecdsa_write_signature_restartable+0xa6>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8016468:	2230      	movs	r2, #48	; 0x30
 801646a:	a907      	add	r1, sp, #28
 801646c:	a806      	add	r0, sp, #24
 801646e:	f7fb feb6 	bl	80121de <mbedtls_asn1_write_tag>
 8016472:	2800      	cmp	r0, #0
 8016474:	db0f      	blt.n	8016496 <mbedtls_ecdsa_write_signature_restartable+0xaa>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8016476:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8016478:	4404      	add	r4, r0
    memcpy( sig, p, len );
 801647a:	4622      	mov	r2, r4
 801647c:	9906      	ldr	r1, [sp, #24]
 801647e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8016480:	f014 f85b 	bl	802a53a <memcpy>
    *slen = len;
 8016484:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016486:	601c      	str	r4, [r3, #0]
    return( 0 );
 8016488:	e7cc      	b.n	8016424 <mbedtls_ecdsa_write_signature_restartable+0x38>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 801648a:	4625      	mov	r5, r4
 801648c:	e7ca      	b.n	8016424 <mbedtls_ecdsa_write_signature_restartable+0x38>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 801648e:	4605      	mov	r5, r0
 8016490:	e7c8      	b.n	8016424 <mbedtls_ecdsa_write_signature_restartable+0x38>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 8016492:	4635      	mov	r5, r6
 8016494:	e7c6      	b.n	8016424 <mbedtls_ecdsa_write_signature_restartable+0x38>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 8016496:	4605      	mov	r5, r0
cleanup:
 8016498:	e7c4      	b.n	8016424 <mbedtls_ecdsa_write_signature_restartable+0x38>

0801649a <mbedtls_ecdsa_write_signature>:
                                 mbedtls_md_type_t md_alg,
                                 const unsigned char *hash, size_t hlen,
                                 unsigned char *sig, size_t *slen,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 801649a:	b510      	push	{r4, lr}
 801649c:	b086      	sub	sp, #24
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );
    ECDSA_VALIDATE_RET( slen != NULL );
    return( mbedtls_ecdsa_write_signature_restartable(
 801649e:	2400      	movs	r4, #0
 80164a0:	9404      	str	r4, [sp, #16]
 80164a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80164a4:	9403      	str	r4, [sp, #12]
 80164a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80164a8:	9402      	str	r4, [sp, #8]
 80164aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80164ac:	9401      	str	r4, [sp, #4]
 80164ae:	9c08      	ldr	r4, [sp, #32]
 80164b0:	9400      	str	r4, [sp, #0]
 80164b2:	f7ff ff9b 	bl	80163ec <mbedtls_ecdsa_write_signature_restartable>
                ctx, md_alg, hash, hlen, sig, slen, f_rng, p_rng, NULL ) );
}
 80164b6:	b006      	add	sp, #24
 80164b8:	bd10      	pop	{r4, pc}
	...

080164bc <mbedtls_ecdsa_read_signature_restartable>:
 */
int mbedtls_ecdsa_read_signature_restartable( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen,
                          mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 80164bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164c0:	b08c      	sub	sp, #48	; 0x30
 80164c2:	4606      	mov	r6, r0
 80164c4:	460f      	mov	r7, r1
 80164c6:	4690      	mov	r8, r2
    int ret;
    unsigned char *p = (unsigned char *) sig;
 80164c8:	930b      	str	r3, [sp, #44]	; 0x2c
    const unsigned char *end = sig + slen;
 80164ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80164cc:	441c      	add	r4, r3
    mbedtls_mpi r, s;
    ECDSA_VALIDATE_RET( ctx  != NULL );
    ECDSA_VALIDATE_RET( hash != NULL );
    ECDSA_VALIDATE_RET( sig  != NULL );

    mbedtls_mpi_init( &r );
 80164ce:	a807      	add	r0, sp, #28
 80164d0:	f7fc f8ab 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80164d4:	a804      	add	r0, sp, #16
 80164d6:	f7fc f8a8 	bl	801262a <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80164da:	2330      	movs	r3, #48	; 0x30
 80164dc:	aa0a      	add	r2, sp, #40	; 0x28
 80164de:	4621      	mov	r1, r4
 80164e0:	a80b      	add	r0, sp, #44	; 0x2c
 80164e2:	f7fb fcb6 	bl	8011e52 <mbedtls_asn1_get_tag>
 80164e6:	b9b8      	cbnz	r0, 8016518 <mbedtls_ecdsa_read_signature_restartable+0x5c>
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    if( p + len != end )
 80164e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164ec:	4413      	add	r3, r2
 80164ee:	429c      	cmp	r4, r3
 80164f0:	d133      	bne.n	801655a <mbedtls_ecdsa_read_signature_restartable+0x9e>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
        goto cleanup;
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 80164f2:	aa07      	add	r2, sp, #28
 80164f4:	4621      	mov	r1, r4
 80164f6:	a80b      	add	r0, sp, #44	; 0x2c
 80164f8:	f7fb fd03 	bl	8011f02 <mbedtls_asn1_get_mpi>
 80164fc:	4605      	mov	r5, r0
 80164fe:	b170      	cbz	r0, 801651e <mbedtls_ecdsa_read_signature_restartable+0x62>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8016500:	f5a5 459f 	sub.w	r5, r5, #20352	; 0x4f80
     * error code if the valid signature is followed by more data. */
    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 8016504:	a807      	add	r0, sp, #28
 8016506:	f7fc f896 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 801650a:	a804      	add	r0, sp, #16
 801650c:	f7fc f893 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 8016510:	4628      	mov	r0, r5
 8016512:	b00c      	add	sp, #48	; 0x30
 8016514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8016518:	f5a0 459f 	sub.w	r5, r0, #20352	; 0x4f80
        goto cleanup;
 801651c:	e7f2      	b.n	8016504 <mbedtls_ecdsa_read_signature_restartable+0x48>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 801651e:	aa04      	add	r2, sp, #16
 8016520:	4621      	mov	r1, r4
 8016522:	a80b      	add	r0, sp, #44	; 0x2c
 8016524:	f7fb fced 	bl	8011f02 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 8016528:	4605      	mov	r5, r0
 801652a:	2800      	cmp	r0, #0
 801652c:	d1e8      	bne.n	8016500 <mbedtls_ecdsa_read_signature_restartable+0x44>
    if( ( ret = ecdsa_verify_restartable( &ctx->grp, hash, hlen,
 801652e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016530:	9302      	str	r3, [sp, #8]
 8016532:	ab04      	add	r3, sp, #16
 8016534:	9301      	str	r3, [sp, #4]
 8016536:	ab07      	add	r3, sp, #28
 8016538:	9300      	str	r3, [sp, #0]
 801653a:	f106 0388 	add.w	r3, r6, #136	; 0x88
 801653e:	4642      	mov	r2, r8
 8016540:	4639      	mov	r1, r7
 8016542:	4630      	mov	r0, r6
 8016544:	f7ff feaa 	bl	801629c <ecdsa_verify_restartable>
 8016548:	4605      	mov	r5, r0
 801654a:	2800      	cmp	r0, #0
 801654c:	d1da      	bne.n	8016504 <mbedtls_ecdsa_read_signature_restartable+0x48>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 801654e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016550:	4b03      	ldr	r3, [pc, #12]	; (8016560 <mbedtls_ecdsa_read_signature_restartable+0xa4>)
 8016552:	42a2      	cmp	r2, r4
 8016554:	bf18      	it	ne
 8016556:	461d      	movne	r5, r3
 8016558:	e7d4      	b.n	8016504 <mbedtls_ecdsa_read_signature_restartable+0x48>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 801655a:	4d02      	ldr	r5, [pc, #8]	; (8016564 <mbedtls_ecdsa_read_signature_restartable+0xa8>)
 801655c:	e7d2      	b.n	8016504 <mbedtls_ecdsa_read_signature_restartable+0x48>
 801655e:	bf00      	nop
 8016560:	ffffb400 	.word	0xffffb400
 8016564:	ffffb01a 	.word	0xffffb01a

08016568 <mbedtls_ecdsa_read_signature>:
{
 8016568:	b510      	push	{r4, lr}
 801656a:	b082      	sub	sp, #8
    return( mbedtls_ecdsa_read_signature_restartable(
 801656c:	2400      	movs	r4, #0
 801656e:	9401      	str	r4, [sp, #4]
 8016570:	9c04      	ldr	r4, [sp, #16]
 8016572:	9400      	str	r4, [sp, #0]
 8016574:	f7ff ffa2 	bl	80164bc <mbedtls_ecdsa_read_signature_restartable>
}
 8016578:	b002      	add	sp, #8
 801657a:	bd10      	pop	{r4, pc}

0801657c <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 801657c:	b508      	push	{r3, lr}
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 801657e:	f000 fd21 	bl	8016fc4 <mbedtls_ecp_keypair_init>
}
 8016582:	bd08      	pop	{r3, pc}

08016584 <mbedtls_ecdsa_free>:
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    if( ctx == NULL )
 8016584:	b118      	cbz	r0, 801658e <mbedtls_ecdsa_free+0xa>
{
 8016586:	b508      	push	{r3, lr}
        return;

    mbedtls_ecp_keypair_free( ctx );
 8016588:	f000 fd6a 	bl	8017060 <mbedtls_ecp_keypair_free>
}
 801658c:	bd08      	pop	{r3, pc}
 801658e:	4770      	bx	lr

08016590 <mbedtls_ecdsa_from_keypair>:
{
 8016590:	b570      	push	{r4, r5, r6, lr}
 8016592:	4604      	mov	r4, r0
 8016594:	460d      	mov	r5, r1
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 8016596:	f000 fd8c 	bl	80170b2 <mbedtls_ecp_group_copy>
 801659a:	4606      	mov	r6, r0
 801659c:	b938      	cbnz	r0, 80165ae <mbedtls_ecdsa_from_keypair+0x1e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 801659e:	f105 017c 	add.w	r1, r5, #124	; 0x7c
 80165a2:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80165a6:	f7fc f8bc 	bl	8012722 <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80165aa:	4606      	mov	r6, r0
 80165ac:	b120      	cbz	r0, 80165b8 <mbedtls_ecdsa_from_keypair+0x28>
        mbedtls_ecdsa_free( ctx );
 80165ae:	4620      	mov	r0, r4
 80165b0:	f7ff ffe8 	bl	8016584 <mbedtls_ecdsa_free>
}
 80165b4:	4630      	mov	r0, r6
 80165b6:	bd70      	pop	{r4, r5, r6, pc}
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 80165b8:	f105 0188 	add.w	r1, r5, #136	; 0x88
 80165bc:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80165c0:	f000 fd5d 	bl	801707e <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80165c4:	4606      	mov	r6, r0
 80165c6:	2800      	cmp	r0, #0
 80165c8:	d0f4      	beq.n	80165b4 <mbedtls_ecdsa_from_keypair+0x24>
 80165ca:	e7f0      	b.n	80165ae <mbedtls_ecdsa_from_keypair+0x1e>

080165cc <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 80165cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d0:	4604      	mov	r4, r0
 80165d2:	460d      	mov	r5, r1
    int ret;

    if( grp->modp == NULL )
 80165d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80165d6:	b313      	cbz	r3, 801661e <ecp_modp+0x52>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80165d8:	6803      	ldr	r3, [r0, #0]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	db25      	blt.n	801662a <ecp_modp+0x5e>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 80165de:	4620      	mov	r0, r4
 80165e0:	f7fc f955 	bl	801288e <mbedtls_mpi_bitlen>
 80165e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80165e6:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 80165ea:	d837      	bhi.n	801665c <ecp_modp+0x90>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 80165ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80165ee:	4620      	mov	r0, r4
 80165f0:	4798      	blx	r3
 80165f2:	4606      	mov	r6, r0
 80165f4:	bb78      	cbnz	r0, 8016656 <ecp_modp+0x8a>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80165f6:	2700      	movs	r7, #0
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 80165f8:	f105 0804 	add.w	r8, r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80165fc:	6823      	ldr	r3, [r4, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	da1a      	bge.n	8016638 <ecp_modp+0x6c>
 8016602:	4639      	mov	r1, r7
 8016604:	4620      	mov	r0, r4
 8016606:	f7fc fba4 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801660a:	b1a8      	cbz	r0, 8016638 <ecp_modp+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 801660c:	4642      	mov	r2, r8
 801660e:	4621      	mov	r1, r4
 8016610:	4620      	mov	r0, r4
 8016612:	f7fc fc4b 	bl	8012eac <mbedtls_mpi_add_mpi>
 8016616:	2800      	cmp	r0, #0
 8016618:	d0f0      	beq.n	80165fc <ecp_modp+0x30>
 801661a:	4606      	mov	r6, r0
 801661c:	e01b      	b.n	8016656 <ecp_modp+0x8a>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 801661e:	1d0a      	adds	r2, r1, #4
 8016620:	4601      	mov	r1, r0
 8016622:	f7fc ff68 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 8016626:	4606      	mov	r6, r0
 8016628:	e015      	b.n	8016656 <ecp_modp+0x8a>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 801662a:	2100      	movs	r1, #0
 801662c:	f7fc fb91 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016630:	2800      	cmp	r0, #0
 8016632:	d0d4      	beq.n	80165de <ecp_modp+0x12>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8016634:	4e0a      	ldr	r6, [pc, #40]	; (8016660 <ecp_modp+0x94>)
 8016636:	e00e      	b.n	8016656 <ecp_modp+0x8a>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 8016638:	3504      	adds	r5, #4
 801663a:	4629      	mov	r1, r5
 801663c:	4620      	mov	r0, r4
 801663e:	f7fc fb30 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8016642:	2800      	cmp	r0, #0
 8016644:	db07      	blt.n	8016656 <ecp_modp+0x8a>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8016646:	462a      	mov	r2, r5
 8016648:	4621      	mov	r1, r4
 801664a:	4620      	mov	r0, r4
 801664c:	f7fc fbf1 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8016650:	2800      	cmp	r0, #0
 8016652:	d0f2      	beq.n	801663a <ecp_modp+0x6e>
 8016654:	4606      	mov	r6, r0

cleanup:
    return( ret );
}
 8016656:	4630      	mov	r0, r6
 8016658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801665c:	4e00      	ldr	r6, [pc, #0]	; (8016660 <ecp_modp+0x94>)
 801665e:	e7fa      	b.n	8016656 <ecp_modp+0x8a>
 8016660:	ffffb080 	.word	0xffffb080

08016664 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 8016664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016668:	b08c      	sub	sp, #48	; 0x30
 801666a:	4605      	mov	r5, r0
 801666c:	460f      	mov	r7, r1
 801666e:	4614      	mov	r4, r2
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8016670:	a809      	add	r0, sp, #36	; 0x24
 8016672:	f7fb ffda 	bl	801262a <mbedtls_mpi_init>
 8016676:	a806      	add	r0, sp, #24
 8016678:	f7fb ffd7 	bl	801262a <mbedtls_mpi_init>
 801667c:	a803      	add	r0, sp, #12
 801667e:	f7fb ffd4 	bl	801262a <mbedtls_mpi_init>
 8016682:	4668      	mov	r0, sp
 8016684:	f7fb ffd1 	bl	801262a <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 8016688:	69ab      	ldr	r3, [r5, #24]
 801668a:	b1bb      	cbz	r3, 80166bc <ecp_double_jac+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 801668c:	4622      	mov	r2, r4
 801668e:	4621      	mov	r1, r4
 8016690:	a806      	add	r0, sp, #24
 8016692:	f7fc fc87 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016696:	4606      	mov	r6, r0
 8016698:	2800      	cmp	r0, #0
 801669a:	d079      	beq.n	8016790 <ecp_double_jac+0x12c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );

cleanup:
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 801669c:	a809      	add	r0, sp, #36	; 0x24
 801669e:	f7fb ffca 	bl	8012636 <mbedtls_mpi_free>
 80166a2:	a806      	add	r0, sp, #24
 80166a4:	f7fb ffc7 	bl	8012636 <mbedtls_mpi_free>
 80166a8:	a803      	add	r0, sp, #12
 80166aa:	f7fb ffc4 	bl	8012636 <mbedtls_mpi_free>
 80166ae:	4668      	mov	r0, sp
 80166b0:	f7fb ffc1 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 80166b4:	4630      	mov	r0, r6
 80166b6:	b00c      	add	sp, #48	; 0x30
 80166b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80166bc:	f104 0118 	add.w	r1, r4, #24
 80166c0:	460a      	mov	r2, r1
 80166c2:	a806      	add	r0, sp, #24
 80166c4:	f7fc fc6e 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80166c8:	4606      	mov	r6, r0
 80166ca:	2800      	cmp	r0, #0
 80166cc:	d1e6      	bne.n	801669c <ecp_double_jac+0x38>
 80166ce:	4629      	mov	r1, r5
 80166d0:	a806      	add	r0, sp, #24
 80166d2:	f7ff ff7b 	bl	80165cc <ecp_modp>
 80166d6:	4606      	mov	r6, r0
 80166d8:	2800      	cmp	r0, #0
 80166da:	d1df      	bne.n	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80166dc:	aa06      	add	r2, sp, #24
 80166de:	4621      	mov	r1, r4
 80166e0:	a803      	add	r0, sp, #12
 80166e2:	f7fc fbe3 	bl	8012eac <mbedtls_mpi_add_mpi>
 80166e6:	4606      	mov	r6, r0
 80166e8:	2800      	cmp	r0, #0
 80166ea:	d1d7      	bne.n	801669c <ecp_double_jac+0x38>
 80166ec:	f105 0804 	add.w	r8, r5, #4
 80166f0:	4641      	mov	r1, r8
 80166f2:	a803      	add	r0, sp, #12
 80166f4:	f7fc fad5 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	db08      	blt.n	801670e <ecp_double_jac+0xaa>
 80166fc:	4642      	mov	r2, r8
 80166fe:	a903      	add	r1, sp, #12
 8016700:	4608      	mov	r0, r1
 8016702:	f7fc fb96 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8016706:	4606      	mov	r6, r0
 8016708:	2800      	cmp	r0, #0
 801670a:	d0f1      	beq.n	80166f0 <ecp_double_jac+0x8c>
 801670c:	e7c6      	b.n	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 801670e:	aa06      	add	r2, sp, #24
 8016710:	4621      	mov	r1, r4
 8016712:	4668      	mov	r0, sp
 8016714:	f7fc fbf0 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8016718:	4606      	mov	r6, r0
 801671a:	2800      	cmp	r0, #0
 801671c:	d1be      	bne.n	801669c <ecp_double_jac+0x38>
 801671e:	f04f 0900 	mov.w	r9, #0
 8016722:	9b00      	ldr	r3, [sp, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	da0d      	bge.n	8016744 <ecp_double_jac+0xe0>
 8016728:	4649      	mov	r1, r9
 801672a:	4668      	mov	r0, sp
 801672c:	f7fc fb11 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016730:	b140      	cbz	r0, 8016744 <ecp_double_jac+0xe0>
 8016732:	4642      	mov	r2, r8
 8016734:	4669      	mov	r1, sp
 8016736:	4668      	mov	r0, sp
 8016738:	f7fc fbb8 	bl	8012eac <mbedtls_mpi_add_mpi>
 801673c:	4606      	mov	r6, r0
 801673e:	2800      	cmp	r0, #0
 8016740:	d0ef      	beq.n	8016722 <ecp_double_jac+0xbe>
 8016742:	e7ab      	b.n	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8016744:	466a      	mov	r2, sp
 8016746:	a903      	add	r1, sp, #12
 8016748:	a806      	add	r0, sp, #24
 801674a:	f7fc fc2b 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801674e:	4606      	mov	r6, r0
 8016750:	2800      	cmp	r0, #0
 8016752:	d1a3      	bne.n	801669c <ecp_double_jac+0x38>
 8016754:	4629      	mov	r1, r5
 8016756:	a806      	add	r0, sp, #24
 8016758:	f7ff ff38 	bl	80165cc <ecp_modp>
 801675c:	4606      	mov	r6, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	d19c      	bne.n	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8016762:	2203      	movs	r2, #3
 8016764:	a906      	add	r1, sp, #24
 8016766:	a809      	add	r0, sp, #36	; 0x24
 8016768:	f7fc fc84 	bl	8013074 <mbedtls_mpi_mul_int>
 801676c:	4606      	mov	r6, r0
 801676e:	2800      	cmp	r0, #0
 8016770:	d194      	bne.n	801669c <ecp_double_jac+0x38>
 8016772:	4641      	mov	r1, r8
 8016774:	a809      	add	r0, sp, #36	; 0x24
 8016776:	f7fc fa94 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801677a:	2800      	cmp	r0, #0
 801677c:	db31      	blt.n	80167e2 <ecp_double_jac+0x17e>
 801677e:	4642      	mov	r2, r8
 8016780:	a909      	add	r1, sp, #36	; 0x24
 8016782:	4608      	mov	r0, r1
 8016784:	f7fc fb55 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8016788:	4606      	mov	r6, r0
 801678a:	2800      	cmp	r0, #0
 801678c:	d0f1      	beq.n	8016772 <ecp_double_jac+0x10e>
 801678e:	e785      	b.n	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8016790:	4629      	mov	r1, r5
 8016792:	a806      	add	r0, sp, #24
 8016794:	f7ff ff1a 	bl	80165cc <ecp_modp>
 8016798:	4606      	mov	r6, r0
 801679a:	2800      	cmp	r0, #0
 801679c:	f47f af7e 	bne.w	801669c <ecp_double_jac+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80167a0:	2203      	movs	r2, #3
 80167a2:	a906      	add	r1, sp, #24
 80167a4:	a809      	add	r0, sp, #36	; 0x24
 80167a6:	f7fc fc65 	bl	8013074 <mbedtls_mpi_mul_int>
 80167aa:	4606      	mov	r6, r0
 80167ac:	2800      	cmp	r0, #0
 80167ae:	f47f af75 	bne.w	801669c <ecp_double_jac+0x38>
 80167b2:	f105 0804 	add.w	r8, r5, #4
 80167b6:	4641      	mov	r1, r8
 80167b8:	a809      	add	r0, sp, #36	; 0x24
 80167ba:	f7fc fa72 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80167be:	2800      	cmp	r0, #0
 80167c0:	db08      	blt.n	80167d4 <ecp_double_jac+0x170>
 80167c2:	4642      	mov	r2, r8
 80167c4:	a909      	add	r1, sp, #36	; 0x24
 80167c6:	4608      	mov	r0, r1
 80167c8:	f7fc fb33 	bl	8012e32 <mbedtls_mpi_sub_abs>
 80167cc:	4606      	mov	r6, r0
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d0f1      	beq.n	80167b6 <ecp_double_jac+0x152>
 80167d2:	e763      	b.n	801669c <ecp_double_jac+0x38>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 80167d4:	f105 0910 	add.w	r9, r5, #16
 80167d8:	2100      	movs	r1, #0
 80167da:	4648      	mov	r0, r9
 80167dc:	f7fc fab9 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80167e0:	bb58      	cbnz	r0, 801683a <ecp_double_jac+0x1d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80167e2:	f104 090c 	add.w	r9, r4, #12
 80167e6:	464a      	mov	r2, r9
 80167e8:	4649      	mov	r1, r9
 80167ea:	a803      	add	r0, sp, #12
 80167ec:	f7fc fbda 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80167f0:	4606      	mov	r6, r0
 80167f2:	2800      	cmp	r0, #0
 80167f4:	f47f af52 	bne.w	801669c <ecp_double_jac+0x38>
 80167f8:	4629      	mov	r1, r5
 80167fa:	a803      	add	r0, sp, #12
 80167fc:	f7ff fee6 	bl	80165cc <ecp_modp>
 8016800:	4606      	mov	r6, r0
 8016802:	2800      	cmp	r0, #0
 8016804:	f47f af4a 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8016808:	2101      	movs	r1, #1
 801680a:	a803      	add	r0, sp, #12
 801680c:	f7fc f8df 	bl	80129ce <mbedtls_mpi_shift_l>
 8016810:	4606      	mov	r6, r0
 8016812:	2800      	cmp	r0, #0
 8016814:	f47f af42 	bne.w	801669c <ecp_double_jac+0x38>
 8016818:	f105 0804 	add.w	r8, r5, #4
 801681c:	4641      	mov	r1, r8
 801681e:	a803      	add	r0, sp, #12
 8016820:	f7fc fa3f 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8016824:	2800      	cmp	r0, #0
 8016826:	db54      	blt.n	80168d2 <ecp_double_jac+0x26e>
 8016828:	4642      	mov	r2, r8
 801682a:	a903      	add	r1, sp, #12
 801682c:	4608      	mov	r0, r1
 801682e:	f7fc fb00 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8016832:	4606      	mov	r6, r0
 8016834:	2800      	cmp	r0, #0
 8016836:	d0f1      	beq.n	801681c <ecp_double_jac+0x1b8>
 8016838:	e730      	b.n	801669c <ecp_double_jac+0x38>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801683a:	f104 0118 	add.w	r1, r4, #24
 801683e:	460a      	mov	r2, r1
 8016840:	a806      	add	r0, sp, #24
 8016842:	f7fc fbaf 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016846:	4606      	mov	r6, r0
 8016848:	2800      	cmp	r0, #0
 801684a:	f47f af27 	bne.w	801669c <ecp_double_jac+0x38>
 801684e:	4629      	mov	r1, r5
 8016850:	a806      	add	r0, sp, #24
 8016852:	f7ff febb 	bl	80165cc <ecp_modp>
 8016856:	4606      	mov	r6, r0
 8016858:	2800      	cmp	r0, #0
 801685a:	f47f af1f 	bne.w	801669c <ecp_double_jac+0x38>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 801685e:	aa06      	add	r2, sp, #24
 8016860:	4611      	mov	r1, r2
 8016862:	a803      	add	r0, sp, #12
 8016864:	f7fc fb9e 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016868:	4606      	mov	r6, r0
 801686a:	2800      	cmp	r0, #0
 801686c:	f47f af16 	bne.w	801669c <ecp_double_jac+0x38>
 8016870:	4629      	mov	r1, r5
 8016872:	a803      	add	r0, sp, #12
 8016874:	f7ff feaa 	bl	80165cc <ecp_modp>
 8016878:	4606      	mov	r6, r0
 801687a:	2800      	cmp	r0, #0
 801687c:	f47f af0e 	bne.w	801669c <ecp_double_jac+0x38>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8016880:	464a      	mov	r2, r9
 8016882:	a903      	add	r1, sp, #12
 8016884:	a806      	add	r0, sp, #24
 8016886:	f7fc fb8d 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801688a:	4606      	mov	r6, r0
 801688c:	2800      	cmp	r0, #0
 801688e:	f47f af05 	bne.w	801669c <ecp_double_jac+0x38>
 8016892:	4629      	mov	r1, r5
 8016894:	a806      	add	r0, sp, #24
 8016896:	f7ff fe99 	bl	80165cc <ecp_modp>
 801689a:	4606      	mov	r6, r0
 801689c:	2800      	cmp	r0, #0
 801689e:	f47f aefd 	bne.w	801669c <ecp_double_jac+0x38>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 80168a2:	aa06      	add	r2, sp, #24
 80168a4:	a909      	add	r1, sp, #36	; 0x24
 80168a6:	4608      	mov	r0, r1
 80168a8:	f7fc fb00 	bl	8012eac <mbedtls_mpi_add_mpi>
 80168ac:	4606      	mov	r6, r0
 80168ae:	2800      	cmp	r0, #0
 80168b0:	f47f aef4 	bne.w	801669c <ecp_double_jac+0x38>
 80168b4:	4641      	mov	r1, r8
 80168b6:	a809      	add	r0, sp, #36	; 0x24
 80168b8:	f7fc f9f3 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80168bc:	2800      	cmp	r0, #0
 80168be:	db90      	blt.n	80167e2 <ecp_double_jac+0x17e>
 80168c0:	4642      	mov	r2, r8
 80168c2:	a909      	add	r1, sp, #36	; 0x24
 80168c4:	4608      	mov	r0, r1
 80168c6:	f7fc fab4 	bl	8012e32 <mbedtls_mpi_sub_abs>
 80168ca:	4606      	mov	r6, r0
 80168cc:	2800      	cmp	r0, #0
 80168ce:	d0f1      	beq.n	80168b4 <ecp_double_jac+0x250>
 80168d0:	e6e4      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 80168d2:	aa03      	add	r2, sp, #12
 80168d4:	4621      	mov	r1, r4
 80168d6:	a806      	add	r0, sp, #24
 80168d8:	f7fc fb64 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80168dc:	4606      	mov	r6, r0
 80168de:	2800      	cmp	r0, #0
 80168e0:	f47f aedc 	bne.w	801669c <ecp_double_jac+0x38>
 80168e4:	4629      	mov	r1, r5
 80168e6:	a806      	add	r0, sp, #24
 80168e8:	f7ff fe70 	bl	80165cc <ecp_modp>
 80168ec:	4606      	mov	r6, r0
 80168ee:	2800      	cmp	r0, #0
 80168f0:	f47f aed4 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80168f4:	2101      	movs	r1, #1
 80168f6:	a806      	add	r0, sp, #24
 80168f8:	f7fc f869 	bl	80129ce <mbedtls_mpi_shift_l>
 80168fc:	4606      	mov	r6, r0
 80168fe:	2800      	cmp	r0, #0
 8016900:	f47f aecc 	bne.w	801669c <ecp_double_jac+0x38>
 8016904:	4641      	mov	r1, r8
 8016906:	a806      	add	r0, sp, #24
 8016908:	f7fc f9cb 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801690c:	2800      	cmp	r0, #0
 801690e:	db08      	blt.n	8016922 <ecp_double_jac+0x2be>
 8016910:	4642      	mov	r2, r8
 8016912:	a906      	add	r1, sp, #24
 8016914:	4608      	mov	r0, r1
 8016916:	f7fc fa8c 	bl	8012e32 <mbedtls_mpi_sub_abs>
 801691a:	4606      	mov	r6, r0
 801691c:	2800      	cmp	r0, #0
 801691e:	d0f1      	beq.n	8016904 <ecp_double_jac+0x2a0>
 8016920:	e6bc      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 8016922:	aa03      	add	r2, sp, #12
 8016924:	4611      	mov	r1, r2
 8016926:	4668      	mov	r0, sp
 8016928:	f7fc fb3c 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801692c:	4606      	mov	r6, r0
 801692e:	2800      	cmp	r0, #0
 8016930:	f47f aeb4 	bne.w	801669c <ecp_double_jac+0x38>
 8016934:	4629      	mov	r1, r5
 8016936:	4668      	mov	r0, sp
 8016938:	f7ff fe48 	bl	80165cc <ecp_modp>
 801693c:	4606      	mov	r6, r0
 801693e:	2800      	cmp	r0, #0
 8016940:	f47f aeac 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8016944:	2101      	movs	r1, #1
 8016946:	4668      	mov	r0, sp
 8016948:	f7fc f841 	bl	80129ce <mbedtls_mpi_shift_l>
 801694c:	4606      	mov	r6, r0
 801694e:	2800      	cmp	r0, #0
 8016950:	f47f aea4 	bne.w	801669c <ecp_double_jac+0x38>
 8016954:	4641      	mov	r1, r8
 8016956:	4668      	mov	r0, sp
 8016958:	f7fc f9a3 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801695c:	2800      	cmp	r0, #0
 801695e:	db08      	blt.n	8016972 <ecp_double_jac+0x30e>
 8016960:	4642      	mov	r2, r8
 8016962:	4669      	mov	r1, sp
 8016964:	4668      	mov	r0, sp
 8016966:	f7fc fa64 	bl	8012e32 <mbedtls_mpi_sub_abs>
 801696a:	4606      	mov	r6, r0
 801696c:	2800      	cmp	r0, #0
 801696e:	d0f1      	beq.n	8016954 <ecp_double_jac+0x2f0>
 8016970:	e694      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8016972:	aa09      	add	r2, sp, #36	; 0x24
 8016974:	4611      	mov	r1, r2
 8016976:	a803      	add	r0, sp, #12
 8016978:	f7fc fb14 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801697c:	4606      	mov	r6, r0
 801697e:	2800      	cmp	r0, #0
 8016980:	f47f ae8c 	bne.w	801669c <ecp_double_jac+0x38>
 8016984:	4629      	mov	r1, r5
 8016986:	a803      	add	r0, sp, #12
 8016988:	f7ff fe20 	bl	80165cc <ecp_modp>
 801698c:	4606      	mov	r6, r0
 801698e:	2800      	cmp	r0, #0
 8016990:	f47f ae84 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8016994:	aa06      	add	r2, sp, #24
 8016996:	a903      	add	r1, sp, #12
 8016998:	4608      	mov	r0, r1
 801699a:	f7fc faad 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801699e:	4606      	mov	r6, r0
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f47f ae7b 	bne.w	801669c <ecp_double_jac+0x38>
 80169a6:	f04f 0a00 	mov.w	sl, #0
 80169aa:	9b03      	ldr	r3, [sp, #12]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	da0d      	bge.n	80169cc <ecp_double_jac+0x368>
 80169b0:	4651      	mov	r1, sl
 80169b2:	a803      	add	r0, sp, #12
 80169b4:	f7fc f9cd 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80169b8:	b140      	cbz	r0, 80169cc <ecp_double_jac+0x368>
 80169ba:	4642      	mov	r2, r8
 80169bc:	a903      	add	r1, sp, #12
 80169be:	4608      	mov	r0, r1
 80169c0:	f7fc fa74 	bl	8012eac <mbedtls_mpi_add_mpi>
 80169c4:	4606      	mov	r6, r0
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d0ef      	beq.n	80169aa <ecp_double_jac+0x346>
 80169ca:	e667      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80169cc:	aa06      	add	r2, sp, #24
 80169ce:	a903      	add	r1, sp, #12
 80169d0:	4608      	mov	r0, r1
 80169d2:	f7fc fa91 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 80169d6:	4606      	mov	r6, r0
 80169d8:	2800      	cmp	r0, #0
 80169da:	f47f ae5f 	bne.w	801669c <ecp_double_jac+0x38>
 80169de:	f04f 0a00 	mov.w	sl, #0
 80169e2:	9b03      	ldr	r3, [sp, #12]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	da0d      	bge.n	8016a04 <ecp_double_jac+0x3a0>
 80169e8:	4651      	mov	r1, sl
 80169ea:	a803      	add	r0, sp, #12
 80169ec:	f7fc f9b1 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80169f0:	b140      	cbz	r0, 8016a04 <ecp_double_jac+0x3a0>
 80169f2:	4642      	mov	r2, r8
 80169f4:	a903      	add	r1, sp, #12
 80169f6:	4608      	mov	r0, r1
 80169f8:	f7fc fa58 	bl	8012eac <mbedtls_mpi_add_mpi>
 80169fc:	4606      	mov	r6, r0
 80169fe:	2800      	cmp	r0, #0
 8016a00:	d0ef      	beq.n	80169e2 <ecp_double_jac+0x37e>
 8016a02:	e64b      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8016a04:	aa03      	add	r2, sp, #12
 8016a06:	a906      	add	r1, sp, #24
 8016a08:	4608      	mov	r0, r1
 8016a0a:	f7fc fa75 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8016a0e:	4606      	mov	r6, r0
 8016a10:	2800      	cmp	r0, #0
 8016a12:	f47f ae43 	bne.w	801669c <ecp_double_jac+0x38>
 8016a16:	f04f 0a00 	mov.w	sl, #0
 8016a1a:	9b06      	ldr	r3, [sp, #24]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	da0d      	bge.n	8016a3c <ecp_double_jac+0x3d8>
 8016a20:	4651      	mov	r1, sl
 8016a22:	a806      	add	r0, sp, #24
 8016a24:	f7fc f995 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016a28:	b140      	cbz	r0, 8016a3c <ecp_double_jac+0x3d8>
 8016a2a:	4642      	mov	r2, r8
 8016a2c:	a906      	add	r1, sp, #24
 8016a2e:	4608      	mov	r0, r1
 8016a30:	f7fc fa3c 	bl	8012eac <mbedtls_mpi_add_mpi>
 8016a34:	4606      	mov	r6, r0
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d0ef      	beq.n	8016a1a <ecp_double_jac+0x3b6>
 8016a3a:	e62f      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8016a3c:	aa09      	add	r2, sp, #36	; 0x24
 8016a3e:	a906      	add	r1, sp, #24
 8016a40:	4608      	mov	r0, r1
 8016a42:	f7fc faaf 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016a46:	4606      	mov	r6, r0
 8016a48:	2800      	cmp	r0, #0
 8016a4a:	f47f ae27 	bne.w	801669c <ecp_double_jac+0x38>
 8016a4e:	4629      	mov	r1, r5
 8016a50:	a806      	add	r0, sp, #24
 8016a52:	f7ff fdbb 	bl	80165cc <ecp_modp>
 8016a56:	4606      	mov	r6, r0
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	f47f ae1f 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8016a5e:	466a      	mov	r2, sp
 8016a60:	a906      	add	r1, sp, #24
 8016a62:	4608      	mov	r0, r1
 8016a64:	f7fc fa48 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8016a68:	4606      	mov	r6, r0
 8016a6a:	2800      	cmp	r0, #0
 8016a6c:	f47f ae16 	bne.w	801669c <ecp_double_jac+0x38>
 8016a70:	f04f 0a00 	mov.w	sl, #0
 8016a74:	9b06      	ldr	r3, [sp, #24]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	da0d      	bge.n	8016a96 <ecp_double_jac+0x432>
 8016a7a:	4651      	mov	r1, sl
 8016a7c:	a806      	add	r0, sp, #24
 8016a7e:	f7fc f968 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016a82:	b140      	cbz	r0, 8016a96 <ecp_double_jac+0x432>
 8016a84:	4642      	mov	r2, r8
 8016a86:	a906      	add	r1, sp, #24
 8016a88:	4608      	mov	r0, r1
 8016a8a:	f7fc fa0f 	bl	8012eac <mbedtls_mpi_add_mpi>
 8016a8e:	4606      	mov	r6, r0
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d0ef      	beq.n	8016a74 <ecp_double_jac+0x410>
 8016a94:	e602      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 8016a96:	f104 0218 	add.w	r2, r4, #24
 8016a9a:	4649      	mov	r1, r9
 8016a9c:	4668      	mov	r0, sp
 8016a9e:	f7fc fa81 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016aa2:	4606      	mov	r6, r0
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	f47f adf9 	bne.w	801669c <ecp_double_jac+0x38>
 8016aaa:	4629      	mov	r1, r5
 8016aac:	4668      	mov	r0, sp
 8016aae:	f7ff fd8d 	bl	80165cc <ecp_modp>
 8016ab2:	4606      	mov	r6, r0
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	f47f adf1 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8016aba:	2101      	movs	r1, #1
 8016abc:	4668      	mov	r0, sp
 8016abe:	f7fb ff86 	bl	80129ce <mbedtls_mpi_shift_l>
 8016ac2:	4606      	mov	r6, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	f47f ade9 	bne.w	801669c <ecp_double_jac+0x38>
 8016aca:	4641      	mov	r1, r8
 8016acc:	4668      	mov	r0, sp
 8016ace:	f7fc f8e8 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	db08      	blt.n	8016ae8 <ecp_double_jac+0x484>
 8016ad6:	4642      	mov	r2, r8
 8016ad8:	4669      	mov	r1, sp
 8016ada:	4668      	mov	r0, sp
 8016adc:	f7fc f9a9 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	2800      	cmp	r0, #0
 8016ae4:	d0f1      	beq.n	8016aca <ecp_double_jac+0x466>
 8016ae6:	e5d9      	b.n	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 8016ae8:	a903      	add	r1, sp, #12
 8016aea:	4638      	mov	r0, r7
 8016aec:	f7fb fe19 	bl	8012722 <mbedtls_mpi_copy>
 8016af0:	4606      	mov	r6, r0
 8016af2:	2800      	cmp	r0, #0
 8016af4:	f47f add2 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 8016af8:	a906      	add	r1, sp, #24
 8016afa:	f107 000c 	add.w	r0, r7, #12
 8016afe:	f7fb fe10 	bl	8012722 <mbedtls_mpi_copy>
 8016b02:	4606      	mov	r6, r0
 8016b04:	2800      	cmp	r0, #0
 8016b06:	f47f adc9 	bne.w	801669c <ecp_double_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 8016b0a:	4669      	mov	r1, sp
 8016b0c:	f107 0018 	add.w	r0, r7, #24
 8016b10:	f7fb fe07 	bl	8012722 <mbedtls_mpi_copy>
 8016b14:	4606      	mov	r6, r0
cleanup:
 8016b16:	e5c1      	b.n	801669c <ecp_double_jac+0x38>

08016b18 <ecp_normalize_jac>:
{
 8016b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b1a:	b087      	sub	sp, #28
 8016b1c:	4607      	mov	r7, r0
 8016b1e:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8016b20:	f101 0618 	add.w	r6, r1, #24
 8016b24:	2100      	movs	r1, #0
 8016b26:	4630      	mov	r0, r6
 8016b28:	f7fc f913 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8016b2c:	4605      	mov	r5, r0
 8016b2e:	b910      	cbnz	r0, 8016b36 <ecp_normalize_jac+0x1e>
}
 8016b30:	4628      	mov	r0, r5
 8016b32:	b007      	add	sp, #28
 8016b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8016b36:	a803      	add	r0, sp, #12
 8016b38:	f7fb fd77 	bl	801262a <mbedtls_mpi_init>
 8016b3c:	4668      	mov	r0, sp
 8016b3e:	f7fb fd74 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8016b42:	1d3a      	adds	r2, r7, #4
 8016b44:	4631      	mov	r1, r6
 8016b46:	a803      	add	r0, sp, #12
 8016b48:	f7fd f83c 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 8016b4c:	4605      	mov	r5, r0
 8016b4e:	b130      	cbz	r0, 8016b5e <ecp_normalize_jac+0x46>
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8016b50:	a803      	add	r0, sp, #12
 8016b52:	f7fb fd70 	bl	8012636 <mbedtls_mpi_free>
 8016b56:	4668      	mov	r0, sp
 8016b58:	f7fb fd6d 	bl	8012636 <mbedtls_mpi_free>
    return( ret );
 8016b5c:	e7e8      	b.n	8016b30 <ecp_normalize_jac+0x18>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8016b5e:	aa03      	add	r2, sp, #12
 8016b60:	4611      	mov	r1, r2
 8016b62:	4668      	mov	r0, sp
 8016b64:	f7fc fa1e 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016b68:	4605      	mov	r5, r0
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	d1f0      	bne.n	8016b50 <ecp_normalize_jac+0x38>
 8016b6e:	4639      	mov	r1, r7
 8016b70:	4668      	mov	r0, sp
 8016b72:	f7ff fd2b 	bl	80165cc <ecp_modp>
 8016b76:	4605      	mov	r5, r0
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	d1e9      	bne.n	8016b50 <ecp_normalize_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8016b7c:	466a      	mov	r2, sp
 8016b7e:	4621      	mov	r1, r4
 8016b80:	4620      	mov	r0, r4
 8016b82:	f7fc fa0f 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016b86:	4605      	mov	r5, r0
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	d1e1      	bne.n	8016b50 <ecp_normalize_jac+0x38>
 8016b8c:	4639      	mov	r1, r7
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f7ff fd1c 	bl	80165cc <ecp_modp>
 8016b94:	4605      	mov	r5, r0
 8016b96:	2800      	cmp	r0, #0
 8016b98:	d1da      	bne.n	8016b50 <ecp_normalize_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8016b9a:	340c      	adds	r4, #12
 8016b9c:	466a      	mov	r2, sp
 8016b9e:	4621      	mov	r1, r4
 8016ba0:	4620      	mov	r0, r4
 8016ba2:	f7fc f9ff 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	d1d1      	bne.n	8016b50 <ecp_normalize_jac+0x38>
 8016bac:	4639      	mov	r1, r7
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f7ff fd0c 	bl	80165cc <ecp_modp>
 8016bb4:	4605      	mov	r5, r0
 8016bb6:	2800      	cmp	r0, #0
 8016bb8:	d1ca      	bne.n	8016b50 <ecp_normalize_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8016bba:	aa03      	add	r2, sp, #12
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f7fc f9f0 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016bc4:	4605      	mov	r5, r0
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	d1c2      	bne.n	8016b50 <ecp_normalize_jac+0x38>
 8016bca:	4639      	mov	r1, r7
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f7ff fcfd 	bl	80165cc <ecp_modp>
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d1bb      	bne.n	8016b50 <ecp_normalize_jac+0x38>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8016bd8:	2101      	movs	r1, #1
 8016bda:	4630      	mov	r0, r6
 8016bdc:	f7fb fe0a 	bl	80127f4 <mbedtls_mpi_lset>
 8016be0:	4605      	mov	r5, r0
cleanup:
 8016be2:	e7b5      	b.n	8016b50 <ecp_normalize_jac+0x38>

08016be4 <ecp_normalize_jac_many>:
{
 8016be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be8:	b08f      	sub	sp, #60	; 0x3c
 8016bea:	4681      	mov	r9, r0
 8016bec:	9102      	str	r1, [sp, #8]
    if( T_size < 2 )
 8016bee:	2a01      	cmp	r2, #1
 8016bf0:	d930      	bls.n	8016c54 <ecp_normalize_jac_many+0x70>
 8016bf2:	4692      	mov	sl, r2
    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 8016bf4:	210c      	movs	r1, #12
 8016bf6:	4610      	mov	r0, r2
 8016bf8:	f012 f948 	bl	8028e8c <mbedtls_calloc>
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	9001      	str	r0, [sp, #4]
 8016c00:	2800      	cmp	r0, #0
 8016c02:	f000 8125 	beq.w	8016e50 <ecp_normalize_jac_many+0x26c>
 8016c06:	4604      	mov	r4, r0
 8016c08:	eb0a 064a 	add.w	r6, sl, sl, lsl #1
 8016c0c:	00b3      	lsls	r3, r6, #2
 8016c0e:	9303      	str	r3, [sp, #12]
 8016c10:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        mbedtls_mpi_init( &c[i] );
 8016c14:	4628      	mov	r0, r5
 8016c16:	f7fb fd08 	bl	801262a <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 8016c1a:	350c      	adds	r5, #12
 8016c1c:	42b5      	cmp	r5, r6
 8016c1e:	d1f9      	bne.n	8016c14 <ecp_normalize_jac_many+0x30>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8016c20:	a80b      	add	r0, sp, #44	; 0x2c
 8016c22:	f7fb fd02 	bl	801262a <mbedtls_mpi_init>
 8016c26:	a808      	add	r0, sp, #32
 8016c28:	f7fb fcff 	bl	801262a <mbedtls_mpi_init>
 8016c2c:	a805      	add	r0, sp, #20
 8016c2e:	f7fb fcfc 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8016c32:	9d02      	ldr	r5, [sp, #8]
 8016c34:	6829      	ldr	r1, [r5, #0]
 8016c36:	3118      	adds	r1, #24
 8016c38:	9f01      	ldr	r7, [sp, #4]
 8016c3a:	4638      	mov	r0, r7
 8016c3c:	f7fb fd71 	bl	8012722 <mbedtls_mpi_copy>
 8016c40:	4683      	mov	fp, r0
 8016c42:	2800      	cmp	r0, #0
 8016c44:	f040 80c2 	bne.w	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016c48:	46ab      	mov	fp, r5
 8016c4a:	f107 050c 	add.w	r5, r7, #12
    for( i = 1; i < T_size; i++ )
 8016c4e:	f04f 0801 	mov.w	r8, #1
 8016c52:	e005      	b.n	8016c60 <ecp_normalize_jac_many+0x7c>
        return( ecp_normalize_jac( grp, *T ) );
 8016c54:	6809      	ldr	r1, [r1, #0]
 8016c56:	f7ff ff5f 	bl	8016b18 <ecp_normalize_jac>
 8016c5a:	4683      	mov	fp, r0
 8016c5c:	e0c8      	b.n	8016df0 <ecp_normalize_jac_many+0x20c>
    for( i = 1; i < T_size; i++ )
 8016c5e:	46b8      	mov	r8, r7
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8016c60:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 8016c64:	3218      	adds	r2, #24
 8016c66:	f1a5 010c 	sub.w	r1, r5, #12
 8016c6a:	4628      	mov	r0, r5
 8016c6c:	f7fc f99a 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016c70:	2800      	cmp	r0, #0
 8016c72:	f040 80aa 	bne.w	8016dca <ecp_normalize_jac_many+0x1e6>
        MOD_MUL( c[i] );
 8016c76:	4649      	mov	r1, r9
 8016c78:	4628      	mov	r0, r5
 8016c7a:	f7ff fca7 	bl	80165cc <ecp_modp>
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	f040 80ba 	bne.w	8016df8 <ecp_normalize_jac_many+0x214>
    for( i = 1; i < T_size; i++ )
 8016c84:	f108 0701 	add.w	r7, r8, #1
 8016c88:	350c      	adds	r5, #12
 8016c8a:	45ba      	cmp	sl, r7
 8016c8c:	d1e7      	bne.n	8016c5e <ecp_normalize_jac_many+0x7a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 8016c8e:	9b03      	ldr	r3, [sp, #12]
 8016c90:	f1a3 010c 	sub.w	r1, r3, #12
 8016c94:	f109 0204 	add.w	r2, r9, #4
 8016c98:	9b01      	ldr	r3, [sp, #4]
 8016c9a:	4419      	add	r1, r3
 8016c9c:	a80b      	add	r0, sp, #44	; 0x2c
 8016c9e:	f7fc ff91 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 8016ca2:	4683      	mov	fp, r0
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	f040 8091 	bne.w	8016dcc <ecp_normalize_jac_many+0x1e8>
    for( i = T_size - 1; ; i-- )
 8016caa:	9b02      	ldr	r3, [sp, #8]
 8016cac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8016cb0:	f1a4 0a0c 	sub.w	sl, r4, #12
 8016cb4:	4623      	mov	r3, r4
 8016cb6:	4644      	mov	r4, r8
 8016cb8:	4698      	mov	r8, r3
 8016cba:	e062      	b.n	8016d82 <ecp_normalize_jac_many+0x19e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 8016cbc:	a90b      	add	r1, sp, #44	; 0x2c
 8016cbe:	a808      	add	r0, sp, #32
 8016cc0:	f7fb fd2f 	bl	8012722 <mbedtls_mpi_copy>
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	d17d      	bne.n	8016dc4 <ecp_normalize_jac_many+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8016cc8:	aa08      	add	r2, sp, #32
 8016cca:	4611      	mov	r1, r2
 8016ccc:	a805      	add	r0, sp, #20
 8016cce:	f7fc f969 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016cd2:	2800      	cmp	r0, #0
 8016cd4:	f040 809b 	bne.w	8016e0e <ecp_normalize_jac_many+0x22a>
 8016cd8:	4649      	mov	r1, r9
 8016cda:	a805      	add	r0, sp, #20
 8016cdc:	f7ff fc76 	bl	80165cc <ecp_modp>
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	f040 8097 	bne.w	8016e14 <ecp_normalize_jac_many+0x230>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8016ce6:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016cea:	aa05      	add	r2, sp, #20
 8016cec:	4601      	mov	r1, r0
 8016cee:	f7fc f959 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	f040 8091 	bne.w	8016e1a <ecp_normalize_jac_many+0x236>
 8016cf8:	4649      	mov	r1, r9
 8016cfa:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016cfe:	f7ff fc65 	bl	80165cc <ecp_modp>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	f040 808c 	bne.w	8016e20 <ecp_normalize_jac_many+0x23c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8016d08:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d0c:	300c      	adds	r0, #12
 8016d0e:	aa05      	add	r2, sp, #20
 8016d10:	4601      	mov	r1, r0
 8016d12:	f7fc f947 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	f040 8085 	bne.w	8016e26 <ecp_normalize_jac_many+0x242>
 8016d1c:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d20:	4649      	mov	r1, r9
 8016d22:	300c      	adds	r0, #12
 8016d24:	f7ff fc52 	bl	80165cc <ecp_modp>
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	d17f      	bne.n	8016e2c <ecp_normalize_jac_many+0x248>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8016d2c:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d30:	300c      	adds	r0, #12
 8016d32:	aa08      	add	r2, sp, #32
 8016d34:	4601      	mov	r1, r0
 8016d36:	f7fc f935 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d179      	bne.n	8016e32 <ecp_normalize_jac_many+0x24e>
 8016d3e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d42:	4649      	mov	r1, r9
 8016d44:	300c      	adds	r0, #12
 8016d46:	f7ff fc41 	bl	80165cc <ecp_modp>
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	d174      	bne.n	8016e38 <ecp_normalize_jac_many+0x254>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8016d4e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8016d52:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d56:	f7fb fcab 	bl	80126b0 <mbedtls_mpi_shrink>
 8016d5a:	2800      	cmp	r0, #0
 8016d5c:	d16f      	bne.n	8016e3e <ecp_normalize_jac_many+0x25a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8016d5e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8016d62:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8016d66:	300c      	adds	r0, #12
 8016d68:	f7fb fca2 	bl	80126b0 <mbedtls_mpi_shrink>
 8016d6c:	4605      	mov	r5, r0
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d168      	bne.n	8016e44 <ecp_normalize_jac_many+0x260>
        mbedtls_mpi_free( &T[i]->Z );
 8016d72:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 8016d76:	3018      	adds	r0, #24
 8016d78:	f7fb fc5d 	bl	8012636 <mbedtls_mpi_free>
        if( i == 0 )
 8016d7c:	2c00      	cmp	r4, #0
 8016d7e:	d064      	beq.n	8016e4a <ecp_normalize_jac_many+0x266>
    for( i = T_size - 1; ; i-- )
 8016d80:	3c01      	subs	r4, #1
        if( i == 0 ) {
 8016d82:	2c00      	cmp	r4, #0
 8016d84:	d09a      	beq.n	8016cbc <ecp_normalize_jac_many+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8016d86:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8016d8a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8016d8e:	a90b      	add	r1, sp, #44	; 0x2c
 8016d90:	a808      	add	r0, sp, #32
 8016d92:	f7fc f907 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016d96:	bb88      	cbnz	r0, 8016dfc <ecp_normalize_jac_many+0x218>
 8016d98:	4649      	mov	r1, r9
 8016d9a:	a808      	add	r0, sp, #32
 8016d9c:	f7ff fc16 	bl	80165cc <ecp_modp>
 8016da0:	bb78      	cbnz	r0, 8016e02 <ecp_normalize_jac_many+0x21e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8016da2:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016da6:	3218      	adds	r2, #24
 8016da8:	a90b      	add	r1, sp, #44	; 0x2c
 8016daa:	4608      	mov	r0, r1
 8016dac:	f7fc f8fa 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8016db0:	bb50      	cbnz	r0, 8016e08 <ecp_normalize_jac_many+0x224>
 8016db2:	4649      	mov	r1, r9
 8016db4:	a80b      	add	r0, sp, #44	; 0x2c
 8016db6:	f7ff fc09 	bl	80165cc <ecp_modp>
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	d084      	beq.n	8016cc8 <ecp_normalize_jac_many+0xe4>
 8016dbe:	4644      	mov	r4, r8
 8016dc0:	4683      	mov	fp, r0
 8016dc2:	e003      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016dc4:	4644      	mov	r4, r8
 8016dc6:	4683      	mov	fp, r0
 8016dc8:	e000      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016dca:	4683      	mov	fp, r0
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8016dcc:	a80b      	add	r0, sp, #44	; 0x2c
 8016dce:	f7fb fc32 	bl	8012636 <mbedtls_mpi_free>
 8016dd2:	a808      	add	r0, sp, #32
 8016dd4:	f7fb fc2f 	bl	8012636 <mbedtls_mpi_free>
 8016dd8:	a805      	add	r0, sp, #20
 8016dda:	f7fb fc2c 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_mpi_free( &c[i] );
 8016dde:	4620      	mov	r0, r4
 8016de0:	f7fb fc29 	bl	8012636 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 8016de4:	340c      	adds	r4, #12
 8016de6:	42b4      	cmp	r4, r6
 8016de8:	d1f9      	bne.n	8016dde <ecp_normalize_jac_many+0x1fa>
    mbedtls_free( c );
 8016dea:	9801      	ldr	r0, [sp, #4]
 8016dec:	f012 f85c 	bl	8028ea8 <mbedtls_free>
}
 8016df0:	4658      	mov	r0, fp
 8016df2:	b00f      	add	sp, #60	; 0x3c
 8016df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016df8:	4683      	mov	fp, r0
 8016dfa:	e7e7      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016dfc:	4644      	mov	r4, r8
 8016dfe:	4683      	mov	fp, r0
 8016e00:	e7e4      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e02:	4644      	mov	r4, r8
 8016e04:	4683      	mov	fp, r0
 8016e06:	e7e1      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e08:	4644      	mov	r4, r8
 8016e0a:	4683      	mov	fp, r0
 8016e0c:	e7de      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e0e:	4644      	mov	r4, r8
 8016e10:	4683      	mov	fp, r0
 8016e12:	e7db      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e14:	4644      	mov	r4, r8
 8016e16:	4683      	mov	fp, r0
 8016e18:	e7d8      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e1a:	4644      	mov	r4, r8
 8016e1c:	4683      	mov	fp, r0
 8016e1e:	e7d5      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e20:	4644      	mov	r4, r8
 8016e22:	4683      	mov	fp, r0
 8016e24:	e7d2      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e26:	4644      	mov	r4, r8
 8016e28:	4683      	mov	fp, r0
 8016e2a:	e7cf      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e2c:	4644      	mov	r4, r8
 8016e2e:	4683      	mov	fp, r0
 8016e30:	e7cc      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e32:	4644      	mov	r4, r8
 8016e34:	4683      	mov	fp, r0
 8016e36:	e7c9      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e38:	4644      	mov	r4, r8
 8016e3a:	4683      	mov	fp, r0
 8016e3c:	e7c6      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e3e:	4644      	mov	r4, r8
 8016e40:	4683      	mov	fp, r0
 8016e42:	e7c3      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e44:	4644      	mov	r4, r8
 8016e46:	4683      	mov	fp, r0
 8016e48:	e7c0      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
 8016e4a:	4644      	mov	r4, r8
 8016e4c:	46ab      	mov	fp, r5
 8016e4e:	e7bd      	b.n	8016dcc <ecp_normalize_jac_many+0x1e8>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 8016e50:	4b01      	ldr	r3, [pc, #4]	; (8016e58 <ecp_normalize_jac_many+0x274>)
 8016e52:	469b      	mov	fp, r3
 8016e54:	e7cc      	b.n	8016df0 <ecp_normalize_jac_many+0x20c>
 8016e56:	bf00      	nop
 8016e58:	ffffb280 	.word	0xffffb280

08016e5c <ecp_safe_invert_jac>:
{
 8016e5c:	b570      	push	{r4, r5, r6, lr}
 8016e5e:	b084      	sub	sp, #16
 8016e60:	4605      	mov	r5, r0
 8016e62:	460c      	mov	r4, r1
 8016e64:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 8016e66:	a801      	add	r0, sp, #4
 8016e68:	f7fb fbdf 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8016e6c:	340c      	adds	r4, #12
 8016e6e:	4622      	mov	r2, r4
 8016e70:	1d29      	adds	r1, r5, #4
 8016e72:	a801      	add	r0, sp, #4
 8016e74:	f7fc f840 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8016e78:	4605      	mov	r5, r0
 8016e7a:	b128      	cbz	r0, 8016e88 <ecp_safe_invert_jac+0x2c>
    mbedtls_mpi_free( &mQY );
 8016e7c:	a801      	add	r0, sp, #4
 8016e7e:	f7fb fbda 	bl	8012636 <mbedtls_mpi_free>
}
 8016e82:	4628      	mov	r0, r5
 8016e84:	b004      	add	sp, #16
 8016e86:	bd70      	pop	{r4, r5, r6, pc}
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 8016e88:	2100      	movs	r1, #0
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f7fb ff61 	bl	8012d52 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 8016e90:	2800      	cmp	r0, #0
 8016e92:	bf0c      	ite	eq
 8016e94:	2200      	moveq	r2, #0
 8016e96:	f006 0201 	andne.w	r2, r6, #1
 8016e9a:	a901      	add	r1, sp, #4
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7fb fc72 	bl	8012786 <mbedtls_mpi_safe_cond_assign>
 8016ea2:	4605      	mov	r5, r0
cleanup:
 8016ea4:	e7ea      	b.n	8016e7c <ecp_safe_invert_jac+0x20>

08016ea6 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 8016ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eaa:	b083      	sub	sp, #12
 8016eac:	9001      	str	r0, [sp, #4]
 8016eae:	460f      	mov	r7, r1
 8016eb0:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 8016eb4:	f3cb 0845 	ubfx	r8, fp, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 8016eb8:	b1e3      	cbz	r3, 8016ef4 <ecp_select_comb+0x4e>
 8016eba:	469a      	mov	sl, r3
 8016ebc:	4615      	mov	r5, r2
 8016ebe:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 8016ec0:	f101 090c 	add.w	r9, r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 8016ec4:	45a0      	cmp	r8, r4
 8016ec6:	bf14      	ite	ne
 8016ec8:	2600      	movne	r6, #0
 8016eca:	2601      	moveq	r6, #1
 8016ecc:	4632      	mov	r2, r6
 8016ece:	4629      	mov	r1, r5
 8016ed0:	4638      	mov	r0, r7
 8016ed2:	f7fb fc58 	bl	8012786 <mbedtls_mpi_safe_cond_assign>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	b998      	cbnz	r0, 8016f02 <ecp_select_comb+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 8016eda:	4632      	mov	r2, r6
 8016edc:	f105 010c 	add.w	r1, r5, #12
 8016ee0:	4648      	mov	r0, r9
 8016ee2:	f7fb fc50 	bl	8012786 <mbedtls_mpi_safe_cond_assign>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	b958      	cbnz	r0, 8016f02 <ecp_select_comb+0x5c>
    for( j = 0; j < T_size; j++ )
 8016eea:	3401      	adds	r4, #1
 8016eec:	b2e4      	uxtb	r4, r4
 8016eee:	3524      	adds	r5, #36	; 0x24
 8016ef0:	45a2      	cmp	sl, r4
 8016ef2:	d1e7      	bne.n	8016ec4 <ecp_select_comb+0x1e>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 8016ef4:	ea4f 12db 	mov.w	r2, fp, lsr #7
 8016ef8:	4639      	mov	r1, r7
 8016efa:	9801      	ldr	r0, [sp, #4]
 8016efc:	f7ff ffae 	bl	8016e5c <ecp_safe_invert_jac>
 8016f00:	4603      	mov	r3, r0

cleanup:
    return( ret );
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	b003      	add	sp, #12
 8016f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016f0c <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8016f0c:	4b06      	ldr	r3, [pc, #24]	; (8016f28 <mbedtls_ecp_grp_id_list+0x1c>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	b93b      	cbnz	r3, 8016f22 <mbedtls_ecp_grp_id_list+0x16>
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8016f12:	4b06      	ldr	r3, [pc, #24]	; (8016f2c <mbedtls_ecp_grp_id_list+0x20>)
 8016f14:	2203      	movs	r2, #3
 8016f16:	701a      	strb	r2, [r3, #0]
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 8016f18:	2200      	movs	r2, #0
 8016f1a:	705a      	strb	r2, [r3, #1]
        init_done = 1;
 8016f1c:	4b02      	ldr	r3, [pc, #8]	; (8016f28 <mbedtls_ecp_grp_id_list+0x1c>)
 8016f1e:	2201      	movs	r2, #1
 8016f20:	601a      	str	r2, [r3, #0]
}
 8016f22:	4802      	ldr	r0, [pc, #8]	; (8016f2c <mbedtls_ecp_grp_id_list+0x20>)
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	200108a4 	.word	0x200108a4
 8016f2c:	200108a0 	.word	0x200108a0

08016f30 <mbedtls_ecp_curve_info_from_grp_id>:
{
 8016f30:	4601      	mov	r1, r0
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8016f32:	4a05      	ldr	r2, [pc, #20]	; (8016f48 <mbedtls_ecp_curve_info_from_grp_id+0x18>)
 8016f34:	2303      	movs	r3, #3
 8016f36:	4610      	mov	r0, r2
        if( curve_info->grp_id == grp_id )
 8016f38:	4299      	cmp	r1, r3
 8016f3a:	d004      	beq.n	8016f46 <mbedtls_ecp_curve_info_from_grp_id+0x16>
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8016f3c:	f812 3f0c 	ldrb.w	r3, [r2, #12]!
    for( curve_info = mbedtls_ecp_curve_list();
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d1f8      	bne.n	8016f36 <mbedtls_ecp_curve_info_from_grp_id+0x6>
    return( NULL );
 8016f44:	2000      	movs	r0, #0
}
 8016f46:	4770      	bx	lr
 8016f48:	08031bfc 	.word	0x08031bfc

08016f4c <mbedtls_ecp_curve_info_from_tls_id>:
{
 8016f4c:	4601      	mov	r1, r0
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8016f4e:	4b05      	ldr	r3, [pc, #20]	; (8016f64 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
 8016f50:	4618      	mov	r0, r3
        if( curve_info->tls_id == tls_id )
 8016f52:	885a      	ldrh	r2, [r3, #2]
 8016f54:	428a      	cmp	r2, r1
 8016f56:	d004      	beq.n	8016f62 <mbedtls_ecp_curve_info_from_tls_id+0x16>
    for( curve_info = mbedtls_ecp_curve_list();
 8016f58:	f813 2f0c 	ldrb.w	r2, [r3, #12]!
 8016f5c:	2a00      	cmp	r2, #0
 8016f5e:	d1f7      	bne.n	8016f50 <mbedtls_ecp_curve_info_from_tls_id+0x4>
    return( NULL );
 8016f60:	2000      	movs	r0, #0
}
 8016f62:	4770      	bx	lr
 8016f64:	08031bfc 	.word	0x08031bfc

08016f68 <mbedtls_ecp_point_init>:
{
 8016f68:	b510      	push	{r4, lr}
 8016f6a:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 8016f6c:	f7fb fb5d 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8016f70:	f104 000c 	add.w	r0, r4, #12
 8016f74:	f7fb fb59 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8016f78:	f104 0018 	add.w	r0, r4, #24
 8016f7c:	f7fb fb55 	bl	801262a <mbedtls_mpi_init>
}
 8016f80:	bd10      	pop	{r4, pc}

08016f82 <mbedtls_ecp_group_init>:
{
 8016f82:	b538      	push	{r3, r4, r5, lr}
 8016f84:	4604      	mov	r4, r0
    grp->id = MBEDTLS_ECP_DP_NONE;
 8016f86:	2500      	movs	r5, #0
 8016f88:	f800 5b04 	strb.w	r5, [r0], #4
    mbedtls_mpi_init( &grp->P );
 8016f8c:	f7fb fb4d 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 8016f90:	f104 0010 	add.w	r0, r4, #16
 8016f94:	f7fb fb49 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 8016f98:	f104 001c 	add.w	r0, r4, #28
 8016f9c:	f7fb fb45 	bl	801262a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 8016fa0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016fa4:	f7ff ffe0 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 8016fa8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8016fac:	f7fb fb3d 	bl	801262a <mbedtls_mpi_init>
    grp->pbits = 0;
 8016fb0:	65a5      	str	r5, [r4, #88]	; 0x58
    grp->nbits = 0;
 8016fb2:	65e5      	str	r5, [r4, #92]	; 0x5c
    grp->h = 0;
 8016fb4:	6625      	str	r5, [r4, #96]	; 0x60
    grp->modp = NULL;
 8016fb6:	6665      	str	r5, [r4, #100]	; 0x64
    grp->t_pre = NULL;
 8016fb8:	66a5      	str	r5, [r4, #104]	; 0x68
    grp->t_post = NULL;
 8016fba:	66e5      	str	r5, [r4, #108]	; 0x6c
    grp->t_data = NULL;
 8016fbc:	6725      	str	r5, [r4, #112]	; 0x70
    grp->T = NULL;
 8016fbe:	6765      	str	r5, [r4, #116]	; 0x74
    grp->T_size = 0;
 8016fc0:	67a5      	str	r5, [r4, #120]	; 0x78
}
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}

08016fc4 <mbedtls_ecp_keypair_init>:
{
 8016fc4:	b510      	push	{r4, lr}
 8016fc6:	4604      	mov	r4, r0
    mbedtls_ecp_group_init( &key->grp );
 8016fc8:	f7ff ffdb 	bl	8016f82 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 8016fcc:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8016fd0:	f7fb fb2b 	bl	801262a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8016fd4:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8016fd8:	f7ff ffc6 	bl	8016f68 <mbedtls_ecp_point_init>
}
 8016fdc:	bd10      	pop	{r4, pc}

08016fde <mbedtls_ecp_point_free>:
    if( pt == NULL )
 8016fde:	b160      	cbz	r0, 8016ffa <mbedtls_ecp_point_free+0x1c>
{
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 8016fe4:	f7fb fb27 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8016fe8:	f104 000c 	add.w	r0, r4, #12
 8016fec:	f7fb fb23 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8016ff0:	f104 0018 	add.w	r0, r4, #24
 8016ff4:	f7fb fb1f 	bl	8012636 <mbedtls_mpi_free>
}
 8016ff8:	bd10      	pop	{r4, pc}
 8016ffa:	4770      	bx	lr

08016ffc <mbedtls_ecp_group_free>:
    if( grp == NULL )
 8016ffc:	b378      	cbz	r0, 801705e <mbedtls_ecp_group_free+0x62>
{
 8016ffe:	b570      	push	{r4, r5, r6, lr}
 8017000:	4604      	mov	r4, r0
    if( grp->h != 1 )
 8017002:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8017004:	2b01      	cmp	r3, #1
 8017006:	d116      	bne.n	8017036 <mbedtls_ecp_group_free+0x3a>
    if( grp->T != NULL )
 8017008:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801700a:	b17b      	cbz	r3, 801702c <mbedtls_ecp_group_free+0x30>
        for( i = 0; i < grp->T_size; i++ )
 801700c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801700e:	b153      	cbz	r3, 8017026 <mbedtls_ecp_group_free+0x2a>
 8017010:	2500      	movs	r5, #0
 8017012:	462e      	mov	r6, r5
            mbedtls_ecp_point_free( &grp->T[i] );
 8017014:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017016:	4428      	add	r0, r5
 8017018:	f7ff ffe1 	bl	8016fde <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 801701c:	3601      	adds	r6, #1
 801701e:	3524      	adds	r5, #36	; 0x24
 8017020:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017022:	42b3      	cmp	r3, r6
 8017024:	d8f6      	bhi.n	8017014 <mbedtls_ecp_group_free+0x18>
        mbedtls_free( grp->T );
 8017026:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8017028:	f011 ff3e 	bl	8028ea8 <mbedtls_free>
    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 801702c:	217c      	movs	r1, #124	; 0x7c
 801702e:	4620      	mov	r0, r4
 8017030:	f003 ff88 	bl	801af44 <mbedtls_platform_zeroize>
}
 8017034:	bd70      	pop	{r4, r5, r6, pc}
        mbedtls_mpi_free( &grp->P );
 8017036:	3004      	adds	r0, #4
 8017038:	f7fb fafd 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 801703c:	f104 0010 	add.w	r0, r4, #16
 8017040:	f7fb faf9 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8017044:	f104 001c 	add.w	r0, r4, #28
 8017048:	f7fb faf5 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 801704c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017050:	f7ff ffc5 	bl	8016fde <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8017054:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017058:	f7fb faed 	bl	8012636 <mbedtls_mpi_free>
 801705c:	e7d4      	b.n	8017008 <mbedtls_ecp_group_free+0xc>
 801705e:	4770      	bx	lr

08017060 <mbedtls_ecp_keypair_free>:
    if( key == NULL )
 8017060:	b160      	cbz	r0, 801707c <mbedtls_ecp_keypair_free+0x1c>
{
 8017062:	b510      	push	{r4, lr}
 8017064:	4604      	mov	r4, r0
    mbedtls_ecp_group_free( &key->grp );
 8017066:	f7ff ffc9 	bl	8016ffc <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 801706a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801706e:	f7fb fae2 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 8017072:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8017076:	f7ff ffb2 	bl	8016fde <mbedtls_ecp_point_free>
}
 801707a:	bd10      	pop	{r4, pc}
 801707c:	4770      	bx	lr

0801707e <mbedtls_ecp_copy>:
{
 801707e:	b538      	push	{r3, r4, r5, lr}
 8017080:	4604      	mov	r4, r0
 8017082:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8017084:	f7fb fb4d 	bl	8012722 <mbedtls_mpi_copy>
 8017088:	4603      	mov	r3, r0
 801708a:	b108      	cbz	r0, 8017090 <mbedtls_ecp_copy+0x12>
}
 801708c:	4618      	mov	r0, r3
 801708e:	bd38      	pop	{r3, r4, r5, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8017090:	f105 010c 	add.w	r1, r5, #12
 8017094:	f104 000c 	add.w	r0, r4, #12
 8017098:	f7fb fb43 	bl	8012722 <mbedtls_mpi_copy>
 801709c:	4603      	mov	r3, r0
 801709e:	2800      	cmp	r0, #0
 80170a0:	d1f4      	bne.n	801708c <mbedtls_ecp_copy+0xe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 80170a2:	f105 0118 	add.w	r1, r5, #24
 80170a6:	f104 0018 	add.w	r0, r4, #24
 80170aa:	f7fb fb3a 	bl	8012722 <mbedtls_mpi_copy>
 80170ae:	4603      	mov	r3, r0
    return( ret );
 80170b0:	e7ec      	b.n	801708c <mbedtls_ecp_copy+0xe>

080170b2 <mbedtls_ecp_group_copy>:
{
 80170b2:	b508      	push	{r3, lr}
    return( mbedtls_ecp_group_load( dst, src->id ) );
 80170b4:	7809      	ldrb	r1, [r1, #0]
 80170b6:	f001 f9ab 	bl	8018410 <mbedtls_ecp_group_load>
}
 80170ba:	bd08      	pop	{r3, pc}

080170bc <mbedtls_ecp_set_zero>:
{
 80170bc:	b510      	push	{r4, lr}
 80170be:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 80170c0:	2101      	movs	r1, #1
 80170c2:	f7fb fb97 	bl	80127f4 <mbedtls_mpi_lset>
 80170c6:	4603      	mov	r3, r0
 80170c8:	b108      	cbz	r0, 80170ce <mbedtls_ecp_set_zero+0x12>
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	bd10      	pop	{r4, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 80170ce:	2101      	movs	r1, #1
 80170d0:	f104 000c 	add.w	r0, r4, #12
 80170d4:	f7fb fb8e 	bl	80127f4 <mbedtls_mpi_lset>
 80170d8:	4603      	mov	r3, r0
 80170da:	2800      	cmp	r0, #0
 80170dc:	d1f5      	bne.n	80170ca <mbedtls_ecp_set_zero+0xe>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 80170de:	2100      	movs	r1, #0
 80170e0:	f104 0018 	add.w	r0, r4, #24
 80170e4:	f7fb fb86 	bl	80127f4 <mbedtls_mpi_lset>
 80170e8:	4603      	mov	r3, r0
    return( ret );
 80170ea:	e7ee      	b.n	80170ca <mbedtls_ecp_set_zero+0xe>

080170ec <ecp_add_mixed>:
{
 80170ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f0:	b097      	sub	sp, #92	; 0x5c
 80170f2:	4607      	mov	r7, r0
 80170f4:	4689      	mov	r9, r1
 80170f6:	4615      	mov	r5, r2
 80170f8:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 80170fa:	f102 0618 	add.w	r6, r2, #24
 80170fe:	2100      	movs	r1, #0
 8017100:	4630      	mov	r0, r6
 8017102:	f7fb fe26 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017106:	2800      	cmp	r0, #0
 8017108:	d047      	beq.n	801719a <ecp_add_mixed+0xae>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 801710a:	6a23      	ldr	r3, [r4, #32]
 801710c:	b183      	cbz	r3, 8017130 <ecp_add_mixed+0x44>
 801710e:	f104 0818 	add.w	r8, r4, #24
 8017112:	2100      	movs	r1, #0
 8017114:	4640      	mov	r0, r8
 8017116:	f7fb fe1c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801711a:	2800      	cmp	r0, #0
 801711c:	d043      	beq.n	80171a6 <ecp_add_mixed+0xba>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 801711e:	6a23      	ldr	r3, [r4, #32]
 8017120:	b133      	cbz	r3, 8017130 <ecp_add_mixed+0x44>
 8017122:	2101      	movs	r1, #1
 8017124:	4640      	mov	r0, r8
 8017126:	f7fb fe14 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801712a:	2800      	cmp	r0, #0
 801712c:	f040 81dd 	bne.w	80174ea <ecp_add_mixed+0x3fe>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 8017130:	a813      	add	r0, sp, #76	; 0x4c
 8017132:	f7fb fa7a 	bl	801262a <mbedtls_mpi_init>
 8017136:	a810      	add	r0, sp, #64	; 0x40
 8017138:	f7fb fa77 	bl	801262a <mbedtls_mpi_init>
 801713c:	a80d      	add	r0, sp, #52	; 0x34
 801713e:	f7fb fa74 	bl	801262a <mbedtls_mpi_init>
 8017142:	a80a      	add	r0, sp, #40	; 0x28
 8017144:	f7fb fa71 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8017148:	a807      	add	r0, sp, #28
 801714a:	f7fb fa6e 	bl	801262a <mbedtls_mpi_init>
 801714e:	a804      	add	r0, sp, #16
 8017150:	f7fb fa6b 	bl	801262a <mbedtls_mpi_init>
 8017154:	a801      	add	r0, sp, #4
 8017156:	f7fb fa68 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 801715a:	4632      	mov	r2, r6
 801715c:	4631      	mov	r1, r6
 801715e:	a813      	add	r0, sp, #76	; 0x4c
 8017160:	f7fb ff20 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017164:	4680      	mov	r8, r0
 8017166:	b320      	cbz	r0, 80171b2 <ecp_add_mixed+0xc6>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 8017168:	a813      	add	r0, sp, #76	; 0x4c
 801716a:	f7fb fa64 	bl	8012636 <mbedtls_mpi_free>
 801716e:	a810      	add	r0, sp, #64	; 0x40
 8017170:	f7fb fa61 	bl	8012636 <mbedtls_mpi_free>
 8017174:	a80d      	add	r0, sp, #52	; 0x34
 8017176:	f7fb fa5e 	bl	8012636 <mbedtls_mpi_free>
 801717a:	a80a      	add	r0, sp, #40	; 0x28
 801717c:	f7fb fa5b 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 8017180:	a807      	add	r0, sp, #28
 8017182:	f7fb fa58 	bl	8012636 <mbedtls_mpi_free>
 8017186:	a804      	add	r0, sp, #16
 8017188:	f7fb fa55 	bl	8012636 <mbedtls_mpi_free>
 801718c:	a801      	add	r0, sp, #4
 801718e:	f7fb fa52 	bl	8012636 <mbedtls_mpi_free>
}
 8017192:	4640      	mov	r0, r8
 8017194:	b017      	add	sp, #92	; 0x5c
 8017196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( mbedtls_ecp_copy( R, Q ) );
 801719a:	4621      	mov	r1, r4
 801719c:	4648      	mov	r0, r9
 801719e:	f7ff ff6e 	bl	801707e <mbedtls_ecp_copy>
 80171a2:	4680      	mov	r8, r0
 80171a4:	e7f5      	b.n	8017192 <ecp_add_mixed+0xa6>
        return( mbedtls_ecp_copy( R, P ) );
 80171a6:	4629      	mov	r1, r5
 80171a8:	4648      	mov	r0, r9
 80171aa:	f7ff ff68 	bl	801707e <mbedtls_ecp_copy>
 80171ae:	4680      	mov	r8, r0
 80171b0:	e7ef      	b.n	8017192 <ecp_add_mixed+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 80171b2:	4639      	mov	r1, r7
 80171b4:	a813      	add	r0, sp, #76	; 0x4c
 80171b6:	f7ff fa09 	bl	80165cc <ecp_modp>
 80171ba:	4680      	mov	r8, r0
 80171bc:	2800      	cmp	r0, #0
 80171be:	d1d3      	bne.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80171c0:	4632      	mov	r2, r6
 80171c2:	a913      	add	r1, sp, #76	; 0x4c
 80171c4:	a810      	add	r0, sp, #64	; 0x40
 80171c6:	f7fb feed 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80171ca:	4680      	mov	r8, r0
 80171cc:	2800      	cmp	r0, #0
 80171ce:	d1cb      	bne.n	8017168 <ecp_add_mixed+0x7c>
 80171d0:	4639      	mov	r1, r7
 80171d2:	a810      	add	r0, sp, #64	; 0x40
 80171d4:	f7ff f9fa 	bl	80165cc <ecp_modp>
 80171d8:	4680      	mov	r8, r0
 80171da:	2800      	cmp	r0, #0
 80171dc:	d1c4      	bne.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 80171de:	4622      	mov	r2, r4
 80171e0:	a913      	add	r1, sp, #76	; 0x4c
 80171e2:	4608      	mov	r0, r1
 80171e4:	f7fb fede 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80171e8:	4680      	mov	r8, r0
 80171ea:	2800      	cmp	r0, #0
 80171ec:	d1bc      	bne.n	8017168 <ecp_add_mixed+0x7c>
 80171ee:	4639      	mov	r1, r7
 80171f0:	a813      	add	r0, sp, #76	; 0x4c
 80171f2:	f7ff f9eb 	bl	80165cc <ecp_modp>
 80171f6:	4680      	mov	r8, r0
 80171f8:	2800      	cmp	r0, #0
 80171fa:	d1b5      	bne.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 80171fc:	f104 020c 	add.w	r2, r4, #12
 8017200:	a910      	add	r1, sp, #64	; 0x40
 8017202:	4608      	mov	r0, r1
 8017204:	f7fb fece 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017208:	4680      	mov	r8, r0
 801720a:	2800      	cmp	r0, #0
 801720c:	d1ac      	bne.n	8017168 <ecp_add_mixed+0x7c>
 801720e:	4639      	mov	r1, r7
 8017210:	a810      	add	r0, sp, #64	; 0x40
 8017212:	f7ff f9db 	bl	80165cc <ecp_modp>
 8017216:	4680      	mov	r8, r0
 8017218:	2800      	cmp	r0, #0
 801721a:	d1a5      	bne.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 801721c:	462a      	mov	r2, r5
 801721e:	a913      	add	r1, sp, #76	; 0x4c
 8017220:	4608      	mov	r0, r1
 8017222:	f7fb fe69 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8017226:	4680      	mov	r8, r0
 8017228:	2800      	cmp	r0, #0
 801722a:	d19d      	bne.n	8017168 <ecp_add_mixed+0x7c>
 801722c:	f04f 0a00 	mov.w	sl, #0
 8017230:	1d3c      	adds	r4, r7, #4
 8017232:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017234:	2b00      	cmp	r3, #0
 8017236:	da0d      	bge.n	8017254 <ecp_add_mixed+0x168>
 8017238:	4651      	mov	r1, sl
 801723a:	a813      	add	r0, sp, #76	; 0x4c
 801723c:	f7fb fd89 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017240:	b140      	cbz	r0, 8017254 <ecp_add_mixed+0x168>
 8017242:	4622      	mov	r2, r4
 8017244:	a913      	add	r1, sp, #76	; 0x4c
 8017246:	4608      	mov	r0, r1
 8017248:	f7fb fe30 	bl	8012eac <mbedtls_mpi_add_mpi>
 801724c:	4680      	mov	r8, r0
 801724e:	2800      	cmp	r0, #0
 8017250:	d0ef      	beq.n	8017232 <ecp_add_mixed+0x146>
 8017252:	e789      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8017254:	f105 0b0c 	add.w	fp, r5, #12
 8017258:	465a      	mov	r2, fp
 801725a:	a910      	add	r1, sp, #64	; 0x40
 801725c:	4608      	mov	r0, r1
 801725e:	f7fb fe4b 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8017262:	4680      	mov	r8, r0
 8017264:	2800      	cmp	r0, #0
 8017266:	f47f af7f 	bne.w	8017168 <ecp_add_mixed+0x7c>
 801726a:	f04f 0a00 	mov.w	sl, #0
 801726e:	1d3c      	adds	r4, r7, #4
 8017270:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017272:	2b00      	cmp	r3, #0
 8017274:	da0d      	bge.n	8017292 <ecp_add_mixed+0x1a6>
 8017276:	4651      	mov	r1, sl
 8017278:	a810      	add	r0, sp, #64	; 0x40
 801727a:	f7fb fd6a 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801727e:	b140      	cbz	r0, 8017292 <ecp_add_mixed+0x1a6>
 8017280:	4622      	mov	r2, r4
 8017282:	a910      	add	r1, sp, #64	; 0x40
 8017284:	4608      	mov	r0, r1
 8017286:	f7fb fe11 	bl	8012eac <mbedtls_mpi_add_mpi>
 801728a:	4680      	mov	r8, r0
 801728c:	2800      	cmp	r0, #0
 801728e:	d0ef      	beq.n	8017270 <ecp_add_mixed+0x184>
 8017290:	e76a      	b.n	8017168 <ecp_add_mixed+0x7c>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 8017292:	2100      	movs	r1, #0
 8017294:	a813      	add	r0, sp, #76	; 0x4c
 8017296:	f7fb fd5c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801729a:	b980      	cbnz	r0, 80172be <ecp_add_mixed+0x1d2>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 801729c:	2100      	movs	r1, #0
 801729e:	a810      	add	r0, sp, #64	; 0x40
 80172a0:	f7fb fd57 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80172a4:	b930      	cbnz	r0, 80172b4 <ecp_add_mixed+0x1c8>
            ret = ecp_double_jac( grp, R, P );
 80172a6:	462a      	mov	r2, r5
 80172a8:	4649      	mov	r1, r9
 80172aa:	4638      	mov	r0, r7
 80172ac:	f7ff f9da 	bl	8016664 <ecp_double_jac>
 80172b0:	4680      	mov	r8, r0
            goto cleanup;
 80172b2:	e759      	b.n	8017168 <ecp_add_mixed+0x7c>
            ret = mbedtls_ecp_set_zero( R );
 80172b4:	4648      	mov	r0, r9
 80172b6:	f7ff ff01 	bl	80170bc <mbedtls_ecp_set_zero>
 80172ba:	4680      	mov	r8, r0
            goto cleanup;
 80172bc:	e754      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80172be:	aa13      	add	r2, sp, #76	; 0x4c
 80172c0:	4631      	mov	r1, r6
 80172c2:	a801      	add	r0, sp, #4
 80172c4:	f7fb fe6e 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80172c8:	4680      	mov	r8, r0
 80172ca:	2800      	cmp	r0, #0
 80172cc:	f47f af4c 	bne.w	8017168 <ecp_add_mixed+0x7c>
 80172d0:	4639      	mov	r1, r7
 80172d2:	a801      	add	r0, sp, #4
 80172d4:	f7ff f97a 	bl	80165cc <ecp_modp>
 80172d8:	4680      	mov	r8, r0
 80172da:	2800      	cmp	r0, #0
 80172dc:	f47f af44 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80172e0:	aa13      	add	r2, sp, #76	; 0x4c
 80172e2:	4611      	mov	r1, r2
 80172e4:	a80d      	add	r0, sp, #52	; 0x34
 80172e6:	f7fb fe5d 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80172ea:	4680      	mov	r8, r0
 80172ec:	2800      	cmp	r0, #0
 80172ee:	f47f af3b 	bne.w	8017168 <ecp_add_mixed+0x7c>
 80172f2:	4639      	mov	r1, r7
 80172f4:	a80d      	add	r0, sp, #52	; 0x34
 80172f6:	f7ff f969 	bl	80165cc <ecp_modp>
 80172fa:	4680      	mov	r8, r0
 80172fc:	2800      	cmp	r0, #0
 80172fe:	f47f af33 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8017302:	aa13      	add	r2, sp, #76	; 0x4c
 8017304:	a90d      	add	r1, sp, #52	; 0x34
 8017306:	a80a      	add	r0, sp, #40	; 0x28
 8017308:	f7fb fe4c 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801730c:	4680      	mov	r8, r0
 801730e:	2800      	cmp	r0, #0
 8017310:	f47f af2a 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017314:	4639      	mov	r1, r7
 8017316:	a80a      	add	r0, sp, #40	; 0x28
 8017318:	f7ff f958 	bl	80165cc <ecp_modp>
 801731c:	4680      	mov	r8, r0
 801731e:	2800      	cmp	r0, #0
 8017320:	f47f af22 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8017324:	462a      	mov	r2, r5
 8017326:	a90d      	add	r1, sp, #52	; 0x34
 8017328:	4608      	mov	r0, r1
 801732a:	f7fb fe3b 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801732e:	4680      	mov	r8, r0
 8017330:	2800      	cmp	r0, #0
 8017332:	f47f af19 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017336:	4639      	mov	r1, r7
 8017338:	a80d      	add	r0, sp, #52	; 0x34
 801733a:	f7ff f947 	bl	80165cc <ecp_modp>
 801733e:	4680      	mov	r8, r0
 8017340:	2800      	cmp	r0, #0
 8017342:	f47f af11 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8017346:	2202      	movs	r2, #2
 8017348:	a90d      	add	r1, sp, #52	; 0x34
 801734a:	a813      	add	r0, sp, #76	; 0x4c
 801734c:	f7fb fe92 	bl	8013074 <mbedtls_mpi_mul_int>
 8017350:	4680      	mov	r8, r0
 8017352:	2800      	cmp	r0, #0
 8017354:	f47f af08 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017358:	1d3c      	adds	r4, r7, #4
 801735a:	4621      	mov	r1, r4
 801735c:	a813      	add	r0, sp, #76	; 0x4c
 801735e:	f7fb fca0 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8017362:	2800      	cmp	r0, #0
 8017364:	db08      	blt.n	8017378 <ecp_add_mixed+0x28c>
 8017366:	4622      	mov	r2, r4
 8017368:	a913      	add	r1, sp, #76	; 0x4c
 801736a:	4608      	mov	r0, r1
 801736c:	f7fb fd61 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8017370:	4680      	mov	r8, r0
 8017372:	2800      	cmp	r0, #0
 8017374:	d0f1      	beq.n	801735a <ecp_add_mixed+0x26e>
 8017376:	e6f7      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8017378:	aa10      	add	r2, sp, #64	; 0x40
 801737a:	4611      	mov	r1, r2
 801737c:	a807      	add	r0, sp, #28
 801737e:	f7fb fe11 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017382:	4680      	mov	r8, r0
 8017384:	2800      	cmp	r0, #0
 8017386:	f47f aeef 	bne.w	8017168 <ecp_add_mixed+0x7c>
 801738a:	4639      	mov	r1, r7
 801738c:	a807      	add	r0, sp, #28
 801738e:	f7ff f91d 	bl	80165cc <ecp_modp>
 8017392:	4680      	mov	r8, r0
 8017394:	2800      	cmp	r0, #0
 8017396:	f47f aee7 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 801739a:	aa13      	add	r2, sp, #76	; 0x4c
 801739c:	a907      	add	r1, sp, #28
 801739e:	4608      	mov	r0, r1
 80173a0:	f7fb fdaa 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 80173a4:	4680      	mov	r8, r0
 80173a6:	2800      	cmp	r0, #0
 80173a8:	f47f aede 	bne.w	8017168 <ecp_add_mixed+0x7c>
 80173ac:	2500      	movs	r5, #0
 80173ae:	9b07      	ldr	r3, [sp, #28]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	da0d      	bge.n	80173d0 <ecp_add_mixed+0x2e4>
 80173b4:	4629      	mov	r1, r5
 80173b6:	a807      	add	r0, sp, #28
 80173b8:	f7fb fccb 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80173bc:	b140      	cbz	r0, 80173d0 <ecp_add_mixed+0x2e4>
 80173be:	4622      	mov	r2, r4
 80173c0:	a907      	add	r1, sp, #28
 80173c2:	4608      	mov	r0, r1
 80173c4:	f7fb fd72 	bl	8012eac <mbedtls_mpi_add_mpi>
 80173c8:	4680      	mov	r8, r0
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d0ef      	beq.n	80173ae <ecp_add_mixed+0x2c2>
 80173ce:	e6cb      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 80173d0:	aa0a      	add	r2, sp, #40	; 0x28
 80173d2:	a907      	add	r1, sp, #28
 80173d4:	4608      	mov	r0, r1
 80173d6:	f7fb fd8f 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 80173da:	4680      	mov	r8, r0
 80173dc:	2800      	cmp	r0, #0
 80173de:	f47f aec3 	bne.w	8017168 <ecp_add_mixed+0x7c>
 80173e2:	2500      	movs	r5, #0
 80173e4:	9b07      	ldr	r3, [sp, #28]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	da0d      	bge.n	8017406 <ecp_add_mixed+0x31a>
 80173ea:	4629      	mov	r1, r5
 80173ec:	a807      	add	r0, sp, #28
 80173ee:	f7fb fcb0 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80173f2:	b140      	cbz	r0, 8017406 <ecp_add_mixed+0x31a>
 80173f4:	4622      	mov	r2, r4
 80173f6:	a907      	add	r1, sp, #28
 80173f8:	4608      	mov	r0, r1
 80173fa:	f7fb fd57 	bl	8012eac <mbedtls_mpi_add_mpi>
 80173fe:	4680      	mov	r8, r0
 8017400:	2800      	cmp	r0, #0
 8017402:	d0ef      	beq.n	80173e4 <ecp_add_mixed+0x2f8>
 8017404:	e6b0      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8017406:	aa07      	add	r2, sp, #28
 8017408:	a90d      	add	r1, sp, #52	; 0x34
 801740a:	4608      	mov	r0, r1
 801740c:	f7fb fd74 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8017410:	4680      	mov	r8, r0
 8017412:	2800      	cmp	r0, #0
 8017414:	f47f aea8 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017418:	2500      	movs	r5, #0
 801741a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801741c:	2b00      	cmp	r3, #0
 801741e:	da0d      	bge.n	801743c <ecp_add_mixed+0x350>
 8017420:	4629      	mov	r1, r5
 8017422:	a80d      	add	r0, sp, #52	; 0x34
 8017424:	f7fb fc95 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017428:	b140      	cbz	r0, 801743c <ecp_add_mixed+0x350>
 801742a:	4622      	mov	r2, r4
 801742c:	a90d      	add	r1, sp, #52	; 0x34
 801742e:	4608      	mov	r0, r1
 8017430:	f7fb fd3c 	bl	8012eac <mbedtls_mpi_add_mpi>
 8017434:	4680      	mov	r8, r0
 8017436:	2800      	cmp	r0, #0
 8017438:	d0ef      	beq.n	801741a <ecp_add_mixed+0x32e>
 801743a:	e695      	b.n	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 801743c:	aa10      	add	r2, sp, #64	; 0x40
 801743e:	a90d      	add	r1, sp, #52	; 0x34
 8017440:	4608      	mov	r0, r1
 8017442:	f7fb fdaf 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017446:	4680      	mov	r8, r0
 8017448:	2800      	cmp	r0, #0
 801744a:	f47f ae8d 	bne.w	8017168 <ecp_add_mixed+0x7c>
 801744e:	4639      	mov	r1, r7
 8017450:	a80d      	add	r0, sp, #52	; 0x34
 8017452:	f7ff f8bb 	bl	80165cc <ecp_modp>
 8017456:	4680      	mov	r8, r0
 8017458:	2800      	cmp	r0, #0
 801745a:	f47f ae85 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 801745e:	465a      	mov	r2, fp
 8017460:	a90a      	add	r1, sp, #40	; 0x28
 8017462:	4608      	mov	r0, r1
 8017464:	f7fb fd9e 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017468:	4680      	mov	r8, r0
 801746a:	2800      	cmp	r0, #0
 801746c:	f47f ae7c 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017470:	4639      	mov	r1, r7
 8017472:	a80a      	add	r0, sp, #40	; 0x28
 8017474:	f7ff f8aa 	bl	80165cc <ecp_modp>
 8017478:	4680      	mov	r8, r0
 801747a:	2800      	cmp	r0, #0
 801747c:	f47f ae74 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8017480:	aa0a      	add	r2, sp, #40	; 0x28
 8017482:	a90d      	add	r1, sp, #52	; 0x34
 8017484:	a804      	add	r0, sp, #16
 8017486:	f7fb fd37 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801748a:	4680      	mov	r8, r0
 801748c:	2800      	cmp	r0, #0
 801748e:	f47f ae6b 	bne.w	8017168 <ecp_add_mixed+0x7c>
 8017492:	2500      	movs	r5, #0
 8017494:	e008      	b.n	80174a8 <ecp_add_mixed+0x3bc>
 8017496:	4622      	mov	r2, r4
 8017498:	a904      	add	r1, sp, #16
 801749a:	4608      	mov	r0, r1
 801749c:	f7fb fd06 	bl	8012eac <mbedtls_mpi_add_mpi>
 80174a0:	4680      	mov	r8, r0
 80174a2:	2800      	cmp	r0, #0
 80174a4:	f47f ae60 	bne.w	8017168 <ecp_add_mixed+0x7c>
 80174a8:	9b04      	ldr	r3, [sp, #16]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	da05      	bge.n	80174ba <ecp_add_mixed+0x3ce>
 80174ae:	4629      	mov	r1, r5
 80174b0:	a804      	add	r0, sp, #16
 80174b2:	f7fb fc4e 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80174b6:	2800      	cmp	r0, #0
 80174b8:	d1ed      	bne.n	8017496 <ecp_add_mixed+0x3aa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 80174ba:	a907      	add	r1, sp, #28
 80174bc:	4648      	mov	r0, r9
 80174be:	f7fb f930 	bl	8012722 <mbedtls_mpi_copy>
 80174c2:	4680      	mov	r8, r0
 80174c4:	2800      	cmp	r0, #0
 80174c6:	f47f ae4f 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 80174ca:	a904      	add	r1, sp, #16
 80174cc:	f109 000c 	add.w	r0, r9, #12
 80174d0:	f7fb f927 	bl	8012722 <mbedtls_mpi_copy>
 80174d4:	4680      	mov	r8, r0
 80174d6:	2800      	cmp	r0, #0
 80174d8:	f47f ae46 	bne.w	8017168 <ecp_add_mixed+0x7c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 80174dc:	a901      	add	r1, sp, #4
 80174de:	f109 0018 	add.w	r0, r9, #24
 80174e2:	f7fb f91e 	bl	8012722 <mbedtls_mpi_copy>
 80174e6:	4680      	mov	r8, r0
cleanup:
 80174e8:	e63e      	b.n	8017168 <ecp_add_mixed+0x7c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80174ea:	f8df 8004 	ldr.w	r8, [pc, #4]	; 80174f0 <ecp_add_mixed+0x404>
 80174ee:	e650      	b.n	8017192 <ecp_add_mixed+0xa6>
 80174f0:	ffffb080 	.word	0xffffb080

080174f4 <mbedtls_ecp_is_zero>:
{
 80174f4:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 80174f6:	2100      	movs	r1, #0
 80174f8:	3018      	adds	r0, #24
 80174fa:	f7fb fc2a 	bl	8012d52 <mbedtls_mpi_cmp_int>
}
 80174fe:	fab0 f080 	clz	r0, r0
 8017502:	0940      	lsrs	r0, r0, #5
 8017504:	bd08      	pop	{r3, pc}
	...

08017508 <mbedtls_ecp_point_write_binary>:
{
 8017508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801750a:	4607      	mov	r7, r0
 801750c:	460c      	mov	r4, r1
 801750e:	4616      	mov	r6, r2
 8017510:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8017512:	2100      	movs	r1, #0
 8017514:	f104 0018 	add.w	r0, r4, #24
 8017518:	f7fb fc1b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801751c:	b940      	cbnz	r0, 8017530 <mbedtls_ecp_point_write_binary+0x28>
        if( buflen < 1 )
 801751e:	9b07      	ldr	r3, [sp, #28]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d03a      	beq.n	801759a <mbedtls_ecp_point_write_binary+0x92>
        buf[0] = 0x00;
 8017524:	2300      	movs	r3, #0
 8017526:	9a06      	ldr	r2, [sp, #24]
 8017528:	7013      	strb	r3, [r2, #0]
        *olen = 1;
 801752a:	2301      	movs	r3, #1
 801752c:	602b      	str	r3, [r5, #0]
}
 801752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    plen = mbedtls_mpi_size( &grp->P );
 8017530:	1d38      	adds	r0, r7, #4
 8017532:	f7fb f9d0 	bl	80128d6 <mbedtls_mpi_size>
 8017536:	4607      	mov	r7, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 8017538:	b9c6      	cbnz	r6, 801756c <mbedtls_ecp_point_write_binary+0x64>
        *olen = 2 * plen + 1;
 801753a:	0043      	lsls	r3, r0, #1
 801753c:	3301      	adds	r3, #1
 801753e:	602b      	str	r3, [r5, #0]
        if( buflen < *olen )
 8017540:	9a07      	ldr	r2, [sp, #28]
 8017542:	4293      	cmp	r3, r2
 8017544:	d82b      	bhi.n	801759e <mbedtls_ecp_point_write_binary+0x96>
        buf[0] = 0x04;
 8017546:	9906      	ldr	r1, [sp, #24]
 8017548:	2304      	movs	r3, #4
 801754a:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 801754e:	4602      	mov	r2, r0
 8017550:	4620      	mov	r0, r4
 8017552:	f7fb f9f7 	bl	8012944 <mbedtls_mpi_write_binary>
 8017556:	2800      	cmp	r0, #0
 8017558:	d1e9      	bne.n	801752e <mbedtls_ecp_point_write_binary+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 801755a:	1c79      	adds	r1, r7, #1
 801755c:	463a      	mov	r2, r7
 801755e:	9b06      	ldr	r3, [sp, #24]
 8017560:	4419      	add	r1, r3
 8017562:	f104 000c 	add.w	r0, r4, #12
 8017566:	f7fb f9ed 	bl	8012944 <mbedtls_mpi_write_binary>
 801756a:	e7e0      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
    else if( format == MBEDTLS_ECP_PF_COMPRESSED )
 801756c:	2e01      	cmp	r6, #1
 801756e:	d001      	beq.n	8017574 <mbedtls_ecp_point_write_binary+0x6c>
    int ret = 0;
 8017570:	2000      	movs	r0, #0
 8017572:	e7dc      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
        *olen = plen + 1;
 8017574:	1c43      	adds	r3, r0, #1
 8017576:	602b      	str	r3, [r5, #0]
        if( buflen < *olen )
 8017578:	9a07      	ldr	r2, [sp, #28]
 801757a:	4293      	cmp	r3, r2
 801757c:	d811      	bhi.n	80175a2 <mbedtls_ecp_point_write_binary+0x9a>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 801757e:	2100      	movs	r1, #0
 8017580:	f104 000c 	add.w	r0, r4, #12
 8017584:	f7fb f953 	bl	801282e <mbedtls_mpi_get_bit>
 8017588:	3002      	adds	r0, #2
 801758a:	9906      	ldr	r1, [sp, #24]
 801758c:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8017590:	463a      	mov	r2, r7
 8017592:	4620      	mov	r0, r4
 8017594:	f7fb f9d6 	bl	8012944 <mbedtls_mpi_write_binary>
cleanup:
 8017598:	e7c9      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 801759a:	4803      	ldr	r0, [pc, #12]	; (80175a8 <mbedtls_ecp_point_write_binary+0xa0>)
 801759c:	e7c7      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 801759e:	4802      	ldr	r0, [pc, #8]	; (80175a8 <mbedtls_ecp_point_write_binary+0xa0>)
 80175a0:	e7c5      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 80175a2:	4801      	ldr	r0, [pc, #4]	; (80175a8 <mbedtls_ecp_point_write_binary+0xa0>)
 80175a4:	e7c3      	b.n	801752e <mbedtls_ecp_point_write_binary+0x26>
 80175a6:	bf00      	nop
 80175a8:	ffffb100 	.word	0xffffb100

080175ac <mbedtls_ecp_point_read_binary>:
    if( ilen < 1 )
 80175ac:	b363      	cbz	r3, 8017608 <mbedtls_ecp_point_read_binary+0x5c>
{
 80175ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b0:	460d      	mov	r5, r1
 80175b2:	4614      	mov	r4, r2
 80175b4:	461e      	mov	r6, r3
    if( buf[0] == 0x00 )
 80175b6:	7813      	ldrb	r3, [r2, #0]
 80175b8:	b92b      	cbnz	r3, 80175c6 <mbedtls_ecp_point_read_binary+0x1a>
        if( ilen == 1 )
 80175ba:	2e01      	cmp	r6, #1
 80175bc:	d126      	bne.n	801760c <mbedtls_ecp_point_read_binary+0x60>
            return( mbedtls_ecp_set_zero( pt ) );
 80175be:	4608      	mov	r0, r1
 80175c0:	f7ff fd7c 	bl	80170bc <mbedtls_ecp_set_zero>
}
 80175c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    plen = mbedtls_mpi_size( &grp->P );
 80175c6:	3004      	adds	r0, #4
 80175c8:	f7fb f985 	bl	80128d6 <mbedtls_mpi_size>
 80175cc:	4607      	mov	r7, r0
    if( buf[0] != 0x04 )
 80175ce:	7823      	ldrb	r3, [r4, #0]
 80175d0:	2b04      	cmp	r3, #4
 80175d2:	d11d      	bne.n	8017610 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 80175d4:	0043      	lsls	r3, r0, #1
 80175d6:	3301      	adds	r3, #1
 80175d8:	42b3      	cmp	r3, r6
 80175da:	d11b      	bne.n	8017614 <mbedtls_ecp_point_read_binary+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 80175dc:	4602      	mov	r2, r0
 80175de:	1c61      	adds	r1, r4, #1
 80175e0:	4628      	mov	r0, r5
 80175e2:	f7fb f97e 	bl	80128e2 <mbedtls_mpi_read_binary>
 80175e6:	2800      	cmp	r0, #0
 80175e8:	d1ec      	bne.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 80175ea:	1c79      	adds	r1, r7, #1
 80175ec:	463a      	mov	r2, r7
 80175ee:	4421      	add	r1, r4
 80175f0:	f105 000c 	add.w	r0, r5, #12
 80175f4:	f7fb f975 	bl	80128e2 <mbedtls_mpi_read_binary>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d1e3      	bne.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 80175fc:	2101      	movs	r1, #1
 80175fe:	f105 0018 	add.w	r0, r5, #24
 8017602:	f7fb f8f7 	bl	80127f4 <mbedtls_mpi_lset>
cleanup:
 8017606:	e7dd      	b.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017608:	4803      	ldr	r0, [pc, #12]	; (8017618 <mbedtls_ecp_point_read_binary+0x6c>)
}
 801760a:	4770      	bx	lr
            return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801760c:	4802      	ldr	r0, [pc, #8]	; (8017618 <mbedtls_ecp_point_read_binary+0x6c>)
 801760e:	e7d9      	b.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8017610:	4802      	ldr	r0, [pc, #8]	; (801761c <mbedtls_ecp_point_read_binary+0x70>)
 8017612:	e7d7      	b.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017614:	4800      	ldr	r0, [pc, #0]	; (8017618 <mbedtls_ecp_point_read_binary+0x6c>)
 8017616:	e7d5      	b.n	80175c4 <mbedtls_ecp_point_read_binary+0x18>
 8017618:	ffffb080 	.word	0xffffb080
 801761c:	ffffb180 	.word	0xffffb180

08017620 <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
 8017620:	2b01      	cmp	r3, #1
 8017622:	d90f      	bls.n	8017644 <mbedtls_ecp_tls_read_point+0x24>
{
 8017624:	b538      	push	{r3, r4, r5, lr}
 8017626:	4615      	mov	r5, r2
 8017628:	461c      	mov	r4, r3
    data_len = *(*buf)++;
 801762a:	6813      	ldr	r3, [r2, #0]
 801762c:	1c5a      	adds	r2, r3, #1
 801762e:	602a      	str	r2, [r5, #0]
 8017630:	781b      	ldrb	r3, [r3, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 8017632:	b14b      	cbz	r3, 8017648 <mbedtls_ecp_tls_read_point+0x28>
 8017634:	3c01      	subs	r4, #1
 8017636:	42a3      	cmp	r3, r4
 8017638:	d808      	bhi.n	801764c <mbedtls_ecp_tls_read_point+0x2c>
    *buf += data_len;
 801763a:	18d4      	adds	r4, r2, r3
 801763c:	602c      	str	r4, [r5, #0]
    return( mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len ) );
 801763e:	f7ff ffb5 	bl	80175ac <mbedtls_ecp_point_read_binary>
}
 8017642:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017644:	4802      	ldr	r0, [pc, #8]	; (8017650 <mbedtls_ecp_tls_read_point+0x30>)
}
 8017646:	4770      	bx	lr
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017648:	4801      	ldr	r0, [pc, #4]	; (8017650 <mbedtls_ecp_tls_read_point+0x30>)
 801764a:	e7fa      	b.n	8017642 <mbedtls_ecp_tls_read_point+0x22>
 801764c:	4800      	ldr	r0, [pc, #0]	; (8017650 <mbedtls_ecp_tls_read_point+0x30>)
 801764e:	e7f8      	b.n	8017642 <mbedtls_ecp_tls_read_point+0x22>
 8017650:	ffffb080 	.word	0xffffb080

08017654 <mbedtls_ecp_tls_write_point>:
{
 8017654:	b530      	push	{r4, r5, lr}
 8017656:	b083      	sub	sp, #12
 8017658:	461c      	mov	r4, r3
 801765a:	9d06      	ldr	r5, [sp, #24]
 801765c:	9b07      	ldr	r3, [sp, #28]
    if( blen < 1 )
 801765e:	b173      	cbz	r3, 801767e <mbedtls_ecp_tls_write_point+0x2a>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 8017660:	3b01      	subs	r3, #1
 8017662:	9301      	str	r3, [sp, #4]
 8017664:	1c6b      	adds	r3, r5, #1
 8017666:	9300      	str	r3, [sp, #0]
 8017668:	4623      	mov	r3, r4
 801766a:	f7ff ff4d 	bl	8017508 <mbedtls_ecp_point_write_binary>
 801766e:	b920      	cbnz	r0, 801767a <mbedtls_ecp_tls_write_point+0x26>
    buf[0] = (unsigned char) *olen;
 8017670:	6823      	ldr	r3, [r4, #0]
 8017672:	702b      	strb	r3, [r5, #0]
    ++*olen;
 8017674:	6823      	ldr	r3, [r4, #0]
 8017676:	3301      	adds	r3, #1
 8017678:	6023      	str	r3, [r4, #0]
}
 801767a:	b003      	add	sp, #12
 801767c:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801767e:	4801      	ldr	r0, [pc, #4]	; (8017684 <mbedtls_ecp_tls_write_point+0x30>)
 8017680:	e7fb      	b.n	801767a <mbedtls_ecp_tls_write_point+0x26>
 8017682:	bf00      	nop
 8017684:	ffffb080 	.word	0xffffb080

08017688 <mbedtls_ecp_tls_read_group_id>:
    if( len < 3 )
 8017688:	2a02      	cmp	r2, #2
 801768a:	d916      	bls.n	80176ba <mbedtls_ecp_tls_read_group_id+0x32>
{
 801768c:	b510      	push	{r4, lr}
 801768e:	4604      	mov	r4, r0
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 8017690:	680b      	ldr	r3, [r1, #0]
 8017692:	1c5a      	adds	r2, r3, #1
 8017694:	600a      	str	r2, [r1, #0]
 8017696:	781a      	ldrb	r2, [r3, #0]
 8017698:	2a03      	cmp	r2, #3
 801769a:	d110      	bne.n	80176be <mbedtls_ecp_tls_read_group_id+0x36>
    tls_id = *(*buf)++;
 801769c:	1c9a      	adds	r2, r3, #2
 801769e:	600a      	str	r2, [r1, #0]
 80176a0:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
 80176a2:	1cda      	adds	r2, r3, #3
 80176a4:	600a      	str	r2, [r1, #0]
 80176a6:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 80176a8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80176ac:	f7ff fc4e 	bl	8016f4c <mbedtls_ecp_curve_info_from_tls_id>
 80176b0:	b138      	cbz	r0, 80176c2 <mbedtls_ecp_tls_read_group_id+0x3a>
    *grp = curve_info->grp_id;
 80176b2:	7803      	ldrb	r3, [r0, #0]
 80176b4:	7023      	strb	r3, [r4, #0]
    return( 0 );
 80176b6:	2000      	movs	r0, #0
}
 80176b8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80176ba:	4803      	ldr	r0, [pc, #12]	; (80176c8 <mbedtls_ecp_tls_read_group_id+0x40>)
}
 80176bc:	4770      	bx	lr
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80176be:	4802      	ldr	r0, [pc, #8]	; (80176c8 <mbedtls_ecp_tls_read_group_id+0x40>)
 80176c0:	e7fa      	b.n	80176b8 <mbedtls_ecp_tls_read_group_id+0x30>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80176c2:	4802      	ldr	r0, [pc, #8]	; (80176cc <mbedtls_ecp_tls_read_group_id+0x44>)
 80176c4:	e7f8      	b.n	80176b8 <mbedtls_ecp_tls_read_group_id+0x30>
 80176c6:	bf00      	nop
 80176c8:	ffffb080 	.word	0xffffb080
 80176cc:	ffffb180 	.word	0xffffb180

080176d0 <mbedtls_ecp_tls_write_group>:
{
 80176d0:	b570      	push	{r4, r5, r6, lr}
 80176d2:	460e      	mov	r6, r1
 80176d4:	4614      	mov	r4, r2
 80176d6:	461d      	mov	r5, r3
    if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )
 80176d8:	7800      	ldrb	r0, [r0, #0]
 80176da:	f7ff fc29 	bl	8016f30 <mbedtls_ecp_curve_info_from_grp_id>
 80176de:	b158      	cbz	r0, 80176f8 <mbedtls_ecp_tls_write_group+0x28>
    *olen = 3;
 80176e0:	2303      	movs	r3, #3
 80176e2:	6033      	str	r3, [r6, #0]
    if( blen < *olen )
 80176e4:	2d02      	cmp	r5, #2
 80176e6:	d909      	bls.n	80176fc <mbedtls_ecp_tls_write_group+0x2c>
    *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;
 80176e8:	7023      	strb	r3, [r4, #0]
    buf[0] = curve_info->tls_id >> 8;
 80176ea:	8843      	ldrh	r3, [r0, #2]
 80176ec:	0a1b      	lsrs	r3, r3, #8
 80176ee:	7063      	strb	r3, [r4, #1]
    buf[1] = curve_info->tls_id & 0xFF;
 80176f0:	8843      	ldrh	r3, [r0, #2]
 80176f2:	70a3      	strb	r3, [r4, #2]
    return( 0 );
 80176f4:	2000      	movs	r0, #0
}
 80176f6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80176f8:	4801      	ldr	r0, [pc, #4]	; (8017700 <mbedtls_ecp_tls_write_group+0x30>)
 80176fa:	e7fc      	b.n	80176f6 <mbedtls_ecp_tls_write_group+0x26>
        return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 80176fc:	4801      	ldr	r0, [pc, #4]	; (8017704 <mbedtls_ecp_tls_write_group+0x34>)
 80176fe:	e7fa      	b.n	80176f6 <mbedtls_ecp_tls_write_group+0x26>
 8017700:	ffffb080 	.word	0xffffb080
 8017704:	ffffb100 	.word	0xffffb100

08017708 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 8017708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801770c:	b086      	sub	sp, #24
 801770e:	4607      	mov	r7, r0
 8017710:	460c      	mov	r4, r1
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8017712:	2101      	movs	r1, #1
 8017714:	f104 0018 	add.w	r0, r4, #24
 8017718:	f7fb fb1b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801771c:	2800      	cmp	r0, #0
 801771e:	f040 80c1 	bne.w	80178a4 <mbedtls_ecp_check_pubkey+0x19c>
    if( grp->G.X.p == NULL )
 8017722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017724:	2b00      	cmp	r3, #0
 8017726:	f000 80bf 	beq.w	80178a8 <mbedtls_ecp_check_pubkey+0x1a0>
    if( grp->G.Y.p == NULL )
 801772a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 80bd 	beq.w	80178ac <mbedtls_ecp_check_pubkey+0x1a4>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8017732:	2100      	movs	r1, #0
 8017734:	4620      	mov	r0, r4
 8017736:	f7fb fb0c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801773a:	2800      	cmp	r0, #0
 801773c:	f2c0 80aa 	blt.w	8017894 <mbedtls_ecp_check_pubkey+0x18c>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8017740:	f104 050c 	add.w	r5, r4, #12
 8017744:	2100      	movs	r1, #0
 8017746:	4628      	mov	r0, r5
 8017748:	f7fb fb03 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 801774c:	2800      	cmp	r0, #0
 801774e:	f2c0 80a3 	blt.w	8017898 <mbedtls_ecp_check_pubkey+0x190>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8017752:	1d3e      	adds	r6, r7, #4
 8017754:	4631      	mov	r1, r6
 8017756:	4620      	mov	r0, r4
 8017758:	f7fb faa3 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 801775c:	2800      	cmp	r0, #0
 801775e:	f280 809d 	bge.w	801789c <mbedtls_ecp_check_pubkey+0x194>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8017762:	4631      	mov	r1, r6
 8017764:	4628      	mov	r0, r5
 8017766:	f7fb fa9c 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 801776a:	2800      	cmp	r0, #0
 801776c:	f280 8098 	bge.w	80178a0 <mbedtls_ecp_check_pubkey+0x198>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8017770:	4668      	mov	r0, sp
 8017772:	f7fa ff5a 	bl	801262a <mbedtls_mpi_init>
 8017776:	a803      	add	r0, sp, #12
 8017778:	f7fa ff57 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 801777c:	462a      	mov	r2, r5
 801777e:	4629      	mov	r1, r5
 8017780:	4668      	mov	r0, sp
 8017782:	f7fb fc0f 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017786:	4605      	mov	r5, r0
 8017788:	b148      	cbz	r0, 801779e <mbedtls_ecp_check_pubkey+0x96>
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 801778a:	4668      	mov	r0, sp
 801778c:	f7fa ff53 	bl	8012636 <mbedtls_mpi_free>
 8017790:	a803      	add	r0, sp, #12
 8017792:	f7fa ff50 	bl	8012636 <mbedtls_mpi_free>
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8017796:	4628      	mov	r0, r5
 8017798:	b006      	add	sp, #24
 801779a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 801779e:	4639      	mov	r1, r7
 80177a0:	4668      	mov	r0, sp
 80177a2:	f7fe ff13 	bl	80165cc <ecp_modp>
 80177a6:	4605      	mov	r5, r0
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d1ee      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 80177ac:	4622      	mov	r2, r4
 80177ae:	4621      	mov	r1, r4
 80177b0:	a803      	add	r0, sp, #12
 80177b2:	f7fb fbf7 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 80177b6:	4605      	mov	r5, r0
 80177b8:	2800      	cmp	r0, #0
 80177ba:	d1e6      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
 80177bc:	4639      	mov	r1, r7
 80177be:	a803      	add	r0, sp, #12
 80177c0:	f7fe ff04 	bl	80165cc <ecp_modp>
 80177c4:	4605      	mov	r5, r0
 80177c6:	2800      	cmp	r0, #0
 80177c8:	d1df      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
    if( grp->A.p == NULL )
 80177ca:	69bb      	ldr	r3, [r7, #24]
 80177cc:	b1bb      	cbz	r3, 80177fe <mbedtls_ecp_check_pubkey+0xf6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 80177ce:	f107 0210 	add.w	r2, r7, #16
 80177d2:	a903      	add	r1, sp, #12
 80177d4:	4608      	mov	r0, r1
 80177d6:	f7fb fb69 	bl	8012eac <mbedtls_mpi_add_mpi>
 80177da:	4605      	mov	r5, r0
 80177dc:	2800      	cmp	r0, #0
 80177de:	d1d4      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
 80177e0:	4631      	mov	r1, r6
 80177e2:	a803      	add	r0, sp, #12
 80177e4:	f7fb fa5d 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	db23      	blt.n	8017834 <mbedtls_ecp_check_pubkey+0x12c>
 80177ec:	4632      	mov	r2, r6
 80177ee:	a903      	add	r1, sp, #12
 80177f0:	4608      	mov	r0, r1
 80177f2:	f7fb fb1e 	bl	8012e32 <mbedtls_mpi_sub_abs>
 80177f6:	4605      	mov	r5, r0
 80177f8:	2800      	cmp	r0, #0
 80177fa:	d0f1      	beq.n	80177e0 <mbedtls_ecp_check_pubkey+0xd8>
 80177fc:	e7c5      	b.n	801778a <mbedtls_ecp_check_pubkey+0x82>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 80177fe:	2203      	movs	r2, #3
 8017800:	a903      	add	r1, sp, #12
 8017802:	4608      	mov	r0, r1
 8017804:	f7fb fbb7 	bl	8012f76 <mbedtls_mpi_sub_int>
 8017808:	4605      	mov	r5, r0
 801780a:	2800      	cmp	r0, #0
 801780c:	d1bd      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
 801780e:	f04f 0800 	mov.w	r8, #0
 8017812:	9b03      	ldr	r3, [sp, #12]
 8017814:	2b00      	cmp	r3, #0
 8017816:	da0d      	bge.n	8017834 <mbedtls_ecp_check_pubkey+0x12c>
 8017818:	4641      	mov	r1, r8
 801781a:	a803      	add	r0, sp, #12
 801781c:	f7fb fa99 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017820:	b140      	cbz	r0, 8017834 <mbedtls_ecp_check_pubkey+0x12c>
 8017822:	4632      	mov	r2, r6
 8017824:	a903      	add	r1, sp, #12
 8017826:	4608      	mov	r0, r1
 8017828:	f7fb fb40 	bl	8012eac <mbedtls_mpi_add_mpi>
 801782c:	4605      	mov	r5, r0
 801782e:	2800      	cmp	r0, #0
 8017830:	d0ef      	beq.n	8017812 <mbedtls_ecp_check_pubkey+0x10a>
 8017832:	e7aa      	b.n	801778a <mbedtls_ecp_check_pubkey+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8017834:	4622      	mov	r2, r4
 8017836:	a903      	add	r1, sp, #12
 8017838:	4608      	mov	r0, r1
 801783a:	f7fb fbb3 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801783e:	4605      	mov	r5, r0
 8017840:	2800      	cmp	r0, #0
 8017842:	d1a2      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
 8017844:	4639      	mov	r1, r7
 8017846:	a803      	add	r0, sp, #12
 8017848:	f7fe fec0 	bl	80165cc <ecp_modp>
 801784c:	4605      	mov	r5, r0
 801784e:	2800      	cmp	r0, #0
 8017850:	d19b      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8017852:	f107 021c 	add.w	r2, r7, #28
 8017856:	a903      	add	r1, sp, #12
 8017858:	4608      	mov	r0, r1
 801785a:	f7fb fb27 	bl	8012eac <mbedtls_mpi_add_mpi>
 801785e:	4605      	mov	r5, r0
 8017860:	2800      	cmp	r0, #0
 8017862:	d192      	bne.n	801778a <mbedtls_ecp_check_pubkey+0x82>
 8017864:	4631      	mov	r1, r6
 8017866:	a803      	add	r0, sp, #12
 8017868:	f7fb fa1b 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801786c:	2800      	cmp	r0, #0
 801786e:	db08      	blt.n	8017882 <mbedtls_ecp_check_pubkey+0x17a>
 8017870:	4632      	mov	r2, r6
 8017872:	a903      	add	r1, sp, #12
 8017874:	4608      	mov	r0, r1
 8017876:	f7fb fadc 	bl	8012e32 <mbedtls_mpi_sub_abs>
 801787a:	4605      	mov	r5, r0
 801787c:	2800      	cmp	r0, #0
 801787e:	d0f1      	beq.n	8017864 <mbedtls_ecp_check_pubkey+0x15c>
 8017880:	e783      	b.n	801778a <mbedtls_ecp_check_pubkey+0x82>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8017882:	a903      	add	r1, sp, #12
 8017884:	4668      	mov	r0, sp
 8017886:	f7fb fa0c 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 801788a:	1e05      	subs	r5, r0, #0
 801788c:	4b08      	ldr	r3, [pc, #32]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
 801788e:	bf18      	it	ne
 8017890:	461d      	movne	r5, r3
 8017892:	e77a      	b.n	801778a <mbedtls_ecp_check_pubkey+0x82>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8017894:	4d06      	ldr	r5, [pc, #24]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
 8017896:	e77e      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
 8017898:	4d05      	ldr	r5, [pc, #20]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
 801789a:	e77c      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
 801789c:	4d04      	ldr	r5, [pc, #16]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
 801789e:	e77a      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
 80178a0:	4d03      	ldr	r5, [pc, #12]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
        return( ecp_check_pubkey_sw( grp, pt ) );
 80178a2:	e778      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80178a4:	4d02      	ldr	r5, [pc, #8]	; (80178b0 <mbedtls_ecp_check_pubkey+0x1a8>)
 80178a6:	e776      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80178a8:	4d02      	ldr	r5, [pc, #8]	; (80178b4 <mbedtls_ecp_check_pubkey+0x1ac>)
 80178aa:	e774      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
 80178ac:	4d01      	ldr	r5, [pc, #4]	; (80178b4 <mbedtls_ecp_check_pubkey+0x1ac>)
 80178ae:	e772      	b.n	8017796 <mbedtls_ecp_check_pubkey+0x8e>
 80178b0:	ffffb380 	.word	0xffffb380
 80178b4:	ffffb080 	.word	0xffffb080

080178b8 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 80178b8:	b538      	push	{r3, r4, r5, lr}
    if( grp->G.X.p == NULL )
 80178ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80178bc:	b19b      	cbz	r3, 80178e6 <mbedtls_ecp_check_privkey+0x2e>
 80178be:	4604      	mov	r4, r0
 80178c0:	460d      	mov	r5, r1
    if( grp->G.Y.p == NULL )
 80178c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80178c4:	b18b      	cbz	r3, 80178ea <mbedtls_ecp_check_privkey+0x32>
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 80178c6:	2101      	movs	r1, #1
 80178c8:	4628      	mov	r0, r5
 80178ca:	f7fb fa42 	bl	8012d52 <mbedtls_mpi_cmp_int>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	db0d      	blt.n	80178ee <mbedtls_ecp_check_privkey+0x36>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 80178d2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80178d6:	4628      	mov	r0, r5
 80178d8:	f7fb f9e3 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80178dc:	2800      	cmp	r0, #0
 80178de:	4805      	ldr	r0, [pc, #20]	; (80178f4 <mbedtls_ecp_check_privkey+0x3c>)
 80178e0:	bfb8      	it	lt
 80178e2:	2000      	movlt	r0, #0
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 80178e4:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80178e6:	4804      	ldr	r0, [pc, #16]	; (80178f8 <mbedtls_ecp_check_privkey+0x40>)
 80178e8:	e7fc      	b.n	80178e4 <mbedtls_ecp_check_privkey+0x2c>
 80178ea:	4803      	ldr	r0, [pc, #12]	; (80178f8 <mbedtls_ecp_check_privkey+0x40>)
 80178ec:	e7fa      	b.n	80178e4 <mbedtls_ecp_check_privkey+0x2c>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 80178ee:	4801      	ldr	r0, [pc, #4]	; (80178f4 <mbedtls_ecp_check_privkey+0x3c>)
 80178f0:	e7f8      	b.n	80178e4 <mbedtls_ecp_check_privkey+0x2c>
 80178f2:	bf00      	nop
 80178f4:	ffffb380 	.word	0xffffb380
 80178f8:	ffffb080 	.word	0xffffb080

080178fc <mbedtls_ecp_mul_restartable>:
{
 80178fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017900:	b0c7      	sub	sp, #284	; 0x11c
 8017902:	4605      	mov	r5, r0
 8017904:	9103      	str	r1, [sp, #12]
 8017906:	4690      	mov	r8, r2
 8017908:	461c      	mov	r4, r3
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 801790a:	4611      	mov	r1, r2
 801790c:	f7ff ffd4 	bl	80178b8 <mbedtls_ecp_check_privkey>
 8017910:	4606      	mov	r6, r0
 8017912:	b118      	cbz	r0, 801791c <mbedtls_ecp_mul_restartable+0x20>
}
 8017914:	4630      	mov	r0, r6
 8017916:	b047      	add	sp, #284	; 0x11c
 8017918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 801791c:	4621      	mov	r1, r4
 801791e:	4628      	mov	r0, r5
 8017920:	f7ff fef2 	bl	8017708 <mbedtls_ecp_check_pubkey>
 8017924:	4606      	mov	r6, r0
 8017926:	2800      	cmp	r0, #0
 8017928:	d1f4      	bne.n	8017914 <mbedtls_ecp_mul_restartable+0x18>
    if( grp->G.X.p == NULL )
 801792a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801792c:	2b00      	cmp	r3, #0
 801792e:	f000 81e0 	beq.w	8017cf2 <mbedtls_ecp_mul_restartable+0x3f6>
    if( grp->G.Y.p == NULL )
 8017932:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8017934:	2b00      	cmp	r3, #0
 8017936:	f000 81de 	beq.w	8017cf6 <mbedtls_ecp_mul_restartable+0x3fa>
    w = grp->nbits >= 384 ? 5 : 4;
 801793a:	6def      	ldr	r7, [r5, #92]	; 0x5c
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 801793c:	2124      	movs	r1, #36	; 0x24
 801793e:	2002      	movs	r0, #2
 8017940:	f011 faa4 	bl	8028e8c <mbedtls_calloc>
        if( T == NULL )
 8017944:	4682      	mov	sl, r0
 8017946:	2800      	cmp	r0, #0
 8017948:	f000 81d1 	beq.w	8017cee <mbedtls_ecp_mul_restartable+0x3f2>
            mbedtls_ecp_point_init( &T[i] );
 801794c:	f7ff fb0c 	bl	8016f68 <mbedtls_ecp_point_init>
 8017950:	f10a 0324 	add.w	r3, sl, #36	; 0x24
 8017954:	9304      	str	r3, [sp, #16]
 8017956:	4618      	mov	r0, r3
 8017958:	f7ff fb06 	bl	8016f68 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 801795c:	4621      	mov	r1, r4
 801795e:	4650      	mov	r0, sl
 8017960:	f7ff fb8d 	bl	801707e <mbedtls_ecp_copy>
 8017964:	4606      	mov	r6, r0
 8017966:	bb60      	cbnz	r0, 80179c2 <mbedtls_ecp_mul_restartable+0xc6>
    d = ( grp->nbits + w - 1 ) / w;
 8017968:	1c7b      	adds	r3, r7, #1
 801796a:	9305      	str	r3, [sp, #20]
 801796c:	ea4f 0953 	mov.w	r9, r3, lsr #1
    for( ; j < d * ( w - 1 ); j++ )
 8017970:	2b01      	cmp	r3, #1
 8017972:	d935      	bls.n	80179e0 <mbedtls_ecp_mul_restartable+0xe4>
        j = 0;
 8017974:	2700      	movs	r7, #0
        i = 1U << ( j / d );
 8017976:	f04f 0b01 	mov.w	fp, #1
 801797a:	e009      	b.n	8017990 <mbedtls_ecp_mul_restartable+0x94>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 801797c:	4622      	mov	r2, r4
 801797e:	4621      	mov	r1, r4
 8017980:	4628      	mov	r0, r5
 8017982:	f7fe fe6f 	bl	8016664 <ecp_double_jac>
 8017986:	4606      	mov	r6, r0
 8017988:	b9d8      	cbnz	r0, 80179c2 <mbedtls_ecp_mul_restartable+0xc6>
    for( ; j < d * ( w - 1 ); j++ )
 801798a:	3701      	adds	r7, #1
 801798c:	45b9      	cmp	r9, r7
 801798e:	d927      	bls.n	80179e0 <mbedtls_ecp_mul_restartable+0xe4>
        i = 1U << ( j / d );
 8017990:	fbb7 f3f9 	udiv	r3, r7, r9
 8017994:	fa0b f103 	lsl.w	r1, fp, r3
        cur = T + i;
 8017998:	b2cc      	uxtb	r4, r1
 801799a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 801799e:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
        if( j % d == 0 )
 80179a2:	fb09 7313 	mls	r3, r9, r3, r7
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d1e8      	bne.n	801797c <mbedtls_ecp_mul_restartable+0x80>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80179aa:	f3c1 0146 	ubfx	r1, r1, #1, #7
 80179ae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80179b2:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 80179b6:	4620      	mov	r0, r4
 80179b8:	f7ff fb61 	bl	801707e <mbedtls_ecp_copy>
 80179bc:	4606      	mov	r6, r0
 80179be:	2800      	cmp	r0, #0
 80179c0:	d0dc      	beq.n	801797c <mbedtls_ecp_mul_restartable+0x80>
    if( T == grp->T )
 80179c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80179c4:	459a      	cmp	sl, r3
 80179c6:	d04d      	beq.n	8017a64 <mbedtls_ecp_mul_restartable+0x168>
            mbedtls_ecp_point_free( &T[i] );
 80179c8:	4650      	mov	r0, sl
 80179ca:	f7ff fb08 	bl	8016fde <mbedtls_ecp_point_free>
 80179ce:	9804      	ldr	r0, [sp, #16]
 80179d0:	f7ff fb05 	bl	8016fde <mbedtls_ecp_point_free>
        mbedtls_free( T );
 80179d4:	4650      	mov	r0, sl
 80179d6:	f011 fa67 	bl	8028ea8 <mbedtls_free>
    if( ret != 0 )
 80179da:	2e00      	cmp	r6, #0
 80179dc:	d09a      	beq.n	8017914 <mbedtls_ecp_mul_restartable+0x18>
 80179de:	e041      	b.n	8017a64 <mbedtls_ecp_mul_restartable+0x168>
        TT[j++] = T + i;
 80179e0:	9c04      	ldr	r4, [sp, #16]
 80179e2:	9415      	str	r4, [sp, #84]	; 0x54
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 80179e4:	2201      	movs	r2, #1
 80179e6:	a915      	add	r1, sp, #84	; 0x54
 80179e8:	4628      	mov	r0, r5
 80179ea:	f7ff f8fb 	bl	8016be4 <ecp_normalize_jac_many>
 80179ee:	4606      	mov	r6, r0
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d1e6      	bne.n	80179c2 <mbedtls_ecp_mul_restartable+0xc6>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 80179f4:	4623      	mov	r3, r4
 80179f6:	4652      	mov	r2, sl
 80179f8:	4621      	mov	r1, r4
 80179fa:	4628      	mov	r0, r5
 80179fc:	f7ff fb76 	bl	80170ec <ecp_add_mixed>
 8017a00:	4606      	mov	r6, r0
 8017a02:	2800      	cmp	r0, #0
 8017a04:	d1dd      	bne.n	80179c2 <mbedtls_ecp_mul_restartable+0xc6>
        TT[j] = T + j + 1;
 8017a06:	9415      	str	r4, [sp, #84]	; 0x54
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 8017a08:	2201      	movs	r2, #1
 8017a0a:	a915      	add	r1, sp, #84	; 0x54
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	f7ff f8e9 	bl	8016be4 <ecp_normalize_jac_many>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 8017a12:	4606      	mov	r6, r0
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d1d4      	bne.n	80179c2 <mbedtls_ecp_mul_restartable+0xc6>
    mbedtls_mpi_init( &M );
 8017a18:	a809      	add	r0, sp, #36	; 0x24
 8017a1a:	f7fa fe06 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 8017a1e:	a80c      	add	r0, sp, #48	; 0x30
 8017a20:	f7fa fe03 	bl	801262a <mbedtls_mpi_init>
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 8017a24:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8017a28:	2100      	movs	r1, #0
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f7fa feff 	bl	801282e <mbedtls_mpi_get_bit>
 8017a30:	2801      	cmp	r0, #1
 8017a32:	f040 8164 	bne.w	8017cfe <mbedtls_ecp_mul_restartable+0x402>
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 8017a36:	2100      	movs	r1, #0
 8017a38:	4640      	mov	r0, r8
 8017a3a:	f7fa fef8 	bl	801282e <mbedtls_mpi_get_bit>
 8017a3e:	fab0 fb80 	clz	fp, r0
 8017a42:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 8017a46:	4641      	mov	r1, r8
 8017a48:	a809      	add	r0, sp, #36	; 0x24
 8017a4a:	f7fa fe6a 	bl	8012722 <mbedtls_mpi_copy>
 8017a4e:	4606      	mov	r6, r0
 8017a50:	b160      	cbz	r0, 8017a6c <mbedtls_ecp_mul_restartable+0x170>
    mbedtls_mpi_free( &mm );
 8017a52:	a80c      	add	r0, sp, #48	; 0x30
 8017a54:	f7fa fdef 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 8017a58:	a809      	add	r0, sp, #36	; 0x24
 8017a5a:	f7fa fdec 	bl	8012636 <mbedtls_mpi_free>
    if( T == grp->T )
 8017a5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8017a60:	459a      	cmp	sl, r3
 8017a62:	d1b1      	bne.n	80179c8 <mbedtls_ecp_mul_restartable+0xcc>
        mbedtls_ecp_point_free( R );
 8017a64:	9803      	ldr	r0, [sp, #12]
 8017a66:	f7ff faba 	bl	8016fde <mbedtls_ecp_point_free>
 8017a6a:	e753      	b.n	8017914 <mbedtls_ecp_mul_restartable+0x18>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 8017a6c:	4642      	mov	r2, r8
 8017a6e:	4621      	mov	r1, r4
 8017a70:	a80c      	add	r0, sp, #48	; 0x30
 8017a72:	f7fb fa41 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8017a76:	4606      	mov	r6, r0
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	d1ea      	bne.n	8017a52 <mbedtls_ecp_mul_restartable+0x156>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 8017a7c:	465a      	mov	r2, fp
 8017a7e:	a90c      	add	r1, sp, #48	; 0x30
 8017a80:	a809      	add	r0, sp, #36	; 0x24
 8017a82:	f7fa fe80 	bl	8012786 <mbedtls_mpi_safe_cond_assign>
 8017a86:	4606      	mov	r6, r0
 8017a88:	2800      	cmp	r0, #0
 8017a8a:	d1e2      	bne.n	8017a52 <mbedtls_ecp_mul_restartable+0x156>
    memset( x, 0, d+1 );
 8017a8c:	f109 0201 	add.w	r2, r9, #1
 8017a90:	2100      	movs	r1, #0
 8017a92:	a815      	add	r0, sp, #84	; 0x54
 8017a94:	f012 fd79 	bl	802a58a <memset>
    for( i = 0; i < d; i++ )
 8017a98:	9b05      	ldr	r3, [sp, #20]
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	d938      	bls.n	8017b10 <mbedtls_ecp_mul_restartable+0x214>
 8017a9e:	f10d 0854 	add.w	r8, sp, #84	; 0x54
 8017aa2:	4647      	mov	r7, r8
 8017aa4:	2600      	movs	r6, #0
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 8017aa6:	4631      	mov	r1, r6
 8017aa8:	a809      	add	r0, sp, #36	; 0x24
 8017aaa:	f7fa fec0 	bl	801282e <mbedtls_mpi_get_bit>
 8017aae:	783c      	ldrb	r4, [r7, #0]
 8017ab0:	4304      	orrs	r4, r0
 8017ab2:	b264      	sxtb	r4, r4
 8017ab4:	eb09 0106 	add.w	r1, r9, r6
 8017ab8:	a809      	add	r0, sp, #36	; 0x24
 8017aba:	f7fa feb8 	bl	801282e <mbedtls_mpi_get_bit>
 8017abe:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
 8017ac2:	f807 4b01 	strb.w	r4, [r7], #1
    for( i = 0; i < d; i++ )
 8017ac6:	3601      	adds	r6, #1
 8017ac8:	45b1      	cmp	r9, r6
 8017aca:	d8ec      	bhi.n	8017aa6 <mbedtls_ecp_mul_restartable+0x1aa>
 8017acc:	4646      	mov	r6, r8
 8017ace:	2300      	movs	r3, #0
    for( i = 1; i <= d; i++ )
 8017ad0:	f1c8 0801 	rsb	r8, r8, #1
        cc   = x[i] & c;
 8017ad4:	7874      	ldrb	r4, [r6, #1]
        x[i] = x[i] ^ c;
 8017ad6:	ea83 0204 	eor.w	r2, r3, r4
        adjust = 1 - ( x[i] & 0x01 );
 8017ada:	f082 0001 	eor.w	r0, r2, #1
 8017ade:	f000 0001 	and.w	r0, r0, #1
        c   |= x[i] & ( x[i-1] * adjust );
 8017ae2:	b252      	sxtb	r2, r2
 8017ae4:	7831      	ldrb	r1, [r6, #0]
 8017ae6:	fb11 f100 	smulbb	r1, r1, r0
 8017aea:	b249      	sxtb	r1, r1
 8017aec:	ea02 0701 	and.w	r7, r2, r1
        cc   = x[i] & c;
 8017af0:	401c      	ands	r4, r3
        c   |= x[i] & ( x[i-1] * adjust );
 8017af2:	433c      	orrs	r4, r7
 8017af4:	b2e3      	uxtb	r3, r4
        x[i] = x[i] ^ ( x[i-1] * adjust );
 8017af6:	404a      	eors	r2, r1
 8017af8:	f806 2f01 	strb.w	r2, [r6, #1]!
        x[i-1] |= adjust << 7;
 8017afc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017b00:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 8017b04:	f806 0c01 	strb.w	r0, [r6, #-1]
    for( i = 1; i <= d; i++ )
 8017b08:	eb08 0206 	add.w	r2, r8, r6
 8017b0c:	4591      	cmp	r9, r2
 8017b0e:	d2e1      	bcs.n	8017ad4 <mbedtls_ecp_mul_restartable+0x1d8>
    mbedtls_mpi_free( &mm );
 8017b10:	a80c      	add	r0, sp, #48	; 0x30
 8017b12:	f7fa fd90 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 8017b16:	a809      	add	r0, sp, #36	; 0x24
 8017b18:	f7fa fd8d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_ecp_point_init( &Txi );
 8017b1c:	a80c      	add	r0, sp, #48	; 0x30
 8017b1e:	f7ff fa23 	bl	8016f68 <mbedtls_ecp_point_init>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 8017b22:	ab15      	add	r3, sp, #84	; 0x54
 8017b24:	eb03 0809 	add.w	r8, r3, r9
 8017b28:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017b2c:	9300      	str	r3, [sp, #0]
 8017b2e:	2302      	movs	r3, #2
 8017b30:	4652      	mov	r2, sl
 8017b32:	9903      	ldr	r1, [sp, #12]
 8017b34:	4628      	mov	r0, r5
 8017b36:	f7ff f9b6 	bl	8016ea6 <ecp_select_comb>
 8017b3a:	4606      	mov	r6, r0
 8017b3c:	b138      	cbz	r0, 8017b4e <mbedtls_ecp_mul_restartable+0x252>
    mbedtls_ecp_point_free( &Txi );
 8017b3e:	a80c      	add	r0, sp, #48	; 0x30
 8017b40:	f7ff fa4d 	bl	8016fde <mbedtls_ecp_point_free>
    if( T == grp->T )
 8017b44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8017b46:	459a      	cmp	sl, r3
 8017b48:	f47f af3e 	bne.w	80179c8 <mbedtls_ecp_mul_restartable+0xcc>
 8017b4c:	e745      	b.n	80179da <mbedtls_ecp_mul_restartable+0xde>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 8017b4e:	9b03      	ldr	r3, [sp, #12]
 8017b50:	f103 0918 	add.w	r9, r3, #24
 8017b54:	2101      	movs	r1, #1
 8017b56:	4648      	mov	r0, r9
 8017b58:	f7fa fe4c 	bl	80127f4 <mbedtls_mpi_lset>
 8017b5c:	4606      	mov	r6, r0
 8017b5e:	2800      	cmp	r0, #0
 8017b60:	d1ed      	bne.n	8017b3e <mbedtls_ecp_mul_restartable+0x242>
        if( f_rng != 0 )
 8017b62:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	f000 8087 	beq.w	8017c78 <mbedtls_ecp_mul_restartable+0x37c>
    p_size = ( grp->pbits + 7 ) / 8;
 8017b6a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8017b6c:	3307      	adds	r3, #7
 8017b6e:	08db      	lsrs	r3, r3, #3
 8017b70:	9305      	str	r3, [sp, #20]
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8017b72:	a806      	add	r0, sp, #24
 8017b74:	f7fa fd59 	bl	801262a <mbedtls_mpi_init>
 8017b78:	a809      	add	r0, sp, #36	; 0x24
 8017b7a:	f7fa fd56 	bl	801262a <mbedtls_mpi_init>
 8017b7e:	260c      	movs	r6, #12
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8017b80:	1d2c      	adds	r4, r5, #4
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8017b82:	2701      	movs	r7, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 8017b84:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8017b86:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8017b88:	9905      	ldr	r1, [sp, #20]
 8017b8a:	a806      	add	r0, sp, #24
 8017b8c:	f7fb ffe9 	bl	8013b62 <mbedtls_mpi_fill_random>
 8017b90:	b998      	cbnz	r0, 8017bba <mbedtls_ecp_mul_restartable+0x2be>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8017b92:	4621      	mov	r1, r4
 8017b94:	a806      	add	r0, sp, #24
 8017b96:	f7fb f884 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8017b9a:	2800      	cmp	r0, #0
 8017b9c:	db0f      	blt.n	8017bbe <mbedtls_ecp_mul_restartable+0x2c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8017b9e:	4639      	mov	r1, r7
 8017ba0:	a806      	add	r0, sp, #24
 8017ba2:	f7fa ff6c 	bl	8012a7e <mbedtls_mpi_shift_r>
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d0f3      	beq.n	8017b92 <mbedtls_ecp_mul_restartable+0x296>
 8017baa:	4606      	mov	r6, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8017bac:	a806      	add	r0, sp, #24
 8017bae:	f7fa fd42 	bl	8012636 <mbedtls_mpi_free>
 8017bb2:	a809      	add	r0, sp, #36	; 0x24
 8017bb4:	f7fa fd3f 	bl	8012636 <mbedtls_mpi_free>
    return( ret );
 8017bb8:	e7c1      	b.n	8017b3e <mbedtls_ecp_mul_restartable+0x242>
 8017bba:	4606      	mov	r6, r0
 8017bbc:	e7f6      	b.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
        if( count++ > 10 )
 8017bbe:	3e01      	subs	r6, #1
 8017bc0:	f000 809b 	beq.w	8017cfa <mbedtls_ecp_mul_restartable+0x3fe>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 8017bc4:	4639      	mov	r1, r7
 8017bc6:	a806      	add	r0, sp, #24
 8017bc8:	f7fb f8c3 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	ddd9      	ble.n	8017b84 <mbedtls_ecp_mul_restartable+0x288>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 8017bd0:	aa06      	add	r2, sp, #24
 8017bd2:	4649      	mov	r1, r9
 8017bd4:	4648      	mov	r0, r9
 8017bd6:	f7fb f9e5 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017bda:	4606      	mov	r6, r0
 8017bdc:	2800      	cmp	r0, #0
 8017bde:	d1e5      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
 8017be0:	4629      	mov	r1, r5
 8017be2:	4648      	mov	r0, r9
 8017be4:	f7fe fcf2 	bl	80165cc <ecp_modp>
 8017be8:	4606      	mov	r6, r0
 8017bea:	2800      	cmp	r0, #0
 8017bec:	d1de      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 8017bee:	aa06      	add	r2, sp, #24
 8017bf0:	4611      	mov	r1, r2
 8017bf2:	a809      	add	r0, sp, #36	; 0x24
 8017bf4:	f7fb f9d6 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017bf8:	4606      	mov	r6, r0
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d1d6      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
 8017bfe:	4629      	mov	r1, r5
 8017c00:	a809      	add	r0, sp, #36	; 0x24
 8017c02:	f7fe fce3 	bl	80165cc <ecp_modp>
 8017c06:	4606      	mov	r6, r0
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	d1cf      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8017c0c:	aa09      	add	r2, sp, #36	; 0x24
 8017c0e:	9c03      	ldr	r4, [sp, #12]
 8017c10:	4621      	mov	r1, r4
 8017c12:	4620      	mov	r0, r4
 8017c14:	f7fb f9c6 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017c18:	4606      	mov	r6, r0
 8017c1a:	2800      	cmp	r0, #0
 8017c1c:	d1c6      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
 8017c1e:	4629      	mov	r1, r5
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7fe fcd3 	bl	80165cc <ecp_modp>
 8017c26:	4606      	mov	r6, r0
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d1bf      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8017c2c:	aa06      	add	r2, sp, #24
 8017c2e:	a909      	add	r1, sp, #36	; 0x24
 8017c30:	4608      	mov	r0, r1
 8017c32:	f7fb f9b7 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017c36:	4606      	mov	r6, r0
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	d1b7      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
 8017c3c:	4629      	mov	r1, r5
 8017c3e:	a809      	add	r0, sp, #36	; 0x24
 8017c40:	f7fe fcc4 	bl	80165cc <ecp_modp>
 8017c44:	4606      	mov	r6, r0
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d1b0      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 8017c4a:	340c      	adds	r4, #12
 8017c4c:	aa09      	add	r2, sp, #36	; 0x24
 8017c4e:	4621      	mov	r1, r4
 8017c50:	4620      	mov	r0, r4
 8017c52:	f7fb f9a7 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 8017c56:	4606      	mov	r6, r0
 8017c58:	2800      	cmp	r0, #0
 8017c5a:	d1a7      	bne.n	8017bac <mbedtls_ecp_mul_restartable+0x2b0>
 8017c5c:	4629      	mov	r1, r5
 8017c5e:	4620      	mov	r0, r4
 8017c60:	f7fe fcb4 	bl	80165cc <ecp_modp>
 8017c64:	4606      	mov	r6, r0
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8017c66:	a806      	add	r0, sp, #24
 8017c68:	f7fa fce5 	bl	8012636 <mbedtls_mpi_free>
 8017c6c:	a809      	add	r0, sp, #36	; 0x24
 8017c6e:	f7fa fce2 	bl	8012636 <mbedtls_mpi_free>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 8017c72:	2e00      	cmp	r6, #0
 8017c74:	f47f af63 	bne.w	8017b3e <mbedtls_ecp_mul_restartable+0x242>
 8017c78:	4644      	mov	r4, r8
 8017c7a:	af15      	add	r7, sp, #84	; 0x54
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 8017c7c:	f04f 0802 	mov.w	r8, #2
 8017c80:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while( i != 0 )
 8017c84:	42a7      	cmp	r7, r4
 8017c86:	d01f      	beq.n	8017cc8 <mbedtls_ecp_mul_restartable+0x3cc>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 8017c88:	464a      	mov	r2, r9
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	f7fe fce9 	bl	8016664 <ecp_double_jac>
 8017c92:	4606      	mov	r6, r0
 8017c94:	2800      	cmp	r0, #0
 8017c96:	f47f af52 	bne.w	8017b3e <mbedtls_ecp_mul_restartable+0x242>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 8017c9a:	f814 3d01 	ldrb.w	r3, [r4, #-1]!
 8017c9e:	9300      	str	r3, [sp, #0]
 8017ca0:	4643      	mov	r3, r8
 8017ca2:	4652      	mov	r2, sl
 8017ca4:	a90c      	add	r1, sp, #48	; 0x30
 8017ca6:	4628      	mov	r0, r5
 8017ca8:	f7ff f8fd 	bl	8016ea6 <ecp_select_comb>
 8017cac:	4606      	mov	r6, r0
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	f47f af45 	bne.w	8017b3e <mbedtls_ecp_mul_restartable+0x242>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 8017cb4:	ab0c      	add	r3, sp, #48	; 0x30
 8017cb6:	464a      	mov	r2, r9
 8017cb8:	4649      	mov	r1, r9
 8017cba:	4628      	mov	r0, r5
 8017cbc:	f7ff fa16 	bl	80170ec <ecp_add_mixed>
 8017cc0:	4606      	mov	r6, r0
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d0de      	beq.n	8017c84 <mbedtls_ecp_mul_restartable+0x388>
 8017cc6:	e73a      	b.n	8017b3e <mbedtls_ecp_mul_restartable+0x242>
    mbedtls_ecp_point_free( &Txi );
 8017cc8:	a80c      	add	r0, sp, #48	; 0x30
 8017cca:	f7ff f988 	bl	8016fde <mbedtls_ecp_point_free>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 8017cce:	465a      	mov	r2, fp
 8017cd0:	9c03      	ldr	r4, [sp, #12]
 8017cd2:	4621      	mov	r1, r4
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	f7ff f8c1 	bl	8016e5c <ecp_safe_invert_jac>
 8017cda:	4606      	mov	r6, r0
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	f47f aebe 	bne.w	8017a5e <mbedtls_ecp_mul_restartable+0x162>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 8017ce2:	4621      	mov	r1, r4
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	f7fe ff17 	bl	8016b18 <ecp_normalize_jac>
 8017cea:	4606      	mov	r6, r0
cleanup:
 8017cec:	e72a      	b.n	8017b44 <mbedtls_ecp_mul_restartable+0x248>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8017cee:	4e05      	ldr	r6, [pc, #20]	; (8017d04 <mbedtls_ecp_mul_restartable+0x408>)
 8017cf0:	e6b8      	b.n	8017a64 <mbedtls_ecp_mul_restartable+0x168>
    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8017cf2:	4e05      	ldr	r6, [pc, #20]	; (8017d08 <mbedtls_ecp_mul_restartable+0x40c>)
 8017cf4:	e60e      	b.n	8017914 <mbedtls_ecp_mul_restartable+0x18>
 8017cf6:	4e04      	ldr	r6, [pc, #16]	; (8017d08 <mbedtls_ecp_mul_restartable+0x40c>)
    return( ret );
 8017cf8:	e60c      	b.n	8017914 <mbedtls_ecp_mul_restartable+0x18>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8017cfa:	4e04      	ldr	r6, [pc, #16]	; (8017d0c <mbedtls_ecp_mul_restartable+0x410>)
 8017cfc:	e71f      	b.n	8017b3e <mbedtls_ecp_mul_restartable+0x242>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017cfe:	4e02      	ldr	r6, [pc, #8]	; (8017d08 <mbedtls_ecp_mul_restartable+0x40c>)
 8017d00:	e6ad      	b.n	8017a5e <mbedtls_ecp_mul_restartable+0x162>
 8017d02:	bf00      	nop
 8017d04:	ffffb280 	.word	0xffffb280
 8017d08:	ffffb080 	.word	0xffffb080
 8017d0c:	ffffb300 	.word	0xffffb300

08017d10 <mbedtls_ecp_mul>:
{
 8017d10:	b510      	push	{r4, lr}
 8017d12:	b084      	sub	sp, #16
    return( mbedtls_ecp_mul_restartable( grp, R, m, P, f_rng, p_rng, NULL ) );
 8017d14:	2400      	movs	r4, #0
 8017d16:	9402      	str	r4, [sp, #8]
 8017d18:	9c07      	ldr	r4, [sp, #28]
 8017d1a:	9401      	str	r4, [sp, #4]
 8017d1c:	9c06      	ldr	r4, [sp, #24]
 8017d1e:	9400      	str	r4, [sp, #0]
 8017d20:	f7ff fdec 	bl	80178fc <mbedtls_ecp_mul_restartable>
}
 8017d24:	b004      	add	sp, #16
 8017d26:	bd10      	pop	{r4, pc}

08017d28 <mbedtls_ecp_mul_shortcuts>:
{
 8017d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2a:	b085      	sub	sp, #20
 8017d2c:	4607      	mov	r7, r0
 8017d2e:	460e      	mov	r6, r1
 8017d30:	4614      	mov	r4, r2
 8017d32:	461d      	mov	r5, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8017d34:	2101      	movs	r1, #1
 8017d36:	4610      	mov	r0, r2
 8017d38:	f7fb f80b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017d3c:	b928      	cbnz	r0, 8017d4a <mbedtls_ecp_mul_shortcuts+0x22>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8017d3e:	4629      	mov	r1, r5
 8017d40:	4630      	mov	r0, r6
 8017d42:	f7ff f99c 	bl	801707e <mbedtls_ecp_copy>
}
 8017d46:	b005      	add	sp, #20
 8017d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8017d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f7fa ffff 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017d54:	b990      	cbnz	r0, 8017d7c <mbedtls_ecp_mul_shortcuts+0x54>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8017d56:	4629      	mov	r1, r5
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f7ff f990 	bl	801707e <mbedtls_ecp_copy>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d1f1      	bne.n	8017d46 <mbedtls_ecp_mul_shortcuts+0x1e>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8017d62:	360c      	adds	r6, #12
 8017d64:	2100      	movs	r1, #0
 8017d66:	4630      	mov	r0, r6
 8017d68:	f7fa fff3 	bl	8012d52 <mbedtls_mpi_cmp_int>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d0ea      	beq.n	8017d46 <mbedtls_ecp_mul_shortcuts+0x1e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8017d70:	4632      	mov	r2, r6
 8017d72:	1d39      	adds	r1, r7, #4
 8017d74:	4630      	mov	r0, r6
 8017d76:	f7fb f8bf 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 8017d7a:	e7e4      	b.n	8017d46 <mbedtls_ecp_mul_shortcuts+0x1e>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 8017d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7e:	9302      	str	r3, [sp, #8]
 8017d80:	2300      	movs	r3, #0
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	9300      	str	r3, [sp, #0]
 8017d86:	462b      	mov	r3, r5
 8017d88:	4622      	mov	r2, r4
 8017d8a:	4631      	mov	r1, r6
 8017d8c:	4638      	mov	r0, r7
 8017d8e:	f7ff fdb5 	bl	80178fc <mbedtls_ecp_mul_restartable>
    return( ret );
 8017d92:	e7d8      	b.n	8017d46 <mbedtls_ecp_mul_shortcuts+0x1e>

08017d94 <mbedtls_ecp_muladd_restartable>:
{
 8017d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d96:	b08d      	sub	sp, #52	; 0x34
 8017d98:	461e      	mov	r6, r3
    if( grp->G.X.p == NULL )
 8017d9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d031      	beq.n	8017e04 <mbedtls_ecp_muladd_restartable+0x70>
 8017da0:	4604      	mov	r4, r0
 8017da2:	460f      	mov	r7, r1
 8017da4:	4615      	mov	r5, r2
    if( grp->G.Y.p == NULL )
 8017da6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017da8:	b373      	cbz	r3, 8017e08 <mbedtls_ecp_muladd_restartable+0x74>
    mbedtls_ecp_point_init( &mP );
 8017daa:	a803      	add	r0, sp, #12
 8017dac:	f7ff f8dc 	bl	8016f68 <mbedtls_ecp_point_init>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 8017db0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017db2:	9300      	str	r3, [sp, #0]
 8017db4:	4633      	mov	r3, r6
 8017db6:	462a      	mov	r2, r5
 8017db8:	a903      	add	r1, sp, #12
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f7ff ffb4 	bl	8017d28 <mbedtls_ecp_mul_shortcuts>
 8017dc0:	4605      	mov	r5, r0
 8017dc2:	b128      	cbz	r0, 8017dd0 <mbedtls_ecp_muladd_restartable+0x3c>
    mbedtls_ecp_point_free( &mP );
 8017dc4:	a803      	add	r0, sp, #12
 8017dc6:	f7ff f90a 	bl	8016fde <mbedtls_ecp_point_free>
}
 8017dca:	4628      	mov	r0, r5
 8017dcc:	b00d      	add	sp, #52	; 0x34
 8017dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 8017dd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017dd2:	9300      	str	r3, [sp, #0]
 8017dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017dd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017dd8:	4639      	mov	r1, r7
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f7ff ffa4 	bl	8017d28 <mbedtls_ecp_mul_shortcuts>
 8017de0:	4605      	mov	r5, r0
 8017de2:	2800      	cmp	r0, #0
 8017de4:	d1ee      	bne.n	8017dc4 <mbedtls_ecp_muladd_restartable+0x30>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 8017de6:	463b      	mov	r3, r7
 8017de8:	aa03      	add	r2, sp, #12
 8017dea:	4639      	mov	r1, r7
 8017dec:	4620      	mov	r0, r4
 8017dee:	f7ff f97d 	bl	80170ec <ecp_add_mixed>
 8017df2:	4605      	mov	r5, r0
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d1e5      	bne.n	8017dc4 <mbedtls_ecp_muladd_restartable+0x30>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 8017df8:	4639      	mov	r1, r7
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	f7fe fe8c 	bl	8016b18 <ecp_normalize_jac>
 8017e00:	4605      	mov	r5, r0
cleanup:
 8017e02:	e7df      	b.n	8017dc4 <mbedtls_ecp_muladd_restartable+0x30>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8017e04:	4d01      	ldr	r5, [pc, #4]	; (8017e0c <mbedtls_ecp_muladd_restartable+0x78>)
 8017e06:	e7e0      	b.n	8017dca <mbedtls_ecp_muladd_restartable+0x36>
 8017e08:	4d00      	ldr	r5, [pc, #0]	; (8017e0c <mbedtls_ecp_muladd_restartable+0x78>)
 8017e0a:	e7de      	b.n	8017dca <mbedtls_ecp_muladd_restartable+0x36>
 8017e0c:	ffffb180 	.word	0xffffb180

08017e10 <mbedtls_ecp_gen_privkey>:
 */
int mbedtls_ecp_gen_privkey( const mbedtls_ecp_group *grp,
                     mbedtls_mpi *d,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8017e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e14:	b083      	sub	sp, #12
 8017e16:	4699      	mov	r9, r3
    if( grp->G.X.p == NULL )
 8017e18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e1a:	b373      	cbz	r3, 8017e7a <mbedtls_ecp_gen_privkey+0x6a>
 8017e1c:	4606      	mov	r6, r0
 8017e1e:	460c      	mov	r4, r1
 8017e20:	4690      	mov	r8, r2
    if( grp->G.Y.p == NULL )
 8017e22:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017e24:	b363      	cbz	r3, 8017e80 <mbedtls_ecp_gen_privkey+0x70>

    ECP_VALIDATE_RET( grp   != NULL );
    ECP_VALIDATE_RET( d     != NULL );
    ECP_VALIDATE_RET( f_rng != NULL );

    n_size = ( grp->nbits + 7 ) / 8;
 8017e26:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 8017e28:	3707      	adds	r7, #7
 8017e2a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8017e2e:	251f      	movs	r5, #31
         * This also avoids any biais, which is especially important for ECDSA.
         */
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8017e30:	f027 0707 	bic.w	r7, r7, #7
             * such as secp224k1 are actually very close to the worst case.
             */
            if( ++count > 30 )
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8017e34:	f04f 0b01 	mov.w	fp, #1
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8017e38:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8017e3c:	9301      	str	r3, [sp, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
 8017e3e:	464b      	mov	r3, r9
 8017e40:	4642      	mov	r2, r8
 8017e42:	4651      	mov	r1, sl
 8017e44:	4620      	mov	r0, r4
 8017e46:	f7fb fe8c 	bl	8013b62 <mbedtls_mpi_fill_random>
 8017e4a:	9000      	str	r0, [sp, #0]
 8017e4c:	b9e8      	cbnz	r0, 8017e8a <mbedtls_ecp_gen_privkey+0x7a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8017e4e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8017e50:	1a79      	subs	r1, r7, r1
 8017e52:	4620      	mov	r0, r4
 8017e54:	f7fa fe13 	bl	8012a7e <mbedtls_mpi_shift_r>
 8017e58:	9000      	str	r0, [sp, #0]
 8017e5a:	b9b0      	cbnz	r0, 8017e8a <mbedtls_ecp_gen_privkey+0x7a>
            if( ++count > 30 )
 8017e5c:	3d01      	subs	r5, #1
 8017e5e:	d012      	beq.n	8017e86 <mbedtls_ecp_gen_privkey+0x76>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8017e60:	4659      	mov	r1, fp
 8017e62:	4620      	mov	r0, r4
 8017e64:	f7fa ff75 	bl	8012d52 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8017e68:	2800      	cmp	r0, #0
 8017e6a:	dbe8      	blt.n	8017e3e <mbedtls_ecp_gen_privkey+0x2e>
 8017e6c:	9901      	ldr	r1, [sp, #4]
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f7fa ff17 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8017e74:	2800      	cmp	r0, #0
 8017e76:	dae2      	bge.n	8017e3e <mbedtls_ecp_gen_privkey+0x2e>
 8017e78:	e007      	b.n	8017e8a <mbedtls_ecp_gen_privkey+0x7a>
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8017e7a:	4b06      	ldr	r3, [pc, #24]	; (8017e94 <mbedtls_ecp_gen_privkey+0x84>)
 8017e7c:	9300      	str	r3, [sp, #0]
 8017e7e:	e004      	b.n	8017e8a <mbedtls_ecp_gen_privkey+0x7a>
 8017e80:	4b04      	ldr	r3, [pc, #16]	; (8017e94 <mbedtls_ecp_gen_privkey+0x84>)
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	e001      	b.n	8017e8a <mbedtls_ecp_gen_privkey+0x7a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8017e86:	4b04      	ldr	r3, [pc, #16]	; (8017e98 <mbedtls_ecp_gen_privkey+0x88>)
 8017e88:	9300      	str	r3, [sp, #0]
    }
#endif /* ECP_SHORTWEIERSTRASS */

cleanup:
    return( ret );
}
 8017e8a:	9800      	ldr	r0, [sp, #0]
 8017e8c:	b003      	add	sp, #12
 8017e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e92:	bf00      	nop
 8017e94:	ffffb080 	.word	0xffffb080
 8017e98:	ffffb300 	.word	0xffffb300

08017e9c <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8017e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ea0:	b0aa      	sub	sp, #168	; 0xa8
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;
    ECP_VALIDATE_RET( pub != NULL );
    ECP_VALIDATE_RET( prv != NULL );

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8017ea2:	7803      	ldrb	r3, [r0, #0]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d056      	beq.n	8017f56 <mbedtls_ecp_check_pub_priv+0xba>
 8017ea8:	4607      	mov	r7, r0
 8017eaa:	460c      	mov	r4, r1
 8017eac:	780a      	ldrb	r2, [r1, #0]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d153      	bne.n	8017f5a <mbedtls_ecp_check_pub_priv+0xbe>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8017eb2:	f101 0588 	add.w	r5, r1, #136	; 0x88
 8017eb6:	4629      	mov	r1, r5
 8017eb8:	3088      	adds	r0, #136	; 0x88
 8017eba:	f7fa fef2 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d14d      	bne.n	8017f5e <mbedtls_ecp_check_pub_priv+0xc2>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8017ec2:	f104 0694 	add.w	r6, r4, #148	; 0x94
 8017ec6:	4631      	mov	r1, r6
 8017ec8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8017ecc:	f7fa fee9 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	d146      	bne.n	8017f62 <mbedtls_ecp_check_pub_priv+0xc6>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 8017ed4:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8017ed8:	4641      	mov	r1, r8
 8017eda:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8017ede:	f7fa fee0 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	d13f      	bne.n	8017f66 <mbedtls_ecp_check_pub_priv+0xca>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    }

    mbedtls_ecp_point_init( &Q );
 8017ee6:	a821      	add	r0, sp, #132	; 0x84
 8017ee8:	f7ff f83e 	bl	8016f68 <mbedtls_ecp_point_init>
    mbedtls_ecp_group_init( &grp );
 8017eec:	a802      	add	r0, sp, #8
 8017eee:	f7ff f848 	bl	8016f82 <mbedtls_ecp_group_init>

    /* mbedtls_ecp_mul() needs a non-const group... */
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 8017ef2:	4621      	mov	r1, r4
 8017ef4:	a802      	add	r0, sp, #8
 8017ef6:	f7ff f8dc 	bl	80170b2 <mbedtls_ecp_group_copy>

    /* Also checks d is valid */
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 8017efa:	2300      	movs	r3, #0
 8017efc:	9301      	str	r3, [sp, #4]
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8017f04:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8017f08:	a921      	add	r1, sp, #132	; 0x84
 8017f0a:	a802      	add	r0, sp, #8
 8017f0c:	f7ff ff00 	bl	8017d10 <mbedtls_ecp_mul>
 8017f10:	4604      	mov	r4, r0
 8017f12:	b148      	cbz	r0, 8017f28 <mbedtls_ecp_check_pub_priv+0x8c>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &Q );
 8017f14:	a821      	add	r0, sp, #132	; 0x84
 8017f16:	f7ff f862 	bl	8016fde <mbedtls_ecp_point_free>
    mbedtls_ecp_group_free( &grp );
 8017f1a:	a802      	add	r0, sp, #8
 8017f1c:	f7ff f86e 	bl	8016ffc <mbedtls_ecp_group_free>

    return( ret );
}
 8017f20:	4620      	mov	r0, r4
 8017f22:	b02a      	add	sp, #168	; 0xa8
 8017f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8017f28:	4629      	mov	r1, r5
 8017f2a:	a821      	add	r0, sp, #132	; 0x84
 8017f2c:	f7fa feb9 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 8017f30:	b108      	cbz	r0, 8017f36 <mbedtls_ecp_check_pub_priv+0x9a>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8017f32:	4c0e      	ldr	r4, [pc, #56]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f34:	e7ee      	b.n	8017f14 <mbedtls_ecp_check_pub_priv+0x78>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8017f36:	4631      	mov	r1, r6
 8017f38:	a824      	add	r0, sp, #144	; 0x90
 8017f3a:	f7fa feb2 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8017f3e:	b108      	cbz	r0, 8017f44 <mbedtls_ecp_check_pub_priv+0xa8>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8017f40:	4c0a      	ldr	r4, [pc, #40]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f42:	e7e7      	b.n	8017f14 <mbedtls_ecp_check_pub_priv+0x78>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 8017f44:	4641      	mov	r1, r8
 8017f46:	a827      	add	r0, sp, #156	; 0x9c
 8017f48:	f7fa feab 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8017f4c:	1e04      	subs	r4, r0, #0
 8017f4e:	4b07      	ldr	r3, [pc, #28]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f50:	bf18      	it	ne
 8017f52:	461c      	movne	r4, r3
 8017f54:	e7de      	b.n	8017f14 <mbedtls_ecp_check_pub_priv+0x78>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8017f56:	4c05      	ldr	r4, [pc, #20]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f58:	e7e2      	b.n	8017f20 <mbedtls_ecp_check_pub_priv+0x84>
 8017f5a:	4c04      	ldr	r4, [pc, #16]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f5c:	e7e0      	b.n	8017f20 <mbedtls_ecp_check_pub_priv+0x84>
 8017f5e:	4c03      	ldr	r4, [pc, #12]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f60:	e7de      	b.n	8017f20 <mbedtls_ecp_check_pub_priv+0x84>
 8017f62:	4c02      	ldr	r4, [pc, #8]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f64:	e7dc      	b.n	8017f20 <mbedtls_ecp_check_pub_priv+0x84>
 8017f66:	4c01      	ldr	r4, [pc, #4]	; (8017f6c <mbedtls_ecp_check_pub_priv+0xd0>)
 8017f68:	e7da      	b.n	8017f20 <mbedtls_ecp_check_pub_priv+0x84>
 8017f6a:	bf00      	nop
 8017f6c:	ffffb080 	.word	0xffffb080

08017f70 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 8017f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f74:	b08f      	sub	sp, #60	; 0x3c
 8017f76:	4604      	mov	r4, r0
    INIT( 256 );
 8017f78:	2301      	movs	r3, #1
 8017f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f7c:	2309      	movs	r3, #9
 8017f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8017f80:	ab02      	add	r3, sp, #8
 8017f82:	930d      	str	r3, [sp, #52]	; 0x34
 8017f84:	2224      	movs	r2, #36	; 0x24
 8017f86:	2100      	movs	r1, #0
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f012 fafe 	bl	802a58a <memset>
 8017f8e:	2110      	movs	r1, #16
 8017f90:	4620      	mov	r0, r4
 8017f92:	f7fa fb63 	bl	801265c <mbedtls_mpi_grow>
 8017f96:	9001      	str	r0, [sp, #4]
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	f040 81e4 	bne.w	8018366 <ecp_mod_p256+0x3f6>
 8017f9e:	68a2      	ldr	r2, [r4, #8]

    ADD(  8 ); ADD(  9 );
 8017fa0:	6a13      	ldr	r3, [r2, #32]
    *dst += src;
 8017fa2:	6811      	ldr	r1, [r2, #0]
 8017fa4:	eb03 0a01 	add.w	sl, r3, r1
    ADD(  8 ); ADD(  9 );
 8017fa8:	f8d2 9024 	ldr.w	r9, [r2, #36]	; 0x24
    *dst += src;
 8017fac:	eb09 050a 	add.w	r5, r9, sl
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8017fb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    *dst -= src;
 8017fb2:	eba5 0e01 	sub.w	lr, r5, r1
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8017fb6:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
    *dst -= src;
 8017fba:	ebae 0708 	sub.w	r7, lr, r8
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8017fbe:	f8d2 c034 	ldr.w	ip, [r2, #52]	; 0x34
    *dst -= src;
 8017fc2:	eba7 000c 	sub.w	r0, r7, ip
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8017fc6:	6b96      	ldr	r6, [r2, #56]	; 0x38
    *carry += ( *dst < src );
 8017fc8:	4553      	cmp	r3, sl
 8017fca:	bf94      	ite	ls
 8017fcc:	2300      	movls	r3, #0
 8017fce:	2301      	movhi	r3, #1
 8017fd0:	45a9      	cmp	r9, r5
 8017fd2:	bf88      	it	hi
 8017fd4:	3301      	addhi	r3, #1
    *carry -= ( *dst < src );
 8017fd6:	42a9      	cmp	r1, r5
 8017fd8:	bf94      	ite	ls
 8017fda:	4619      	movls	r1, r3
 8017fdc:	1e59      	subhi	r1, r3, #1
 8017fde:	45f0      	cmp	r8, lr
 8017fe0:	bf88      	it	hi
 8017fe2:	3901      	subhi	r1, #1
 8017fe4:	45bc      	cmp	ip, r7
 8017fe6:	bf88      	it	hi
 8017fe8:	3901      	subhi	r1, #1
 8017fea:	4286      	cmp	r6, r0
 8017fec:	bf88      	it	hi
 8017fee:	3901      	subhi	r1, #1
    *dst -= src;
 8017ff0:	1b80      	subs	r0, r0, r6
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8017ff2:	6010      	str	r0, [r2, #0]
 8017ff4:	68a2      	ldr	r2, [r4, #8]
 8017ff6:	6850      	ldr	r0, [r2, #4]
 8017ff8:	2900      	cmp	r1, #0
 8017ffa:	f2c0 81b8 	blt.w	801836e <ecp_mod_p256+0x3fe>
    *carry += ( *dst < src );
 8017ffe:	1841      	adds	r1, r0, r1
 8018000:	bf2c      	ite	cs
 8018002:	2301      	movcs	r3, #1
 8018004:	2300      	movcc	r3, #0
 8018006:	b25b      	sxtb	r3, r3

    ADD(  9 ); ADD( 10 );
 8018008:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
    *dst += src;
 801800c:	4459      	add	r1, fp
    ADD(  9 ); ADD( 10 );
 801800e:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
    *dst += src;
 8018012:	eb0a 0501 	add.w	r5, sl, r1
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8018016:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    *dst -= src;
 801801a:	eba5 0e09 	sub.w	lr, r5, r9
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801801e:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
    *dst -= src;
 8018022:	ebae 0708 	sub.w	r7, lr, r8
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8018026:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
    *dst -= src;
 801802a:	eba7 000c 	sub.w	r0, r7, ip
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801802e:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
    *carry += ( *dst < src );
 8018030:	458b      	cmp	fp, r1
 8018032:	bf88      	it	hi
 8018034:	3301      	addhi	r3, #1
 8018036:	45aa      	cmp	sl, r5
 8018038:	bf94      	ite	ls
 801803a:	469a      	movls	sl, r3
 801803c:	f103 0a01 	addhi.w	sl, r3, #1
    *carry -= ( *dst < src );
 8018040:	45a9      	cmp	r9, r5
 8018042:	bf94      	ite	ls
 8018044:	4655      	movls	r5, sl
 8018046:	f1aa 0501 	subhi.w	r5, sl, #1
 801804a:	45f0      	cmp	r8, lr
 801804c:	bf94      	ite	ls
 801804e:	46ae      	movls	lr, r5
 8018050:	f1a5 0e01 	subhi.w	lr, r5, #1
 8018054:	45bc      	cmp	ip, r7
 8018056:	bf94      	ite	ls
 8018058:	4677      	movls	r7, lr
 801805a:	f1ae 0701 	subhi.w	r7, lr, #1
 801805e:	4286      	cmp	r6, r0
 8018060:	bf88      	it	hi
 8018062:	3f01      	subhi	r7, #1
    *dst -= src;
 8018064:	1b80      	subs	r0, r0, r6
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8018066:	6050      	str	r0, [r2, #4]
 8018068:	68a0      	ldr	r0, [r4, #8]
 801806a:	6883      	ldr	r3, [r0, #8]
 801806c:	2f00      	cmp	r7, #0
 801806e:	f2c0 8186 	blt.w	801837e <ecp_mod_p256+0x40e>
    *carry += ( *dst < src );
 8018072:	19db      	adds	r3, r3, r7
 8018074:	bf2c      	ite	cs
 8018076:	2701      	movcs	r7, #1
 8018078:	2700      	movcc	r7, #0
 801807a:	b27a      	sxtb	r2, r7

    ADD( 10 ); ADD( 11 );
 801807c:	6a87      	ldr	r7, [r0, #40]	; 0x28
    *dst += src;
 801807e:	443b      	add	r3, r7
    ADD( 10 ); ADD( 11 );
 8018080:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    *dst += src;
 8018082:	18ce      	adds	r6, r1, r3
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8018084:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
    *dst -= src;
 8018088:	eba6 0e09 	sub.w	lr, r6, r9
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 801808c:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    *dst -= src;
 8018090:	ebae 0508 	sub.w	r5, lr, r8
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8018094:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
    *carry += ( *dst < src );
 8018098:	429f      	cmp	r7, r3
 801809a:	bf94      	ite	ls
 801809c:	4617      	movls	r7, r2
 801809e:	1c57      	addhi	r7, r2, #1
 80180a0:	42b1      	cmp	r1, r6
 80180a2:	bf94      	ite	ls
 80180a4:	4639      	movls	r1, r7
 80180a6:	1c79      	addhi	r1, r7, #1
    *carry -= ( *dst < src );
 80180a8:	45b1      	cmp	r9, r6
 80180aa:	bf88      	it	hi
 80180ac:	3901      	subhi	r1, #1
 80180ae:	45f0      	cmp	r8, lr
 80180b0:	bf88      	it	hi
 80180b2:	3901      	subhi	r1, #1
 80180b4:	45ac      	cmp	ip, r5
 80180b6:	bf88      	it	hi
 80180b8:	3901      	subhi	r1, #1
    *dst -= src;
 80180ba:	eba5 050c 	sub.w	r5, r5, ip
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 80180be:	6085      	str	r5, [r0, #8]
 80180c0:	68a2      	ldr	r2, [r4, #8]
 80180c2:	68d0      	ldr	r0, [r2, #12]
 80180c4:	2900      	cmp	r1, #0
 80180c6:	f2c0 8162 	blt.w	801838e <ecp_mod_p256+0x41e>
    *carry += ( *dst < src );
 80180ca:	1841      	adds	r1, r0, r1
 80180cc:	bf2c      	ite	cs
 80180ce:	2301      	movcs	r3, #1
 80180d0:	2300      	movcc	r3, #0
 80180d2:	b25b      	sxtb	r3, r3

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80180d4:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
    *dst += src;
 80180d6:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80180da:	6b16      	ldr	r6, [r2, #48]	; 0x30
    *dst += src;
 80180dc:	eb00 0b46 	add.w	fp, r0, r6, lsl #1
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80180e0:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
    *dst += src;
 80180e4:	eb0a 0c0b 	add.w	ip, sl, fp
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80180e8:	f8d2 903c 	ldr.w	r9, [r2, #60]	; 0x3c
    *dst -= src;
 80180ec:	ebac 0809 	sub.w	r8, ip, r9
 80180f0:	6a15      	ldr	r5, [r2, #32]
 80180f2:	eba8 0505 	sub.w	r5, r8, r5
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80180f6:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
    *carry += ( *dst < src );
 80180fa:	4439      	add	r1, r7
 80180fc:	42b9      	cmp	r1, r7
 80180fe:	bf2c      	ite	cs
 8018100:	4619      	movcs	r1, r3
 8018102:	1c59      	addcc	r1, r3, #1
 8018104:	4287      	cmp	r7, r0
 8018106:	bf88      	it	hi
 8018108:	3101      	addhi	r1, #1
 801810a:	4430      	add	r0, r6
 801810c:	42b0      	cmp	r0, r6
 801810e:	bf38      	it	cc
 8018110:	3101      	addcc	r1, #1
 8018112:	455e      	cmp	r6, fp
 8018114:	bf94      	ite	ls
 8018116:	460e      	movls	r6, r1
 8018118:	1c4e      	addhi	r6, r1, #1
 801811a:	45e2      	cmp	sl, ip
 801811c:	bf94      	ite	ls
 801811e:	46b2      	movls	sl, r6
 8018120:	f106 0a01 	addhi.w	sl, r6, #1
    *carry -= ( *dst < src );
 8018124:	45e1      	cmp	r9, ip
 8018126:	bf94      	ite	ls
 8018128:	46d4      	movls	ip, sl
 801812a:	f1aa 0c01 	subhi.w	ip, sl, #1
 801812e:	6a13      	ldr	r3, [r2, #32]
 8018130:	4543      	cmp	r3, r8
 8018132:	bf94      	ite	ls
 8018134:	46e0      	movls	r8, ip
 8018136:	f1ac 0801 	subhi.w	r8, ip, #1
 801813a:	45ae      	cmp	lr, r5
 801813c:	bf88      	it	hi
 801813e:	f1a8 0801 	subhi.w	r8, r8, #1
 8018142:	fa4f f888 	sxtb.w	r8, r8
    *dst -= src;
 8018146:	eba5 050e 	sub.w	r5, r5, lr
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801814a:	60d5      	str	r5, [r2, #12]
 801814c:	68a1      	ldr	r1, [r4, #8]
 801814e:	690a      	ldr	r2, [r1, #16]
 8018150:	f1b8 0f00 	cmp.w	r8, #0
 8018154:	f2c0 8123 	blt.w	801839e <ecp_mod_p256+0x42e>
    *carry += ( *dst < src );
 8018158:	eb12 0a08 	adds.w	sl, r2, r8
 801815c:	bf2c      	ite	cs
 801815e:	2301      	movcs	r3, #1
 8018160:	2300      	movcc	r3, #0
 8018162:	b25b      	sxtb	r3, r3

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 8018164:	f8d1 9030 	ldr.w	r9, [r1, #48]	; 0x30
    *dst += src;
 8018168:	eb0a 0849 	add.w	r8, sl, r9, lsl #1
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 801816c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
    *dst += src;
 801816e:	eb08 0246 	add.w	r2, r8, r6, lsl #1
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 8018172:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
    *dst += src;
 8018176:	eb0e 0702 	add.w	r7, lr, r2
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 801817a:	f8d1 c024 	ldr.w	ip, [r1, #36]	; 0x24
    *dst -= src;
 801817e:	eba7 000c 	sub.w	r0, r7, ip
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8018182:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    *carry += ( *dst < src );
 8018184:	44ca      	add	sl, r9
 8018186:	45ca      	cmp	sl, r9
 8018188:	bf38      	it	cc
 801818a:	3301      	addcc	r3, #1
 801818c:	45c1      	cmp	r9, r8
 801818e:	bf88      	it	hi
 8018190:	3301      	addhi	r3, #1
 8018192:	44b0      	add	r8, r6
 8018194:	45b0      	cmp	r8, r6
 8018196:	bf38      	it	cc
 8018198:	3301      	addcc	r3, #1
 801819a:	4296      	cmp	r6, r2
 801819c:	bf94      	ite	ls
 801819e:	461a      	movls	r2, r3
 80181a0:	1c5a      	addhi	r2, r3, #1
 80181a2:	45be      	cmp	lr, r7
 80181a4:	bf88      	it	hi
 80181a6:	3201      	addhi	r2, #1
    *carry -= ( *dst < src );
 80181a8:	45bc      	cmp	ip, r7
 80181aa:	bf88      	it	hi
 80181ac:	3a01      	subhi	r2, #1
 80181ae:	4285      	cmp	r5, r0
 80181b0:	bf88      	it	hi
 80181b2:	3a01      	subhi	r2, #1
 80181b4:	b252      	sxtb	r2, r2
    *dst -= src;
 80181b6:	1b40      	subs	r0, r0, r5
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80181b8:	6108      	str	r0, [r1, #16]
 80181ba:	68a1      	ldr	r1, [r4, #8]
 80181bc:	6948      	ldr	r0, [r1, #20]
 80181be:	2a00      	cmp	r2, #0
 80181c0:	f2c0 80f7 	blt.w	80183b2 <ecp_mod_p256+0x442>
    *carry += ( *dst < src );
 80181c4:	eb10 0a02 	adds.w	sl, r0, r2
 80181c8:	bf2c      	ite	cs
 80181ca:	2301      	movcs	r3, #1
 80181cc:	2300      	movcc	r3, #0
 80181ce:	b25b      	sxtb	r3, r3

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80181d0:	f8d1 9034 	ldr.w	r9, [r1, #52]	; 0x34
    *dst += src;
 80181d4:	eb0a 0849 	add.w	r8, sl, r9, lsl #1
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80181d8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    *dst += src;
 80181da:	eb08 0246 	add.w	r2, r8, r6, lsl #1
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80181de:	f8d1 e03c 	ldr.w	lr, [r1, #60]	; 0x3c
    *dst += src;
 80181e2:	eb0e 0702 	add.w	r7, lr, r2
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80181e6:	f8d1 c028 	ldr.w	ip, [r1, #40]	; 0x28
    *dst -= src;
 80181ea:	eba7 000c 	sub.w	r0, r7, ip
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80181ee:	6acd      	ldr	r5, [r1, #44]	; 0x2c
    *carry += ( *dst < src );
 80181f0:	44ca      	add	sl, r9
 80181f2:	45ca      	cmp	sl, r9
 80181f4:	bf38      	it	cc
 80181f6:	3301      	addcc	r3, #1
 80181f8:	45c1      	cmp	r9, r8
 80181fa:	bf88      	it	hi
 80181fc:	3301      	addhi	r3, #1
 80181fe:	44b0      	add	r8, r6
 8018200:	45b0      	cmp	r8, r6
 8018202:	bf38      	it	cc
 8018204:	3301      	addcc	r3, #1
 8018206:	4296      	cmp	r6, r2
 8018208:	bf94      	ite	ls
 801820a:	461a      	movls	r2, r3
 801820c:	1c5a      	addhi	r2, r3, #1
 801820e:	45be      	cmp	lr, r7
 8018210:	bf88      	it	hi
 8018212:	3201      	addhi	r2, #1
    *carry -= ( *dst < src );
 8018214:	45bc      	cmp	ip, r7
 8018216:	bf88      	it	hi
 8018218:	3a01      	subhi	r2, #1
 801821a:	4285      	cmp	r5, r0
 801821c:	bf88      	it	hi
 801821e:	3a01      	subhi	r2, #1
 8018220:	b252      	sxtb	r2, r2
    *dst -= src;
 8018222:	1b40      	subs	r0, r0, r5
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8018224:	6148      	str	r0, [r1, #20]
 8018226:	68a0      	ldr	r0, [r4, #8]
 8018228:	6981      	ldr	r1, [r0, #24]
 801822a:	2a00      	cmp	r2, #0
 801822c:	f2c0 80ca 	blt.w	80183c4 <ecp_mod_p256+0x454>
    *carry += ( *dst < src );
 8018230:	188a      	adds	r2, r1, r2
 8018232:	bf2c      	ite	cs
 8018234:	2301      	movcs	r3, #1
 8018236:	2300      	movcc	r3, #0
 8018238:	b25b      	sxtb	r3, r3

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 801823a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    *dst += src;
 801823c:	eb02 0541 	add.w	r5, r2, r1, lsl #1
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 8018240:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    *dst += src;
 8018242:	eb05 0b47 	add.w	fp, r5, r7, lsl #1
 8018246:	eb01 0a0b 	add.w	sl, r1, fp
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 801824a:	f8d0 9034 	ldr.w	r9, [r0, #52]	; 0x34
    *dst += src;
 801824e:	eb09 0c0a 	add.w	ip, r9, sl
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8018252:	f8d0 8020 	ldr.w	r8, [r0, #32]
    *dst -= src;
 8018256:	ebac 0608 	sub.w	r6, ip, r8
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 801825a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
    *carry += ( *dst < src );
 801825e:	440a      	add	r2, r1
 8018260:	428a      	cmp	r2, r1
 8018262:	bf2c      	ite	cs
 8018264:	461a      	movcs	r2, r3
 8018266:	1c5a      	addcc	r2, r3, #1
 8018268:	42a9      	cmp	r1, r5
 801826a:	bf88      	it	hi
 801826c:	3201      	addhi	r2, #1
 801826e:	443d      	add	r5, r7
 8018270:	42bd      	cmp	r5, r7
 8018272:	bf2c      	ite	cs
 8018274:	4615      	movcs	r5, r2
 8018276:	1c55      	addcc	r5, r2, #1
 8018278:	455f      	cmp	r7, fp
 801827a:	bf94      	ite	ls
 801827c:	462f      	movls	r7, r5
 801827e:	1c6f      	addhi	r7, r5, #1
 8018280:	4551      	cmp	r1, sl
 8018282:	bf94      	ite	ls
 8018284:	4639      	movls	r1, r7
 8018286:	1c79      	addhi	r1, r7, #1
 8018288:	45e1      	cmp	r9, ip
 801828a:	bf94      	ite	ls
 801828c:	4689      	movls	r9, r1
 801828e:	f101 0901 	addhi.w	r9, r1, #1
    *carry -= ( *dst < src );
 8018292:	45e0      	cmp	r8, ip
 8018294:	bf94      	ite	ls
 8018296:	46cc      	movls	ip, r9
 8018298:	f1a9 0c01 	subhi.w	ip, r9, #1
 801829c:	45b6      	cmp	lr, r6
 801829e:	bf88      	it	hi
 80182a0:	f1ac 0c01 	subhi.w	ip, ip, #1
 80182a4:	fa4f fc8c 	sxtb.w	ip, ip
    *dst -= src;
 80182a8:	eba6 060e 	sub.w	r6, r6, lr
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80182ac:	6186      	str	r6, [r0, #24]
 80182ae:	68a2      	ldr	r2, [r4, #8]
 80182b0:	69d1      	ldr	r1, [r2, #28]
 80182b2:	f1bc 0f00 	cmp.w	ip, #0
 80182b6:	f2c0 808d 	blt.w	80183d4 <ecp_mod_p256+0x464>
    *carry += ( *dst < src );
 80182ba:	eb11 010c 	adds.w	r1, r1, ip
 80182be:	bf2c      	ite	cs
 80182c0:	2301      	movcs	r3, #1
 80182c2:	2300      	movcc	r3, #0
 80182c4:	b25b      	sxtb	r3, r3

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80182c6:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    *dst += src;
 80182c8:	eb01 0b40 	add.w	fp, r1, r0, lsl #1
 80182cc:	eb00 0a0b 	add.w	sl, r0, fp
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80182d0:	f8d2 9020 	ldr.w	r9, [r2, #32]
    *dst += src;
 80182d4:	eb09 060a 	add.w	r6, r9, sl
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80182d8:	f8d2 8028 	ldr.w	r8, [r2, #40]	; 0x28
    *dst -= src;
 80182dc:	eba6 0e08 	sub.w	lr, r6, r8
 80182e0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80182e2:	ebae 0c05 	sub.w	ip, lr, r5
 80182e6:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80182e8:	ebac 0505 	sub.w	r5, ip, r5
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80182ec:	6b57      	ldr	r7, [r2, #52]	; 0x34
    *carry += ( *dst < src );
 80182ee:	4401      	add	r1, r0
 80182f0:	4281      	cmp	r1, r0
 80182f2:	bf2c      	ite	cs
 80182f4:	4619      	movcs	r1, r3
 80182f6:	1c59      	addcc	r1, r3, #1
 80182f8:	4558      	cmp	r0, fp
 80182fa:	bf88      	it	hi
 80182fc:	3101      	addhi	r1, #1
 80182fe:	4550      	cmp	r0, sl
 8018300:	bf88      	it	hi
 8018302:	3101      	addhi	r1, #1
 8018304:	45b1      	cmp	r9, r6
 8018306:	bf94      	ite	ls
 8018308:	4689      	movls	r9, r1
 801830a:	f101 0901 	addhi.w	r9, r1, #1
    *carry -= ( *dst < src );
 801830e:	45b0      	cmp	r8, r6
 8018310:	bf94      	ite	ls
 8018312:	464e      	movls	r6, r9
 8018314:	f1a9 0601 	subhi.w	r6, r9, #1
 8018318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801831a:	4573      	cmp	r3, lr
 801831c:	bf94      	ite	ls
 801831e:	46b6      	movls	lr, r6
 8018320:	f1a6 0e01 	subhi.w	lr, r6, #1
 8018324:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8018326:	4563      	cmp	r3, ip
 8018328:	bf94      	ite	ls
 801832a:	46f4      	movls	ip, lr
 801832c:	f1ae 0c01 	subhi.w	ip, lr, #1
 8018330:	42af      	cmp	r7, r5
 8018332:	bf88      	it	hi
 8018334:	f1ac 0c01 	subhi.w	ip, ip, #1
 8018338:	fa4f fc8c 	sxtb.w	ip, ip
    *dst -= src;
 801833c:	1bed      	subs	r5, r5, r7
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 801833e:	61d5      	str	r5, [r2, #28]
 8018340:	68a3      	ldr	r3, [r4, #8]
 8018342:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
 8018346:	621a      	str	r2, [r3, #32]
 8018348:	6863      	ldr	r3, [r4, #4]
 801834a:	2b09      	cmp	r3, #9
 801834c:	d908      	bls.n	8018360 <ecp_mod_p256+0x3f0>
 801834e:	2309      	movs	r3, #9
 8018350:	2100      	movs	r1, #0
 8018352:	68a2      	ldr	r2, [r4, #8]
 8018354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018358:	3301      	adds	r3, #1
 801835a:	6862      	ldr	r2, [r4, #4]
 801835c:	429a      	cmp	r2, r3
 801835e:	d8f8      	bhi.n	8018352 <ecp_mod_p256+0x3e2>
 8018360:	f1bc 0f00 	cmp.w	ip, #0
 8018364:	db3f      	blt.n	80183e6 <ecp_mod_p256+0x476>

cleanup:
    return( ret );
}
 8018366:	9801      	ldr	r0, [sp, #4]
 8018368:	b00f      	add	sp, #60	; 0x3c
 801836a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 801836e:	424b      	negs	r3, r1
    *carry -= ( *dst < src );
 8018370:	4298      	cmp	r0, r3
 8018372:	f04f 33ff 	mov.w	r3, #4294967295
 8018376:	bf28      	it	cs
 8018378:	2300      	movcs	r3, #0
    *dst -= src;
 801837a:	4401      	add	r1, r0
}
 801837c:	e644      	b.n	8018008 <ecp_mod_p256+0x98>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801837e:	427a      	negs	r2, r7
    *carry -= ( *dst < src );
 8018380:	4293      	cmp	r3, r2
 8018382:	f04f 32ff 	mov.w	r2, #4294967295
 8018386:	bf28      	it	cs
 8018388:	2200      	movcs	r2, #0
    *dst -= src;
 801838a:	443b      	add	r3, r7
}
 801838c:	e676      	b.n	801807c <ecp_mod_p256+0x10c>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 801838e:	424b      	negs	r3, r1
    *carry -= ( *dst < src );
 8018390:	4298      	cmp	r0, r3
 8018392:	f04f 33ff 	mov.w	r3, #4294967295
 8018396:	bf28      	it	cs
 8018398:	2300      	movcs	r3, #0
    *dst -= src;
 801839a:	4401      	add	r1, r0
}
 801839c:	e69a      	b.n	80180d4 <ecp_mod_p256+0x164>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801839e:	f1c8 0300 	rsb	r3, r8, #0
    *carry -= ( *dst < src );
 80183a2:	429a      	cmp	r2, r3
 80183a4:	f04f 33ff 	mov.w	r3, #4294967295
 80183a8:	bf28      	it	cs
 80183aa:	2300      	movcs	r3, #0
    *dst -= src;
 80183ac:	eb08 0a02 	add.w	sl, r8, r2
}
 80183b0:	e6d8      	b.n	8018164 <ecp_mod_p256+0x1f4>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80183b2:	4253      	negs	r3, r2
    *carry -= ( *dst < src );
 80183b4:	4298      	cmp	r0, r3
 80183b6:	f04f 33ff 	mov.w	r3, #4294967295
 80183ba:	bf28      	it	cs
 80183bc:	2300      	movcs	r3, #0
    *dst -= src;
 80183be:	eb02 0a00 	add.w	sl, r2, r0
}
 80183c2:	e705      	b.n	80181d0 <ecp_mod_p256+0x260>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80183c4:	4253      	negs	r3, r2
    *carry -= ( *dst < src );
 80183c6:	4299      	cmp	r1, r3
 80183c8:	f04f 33ff 	mov.w	r3, #4294967295
 80183cc:	bf28      	it	cs
 80183ce:	2300      	movcs	r3, #0
    *dst -= src;
 80183d0:	440a      	add	r2, r1
}
 80183d2:	e732      	b.n	801823a <ecp_mod_p256+0x2ca>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80183d4:	f1cc 0300 	rsb	r3, ip, #0
    *carry -= ( *dst < src );
 80183d8:	4299      	cmp	r1, r3
 80183da:	f04f 33ff 	mov.w	r3, #4294967295
 80183de:	bf28      	it	cs
 80183e0:	2300      	movcs	r3, #0
    *dst -= src;
 80183e2:	4461      	add	r1, ip
}
 80183e4:	e76f      	b.n	80182c6 <ecp_mod_p256+0x356>
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 80183e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80183ec:	3a01      	subs	r2, #1
 80183ee:	f1cc 0300 	rsb	r3, ip, #0
 80183f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80183f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80183f8:	4622      	mov	r2, r4
 80183fa:	a90b      	add	r1, sp, #44	; 0x2c
 80183fc:	4620      	mov	r0, r4
 80183fe:	f7fa fd18 	bl	8012e32 <mbedtls_mpi_sub_abs>
 8018402:	2800      	cmp	r0, #0
 8018404:	d1af      	bne.n	8018366 <ecp_mod_p256+0x3f6>
    N->s = -1;
 8018406:	f04f 33ff 	mov.w	r3, #4294967295
 801840a:	6023      	str	r3, [r4, #0]
    return( ret );
 801840c:	e7ab      	b.n	8018366 <ecp_mod_p256+0x3f6>
	...

08018410 <mbedtls_ecp_group_load>:
{
 8018410:	b538      	push	{r3, r4, r5, lr}
 8018412:	4604      	mov	r4, r0
 8018414:	460d      	mov	r5, r1
    mbedtls_ecp_group_free( grp );
 8018416:	f7fe fdf1 	bl	8016ffc <mbedtls_ecp_group_free>
    grp->id = id;
 801841a:	7025      	strb	r5, [r4, #0]
    switch( id )
 801841c:	2d03      	cmp	r5, #3
 801841e:	d127      	bne.n	8018470 <mbedtls_ecp_group_load+0x60>
            NIST_MODP( p256 );
 8018420:	4b16      	ldr	r3, [pc, #88]	; (801847c <mbedtls_ecp_group_load+0x6c>)
 8018422:	6663      	str	r3, [r4, #100]	; 0x64
    X->s = 1;
 8018424:	2501      	movs	r5, #1
 8018426:	6065      	str	r5, [r4, #4]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8018428:	2308      	movs	r3, #8
 801842a:	60a3      	str	r3, [r4, #8]
    X->p = (mbedtls_mpi_uint *) p;
 801842c:	4a14      	ldr	r2, [pc, #80]	; (8018480 <mbedtls_ecp_group_load+0x70>)
 801842e:	60e2      	str	r2, [r4, #12]
    X->s = 1;
 8018430:	61e5      	str	r5, [r4, #28]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8018432:	6223      	str	r3, [r4, #32]
    X->p = (mbedtls_mpi_uint *) p;
 8018434:	4a13      	ldr	r2, [pc, #76]	; (8018484 <mbedtls_ecp_group_load+0x74>)
 8018436:	6262      	str	r2, [r4, #36]	; 0x24
    X->s = 1;
 8018438:	64e5      	str	r5, [r4, #76]	; 0x4c
    X->n = len / sizeof( mbedtls_mpi_uint );
 801843a:	6523      	str	r3, [r4, #80]	; 0x50
    X->p = (mbedtls_mpi_uint *) p;
 801843c:	4a12      	ldr	r2, [pc, #72]	; (8018488 <mbedtls_ecp_group_load+0x78>)
 801843e:	6562      	str	r2, [r4, #84]	; 0x54
    X->s = 1;
 8018440:	62a5      	str	r5, [r4, #40]	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 8018442:	62e3      	str	r3, [r4, #44]	; 0x2c
    X->p = (mbedtls_mpi_uint *) p;
 8018444:	4a11      	ldr	r2, [pc, #68]	; (801848c <mbedtls_ecp_group_load+0x7c>)
 8018446:	6322      	str	r2, [r4, #48]	; 0x30
    X->s = 1;
 8018448:	6365      	str	r5, [r4, #52]	; 0x34
    X->n = len / sizeof( mbedtls_mpi_uint );
 801844a:	63a3      	str	r3, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 801844c:	4b10      	ldr	r3, [pc, #64]	; (8018490 <mbedtls_ecp_group_load+0x80>)
 801844e:	63e3      	str	r3, [r4, #60]	; 0x3c
    X->s = 1;
 8018450:	6425      	str	r5, [r4, #64]	; 0x40
    X->n = 1;
 8018452:	6465      	str	r5, [r4, #68]	; 0x44
    X->p = one;
 8018454:	4b0f      	ldr	r3, [pc, #60]	; (8018494 <mbedtls_ecp_group_load+0x84>)
 8018456:	64a3      	str	r3, [r4, #72]	; 0x48
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8018458:	1d20      	adds	r0, r4, #4
 801845a:	f7fa fa18 	bl	801288e <mbedtls_mpi_bitlen>
 801845e:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8018460:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018464:	f7fa fa13 	bl	801288e <mbedtls_mpi_bitlen>
 8018468:	65e0      	str	r0, [r4, #92]	; 0x5c
    grp->h = 1;
 801846a:	6625      	str	r5, [r4, #96]	; 0x60
            return( LOAD_GROUP( secp256r1 ) );
 801846c:	2000      	movs	r0, #0
}
 801846e:	bd38      	pop	{r3, r4, r5, pc}
            mbedtls_ecp_group_free( grp );
 8018470:	4620      	mov	r0, r4
 8018472:	f7fe fdc3 	bl	8016ffc <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8018476:	4808      	ldr	r0, [pc, #32]	; (8018498 <mbedtls_ecp_group_load+0x88>)
 8018478:	e7f9      	b.n	801846e <mbedtls_ecp_group_load+0x5e>
 801847a:	bf00      	nop
 801847c:	08017f71 	.word	0x08017f71
 8018480:	08031c94 	.word	0x08031c94
 8018484:	08031c14 	.word	0x08031c14
 8018488:	08031c74 	.word	0x08031c74
 801848c:	08031c34 	.word	0x08031c34
 8018490:	08031c54 	.word	0x08031c54
 8018494:	20000014 	.word	0x20000014
 8018498:	ffffb180 	.word	0xffffb180

0801849c <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 801849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184a0:	b08a      	sub	sp, #40	; 0x28
 80184a2:	4604      	mov	r4, r0
 80184a4:	460e      	mov	r6, r1
 80184a6:	4690      	mov	r8, r2
 80184a8:	461d      	mov	r5, r3
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80184aa:	2b20      	cmp	r3, #32
 80184ac:	d81d      	bhi.n	80184ea <entropy_update+0x4e>
#endif
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
    }

    header[0] = source_id;
 80184ae:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    header[1] = use_len & 0xFF;
 80184b2:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
        ctx->accumulator_started = 1;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
#else
    if( ctx->accumulator_started == 0 &&
 80184b6:	6823      	ldr	r3, [r4, #0]
 80184b8:	b92b      	cbnz	r3, 80184c6 <entropy_update+0x2a>
        ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 80184ba:	2100      	movs	r1, #0
 80184bc:	1d20      	adds	r0, r4, #4
 80184be:	f006 f8b7 	bl	801e630 <mbedtls_sha256_starts_ret>
    if( ctx->accumulator_started == 0 &&
 80184c2:	4607      	mov	r7, r0
 80184c4:	b948      	cbnz	r0, 80184da <entropy_update+0x3e>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 80184c6:	2301      	movs	r3, #1
 80184c8:	f844 3b04 	str.w	r3, [r4], #4
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 80184cc:	2202      	movs	r2, #2
 80184ce:	a909      	add	r1, sp, #36	; 0x24
 80184d0:	4620      	mov	r0, r4
 80184d2:	f006 fc69 	bl	801eda8 <mbedtls_sha256_update_ret>
 80184d6:	4607      	mov	r7, r0
 80184d8:	b1a0      	cbz	r0, 8018504 <entropy_update+0x68>
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80184da:	2120      	movs	r1, #32
 80184dc:	a801      	add	r0, sp, #4
 80184de:	f002 fd31 	bl	801af44 <mbedtls_platform_zeroize>

    return( ret );
}
 80184e2:	4638      	mov	r0, r7
 80184e4:	b00a      	add	sp, #40	; 0x28
 80184e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
 80184ea:	2300      	movs	r3, #0
 80184ec:	aa01      	add	r2, sp, #4
 80184ee:	4629      	mov	r1, r5
 80184f0:	4640      	mov	r0, r8
 80184f2:	f006 fd45 	bl	801ef80 <mbedtls_sha256_ret>
 80184f6:	4607      	mov	r7, r0
 80184f8:	2800      	cmp	r0, #0
 80184fa:	d1ee      	bne.n	80184da <entropy_update+0x3e>
        p = tmp;
 80184fc:	f10d 0804 	add.w	r8, sp, #4
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8018500:	2520      	movs	r5, #32
 8018502:	e7d4      	b.n	80184ae <entropy_update+0x12>
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
 8018504:	462a      	mov	r2, r5
 8018506:	4641      	mov	r1, r8
 8018508:	4620      	mov	r0, r4
 801850a:	f006 fc4d 	bl	801eda8 <mbedtls_sha256_update_ret>
 801850e:	4607      	mov	r7, r0
 8018510:	e7e3      	b.n	80184da <entropy_update+0x3e>

08018512 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 8018512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018516:	b0a2      	sub	sp, #136	; 0x88
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 8018518:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801851a:	2b00      	cmp	r3, #0
 801851c:	d039      	beq.n	8018592 <entropy_gather_internal+0x80>
 801851e:	4680      	mov	r8, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8018520:	2b00      	cmp	r3, #0
 8018522:	dd33      	ble.n	801858c <entropy_gather_internal+0x7a>
 8018524:	4604      	mov	r4, r0
    int ret, i, have_one_strong = 0;
 8018526:	2600      	movs	r6, #0
    for( i = 0; i < ctx->source_count; i++ )
 8018528:	4635      	mov	r5, r6
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 801852a:	46b2      	mov	sl, r6
 801852c:	e005      	b.n	801853a <entropy_gather_internal+0x28>
    for( i = 0; i < ctx->source_count; i++ )
 801852e:	3501      	adds	r5, #1
 8018530:	3414      	adds	r4, #20
 8018532:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8018536:	42ab      	cmp	r3, r5
 8018538:	dd1c      	ble.n	8018574 <entropy_gather_internal+0x62>
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 801853a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
            have_one_strong = 1;
 801853e:	2b01      	cmp	r3, #1
 8018540:	bf08      	it	eq
 8018542:	461e      	moveq	r6, r3
        olen = 0;
 8018544:	f8cd a004 	str.w	sl, [sp, #4]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8018548:	6f67      	ldr	r7, [r4, #116]	; 0x74
 801854a:	ab01      	add	r3, sp, #4
 801854c:	2280      	movs	r2, #128	; 0x80
 801854e:	a902      	add	r1, sp, #8
 8018550:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8018552:	47b8      	blx	r7
 8018554:	4607      	mov	r7, r0
 8018556:	b988      	cbnz	r0, 801857c <entropy_gather_internal+0x6a>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 8018558:	9b01      	ldr	r3, [sp, #4]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d0e7      	beq.n	801852e <entropy_gather_internal+0x1c>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 801855e:	aa02      	add	r2, sp, #8
 8018560:	b2e9      	uxtb	r1, r5
 8018562:	4640      	mov	r0, r8
 8018564:	f7ff ff9a 	bl	801849c <entropy_update>
 8018568:	b9b0      	cbnz	r0, 8018598 <entropy_gather_internal+0x86>
                                        buf, olen ) ) != 0 )
                return( ret );
            ctx->source[i].size += olen;
 801856a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801856c:	9a01      	ldr	r2, [sp, #4]
 801856e:	4413      	add	r3, r2
 8018570:	67e3      	str	r3, [r4, #124]	; 0x7c
 8018572:	e7dc      	b.n	801852e <entropy_gather_internal+0x1c>
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 8018574:	2e00      	cmp	r6, #0
 8018576:	bf08      	it	eq
 8018578:	f06f 073c 	mvneq.w	r7, #60	; 0x3c

cleanup:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801857c:	2180      	movs	r1, #128	; 0x80
 801857e:	a802      	add	r0, sp, #8
 8018580:	f002 fce0 	bl	801af44 <mbedtls_platform_zeroize>

    return( ret );
}
 8018584:	4638      	mov	r0, r7
 8018586:	b022      	add	sp, #136	; 0x88
 8018588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 801858c:	f06f 073c 	mvn.w	r7, #60	; 0x3c
 8018590:	e7f4      	b.n	801857c <entropy_gather_internal+0x6a>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8018592:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8018596:	e7f5      	b.n	8018584 <entropy_gather_internal+0x72>
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 8018598:	4607      	mov	r7, r0
 801859a:	e7f3      	b.n	8018584 <entropy_gather_internal+0x72>

0801859c <mbedtls_entropy_init>:
{
 801859c:	b538      	push	{r3, r4, r5, lr}
 801859e:	4604      	mov	r4, r0
    ctx->source_count = 0;
 80185a0:	2500      	movs	r5, #0
 80185a2:	6705      	str	r5, [r0, #112]	; 0x70
    memset( ctx->source, 0, sizeof( ctx->source ) );
 80185a4:	2228      	movs	r2, #40	; 0x28
 80185a6:	4629      	mov	r1, r5
 80185a8:	3074      	adds	r0, #116	; 0x74
 80185aa:	f011 ffee 	bl	802a58a <memset>
    ctx->accumulator_started = 0;
 80185ae:	4620      	mov	r0, r4
 80185b0:	f840 5b04 	str.w	r5, [r0], #4
    mbedtls_sha256_init( &ctx->accumulator );
 80185b4:	f006 f82a 	bl	801e60c <mbedtls_sha256_init>
    idx = ctx->source_count;
 80185b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	dc0e      	bgt.n	80185dc <mbedtls_entropy_init+0x40>
    ctx->source[idx].f_source  = f_source;
 80185be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80185c2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80185c6:	4906      	ldr	r1, [pc, #24]	; (80185e0 <mbedtls_entropy_init+0x44>)
 80185c8:	6751      	str	r1, [r2, #116]	; 0x74
    ctx->source[idx].p_source  = p_source;
 80185ca:	6795      	str	r5, [r2, #120]	; 0x78
    ctx->source[idx].threshold = threshold;
 80185cc:	2120      	movs	r1, #32
 80185ce:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    ctx->source[idx].strong    = strong;
 80185d2:	2101      	movs	r1, #1
 80185d4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    ctx->source_count++;
 80185d8:	440b      	add	r3, r1
 80185da:	6723      	str	r3, [r4, #112]	; 0x70
}
 80185dc:	bd38      	pop	{r3, r4, r5, pc}
 80185de:	bf00      	nop
 80185e0:	08029935 	.word	0x08029935

080185e4 <mbedtls_entropy_free>:
{
 80185e4:	b538      	push	{r3, r4, r5, lr}
 80185e6:	4604      	mov	r4, r0
    mbedtls_sha256_free( &ctx->accumulator );
 80185e8:	3004      	adds	r0, #4
 80185ea:	f006 f815 	bl	801e618 <mbedtls_sha256_free>
    ctx->source_count = 0;
 80185ee:	2500      	movs	r5, #0
 80185f0:	6725      	str	r5, [r4, #112]	; 0x70
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 80185f2:	2128      	movs	r1, #40	; 0x28
 80185f4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80185f8:	f002 fca4 	bl	801af44 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 80185fc:	6025      	str	r5, [r4, #0]
}
 80185fe:	bd38      	pop	{r3, r4, r5, pc}

08018600 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8018600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018604:	b089      	sub	sp, #36	; 0x24
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8018606:	2a20      	cmp	r2, #32
 8018608:	d865      	bhi.n	80186d6 <mbedtls_entropy_func+0xd6>
 801860a:	4604      	mov	r4, r0
 801860c:	4689      	mov	r9, r1
 801860e:	4615      	mov	r5, r2
 8018610:	f240 1801 	movw	r8, #257	; 0x101
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8018614:	4620      	mov	r0, r4
 8018616:	f7ff ff7c 	bl	8018512 <entropy_gather_internal>
 801861a:	4606      	mov	r6, r0
 801861c:	b138      	cbz	r0, 801862e <mbedtls_entropy_func+0x2e>
    memcpy( output, buf, len );

    ret = 0;

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801861e:	2120      	movs	r1, #32
 8018620:	4668      	mov	r0, sp
 8018622:	f002 fc8f 	bl	801af44 <mbedtls_platform_zeroize>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8018626:	4630      	mov	r0, r6
 8018628:	b009      	add	sp, #36	; 0x24
 801862a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for( i = 0; i < ctx->source_count; i++ )
 801862e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8018630:	2800      	cmp	r0, #0
 8018632:	dd14      	ble.n	801865e <mbedtls_entropy_func+0x5e>
 8018634:	4623      	mov	r3, r4
 8018636:	4632      	mov	r2, r6
        done = 1;
 8018638:	2101      	movs	r1, #1
                done = 0;
 801863a:	6fdf      	ldr	r7, [r3, #124]	; 0x7c
 801863c:	46bc      	mov	ip, r7
 801863e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8018642:	45bc      	cmp	ip, r7
 8018644:	bf38      	it	cc
 8018646:	4631      	movcc	r1, r6
        for( i = 0; i < ctx->source_count; i++ )
 8018648:	3201      	adds	r2, #1
 801864a:	3314      	adds	r3, #20
 801864c:	4282      	cmp	r2, r0
 801864e:	d1f4      	bne.n	801863a <mbedtls_entropy_func+0x3a>
    while( ! done );
 8018650:	b929      	cbnz	r1, 801865e <mbedtls_entropy_func+0x5e>
        if( count++ > ENTROPY_MAX_LOOP )
 8018652:	f1b8 0801 	subs.w	r8, r8, #1
 8018656:	d1dd      	bne.n	8018614 <mbedtls_entropy_func+0x14>
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 8018658:	f06f 063b 	mvn.w	r6, #59	; 0x3b
 801865c:	e7df      	b.n	801861e <mbedtls_entropy_func+0x1e>
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 801865e:	2220      	movs	r2, #32
 8018660:	2100      	movs	r1, #0
 8018662:	4668      	mov	r0, sp
 8018664:	f011 ff91 	bl	802a58a <memset>
    if( ( ret = mbedtls_sha256_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8018668:	f104 0804 	add.w	r8, r4, #4
 801866c:	4669      	mov	r1, sp
 801866e:	4640      	mov	r0, r8
 8018670:	f006 fbe3 	bl	801ee3a <mbedtls_sha256_finish_ret>
 8018674:	4606      	mov	r6, r0
 8018676:	2800      	cmp	r0, #0
 8018678:	d1d1      	bne.n	801861e <mbedtls_entropy_func+0x1e>
    mbedtls_sha256_free( &ctx->accumulator );
 801867a:	4640      	mov	r0, r8
 801867c:	f005 ffcc 	bl	801e618 <mbedtls_sha256_free>
    mbedtls_sha256_init( &ctx->accumulator );
 8018680:	4640      	mov	r0, r8
 8018682:	f005 ffc3 	bl	801e60c <mbedtls_sha256_init>
    if( ( ret = mbedtls_sha256_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8018686:	2100      	movs	r1, #0
 8018688:	4640      	mov	r0, r8
 801868a:	f005 ffd1 	bl	801e630 <mbedtls_sha256_starts_ret>
 801868e:	4606      	mov	r6, r0
 8018690:	2800      	cmp	r0, #0
 8018692:	d1c4      	bne.n	801861e <mbedtls_entropy_func+0x1e>
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, buf,
 8018694:	2220      	movs	r2, #32
 8018696:	4669      	mov	r1, sp
 8018698:	4640      	mov	r0, r8
 801869a:	f006 fb85 	bl	801eda8 <mbedtls_sha256_update_ret>
 801869e:	4606      	mov	r6, r0
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d1bc      	bne.n	801861e <mbedtls_entropy_func+0x1e>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 80186a4:	2300      	movs	r3, #0
 80186a6:	466a      	mov	r2, sp
 80186a8:	2120      	movs	r1, #32
 80186aa:	4668      	mov	r0, sp
 80186ac:	f006 fc68 	bl	801ef80 <mbedtls_sha256_ret>
 80186b0:	4606      	mov	r6, r0
 80186b2:	2800      	cmp	r0, #0
 80186b4:	d1b3      	bne.n	801861e <mbedtls_entropy_func+0x1e>
    for( i = 0; i < ctx->source_count; i++ )
 80186b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80186b8:	2a00      	cmp	r2, #0
 80186ba:	dd06      	ble.n	80186ca <mbedtls_entropy_func+0xca>
 80186bc:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 80186be:	2100      	movs	r1, #0
 80186c0:	67e1      	str	r1, [r4, #124]	; 0x7c
    for( i = 0; i < ctx->source_count; i++ )
 80186c2:	3301      	adds	r3, #1
 80186c4:	3414      	adds	r4, #20
 80186c6:	4293      	cmp	r3, r2
 80186c8:	d1fa      	bne.n	80186c0 <mbedtls_entropy_func+0xc0>
    memcpy( output, buf, len );
 80186ca:	462a      	mov	r2, r5
 80186cc:	4669      	mov	r1, sp
 80186ce:	4648      	mov	r0, r9
 80186d0:	f011 ff33 	bl	802a53a <memcpy>
    ret = 0;
 80186d4:	e7a3      	b.n	801861e <mbedtls_entropy_func+0x1e>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 80186d6:	f06f 063b 	mvn.w	r6, #59	; 0x3b
 80186da:	e7a4      	b.n	8018626 <mbedtls_entropy_func+0x26>

080186dc <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80186dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e0:	b083      	sub	sp, #12
 80186e2:	9201      	str	r2, [sp, #4]
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 80186e4:	7bcc      	ldrb	r4, [r1, #15]

    zh = ctx->HH[lo];
 80186e6:	f004 060f 	and.w	r6, r4, #15
 80186ea:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80186ee:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 80186f2:	f8d6 50bc 	ldr.w	r5, [r6, #188]	; 0xbc
    zl = ctx->HL[lo];
 80186f6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80186f8:	f8d6 903c 	ldr.w	r9, [r6, #60]	; 0x3c

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 80186fc:	0924      	lsrs	r4, r4, #4

        if( i != 15 )
 80186fe:	f101 070e 	add.w	r7, r1, #14
 8018702:	f101 38ff 	add.w	r8, r1, #4294967295
        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8018706:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 80187f8 <gcm_mult+0x11c>
        if( i != 15 )
 801870a:	f1c1 0e01 	rsb	lr, r1, #1
        zl = ( zh << 60 ) | ( zl >> 4 );
 801870e:	ea4f 1b12 	mov.w	fp, r2, lsr #4
 8018712:	ea4b 7b09 	orr.w	fp, fp, r9, lsl #28
 8018716:	0719      	lsls	r1, r3, #28
 8018718:	ea41 1919 	orr.w	r9, r1, r9, lsr #4
        zh ^= ctx->HH[hi];
 801871c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
        zh = ( zh >> 4 );
 8018720:	091b      	lsrs	r3, r3, #4
 8018722:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8018726:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
 801872a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801872e:	ea83 0a06 	eor.w	sl, r3, r6
 8018732:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
        zh ^= (uint64_t) last4[rem] << 48;
 8018736:	f002 020f 	and.w	r2, r2, #15
 801873a:	f85c 2032 	ldr.w	r2, [ip, r2, lsl #3]
        zh ^= ctx->HH[hi];
 801873e:	4653      	mov	r3, sl
 8018740:	ea85 4502 	eor.w	r5, r5, r2, lsl #16
        zl ^= ctx->HL[hi];
 8018744:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018746:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018748:	ea8b 0202 	eor.w	r2, fp, r2
 801874c:	ea89 0901 	eor.w	r9, r9, r1
    for( i = 15; i >= 0; i-- )
 8018750:	45b8      	cmp	r8, r7
 8018752:	d02b      	beq.n	80187ac <gcm_mult+0xd0>
        lo = x[i] & 0xf;
 8018754:	f817 4901 	ldrb.w	r4, [r7], #-1
 8018758:	f004 010f 	and.w	r1, r4, #15
        hi = x[i] >> 4;
 801875c:	0924      	lsrs	r4, r4, #4
        if( i != 15 )
 801875e:	eb0e 0607 	add.w	r6, lr, r7
 8018762:	2e0f      	cmp	r6, #15
 8018764:	d0d3      	beq.n	801870e <gcm_mult+0x32>
            zl = ( zh << 60 ) | ( zl >> 4 );
 8018766:	0916      	lsrs	r6, r2, #4
 8018768:	ea46 7609 	orr.w	r6, r6, r9, lsl #28
 801876c:	ea4f 730a 	mov.w	r3, sl, lsl #28
 8018770:	ea43 1919 	orr.w	r9, r3, r9, lsr #4
            zh ^= ctx->HH[lo];
 8018774:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
            zh = ( zh >> 4 );
 8018778:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 801877c:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
 8018780:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
 8018784:	9300      	str	r3, [sp, #0]
 8018786:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 801878a:	ea83 1515 	eor.w	r5, r3, r5, lsr #4
            zh ^= (uint64_t) last4[rem] << 48;
 801878e:	f002 020f 	and.w	r2, r2, #15
 8018792:	f85c 2032 	ldr.w	r2, [ip, r2, lsl #3]
            zh ^= ctx->HH[lo];
 8018796:	9b00      	ldr	r3, [sp, #0]
 8018798:	ea8a 0303 	eor.w	r3, sl, r3
 801879c:	ea85 4502 	eor.w	r5, r5, r2, lsl #16
            zl ^= ctx->HL[lo];
 80187a0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80187a2:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80187a4:	4072      	eors	r2, r6
 80187a6:	ea89 0901 	eor.w	r9, r9, r1
 80187aa:	e7b0      	b.n	801870e <gcm_mult+0x32>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80187ac:	0e29      	lsrs	r1, r5, #24
 80187ae:	9801      	ldr	r0, [sp, #4]
 80187b0:	7001      	strb	r1, [r0, #0]
 80187b2:	0c29      	lsrs	r1, r5, #16
 80187b4:	7041      	strb	r1, [r0, #1]
 80187b6:	0a29      	lsrs	r1, r5, #8
 80187b8:	7081      	strb	r1, [r0, #2]
 80187ba:	70c5      	strb	r5, [r0, #3]
    PUT_UINT32_BE( zh, output, 4 );
 80187bc:	0e19      	lsrs	r1, r3, #24
 80187be:	7101      	strb	r1, [r0, #4]
 80187c0:	0c19      	lsrs	r1, r3, #16
 80187c2:	7141      	strb	r1, [r0, #5]
 80187c4:	0a19      	lsrs	r1, r3, #8
 80187c6:	7181      	strb	r1, [r0, #6]
 80187c8:	f880 a007 	strb.w	sl, [r0, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80187cc:	ea4f 6319 	mov.w	r3, r9, lsr #24
 80187d0:	7203      	strb	r3, [r0, #8]
 80187d2:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80187d6:	7243      	strb	r3, [r0, #9]
 80187d8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80187dc:	7283      	strb	r3, [r0, #10]
 80187de:	f880 900b 	strb.w	r9, [r0, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80187e2:	0e13      	lsrs	r3, r2, #24
 80187e4:	7303      	strb	r3, [r0, #12]
 80187e6:	0c13      	lsrs	r3, r2, #16
 80187e8:	7343      	strb	r3, [r0, #13]
 80187ea:	0a13      	lsrs	r3, r2, #8
 80187ec:	7383      	strb	r3, [r0, #14]
 80187ee:	73c2      	strb	r2, [r0, #15]
}
 80187f0:	b003      	add	sp, #12
 80187f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f6:	bf00      	nop
 80187f8:	08031cb8 	.word	0x08031cb8

080187fc <mbedtls_gcm_init>:
{
 80187fc:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80187fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8018802:	2100      	movs	r1, #0
 8018804:	f011 fec1 	bl	802a58a <memset>
}
 8018808:	bd08      	pop	{r3, pc}

0801880a <mbedtls_gcm_setkey>:
{
 801880a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801880e:	b08d      	sub	sp, #52	; 0x34
 8018810:	4604      	mov	r4, r0
 8018812:	4608      	mov	r0, r1
 8018814:	4616      	mov	r6, r2
 8018816:	461d      	mov	r5, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8018818:	2201      	movs	r2, #1
 801881a:	4619      	mov	r1, r3
 801881c:	f7fc fadc 	bl	8014dd8 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8018820:	2800      	cmp	r0, #0
 8018822:	f000 80d3 	beq.w	80189cc <mbedtls_gcm_setkey+0x1c2>
 8018826:	4607      	mov	r7, r0
    if( cipher_info->block_size != 16 )
 8018828:	6943      	ldr	r3, [r0, #20]
 801882a:	2b10      	cmp	r3, #16
 801882c:	f040 80d2 	bne.w	80189d4 <mbedtls_gcm_setkey+0x1ca>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8018830:	4620      	mov	r0, r4
 8018832:	f7fc faef 	bl	8014e14 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8018836:	4639      	mov	r1, r7
 8018838:	4620      	mov	r0, r4
 801883a:	f7fc fafb 	bl	8014e34 <mbedtls_cipher_setup>
 801883e:	9003      	str	r0, [sp, #12]
 8018840:	b118      	cbz	r0, 801884a <mbedtls_gcm_setkey+0x40>
}
 8018842:	9803      	ldr	r0, [sp, #12]
 8018844:	b00d      	add	sp, #52	; 0x34
 8018846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 801884a:	2301      	movs	r3, #1
 801884c:	462a      	mov	r2, r5
 801884e:	4631      	mov	r1, r6
 8018850:	4620      	mov	r0, r4
 8018852:	f7fc fb07 	bl	8014e64 <mbedtls_cipher_setkey>
 8018856:	9003      	str	r0, [sp, #12]
 8018858:	2800      	cmp	r0, #0
 801885a:	d1f2      	bne.n	8018842 <mbedtls_gcm_setkey+0x38>
    size_t olen = 0;
 801885c:	2300      	movs	r3, #0
 801885e:	9307      	str	r3, [sp, #28]
    memset( h, 0, 16 );
 8018860:	9308      	str	r3, [sp, #32]
 8018862:	9309      	str	r3, [sp, #36]	; 0x24
 8018864:	930a      	str	r3, [sp, #40]	; 0x28
 8018866:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8018868:	ab07      	add	r3, sp, #28
 801886a:	9300      	str	r3, [sp, #0]
 801886c:	ab08      	add	r3, sp, #32
 801886e:	2210      	movs	r2, #16
 8018870:	4619      	mov	r1, r3
 8018872:	4620      	mov	r0, r4
 8018874:	f7fc fb1c 	bl	8014eb0 <mbedtls_cipher_update>
 8018878:	9003      	str	r0, [sp, #12]
 801887a:	2800      	cmp	r0, #0
 801887c:	d1e1      	bne.n	8018842 <mbedtls_gcm_setkey+0x38>
    GET_UINT32_BE( hi, h,  0  );
 801887e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8018882:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8018886:	0412      	lsls	r2, r2, #16
 8018888:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801888c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018890:	431a      	orrs	r2, r3
 8018892:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8018896:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    GET_UINT32_BE( lo, h,  4  );
 801889a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801889e:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 80188a2:	0409      	lsls	r1, r1, #16
 80188a4:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80188a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80188ac:	4319      	orrs	r1, r3
 80188ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80188b2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    vh = (uint64_t) hi << 32 | lo;
 80188b6:	460f      	mov	r7, r1
 80188b8:	4613      	mov	r3, r2
    GET_UINT32_BE( hi, h,  8  );
 80188ba:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80188be:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80188c2:	0400      	lsls	r0, r0, #16
 80188c4:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 80188c8:	f89d 502b 	ldrb.w	r5, [sp, #43]	; 0x2b
 80188cc:	4328      	orrs	r0, r5
 80188ce:	f89d 502a 	ldrb.w	r5, [sp, #42]	; 0x2a
 80188d2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    GET_UINT32_BE( lo, h,  12 );
 80188d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80188da:	f89d e02d 	ldrb.w	lr, [sp, #45]	; 0x2d
 80188de:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80188e2:	ea4e 6e05 	orr.w	lr, lr, r5, lsl #24
 80188e6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80188ea:	ea4e 0e05 	orr.w	lr, lr, r5
 80188ee:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
 80188f2:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
    vl = (uint64_t) hi << 32 | lo;
 80188f6:	4676      	mov	r6, lr
 80188f8:	4605      	mov	r5, r0
    ctx->HL[8] = vl;
 80188fa:	f8c4 e078 	str.w	lr, [r4, #120]	; 0x78
 80188fe:	67e0      	str	r0, [r4, #124]	; 0x7c
    ctx->HH[8] = vh;
 8018900:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
 8018904:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
    ctx->HH[0] = 0;
 8018908:	2000      	movs	r0, #0
 801890a:	2100      	movs	r1, #0
 801890c:	e9c4 012e 	strd	r0, r1, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
 8018910:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8018914:	f04f 0803 	mov.w	r8, #3
    for( i = 4; i > 0; i >>= 1 )
 8018918:	f04f 0e04 	mov.w	lr, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 801891c:	f006 0201 	and.w	r2, r6, #1
 8018920:	0151      	lsls	r1, r2, #5
 8018922:	1a52      	subs	r2, r2, r1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8018924:	0870      	lsrs	r0, r6, #1
 8018926:	ea40 70c5 	orr.w	r0, r0, r5, lsl #31
 801892a:	07f9      	lsls	r1, r7, #31
 801892c:	4606      	mov	r6, r0
 801892e:	ea41 0555 	orr.w	r5, r1, r5, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8018932:	0879      	lsrs	r1, r7, #1
 8018934:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8018938:	085b      	lsrs	r3, r3, #1
 801893a:	460f      	mov	r7, r1
 801893c:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
        ctx->HL[i] = vl;
 8018940:	eb04 02ce 	add.w	r2, r4, lr, lsl #3
 8018944:	6390      	str	r0, [r2, #56]	; 0x38
 8018946:	63d5      	str	r5, [r2, #60]	; 0x3c
        ctx->HH[i] = vh;
 8018948:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
 801894c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    for( i = 4; i > 0; i >>= 1 )
 8018950:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8018954:	f1b8 0801 	subs.w	r8, r8, #1
 8018958:	d1e0      	bne.n	801891c <mbedtls_gcm_setkey+0x112>
 801895a:	2303      	movs	r3, #3
    for( i = 2; i <= 8; i *= 2 )
 801895c:	2702      	movs	r7, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 801895e:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8018962:	f104 0cb8 	add.w	ip, r4, #184	; 0xb8
 8018966:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801896a:	9204      	str	r2, [sp, #16]
 801896c:	469a      	mov	sl, r3
 801896e:	9405      	str	r4, [sp, #20]
 8018970:	00fd      	lsls	r5, r7, #3
 8018972:	eb0b 02c7 	add.w	r2, fp, r7, lsl #3
 8018976:	eb0c 01c7 	add.w	r1, ip, r7, lsl #3
        vh = *HiH;
 801897a:	f85c 6037 	ldr.w	r6, [ip, r7, lsl #3]
 801897e:	f8d1 e004 	ldr.w	lr, [r1, #4]
        vl = *HiL;
 8018982:	f85b 8037 	ldr.w	r8, [fp, r7, lsl #3]
 8018986:	f8d2 9004 	ldr.w	r9, [r2, #4]
        for( j = 1; j < i; j++ )
 801898a:	2f01      	cmp	r7, #1
 801898c:	dd19      	ble.n	80189c2 <mbedtls_gcm_setkey+0x1b8>
 801898e:	9b05      	ldr	r3, [sp, #20]
 8018990:	3338      	adds	r3, #56	; 0x38
 8018992:	9804      	ldr	r0, [sp, #16]
 8018994:	4405      	add	r5, r0
            HiH[j] = vh ^ ctx->HH[j];
 8018996:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 801899a:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
 801899e:	4074      	eors	r4, r6
 80189a0:	ea80 000e 	eor.w	r0, r0, lr
 80189a4:	f841 4f08 	str.w	r4, [r1, #8]!
 80189a8:	6048      	str	r0, [r1, #4]
            HiL[j] = vl ^ ctx->HL[j];
 80189aa:	f853 4f08 	ldr.w	r4, [r3, #8]!
 80189ae:	6858      	ldr	r0, [r3, #4]
 80189b0:	ea84 0408 	eor.w	r4, r4, r8
 80189b4:	ea80 0009 	eor.w	r0, r0, r9
 80189b8:	f842 4f08 	str.w	r4, [r2, #8]!
 80189bc:	6050      	str	r0, [r2, #4]
        for( j = 1; j < i; j++ )
 80189be:	42ab      	cmp	r3, r5
 80189c0:	d1e9      	bne.n	8018996 <mbedtls_gcm_setkey+0x18c>
    for( i = 2; i <= 8; i *= 2 )
 80189c2:	007f      	lsls	r7, r7, #1
 80189c4:	f1ba 0a01 	subs.w	sl, sl, #1
 80189c8:	d1d2      	bne.n	8018970 <mbedtls_gcm_setkey+0x166>
 80189ca:	e73a      	b.n	8018842 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80189cc:	f06f 0313 	mvn.w	r3, #19
 80189d0:	9303      	str	r3, [sp, #12]
 80189d2:	e736      	b.n	8018842 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80189d4:	f06f 0313 	mvn.w	r3, #19
 80189d8:	9303      	str	r3, [sp, #12]
 80189da:	e732      	b.n	8018842 <mbedtls_gcm_setkey+0x38>

080189dc <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80189dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189e0:	b089      	sub	sp, #36	; 0x24
 80189e2:	4692      	mov	sl, r2
 80189e4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80189e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80189e8:	2200      	movs	r2, #0
 80189ea:	9203      	str	r2, [sp, #12]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	f000 8085 	beq.w	8018afc <mbedtls_gcm_starts+0x120>
 80189f2:	4604      	mov	r4, r0
 80189f4:	4699      	mov	r9, r3
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80189f6:	f500 7bac 	add.w	fp, r0, #344	; 0x158
 80189fa:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
 80189fe:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
 8018a02:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
 8018a06:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8018a0a:	f500 78b4 	add.w	r8, r0, #360	; 0x168
 8018a0e:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 8018a12:	f8c0 216c 	str.w	r2, [r0, #364]	; 0x16c
 8018a16:	f8c0 2170 	str.w	r2, [r0, #368]	; 0x170
 8018a1a:	f8c0 2174 	str.w	r2, [r0, #372]	; 0x174

    ctx->mode = mode;
 8018a1e:	f8c0 1178 	str.w	r1, [r0, #376]	; 0x178
    ctx->len = 0;
 8018a22:	2200      	movs	r2, #0
 8018a24:	2300      	movs	r3, #0
 8018a26:	e9c0 234e 	strd	r2, r3, [r0, #312]	; 0x138
    ctx->add_len = 0;
 8018a2a:	e9c0 2350 	strd	r2, r3, [r0, #320]	; 0x140

    if( iv_len == 12 )
 8018a2e:	f1b9 0f0c 	cmp.w	r9, #12
 8018a32:	d035      	beq.n	8018aa0 <mbedtls_gcm_starts+0xc4>
        memcpy( ctx->y, iv, iv_len );
        ctx->y[15] = 1;
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8018a34:	2300      	movs	r3, #0
 8018a36:	9304      	str	r3, [sp, #16]
 8018a38:	9305      	str	r3, [sp, #20]
 8018a3a:	9306      	str	r3, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8018a3c:	f3c9 5347 	ubfx	r3, r9, #21, #8
 8018a40:	f88d 301c 	strb.w	r3, [sp, #28]
 8018a44:	f3c9 334f 	ubfx	r3, r9, #13, #16
 8018a48:	f88d 301d 	strb.w	r3, [sp, #29]
 8018a4c:	f3c9 1357 	ubfx	r3, r9, #5, #24
 8018a50:	f88d 301e 	strb.w	r3, [sp, #30]
 8018a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8018a58:	f88d 301f 	strb.w	r3, [sp, #31]

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8018a5c:	464d      	mov	r5, r9
 8018a5e:	2d10      	cmp	r5, #16
 8018a60:	bf28      	it	cs
 8018a62:	2510      	movcs	r5, #16

            for( i = 0; i < use_len; i++ )
 8018a64:	f1b9 0f00 	cmp.w	r9, #0
 8018a68:	d054      	beq.n	8018b14 <mbedtls_gcm_starts+0x138>
 8018a6a:	f204 1257 	addw	r2, r4, #343	; 0x157
 8018a6e:	f10a 30ff 	add.w	r0, sl, #4294967295
                ctx->y[i] ^= p[i];
 8018a72:	4613      	mov	r3, r2
 8018a74:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8018a78:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8018a7c:	ea81 010c 	eor.w	r1, r1, ip
 8018a80:	7011      	strb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
 8018a82:	f5a3 73ab 	sub.w	r3, r3, #342	; 0x156
 8018a86:	1b1b      	subs	r3, r3, r4
 8018a88:	429d      	cmp	r5, r3
 8018a8a:	d8f2      	bhi.n	8018a72 <mbedtls_gcm_starts+0x96>

            gcm_mult( ctx, ctx->y, ctx->y );
 8018a8c:	465a      	mov	r2, fp
 8018a8e:	4659      	mov	r1, fp
 8018a90:	4620      	mov	r0, r4
 8018a92:	f7ff fe23 	bl	80186dc <gcm_mult>

            iv_len -= use_len;
            p += use_len;
 8018a96:	44aa      	add	sl, r5
        while( iv_len > 0 )
 8018a98:	ebb9 0905 	subs.w	r9, r9, r5
 8018a9c:	d1de      	bne.n	8018a5c <mbedtls_gcm_starts+0x80>
 8018a9e:	e03e      	b.n	8018b1e <mbedtls_gcm_starts+0x142>
        memcpy( ctx->y, iv, iv_len );
 8018aa0:	f8da 1000 	ldr.w	r1, [sl]
 8018aa4:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018aa8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8018aac:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 8018ab0:	f8cb 2004 	str.w	r2, [fp, #4]
 8018ab4:	f8cb 3008 	str.w	r3, [fp, #8]
        ctx->y[15] = 1;
 8018ab8:	2301      	movs	r3, #1
 8018aba:	f880 3167 	strb.w	r3, [r0, #359]	; 0x167
 8018abe:	e03f      	b.n	8018b40 <mbedtls_gcm_starts+0x164>
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8018ac0:	4642      	mov	r2, r8
 8018ac2:	4641      	mov	r1, r8
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f7ff fe09 	bl	80186dc <gcm_mult>

        add_len -= use_len;
        p += use_len;
 8018aca:	442f      	add	r7, r5
    while( add_len > 0 )
 8018acc:	1b76      	subs	r6, r6, r5
 8018ace:	d01d      	beq.n	8018b0c <mbedtls_gcm_starts+0x130>
        use_len = ( add_len < 16 ) ? add_len : 16;
 8018ad0:	4635      	mov	r5, r6
 8018ad2:	2e10      	cmp	r6, #16
 8018ad4:	bf28      	it	cs
 8018ad6:	2510      	movcs	r5, #16
        for( i = 0; i < use_len; i++ )
 8018ad8:	b19e      	cbz	r6, 8018b02 <mbedtls_gcm_starts+0x126>
 8018ada:	f204 1267 	addw	r2, r4, #359	; 0x167
 8018ade:	1e78      	subs	r0, r7, #1
            ctx->buf[i] ^= p[i];
 8018ae0:	4613      	mov	r3, r2
 8018ae2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8018ae6:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8018aea:	ea81 010c 	eor.w	r1, r1, ip
 8018aee:	7011      	strb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 8018af0:	f5a3 73b3 	sub.w	r3, r3, #358	; 0x166
 8018af4:	1b1b      	subs	r3, r3, r4
 8018af6:	42ab      	cmp	r3, r5
 8018af8:	d3f2      	bcc.n	8018ae0 <mbedtls_gcm_starts+0x104>
 8018afa:	e7e1      	b.n	8018ac0 <mbedtls_gcm_starts+0xe4>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8018afc:	f06f 0913 	mvn.w	r9, #19
 8018b00:	e004      	b.n	8018b0c <mbedtls_gcm_starts+0x130>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8018b02:	4642      	mov	r2, r8
 8018b04:	4641      	mov	r1, r8
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7ff fde8 	bl	80186dc <gcm_mult>
    }

    return( 0 );
}
 8018b0c:	4648      	mov	r0, r9
 8018b0e:	b009      	add	sp, #36	; 0x24
 8018b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            gcm_mult( ctx, ctx->y, ctx->y );
 8018b14:	465a      	mov	r2, fp
 8018b16:	4659      	mov	r1, fp
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f7ff fddf 	bl	80186dc <gcm_mult>
        while( iv_len > 0 )
 8018b1e:	f204 1157 	addw	r1, r4, #343	; 0x157
 8018b22:	aa04      	add	r2, sp, #16
 8018b24:	ad08      	add	r5, sp, #32
            ctx->y[i] ^= work_buf[i];
 8018b26:	f812 3b01 	ldrb.w	r3, [r2], #1
 8018b2a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018b2e:	4043      	eors	r3, r0
 8018b30:	700b      	strb	r3, [r1, #0]
        for( i = 0; i < 16; i++ )
 8018b32:	42aa      	cmp	r2, r5
 8018b34:	d1f7      	bne.n	8018b26 <mbedtls_gcm_starts+0x14a>
        gcm_mult( ctx, ctx->y, ctx->y );
 8018b36:	465a      	mov	r2, fp
 8018b38:	4659      	mov	r1, fp
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	f7ff fdce 	bl	80186dc <gcm_mult>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8018b40:	ab03      	add	r3, sp, #12
 8018b42:	9300      	str	r3, [sp, #0]
 8018b44:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 8018b48:	2210      	movs	r2, #16
 8018b4a:	4659      	mov	r1, fp
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f7fc f9af 	bl	8014eb0 <mbedtls_cipher_update>
 8018b52:	4681      	mov	r9, r0
 8018b54:	2800      	cmp	r0, #0
 8018b56:	d1d9      	bne.n	8018b0c <mbedtls_gcm_starts+0x130>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8018b58:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    while( add_len > 0 )
 8018b62:	2e00      	cmp	r6, #0
 8018b64:	d1b4      	bne.n	8018ad0 <mbedtls_gcm_starts+0xf4>
 8018b66:	e7d1      	b.n	8018b0c <mbedtls_gcm_starts+0x130>

08018b68 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8018b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b6c:	b089      	sub	sp, #36	; 0x24
 8018b6e:	4604      	mov	r4, r0
 8018b70:	460f      	mov	r7, r1
 8018b72:	4690      	mov	r8, r2
 8018b74:	4699      	mov	r9, r3
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8018b76:	2300      	movs	r3, #0
 8018b78:	9303      	str	r3, [sp, #12]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 8018b7a:	4591      	cmp	r9, r2
 8018b7c:	d903      	bls.n	8018b86 <mbedtls_gcm_update+0x1e>
 8018b7e:	eba9 0302 	sub.w	r3, r9, r2
 8018b82:	428b      	cmp	r3, r1
 8018b84:	d367      	bcc.n	8018c56 <mbedtls_gcm_update+0xee>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8018b86:	e9d4 014e 	ldrd	r0, r1, [r4, #312]	; 0x138
 8018b8a:	19c2      	adds	r2, r0, r7
 8018b8c:	f141 0300 	adc.w	r3, r1, #0
 8018b90:	428b      	cmp	r3, r1
 8018b92:	bf08      	it	eq
 8018b94:	4282      	cmpeq	r2, r0
 8018b96:	d361      	bcc.n	8018c5c <mbedtls_gcm_update+0xf4>
 8018b98:	f06f 001f 	mvn.w	r0, #31
 8018b9c:	210f      	movs	r1, #15
 8018b9e:	4299      	cmp	r1, r3
 8018ba0:	bf08      	it	eq
 8018ba2:	4290      	cmpeq	r0, r2
 8018ba4:	d35d      	bcc.n	8018c62 <mbedtls_gcm_update+0xfa>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8018ba6:	e9c4 234e 	strd	r2, r3, [r4, #312]	; 0x138

    p = input;
    while( length > 0 )
 8018baa:	2f00      	cmp	r7, #0
 8018bac:	d05c      	beq.n	8018c68 <mbedtls_gcm_update+0x100>
 8018bae:	46a2      	mov	sl, r4
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8018bb0:	4e34      	ldr	r6, [pc, #208]	; (8018c84 <mbedtls_gcm_update+0x11c>)
 8018bb2:	1b36      	subs	r6, r6, r4
 8018bb4:	e02a      	b.n	8018c0c <mbedtls_gcm_update+0xa4>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
 8018bb6:	f81c eb01 	ldrb.w	lr, [ip], #1
 8018bba:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018bbe:	ea8e 0e00 	eor.w	lr, lr, r0
 8018bc2:	f801 ef01 	strb.w	lr, [r1, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8018bc6:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
 8018bca:	2801      	cmp	r0, #1
 8018bcc:	d00e      	beq.n	8018bec <mbedtls_gcm_update+0x84>
        for( i = 0; i < use_len; i++ )
 8018bce:	3301      	adds	r3, #1
 8018bd0:	18f0      	adds	r0, r6, r3
 8018bd2:	4285      	cmp	r5, r0
 8018bd4:	d910      	bls.n	8018bf8 <mbedtls_gcm_update+0x90>
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8018bd6:	f8d4 0178 	ldr.w	r0, [r4, #376]	; 0x178
 8018bda:	2800      	cmp	r0, #0
 8018bdc:	d1eb      	bne.n	8018bb6 <mbedtls_gcm_update+0x4e>
                ctx->buf[i] ^= p[i];
 8018bde:	7818      	ldrb	r0, [r3, #0]
 8018be0:	f892 e001 	ldrb.w	lr, [r2, #1]
 8018be4:	ea80 000e 	eor.w	r0, r0, lr
 8018be8:	7018      	strb	r0, [r3, #0]
 8018bea:	e7e4      	b.n	8018bb6 <mbedtls_gcm_update+0x4e>
                ctx->buf[i] ^= out_p[i];
 8018bec:	7818      	ldrb	r0, [r3, #0]
 8018bee:	ea8e 0e00 	eor.w	lr, lr, r0
 8018bf2:	f883 e000 	strb.w	lr, [r3]
 8018bf6:	e7ea      	b.n	8018bce <mbedtls_gcm_update+0x66>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8018bf8:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 8018bfc:	460a      	mov	r2, r1
 8018bfe:	4650      	mov	r0, sl
 8018c00:	f7ff fd6c 	bl	80186dc <gcm_mult>

        length -= use_len;
        p += use_len;
 8018c04:	44a8      	add	r8, r5
        out_p += use_len;
 8018c06:	44a9      	add	r9, r5
    while( length > 0 )
 8018c08:	1b7f      	subs	r7, r7, r5
 8018c0a:	d036      	beq.n	8018c7a <mbedtls_gcm_update+0x112>
        use_len = ( length < 16 ) ? length : 16;
 8018c0c:	463d      	mov	r5, r7
 8018c0e:	2f10      	cmp	r7, #16
 8018c10:	bf28      	it	cs
 8018c12:	2510      	movcs	r5, #16
        for( i = 16; i > 12; i-- )
 8018c14:	f204 1267 	addw	r2, r4, #359	; 0x167
 8018c18:	f204 1163 	addw	r1, r4, #355	; 0x163
            if( ++ctx->y[i - 1] != 0 )
 8018c1c:	7813      	ldrb	r3, [r2, #0]
 8018c1e:	3301      	adds	r3, #1
 8018c20:	b2db      	uxtb	r3, r3
 8018c22:	f802 3901 	strb.w	r3, [r2], #-1
 8018c26:	b90b      	cbnz	r3, 8018c2c <mbedtls_gcm_update+0xc4>
        for( i = 16; i > 12; i-- )
 8018c28:	428a      	cmp	r2, r1
 8018c2a:	d1f7      	bne.n	8018c1c <mbedtls_gcm_update+0xb4>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8018c2c:	ab03      	add	r3, sp, #12
 8018c2e:	9300      	str	r3, [sp, #0]
 8018c30:	ab04      	add	r3, sp, #16
 8018c32:	2210      	movs	r2, #16
 8018c34:	f504 71ac 	add.w	r1, r4, #344	; 0x158
 8018c38:	4650      	mov	r0, sl
 8018c3a:	f7fc f939 	bl	8014eb0 <mbedtls_cipher_update>
 8018c3e:	4683      	mov	fp, r0
 8018c40:	b9d8      	cbnz	r0, 8018c7a <mbedtls_gcm_update+0x112>
        for( i = 0; i < use_len; i++ )
 8018c42:	b1a7      	cbz	r7, 8018c6e <mbedtls_gcm_update+0x106>
 8018c44:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8018c48:	f10d 0c10 	add.w	ip, sp, #16
 8018c4c:	f108 32ff 	add.w	r2, r8, #4294967295
 8018c50:	f109 31ff 	add.w	r1, r9, #4294967295
 8018c54:	e7bf      	b.n	8018bd6 <mbedtls_gcm_update+0x6e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8018c56:	f06f 0b13 	mvn.w	fp, #19
 8018c5a:	e00e      	b.n	8018c7a <mbedtls_gcm_update+0x112>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8018c5c:	f06f 0b13 	mvn.w	fp, #19
 8018c60:	e00b      	b.n	8018c7a <mbedtls_gcm_update+0x112>
 8018c62:	f06f 0b13 	mvn.w	fp, #19
 8018c66:	e008      	b.n	8018c7a <mbedtls_gcm_update+0x112>
    }

    return( 0 );
 8018c68:	f04f 0b00 	mov.w	fp, #0
 8018c6c:	e005      	b.n	8018c7a <mbedtls_gcm_update+0x112>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8018c6e:	f504 71b4 	add.w	r1, r4, #360	; 0x168
 8018c72:	460a      	mov	r2, r1
 8018c74:	4620      	mov	r0, r4
 8018c76:	f7ff fd31 	bl	80186dc <gcm_mult>
}
 8018c7a:	4658      	mov	r0, fp
 8018c7c:	b009      	add	sp, #36	; 0x24
 8018c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c82:	bf00      	nop
 8018c84:	fffffe98 	.word	0xfffffe98

08018c88 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8018c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c8c:	b084      	sub	sp, #16
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 8018c8e:	f8d0 6138 	ldr.w	r6, [r0, #312]	; 0x138
 8018c92:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8018c96:	00e4      	lsls	r4, r4, #3
 8018c98:	ea44 7456 	orr.w	r4, r4, r6, lsr #29
    orig_add_len = ctx->add_len * 8;
 8018c9c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8018ca0:	f8d0 5144 	ldr.w	r5, [r0, #324]	; 0x144
 8018ca4:	00ed      	lsls	r5, r5, #3
 8018ca6:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8018caa:	ea4f 0ac3 	mov.w	sl, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
 8018cae:	1f13      	subs	r3, r2, #4
 8018cb0:	2b0c      	cmp	r3, #12
 8018cb2:	d85f      	bhi.n	8018d74 <mbedtls_gcm_finish+0xec>
 8018cb4:	4681      	mov	r9, r0
 8018cb6:	460f      	mov	r7, r1
 8018cb8:	4690      	mov	r8, r2
 8018cba:	00f6      	lsls	r6, r6, #3
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8018cbc:	f500 71a4 	add.w	r1, r0, #328	; 0x148
 8018cc0:	4638      	mov	r0, r7
 8018cc2:	f011 fc3a 	bl	802a53a <memcpy>

    if( orig_len || orig_add_len )
 8018cc6:	ea46 020a 	orr.w	r2, r6, sl
 8018cca:	ea44 0305 	orr.w	r3, r4, r5
 8018cce:	4313      	orrs	r3, r2
 8018cd0:	d053      	beq.n	8018d7a <mbedtls_gcm_finish+0xf2>
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8018cd2:	0e2b      	lsrs	r3, r5, #24
 8018cd4:	f88d 3000 	strb.w	r3, [sp]
 8018cd8:	0c2b      	lsrs	r3, r5, #16
 8018cda:	f88d 3001 	strb.w	r3, [sp, #1]
 8018cde:	0a2b      	lsrs	r3, r5, #8
 8018ce0:	f88d 3002 	strb.w	r3, [sp, #2]
 8018ce4:	f88d 5003 	strb.w	r5, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8018ce8:	ea4f 631a 	mov.w	r3, sl, lsr #24
 8018cec:	f88d 3004 	strb.w	r3, [sp, #4]
 8018cf0:	ea4f 431a 	mov.w	r3, sl, lsr #16
 8018cf4:	f88d 3005 	strb.w	r3, [sp, #5]
 8018cf8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018cfc:	f88d 3006 	strb.w	r3, [sp, #6]
 8018d00:	f88d a007 	strb.w	sl, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8018d04:	0e23      	lsrs	r3, r4, #24
 8018d06:	f88d 3008 	strb.w	r3, [sp, #8]
 8018d0a:	0c23      	lsrs	r3, r4, #16
 8018d0c:	f88d 3009 	strb.w	r3, [sp, #9]
 8018d10:	0a23      	lsrs	r3, r4, #8
 8018d12:	f88d 300a 	strb.w	r3, [sp, #10]
 8018d16:	f88d 400b 	strb.w	r4, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8018d1a:	0e33      	lsrs	r3, r6, #24
 8018d1c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018d20:	0c33      	lsrs	r3, r6, #16
 8018d22:	f88d 300d 	strb.w	r3, [sp, #13]
 8018d26:	0a33      	lsrs	r3, r6, #8
 8018d28:	f88d 300e 	strb.w	r3, [sp, #14]
 8018d2c:	f88d 600f 	strb.w	r6, [sp, #15]

        for( i = 0; i < 16; i++ )
 8018d30:	f209 1667 	addw	r6, r9, #359	; 0x167
 8018d34:	466d      	mov	r5, sp
 8018d36:	a904      	add	r1, sp, #16
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8018d38:	4634      	mov	r4, r6
            ctx->buf[i] ^= work_buf[i];
 8018d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018d3e:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8018d42:	4053      	eors	r3, r2
 8018d44:	7023      	strb	r3, [r4, #0]
        for( i = 0; i < 16; i++ )
 8018d46:	428d      	cmp	r5, r1
 8018d48:	d1f7      	bne.n	8018d3a <mbedtls_gcm_finish+0xb2>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8018d4a:	f509 71b4 	add.w	r1, r9, #360	; 0x168
 8018d4e:	460a      	mov	r2, r1
 8018d50:	4648      	mov	r0, r9
 8018d52:	f7ff fcc3 	bl	80186dc <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 8018d56:	1e7b      	subs	r3, r7, #1
 8018d58:	4447      	add	r7, r8
 8018d5a:	3f01      	subs	r7, #1
            tag[i] ^= ctx->buf[i];
 8018d5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8018d60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018d64:	404a      	eors	r2, r1
 8018d66:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 8018d68:	42bb      	cmp	r3, r7
 8018d6a:	d1f7      	bne.n	8018d5c <mbedtls_gcm_finish+0xd4>
    }

    return( 0 );
 8018d6c:	2000      	movs	r0, #0
}
 8018d6e:	b004      	add	sp, #16
 8018d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8018d74:	f06f 0013 	mvn.w	r0, #19
 8018d78:	e7f9      	b.n	8018d6e <mbedtls_gcm_finish+0xe6>
    return( 0 );
 8018d7a:	2000      	movs	r0, #0
 8018d7c:	e7f7      	b.n	8018d6e <mbedtls_gcm_finish+0xe6>

08018d7e <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8018d7e:	b530      	push	{r4, r5, lr}
 8018d80:	b083      	sub	sp, #12
 8018d82:	4605      	mov	r5, r0
 8018d84:	4614      	mov	r4, r2
 8018d86:	461a      	mov	r2, r3
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8018d88:	9b08      	ldr	r3, [sp, #32]
 8018d8a:	9301      	str	r3, [sp, #4]
 8018d8c:	9b07      	ldr	r3, [sp, #28]
 8018d8e:	9300      	str	r3, [sp, #0]
 8018d90:	9b06      	ldr	r3, [sp, #24]
 8018d92:	f7ff fe23 	bl	80189dc <mbedtls_gcm_starts>
 8018d96:	4603      	mov	r3, r0
 8018d98:	b110      	cbz	r0, 8018da0 <mbedtls_gcm_crypt_and_tag+0x22>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
        return( ret );

    return( 0 );
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	b003      	add	sp, #12
 8018d9e:	bd30      	pop	{r4, r5, pc}
    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8018da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018da4:	4621      	mov	r1, r4
 8018da6:	4628      	mov	r0, r5
 8018da8:	f7ff fede 	bl	8018b68 <mbedtls_gcm_update>
 8018dac:	4603      	mov	r3, r0
 8018dae:	2800      	cmp	r0, #0
 8018db0:	d1f3      	bne.n	8018d9a <mbedtls_gcm_crypt_and_tag+0x1c>
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8018db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018db4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018db6:	4628      	mov	r0, r5
 8018db8:	f7ff ff66 	bl	8018c88 <mbedtls_gcm_finish>
 8018dbc:	4603      	mov	r3, r0
 8018dbe:	e7ec      	b.n	8018d9a <mbedtls_gcm_crypt_and_tag+0x1c>

08018dc0 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8018dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dc2:	b08d      	sub	sp, #52	; 0x34
 8018dc4:	460f      	mov	r7, r1
 8018dc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018dc8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8018dca:	a908      	add	r1, sp, #32
 8018dcc:	9106      	str	r1, [sp, #24]
 8018dce:	9405      	str	r4, [sp, #20]
 8018dd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8018dd2:	9104      	str	r1, [sp, #16]
 8018dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018dd6:	9103      	str	r1, [sp, #12]
 8018dd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018dda:	9102      	str	r1, [sp, #8]
 8018ddc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018dde:	9101      	str	r1, [sp, #4]
 8018de0:	9300      	str	r3, [sp, #0]
 8018de2:	4613      	mov	r3, r2
 8018de4:	463a      	mov	r2, r7
 8018de6:	2100      	movs	r1, #0
 8018de8:	f7ff ffc9 	bl	8018d7e <mbedtls_gcm_crypt_and_tag>
 8018dec:	b968      	cbnz	r0, 8018e0a <mbedtls_gcm_auth_decrypt+0x4a>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8018dee:	b164      	cbz	r4, 8018e0a <mbedtls_gcm_auth_decrypt+0x4a>
 8018df0:	1e6a      	subs	r2, r5, #1
 8018df2:	ae08      	add	r6, sp, #32
 8018df4:	4425      	add	r5, r4
 8018df6:	3d01      	subs	r5, #1
        diff |= tag[i] ^ check_tag[i];
 8018df8:	f816 3b01 	ldrb.w	r3, [r6], #1
 8018dfc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8018e00:	404b      	eors	r3, r1
 8018e02:	4318      	orrs	r0, r3
    for( diff = 0, i = 0; i < tag_len; i++ )
 8018e04:	42aa      	cmp	r2, r5
 8018e06:	d1f7      	bne.n	8018df8 <mbedtls_gcm_auth_decrypt+0x38>

    if( diff != 0 )
 8018e08:	b908      	cbnz	r0, 8018e0e <mbedtls_gcm_auth_decrypt+0x4e>
        mbedtls_platform_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
    }

    return( 0 );
}
 8018e0a:	b00d      	add	sp, #52	; 0x34
 8018e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_platform_zeroize( output, length );
 8018e0e:	4639      	mov	r1, r7
 8018e10:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018e12:	f002 f897 	bl	801af44 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8018e16:	f06f 0011 	mvn.w	r0, #17
 8018e1a:	e7f6      	b.n	8018e0a <mbedtls_gcm_auth_decrypt+0x4a>

08018e1c <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
    if( ctx == NULL )
 8018e1c:	b148      	cbz	r0, 8018e32 <mbedtls_gcm_free+0x16>
{
 8018e1e:	b510      	push	{r4, lr}
 8018e20:	4604      	mov	r4, r0
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8018e22:	f7fb fff7 	bl	8014e14 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8018e26:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f002 f88a 	bl	801af44 <mbedtls_platform_zeroize>
}
 8018e30:	bd10      	pop	{r4, pc}
 8018e32:	4770      	bx	lr

08018e34 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8018e34:	3803      	subs	r0, #3
 8018e36:	2805      	cmp	r0, #5
 8018e38:	d80e      	bhi.n	8018e58 <mbedtls_md_info_from_type+0x24>
 8018e3a:	e8df f000 	tbb	[pc, r0]
 8018e3e:	030f      	.short	0x030f
 8018e40:	0b090705 	.word	0x0b090705
#endif
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_MD_SHA384:
            return( &mbedtls_sha384_info );
        case MBEDTLS_MD_SHA512:
            return( &mbedtls_sha512_info );
 8018e44:	4806      	ldr	r0, [pc, #24]	; (8018e60 <mbedtls_md_info_from_type+0x2c>)
 8018e46:	4770      	bx	lr
            return( &mbedtls_sha224_info );
 8018e48:	4806      	ldr	r0, [pc, #24]	; (8018e64 <mbedtls_md_info_from_type+0x30>)
 8018e4a:	4770      	bx	lr
            return( &mbedtls_sha256_info );
 8018e4c:	4806      	ldr	r0, [pc, #24]	; (8018e68 <mbedtls_md_info_from_type+0x34>)
 8018e4e:	4770      	bx	lr
            return( &mbedtls_sha384_info );
 8018e50:	4806      	ldr	r0, [pc, #24]	; (8018e6c <mbedtls_md_info_from_type+0x38>)
 8018e52:	4770      	bx	lr
            return( &mbedtls_sha512_info );
 8018e54:	4806      	ldr	r0, [pc, #24]	; (8018e70 <mbedtls_md_info_from_type+0x3c>)
 8018e56:	4770      	bx	lr
#endif
        default:
            return( NULL );
 8018e58:	2000      	movs	r0, #0
 8018e5a:	4770      	bx	lr
            return( &mbedtls_md5_info );
 8018e5c:	4805      	ldr	r0, [pc, #20]	; (8018e74 <mbedtls_md_info_from_type+0x40>)
    }
}
 8018e5e:	4770      	bx	lr
 8018e60:	08031d6c 	.word	0x08031d6c
 8018e64:	08031d9c 	.word	0x08031d9c
 8018e68:	08031dcc 	.word	0x08031dcc
 8018e6c:	08031dfc 	.word	0x08031dfc
 8018e70:	08031e2c 	.word	0x08031e2c
 8018e74:	08031d3c 	.word	0x08031d3c

08018e78 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8018e78:	2300      	movs	r3, #0
 8018e7a:	6003      	str	r3, [r0, #0]
 8018e7c:	6043      	str	r3, [r0, #4]
 8018e7e:	6083      	str	r3, [r0, #8]
}
 8018e80:	4770      	bx	lr

08018e82 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8018e82:	b1b0      	cbz	r0, 8018eb2 <mbedtls_md_free+0x30>
{
 8018e84:	b510      	push	{r4, lr}
 8018e86:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL )
 8018e88:	6803      	ldr	r3, [r0, #0]
 8018e8a:	b18b      	cbz	r3, 8018eb0 <mbedtls_md_free+0x2e>
        return;

    if( ctx->md_ctx != NULL )
 8018e8c:	6840      	ldr	r0, [r0, #4]
 8018e8e:	b108      	cbz	r0, 8018e94 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8018e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e92:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8018e94:	68a0      	ldr	r0, [r4, #8]
 8018e96:	b138      	cbz	r0, 8018ea8 <mbedtls_md_free+0x26>
    {
        mbedtls_platform_zeroize( ctx->hmac_ctx,
                                  2 * ctx->md_info->block_size );
 8018e98:	6823      	ldr	r3, [r4, #0]
 8018e9a:	68d9      	ldr	r1, [r3, #12]
        mbedtls_platform_zeroize( ctx->hmac_ctx,
 8018e9c:	0049      	lsls	r1, r1, #1
 8018e9e:	f002 f851 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->hmac_ctx );
 8018ea2:	68a0      	ldr	r0, [r4, #8]
 8018ea4:	f010 f800 	bl	8028ea8 <mbedtls_free>
    }

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
 8018ea8:	210c      	movs	r1, #12
 8018eaa:	4620      	mov	r0, r4
 8018eac:	f002 f84a 	bl	801af44 <mbedtls_platform_zeroize>
}
 8018eb0:	bd10      	pop	{r4, pc}
 8018eb2:	4770      	bx	lr

08018eb4 <mbedtls_md_setup>:
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
 8018eb4:	b1c1      	cbz	r1, 8018ee8 <mbedtls_md_setup+0x34>
{
 8018eb6:	b570      	push	{r4, r5, r6, lr}
 8018eb8:	4604      	mov	r4, r0
 8018eba:	4615      	mov	r5, r2
 8018ebc:	460e      	mov	r6, r1
    if( md_info == NULL || ctx == NULL )
 8018ebe:	b1a8      	cbz	r0, 8018eec <mbedtls_md_setup+0x38>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8018ec0:	6a0b      	ldr	r3, [r1, #32]
 8018ec2:	4798      	blx	r3
 8018ec4:	6060      	str	r0, [r4, #4]
 8018ec6:	b198      	cbz	r0, 8018ef0 <mbedtls_md_setup+0x3c>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8018ec8:	b915      	cbnz	r5, 8018ed0 <mbedtls_md_setup+0x1c>
            md_info->ctx_free_func( ctx->md_ctx );
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8018eca:	6026      	str	r6, [r4, #0]

    return( 0 );
 8018ecc:	2000      	movs	r0, #0
}
 8018ece:	bd70      	pop	{r4, r5, r6, pc}
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8018ed0:	68f1      	ldr	r1, [r6, #12]
 8018ed2:	2002      	movs	r0, #2
 8018ed4:	f00f ffda 	bl	8028e8c <mbedtls_calloc>
 8018ed8:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d1f5      	bne.n	8018eca <mbedtls_md_setup+0x16>
            md_info->ctx_free_func( ctx->md_ctx );
 8018ede:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018ee0:	6860      	ldr	r0, [r4, #4]
 8018ee2:	4798      	blx	r3
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8018ee4:	4803      	ldr	r0, [pc, #12]	; (8018ef4 <mbedtls_md_setup+0x40>)
 8018ee6:	e7f2      	b.n	8018ece <mbedtls_md_setup+0x1a>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018ee8:	4803      	ldr	r0, [pc, #12]	; (8018ef8 <mbedtls_md_setup+0x44>)
}
 8018eea:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018eec:	4802      	ldr	r0, [pc, #8]	; (8018ef8 <mbedtls_md_setup+0x44>)
 8018eee:	e7ee      	b.n	8018ece <mbedtls_md_setup+0x1a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8018ef0:	4800      	ldr	r0, [pc, #0]	; (8018ef4 <mbedtls_md_setup+0x40>)
 8018ef2:	e7ec      	b.n	8018ece <mbedtls_md_setup+0x1a>
 8018ef4:	ffffae80 	.word	0xffffae80
 8018ef8:	ffffaf00 	.word	0xffffaf00

08018efc <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8018efc:	b130      	cbz	r0, 8018f0c <mbedtls_md_starts+0x10>
{
 8018efe:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8018f00:	6802      	ldr	r2, [r0, #0]
 8018f02:	b12a      	cbz	r2, 8018f10 <mbedtls_md_starts+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 8018f04:	6912      	ldr	r2, [r2, #16]
 8018f06:	6840      	ldr	r0, [r0, #4]
 8018f08:	4790      	blx	r2
}
 8018f0a:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f0c:	4801      	ldr	r0, [pc, #4]	; (8018f14 <mbedtls_md_starts+0x18>)
}
 8018f0e:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f10:	4800      	ldr	r0, [pc, #0]	; (8018f14 <mbedtls_md_starts+0x18>)
 8018f12:	e7fa      	b.n	8018f0a <mbedtls_md_starts+0xe>
 8018f14:	ffffaf00 	.word	0xffffaf00

08018f18 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8018f18:	b138      	cbz	r0, 8018f2a <mbedtls_md_update+0x12>
 8018f1a:	4603      	mov	r3, r0
 8018f1c:	6800      	ldr	r0, [r0, #0]
 8018f1e:	b130      	cbz	r0, 8018f2e <mbedtls_md_update+0x16>
{
 8018f20:	b510      	push	{r4, lr}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8018f22:	6944      	ldr	r4, [r0, #20]
 8018f24:	6858      	ldr	r0, [r3, #4]
 8018f26:	47a0      	blx	r4
}
 8018f28:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f2a:	4802      	ldr	r0, [pc, #8]	; (8018f34 <mbedtls_md_update+0x1c>)
 8018f2c:	4770      	bx	lr
 8018f2e:	4801      	ldr	r0, [pc, #4]	; (8018f34 <mbedtls_md_update+0x1c>)
}
 8018f30:	4770      	bx	lr
 8018f32:	bf00      	nop
 8018f34:	ffffaf00 	.word	0xffffaf00

08018f38 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8018f38:	b130      	cbz	r0, 8018f48 <mbedtls_md_finish+0x10>
{
 8018f3a:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8018f3c:	6802      	ldr	r2, [r0, #0]
 8018f3e:	b12a      	cbz	r2, 8018f4c <mbedtls_md_finish+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8018f40:	6992      	ldr	r2, [r2, #24]
 8018f42:	6840      	ldr	r0, [r0, #4]
 8018f44:	4790      	blx	r2
}
 8018f46:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f48:	4801      	ldr	r0, [pc, #4]	; (8018f50 <mbedtls_md_finish+0x18>)
}
 8018f4a:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f4c:	4800      	ldr	r0, [pc, #0]	; (8018f50 <mbedtls_md_finish+0x18>)
 8018f4e:	e7fa      	b.n	8018f46 <mbedtls_md_finish+0xe>
 8018f50:	ffffaf00 	.word	0xffffaf00

08018f54 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8018f54:	b510      	push	{r4, lr}
 8018f56:	4604      	mov	r4, r0
    if( md_info == NULL )
 8018f58:	b128      	cbz	r0, 8018f66 <mbedtls_md+0x12>
 8018f5a:	4608      	mov	r0, r1
 8018f5c:	4611      	mov	r1, r2
 8018f5e:	461a      	mov	r2, r3
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8018f60:	69e3      	ldr	r3, [r4, #28]
 8018f62:	4798      	blx	r3
}
 8018f64:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8018f66:	4801      	ldr	r0, [pc, #4]	; (8018f6c <mbedtls_md+0x18>)
 8018f68:	e7fc      	b.n	8018f64 <mbedtls_md+0x10>
 8018f6a:	bf00      	nop
 8018f6c:	ffffaf00 	.word	0xffffaf00

08018f70 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8018f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f74:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8018f76:	2800      	cmp	r0, #0
 8018f78:	d05e      	beq.n	8019038 <mbedtls_md_hmac_starts+0xc8>
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	4690      	mov	r8, r2
 8018f7e:	4605      	mov	r5, r0
 8018f80:	6803      	ldr	r3, [r0, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d05a      	beq.n	801903c <mbedtls_md_hmac_starts+0xcc>
 8018f86:	6882      	ldr	r2, [r0, #8]
 8018f88:	2a00      	cmp	r2, #0
 8018f8a:	d059      	beq.n	8019040 <mbedtls_md_hmac_starts+0xd0>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8018f8c:	68da      	ldr	r2, [r3, #12]
 8018f8e:	4542      	cmp	r2, r8
 8018f90:	d21a      	bcs.n	8018fc8 <mbedtls_md_hmac_starts+0x58>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8018f92:	691b      	ldr	r3, [r3, #16]
 8018f94:	6840      	ldr	r0, [r0, #4]
 8018f96:	4798      	blx	r3
 8018f98:	4607      	mov	r7, r0
 8018f9a:	2800      	cmp	r0, #0
 8018f9c:	d144      	bne.n	8019028 <mbedtls_md_hmac_starts+0xb8>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8018f9e:	682b      	ldr	r3, [r5, #0]
 8018fa0:	695b      	ldr	r3, [r3, #20]
 8018fa2:	4642      	mov	r2, r8
 8018fa4:	4621      	mov	r1, r4
 8018fa6:	6868      	ldr	r0, [r5, #4]
 8018fa8:	4798      	blx	r3
 8018faa:	4607      	mov	r7, r0
 8018fac:	2800      	cmp	r0, #0
 8018fae:	d13b      	bne.n	8019028 <mbedtls_md_hmac_starts+0xb8>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8018fb0:	682b      	ldr	r3, [r5, #0]
 8018fb2:	699b      	ldr	r3, [r3, #24]
 8018fb4:	4669      	mov	r1, sp
 8018fb6:	6868      	ldr	r0, [r5, #4]
 8018fb8:	4798      	blx	r3
 8018fba:	4607      	mov	r7, r0
 8018fbc:	2800      	cmp	r0, #0
 8018fbe:	d133      	bne.n	8019028 <mbedtls_md_hmac_starts+0xb8>
            goto cleanup;

        keylen = ctx->md_info->size;
 8018fc0:	682b      	ldr	r3, [r5, #0]
 8018fc2:	f8d3 8008 	ldr.w	r8, [r3, #8]
        key = sum;
 8018fc6:	466c      	mov	r4, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 8018fc8:	68ae      	ldr	r6, [r5, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8018fca:	682b      	ldr	r3, [r5, #0]
 8018fcc:	68da      	ldr	r2, [r3, #12]
 8018fce:	18b7      	adds	r7, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8018fd0:	2136      	movs	r1, #54	; 0x36
 8018fd2:	4630      	mov	r0, r6
 8018fd4:	f011 fad9 	bl	802a58a <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8018fd8:	682b      	ldr	r3, [r5, #0]
 8018fda:	68da      	ldr	r2, [r3, #12]
 8018fdc:	215c      	movs	r1, #92	; 0x5c
 8018fde:	4638      	mov	r0, r7
 8018fe0:	f011 fad3 	bl	802a58a <memset>

    for( i = 0; i < keylen; i++ )
 8018fe4:	f1b8 0f00 	cmp.w	r8, #0
 8018fe8:	d011      	beq.n	801900e <mbedtls_md_hmac_starts+0x9e>
 8018fea:	1e73      	subs	r3, r6, #1
 8018fec:	1e61      	subs	r1, r4, #1
 8018fee:	1e78      	subs	r0, r7, #1
 8018ff0:	eb03 0208 	add.w	r2, r3, r8
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8018ff4:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8018ff8:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 8018ffc:	407c      	eors	r4, r7
 8018ffe:	701c      	strb	r4, [r3, #0]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8019000:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8019004:	780f      	ldrb	r7, [r1, #0]
 8019006:	407c      	eors	r4, r7
 8019008:	7004      	strb	r4, [r0, #0]
    for( i = 0; i < keylen; i++ )
 801900a:	4293      	cmp	r3, r2
 801900c:	d1f2      	bne.n	8018ff4 <mbedtls_md_hmac_starts+0x84>
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 801900e:	682b      	ldr	r3, [r5, #0]
 8019010:	691b      	ldr	r3, [r3, #16]
 8019012:	6868      	ldr	r0, [r5, #4]
 8019014:	4798      	blx	r3
 8019016:	4607      	mov	r7, r0
 8019018:	b930      	cbnz	r0, 8019028 <mbedtls_md_hmac_starts+0xb8>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 801901a:	682b      	ldr	r3, [r5, #0]
 801901c:	695c      	ldr	r4, [r3, #20]
 801901e:	68da      	ldr	r2, [r3, #12]
 8019020:	4631      	mov	r1, r6
 8019022:	6868      	ldr	r0, [r5, #4]
 8019024:	47a0      	blx	r4
 8019026:	4607      	mov	r7, r0
                                           ctx->md_info->block_size ) ) != 0 )
        goto cleanup;

cleanup:
    mbedtls_platform_zeroize( sum, sizeof( sum ) );
 8019028:	2140      	movs	r1, #64	; 0x40
 801902a:	4668      	mov	r0, sp
 801902c:	f001 ff8a 	bl	801af44 <mbedtls_platform_zeroize>

    return( ret );
}
 8019030:	4638      	mov	r0, r7
 8019032:	b010      	add	sp, #64	; 0x40
 8019034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8019038:	4f02      	ldr	r7, [pc, #8]	; (8019044 <mbedtls_md_hmac_starts+0xd4>)
 801903a:	e7f9      	b.n	8019030 <mbedtls_md_hmac_starts+0xc0>
 801903c:	4f01      	ldr	r7, [pc, #4]	; (8019044 <mbedtls_md_hmac_starts+0xd4>)
 801903e:	e7f7      	b.n	8019030 <mbedtls_md_hmac_starts+0xc0>
 8019040:	4f00      	ldr	r7, [pc, #0]	; (8019044 <mbedtls_md_hmac_starts+0xd4>)
 8019042:	e7f5      	b.n	8019030 <mbedtls_md_hmac_starts+0xc0>
 8019044:	ffffaf00 	.word	0xffffaf00

08019048 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8019048:	b148      	cbz	r0, 801905e <mbedtls_md_hmac_update+0x16>
 801904a:	4603      	mov	r3, r0
 801904c:	6800      	ldr	r0, [r0, #0]
 801904e:	b140      	cbz	r0, 8019062 <mbedtls_md_hmac_update+0x1a>
{
 8019050:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8019052:	689c      	ldr	r4, [r3, #8]
 8019054:	b13c      	cbz	r4, 8019066 <mbedtls_md_hmac_update+0x1e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8019056:	6944      	ldr	r4, [r0, #20]
 8019058:	6858      	ldr	r0, [r3, #4]
 801905a:	47a0      	blx	r4
}
 801905c:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801905e:	4803      	ldr	r0, [pc, #12]	; (801906c <mbedtls_md_hmac_update+0x24>)
 8019060:	4770      	bx	lr
 8019062:	4802      	ldr	r0, [pc, #8]	; (801906c <mbedtls_md_hmac_update+0x24>)
}
 8019064:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8019066:	4801      	ldr	r0, [pc, #4]	; (801906c <mbedtls_md_hmac_update+0x24>)
 8019068:	e7f8      	b.n	801905c <mbedtls_md_hmac_update+0x14>
 801906a:	bf00      	nop
 801906c:	ffffaf00 	.word	0xffffaf00

08019070 <mbedtls_md_hmac_finish>:
{
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8019070:	2800      	cmp	r0, #0
 8019072:	d032      	beq.n	80190da <mbedtls_md_hmac_finish+0x6a>
{
 8019074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019078:	b090      	sub	sp, #64	; 0x40
 801907a:	460e      	mov	r6, r1
 801907c:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801907e:	6803      	ldr	r3, [r0, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d02d      	beq.n	80190e0 <mbedtls_md_hmac_finish+0x70>
 8019084:	6885      	ldr	r5, [r0, #8]
 8019086:	2d00      	cmp	r5, #0
 8019088:	d02c      	beq.n	80190e4 <mbedtls_md_hmac_finish+0x74>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 801908a:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 801908c:	699b      	ldr	r3, [r3, #24]
 801908e:	4669      	mov	r1, sp
 8019090:	6840      	ldr	r0, [r0, #4]
 8019092:	4798      	blx	r3
 8019094:	4603      	mov	r3, r0
 8019096:	b9e0      	cbnz	r0, 80190d2 <mbedtls_md_hmac_finish+0x62>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	691b      	ldr	r3, [r3, #16]
 801909c:	6860      	ldr	r0, [r4, #4]
 801909e:	4798      	blx	r3
 80190a0:	4603      	mov	r3, r0
 80190a2:	b9b0      	cbnz	r0, 80190d2 <mbedtls_md_hmac_finish+0x62>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80190a4:	6823      	ldr	r3, [r4, #0]
 80190a6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80190aa:	68da      	ldr	r2, [r3, #12]
 80190ac:	19e9      	adds	r1, r5, r7
 80190ae:	6860      	ldr	r0, [r4, #4]
 80190b0:	47c0      	blx	r8
 80190b2:	4603      	mov	r3, r0
 80190b4:	b968      	cbnz	r0, 80190d2 <mbedtls_md_hmac_finish+0x62>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80190b6:	6823      	ldr	r3, [r4, #0]
 80190b8:	695d      	ldr	r5, [r3, #20]
 80190ba:	689a      	ldr	r2, [r3, #8]
 80190bc:	4669      	mov	r1, sp
 80190be:	6860      	ldr	r0, [r4, #4]
 80190c0:	47a8      	blx	r5
 80190c2:	4603      	mov	r3, r0
 80190c4:	b928      	cbnz	r0, 80190d2 <mbedtls_md_hmac_finish+0x62>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80190c6:	6823      	ldr	r3, [r4, #0]
 80190c8:	699b      	ldr	r3, [r3, #24]
 80190ca:	4631      	mov	r1, r6
 80190cc:	6860      	ldr	r0, [r4, #4]
 80190ce:	4798      	blx	r3
 80190d0:	4603      	mov	r3, r0
}
 80190d2:	4618      	mov	r0, r3
 80190d4:	b010      	add	sp, #64	; 0x40
 80190d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80190da:	4b03      	ldr	r3, [pc, #12]	; (80190e8 <mbedtls_md_hmac_finish+0x78>)
}
 80190dc:	4618      	mov	r0, r3
 80190de:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80190e0:	4b01      	ldr	r3, [pc, #4]	; (80190e8 <mbedtls_md_hmac_finish+0x78>)
 80190e2:	e7f6      	b.n	80190d2 <mbedtls_md_hmac_finish+0x62>
 80190e4:	4b00      	ldr	r3, [pc, #0]	; (80190e8 <mbedtls_md_hmac_finish+0x78>)
 80190e6:	e7f4      	b.n	80190d2 <mbedtls_md_hmac_finish+0x62>
 80190e8:	ffffaf00 	.word	0xffffaf00

080190ec <mbedtls_md_hmac_reset>:
int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80190ec:	b180      	cbz	r0, 8019110 <mbedtls_md_hmac_reset+0x24>
{
 80190ee:	b570      	push	{r4, r5, r6, lr}
 80190f0:	4604      	mov	r4, r0
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80190f2:	6803      	ldr	r3, [r0, #0]
 80190f4:	b173      	cbz	r3, 8019114 <mbedtls_md_hmac_reset+0x28>
 80190f6:	6885      	ldr	r5, [r0, #8]
 80190f8:	b175      	cbz	r5, 8019118 <mbedtls_md_hmac_reset+0x2c>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80190fa:	691b      	ldr	r3, [r3, #16]
 80190fc:	6840      	ldr	r0, [r0, #4]
 80190fe:	4798      	blx	r3
 8019100:	b928      	cbnz	r0, 801910e <mbedtls_md_hmac_reset+0x22>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8019102:	6823      	ldr	r3, [r4, #0]
 8019104:	695e      	ldr	r6, [r3, #20]
 8019106:	68da      	ldr	r2, [r3, #12]
 8019108:	4629      	mov	r1, r5
 801910a:	6860      	ldr	r0, [r4, #4]
 801910c:	47b0      	blx	r6
                                       ctx->md_info->block_size ) );
}
 801910e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8019110:	4802      	ldr	r0, [pc, #8]	; (801911c <mbedtls_md_hmac_reset+0x30>)
}
 8019112:	4770      	bx	lr
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8019114:	4801      	ldr	r0, [pc, #4]	; (801911c <mbedtls_md_hmac_reset+0x30>)
 8019116:	e7fa      	b.n	801910e <mbedtls_md_hmac_reset+0x22>
 8019118:	4800      	ldr	r0, [pc, #0]	; (801911c <mbedtls_md_hmac_reset+0x30>)
 801911a:	e7f8      	b.n	801910e <mbedtls_md_hmac_reset+0x22>
 801911c:	ffffaf00 	.word	0xffffaf00

08019120 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8019120:	b108      	cbz	r0, 8019126 <mbedtls_md_get_size+0x6>
        return( 0 );

    return md_info->size;
 8019122:	7a00      	ldrb	r0, [r0, #8]
 8019124:	4770      	bx	lr
        return( 0 );
 8019126:	2000      	movs	r0, #0
}
 8019128:	4770      	bx	lr

0801912a <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 801912a:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 801912c:	2258      	movs	r2, #88	; 0x58
 801912e:	2100      	movs	r1, #0
 8019130:	f011 fa2b 	bl	802a58a <memset>
}
 8019134:	bd08      	pop	{r3, pc}

08019136 <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 8019136:	b120      	cbz	r0, 8019142 <mbedtls_md5_free+0xc>
{
 8019138:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 801913a:	2158      	movs	r1, #88	; 0x58
 801913c:	f001 ff02 	bl	801af44 <mbedtls_platform_zeroize>
}
 8019140:	bd08      	pop	{r3, pc}
 8019142:	4770      	bx	lr

08019144 <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 8019144:	b508      	push	{r3, lr}
    *dst = *src;
 8019146:	2258      	movs	r2, #88	; 0x58
 8019148:	f011 f9f7 	bl	802a53a <memcpy>
}
 801914c:	bd08      	pop	{r3, pc}
	...

08019150 <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 8019150:	4603      	mov	r3, r0
    ctx->total[0] = 0;
 8019152:	2000      	movs	r0, #0
 8019154:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 8019156:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
 8019158:	4a07      	ldr	r2, [pc, #28]	; (8019178 <mbedtls_md5_starts_ret+0x28>)
 801915a:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 801915c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8019160:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8019162:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8019166:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 801916a:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 801916e:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8019170:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8019174:	615a      	str	r2, [r3, #20]

    return( 0 );
}
 8019176:	4770      	bx	lr
 8019178:	67452301 	.word	0x67452301

0801917c <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 801917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019180:	b08d      	sub	sp, #52	; 0x34
 8019182:	4686      	mov	lr, r0
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 8019184:	784b      	ldrb	r3, [r1, #1]
 8019186:	788e      	ldrb	r6, [r1, #2]
 8019188:	0436      	lsls	r6, r6, #16
 801918a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 801918e:	780b      	ldrb	r3, [r1, #0]
 8019190:	431e      	orrs	r6, r3
 8019192:	78cb      	ldrb	r3, [r1, #3]
 8019194:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
    GET_UINT32_LE( X[ 1], data,  4 );
 8019198:	794a      	ldrb	r2, [r1, #5]
 801919a:	798b      	ldrb	r3, [r1, #6]
 801919c:	041b      	lsls	r3, r3, #16
 801919e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80191a2:	790a      	ldrb	r2, [r1, #4]
 80191a4:	4313      	orrs	r3, r2
 80191a6:	79ca      	ldrb	r2, [r1, #7]
 80191a8:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
    GET_UINT32_LE( X[ 2], data,  8 );
 80191ac:	7a4a      	ldrb	r2, [r1, #9]
 80191ae:	7a8b      	ldrb	r3, [r1, #10]
 80191b0:	041b      	lsls	r3, r3, #16
 80191b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80191b6:	7a0a      	ldrb	r2, [r1, #8]
 80191b8:	4313      	orrs	r3, r2
 80191ba:	7aca      	ldrb	r2, [r1, #11]
 80191bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80191c0:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X[ 3], data, 12 );
 80191c2:	7b4a      	ldrb	r2, [r1, #13]
 80191c4:	7b8b      	ldrb	r3, [r1, #14]
 80191c6:	041b      	lsls	r3, r3, #16
 80191c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80191cc:	7b0a      	ldrb	r2, [r1, #12]
 80191ce:	4313      	orrs	r3, r2
 80191d0:	7bca      	ldrb	r2, [r1, #15]
 80191d2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80191d6:	9202      	str	r2, [sp, #8]
    GET_UINT32_LE( X[ 4], data, 16 );
 80191d8:	7c4a      	ldrb	r2, [r1, #17]
 80191da:	7c8b      	ldrb	r3, [r1, #18]
 80191dc:	041b      	lsls	r3, r3, #16
 80191de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80191e2:	7c0a      	ldrb	r2, [r1, #16]
 80191e4:	4313      	orrs	r3, r2
 80191e6:	7cca      	ldrb	r2, [r1, #19]
 80191e8:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 80191ec:	9003      	str	r0, [sp, #12]
    GET_UINT32_LE( X[ 5], data, 20 );
 80191ee:	7d4b      	ldrb	r3, [r1, #21]
 80191f0:	7d8c      	ldrb	r4, [r1, #22]
 80191f2:	0424      	lsls	r4, r4, #16
 80191f4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80191f8:	7d0b      	ldrb	r3, [r1, #20]
 80191fa:	431c      	orrs	r4, r3
 80191fc:	7dcb      	ldrb	r3, [r1, #23]
 80191fe:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8019202:	9404      	str	r4, [sp, #16]
    GET_UINT32_LE( X[ 6], data, 24 );
 8019204:	7e4a      	ldrb	r2, [r1, #25]
 8019206:	7e8b      	ldrb	r3, [r1, #26]
 8019208:	041b      	lsls	r3, r3, #16
 801920a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801920e:	7e0a      	ldrb	r2, [r1, #24]
 8019210:	4313      	orrs	r3, r2
 8019212:	7eca      	ldrb	r2, [r1, #27]
 8019214:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
 8019218:	9505      	str	r5, [sp, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
 801921a:	7f4b      	ldrb	r3, [r1, #29]
 801921c:	7f8d      	ldrb	r5, [r1, #30]
 801921e:	042d      	lsls	r5, r5, #16
 8019220:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8019224:	7f0b      	ldrb	r3, [r1, #28]
 8019226:	431d      	orrs	r5, r3
 8019228:	7fcb      	ldrb	r3, [r1, #31]
 801922a:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    GET_UINT32_LE( X[ 8], data, 32 );
 801922e:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
 8019232:	f891 3022 	ldrb.w	r3, [r1, #34]	; 0x22
 8019236:	041b      	lsls	r3, r3, #16
 8019238:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801923c:	f891 2020 	ldrb.w	r2, [r1, #32]
 8019240:	4313      	orrs	r3, r2
 8019242:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
 8019246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801924a:	9306      	str	r3, [sp, #24]
    GET_UINT32_LE( X[ 9], data, 36 );
 801924c:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8019250:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019254:	041b      	lsls	r3, r3, #16
 8019256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801925a:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 801925e:	4313      	orrs	r3, r2
 8019260:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8019264:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8019268:	9207      	str	r2, [sp, #28]
    GET_UINT32_LE( X[10], data, 40 );
 801926a:	f891 2029 	ldrb.w	r2, [r1, #41]	; 0x29
 801926e:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8019272:	041b      	lsls	r3, r3, #16
 8019274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019278:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 801927c:	4313      	orrs	r3, r2
 801927e:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8019282:	ea43 6002 	orr.w	r0, r3, r2, lsl #24
 8019286:	9008      	str	r0, [sp, #32]
    GET_UINT32_LE( X[11], data, 44 );
 8019288:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
 801928c:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 8019290:	041b      	lsls	r3, r3, #16
 8019292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019296:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 801929a:	4313      	orrs	r3, r2
 801929c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
 80192a0:	ea43 6c02 	orr.w	ip, r3, r2, lsl #24
 80192a4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    GET_UINT32_LE( X[12], data, 48 );
 80192a8:	f891 9031 	ldrb.w	r9, [r1, #49]	; 0x31
 80192ac:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80192b0:	041b      	lsls	r3, r3, #16
 80192b2:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80192b6:	f891 9030 	ldrb.w	r9, [r1, #48]	; 0x30
 80192ba:	ea43 0909 	orr.w	r9, r3, r9
 80192be:	f891 3033 	ldrb.w	r3, [r1, #51]	; 0x33
 80192c2:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    GET_UINT32_LE( X[13], data, 52 );
 80192c6:	f891 2035 	ldrb.w	r2, [r1, #53]	; 0x35
 80192ca:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 80192ce:	041b      	lsls	r3, r3, #16
 80192d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80192d4:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
 80192d8:	4313      	orrs	r3, r2
 80192da:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
 80192de:	ea43 6c02 	orr.w	ip, r3, r2, lsl #24
 80192e2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    GET_UINT32_LE( X[14], data, 56 );
 80192e6:	f891 a039 	ldrb.w	sl, [r1, #57]	; 0x39
 80192ea:	f891 303a 	ldrb.w	r3, [r1, #58]	; 0x3a
 80192ee:	041b      	lsls	r3, r3, #16
 80192f0:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
 80192f4:	f891 a038 	ldrb.w	sl, [r1, #56]	; 0x38
 80192f8:	ea43 0a0a 	orr.w	sl, r3, sl
 80192fc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8019300:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    GET_UINT32_LE( X[15], data, 60 );
 8019304:	f891 803d 	ldrb.w	r8, [r1, #61]	; 0x3d
 8019308:	f891 303e 	ldrb.w	r3, [r1, #62]	; 0x3e
 801930c:	041b      	lsls	r3, r3, #16
 801930e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8019312:	f891 803c 	ldrb.w	r8, [r1, #60]	; 0x3c
 8019316:	ea43 0808 	orr.w	r8, r3, r8
 801931a:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
 801931e:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
    B = ctx->state[1];
 8019322:	f8de 000c 	ldr.w	r0, [lr, #12]
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8019326:	f8de 1010 	ldr.w	r1, [lr, #16]
 801932a:	468c      	mov	ip, r1
 801932c:	f8de 1014 	ldr.w	r1, [lr, #20]
 8019330:	ea8c 0301 	eor.w	r3, ip, r1
 8019334:	4003      	ands	r3, r0
 8019336:	404b      	eors	r3, r1
 8019338:	4aea      	ldr	r2, [pc, #936]	; (80196e4 <mbedtls_internal_md5_process+0x568>)
 801933a:	f8de 1008 	ldr.w	r1, [lr, #8]
 801933e:	440a      	add	r2, r1
 8019340:	4413      	add	r3, r2
 8019342:	4433      	add	r3, r6
 8019344:	eb00 6373 	add.w	r3, r0, r3, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8019348:	4ae7      	ldr	r2, [pc, #924]	; (80196e8 <mbedtls_internal_md5_process+0x56c>)
 801934a:	f8de 1014 	ldr.w	r1, [lr, #20]
 801934e:	440a      	add	r2, r1
 8019350:	970b      	str	r7, [sp, #44]	; 0x2c
 8019352:	443a      	add	r2, r7
 8019354:	ea80 010c 	eor.w	r1, r0, ip
 8019358:	4019      	ands	r1, r3
 801935a:	4667      	mov	r7, ip
 801935c:	4079      	eors	r1, r7
 801935e:	4411      	add	r1, r2
 8019360:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  2, 17, 0x242070DB );
 8019364:	4ae1      	ldr	r2, [pc, #900]	; (80196ec <mbedtls_internal_md5_process+0x570>)
 8019366:	4462      	add	r2, ip
 8019368:	9c01      	ldr	r4, [sp, #4]
 801936a:	4422      	add	r2, r4
 801936c:	ea80 0703 	eor.w	r7, r0, r3
 8019370:	400f      	ands	r7, r1
 8019372:	4047      	eors	r7, r0
 8019374:	4417      	add	r7, r2
 8019376:	eb01 37f7 	add.w	r7, r1, r7, ror #15
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 801937a:	4add      	ldr	r2, [pc, #884]	; (80196f0 <mbedtls_internal_md5_process+0x574>)
 801937c:	4402      	add	r2, r0
 801937e:	9c02      	ldr	r4, [sp, #8]
 8019380:	eb02 0c04 	add.w	ip, r2, r4
 8019384:	ea83 0201 	eor.w	r2, r3, r1
 8019388:	403a      	ands	r2, r7
 801938a:	405a      	eors	r2, r3
 801938c:	4462      	add	r2, ip
 801938e:	eb07 22b2 	add.w	r2, r7, r2, ror #10
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8019392:	f8df c378 	ldr.w	ip, [pc, #888]	; 801970c <mbedtls_internal_md5_process+0x590>
 8019396:	9c03      	ldr	r4, [sp, #12]
 8019398:	44a4      	add	ip, r4
 801939a:	449c      	add	ip, r3
 801939c:	ea81 0307 	eor.w	r3, r1, r7
 80193a0:	4013      	ands	r3, r2
 80193a2:	404b      	eors	r3, r1
 80193a4:	4463      	add	r3, ip
 80193a6:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  5, 12, 0x4787C62A );
 80193aa:	f8df c364 	ldr.w	ip, [pc, #868]	; 8019710 <mbedtls_internal_md5_process+0x594>
 80193ae:	9c04      	ldr	r4, [sp, #16]
 80193b0:	44a4      	add	ip, r4
 80193b2:	448c      	add	ip, r1
 80193b4:	ea87 0102 	eor.w	r1, r7, r2
 80193b8:	4019      	ands	r1, r3
 80193ba:	4079      	eors	r1, r7
 80193bc:	4461      	add	r1, ip
 80193be:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  6, 17, 0xA8304613 );
 80193c2:	f8df c350 	ldr.w	ip, [pc, #848]	; 8019714 <mbedtls_internal_md5_process+0x598>
 80193c6:	9c05      	ldr	r4, [sp, #20]
 80193c8:	44a4      	add	ip, r4
 80193ca:	44bc      	add	ip, r7
 80193cc:	ea82 0703 	eor.w	r7, r2, r3
 80193d0:	400f      	ands	r7, r1
 80193d2:	4057      	eors	r7, r2
 80193d4:	4467      	add	r7, ip
 80193d6:	eb01 37f7 	add.w	r7, r1, r7, ror #15
    P( B, C, D, A,  7, 22, 0xFD469501 );
 80193da:	f8df c33c 	ldr.w	ip, [pc, #828]	; 8019718 <mbedtls_internal_md5_process+0x59c>
 80193de:	44ac      	add	ip, r5
 80193e0:	4494      	add	ip, r2
 80193e2:	ea83 0201 	eor.w	r2, r3, r1
 80193e6:	403a      	ands	r2, r7
 80193e8:	405a      	eors	r2, r3
 80193ea:	4462      	add	r2, ip
 80193ec:	eb07 22b2 	add.w	r2, r7, r2, ror #10
    P( A, B, C, D,  8,  7, 0x698098D8 );
 80193f0:	f8df c328 	ldr.w	ip, [pc, #808]	; 801971c <mbedtls_internal_md5_process+0x5a0>
 80193f4:	9c06      	ldr	r4, [sp, #24]
 80193f6:	44a4      	add	ip, r4
 80193f8:	4463      	add	r3, ip
 80193fa:	ea81 0c07 	eor.w	ip, r1, r7
 80193fe:	ea0c 0c02 	and.w	ip, ip, r2
 8019402:	ea8c 0c01 	eor.w	ip, ip, r1
 8019406:	4463      	add	r3, ip
 8019408:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 801940c:	f8df c310 	ldr.w	ip, [pc, #784]	; 8019720 <mbedtls_internal_md5_process+0x5a4>
 8019410:	9c07      	ldr	r4, [sp, #28]
 8019412:	44a4      	add	ip, r4
 8019414:	448c      	add	ip, r1
 8019416:	ea87 0102 	eor.w	r1, r7, r2
 801941a:	4019      	ands	r1, r3
 801941c:	4079      	eors	r1, r7
 801941e:	4461      	add	r1, ip
 8019420:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8019424:	9c08      	ldr	r4, [sp, #32]
 8019426:	f5a4 4c24 	sub.w	ip, r4, #41984	; 0xa400
 801942a:	f1ac 0c4f 	sub.w	ip, ip, #79	; 0x4f
 801942e:	44bc      	add	ip, r7
 8019430:	ea82 0703 	eor.w	r7, r2, r3
 8019434:	400f      	ands	r7, r1
 8019436:	4057      	eors	r7, r2
 8019438:	4467      	add	r7, ip
 801943a:	eb01 37f7 	add.w	r7, r1, r7, ror #15
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 801943e:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 8019724 <mbedtls_internal_md5_process+0x5a8>
 8019442:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019444:	44a4      	add	ip, r4
 8019446:	4494      	add	ip, r2
 8019448:	ea83 0201 	eor.w	r2, r3, r1
 801944c:	403a      	ands	r2, r7
 801944e:	405a      	eors	r2, r3
 8019450:	4462      	add	r2, ip
 8019452:	eb07 22b2 	add.w	r2, r7, r2, ror #10
    P( A, B, C, D, 12,  7, 0x6B901122 );
 8019456:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 8019728 <mbedtls_internal_md5_process+0x5ac>
 801945a:	44cc      	add	ip, r9
 801945c:	449c      	add	ip, r3
 801945e:	ea81 0307 	eor.w	r3, r1, r7
 8019462:	4013      	ands	r3, r2
 8019464:	404b      	eors	r3, r1
 8019466:	4463      	add	r3, ip
 8019468:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C, 13, 12, 0xFD987193 );
 801946c:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 801972c <mbedtls_internal_md5_process+0x5b0>
 8019470:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019472:	44a4      	add	ip, r4
 8019474:	448c      	add	ip, r1
 8019476:	ea87 0102 	eor.w	r1, r7, r2
 801947a:	4019      	ands	r1, r3
 801947c:	4079      	eors	r1, r7
 801947e:	4461      	add	r1, ip
 8019480:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 14, 17, 0xA679438E );
 8019484:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 8019730 <mbedtls_internal_md5_process+0x5b4>
 8019488:	44d4      	add	ip, sl
 801948a:	44bc      	add	ip, r7
 801948c:	ea82 0703 	eor.w	r7, r2, r3
 8019490:	400f      	ands	r7, r1
 8019492:	4057      	eors	r7, r2
 8019494:	4467      	add	r7, ip
 8019496:	eb01 37f7 	add.w	r7, r1, r7, ror #15
    P( B, C, D, A, 15, 22, 0x49B40821 );
 801949a:	f8df c298 	ldr.w	ip, [pc, #664]	; 8019734 <mbedtls_internal_md5_process+0x5b8>
 801949e:	44c4      	add	ip, r8
 80194a0:	4494      	add	ip, r2
 80194a2:	ea83 0201 	eor.w	r2, r3, r1
 80194a6:	403a      	ands	r2, r7
 80194a8:	405a      	eors	r2, r3
 80194aa:	4462      	add	r2, ip
 80194ac:	eb07 22b2 	add.w	r2, r7, r2, ror #10

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 80194b0:	f8df c284 	ldr.w	ip, [pc, #644]	; 8019738 <mbedtls_internal_md5_process+0x5bc>
 80194b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80194b6:	44a4      	add	ip, r4
 80194b8:	449c      	add	ip, r3
 80194ba:	ea87 0302 	eor.w	r3, r7, r2
 80194be:	400b      	ands	r3, r1
 80194c0:	407b      	eors	r3, r7
 80194c2:	4463      	add	r3, ip
 80194c4:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  6,  9, 0xC040B340 );
 80194c8:	f8df c270 	ldr.w	ip, [pc, #624]	; 801973c <mbedtls_internal_md5_process+0x5c0>
 80194cc:	9c05      	ldr	r4, [sp, #20]
 80194ce:	44a4      	add	ip, r4
 80194d0:	448c      	add	ip, r1
 80194d2:	ea82 0103 	eor.w	r1, r2, r3
 80194d6:	4039      	ands	r1, r7
 80194d8:	4051      	eors	r1, r2
 80194da:	4461      	add	r1, ip
 80194dc:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 80194e0:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8019740 <mbedtls_internal_md5_process+0x5c4>
 80194e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80194e6:	44a4      	add	ip, r4
 80194e8:	44bc      	add	ip, r7
 80194ea:	ea83 0701 	eor.w	r7, r3, r1
 80194ee:	4017      	ands	r7, r2
 80194f0:	405f      	eors	r7, r3
 80194f2:	4467      	add	r7, ip
 80194f4:	eb01 47b7 	add.w	r7, r1, r7, ror #18
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 80194f8:	f8df c248 	ldr.w	ip, [pc, #584]	; 8019744 <mbedtls_internal_md5_process+0x5c8>
 80194fc:	44b4      	add	ip, r6
 80194fe:	4494      	add	ip, r2
 8019500:	ea81 0207 	eor.w	r2, r1, r7
 8019504:	401a      	ands	r2, r3
 8019506:	404a      	eors	r2, r1
 8019508:	4462      	add	r2, ip
 801950a:	eb07 3232 	add.w	r2, r7, r2, ror #12
    P( A, B, C, D,  5,  5, 0xD62F105D );
 801950e:	f8df c238 	ldr.w	ip, [pc, #568]	; 8019748 <mbedtls_internal_md5_process+0x5cc>
 8019512:	9c04      	ldr	r4, [sp, #16]
 8019514:	44a4      	add	ip, r4
 8019516:	449c      	add	ip, r3
 8019518:	ea87 0302 	eor.w	r3, r7, r2
 801951c:	400b      	ands	r3, r1
 801951e:	407b      	eors	r3, r7
 8019520:	4463      	add	r3, ip
 8019522:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 10,  9, 0x02441453 );
 8019526:	f8df c224 	ldr.w	ip, [pc, #548]	; 801974c <mbedtls_internal_md5_process+0x5d0>
 801952a:	9c08      	ldr	r4, [sp, #32]
 801952c:	44a4      	add	ip, r4
 801952e:	448c      	add	ip, r1
 8019530:	ea82 0103 	eor.w	r1, r2, r3
 8019534:	4039      	ands	r1, r7
 8019536:	4051      	eors	r1, r2
 8019538:	4461      	add	r1, ip
 801953a:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 801953e:	f8df c210 	ldr.w	ip, [pc, #528]	; 8019750 <mbedtls_internal_md5_process+0x5d4>
 8019542:	44c4      	add	ip, r8
 8019544:	44bc      	add	ip, r7
 8019546:	ea83 0701 	eor.w	r7, r3, r1
 801954a:	4017      	ands	r7, r2
 801954c:	405f      	eors	r7, r3
 801954e:	4467      	add	r7, ip
 8019550:	eb01 47b7 	add.w	r7, r1, r7, ror #18
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 8019554:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8019754 <mbedtls_internal_md5_process+0x5d8>
 8019558:	9c03      	ldr	r4, [sp, #12]
 801955a:	44a4      	add	ip, r4
 801955c:	4494      	add	ip, r2
 801955e:	ea81 0207 	eor.w	r2, r1, r7
 8019562:	401a      	ands	r2, r3
 8019564:	404a      	eors	r2, r1
 8019566:	4462      	add	r2, ip
 8019568:	eb07 3232 	add.w	r2, r7, r2, ror #12
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 801956c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8019758 <mbedtls_internal_md5_process+0x5dc>
 8019570:	9c07      	ldr	r4, [sp, #28]
 8019572:	44a4      	add	ip, r4
 8019574:	449c      	add	ip, r3
 8019576:	ea87 0302 	eor.w	r3, r7, r2
 801957a:	400b      	ands	r3, r1
 801957c:	407b      	eors	r3, r7
 801957e:	4463      	add	r3, ip
 8019580:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8019584:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 801975c <mbedtls_internal_md5_process+0x5e0>
 8019588:	44d4      	add	ip, sl
 801958a:	448c      	add	ip, r1
 801958c:	ea82 0103 	eor.w	r1, r2, r3
 8019590:	4039      	ands	r1, r7
 8019592:	4051      	eors	r1, r2
 8019594:	4461      	add	r1, ip
 8019596:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 801959a:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8019760 <mbedtls_internal_md5_process+0x5e4>
 801959e:	9c02      	ldr	r4, [sp, #8]
 80195a0:	44a4      	add	ip, r4
 80195a2:	4467      	add	r7, ip
 80195a4:	ea83 0c01 	eor.w	ip, r3, r1
 80195a8:	ea0c 0c02 	and.w	ip, ip, r2
 80195ac:	ea8c 0c03 	eor.w	ip, ip, r3
 80195b0:	4467      	add	r7, ip
 80195b2:	eb01 47b7 	add.w	r7, r1, r7, ror #18
    P( B, C, D, A,  8, 20, 0x455A14ED );
 80195b6:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8019764 <mbedtls_internal_md5_process+0x5e8>
 80195ba:	9c06      	ldr	r4, [sp, #24]
 80195bc:	44a4      	add	ip, r4
 80195be:	4462      	add	r2, ip
 80195c0:	ea81 0c07 	eor.w	ip, r1, r7
 80195c4:	ea0c 0c03 	and.w	ip, ip, r3
 80195c8:	ea8c 0c01 	eor.w	ip, ip, r1
 80195cc:	4462      	add	r2, ip
 80195ce:	eb07 3232 	add.w	r2, r7, r2, ror #12
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 80195d2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8019768 <mbedtls_internal_md5_process+0x5ec>
 80195d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80195d8:	44a4      	add	ip, r4
 80195da:	4463      	add	r3, ip
 80195dc:	ea87 0c02 	eor.w	ip, r7, r2
 80195e0:	ea0c 0c01 	and.w	ip, ip, r1
 80195e4:	ea8c 0c07 	eor.w	ip, ip, r7
 80195e8:	4463      	add	r3, ip
 80195ea:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 80195ee:	f8df c17c 	ldr.w	ip, [pc, #380]	; 801976c <mbedtls_internal_md5_process+0x5f0>
 80195f2:	9c01      	ldr	r4, [sp, #4]
 80195f4:	44a4      	add	ip, r4
 80195f6:	4461      	add	r1, ip
 80195f8:	ea82 0c03 	eor.w	ip, r2, r3
 80195fc:	ea0c 0c07 	and.w	ip, ip, r7
 8019600:	ea8c 0c02 	eor.w	ip, ip, r2
 8019604:	4461      	add	r1, ip
 8019606:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 801960a:	f8df c164 	ldr.w	ip, [pc, #356]	; 8019770 <mbedtls_internal_md5_process+0x5f4>
 801960e:	44ac      	add	ip, r5
 8019610:	4467      	add	r7, ip
 8019612:	ea83 0c01 	eor.w	ip, r3, r1
 8019616:	ea0c 0c02 	and.w	ip, ip, r2
 801961a:	ea8c 0c03 	eor.w	ip, ip, r3
 801961e:	44bc      	add	ip, r7
 8019620:	eb01 4cbc 	add.w	ip, r1, ip, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8019624:	ea81 070c 	eor.w	r7, r1, ip
 8019628:	f8df b148 	ldr.w	fp, [pc, #328]	; 8019774 <mbedtls_internal_md5_process+0x5f8>
 801962c:	44cb      	add	fp, r9
 801962e:	4493      	add	fp, r2
 8019630:	ea07 0203 	and.w	r2, r7, r3
 8019634:	404a      	eors	r2, r1
 8019636:	445a      	add	r2, fp
 8019638:	eb0c 3232 	add.w	r2, ip, r2, ror #12

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 801963c:	9c04      	ldr	r4, [sp, #16]
 801963e:	f5a4 2bb8 	sub.w	fp, r4, #376832	; 0x5c000
 8019642:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be
 8019646:	445b      	add	r3, fp
 8019648:	4057      	eors	r7, r2
 801964a:	443b      	add	r3, r7
 801964c:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8019650:	4f28      	ldr	r7, [pc, #160]	; (80196f4 <mbedtls_internal_md5_process+0x578>)
 8019652:	9c06      	ldr	r4, [sp, #24]
 8019654:	4427      	add	r7, r4
 8019656:	440f      	add	r7, r1
 8019658:	ea8c 0102 	eor.w	r1, ip, r2
 801965c:	4059      	eors	r1, r3
 801965e:	4439      	add	r1, r7
 8019660:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8019664:	4f24      	ldr	r7, [pc, #144]	; (80196f8 <mbedtls_internal_md5_process+0x57c>)
 8019666:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019668:	4427      	add	r7, r4
 801966a:	44bc      	add	ip, r7
 801966c:	ea82 0703 	eor.w	r7, r2, r3
 8019670:	404f      	eors	r7, r1
 8019672:	44bc      	add	ip, r7
 8019674:	eb01 4c3c 	add.w	ip, r1, ip, ror #16
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8019678:	4f20      	ldr	r7, [pc, #128]	; (80196fc <mbedtls_internal_md5_process+0x580>)
 801967a:	4457      	add	r7, sl
 801967c:	4417      	add	r7, r2
 801967e:	ea83 0201 	eor.w	r2, r3, r1
 8019682:	ea82 020c 	eor.w	r2, r2, ip
 8019686:	443a      	add	r2, r7
 8019688:	eb0c 2272 	add.w	r2, ip, r2, ror #9
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 801968c:	4f1c      	ldr	r7, [pc, #112]	; (8019700 <mbedtls_internal_md5_process+0x584>)
 801968e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019690:	4427      	add	r7, r4
 8019692:	441f      	add	r7, r3
 8019694:	ea81 030c 	eor.w	r3, r1, ip
 8019698:	4053      	eors	r3, r2
 801969a:	443b      	add	r3, r7
 801969c:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 80196a0:	4f18      	ldr	r7, [pc, #96]	; (8019704 <mbedtls_internal_md5_process+0x588>)
 80196a2:	9c03      	ldr	r4, [sp, #12]
 80196a4:	4427      	add	r7, r4
 80196a6:	440f      	add	r7, r1
 80196a8:	ea8c 0102 	eor.w	r1, ip, r2
 80196ac:	4059      	eors	r1, r3
 80196ae:	4439      	add	r1, r7
 80196b0:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 80196b4:	4f14      	ldr	r7, [pc, #80]	; (8019708 <mbedtls_internal_md5_process+0x58c>)
 80196b6:	442f      	add	r7, r5
 80196b8:	44bc      	add	ip, r7
 80196ba:	ea82 0703 	eor.w	r7, r2, r3
 80196be:	404f      	eors	r7, r1
 80196c0:	4467      	add	r7, ip
 80196c2:	eb01 4737 	add.w	r7, r1, r7, ror #16
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 80196c6:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8019778 <mbedtls_internal_md5_process+0x5fc>
 80196ca:	9c08      	ldr	r4, [sp, #32]
 80196cc:	44a4      	add	ip, r4
 80196ce:	4494      	add	ip, r2
 80196d0:	ea83 0201 	eor.w	r2, r3, r1
 80196d4:	407a      	eors	r2, r7
 80196d6:	4462      	add	r2, ip
 80196d8:	eb07 2272 	add.w	r2, r7, r2, ror #9
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 80196dc:	f8df c09c 	ldr.w	ip, [pc, #156]	; 801977c <mbedtls_internal_md5_process+0x600>
 80196e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80196e2:	e04d      	b.n	8019780 <mbedtls_internal_md5_process+0x604>
 80196e4:	d76aa478 	.word	0xd76aa478
 80196e8:	e8c7b756 	.word	0xe8c7b756
 80196ec:	242070db 	.word	0x242070db
 80196f0:	c1bdceee 	.word	0xc1bdceee
 80196f4:	8771f681 	.word	0x8771f681
 80196f8:	6d9d6122 	.word	0x6d9d6122
 80196fc:	fde5380c 	.word	0xfde5380c
 8019700:	a4beea44 	.word	0xa4beea44
 8019704:	4bdecfa9 	.word	0x4bdecfa9
 8019708:	f6bb4b60 	.word	0xf6bb4b60
 801970c:	f57c0faf 	.word	0xf57c0faf
 8019710:	4787c62a 	.word	0x4787c62a
 8019714:	a8304613 	.word	0xa8304613
 8019718:	fd469501 	.word	0xfd469501
 801971c:	698098d8 	.word	0x698098d8
 8019720:	8b44f7af 	.word	0x8b44f7af
 8019724:	895cd7be 	.word	0x895cd7be
 8019728:	6b901122 	.word	0x6b901122
 801972c:	fd987193 	.word	0xfd987193
 8019730:	a679438e 	.word	0xa679438e
 8019734:	49b40821 	.word	0x49b40821
 8019738:	f61e2562 	.word	0xf61e2562
 801973c:	c040b340 	.word	0xc040b340
 8019740:	265e5a51 	.word	0x265e5a51
 8019744:	e9b6c7aa 	.word	0xe9b6c7aa
 8019748:	d62f105d 	.word	0xd62f105d
 801974c:	02441453 	.word	0x02441453
 8019750:	d8a1e681 	.word	0xd8a1e681
 8019754:	e7d3fbc8 	.word	0xe7d3fbc8
 8019758:	21e1cde6 	.word	0x21e1cde6
 801975c:	c33707d6 	.word	0xc33707d6
 8019760:	f4d50d87 	.word	0xf4d50d87
 8019764:	455a14ed 	.word	0x455a14ed
 8019768:	a9e3e905 	.word	0xa9e3e905
 801976c:	fcefa3f8 	.word	0xfcefa3f8
 8019770:	676f02d9 	.word	0x676f02d9
 8019774:	8d2a4c8a 	.word	0x8d2a4c8a
 8019778:	bebfbc70 	.word	0xbebfbc70
 801977c:	289b7ec6 	.word	0x289b7ec6
 8019780:	44a4      	add	ip, r4
 8019782:	449c      	add	ip, r3
 8019784:	ea81 0307 	eor.w	r3, r1, r7
 8019788:	4053      	eors	r3, r2
 801978a:	4463      	add	r3, ip
 801978c:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8019790:	f8df c240 	ldr.w	ip, [pc, #576]	; 80199d4 <mbedtls_internal_md5_process+0x858>
 8019794:	44b4      	add	ip, r6
 8019796:	4461      	add	r1, ip
 8019798:	ea87 0c02 	eor.w	ip, r7, r2
 801979c:	ea8c 0c03 	eor.w	ip, ip, r3
 80197a0:	4461      	add	r1, ip
 80197a2:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 80197a6:	f8df c230 	ldr.w	ip, [pc, #560]	; 80199d8 <mbedtls_internal_md5_process+0x85c>
 80197aa:	9c02      	ldr	r4, [sp, #8]
 80197ac:	44a4      	add	ip, r4
 80197ae:	44bc      	add	ip, r7
 80197b0:	ea82 0703 	eor.w	r7, r2, r3
 80197b4:	404f      	eors	r7, r1
 80197b6:	4467      	add	r7, ip
 80197b8:	eb01 4737 	add.w	r7, r1, r7, ror #16
    P( B, C, D, A,  6, 23, 0x04881D05 );
 80197bc:	f8df c21c 	ldr.w	ip, [pc, #540]	; 80199dc <mbedtls_internal_md5_process+0x860>
 80197c0:	9c05      	ldr	r4, [sp, #20]
 80197c2:	44a4      	add	ip, r4
 80197c4:	4462      	add	r2, ip
 80197c6:	ea83 0c01 	eor.w	ip, r3, r1
 80197ca:	ea8c 0c07 	eor.w	ip, ip, r7
 80197ce:	4494      	add	ip, r2
 80197d0:	eb07 2c7c 	add.w	ip, r7, ip, ror #9
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 80197d4:	4a6d      	ldr	r2, [pc, #436]	; (801998c <mbedtls_internal_md5_process+0x810>)
 80197d6:	9c07      	ldr	r4, [sp, #28]
 80197d8:	4422      	add	r2, r4
 80197da:	4413      	add	r3, r2
 80197dc:	ea81 0207 	eor.w	r2, r1, r7
 80197e0:	ea82 020c 	eor.w	r2, r2, ip
 80197e4:	441a      	add	r2, r3
 80197e6:	eb0c 7232 	add.w	r2, ip, r2, ror #28
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 80197ea:	4b69      	ldr	r3, [pc, #420]	; (8019990 <mbedtls_internal_md5_process+0x814>)
 80197ec:	444b      	add	r3, r9
 80197ee:	440b      	add	r3, r1
 80197f0:	ea87 010c 	eor.w	r1, r7, ip
 80197f4:	4051      	eors	r1, r2
 80197f6:	4419      	add	r1, r3
 80197f8:	eb02 5171 	add.w	r1, r2, r1, ror #21
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 80197fc:	4b65      	ldr	r3, [pc, #404]	; (8019994 <mbedtls_internal_md5_process+0x818>)
 80197fe:	4443      	add	r3, r8
 8019800:	441f      	add	r7, r3
 8019802:	ea8c 0302 	eor.w	r3, ip, r2
 8019806:	404b      	eors	r3, r1
 8019808:	441f      	add	r7, r3
 801980a:	eb01 4737 	add.w	r7, r1, r7, ror #16
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 801980e:	4b62      	ldr	r3, [pc, #392]	; (8019998 <mbedtls_internal_md5_process+0x81c>)
 8019810:	9c01      	ldr	r4, [sp, #4]
 8019812:	46a3      	mov	fp, r4
 8019814:	4423      	add	r3, r4
 8019816:	449c      	add	ip, r3
 8019818:	ea82 0301 	eor.w	r3, r2, r1
 801981c:	407b      	eors	r3, r7
 801981e:	4463      	add	r3, ip
 8019820:	eb07 2373 	add.w	r3, r7, r3, ror #9

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8019824:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80199e0 <mbedtls_internal_md5_process+0x864>
 8019828:	44b4      	add	ip, r6
 801982a:	4462      	add	r2, ip
 801982c:	ea63 0601 	orn	r6, r3, r1
 8019830:	407e      	eors	r6, r7
 8019832:	4432      	add	r2, r6
 8019834:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 8019838:	4e58      	ldr	r6, [pc, #352]	; (801999c <mbedtls_internal_md5_process+0x820>)
 801983a:	442e      	add	r6, r5
 801983c:	4431      	add	r1, r6
 801983e:	ea62 0507 	orn	r5, r2, r7
 8019842:	405d      	eors	r5, r3
 8019844:	4429      	add	r1, r5
 8019846:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 801984a:	4d55      	ldr	r5, [pc, #340]	; (80199a0 <mbedtls_internal_md5_process+0x824>)
 801984c:	4455      	add	r5, sl
 801984e:	442f      	add	r7, r5
 8019850:	ea61 0603 	orn	r6, r1, r3
 8019854:	4056      	eors	r6, r2
 8019856:	4437      	add	r7, r6
 8019858:	eb01 4777 	add.w	r7, r1, r7, ror #17
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 801985c:	4d51      	ldr	r5, [pc, #324]	; (80199a4 <mbedtls_internal_md5_process+0x828>)
 801985e:	9c04      	ldr	r4, [sp, #16]
 8019860:	4425      	add	r5, r4
 8019862:	442b      	add	r3, r5
 8019864:	ea67 0402 	orn	r4, r7, r2
 8019868:	404c      	eors	r4, r1
 801986a:	4423      	add	r3, r4
 801986c:	eb07 23f3 	add.w	r3, r7, r3, ror #11
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 8019870:	4c4d      	ldr	r4, [pc, #308]	; (80199a8 <mbedtls_internal_md5_process+0x82c>)
 8019872:	444c      	add	r4, r9
 8019874:	4422      	add	r2, r4
 8019876:	ea63 0501 	orn	r5, r3, r1
 801987a:	407d      	eors	r5, r7
 801987c:	442a      	add	r2, r5
 801987e:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 8019882:	4e4a      	ldr	r6, [pc, #296]	; (80199ac <mbedtls_internal_md5_process+0x830>)
 8019884:	9d02      	ldr	r5, [sp, #8]
 8019886:	442e      	add	r6, r5
 8019888:	4431      	add	r1, r6
 801988a:	ea62 0407 	orn	r4, r2, r7
 801988e:	405c      	eors	r4, r3
 8019890:	4421      	add	r1, r4
 8019892:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 8019896:	9e08      	ldr	r6, [sp, #32]
 8019898:	f5a6 1480 	sub.w	r4, r6, #1048576	; 0x100000
 801989c:	f6a4 3483 	subw	r4, r4, #2947	; 0xb83
 80198a0:	4427      	add	r7, r4
 80198a2:	ea61 0403 	orn	r4, r1, r3
 80198a6:	4054      	eors	r4, r2
 80198a8:	4427      	add	r7, r4
 80198aa:	eb01 4777 	add.w	r7, r1, r7, ror #17
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 80198ae:	4d40      	ldr	r5, [pc, #256]	; (80199b0 <mbedtls_internal_md5_process+0x834>)
 80198b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80198b2:	4425      	add	r5, r4
 80198b4:	442b      	add	r3, r5
 80198b6:	ea67 0402 	orn	r4, r7, r2
 80198ba:	404c      	eors	r4, r1
 80198bc:	4423      	add	r3, r4
 80198be:	eb07 23f3 	add.w	r3, r7, r3, ror #11
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 80198c2:	4c3c      	ldr	r4, [pc, #240]	; (80199b4 <mbedtls_internal_md5_process+0x838>)
 80198c4:	9e06      	ldr	r6, [sp, #24]
 80198c6:	4434      	add	r4, r6
 80198c8:	4422      	add	r2, r4
 80198ca:	ea63 0501 	orn	r5, r3, r1
 80198ce:	407d      	eors	r5, r7
 80198d0:	442a      	add	r2, r5
 80198d2:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 80198d6:	4c38      	ldr	r4, [pc, #224]	; (80199b8 <mbedtls_internal_md5_process+0x83c>)
 80198d8:	4444      	add	r4, r8
 80198da:	4421      	add	r1, r4
 80198dc:	ea62 0507 	orn	r5, r2, r7
 80198e0:	405d      	eors	r5, r3
 80198e2:	4429      	add	r1, r5
 80198e4:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  6, 15, 0xA3014314 );
 80198e8:	4c34      	ldr	r4, [pc, #208]	; (80199bc <mbedtls_internal_md5_process+0x840>)
 80198ea:	9d05      	ldr	r5, [sp, #20]
 80198ec:	442c      	add	r4, r5
 80198ee:	4427      	add	r7, r4
 80198f0:	ea61 0503 	orn	r5, r1, r3
 80198f4:	4055      	eors	r5, r2
 80198f6:	442f      	add	r7, r5
 80198f8:	eb01 4777 	add.w	r7, r1, r7, ror #17
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 80198fc:	4d30      	ldr	r5, [pc, #192]	; (80199c0 <mbedtls_internal_md5_process+0x844>)
 80198fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019900:	4435      	add	r5, r6
 8019902:	441d      	add	r5, r3
 8019904:	ea67 0302 	orn	r3, r7, r2
 8019908:	404b      	eors	r3, r1
 801990a:	442b      	add	r3, r5
 801990c:	eb07 23f3 	add.w	r3, r7, r3, ror #11
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 8019910:	4c2c      	ldr	r4, [pc, #176]	; (80199c4 <mbedtls_internal_md5_process+0x848>)
 8019912:	9e03      	ldr	r6, [sp, #12]
 8019914:	4434      	add	r4, r6
 8019916:	4414      	add	r4, r2
 8019918:	ea63 0201 	orn	r2, r3, r1
 801991c:	407a      	eors	r2, r7
 801991e:	4422      	add	r2, r4
 8019920:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 8019924:	4c28      	ldr	r4, [pc, #160]	; (80199c8 <mbedtls_internal_md5_process+0x84c>)
 8019926:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8019928:	4434      	add	r4, r6
 801992a:	440c      	add	r4, r1
 801992c:	ea62 0107 	orn	r1, r2, r7
 8019930:	4059      	eors	r1, r3
 8019932:	4421      	add	r1, r4
 8019934:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8019938:	4c24      	ldr	r4, [pc, #144]	; (80199cc <mbedtls_internal_md5_process+0x850>)
 801993a:	445c      	add	r4, fp
 801993c:	443c      	add	r4, r7
 801993e:	ea61 0703 	orn	r7, r1, r3
 8019942:	4057      	eors	r7, r2
 8019944:	4427      	add	r7, r4
 8019946:	eb01 4777 	add.w	r7, r1, r7, ror #17
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 801994a:	4c21      	ldr	r4, [pc, #132]	; (80199d0 <mbedtls_internal_md5_process+0x854>)
 801994c:	9d07      	ldr	r5, [sp, #28]
 801994e:	442c      	add	r4, r5
 8019950:	4423      	add	r3, r4

#undef F

    ctx->state[0] += A;
 8019952:	f8de 4008 	ldr.w	r4, [lr, #8]
 8019956:	4414      	add	r4, r2
 8019958:	f8ce 4008 	str.w	r4, [lr, #8]
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 801995c:	ea67 0202 	orn	r2, r7, r2
 8019960:	404a      	eors	r2, r1
 8019962:	441a      	add	r2, r3
    ctx->state[1] += B;
 8019964:	4438      	add	r0, r7
 8019966:	eb00 20f2 	add.w	r0, r0, r2, ror #11
 801996a:	f8ce 000c 	str.w	r0, [lr, #12]
    ctx->state[2] += C;
 801996e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8019972:	441f      	add	r7, r3
 8019974:	f8ce 7010 	str.w	r7, [lr, #16]
    ctx->state[3] += D;
 8019978:	f8de 3014 	ldr.w	r3, [lr, #20]
 801997c:	4419      	add	r1, r3
 801997e:	f8ce 1014 	str.w	r1, [lr, #20]

    return( 0 );
}
 8019982:	2000      	movs	r0, #0
 8019984:	b00d      	add	sp, #52	; 0x34
 8019986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998a:	bf00      	nop
 801998c:	d9d4d039 	.word	0xd9d4d039
 8019990:	e6db99e5 	.word	0xe6db99e5
 8019994:	1fa27cf8 	.word	0x1fa27cf8
 8019998:	c4ac5665 	.word	0xc4ac5665
 801999c:	432aff97 	.word	0x432aff97
 80199a0:	ab9423a7 	.word	0xab9423a7
 80199a4:	fc93a039 	.word	0xfc93a039
 80199a8:	655b59c3 	.word	0x655b59c3
 80199ac:	8f0ccc92 	.word	0x8f0ccc92
 80199b0:	85845dd1 	.word	0x85845dd1
 80199b4:	6fa87e4f 	.word	0x6fa87e4f
 80199b8:	fe2ce6e0 	.word	0xfe2ce6e0
 80199bc:	a3014314 	.word	0xa3014314
 80199c0:	4e0811a1 	.word	0x4e0811a1
 80199c4:	f7537e82 	.word	0xf7537e82
 80199c8:	bd3af235 	.word	0xbd3af235
 80199cc:	2ad7d2bb 	.word	0x2ad7d2bb
 80199d0:	eb86d391 	.word	0xeb86d391
 80199d4:	eaa127fa 	.word	0xeaa127fa
 80199d8:	d4ef3085 	.word	0xd4ef3085
 80199dc:	04881d05 	.word	0x04881d05
 80199e0:	f4292244 	.word	0xf4292244

080199e4 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 80199e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80199e8:	2a00      	cmp	r2, #0
 80199ea:	d040      	beq.n	8019a6e <mbedtls_md5_update_ret+0x8a>
 80199ec:	4606      	mov	r6, r0
 80199ee:	460d      	mov	r5, r1
 80199f0:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80199f2:	6803      	ldr	r3, [r0, #0]
 80199f4:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80199f8:	4413      	add	r3, r2
 80199fa:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80199fc:	4293      	cmp	r3, r2
 80199fe:	d202      	bcs.n	8019a06 <mbedtls_md5_update_ret+0x22>
        ctx->total[1]++;
 8019a00:	6843      	ldr	r3, [r0, #4]
 8019a02:	3301      	adds	r3, #1
 8019a04:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
 8019a06:	b11f      	cbz	r7, 8019a10 <mbedtls_md5_update_ret+0x2c>
    fill = 64 - left;
 8019a08:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 8019a0c:	4544      	cmp	r4, r8
 8019a0e:	d20e      	bcs.n	8019a2e <mbedtls_md5_update_ret+0x4a>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8019a10:	2c3f      	cmp	r4, #63	; 0x3f
 8019a12:	d923      	bls.n	8019a5c <mbedtls_md5_update_ret+0x78>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 8019a14:	4629      	mov	r1, r5
 8019a16:	4630      	mov	r0, r6
 8019a18:	f7ff fbb0 	bl	801917c <mbedtls_internal_md5_process>
 8019a1c:	4603      	mov	r3, r0
 8019a1e:	bb38      	cbnz	r0, 8019a70 <mbedtls_md5_update_ret+0x8c>
            return( ret );

        input += 64;
 8019a20:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
 8019a22:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8019a24:	2c3f      	cmp	r4, #63	; 0x3f
 8019a26:	d8f5      	bhi.n	8019a14 <mbedtls_md5_update_ret+0x30>
    }

    if( ilen > 0 )
 8019a28:	b9c4      	cbnz	r4, 8019a5c <mbedtls_md5_update_ret+0x78>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    }

    return( 0 );
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	e020      	b.n	8019a70 <mbedtls_md5_update_ret+0x8c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019a2e:	f106 0918 	add.w	r9, r6, #24
 8019a32:	4642      	mov	r2, r8
 8019a34:	4629      	mov	r1, r5
 8019a36:	eb09 0007 	add.w	r0, r9, r7
 8019a3a:	f010 fd7e 	bl	802a53a <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8019a3e:	4649      	mov	r1, r9
 8019a40:	4630      	mov	r0, r6
 8019a42:	f7ff fb9b 	bl	801917c <mbedtls_internal_md5_process>
 8019a46:	4603      	mov	r3, r0
 8019a48:	b990      	cbnz	r0, 8019a70 <mbedtls_md5_update_ret+0x8c>
        input += fill;
 8019a4a:	4445      	add	r5, r8
        ilen  -= fill;
 8019a4c:	443c      	add	r4, r7
 8019a4e:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 8019a50:	2c3f      	cmp	r4, #63	; 0x3f
 8019a52:	d901      	bls.n	8019a58 <mbedtls_md5_update_ret+0x74>
        left = 0;
 8019a54:	2700      	movs	r7, #0
 8019a56:	e7dd      	b.n	8019a14 <mbedtls_md5_update_ret+0x30>
 8019a58:	2700      	movs	r7, #0
 8019a5a:	e7e5      	b.n	8019a28 <mbedtls_md5_update_ret+0x44>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019a5c:	f106 0018 	add.w	r0, r6, #24
 8019a60:	4622      	mov	r2, r4
 8019a62:	4629      	mov	r1, r5
 8019a64:	4438      	add	r0, r7
 8019a66:	f010 fd68 	bl	802a53a <memcpy>
    return( 0 );
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	e000      	b.n	8019a70 <mbedtls_md5_update_ret+0x8c>
        return( 0 );
 8019a6e:	2300      	movs	r3, #0
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019a76 <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 8019a76:	b570      	push	{r4, r5, r6, lr}
 8019a78:	4604      	mov	r4, r0
 8019a7a:	460d      	mov	r5, r1
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8019a7c:	6803      	ldr	r3, [r0, #0]
 8019a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8019a82:	1c58      	adds	r0, r3, #1
 8019a84:	4423      	add	r3, r4
 8019a86:	2280      	movs	r2, #128	; 0x80
 8019a88:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 8019a8a:	2838      	cmp	r0, #56	; 0x38
 8019a8c:	d850      	bhi.n	8019b30 <mbedtls_md5_finish_ret+0xba>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8019a8e:	f104 0318 	add.w	r3, r4, #24
 8019a92:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8019a96:	2100      	movs	r1, #0
 8019a98:	4418      	add	r0, r3
 8019a9a:	f010 fd76 	bl	802a58a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8019a9e:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8019aa0:	6861      	ldr	r1, [r4, #4]
    high = ( ctx->total[0] >> 29 )
 8019aa2:	0f5a      	lsrs	r2, r3, #29
 8019aa4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8019aa8:	00db      	lsls	r3, r3, #3

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 8019aaa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8019aae:	0a19      	lsrs	r1, r3, #8
 8019ab0:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
 8019ab4:	0c19      	lsrs	r1, r3, #16
 8019ab6:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
 8019aba:	0e1b      	lsrs	r3, r3, #24
 8019abc:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 8019ac0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8019ac4:	0a13      	lsrs	r3, r2, #8
 8019ac6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8019aca:	0c13      	lsrs	r3, r2, #16
 8019acc:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8019ad0:	0e12      	lsrs	r2, r2, #24
 8019ad2:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8019ad6:	f104 0118 	add.w	r1, r4, #24
 8019ada:	4620      	mov	r0, r4
 8019adc:	f7ff fb4e 	bl	801917c <mbedtls_internal_md5_process>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	bb18      	cbnz	r0, 8019b2c <mbedtls_md5_finish_ret+0xb6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 8019ae4:	68a2      	ldr	r2, [r4, #8]
 8019ae6:	702a      	strb	r2, [r5, #0]
 8019ae8:	68a2      	ldr	r2, [r4, #8]
 8019aea:	0a12      	lsrs	r2, r2, #8
 8019aec:	706a      	strb	r2, [r5, #1]
 8019aee:	8962      	ldrh	r2, [r4, #10]
 8019af0:	70aa      	strb	r2, [r5, #2]
 8019af2:	7ae2      	ldrb	r2, [r4, #11]
 8019af4:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 8019af6:	68e2      	ldr	r2, [r4, #12]
 8019af8:	712a      	strb	r2, [r5, #4]
 8019afa:	68e2      	ldr	r2, [r4, #12]
 8019afc:	0a12      	lsrs	r2, r2, #8
 8019afe:	716a      	strb	r2, [r5, #5]
 8019b00:	89e2      	ldrh	r2, [r4, #14]
 8019b02:	71aa      	strb	r2, [r5, #6]
 8019b04:	7be2      	ldrb	r2, [r4, #15]
 8019b06:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 8019b08:	6922      	ldr	r2, [r4, #16]
 8019b0a:	722a      	strb	r2, [r5, #8]
 8019b0c:	6922      	ldr	r2, [r4, #16]
 8019b0e:	0a12      	lsrs	r2, r2, #8
 8019b10:	726a      	strb	r2, [r5, #9]
 8019b12:	8a62      	ldrh	r2, [r4, #18]
 8019b14:	72aa      	strb	r2, [r5, #10]
 8019b16:	7ce2      	ldrb	r2, [r4, #19]
 8019b18:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8019b1a:	6962      	ldr	r2, [r4, #20]
 8019b1c:	732a      	strb	r2, [r5, #12]
 8019b1e:	6962      	ldr	r2, [r4, #20]
 8019b20:	0a12      	lsrs	r2, r2, #8
 8019b22:	736a      	strb	r2, [r5, #13]
 8019b24:	8ae2      	ldrh	r2, [r4, #22]
 8019b26:	73aa      	strb	r2, [r5, #14]
 8019b28:	7de2      	ldrb	r2, [r4, #23]
 8019b2a:	73ea      	strb	r2, [r5, #15]

    return( 0 );
}
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8019b30:	f104 0618 	add.w	r6, r4, #24
 8019b34:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8019b38:	2100      	movs	r1, #0
 8019b3a:	4430      	add	r0, r6
 8019b3c:	f010 fd25 	bl	802a58a <memset>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 8019b40:	4631      	mov	r1, r6
 8019b42:	4620      	mov	r0, r4
 8019b44:	f7ff fb1a 	bl	801917c <mbedtls_internal_md5_process>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	2800      	cmp	r0, #0
 8019b4c:	d1ee      	bne.n	8019b2c <mbedtls_md5_finish_ret+0xb6>
        memset( ctx->buffer, 0, 56 );
 8019b4e:	2238      	movs	r2, #56	; 0x38
 8019b50:	2100      	movs	r1, #0
 8019b52:	4630      	mov	r0, r6
 8019b54:	f010 fd19 	bl	802a58a <memset>
 8019b58:	e7a1      	b.n	8019a9e <mbedtls_md5_finish_ret+0x28>

08019b5a <mbedtls_md5_ret>:
 * output = MD5( input buffer )
 */
int mbedtls_md5_ret( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[16] )
{
 8019b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b5c:	b097      	sub	sp, #92	; 0x5c
 8019b5e:	4604      	mov	r4, r0
 8019b60:	460d      	mov	r5, r1
 8019b62:	4616      	mov	r6, r2
    int ret;
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 8019b64:	4668      	mov	r0, sp
 8019b66:	f7ff fae0 	bl	801912a <mbedtls_md5_init>

    if( ( ret = mbedtls_md5_starts_ret( &ctx ) ) != 0 )
 8019b6a:	4668      	mov	r0, sp
 8019b6c:	f7ff faf0 	bl	8019150 <mbedtls_md5_starts_ret>
 8019b70:	4607      	mov	r7, r0
 8019b72:	b128      	cbz	r0, 8019b80 <mbedtls_md5_ret+0x26>

    if( ( ret = mbedtls_md5_finish_ret( &ctx, output ) ) != 0 )
        goto exit;

exit:
    mbedtls_md5_free( &ctx );
 8019b74:	4668      	mov	r0, sp
 8019b76:	f7ff fade 	bl	8019136 <mbedtls_md5_free>

    return( ret );
}
 8019b7a:	4638      	mov	r0, r7
 8019b7c:	b017      	add	sp, #92	; 0x5c
 8019b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_md5_update_ret( &ctx, input, ilen ) ) != 0 )
 8019b80:	462a      	mov	r2, r5
 8019b82:	4621      	mov	r1, r4
 8019b84:	4668      	mov	r0, sp
 8019b86:	f7ff ff2d 	bl	80199e4 <mbedtls_md5_update_ret>
 8019b8a:	4607      	mov	r7, r0
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	d1f1      	bne.n	8019b74 <mbedtls_md5_ret+0x1a>
    if( ( ret = mbedtls_md5_finish_ret( &ctx, output ) ) != 0 )
 8019b90:	4631      	mov	r1, r6
 8019b92:	4668      	mov	r0, sp
 8019b94:	f7ff ff6f 	bl	8019a76 <mbedtls_md5_finish_ret>
 8019b98:	4607      	mov	r7, r0
exit:
 8019b9a:	e7eb      	b.n	8019b74 <mbedtls_md5_ret+0x1a>

08019b9c <md5_process_wrap>:
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
                       (const mbedtls_md5_context *) src );
}

static int md5_process_wrap( void *ctx, const unsigned char *data )
{
 8019b9c:	b508      	push	{r3, lr}
    return( mbedtls_internal_md5_process( (mbedtls_md5_context *) ctx, data ) );
 8019b9e:	f7ff faed 	bl	801917c <mbedtls_internal_md5_process>
}
 8019ba2:	bd08      	pop	{r3, pc}

08019ba4 <md5_clone_wrap>:
{
 8019ba4:	b508      	push	{r3, lr}
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
 8019ba6:	f7ff facd 	bl	8019144 <mbedtls_md5_clone>
}
 8019baa:	bd08      	pop	{r3, pc}

08019bac <md5_ctx_free>:
{
 8019bac:	b510      	push	{r4, lr}
 8019bae:	4604      	mov	r4, r0
    mbedtls_md5_free( (mbedtls_md5_context *) ctx );
 8019bb0:	f7ff fac1 	bl	8019136 <mbedtls_md5_free>
    mbedtls_free( ctx );
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	f00f f977 	bl	8028ea8 <mbedtls_free>
}
 8019bba:	bd10      	pop	{r4, pc}

08019bbc <md5_ctx_alloc>:
{
 8019bbc:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8019bbe:	2158      	movs	r1, #88	; 0x58
 8019bc0:	2001      	movs	r0, #1
 8019bc2:	f00f f963 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 8019bc6:	4604      	mov	r4, r0
 8019bc8:	b108      	cbz	r0, 8019bce <md5_ctx_alloc+0x12>
        mbedtls_md5_init( (mbedtls_md5_context *) ctx );
 8019bca:	f7ff faae 	bl	801912a <mbedtls_md5_init>
}
 8019bce:	4620      	mov	r0, r4
 8019bd0:	bd10      	pop	{r4, pc}

08019bd2 <md5_finish_wrap>:
{
 8019bd2:	b508      	push	{r3, lr}
    return( mbedtls_md5_finish_ret( (mbedtls_md5_context *) ctx, output ) );
 8019bd4:	f7ff ff4f 	bl	8019a76 <mbedtls_md5_finish_ret>
}
 8019bd8:	bd08      	pop	{r3, pc}

08019bda <md5_update_wrap>:
{
 8019bda:	b508      	push	{r3, lr}
    return( mbedtls_md5_update_ret( (mbedtls_md5_context *) ctx, input, ilen ) );
 8019bdc:	f7ff ff02 	bl	80199e4 <mbedtls_md5_update_ret>
}
 8019be0:	bd08      	pop	{r3, pc}

08019be2 <md5_starts_wrap>:
{
 8019be2:	b508      	push	{r3, lr}
    return( mbedtls_md5_starts_ret( (mbedtls_md5_context *) ctx ) );
 8019be4:	f7ff fab4 	bl	8019150 <mbedtls_md5_starts_ret>
}
 8019be8:	bd08      	pop	{r3, pc}

08019bea <sha1_process_wrap>:
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
 8019bea:	b508      	push	{r3, lr}
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
 8019bec:	f003 fc52 	bl	801d494 <mbedtls_internal_sha1_process>
                                           data ) );
}
 8019bf0:	bd08      	pop	{r3, pc}

08019bf2 <sha1_clone_wrap>:
{
 8019bf2:	b508      	push	{r3, lr}
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 8019bf4:	f003 fc2f 	bl	801d456 <mbedtls_sha1_clone>
}
 8019bf8:	bd08      	pop	{r3, pc}

08019bfa <sha1_ctx_free>:
{
 8019bfa:	b510      	push	{r4, lr}
 8019bfc:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8019bfe:	f003 fc23 	bl	801d448 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8019c02:	4620      	mov	r0, r4
 8019c04:	f00f f950 	bl	8028ea8 <mbedtls_free>
}
 8019c08:	bd10      	pop	{r4, pc}

08019c0a <sha1_ctx_alloc>:
{
 8019c0a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8019c0c:	215c      	movs	r1, #92	; 0x5c
 8019c0e:	2001      	movs	r0, #1
 8019c10:	f00f f93c 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 8019c14:	4604      	mov	r4, r0
 8019c16:	b108      	cbz	r0, 8019c1c <sha1_ctx_alloc+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8019c18:	f003 fc10 	bl	801d43c <mbedtls_sha1_init>
}
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	bd10      	pop	{r4, pc}

08019c20 <sha1_finish_wrap>:
{
 8019c20:	b508      	push	{r3, lr}
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8019c22:	f004 fc50 	bl	801e4c6 <mbedtls_sha1_finish_ret>
}
 8019c26:	bd08      	pop	{r3, pc}

08019c28 <sha1_update_wrap>:
{
 8019c28:	b508      	push	{r3, lr}
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
 8019c2a:	f004 fc03 	bl	801e434 <mbedtls_sha1_update_ret>
}
 8019c2e:	bd08      	pop	{r3, pc}

08019c30 <sha1_starts_wrap>:
{
 8019c30:	b508      	push	{r3, lr}
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8019c32:	f003 fc15 	bl	801d460 <mbedtls_sha1_starts_ret>
}
 8019c36:	bd08      	pop	{r3, pc}

08019c38 <sha224_process_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
 8019c38:	b508      	push	{r3, lr}
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
 8019c3a:	f004 fd4b 	bl	801e6d4 <mbedtls_internal_sha256_process>
                                             data ) );
}
 8019c3e:	bd08      	pop	{r3, pc}

08019c40 <sha224_clone_wrap>:
{
 8019c40:	b508      	push	{r3, lr}
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8019c42:	f004 fcf0 	bl	801e626 <mbedtls_sha256_clone>
}
 8019c46:	bd08      	pop	{r3, pc}

08019c48 <sha224_ctx_free>:
{
 8019c48:	b510      	push	{r4, lr}
 8019c4a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8019c4c:	f004 fce4 	bl	801e618 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8019c50:	4620      	mov	r0, r4
 8019c52:	f00f f929 	bl	8028ea8 <mbedtls_free>
}
 8019c56:	bd10      	pop	{r4, pc}

08019c58 <sha224_ctx_alloc>:
{
 8019c58:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8019c5a:	216c      	movs	r1, #108	; 0x6c
 8019c5c:	2001      	movs	r0, #1
 8019c5e:	f00f f915 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 8019c62:	4604      	mov	r4, r0
 8019c64:	b108      	cbz	r0, 8019c6a <sha224_ctx_alloc+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8019c66:	f004 fcd1 	bl	801e60c <mbedtls_sha256_init>
}
 8019c6a:	4620      	mov	r0, r4
 8019c6c:	bd10      	pop	{r4, pc}

08019c6e <sha224_wrap>:
{
 8019c6e:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8019c70:	2301      	movs	r3, #1
 8019c72:	f005 f985 	bl	801ef80 <mbedtls_sha256_ret>
}
 8019c76:	bd08      	pop	{r3, pc}

08019c78 <sha256_wrap>:
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 8019c78:	b508      	push	{r3, lr}
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	f005 f980 	bl	801ef80 <mbedtls_sha256_ret>
}
 8019c80:	bd08      	pop	{r3, pc}

08019c82 <sha224_finish_wrap>:
{
 8019c82:	b508      	push	{r3, lr}
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
 8019c84:	f005 f8d9 	bl	801ee3a <mbedtls_sha256_finish_ret>
}
 8019c88:	bd08      	pop	{r3, pc}

08019c8a <sha224_update_wrap>:
{
 8019c8a:	b508      	push	{r3, lr}
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
 8019c8c:	f005 f88c 	bl	801eda8 <mbedtls_sha256_update_ret>
}
 8019c90:	bd08      	pop	{r3, pc}

08019c92 <sha224_starts_wrap>:
{
 8019c92:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8019c94:	2101      	movs	r1, #1
 8019c96:	f004 fccb 	bl	801e630 <mbedtls_sha256_starts_ret>
}
 8019c9a:	bd08      	pop	{r3, pc}

08019c9c <sha256_starts_wrap>:
{
 8019c9c:	b508      	push	{r3, lr}
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 8019c9e:	2100      	movs	r1, #0
 8019ca0:	f004 fcc6 	bl	801e630 <mbedtls_sha256_starts_ret>
}
 8019ca4:	bd08      	pop	{r3, pc}

08019ca6 <sha384_process_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
 8019ca6:	b508      	push	{r3, lr}
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
 8019ca8:	f005 fa42 	bl	801f130 <mbedtls_internal_sha512_process>
                                             data ) );
}
 8019cac:	bd08      	pop	{r3, pc}

08019cae <sha384_clone_wrap>:
{
 8019cae:	b508      	push	{r3, lr}
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8019cb0:	f005 f996 	bl	801efe0 <mbedtls_sha512_clone>
}
 8019cb4:	bd08      	pop	{r3, pc}

08019cb6 <sha384_ctx_free>:
{
 8019cb6:	b510      	push	{r4, lr}
 8019cb8:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8019cba:	f005 f98a 	bl	801efd2 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8019cbe:	4620      	mov	r0, r4
 8019cc0:	f00f f8f2 	bl	8028ea8 <mbedtls_free>
}
 8019cc4:	bd10      	pop	{r4, pc}

08019cc6 <sha384_ctx_alloc>:
{
 8019cc6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8019cc8:	21d8      	movs	r1, #216	; 0xd8
 8019cca:	2001      	movs	r0, #1
 8019ccc:	f00f f8de 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 8019cd0:	4604      	mov	r4, r0
 8019cd2:	b108      	cbz	r0, 8019cd8 <sha384_ctx_alloc+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 8019cd4:	f005 f977 	bl	801efc6 <mbedtls_sha512_init>
}
 8019cd8:	4620      	mov	r0, r4
 8019cda:	bd10      	pop	{r4, pc}

08019cdc <sha384_wrap>:
{
 8019cdc:	b508      	push	{r3, lr}
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8019cde:	2301      	movs	r3, #1
 8019ce0:	f006 f8c9 	bl	801fe76 <mbedtls_sha512_ret>
}
 8019ce4:	bd08      	pop	{r3, pc}

08019ce6 <sha512_wrap>:
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
 8019ce6:	b508      	push	{r3, lr}
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 8019ce8:	2300      	movs	r3, #0
 8019cea:	f006 f8c4 	bl	801fe76 <mbedtls_sha512_ret>
}
 8019cee:	bd08      	pop	{r3, pc}

08019cf0 <sha384_finish_wrap>:
{
 8019cf0:	b508      	push	{r3, lr}
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
 8019cf2:	f005 ff85 	bl	801fc00 <mbedtls_sha512_finish_ret>
}
 8019cf6:	bd08      	pop	{r3, pc}

08019cf8 <sha384_update_wrap>:
{
 8019cf8:	b508      	push	{r3, lr}
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
 8019cfa:	f005 ff2d 	bl	801fb58 <mbedtls_sha512_update_ret>
}
 8019cfe:	bd08      	pop	{r3, pc}

08019d00 <sha384_starts_wrap>:
{
 8019d00:	b508      	push	{r3, lr}
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8019d02:	2101      	movs	r1, #1
 8019d04:	f005 f974 	bl	801eff0 <mbedtls_sha512_starts_ret>
}
 8019d08:	bd08      	pop	{r3, pc}

08019d0a <sha512_starts_wrap>:
{
 8019d0a:	b508      	push	{r3, lr}
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 8019d0c:	2100      	movs	r1, #0
 8019d0e:	f005 f96f 	bl	801eff0 <mbedtls_sha512_starts_ret>
}
 8019d12:	bd08      	pop	{r3, pc}

08019d14 <oid_sig_alg_from_asn1>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8019d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d16:	4607      	mov	r7, r0
 8019d18:	b180      	cbz	r0, 8019d3c <oid_sig_alg_from_asn1+0x28>
 8019d1a:	6845      	ldr	r5, [r0, #4]
 8019d1c:	4c08      	ldr	r4, [pc, #32]	; (8019d40 <oid_sig_alg_from_asn1+0x2c>)
 8019d1e:	4809      	ldr	r0, [pc, #36]	; (8019d44 <oid_sig_alg_from_asn1+0x30>)
 8019d20:	e002      	b.n	8019d28 <oid_sig_alg_from_asn1+0x14>
 8019d22:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8019d26:	b148      	cbz	r0, 8019d3c <oid_sig_alg_from_asn1+0x28>
 8019d28:	6863      	ldr	r3, [r4, #4]
 8019d2a:	42ab      	cmp	r3, r5
 8019d2c:	d1f9      	bne.n	8019d22 <oid_sig_alg_from_asn1+0xe>
 8019d2e:	462a      	mov	r2, r5
 8019d30:	68b9      	ldr	r1, [r7, #8]
 8019d32:	f010 fbf4 	bl	802a51e <memcmp>
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d1f3      	bne.n	8019d22 <oid_sig_alg_from_asn1+0xe>
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	080329f8 	.word	0x080329f8
 8019d44:	08031e5c 	.word	0x08031e5c

08019d48 <mbedtls_oid_get_attr_short_name>:
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8019d48:	b1d0      	cbz	r0, 8019d80 <mbedtls_oid_get_attr_short_name+0x38>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8019d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d4e:	460e      	mov	r6, r1
 8019d50:	4607      	mov	r7, r0
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8019d52:	6845      	ldr	r5, [r0, #4]
 8019d54:	4c0c      	ldr	r4, [pc, #48]	; (8019d88 <mbedtls_oid_get_attr_short_name+0x40>)
 8019d56:	480d      	ldr	r0, [pc, #52]	; (8019d8c <mbedtls_oid_get_attr_short_name+0x44>)
 8019d58:	e002      	b.n	8019d60 <mbedtls_oid_get_attr_short_name+0x18>
 8019d5a:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8019d5e:	b160      	cbz	r0, 8019d7a <mbedtls_oid_get_attr_short_name+0x32>
 8019d60:	6863      	ldr	r3, [r4, #4]
 8019d62:	42ab      	cmp	r3, r5
 8019d64:	d1f9      	bne.n	8019d5a <mbedtls_oid_get_attr_short_name+0x12>
 8019d66:	462a      	mov	r2, r5
 8019d68:	68b9      	ldr	r1, [r7, #8]
 8019d6a:	f010 fbd8 	bl	802a51e <memcmp>
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d1f3      	bne.n	8019d5a <mbedtls_oid_get_attr_short_name+0x12>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8019d72:	6923      	ldr	r3, [r4, #16]
 8019d74:	6033      	str	r3, [r6, #0]
 8019d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d7a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019d7e:	e7fa      	b.n	8019d76 <mbedtls_oid_get_attr_short_name+0x2e>
 8019d80:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019d84:	4770      	bx	lr
 8019d86:	bf00      	nop
 8019d88:	08032b88 	.word	0x08032b88
 8019d8c:	08031e68 	.word	0x08031e68

08019d90 <mbedtls_oid_get_x509_ext_type>:
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8019d90:	b1d0      	cbz	r0, 8019dc8 <mbedtls_oid_get_x509_ext_type+0x38>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8019d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d96:	460e      	mov	r6, r1
 8019d98:	4607      	mov	r7, r0
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8019d9a:	6845      	ldr	r5, [r0, #4]
 8019d9c:	4c0c      	ldr	r4, [pc, #48]	; (8019dd0 <mbedtls_oid_get_x509_ext_type+0x40>)
 8019d9e:	480d      	ldr	r0, [pc, #52]	; (8019dd4 <mbedtls_oid_get_x509_ext_type+0x44>)
 8019da0:	e002      	b.n	8019da8 <mbedtls_oid_get_x509_ext_type+0x18>
 8019da2:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8019da6:	b160      	cbz	r0, 8019dc2 <mbedtls_oid_get_x509_ext_type+0x32>
 8019da8:	6863      	ldr	r3, [r4, #4]
 8019daa:	42ab      	cmp	r3, r5
 8019dac:	d1f9      	bne.n	8019da2 <mbedtls_oid_get_x509_ext_type+0x12>
 8019dae:	462a      	mov	r2, r5
 8019db0:	68b9      	ldr	r1, [r7, #8]
 8019db2:	f010 fbb4 	bl	802a51e <memcmp>
 8019db6:	2800      	cmp	r0, #0
 8019db8:	d1f3      	bne.n	8019da2 <mbedtls_oid_get_x509_ext_type+0x12>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8019dba:	6923      	ldr	r3, [r4, #16]
 8019dbc:	6033      	str	r3, [r6, #0]
 8019dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dc2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019dc6:	e7fa      	b.n	8019dbe <mbedtls_oid_get_x509_ext_type+0x2e>
 8019dc8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019dcc:	4770      	bx	lr
 8019dce:	bf00      	nop
 8019dd0:	08032b10 	.word	0x08032b10
 8019dd4:	08031e6c 	.word	0x08031e6c

08019dd8 <mbedtls_oid_get_extended_key_usage>:
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8019dd8:	b1d0      	cbz	r0, 8019e10 <mbedtls_oid_get_extended_key_usage+0x38>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8019dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dde:	460e      	mov	r6, r1
 8019de0:	4607      	mov	r7, r0
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8019de2:	6845      	ldr	r5, [r0, #4]
 8019de4:	4c0c      	ldr	r4, [pc, #48]	; (8019e18 <mbedtls_oid_get_extended_key_usage+0x40>)
 8019de6:	480d      	ldr	r0, [pc, #52]	; (8019e1c <mbedtls_oid_get_extended_key_usage+0x44>)
 8019de8:	e002      	b.n	8019df0 <mbedtls_oid_get_extended_key_usage+0x18>
 8019dea:	f854 0f10 	ldr.w	r0, [r4, #16]!
 8019dee:	b160      	cbz	r0, 8019e0a <mbedtls_oid_get_extended_key_usage+0x32>
 8019df0:	6863      	ldr	r3, [r4, #4]
 8019df2:	42ab      	cmp	r3, r5
 8019df4:	d1f9      	bne.n	8019dea <mbedtls_oid_get_extended_key_usage+0x12>
 8019df6:	462a      	mov	r2, r5
 8019df8:	68b9      	ldr	r1, [r7, #8]
 8019dfa:	f010 fb90 	bl	802a51e <memcmp>
 8019dfe:	2800      	cmp	r0, #0
 8019e00:	d1f3      	bne.n	8019dea <mbedtls_oid_get_extended_key_usage+0x12>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8019e02:	68e3      	ldr	r3, [r4, #12]
 8019e04:	6033      	str	r3, [r6, #0]
 8019e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e0a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e0e:	e7fa      	b.n	8019e06 <mbedtls_oid_get_extended_key_usage+0x2e>
 8019e10:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e14:	4770      	bx	lr
 8019e16:	bf00      	nop
 8019e18:	080328ac 	.word	0x080328ac
 8019e1c:	08031e70 	.word	0x08031e70

08019e20 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8019e20:	b510      	push	{r4, lr}
 8019e22:	460c      	mov	r4, r1
 8019e24:	f7ff ff76 	bl	8019d14 <oid_sig_alg_from_asn1>
 8019e28:	b118      	cbz	r0, 8019e32 <mbedtls_oid_get_sig_alg_desc+0x12>
 8019e2a:	68c3      	ldr	r3, [r0, #12]
 8019e2c:	6023      	str	r3, [r4, #0]
 8019e2e:	2000      	movs	r0, #0
 8019e30:	bd10      	pop	{r4, pc}
 8019e32:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e36:	e7fb      	b.n	8019e30 <mbedtls_oid_get_sig_alg_desc+0x10>

08019e38 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	460d      	mov	r5, r1
 8019e3c:	4614      	mov	r4, r2
 8019e3e:	f7ff ff69 	bl	8019d14 <oid_sig_alg_from_asn1>
 8019e42:	b128      	cbz	r0, 8019e50 <mbedtls_oid_get_sig_alg+0x18>
 8019e44:	7c02      	ldrb	r2, [r0, #16]
 8019e46:	702a      	strb	r2, [r5, #0]
 8019e48:	7c43      	ldrb	r3, [r0, #17]
 8019e4a:	7023      	strb	r3, [r4, #0]
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	bd38      	pop	{r3, r4, r5, pc}
 8019e50:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e54:	e7fb      	b.n	8019e4e <mbedtls_oid_get_sig_alg+0x16>
	...

08019e58 <mbedtls_oid_get_pk_alg>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8019e58:	b1d0      	cbz	r0, 8019e90 <mbedtls_oid_get_pk_alg+0x38>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8019e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e5e:	460e      	mov	r6, r1
 8019e60:	4607      	mov	r7, r0
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8019e62:	6845      	ldr	r5, [r0, #4]
 8019e64:	4c0c      	ldr	r4, [pc, #48]	; (8019e98 <mbedtls_oid_get_pk_alg+0x40>)
 8019e66:	480d      	ldr	r0, [pc, #52]	; (8019e9c <mbedtls_oid_get_pk_alg+0x44>)
 8019e68:	e002      	b.n	8019e70 <mbedtls_oid_get_pk_alg+0x18>
 8019e6a:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8019e6e:	b160      	cbz	r0, 8019e8a <mbedtls_oid_get_pk_alg+0x32>
 8019e70:	6863      	ldr	r3, [r4, #4]
 8019e72:	42ab      	cmp	r3, r5
 8019e74:	d1f9      	bne.n	8019e6a <mbedtls_oid_get_pk_alg+0x12>
 8019e76:	462a      	mov	r2, r5
 8019e78:	68b9      	ldr	r1, [r7, #8]
 8019e7a:	f010 fb50 	bl	802a51e <memcmp>
 8019e7e:	2800      	cmp	r0, #0
 8019e80:	d1f3      	bne.n	8019e6a <mbedtls_oid_get_pk_alg+0x12>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8019e82:	7c23      	ldrb	r3, [r4, #16]
 8019e84:	7033      	strb	r3, [r6, #0]
 8019e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e8a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e8e:	e7fa      	b.n	8019e86 <mbedtls_oid_get_pk_alg+0x2e>
 8019e90:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019e94:	4770      	bx	lr
 8019e96:	bf00      	nop
 8019e98:	080329a8 	.word	0x080329a8
 8019e9c:	08031e7c 	.word	0x08031e7c

08019ea0 <mbedtls_oid_get_ec_grp>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8019ea0:	b1d0      	cbz	r0, 8019ed8 <mbedtls_oid_get_ec_grp+0x38>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8019ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea6:	460e      	mov	r6, r1
 8019ea8:	4607      	mov	r7, r0
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8019eaa:	6845      	ldr	r5, [r0, #4]
 8019eac:	4c0c      	ldr	r4, [pc, #48]	; (8019ee0 <mbedtls_oid_get_ec_grp+0x40>)
 8019eae:	480d      	ldr	r0, [pc, #52]	; (8019ee4 <mbedtls_oid_get_ec_grp+0x44>)
 8019eb0:	e002      	b.n	8019eb8 <mbedtls_oid_get_ec_grp+0x18>
 8019eb2:	f854 0f14 	ldr.w	r0, [r4, #20]!
 8019eb6:	b160      	cbz	r0, 8019ed2 <mbedtls_oid_get_ec_grp+0x32>
 8019eb8:	6863      	ldr	r3, [r4, #4]
 8019eba:	42ab      	cmp	r3, r5
 8019ebc:	d1f9      	bne.n	8019eb2 <mbedtls_oid_get_ec_grp+0x12>
 8019ebe:	462a      	mov	r2, r5
 8019ec0:	68b9      	ldr	r1, [r7, #8]
 8019ec2:	f010 fb2c 	bl	802a51e <memcmp>
 8019ec6:	2800      	cmp	r0, #0
 8019ec8:	d1f3      	bne.n	8019eb2 <mbedtls_oid_get_ec_grp+0x12>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8019eca:	7c23      	ldrb	r3, [r4, #16]
 8019ecc:	7033      	strb	r3, [r6, #0]
 8019ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ed2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019ed6:	e7fa      	b.n	8019ece <mbedtls_oid_get_ec_grp+0x2e>
 8019ed8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019edc:	4770      	bx	lr
 8019ede:	bf00      	nop
 8019ee0:	08032884 	.word	0x08032884
 8019ee4:	08031e88 	.word	0x08031e88

08019ee8 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8019ee8:	b470      	push	{r4, r5, r6}
 8019eea:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <mbedtls_oid_get_oid_by_md+0x28>)
 8019eec:	4c09      	ldr	r4, [pc, #36]	; (8019f14 <mbedtls_oid_get_oid_by_md+0x2c>)
 8019eee:	7c1d      	ldrb	r5, [r3, #16]
 8019ef0:	4285      	cmp	r5, r0
 8019ef2:	d006      	beq.n	8019f02 <mbedtls_oid_get_oid_by_md+0x1a>
 8019ef4:	f853 4f14 	ldr.w	r4, [r3, #20]!
 8019ef8:	2c00      	cmp	r4, #0
 8019efa:	d1f8      	bne.n	8019eee <mbedtls_oid_get_oid_by_md+0x6>
 8019efc:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8019f00:	e003      	b.n	8019f0a <mbedtls_oid_get_oid_by_md+0x22>
 8019f02:	600c      	str	r4, [r1, #0]
 8019f04:	685b      	ldr	r3, [r3, #4]
 8019f06:	6013      	str	r3, [r2, #0]
 8019f08:	2000      	movs	r0, #0
 8019f0a:	bc70      	pop	{r4, r5, r6}
 8019f0c:	4770      	bx	lr
 8019f0e:	bf00      	nop
 8019f10:	0803291c 	.word	0x0803291c
 8019f14:	08031e94 	.word	0x08031e94

08019f18 <mbedtls_pem_init>:
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 8019f18:	2300      	movs	r3, #0
 8019f1a:	6003      	str	r3, [r0, #0]
 8019f1c:	6043      	str	r3, [r0, #4]
 8019f1e:	6083      	str	r3, [r0, #8]
}
 8019f20:	4770      	bx	lr
	...

08019f24 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8019f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f28:	b085      	sub	sp, #20
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d06c      	beq.n	801a008 <mbedtls_pem_read_buffer+0xe4>
 8019f2e:	460c      	mov	r4, r1
 8019f30:	4690      	mov	r8, r2
 8019f32:	461d      	mov	r5, r3
 8019f34:	4607      	mov	r7, r0
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8019f36:	4618      	mov	r0, r3
 8019f38:	f011 f87d 	bl	802b036 <strstr>

    if( s1 == NULL )
 8019f3c:	4681      	mov	r9, r0
 8019f3e:	2800      	cmp	r0, #0
 8019f40:	d064      	beq.n	801a00c <mbedtls_pem_read_buffer+0xe8>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 8019f42:	4641      	mov	r1, r8
 8019f44:	4628      	mov	r0, r5
 8019f46:	f011 f876 	bl	802b036 <strstr>

    if( s2 == NULL || s2 <= s1 )
 8019f4a:	4606      	mov	r6, r0
 8019f4c:	2800      	cmp	r0, #0
 8019f4e:	d05f      	beq.n	801a010 <mbedtls_pem_read_buffer+0xec>
 8019f50:	4581      	cmp	r9, r0
 8019f52:	d25f      	bcs.n	801a014 <mbedtls_pem_read_buffer+0xf0>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8019f54:	4620      	mov	r0, r4
 8019f56:	f7e6 f955 	bl	8000204 <strlen>
 8019f5a:	eb09 0100 	add.w	r1, r9, r0
    if( *s1 == ' '  ) s1++;
 8019f5e:	f819 3000 	ldrb.w	r3, [r9, r0]
 8019f62:	2b20      	cmp	r3, #32
 8019f64:	bf08      	it	eq
 8019f66:	3101      	addeq	r1, #1
    if( *s1 == '\r' ) s1++;
 8019f68:	780b      	ldrb	r3, [r1, #0]
 8019f6a:	2b0d      	cmp	r3, #13
 8019f6c:	bf08      	it	eq
 8019f6e:	3101      	addeq	r1, #1
    if( *s1 == '\n' ) s1++;
 8019f70:	780b      	ldrb	r3, [r1, #0]
 8019f72:	2b0a      	cmp	r3, #10
 8019f74:	d150      	bne.n	801a018 <mbedtls_pem_read_buffer+0xf4>
 8019f76:	1c4c      	adds	r4, r1, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 8019f78:	4640      	mov	r0, r8
 8019f7a:	f7e6 f943 	bl	8000204 <strlen>
 8019f7e:	1832      	adds	r2, r6, r0
    if( *end == ' '  ) end++;
 8019f80:	5c33      	ldrb	r3, [r6, r0]
 8019f82:	2b20      	cmp	r3, #32
 8019f84:	bf08      	it	eq
 8019f86:	3201      	addeq	r2, #1
    if( *end == '\r' ) end++;
 8019f88:	7813      	ldrb	r3, [r2, #0]
 8019f8a:	2b0d      	cmp	r3, #13
 8019f8c:	bf08      	it	eq
 8019f8e:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
 8019f90:	7813      	ldrb	r3, [r2, #0]
 8019f92:	2b0a      	cmp	r3, #10
 8019f94:	bf08      	it	eq
 8019f96:	3201      	addeq	r2, #1
    *use_len = end - data;
 8019f98:	1b52      	subs	r2, r2, r5
 8019f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f9c:	601a      	str	r2, [r3, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8019f9e:	1b35      	subs	r5, r6, r4
 8019fa0:	2d15      	cmp	r5, #21
 8019fa2:	dd06      	ble.n	8019fb2 <mbedtls_pem_read_buffer+0x8e>
 8019fa4:	2216      	movs	r2, #22
 8019fa6:	4921      	ldr	r1, [pc, #132]	; (801a02c <mbedtls_pem_read_buffer+0x108>)
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f010 fab8 	bl	802a51e <memcmp>
 8019fae:	2800      	cmp	r0, #0
 8019fb0:	d034      	beq.n	801a01c <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 8019fb2:	42a6      	cmp	r6, r4
 8019fb4:	d934      	bls.n	801a020 <mbedtls_pem_read_buffer+0xfc>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 8019fb6:	9500      	str	r5, [sp, #0]
 8019fb8:	4623      	mov	r3, r4
 8019fba:	aa03      	add	r2, sp, #12
 8019fbc:	2100      	movs	r1, #0
 8019fbe:	4608      	mov	r0, r1
 8019fc0:	f7f8 f962 	bl	8012288 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 8019fc4:	f110 0f2c 	cmn.w	r0, #44	; 0x2c
 8019fc8:	d02c      	beq.n	801a024 <mbedtls_pem_read_buffer+0x100>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8019fca:	9903      	ldr	r1, [sp, #12]
 8019fcc:	2001      	movs	r0, #1
 8019fce:	f00e ff5d 	bl	8028e8c <mbedtls_calloc>
 8019fd2:	4606      	mov	r6, r0
 8019fd4:	b340      	cbz	r0, 801a028 <mbedtls_pem_read_buffer+0x104>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8019fd6:	9500      	str	r5, [sp, #0]
 8019fd8:	4623      	mov	r3, r4
 8019fda:	aa03      	add	r2, sp, #12
 8019fdc:	9903      	ldr	r1, [sp, #12]
 8019fde:	f7f8 f953 	bl	8012288 <mbedtls_base64_decode>
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	b930      	cbnz	r0, 8019ff4 <mbedtls_pem_read_buffer+0xd0>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 8019fe6:	603e      	str	r6, [r7, #0]
    ctx->buflen = len;
 8019fe8:	9b03      	ldr	r3, [sp, #12]
 8019fea:	607b      	str	r3, [r7, #4]

    return( 0 );
}
 8019fec:	4620      	mov	r0, r4
 8019fee:	b005      	add	sp, #20
 8019ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_platform_zeroize( buf, len );
 8019ff4:	9903      	ldr	r1, [sp, #12]
 8019ff6:	4630      	mov	r0, r6
 8019ff8:	f000 ffa4 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( buf );
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	f00e ff53 	bl	8028ea8 <mbedtls_free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 801a002:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100
 801a006:	e7f1      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 801a008:	4c09      	ldr	r4, [pc, #36]	; (801a030 <mbedtls_pem_read_buffer+0x10c>)
 801a00a:	e7ef      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 801a00c:	4c09      	ldr	r4, [pc, #36]	; (801a034 <mbedtls_pem_read_buffer+0x110>)
 801a00e:	e7ed      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 801a010:	4c08      	ldr	r4, [pc, #32]	; (801a034 <mbedtls_pem_read_buffer+0x110>)
 801a012:	e7eb      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
 801a014:	4c07      	ldr	r4, [pc, #28]	; (801a034 <mbedtls_pem_read_buffer+0x110>)
 801a016:	e7e9      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 801a018:	4c06      	ldr	r4, [pc, #24]	; (801a034 <mbedtls_pem_read_buffer+0x110>)
 801a01a:	e7e7      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 801a01c:	4c06      	ldr	r4, [pc, #24]	; (801a038 <mbedtls_pem_read_buffer+0x114>)
 801a01e:	e7e5      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 801a020:	4c06      	ldr	r4, [pc, #24]	; (801a03c <mbedtls_pem_read_buffer+0x118>)
 801a022:	e7e3      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 801a024:	4c06      	ldr	r4, [pc, #24]	; (801a040 <mbedtls_pem_read_buffer+0x11c>)
 801a026:	e7e1      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 801a028:	4c06      	ldr	r4, [pc, #24]	; (801a044 <mbedtls_pem_read_buffer+0x120>)
 801a02a:	e7df      	b.n	8019fec <mbedtls_pem_read_buffer+0xc8>
 801a02c:	08032d18 	.word	0x08032d18
 801a030:	ffffeb80 	.word	0xffffeb80
 801a034:	ffffef80 	.word	0xffffef80
 801a038:	ffffec00 	.word	0xffffec00
 801a03c:	ffffef00 	.word	0xffffef00
 801a040:	ffffeed4 	.word	0xffffeed4
 801a044:	ffffee80 	.word	0xffffee80

0801a048 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 801a048:	b510      	push	{r4, lr}
 801a04a:	4604      	mov	r4, r0
    if ( ctx->buf != NULL )
 801a04c:	6800      	ldr	r0, [r0, #0]
 801a04e:	b128      	cbz	r0, 801a05c <mbedtls_pem_free+0x14>
    {
        mbedtls_platform_zeroize( ctx->buf, ctx->buflen );
 801a050:	6861      	ldr	r1, [r4, #4]
 801a052:	f000 ff77 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ctx->buf );
 801a056:	6820      	ldr	r0, [r4, #0]
 801a058:	f00e ff26 	bl	8028ea8 <mbedtls_free>
    }
    mbedtls_free( ctx->info );
 801a05c:	68a0      	ldr	r0, [r4, #8]
 801a05e:	f00e ff23 	bl	8028ea8 <mbedtls_free>

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pem_context ) );
 801a062:	210c      	movs	r1, #12
 801a064:	4620      	mov	r0, r4
 801a066:	f000 ff6d 	bl	801af44 <mbedtls_platform_zeroize>
}
 801a06a:	bd10      	pop	{r4, pc}

0801a06c <mbedtls_pk_init>:
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    PK_VALIDATE( ctx != NULL );

    ctx->pk_info = NULL;
 801a06c:	2300      	movs	r3, #0
 801a06e:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 801a070:	6043      	str	r3, [r0, #4]
}
 801a072:	4770      	bx	lr

0801a074 <mbedtls_pk_free>:
/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 801a074:	b158      	cbz	r0, 801a08e <mbedtls_pk_free+0x1a>
{
 801a076:	b510      	push	{r4, lr}
 801a078:	4604      	mov	r4, r0
        return;

    if ( ctx->pk_info != NULL )
 801a07a:	6803      	ldr	r3, [r0, #0]
 801a07c:	b113      	cbz	r3, 801a084 <mbedtls_pk_free+0x10>
        ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 801a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a080:	6840      	ldr	r0, [r0, #4]
 801a082:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_pk_context ) );
 801a084:	2108      	movs	r1, #8
 801a086:	4620      	mov	r0, r4
 801a088:	f000 ff5c 	bl	801af44 <mbedtls_platform_zeroize>
}
 801a08c:	bd10      	pop	{r4, pc}
 801a08e:	4770      	bx	lr

0801a090 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 801a090:	3801      	subs	r0, #1
 801a092:	2803      	cmp	r0, #3
 801a094:	d809      	bhi.n	801a0aa <mbedtls_pk_info_from_type+0x1a>
 801a096:	e8df f000 	tbb	[pc, r0]
 801a09a:	020a      	.short	0x020a
 801a09c:	0604      	.short	0x0604
        case MBEDTLS_PK_ECKEY_DH:
            return( &mbedtls_eckeydh_info );
#endif
#if defined(MBEDTLS_ECDSA_C)
        case MBEDTLS_PK_ECDSA:
            return( &mbedtls_ecdsa_info );
 801a09e:	4805      	ldr	r0, [pc, #20]	; (801a0b4 <mbedtls_pk_info_from_type+0x24>)
 801a0a0:	4770      	bx	lr
            return( &mbedtls_eckeydh_info );
 801a0a2:	4805      	ldr	r0, [pc, #20]	; (801a0b8 <mbedtls_pk_info_from_type+0x28>)
 801a0a4:	4770      	bx	lr
            return( &mbedtls_ecdsa_info );
 801a0a6:	4805      	ldr	r0, [pc, #20]	; (801a0bc <mbedtls_pk_info_from_type+0x2c>)
 801a0a8:	4770      	bx	lr
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
 801a0aa:	2000      	movs	r0, #0
 801a0ac:	4770      	bx	lr
            return( &mbedtls_rsa_info );
 801a0ae:	4804      	ldr	r0, [pc, #16]	; (801a0c0 <mbedtls_pk_info_from_type+0x30>)
    }
}
 801a0b0:	4770      	bx	lr
 801a0b2:	bf00      	nop
 801a0b4:	08032d98 	.word	0x08032d98
 801a0b8:	08032dc8 	.word	0x08032dc8
 801a0bc:	08032d68 	.word	0x08032d68
 801a0c0:	08032df8 	.word	0x08032df8

0801a0c4 <mbedtls_pk_setup>:
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    PK_VALIDATE_RET( ctx != NULL );
    if( info == NULL || ctx->pk_info != NULL )
 801a0c4:	b159      	cbz	r1, 801a0de <mbedtls_pk_setup+0x1a>
{
 801a0c6:	b538      	push	{r3, r4, r5, lr}
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	460d      	mov	r5, r1
    if( info == NULL || ctx->pk_info != NULL )
 801a0cc:	6803      	ldr	r3, [r0, #0]
 801a0ce:	b943      	cbnz	r3, 801a0e2 <mbedtls_pk_setup+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 801a0d0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801a0d2:	4798      	blx	r3
 801a0d4:	6060      	str	r0, [r4, #4]
 801a0d6:	b130      	cbz	r0, 801a0e6 <mbedtls_pk_setup+0x22>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 801a0d8:	6025      	str	r5, [r4, #0]

    return( 0 );
 801a0da:	2000      	movs	r0, #0
}
 801a0dc:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a0de:	4803      	ldr	r0, [pc, #12]	; (801a0ec <mbedtls_pk_setup+0x28>)
}
 801a0e0:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a0e2:	4802      	ldr	r0, [pc, #8]	; (801a0ec <mbedtls_pk_setup+0x28>)
 801a0e4:	e7fa      	b.n	801a0dc <mbedtls_pk_setup+0x18>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 801a0e6:	4802      	ldr	r0, [pc, #8]	; (801a0f0 <mbedtls_pk_setup+0x2c>)
 801a0e8:	e7f8      	b.n	801a0dc <mbedtls_pk_setup+0x18>
 801a0ea:	bf00      	nop
 801a0ec:	ffffc180 	.word	0xffffc180
 801a0f0:	ffffc080 	.word	0xffffc080

0801a0f4 <mbedtls_pk_can_do>:
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* A context with null pk_info is not set up yet and can't do anything.
     * For backward compatibility, also accept NULL instead of a context
     * pointer. */
    if( ctx == NULL || ctx->pk_info == NULL )
 801a0f4:	b130      	cbz	r0, 801a104 <mbedtls_pk_can_do+0x10>
{
 801a0f6:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 801a0f8:	6803      	ldr	r3, [r0, #0]
 801a0fa:	b12b      	cbz	r3, 801a108 <mbedtls_pk_can_do+0x14>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 801a0fc:	68db      	ldr	r3, [r3, #12]
 801a0fe:	4608      	mov	r0, r1
 801a100:	4798      	blx	r3
}
 801a102:	bd08      	pop	{r3, pc}
        return( 0 );
 801a104:	2000      	movs	r0, #0
}
 801a106:	4770      	bx	lr
        return( 0 );
 801a108:	2000      	movs	r0, #0
 801a10a:	e7fa      	b.n	801a102 <mbedtls_pk_can_do+0xe>

0801a10c <mbedtls_pk_verify_restartable>:
int mbedtls_pk_verify_restartable( mbedtls_pk_context *ctx,
               mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len,
               mbedtls_pk_restart_ctx *rs_ctx )
{
 801a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a10e:	b083      	sub	sp, #12
 801a110:	460d      	mov	r5, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 801a112:	6801      	ldr	r1, [r0, #0]
 801a114:	b1b9      	cbz	r1, 801a146 <mbedtls_pk_verify_restartable+0x3a>
 801a116:	4604      	mov	r4, r0
 801a118:	4617      	mov	r7, r2
    if( *hash_len != 0 )
 801a11a:	b163      	cbz	r3, 801a136 <mbedtls_pk_verify_restartable+0x2a>
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->verify_func == NULL )
 801a11c:	6822      	ldr	r2, [r4, #0]
 801a11e:	6916      	ldr	r6, [r2, #16]
 801a120:	b1ae      	cbz	r6, 801a14e <mbedtls_pk_verify_restartable+0x42>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 801a122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a124:	9201      	str	r2, [sp, #4]
 801a126:	9a08      	ldr	r2, [sp, #32]
 801a128:	9200      	str	r2, [sp, #0]
 801a12a:	463a      	mov	r2, r7
 801a12c:	4629      	mov	r1, r5
 801a12e:	6860      	ldr	r0, [r4, #4]
 801a130:	47b0      	blx	r6
                                       sig, sig_len ) );
}
 801a132:	b003      	add	sp, #12
 801a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 801a136:	4628      	mov	r0, r5
 801a138:	f7fe fe7c 	bl	8018e34 <mbedtls_md_info_from_type>
 801a13c:	b128      	cbz	r0, 801a14a <mbedtls_pk_verify_restartable+0x3e>
    *hash_len = mbedtls_md_get_size( md_info );
 801a13e:	f7fe ffef 	bl	8019120 <mbedtls_md_get_size>
 801a142:	4603      	mov	r3, r0
    return( 0 );
 801a144:	e7ea      	b.n	801a11c <mbedtls_pk_verify_restartable+0x10>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a146:	4803      	ldr	r0, [pc, #12]	; (801a154 <mbedtls_pk_verify_restartable+0x48>)
 801a148:	e7f3      	b.n	801a132 <mbedtls_pk_verify_restartable+0x26>
 801a14a:	4802      	ldr	r0, [pc, #8]	; (801a154 <mbedtls_pk_verify_restartable+0x48>)
 801a14c:	e7f1      	b.n	801a132 <mbedtls_pk_verify_restartable+0x26>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a14e:	4802      	ldr	r0, [pc, #8]	; (801a158 <mbedtls_pk_verify_restartable+0x4c>)
 801a150:	e7ef      	b.n	801a132 <mbedtls_pk_verify_restartable+0x26>
 801a152:	bf00      	nop
 801a154:	ffffc180 	.word	0xffffc180
 801a158:	ffffc100 	.word	0xffffc100

0801a15c <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 801a15c:	b510      	push	{r4, lr}
 801a15e:	b084      	sub	sp, #16
    return( mbedtls_pk_verify_restartable( ctx, md_alg, hash, hash_len,
 801a160:	2400      	movs	r4, #0
 801a162:	9402      	str	r4, [sp, #8]
 801a164:	9c07      	ldr	r4, [sp, #28]
 801a166:	9401      	str	r4, [sp, #4]
 801a168:	9c06      	ldr	r4, [sp, #24]
 801a16a:	9400      	str	r4, [sp, #0]
 801a16c:	f7ff ffce 	bl	801a10c <mbedtls_pk_verify_restartable>
                                           sig, sig_len, NULL ) );
}
 801a170:	b004      	add	sp, #16
 801a172:	bd10      	pop	{r4, pc}

0801a174 <mbedtls_pk_sign_restartable>:
             mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_pk_restart_ctx *rs_ctx )
{
 801a174:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a176:	b085      	sub	sp, #20
 801a178:	460d      	mov	r5, r1
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( ( md_alg == MBEDTLS_MD_NONE && hash_len == 0 ) ||
                     hash != NULL );
    PK_VALIDATE_RET( sig != NULL );

    if( ctx->pk_info == NULL ||
 801a17a:	6801      	ldr	r1, [r0, #0]
 801a17c:	b1d9      	cbz	r1, 801a1b6 <mbedtls_pk_sign_restartable+0x42>
 801a17e:	4604      	mov	r4, r0
 801a180:	4617      	mov	r7, r2
    if( *hash_len != 0 )
 801a182:	b183      	cbz	r3, 801a1a6 <mbedtls_pk_sign_restartable+0x32>
    }
#else /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */
    (void) rs_ctx;
#endif /* MBEDTLS_ECDSA_C && MBEDTLS_ECP_RESTARTABLE */

    if( ctx->pk_info->sign_func == NULL )
 801a184:	6822      	ldr	r2, [r4, #0]
 801a186:	6956      	ldr	r6, [r2, #20]
 801a188:	b1ce      	cbz	r6, 801a1be <mbedtls_pk_sign_restartable+0x4a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 801a18a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a18c:	9203      	str	r2, [sp, #12]
 801a18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a190:	9202      	str	r2, [sp, #8]
 801a192:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a194:	9201      	str	r2, [sp, #4]
 801a196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a198:	9200      	str	r2, [sp, #0]
 801a19a:	463a      	mov	r2, r7
 801a19c:	4629      	mov	r1, r5
 801a19e:	6860      	ldr	r0, [r4, #4]
 801a1a0:	47b0      	blx	r6
                                     sig, sig_len, f_rng, p_rng ) );
}
 801a1a2:	b005      	add	sp, #20
 801a1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 801a1a6:	4628      	mov	r0, r5
 801a1a8:	f7fe fe44 	bl	8018e34 <mbedtls_md_info_from_type>
 801a1ac:	b128      	cbz	r0, 801a1ba <mbedtls_pk_sign_restartable+0x46>
    *hash_len = mbedtls_md_get_size( md_info );
 801a1ae:	f7fe ffb7 	bl	8019120 <mbedtls_md_get_size>
 801a1b2:	4603      	mov	r3, r0
    return( 0 );
 801a1b4:	e7e6      	b.n	801a184 <mbedtls_pk_sign_restartable+0x10>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a1b6:	4803      	ldr	r0, [pc, #12]	; (801a1c4 <mbedtls_pk_sign_restartable+0x50>)
 801a1b8:	e7f3      	b.n	801a1a2 <mbedtls_pk_sign_restartable+0x2e>
 801a1ba:	4802      	ldr	r0, [pc, #8]	; (801a1c4 <mbedtls_pk_sign_restartable+0x50>)
 801a1bc:	e7f1      	b.n	801a1a2 <mbedtls_pk_sign_restartable+0x2e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a1be:	4802      	ldr	r0, [pc, #8]	; (801a1c8 <mbedtls_pk_sign_restartable+0x54>)
 801a1c0:	e7ef      	b.n	801a1a2 <mbedtls_pk_sign_restartable+0x2e>
 801a1c2:	bf00      	nop
 801a1c4:	ffffc180 	.word	0xffffc180
 801a1c8:	ffffc100 	.word	0xffffc100

0801a1cc <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 801a1cc:	b510      	push	{r4, lr}
 801a1ce:	b086      	sub	sp, #24
    return( mbedtls_pk_sign_restartable( ctx, md_alg, hash, hash_len,
 801a1d0:	2400      	movs	r4, #0
 801a1d2:	9404      	str	r4, [sp, #16]
 801a1d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a1d6:	9403      	str	r4, [sp, #12]
 801a1d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a1da:	9402      	str	r4, [sp, #8]
 801a1dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a1de:	9401      	str	r4, [sp, #4]
 801a1e0:	9c08      	ldr	r4, [sp, #32]
 801a1e2:	9400      	str	r4, [sp, #0]
 801a1e4:	f7ff ffc6 	bl	801a174 <mbedtls_pk_sign_restartable>
                                         sig, sig_len, f_rng, p_rng, NULL ) );
}
 801a1e8:	b006      	add	sp, #24
 801a1ea:	bd10      	pop	{r4, pc}

0801a1ec <mbedtls_pk_decrypt>:
 */
int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 801a1ec:	b530      	push	{r4, r5, lr}
 801a1ee:	b085      	sub	sp, #20
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
 801a1f0:	6804      	ldr	r4, [r0, #0]
 801a1f2:	b16c      	cbz	r4, 801a210 <mbedtls_pk_decrypt+0x24>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->decrypt_func == NULL )
 801a1f4:	69a4      	ldr	r4, [r4, #24]
 801a1f6:	b16c      	cbz	r4, 801a214 <mbedtls_pk_decrypt+0x28>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,
 801a1f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a1fa:	9503      	str	r5, [sp, #12]
 801a1fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a1fe:	9502      	str	r5, [sp, #8]
 801a200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a202:	9501      	str	r5, [sp, #4]
 801a204:	9d08      	ldr	r5, [sp, #32]
 801a206:	9500      	str	r5, [sp, #0]
 801a208:	6840      	ldr	r0, [r0, #4]
 801a20a:	47a0      	blx	r4
                output, olen, osize, f_rng, p_rng ) );
}
 801a20c:	b005      	add	sp, #20
 801a20e:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a210:	4801      	ldr	r0, [pc, #4]	; (801a218 <mbedtls_pk_decrypt+0x2c>)
 801a212:	e7fb      	b.n	801a20c <mbedtls_pk_decrypt+0x20>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a214:	4801      	ldr	r0, [pc, #4]	; (801a21c <mbedtls_pk_decrypt+0x30>)
 801a216:	e7f9      	b.n	801a20c <mbedtls_pk_decrypt+0x20>
 801a218:	ffffc180 	.word	0xffffc180
 801a21c:	ffffc100 	.word	0xffffc100

0801a220 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 801a220:	b530      	push	{r4, r5, lr}
 801a222:	b085      	sub	sp, #20
    PK_VALIDATE_RET( ctx != NULL );
    PK_VALIDATE_RET( input != NULL || ilen == 0 );
    PK_VALIDATE_RET( output != NULL || osize == 0 );
    PK_VALIDATE_RET( olen != NULL );

    if( ctx->pk_info == NULL )
 801a224:	6804      	ldr	r4, [r0, #0]
 801a226:	b16c      	cbz	r4, 801a244 <mbedtls_pk_encrypt+0x24>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 801a228:	69e4      	ldr	r4, [r4, #28]
 801a22a:	b16c      	cbz	r4, 801a248 <mbedtls_pk_encrypt+0x28>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 801a22c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a22e:	9503      	str	r5, [sp, #12]
 801a230:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a232:	9502      	str	r5, [sp, #8]
 801a234:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801a236:	9501      	str	r5, [sp, #4]
 801a238:	9d08      	ldr	r5, [sp, #32]
 801a23a:	9500      	str	r5, [sp, #0]
 801a23c:	6840      	ldr	r0, [r0, #4]
 801a23e:	47a0      	blx	r4
                output, olen, osize, f_rng, p_rng ) );
}
 801a240:	b005      	add	sp, #20
 801a242:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a244:	4801      	ldr	r0, [pc, #4]	; (801a24c <mbedtls_pk_encrypt+0x2c>)
 801a246:	e7fb      	b.n	801a240 <mbedtls_pk_encrypt+0x20>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a248:	4801      	ldr	r0, [pc, #4]	; (801a250 <mbedtls_pk_encrypt+0x30>)
 801a24a:	e7f9      	b.n	801a240 <mbedtls_pk_encrypt+0x20>
 801a24c:	ffffc180 	.word	0xffffc180
 801a250:	ffffc100 	.word	0xffffc100

0801a254 <mbedtls_pk_get_bitlen>:
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    /* For backward compatibility, accept NULL or a context that
     * isn't set up yet, and return a fake value that should be safe. */
    if( ctx == NULL || ctx->pk_info == NULL )
 801a254:	b130      	cbz	r0, 801a264 <mbedtls_pk_get_bitlen+0x10>
{
 801a256:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 801a258:	6802      	ldr	r2, [r0, #0]
 801a25a:	b12a      	cbz	r2, 801a268 <mbedtls_pk_get_bitlen+0x14>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 801a25c:	6892      	ldr	r2, [r2, #8]
 801a25e:	6840      	ldr	r0, [r0, #4]
 801a260:	4790      	blx	r2
}
 801a262:	bd08      	pop	{r3, pc}
        return( 0 );
 801a264:	2000      	movs	r0, #0
}
 801a266:	4770      	bx	lr
        return( 0 );
 801a268:	2000      	movs	r0, #0
 801a26a:	e7fa      	b.n	801a262 <mbedtls_pk_get_bitlen+0xe>

0801a26c <mbedtls_pk_verify_ext>:
{
 801a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a26e:	b087      	sub	sp, #28
 801a270:	4614      	mov	r4, r2
    if( ctx->pk_info == NULL )
 801a272:	6812      	ldr	r2, [r2, #0]
 801a274:	2a00      	cmp	r2, #0
 801a276:	d042      	beq.n	801a2fe <mbedtls_pk_verify_ext+0x92>
 801a278:	4607      	mov	r7, r0
 801a27a:	460e      	mov	r6, r1
 801a27c:	461d      	mov	r5, r3
    if( ! mbedtls_pk_can_do( ctx, type ) )
 801a27e:	4601      	mov	r1, r0
 801a280:	4620      	mov	r0, r4
 801a282:	f7ff ff37 	bl	801a0f4 <mbedtls_pk_can_do>
 801a286:	2800      	cmp	r0, #0
 801a288:	d03b      	beq.n	801a302 <mbedtls_pk_verify_ext+0x96>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 801a28a:	2f06      	cmp	r7, #6
 801a28c:	d00f      	beq.n	801a2ae <mbedtls_pk_verify_ext+0x42>
    if( options != NULL )
 801a28e:	2e00      	cmp	r6, #0
 801a290:	d13d      	bne.n	801a30e <mbedtls_pk_verify_ext+0xa2>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 801a292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a294:	9301      	str	r3, [sp, #4]
 801a296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a298:	9300      	str	r3, [sp, #0]
 801a29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a29c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a29e:	4629      	mov	r1, r5
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	f7ff ff5b 	bl	801a15c <mbedtls_pk_verify>
 801a2a6:	4605      	mov	r5, r0
}
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	b007      	add	sp, #28
 801a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( options == NULL )
 801a2ae:	b356      	cbz	r6, 801a306 <mbedtls_pk_verify_ext+0x9a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f7ff ffcf 	bl	801a254 <mbedtls_pk_get_bitlen>
 801a2b6:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 801a2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2ba:	ebb3 0fd0 	cmp.w	r3, r0, lsr #3
 801a2be:	d324      	bcc.n	801a30a <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 801a2c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2c2:	9305      	str	r3, [sp, #20]
 801a2c4:	6873      	ldr	r3, [r6, #4]
 801a2c6:	9304      	str	r3, [sp, #16]
 801a2c8:	7833      	ldrb	r3, [r6, #0]
 801a2ca:	9303      	str	r3, [sp, #12]
 801a2cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2ce:	9302      	str	r3, [sp, #8]
 801a2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2d2:	9301      	str	r3, [sp, #4]
 801a2d4:	9500      	str	r5, [sp, #0]
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	461a      	mov	r2, r3
 801a2da:	4619      	mov	r1, r3
 801a2dc:	6860      	ldr	r0, [r4, #4]
 801a2de:	f002 fba3 	bl	801ca28 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 801a2e2:	4605      	mov	r5, r0
 801a2e4:	2800      	cmp	r0, #0
 801a2e6:	d1df      	bne.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f7ff ffb3 	bl	801a254 <mbedtls_pk_get_bitlen>
 801a2ee:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 801a2f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a2f2:	ebb3 0fd0 	cmp.w	r3, r0, lsr #3
 801a2f6:	4b07      	ldr	r3, [pc, #28]	; (801a314 <mbedtls_pk_verify_ext+0xa8>)
 801a2f8:	bf88      	it	hi
 801a2fa:	461d      	movhi	r5, r3
 801a2fc:	e7d4      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a2fe:	4d06      	ldr	r5, [pc, #24]	; (801a318 <mbedtls_pk_verify_ext+0xac>)
 801a300:	e7d2      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a302:	4d06      	ldr	r5, [pc, #24]	; (801a31c <mbedtls_pk_verify_ext+0xb0>)
 801a304:	e7d0      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a306:	4d04      	ldr	r5, [pc, #16]	; (801a318 <mbedtls_pk_verify_ext+0xac>)
 801a308:	e7ce      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 801a30a:	4d05      	ldr	r5, [pc, #20]	; (801a320 <mbedtls_pk_verify_ext+0xb4>)
 801a30c:	e7cc      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a30e:	4d02      	ldr	r5, [pc, #8]	; (801a318 <mbedtls_pk_verify_ext+0xac>)
 801a310:	e7ca      	b.n	801a2a8 <mbedtls_pk_verify_ext+0x3c>
 801a312:	bf00      	nop
 801a314:	ffffc700 	.word	0xffffc700
 801a318:	ffffc180 	.word	0xffffc180
 801a31c:	ffffc100 	.word	0xffffc100
 801a320:	ffffbc80 	.word	0xffffbc80

0801a324 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 801a324:	b508      	push	{r3, lr}
    PK_VALIDATE_RET( ctx != NULL );
    if( ctx->pk_info == NULL )
 801a326:	6803      	ldr	r3, [r0, #0]
 801a328:	b12b      	cbz	r3, 801a336 <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 801a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a32c:	b12b      	cbz	r3, 801a33a <mbedtls_pk_debug+0x16>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 801a32e:	6840      	ldr	r0, [r0, #4]
 801a330:	4798      	blx	r3
    return( 0 );
 801a332:	2000      	movs	r0, #0
}
 801a334:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 801a336:	4802      	ldr	r0, [pc, #8]	; (801a340 <mbedtls_pk_debug+0x1c>)
 801a338:	e7fc      	b.n	801a334 <mbedtls_pk_debug+0x10>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801a33a:	4802      	ldr	r0, [pc, #8]	; (801a344 <mbedtls_pk_debug+0x20>)
 801a33c:	e7fa      	b.n	801a334 <mbedtls_pk_debug+0x10>
 801a33e:	bf00      	nop
 801a340:	ffffc180 	.word	0xffffc180
 801a344:	ffffc100 	.word	0xffffc100

0801a348 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 801a348:	b118      	cbz	r0, 801a352 <mbedtls_pk_get_name+0xa>
 801a34a:	6803      	ldr	r3, [r0, #0]
 801a34c:	b11b      	cbz	r3, 801a356 <mbedtls_pk_get_name+0xe>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 801a34e:	6858      	ldr	r0, [r3, #4]
 801a350:	4770      	bx	lr
        return( "invalid PK" );
 801a352:	4802      	ldr	r0, [pc, #8]	; (801a35c <mbedtls_pk_get_name+0x14>)
 801a354:	4770      	bx	lr
 801a356:	4801      	ldr	r0, [pc, #4]	; (801a35c <mbedtls_pk_get_name+0x14>)
}
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop
 801a35c:	08032d30 	.word	0x08032d30

0801a360 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 801a360:	b118      	cbz	r0, 801a36a <mbedtls_pk_get_type+0xa>
 801a362:	6803      	ldr	r3, [r0, #0]
 801a364:	b11b      	cbz	r3, 801a36e <mbedtls_pk_get_type+0xe>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 801a366:	7818      	ldrb	r0, [r3, #0]
 801a368:	4770      	bx	lr
        return( MBEDTLS_PK_NONE );
 801a36a:	2000      	movs	r0, #0
 801a36c:	4770      	bx	lr
 801a36e:	2000      	movs	r0, #0
}
 801a370:	4770      	bx	lr

0801a372 <rsa_can_do>:
#include <stdint.h>

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 801a372:	2801      	cmp	r0, #1
 801a374:	d004      	beq.n	801a380 <rsa_can_do+0xe>
 801a376:	2806      	cmp	r0, #6
 801a378:	bf14      	ite	ne
 801a37a:	2000      	movne	r0, #0
 801a37c:	2001      	moveq	r0, #1
 801a37e:	4770      	bx	lr
 801a380:	2001      	movs	r0, #1
            type == MBEDTLS_PK_RSASSA_PSS );
}
 801a382:	4770      	bx	lr

0801a384 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 801a384:	2301      	movs	r3, #1
 801a386:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 801a388:	4a05      	ldr	r2, [pc, #20]	; (801a3a0 <rsa_debug+0x1c>)
 801a38a:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 801a38c:	f100 0208 	add.w	r2, r0, #8
 801a390:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 801a392:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 801a394:	4b03      	ldr	r3, [pc, #12]	; (801a3a4 <rsa_debug+0x20>)
 801a396:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 801a398:	3014      	adds	r0, #20
 801a39a:	6148      	str	r0, [r1, #20]
}
 801a39c:	4770      	bx	lr
 801a39e:	bf00      	nop
 801a3a0:	08032d3c 	.word	0x08032d3c
 801a3a4:	08032d44 	.word	0x08032d44

0801a3a8 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 801a3a8:	3802      	subs	r0, #2
 801a3aa:	b2c0      	uxtb	r0, r0
            type == MBEDTLS_PK_ECDSA );
}
 801a3ac:	2802      	cmp	r0, #2
 801a3ae:	bf8c      	ite	hi
 801a3b0:	2000      	movhi	r0, #0
 801a3b2:	2001      	movls	r0, #1
 801a3b4:	4770      	bx	lr

0801a3b6 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 801a3b6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801a3b8:	4770      	bx	lr
	...

0801a3bc <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 801a3bc:	2302      	movs	r3, #2
 801a3be:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
 801a3c0:	4b02      	ldr	r3, [pc, #8]	; (801a3cc <eckey_debug+0x10>)
 801a3c2:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 801a3c4:	3088      	adds	r0, #136	; 0x88
 801a3c6:	6088      	str	r0, [r1, #8]
}
 801a3c8:	4770      	bx	lr
 801a3ca:	bf00      	nop
 801a3cc:	08032d4c 	.word	0x08032d4c

0801a3d0 <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 801a3d0:	3802      	subs	r0, #2
 801a3d2:	b2c0      	uxtb	r0, r0
            type == MBEDTLS_PK_ECKEY_DH );
}
 801a3d4:	2801      	cmp	r0, #1
 801a3d6:	bf8c      	ite	hi
 801a3d8:	2000      	movhi	r0, #0
 801a3da:	2001      	movls	r0, #1
 801a3dc:	4770      	bx	lr

0801a3de <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 801a3de:	2804      	cmp	r0, #4
 801a3e0:	bf14      	ite	ne
 801a3e2:	2000      	movne	r0, #0
 801a3e4:	2001      	moveq	r0, #1
 801a3e6:	4770      	bx	lr

0801a3e8 <rsa_free_wrap>:
{
 801a3e8:	b510      	push	{r4, lr}
 801a3ea:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 801a3ec:	f002 fcb8 	bl	801cd60 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 801a3f0:	4620      	mov	r0, r4
 801a3f2:	f00e fd59 	bl	8028ea8 <mbedtls_free>
}
 801a3f6:	bd10      	pop	{r4, pc}

0801a3f8 <rsa_alloc_wrap>:
{
 801a3f8:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 801a3fa:	21ac      	movs	r1, #172	; 0xac
 801a3fc:	2001      	movs	r0, #1
 801a3fe:	f00e fd45 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 801a402:	4604      	mov	r4, r0
 801a404:	b118      	cbz	r0, 801a40e <rsa_alloc_wrap+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 801a406:	2200      	movs	r2, #0
 801a408:	4611      	mov	r1, r2
 801a40a:	f001 fb19 	bl	801ba40 <mbedtls_rsa_init>
}
 801a40e:	4620      	mov	r0, r4
 801a410:	bd10      	pop	{r4, pc}

0801a412 <rsa_check_pair_wrap>:
{
 801a412:	b508      	push	{r3, lr}
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 801a414:	f001 fb90 	bl	801bb38 <mbedtls_rsa_check_pub_priv>
}
 801a418:	bd08      	pop	{r3, pc}

0801a41a <rsa_get_bitlen>:
{
 801a41a:	b508      	push	{r3, lr}
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 801a41c:	f001 fb1d 	bl	801ba5a <mbedtls_rsa_get_len>
}
 801a420:	00c0      	lsls	r0, r0, #3
 801a422:	bd08      	pop	{r3, pc}

0801a424 <rsa_encrypt_wrap>:
{
 801a424:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a426:	b085      	sub	sp, #20
 801a428:	4604      	mov	r4, r0
 801a42a:	460e      	mov	r6, r1
 801a42c:	4615      	mov	r5, r2
 801a42e:	461f      	mov	r7, r3
    *olen = mbedtls_rsa_get_len( rsa );
 801a430:	f001 fb13 	bl	801ba5a <mbedtls_rsa_get_len>
 801a434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a436:	6018      	str	r0, [r3, #0]
    if( *olen > osize )
 801a438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a43a:	4298      	cmp	r0, r3
 801a43c:	d80a      	bhi.n	801a454 <rsa_encrypt_wrap+0x30>
    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
 801a43e:	9702      	str	r7, [sp, #8]
 801a440:	9601      	str	r6, [sp, #4]
 801a442:	9500      	str	r5, [sp, #0]
 801a444:	2300      	movs	r3, #0
 801a446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a448:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a44a:	4620      	mov	r0, r4
 801a44c:	f001 ff54 	bl	801c2f8 <mbedtls_rsa_pkcs1_encrypt>
}
 801a450:	b005      	add	sp, #20
 801a452:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );
 801a454:	4800      	ldr	r0, [pc, #0]	; (801a458 <rsa_encrypt_wrap+0x34>)
 801a456:	e7fb      	b.n	801a450 <rsa_encrypt_wrap+0x2c>
 801a458:	ffffbc00 	.word	0xffffbc00

0801a45c <rsa_decrypt_wrap>:
{
 801a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a45e:	b085      	sub	sp, #20
 801a460:	4607      	mov	r7, r0
 801a462:	460d      	mov	r5, r1
 801a464:	4614      	mov	r4, r2
 801a466:	461e      	mov	r6, r3
    if( ilen != mbedtls_rsa_get_len( rsa ) )
 801a468:	f001 faf7 	bl	801ba5a <mbedtls_rsa_get_len>
 801a46c:	42a0      	cmp	r0, r4
 801a46e:	d10d      	bne.n	801a48c <rsa_decrypt_wrap+0x30>
    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
 801a470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a472:	9303      	str	r3, [sp, #12]
 801a474:	9602      	str	r6, [sp, #8]
 801a476:	9501      	str	r5, [sp, #4]
 801a478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a47a:	9300      	str	r3, [sp, #0]
 801a47c:	2301      	movs	r3, #1
 801a47e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a480:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a482:	4638      	mov	r0, r7
 801a484:	f002 f924 	bl	801c6d0 <mbedtls_rsa_pkcs1_decrypt>
}
 801a488:	b005      	add	sp, #20
 801a48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801a48c:	4800      	ldr	r0, [pc, #0]	; (801a490 <rsa_decrypt_wrap+0x34>)
 801a48e:	e7fb      	b.n	801a488 <rsa_decrypt_wrap+0x2c>
 801a490:	ffffbf80 	.word	0xffffbf80

0801a494 <rsa_sign_wrap>:
{
 801a494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a496:	b085      	sub	sp, #20
 801a498:	4604      	mov	r4, r0
 801a49a:	460d      	mov	r5, r1
 801a49c:	4617      	mov	r7, r2
 801a49e:	461e      	mov	r6, r3
    *sig_len = mbedtls_rsa_get_len( rsa );
 801a4a0:	f001 fadb 	bl	801ba5a <mbedtls_rsa_get_len>
 801a4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4a6:	6018      	str	r0, [r3, #0]
    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 801a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4aa:	9303      	str	r3, [sp, #12]
 801a4ac:	9702      	str	r7, [sp, #8]
 801a4ae:	9601      	str	r6, [sp, #4]
 801a4b0:	9500      	str	r5, [sp, #0]
 801a4b2:	2301      	movs	r3, #1
 801a4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a4b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	f002 fa93 	bl	801c9e4 <mbedtls_rsa_pkcs1_sign>
}
 801a4be:	b005      	add	sp, #20
 801a4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a4c4 <rsa_verify_wrap>:
{
 801a4c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4c8:	b085      	sub	sp, #20
 801a4ca:	4606      	mov	r6, r0
 801a4cc:	460f      	mov	r7, r1
 801a4ce:	4691      	mov	r9, r2
 801a4d0:	461d      	mov	r5, r3
 801a4d2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 801a4d6:	f001 fac0 	bl	801ba5a <mbedtls_rsa_get_len>
    if( sig_len < rsa_len )
 801a4da:	4540      	cmp	r0, r8
 801a4dc:	d815      	bhi.n	801a50a <rsa_verify_wrap+0x46>
 801a4de:	4604      	mov	r4, r0
    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 801a4e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4e2:	9303      	str	r3, [sp, #12]
 801a4e4:	f8cd 9008 	str.w	r9, [sp, #8]
 801a4e8:	9501      	str	r5, [sp, #4]
 801a4ea:	9700      	str	r7, [sp, #0]
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	461a      	mov	r2, r3
 801a4f0:	4619      	mov	r1, r3
 801a4f2:	4630      	mov	r0, r6
 801a4f4:	f002 fc12 	bl	801cd1c <mbedtls_rsa_pkcs1_verify>
 801a4f8:	b920      	cbnz	r0, 801a504 <rsa_verify_wrap+0x40>
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 801a4fa:	f5a0 5364 	sub.w	r3, r0, #14592	; 0x3900
 801a4fe:	4544      	cmp	r4, r8
 801a500:	bf38      	it	cc
 801a502:	4618      	movcc	r0, r3
}
 801a504:	b005      	add	sp, #20
 801a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 801a50a:	4801      	ldr	r0, [pc, #4]	; (801a510 <rsa_verify_wrap+0x4c>)
 801a50c:	e7fa      	b.n	801a504 <rsa_verify_wrap+0x40>
 801a50e:	bf00      	nop
 801a510:	ffffbc80 	.word	0xffffbc80

0801a514 <eckey_free_wrap>:
{
 801a514:	b510      	push	{r4, lr}
 801a516:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 801a518:	f7fc fda2 	bl	8017060 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 801a51c:	4620      	mov	r0, r4
 801a51e:	f00e fcc3 	bl	8028ea8 <mbedtls_free>
}
 801a522:	bd10      	pop	{r4, pc}

0801a524 <eckey_alloc_wrap>:
{
 801a524:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 801a526:	21ac      	movs	r1, #172	; 0xac
 801a528:	2001      	movs	r0, #1
 801a52a:	f00e fcaf 	bl	8028e8c <mbedtls_calloc>
    if( ctx != NULL )
 801a52e:	4604      	mov	r4, r0
 801a530:	b108      	cbz	r0, 801a536 <eckey_alloc_wrap+0x12>
        mbedtls_ecp_keypair_init( ctx );
 801a532:	f7fc fd47 	bl	8016fc4 <mbedtls_ecp_keypair_init>
}
 801a536:	4620      	mov	r0, r4
 801a538:	bd10      	pop	{r4, pc}

0801a53a <eckey_check_pair>:
{
 801a53a:	b508      	push	{r3, lr}
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 801a53c:	f7fd fcae 	bl	8017e9c <mbedtls_ecp_check_pub_priv>
}
 801a540:	bd08      	pop	{r3, pc}

0801a542 <ecdsa_alloc_wrap>:

}
#endif /* MBEDTLS_ECP_RESTARTABLE */

static void *ecdsa_alloc_wrap( void )
{
 801a542:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 801a544:	21ac      	movs	r1, #172	; 0xac
 801a546:	2001      	movs	r0, #1
 801a548:	f00e fca0 	bl	8028e8c <mbedtls_calloc>

    if( ctx != NULL )
 801a54c:	4604      	mov	r4, r0
 801a54e:	b108      	cbz	r0, 801a554 <ecdsa_alloc_wrap+0x12>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 801a550:	f7fc f814 	bl	801657c <mbedtls_ecdsa_init>

    return( ctx );
}
 801a554:	4620      	mov	r0, r4
 801a556:	bd10      	pop	{r4, pc}

0801a558 <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 801a558:	b510      	push	{r4, lr}
 801a55a:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 801a55c:	f7fc f812 	bl	8016584 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 801a560:	4620      	mov	r0, r4
 801a562:	f00e fca1 	bl	8028ea8 <mbedtls_free>
}
 801a566:	bd10      	pop	{r4, pc}

0801a568 <ecdsa_sign_wrap>:
{
 801a568:	b510      	push	{r4, lr}
 801a56a:	b084      	sub	sp, #16
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 801a56c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a56e:	9403      	str	r4, [sp, #12]
 801a570:	9c08      	ldr	r4, [sp, #32]
 801a572:	9402      	str	r4, [sp, #8]
 801a574:	9c07      	ldr	r4, [sp, #28]
 801a576:	9401      	str	r4, [sp, #4]
 801a578:	9c06      	ldr	r4, [sp, #24]
 801a57a:	9400      	str	r4, [sp, #0]
 801a57c:	f7fb ff8d 	bl	801649a <mbedtls_ecdsa_write_signature>
}
 801a580:	b004      	add	sp, #16
 801a582:	bd10      	pop	{r4, pc}

0801a584 <ecdsa_verify_wrap>:
{
 801a584:	b500      	push	{lr}
 801a586:	b083      	sub	sp, #12
 801a588:	4611      	mov	r1, r2
 801a58a:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 801a58c:	9b05      	ldr	r3, [sp, #20]
 801a58e:	9300      	str	r3, [sp, #0]
 801a590:	9b04      	ldr	r3, [sp, #16]
 801a592:	f7fb ffe9 	bl	8016568 <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 801a596:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 801a59a:	bf08      	it	eq
 801a59c:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 801a5a0:	b003      	add	sp, #12
 801a5a2:	f85d fb04 	ldr.w	pc, [sp], #4

0801a5a6 <eckey_verify_wrap>:
{
 801a5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5a8:	b0af      	sub	sp, #188	; 0xbc
 801a5aa:	4604      	mov	r4, r0
 801a5ac:	460f      	mov	r7, r1
 801a5ae:	4616      	mov	r6, r2
 801a5b0:	461d      	mov	r5, r3
    mbedtls_ecdsa_init( &ecdsa );
 801a5b2:	a803      	add	r0, sp, #12
 801a5b4:	f7fb ffe2 	bl	801657c <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 801a5b8:	4621      	mov	r1, r4
 801a5ba:	a803      	add	r0, sp, #12
 801a5bc:	f7fb ffe8 	bl	8016590 <mbedtls_ecdsa_from_keypair>
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	b128      	cbz	r0, 801a5d0 <eckey_verify_wrap+0x2a>
    mbedtls_ecdsa_free( &ecdsa );
 801a5c4:	a803      	add	r0, sp, #12
 801a5c6:	f7fb ffdd 	bl	8016584 <mbedtls_ecdsa_free>
}
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	b02f      	add	sp, #188	; 0xbc
 801a5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 801a5d0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801a5d2:	9301      	str	r3, [sp, #4]
 801a5d4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a5d6:	9300      	str	r3, [sp, #0]
 801a5d8:	462b      	mov	r3, r5
 801a5da:	4632      	mov	r2, r6
 801a5dc:	4639      	mov	r1, r7
 801a5de:	a803      	add	r0, sp, #12
 801a5e0:	f7ff ffd0 	bl	801a584 <ecdsa_verify_wrap>
 801a5e4:	4604      	mov	r4, r0
 801a5e6:	e7ed      	b.n	801a5c4 <eckey_verify_wrap+0x1e>

0801a5e8 <eckey_sign_wrap>:
{
 801a5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5ea:	b0b1      	sub	sp, #196	; 0xc4
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	460f      	mov	r7, r1
 801a5f0:	4616      	mov	r6, r2
 801a5f2:	461d      	mov	r5, r3
    mbedtls_ecdsa_init( &ecdsa );
 801a5f4:	a805      	add	r0, sp, #20
 801a5f6:	f7fb ffc1 	bl	801657c <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 801a5fa:	4621      	mov	r1, r4
 801a5fc:	a805      	add	r0, sp, #20
 801a5fe:	f7fb ffc7 	bl	8016590 <mbedtls_ecdsa_from_keypair>
 801a602:	4604      	mov	r4, r0
 801a604:	b128      	cbz	r0, 801a612 <eckey_sign_wrap+0x2a>
    mbedtls_ecdsa_free( &ecdsa );
 801a606:	a805      	add	r0, sp, #20
 801a608:	f7fb ffbc 	bl	8016584 <mbedtls_ecdsa_free>
}
 801a60c:	4620      	mov	r0, r4
 801a60e:	b031      	add	sp, #196	; 0xc4
 801a610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 801a612:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 801a614:	9303      	str	r3, [sp, #12]
 801a616:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801a618:	9302      	str	r3, [sp, #8]
 801a61a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 801a61c:	9301      	str	r3, [sp, #4]
 801a61e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a620:	9300      	str	r3, [sp, #0]
 801a622:	462b      	mov	r3, r5
 801a624:	4632      	mov	r2, r6
 801a626:	4639      	mov	r1, r7
 801a628:	a805      	add	r0, sp, #20
 801a62a:	f7fb ff36 	bl	801649a <mbedtls_ecdsa_write_signature>
 801a62e:	4604      	mov	r4, r0
 801a630:	e7e9      	b.n	801a606 <eckey_sign_wrap+0x1e>
	...

0801a634 <pk_get_pk_alg>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 801a634:	b570      	push	{r4, r5, r6, lr}
 801a636:	b084      	sub	sp, #16
 801a638:	4616      	mov	r6, r2
 801a63a:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 801a63c:	2500      	movs	r5, #0
 801a63e:	601d      	str	r5, [r3, #0]
 801a640:	605d      	str	r5, [r3, #4]
 801a642:	609d      	str	r5, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 801a644:	aa01      	add	r2, sp, #4
 801a646:	f7f7 fcf8 	bl	801203a <mbedtls_asn1_get_alg>
 801a64a:	b118      	cbz	r0, 801a654 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 801a64c:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
    }

    return( 0 );
}
 801a650:	b004      	add	sp, #16
 801a652:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 801a654:	4631      	mov	r1, r6
 801a656:	a801      	add	r0, sp, #4
 801a658:	f7ff fbfe 	bl	8019e58 <mbedtls_oid_get_pk_alg>
 801a65c:	b960      	cbnz	r0, 801a678 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 801a65e:	7833      	ldrb	r3, [r6, #0]
 801a660:	2b01      	cmp	r3, #1
 801a662:	d1f5      	bne.n	801a650 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 801a664:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 801a666:	2b05      	cmp	r3, #5
 801a668:	d000      	beq.n	801a66c <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 801a66a:	b93b      	cbnz	r3, 801a67c <pk_get_pk_alg+0x48>
 801a66c:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 801a66e:	4b04      	ldr	r3, [pc, #16]	; (801a680 <pk_get_pk_alg+0x4c>)
 801a670:	2a00      	cmp	r2, #0
 801a672:	bf18      	it	ne
 801a674:	4618      	movne	r0, r3
 801a676:	e7eb      	b.n	801a650 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801a678:	4802      	ldr	r0, [pc, #8]	; (801a684 <pk_get_pk_alg+0x50>)
 801a67a:	e7e9      	b.n	801a650 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 801a67c:	4800      	ldr	r0, [pc, #0]	; (801a680 <pk_get_pk_alg+0x4c>)
 801a67e:	e7e7      	b.n	801a650 <pk_get_pk_alg+0x1c>
 801a680:	ffffc580 	.word	0xffffc580
 801a684:	ffffc380 	.word	0xffffc380

0801a688 <pk_get_rsapubkey>:
{
 801a688:	b570      	push	{r4, r5, r6, lr}
 801a68a:	b08a      	sub	sp, #40	; 0x28
 801a68c:	4604      	mov	r4, r0
 801a68e:	460d      	mov	r5, r1
 801a690:	4616      	mov	r6, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801a692:	2330      	movs	r3, #48	; 0x30
 801a694:	aa09      	add	r2, sp, #36	; 0x24
 801a696:	f7f7 fbdc 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a69a:	b970      	cbnz	r0, 801a6ba <pk_get_rsapubkey+0x32>
    if( *p + len != end )
 801a69c:	6823      	ldr	r3, [r4, #0]
 801a69e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6a0:	4413      	add	r3, r2
 801a6a2:	429d      	cmp	r5, r3
 801a6a4:	d14c      	bne.n	801a740 <pk_get_rsapubkey+0xb8>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 801a6a6:	2302      	movs	r3, #2
 801a6a8:	aa09      	add	r2, sp, #36	; 0x24
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	f7f7 fbd0 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a6b2:	b130      	cbz	r0, 801a6c2 <pk_get_rsapubkey+0x3a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 801a6b4:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 801a6b8:	e001      	b.n	801a6be <pk_get_rsapubkey+0x36>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 801a6ba:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
}
 801a6be:	b00a      	add	sp, #40	; 0x28
 801a6c0:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	9306      	str	r3, [sp, #24]
 801a6c6:	9305      	str	r3, [sp, #20]
 801a6c8:	9304      	str	r3, [sp, #16]
 801a6ca:	9303      	str	r3, [sp, #12]
 801a6cc:	9302      	str	r3, [sp, #8]
 801a6ce:	9301      	str	r3, [sp, #4]
 801a6d0:	9300      	str	r3, [sp, #0]
 801a6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6d4:	6821      	ldr	r1, [r4, #0]
 801a6d6:	4630      	mov	r0, r6
 801a6d8:	f001 f84e 	bl	801b778 <mbedtls_rsa_import_raw>
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	d131      	bne.n	801a744 <pk_get_rsapubkey+0xbc>
    *p += len;
 801a6e0:	6823      	ldr	r3, [r4, #0]
 801a6e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a6e4:	4413      	add	r3, r2
 801a6e6:	6023      	str	r3, [r4, #0]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 801a6e8:	2302      	movs	r3, #2
 801a6ea:	aa09      	add	r2, sp, #36	; 0x24
 801a6ec:	4629      	mov	r1, r5
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	f7f7 fbaf 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a6f4:	b110      	cbz	r0, 801a6fc <pk_get_rsapubkey+0x74>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 801a6f6:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 801a6fa:	e7e0      	b.n	801a6be <pk_get_rsapubkey+0x36>
    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 801a6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6fe:	9306      	str	r3, [sp, #24]
 801a700:	6823      	ldr	r3, [r4, #0]
 801a702:	9305      	str	r3, [sp, #20]
 801a704:	2100      	movs	r1, #0
 801a706:	9104      	str	r1, [sp, #16]
 801a708:	9103      	str	r1, [sp, #12]
 801a70a:	9102      	str	r1, [sp, #8]
 801a70c:	9101      	str	r1, [sp, #4]
 801a70e:	9100      	str	r1, [sp, #0]
 801a710:	460b      	mov	r3, r1
 801a712:	460a      	mov	r2, r1
 801a714:	4630      	mov	r0, r6
 801a716:	f001 f82f 	bl	801b778 <mbedtls_rsa_import_raw>
 801a71a:	b9a8      	cbnz	r0, 801a748 <pk_get_rsapubkey+0xc0>
    *p += len;
 801a71c:	6823      	ldr	r3, [r4, #0]
 801a71e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a720:	4413      	add	r3, r2
 801a722:	6023      	str	r3, [r4, #0]
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 801a724:	4630      	mov	r0, r6
 801a726:	f001 f869 	bl	801b7fc <mbedtls_rsa_complete>
 801a72a:	b978      	cbnz	r0, 801a74c <pk_get_rsapubkey+0xc4>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 801a72c:	4630      	mov	r0, r6
 801a72e:	f001 f997 	bl	801ba60 <mbedtls_rsa_check_pubkey>
    if( mbedtls_rsa_complete( rsa ) != 0 ||
 801a732:	b968      	cbnz	r0, 801a750 <pk_get_rsapubkey+0xc8>
    if( *p != end )
 801a734:	6822      	ldr	r2, [r4, #0]
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 801a736:	4b07      	ldr	r3, [pc, #28]	; (801a754 <pk_get_rsapubkey+0xcc>)
 801a738:	42aa      	cmp	r2, r5
 801a73a:	bf18      	it	ne
 801a73c:	4618      	movne	r0, r3
 801a73e:	e7be      	b.n	801a6be <pk_get_rsapubkey+0x36>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 801a740:	4804      	ldr	r0, [pc, #16]	; (801a754 <pk_get_rsapubkey+0xcc>)
 801a742:	e7bc      	b.n	801a6be <pk_get_rsapubkey+0x36>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 801a744:	4804      	ldr	r0, [pc, #16]	; (801a758 <pk_get_rsapubkey+0xd0>)
 801a746:	e7ba      	b.n	801a6be <pk_get_rsapubkey+0x36>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 801a748:	4803      	ldr	r0, [pc, #12]	; (801a758 <pk_get_rsapubkey+0xd0>)
 801a74a:	e7b8      	b.n	801a6be <pk_get_rsapubkey+0x36>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 801a74c:	4802      	ldr	r0, [pc, #8]	; (801a758 <pk_get_rsapubkey+0xd0>)
 801a74e:	e7b6      	b.n	801a6be <pk_get_rsapubkey+0x36>
 801a750:	4801      	ldr	r0, [pc, #4]	; (801a758 <pk_get_rsapubkey+0xd0>)
 801a752:	e7b4      	b.n	801a6be <pk_get_rsapubkey+0x36>
 801a754:	ffffc49a 	.word	0xffffc49a
 801a758:	ffffc500 	.word	0xffffc500

0801a75c <pk_use_ecparams>:
    if( params->tag == MBEDTLS_ASN1_OID )
 801a75c:	6803      	ldr	r3, [r0, #0]
 801a75e:	2b06      	cmp	r3, #6
 801a760:	d114      	bne.n	801a78c <pk_use_ecparams+0x30>
{
 801a762:	b510      	push	{r4, lr}
 801a764:	b082      	sub	sp, #8
 801a766:	460c      	mov	r4, r1
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 801a768:	f10d 0107 	add.w	r1, sp, #7
 801a76c:	f7ff fb98 	bl	8019ea0 <mbedtls_oid_get_ec_grp>
 801a770:	b970      	cbnz	r0, 801a790 <pk_use_ecparams+0x34>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 801a772:	7823      	ldrb	r3, [r4, #0]
 801a774:	b11b      	cbz	r3, 801a77e <pk_use_ecparams+0x22>
 801a776:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d10a      	bne.n	801a794 <pk_use_ecparams+0x38>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 801a77e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801a782:	4620      	mov	r0, r4
 801a784:	f7fd fe44 	bl	8018410 <mbedtls_ecp_group_load>
}
 801a788:	b002      	add	sp, #8
 801a78a:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801a78c:	4802      	ldr	r0, [pc, #8]	; (801a798 <pk_use_ecparams+0x3c>)
}
 801a78e:	4770      	bx	lr
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 801a790:	4802      	ldr	r0, [pc, #8]	; (801a79c <pk_use_ecparams+0x40>)
 801a792:	e7f9      	b.n	801a788 <pk_use_ecparams+0x2c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801a794:	4800      	ldr	r0, [pc, #0]	; (801a798 <pk_use_ecparams+0x3c>)
 801a796:	e7f7      	b.n	801a788 <pk_use_ecparams+0x2c>
 801a798:	ffffc300 	.word	0xffffc300
 801a79c:	ffffc600 	.word	0xffffc600

0801a7a0 <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 801a7a0:	b570      	push	{r4, r5, r6, lr}
 801a7a2:	b08e      	sub	sp, #56	; 0x38
 801a7a4:	4606      	mov	r6, r0
 801a7a6:	460c      	mov	r4, r1
 801a7a8:	4615      	mov	r5, r2
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 801a7aa:	a808      	add	r0, sp, #32
 801a7ac:	f7f7 ff3d 	bl	801262a <mbedtls_mpi_init>

    p = (unsigned char *) key;
 801a7b0:	940b      	str	r4, [sp, #44]	; 0x2c
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a7b2:	2330      	movs	r3, #48	; 0x30
 801a7b4:	eb0d 0203 	add.w	r2, sp, r3
 801a7b8:	1961      	adds	r1, r4, r5
 801a7ba:	a80b      	add	r0, sp, #44	; 0x2c
 801a7bc:	f7f7 fb49 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a7c0:	b120      	cbz	r0, 801a7cc <pk_parse_key_pkcs1_der+0x2c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801a7c2:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 801a7c6:	4620      	mov	r0, r4
 801a7c8:	b00e      	add	sp, #56	; 0x38
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 801a7cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a7d0:	18cd      	adds	r5, r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801a7d2:	aa0d      	add	r2, sp, #52	; 0x34
 801a7d4:	4629      	mov	r1, r5
 801a7d6:	a80b      	add	r0, sp, #44	; 0x2c
 801a7d8:	f7f7 fb68 	bl	8011eac <mbedtls_asn1_get_int>
 801a7dc:	b9c8      	cbnz	r0, 801a812 <pk_parse_key_pkcs1_der+0x72>
    if( version != 0 )
 801a7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f040 80d4 	bne.w	801a98e <pk_parse_key_pkcs1_der+0x1ee>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a7e6:	2302      	movs	r3, #2
 801a7e8:	aa0c      	add	r2, sp, #48	; 0x30
 801a7ea:	4629      	mov	r1, r5
 801a7ec:	a80b      	add	r0, sp, #44	; 0x2c
 801a7ee:	f7f7 fb30 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	b180      	cbz	r0, 801a818 <pk_parse_key_pkcs1_der+0x78>
    mbedtls_mpi_free( &T );
 801a7f6:	a808      	add	r0, sp, #32
 801a7f8:	f7f7 ff1d 	bl	8012636 <mbedtls_mpi_free>
        if( ( ret & 0xff80 ) == 0 )
 801a7fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 801a800:	421c      	tst	r4, r3
 801a802:	f040 80c6 	bne.w	801a992 <pk_parse_key_pkcs1_der+0x1f2>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 801a806:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
 801a80a:	4630      	mov	r0, r6
 801a80c:	f002 faa8 	bl	801cd60 <mbedtls_rsa_free>
 801a810:	e7d9      	b.n	801a7c6 <pk_parse_key_pkcs1_der+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801a812:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801a816:	e7d6      	b.n	801a7c6 <pk_parse_key_pkcs1_der+0x26>
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
 801a818:	2300      	movs	r3, #0
 801a81a:	9306      	str	r3, [sp, #24]
 801a81c:	9305      	str	r3, [sp, #20]
 801a81e:	9304      	str	r3, [sp, #16]
 801a820:	9303      	str	r3, [sp, #12]
 801a822:	9302      	str	r3, [sp, #8]
 801a824:	9301      	str	r3, [sp, #4]
 801a826:	9300      	str	r3, [sp, #0]
 801a828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a82a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a82c:	4630      	mov	r0, r6
 801a82e:	f000 ffa3 	bl	801b778 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801a832:	4604      	mov	r4, r0
 801a834:	2800      	cmp	r0, #0
 801a836:	d1de      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    p += len;
 801a838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a83a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a83c:	4413      	add	r3, r2
 801a83e:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a840:	2302      	movs	r3, #2
 801a842:	aa0c      	add	r2, sp, #48	; 0x30
 801a844:	4629      	mov	r1, r5
 801a846:	a80b      	add	r0, sp, #44	; 0x2c
 801a848:	f7f7 fb03 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a84c:	4604      	mov	r4, r0
 801a84e:	2800      	cmp	r0, #0
 801a850:	d1d1      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 801a852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a854:	9306      	str	r3, [sp, #24]
 801a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a858:	9305      	str	r3, [sp, #20]
 801a85a:	2100      	movs	r1, #0
 801a85c:	9104      	str	r1, [sp, #16]
 801a85e:	9103      	str	r1, [sp, #12]
 801a860:	9102      	str	r1, [sp, #8]
 801a862:	9101      	str	r1, [sp, #4]
 801a864:	9100      	str	r1, [sp, #0]
 801a866:	460b      	mov	r3, r1
 801a868:	460a      	mov	r2, r1
 801a86a:	4630      	mov	r0, r6
 801a86c:	f000 ff84 	bl	801b778 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801a870:	4604      	mov	r4, r0
 801a872:	2800      	cmp	r0, #0
 801a874:	d1bf      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    p += len;
 801a876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a87a:	4413      	add	r3, r2
 801a87c:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a87e:	2302      	movs	r3, #2
 801a880:	aa0c      	add	r2, sp, #48	; 0x30
 801a882:	4629      	mov	r1, r5
 801a884:	a80b      	add	r0, sp, #44	; 0x2c
 801a886:	f7f7 fae4 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a88a:	4604      	mov	r4, r0
 801a88c:	2800      	cmp	r0, #0
 801a88e:	d1b2      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 801a890:	2100      	movs	r1, #0
 801a892:	9106      	str	r1, [sp, #24]
 801a894:	9105      	str	r1, [sp, #20]
 801a896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a898:	9304      	str	r3, [sp, #16]
 801a89a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a89c:	9303      	str	r3, [sp, #12]
 801a89e:	9102      	str	r1, [sp, #8]
 801a8a0:	9101      	str	r1, [sp, #4]
 801a8a2:	9100      	str	r1, [sp, #0]
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	460a      	mov	r2, r1
 801a8a8:	4630      	mov	r0, r6
 801a8aa:	f000 ff65 	bl	801b778 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	2800      	cmp	r0, #0
 801a8b2:	d1a0      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    p += len;
 801a8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a8b8:	4413      	add	r3, r2
 801a8ba:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a8bc:	2302      	movs	r3, #2
 801a8be:	aa0c      	add	r2, sp, #48	; 0x30
 801a8c0:	4629      	mov	r1, r5
 801a8c2:	a80b      	add	r0, sp, #44	; 0x2c
 801a8c4:	f7f7 fac5 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	2800      	cmp	r0, #0
 801a8cc:	d193      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
 801a8ce:	2100      	movs	r1, #0
 801a8d0:	9106      	str	r1, [sp, #24]
 801a8d2:	9105      	str	r1, [sp, #20]
 801a8d4:	9104      	str	r1, [sp, #16]
 801a8d6:	9103      	str	r1, [sp, #12]
 801a8d8:	9102      	str	r1, [sp, #8]
 801a8da:	9101      	str	r1, [sp, #4]
 801a8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8de:	9300      	str	r3, [sp, #0]
 801a8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8e2:	460a      	mov	r2, r1
 801a8e4:	4630      	mov	r0, r6
 801a8e6:	f000 ff47 	bl	801b778 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	d182      	bne.n	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    p += len;
 801a8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a8f4:	4413      	add	r3, r2
 801a8f6:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a8f8:	2302      	movs	r3, #2
 801a8fa:	aa0c      	add	r2, sp, #48	; 0x30
 801a8fc:	4629      	mov	r1, r5
 801a8fe:	a80b      	add	r0, sp, #44	; 0x2c
 801a900:	f7f7 faa7 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a904:	4604      	mov	r4, r0
 801a906:	2800      	cmp	r0, #0
 801a908:	f47f af75 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
 801a90c:	2100      	movs	r1, #0
 801a90e:	9106      	str	r1, [sp, #24]
 801a910:	9105      	str	r1, [sp, #20]
 801a912:	9104      	str	r1, [sp, #16]
 801a914:	9103      	str	r1, [sp, #12]
 801a916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a918:	9302      	str	r3, [sp, #8]
 801a91a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a91c:	9301      	str	r3, [sp, #4]
 801a91e:	9100      	str	r1, [sp, #0]
 801a920:	460b      	mov	r3, r1
 801a922:	460a      	mov	r2, r1
 801a924:	4630      	mov	r0, r6
 801a926:	f000 ff27 	bl	801b778 <mbedtls_rsa_import_raw>
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 801a92a:	4604      	mov	r4, r0
 801a92c:	2800      	cmp	r0, #0
 801a92e:	f47f af62 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    p += len;
 801a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a936:	4413      	add	r3, r2
 801a938:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 801a93a:	4630      	mov	r0, r6
 801a93c:	f000 ff5e 	bl	801b7fc <mbedtls_rsa_complete>
 801a940:	4604      	mov	r4, r0
 801a942:	2800      	cmp	r0, #0
 801a944:	f47f af57 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 801a948:	aa08      	add	r2, sp, #32
 801a94a:	4629      	mov	r1, r5
 801a94c:	a80b      	add	r0, sp, #44	; 0x2c
 801a94e:	f7f7 fad8 	bl	8011f02 <mbedtls_asn1_get_mpi>
 801a952:	4604      	mov	r4, r0
 801a954:	2800      	cmp	r0, #0
 801a956:	f47f af4e 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 801a95a:	aa08      	add	r2, sp, #32
 801a95c:	4629      	mov	r1, r5
 801a95e:	a80b      	add	r0, sp, #44	; 0x2c
 801a960:	f7f7 facf 	bl	8011f02 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 801a964:	4604      	mov	r4, r0
 801a966:	2800      	cmp	r0, #0
 801a968:	f47f af45 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 )
 801a96c:	aa08      	add	r2, sp, #32
 801a96e:	4629      	mov	r1, r5
 801a970:	a80b      	add	r0, sp, #44	; 0x2c
 801a972:	f7f7 fac6 	bl	8011f02 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 801a976:	4604      	mov	r4, r0
 801a978:	2800      	cmp	r0, #0
 801a97a:	f47f af3c 	bne.w	801a7f6 <pk_parse_key_pkcs1_der+0x56>
    if( p != end )
 801a97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a980:	42ab      	cmp	r3, r5
 801a982:	d008      	beq.n	801a996 <pk_parse_key_pkcs1_der+0x1f6>
    mbedtls_mpi_free( &T );
 801a984:	a808      	add	r0, sp, #32
 801a986:	f7f7 fe56 	bl	8012636 <mbedtls_mpi_free>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 801a98a:	4c05      	ldr	r4, [pc, #20]	; (801a9a0 <pk_parse_key_pkcs1_der+0x200>)
 801a98c:	e73d      	b.n	801a80a <pk_parse_key_pkcs1_der+0x6a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 801a98e:	4c05      	ldr	r4, [pc, #20]	; (801a9a4 <pk_parse_key_pkcs1_der+0x204>)
 801a990:	e719      	b.n	801a7c6 <pk_parse_key_pkcs1_der+0x26>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 801a992:	4c03      	ldr	r4, [pc, #12]	; (801a9a0 <pk_parse_key_pkcs1_der+0x200>)
 801a994:	e739      	b.n	801a80a <pk_parse_key_pkcs1_der+0x6a>
    mbedtls_mpi_free( &T );
 801a996:	a808      	add	r0, sp, #32
 801a998:	f7f7 fe4d 	bl	8012636 <mbedtls_mpi_free>
    if( ret != 0 )
 801a99c:	e713      	b.n	801a7c6 <pk_parse_key_pkcs1_der+0x26>
 801a99e:	bf00      	nop
 801a9a0:	ffffc300 	.word	0xffffc300
 801a9a4:	ffffc280 	.word	0xffffc280

0801a9a8 <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 801a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ac:	b088      	sub	sp, #32
 801a9ae:	4605      	mov	r5, r0
 801a9b0:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 801a9b2:	9102      	str	r1, [sp, #8]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801a9b4:	2330      	movs	r3, #48	; 0x30
 801a9b6:	aa06      	add	r2, sp, #24
 801a9b8:	4401      	add	r1, r0
 801a9ba:	a802      	add	r0, sp, #8
 801a9bc:	f7f7 fa49 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a9c0:	b128      	cbz	r0, 801a9ce <pk_parse_key_sec1_der+0x26>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801a9c2:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	b008      	add	sp, #32
 801a9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    end = p + len;
 801a9ce:	9e02      	ldr	r6, [sp, #8]
 801a9d0:	9b06      	ldr	r3, [sp, #24]
 801a9d2:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801a9d4:	aa07      	add	r2, sp, #28
 801a9d6:	4631      	mov	r1, r6
 801a9d8:	a802      	add	r0, sp, #8
 801a9da:	f7f7 fa67 	bl	8011eac <mbedtls_asn1_get_int>
 801a9de:	b968      	cbnz	r0, 801a9fc <pk_parse_key_sec1_der+0x54>
    if( version != 1 )
 801a9e0:	9b07      	ldr	r3, [sp, #28]
 801a9e2:	2b01      	cmp	r3, #1
 801a9e4:	f040 80b7 	bne.w	801ab56 <pk_parse_key_sec1_der+0x1ae>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 801a9e8:	2304      	movs	r3, #4
 801a9ea:	aa06      	add	r2, sp, #24
 801a9ec:	4631      	mov	r1, r6
 801a9ee:	a802      	add	r0, sp, #8
 801a9f0:	f7f7 fa2f 	bl	8011e52 <mbedtls_asn1_get_tag>
 801a9f4:	b128      	cbz	r0, 801aa02 <pk_parse_key_sec1_der+0x5a>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801a9f6:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801a9fa:	e7e4      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801a9fc:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801aa00:	e7e1      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 801aa02:	f105 077c 	add.w	r7, r5, #124	; 0x7c
 801aa06:	9a06      	ldr	r2, [sp, #24]
 801aa08:	9902      	ldr	r1, [sp, #8]
 801aa0a:	4638      	mov	r0, r7
 801aa0c:	f7f7 ff69 	bl	80128e2 <mbedtls_mpi_read_binary>
 801aa10:	4604      	mov	r4, r0
 801aa12:	2800      	cmp	r0, #0
 801aa14:	d138      	bne.n	801aa88 <pk_parse_key_sec1_der+0xe0>
    p += len;
 801aa16:	9b02      	ldr	r3, [sp, #8]
 801aa18:	9a06      	ldr	r2, [sp, #24]
 801aa1a:	4413      	add	r3, r2
 801aa1c:	9302      	str	r3, [sp, #8]
    if( p != end )
 801aa1e:	42b3      	cmp	r3, r6
 801aa20:	d019      	beq.n	801aa56 <pk_parse_key_sec1_der+0xae>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801aa22:	23a0      	movs	r3, #160	; 0xa0
 801aa24:	aa06      	add	r2, sp, #24
 801aa26:	4631      	mov	r1, r6
 801aa28:	a802      	add	r0, sp, #8
 801aa2a:	f7f7 fa12 	bl	8011e52 <mbedtls_asn1_get_tag>
 801aa2e:	4604      	mov	r4, r0
 801aa30:	b380      	cbz	r0, 801aa94 <pk_parse_key_sec1_der+0xec>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801aa32:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801aa36:	d153      	bne.n	801aae0 <pk_parse_key_sec1_der+0x138>
    if( p != end )
 801aa38:	9b02      	ldr	r3, [sp, #8]
 801aa3a:	42b3      	cmp	r3, r6
 801aa3c:	d00b      	beq.n	801aa56 <pk_parse_key_sec1_der+0xae>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801aa3e:	23a1      	movs	r3, #161	; 0xa1
 801aa40:	aa06      	add	r2, sp, #24
 801aa42:	4631      	mov	r1, r6
 801aa44:	a802      	add	r0, sp, #8
 801aa46:	f7f7 fa04 	bl	8011e52 <mbedtls_asn1_get_tag>
 801aa4a:	4604      	mov	r4, r0
 801aa4c:	2800      	cmp	r0, #0
 801aa4e:	d04d      	beq.n	801aaec <pk_parse_key_sec1_der+0x144>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801aa50:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801aa54:	d173      	bne.n	801ab3e <pk_parse_key_sec1_der+0x196>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 801aa56:	2300      	movs	r3, #0
 801aa58:	9301      	str	r3, [sp, #4]
 801aa5a:	9300      	str	r3, [sp, #0]
 801aa5c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801aa60:	463a      	mov	r2, r7
 801aa62:	f105 0188 	add.w	r1, r5, #136	; 0x88
 801aa66:	4628      	mov	r0, r5
 801aa68:	f7fd f952 	bl	8017d10 <mbedtls_ecp_mul>
    if( ! pubkey_done &&
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d16b      	bne.n	801ab4a <pk_parse_key_sec1_der+0x1a2>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 801aa72:	4639      	mov	r1, r7
 801aa74:	4628      	mov	r0, r5
 801aa76:	f7fc ff1f 	bl	80178b8 <mbedtls_ecp_check_privkey>
 801aa7a:	4604      	mov	r4, r0
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d0a2      	beq.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        mbedtls_ecp_keypair_free( eck );
 801aa80:	4628      	mov	r0, r5
 801aa82:	f7fc faed 	bl	8017060 <mbedtls_ecp_keypair_free>
        return( ret );
 801aa86:	e79e      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        mbedtls_ecp_keypair_free( eck );
 801aa88:	4628      	mov	r0, r5
 801aa8a:	f7fc fae9 	bl	8017060 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801aa8e:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 801aa92:	e798      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 801aa94:	9b02      	ldr	r3, [sp, #8]
 801aa96:	9a06      	ldr	r2, [sp, #24]
 801aa98:	eb03 0802 	add.w	r8, r3, r2
    if ( end - *p < 1 )
 801aa9c:	2a00      	cmp	r2, #0
 801aa9e:	dd5e      	ble.n	801ab5e <pk_parse_key_sec1_der+0x1b6>
    params->tag = **p;
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	9303      	str	r3, [sp, #12]
    if( params->tag != MBEDTLS_ASN1_OID
 801aaa4:	2b06      	cmp	r3, #6
 801aaa6:	d15c      	bne.n	801ab62 <pk_parse_key_sec1_der+0x1ba>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 801aaa8:	aa04      	add	r2, sp, #16
 801aaaa:	4641      	mov	r1, r8
 801aaac:	a802      	add	r0, sp, #8
 801aaae:	f7f7 f9d0 	bl	8011e52 <mbedtls_asn1_get_tag>
 801aab2:	b970      	cbnz	r0, 801aad2 <pk_parse_key_sec1_der+0x12a>
    params->p = *p;
 801aab4:	9b02      	ldr	r3, [sp, #8]
 801aab6:	9305      	str	r3, [sp, #20]
    *p += params->len;
 801aab8:	9a04      	ldr	r2, [sp, #16]
 801aaba:	4413      	add	r3, r2
 801aabc:	9302      	str	r3, [sp, #8]
    if( *p != end )
 801aabe:	4598      	cmp	r8, r3
 801aac0:	d151      	bne.n	801ab66 <pk_parse_key_sec1_der+0x1be>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 801aac2:	4629      	mov	r1, r5
 801aac4:	a803      	add	r0, sp, #12
 801aac6:	f7ff fe49 	bl	801a75c <pk_use_ecparams>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 801aaca:	4604      	mov	r4, r0
 801aacc:	2800      	cmp	r0, #0
 801aace:	d0b3      	beq.n	801aa38 <pk_parse_key_sec1_der+0x90>
 801aad0:	e002      	b.n	801aad8 <pk_parse_key_sec1_der+0x130>
 801aad2:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 801aad6:	d0f4      	beq.n	801aac2 <pk_parse_key_sec1_der+0x11a>
                mbedtls_ecp_keypair_free( eck );
 801aad8:	4628      	mov	r0, r5
 801aada:	f7fc fac1 	bl	8017060 <mbedtls_ecp_keypair_free>
                return( ret );
 801aade:	e772      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
            mbedtls_ecp_keypair_free( eck );
 801aae0:	4628      	mov	r0, r5
 801aae2:	f7fc fabd 	bl	8017060 <mbedtls_ecp_keypair_free>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801aae6:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 801aaea:	e76c      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
            end2 = p + len;
 801aaec:	9e02      	ldr	r6, [sp, #8]
 801aaee:	9b06      	ldr	r3, [sp, #24]
 801aaf0:	441e      	add	r6, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 801aaf2:	aa06      	add	r2, sp, #24
 801aaf4:	4631      	mov	r1, r6
 801aaf6:	a802      	add	r0, sp, #8
 801aaf8:	f7f7 fa3e 	bl	8011f78 <mbedtls_asn1_get_bitstring_null>
 801aafc:	b998      	cbnz	r0, 801ab26 <pk_parse_key_sec1_der+0x17e>
            if( p + len != end2 )
 801aafe:	9a02      	ldr	r2, [sp, #8]
 801ab00:	9b06      	ldr	r3, [sp, #24]
 801ab02:	4413      	add	r3, r2
 801ab04:	429e      	cmp	r6, r3
 801ab06:	d128      	bne.n	801ab5a <pk_parse_key_sec1_der+0x1b2>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 801ab08:	f105 0488 	add.w	r4, r5, #136	; 0x88
 801ab0c:	1ab3      	subs	r3, r6, r2
 801ab0e:	4621      	mov	r1, r4
 801ab10:	4628      	mov	r0, r5
 801ab12:	f7fc fd4b 	bl	80175ac <mbedtls_ecp_point_read_binary>
 801ab16:	4603      	mov	r3, r0
 801ab18:	b140      	cbz	r0, 801ab2c <pk_parse_key_sec1_der+0x184>
    *p = (unsigned char *) end;
 801ab1a:	9602      	str	r6, [sp, #8]
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 801ab1c:	f513 4f9d 	cmn.w	r3, #20096	; 0x4e80
 801ab20:	d099      	beq.n	801aa56 <pk_parse_key_sec1_der+0xae>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801ab22:	4c12      	ldr	r4, [pc, #72]	; (801ab6c <pk_parse_key_sec1_der+0x1c4>)
 801ab24:	e74f      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ab26:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801ab2a:	e74c      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 801ab2c:	4621      	mov	r1, r4
 801ab2e:	4628      	mov	r0, r5
 801ab30:	f7fc fdea 	bl	8017708 <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 801ab34:	9602      	str	r6, [sp, #8]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 801ab36:	4603      	mov	r3, r0
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	d09a      	beq.n	801aa72 <pk_parse_key_sec1_der+0xca>
 801ab3c:	e7ee      	b.n	801ab1c <pk_parse_key_sec1_der+0x174>
            mbedtls_ecp_keypair_free( eck );
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f7fc fa8e 	bl	8017060 <mbedtls_ecp_keypair_free>
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ab44:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 801ab48:	e73d      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        mbedtls_ecp_keypair_free( eck );
 801ab4a:	4628      	mov	r0, r5
 801ab4c:	f7fc fa88 	bl	8017060 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ab50:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 801ab54:	e737      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 801ab56:	4c06      	ldr	r4, [pc, #24]	; (801ab70 <pk_parse_key_sec1_der+0x1c8>)
 801ab58:	e735      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801ab5a:	4c06      	ldr	r4, [pc, #24]	; (801ab74 <pk_parse_key_sec1_der+0x1cc>)
 801ab5c:	e733      	b.n	801a9c6 <pk_parse_key_sec1_der+0x1e>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801ab5e:	4c06      	ldr	r4, [pc, #24]	; (801ab78 <pk_parse_key_sec1_der+0x1d0>)
 801ab60:	e7ba      	b.n	801aad8 <pk_parse_key_sec1_der+0x130>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801ab62:	4c06      	ldr	r4, [pc, #24]	; (801ab7c <pk_parse_key_sec1_der+0x1d4>)
 801ab64:	e7b8      	b.n	801aad8 <pk_parse_key_sec1_der+0x130>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801ab66:	4c03      	ldr	r4, [pc, #12]	; (801ab74 <pk_parse_key_sec1_der+0x1cc>)
 801ab68:	e7b6      	b.n	801aad8 <pk_parse_key_sec1_der+0x130>
 801ab6a:	bf00      	nop
 801ab6c:	ffffc300 	.word	0xffffc300
 801ab70:	ffffc280 	.word	0xffffc280
 801ab74:	ffffc29a 	.word	0xffffc29a
 801ab78:	ffffc2a0 	.word	0xffffc2a0
 801ab7c:	ffffc29e 	.word	0xffffc29e

0801ab80 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 801ab80:	b570      	push	{r4, r5, r6, lr}
 801ab82:	b088      	sub	sp, #32
 801ab84:	4605      	mov	r5, r0
 801ab86:	4610      	mov	r0, r2
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 801ab88:	9102      	str	r1, [sp, #8]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801ab90:	2330      	movs	r3, #48	; 0x30
 801ab92:	aa06      	add	r2, sp, #24
 801ab94:	4401      	add	r1, r0
 801ab96:	a802      	add	r0, sp, #8
 801ab98:	f7f7 f95b 	bl	8011e52 <mbedtls_asn1_get_tag>
 801ab9c:	b120      	cbz	r0, 801aba8 <pk_parse_key_pkcs8_unencrypted_der+0x28>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ab9e:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 801aba2:	4620      	mov	r0, r4
 801aba4:	b008      	add	sp, #32
 801aba6:	bd70      	pop	{r4, r5, r6, pc}
    end = p + len;
 801aba8:	9e02      	ldr	r6, [sp, #8]
 801abaa:	9b06      	ldr	r3, [sp, #24]
 801abac:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 801abae:	aa07      	add	r2, sp, #28
 801abb0:	4631      	mov	r1, r6
 801abb2:	a802      	add	r0, sp, #8
 801abb4:	f7f7 f97a 	bl	8011eac <mbedtls_asn1_get_int>
 801abb8:	b918      	cbnz	r0, 801abc2 <pk_parse_key_pkcs8_unencrypted_der+0x42>
    if( version != 0 )
 801abba:	9b07      	ldr	r3, [sp, #28]
 801abbc:	b123      	cbz	r3, 801abc8 <pk_parse_key_pkcs8_unencrypted_der+0x48>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 801abbe:	4c2b      	ldr	r4, [pc, #172]	; (801ac6c <pk_parse_key_pkcs8_unencrypted_der+0xec>)
 801abc0:	e7ef      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801abc2:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801abc6:	e7ec      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 801abc8:	ab03      	add	r3, sp, #12
 801abca:	f10d 0207 	add.w	r2, sp, #7
 801abce:	4631      	mov	r1, r6
 801abd0:	a802      	add	r0, sp, #8
 801abd2:	f7ff fd2f 	bl	801a634 <pk_get_pk_alg>
 801abd6:	b110      	cbz	r0, 801abde <pk_parse_key_pkcs8_unencrypted_der+0x5e>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801abd8:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801abdc:	e7e1      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 801abde:	2304      	movs	r3, #4
 801abe0:	aa06      	add	r2, sp, #24
 801abe2:	4631      	mov	r1, r6
 801abe4:	a802      	add	r0, sp, #8
 801abe6:	f7f7 f934 	bl	8011e52 <mbedtls_asn1_get_tag>
 801abea:	bb48      	cbnz	r0, 801ac40 <pk_parse_key_pkcs8_unencrypted_der+0xc0>
    if( len < 1 )
 801abec:	9b06      	ldr	r3, [sp, #24]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d035      	beq.n	801ac5e <pk_parse_key_pkcs8_unencrypted_der+0xde>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 801abf2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801abf6:	f7ff fa4b 	bl	801a090 <mbedtls_pk_info_from_type>
 801abfa:	4601      	mov	r1, r0
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d030      	beq.n	801ac62 <pk_parse_key_pkcs8_unencrypted_der+0xe2>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 801ac00:	4628      	mov	r0, r5
 801ac02:	f7ff fa5f 	bl	801a0c4 <mbedtls_pk_setup>
 801ac06:	4604      	mov	r4, r0
 801ac08:	2800      	cmp	r0, #0
 801ac0a:	d1ca      	bne.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
 801ac0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ac10:	2b01      	cmp	r3, #1
 801ac12:	d018      	beq.n	801ac46 <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 801ac14:	3b02      	subs	r3, #2
 801ac16:	b2db      	uxtb	r3, r3
 801ac18:	2b01      	cmp	r3, #1
 801ac1a:	d824      	bhi.n	801ac66 <pk_parse_key_pkcs8_unencrypted_der+0xe6>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 801ac1c:	6869      	ldr	r1, [r5, #4]
 801ac1e:	a803      	add	r0, sp, #12
 801ac20:	f7ff fd9c 	bl	801a75c <pk_use_ecparams>
 801ac24:	4604      	mov	r4, r0
 801ac26:	b938      	cbnz	r0, 801ac38 <pk_parse_key_pkcs8_unencrypted_der+0xb8>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 801ac28:	9a06      	ldr	r2, [sp, #24]
 801ac2a:	9902      	ldr	r1, [sp, #8]
 801ac2c:	6868      	ldr	r0, [r5, #4]
 801ac2e:	f7ff febb 	bl	801a9a8 <pk_parse_key_sec1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 801ac32:	4604      	mov	r4, r0
 801ac34:	2800      	cmp	r0, #0
 801ac36:	d0b4      	beq.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 801ac38:	4628      	mov	r0, r5
 801ac3a:	f7ff fa1b 	bl	801a074 <mbedtls_pk_free>
            return( ret );
 801ac3e:	e7b0      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ac40:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
 801ac44:	e7ad      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 801ac46:	9a06      	ldr	r2, [sp, #24]
 801ac48:	9902      	ldr	r1, [sp, #8]
 801ac4a:	6868      	ldr	r0, [r5, #4]
 801ac4c:	f7ff fda8 	bl	801a7a0 <pk_parse_key_pkcs1_der>
 801ac50:	4604      	mov	r4, r0
 801ac52:	2800      	cmp	r0, #0
 801ac54:	d0a5      	beq.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 801ac56:	4628      	mov	r0, r5
 801ac58:	f7ff fa0c 	bl	801a074 <mbedtls_pk_free>
            return( ret );
 801ac5c:	e7a1      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801ac5e:	4c04      	ldr	r4, [pc, #16]	; (801ac70 <pk_parse_key_pkcs8_unencrypted_der+0xf0>)
 801ac60:	e79f      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801ac62:	4c04      	ldr	r4, [pc, #16]	; (801ac74 <pk_parse_key_pkcs8_unencrypted_der+0xf4>)
 801ac64:	e79d      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801ac66:	4c03      	ldr	r4, [pc, #12]	; (801ac74 <pk_parse_key_pkcs8_unencrypted_der+0xf4>)
 801ac68:	e79b      	b.n	801aba2 <pk_parse_key_pkcs8_unencrypted_der+0x22>
 801ac6a:	bf00      	nop
 801ac6c:	ffffc280 	.word	0xffffc280
 801ac70:	ffffc2a0 	.word	0xffffc2a0
 801ac74:	ffffc380 	.word	0xffffc380

0801ac78 <mbedtls_pk_parse_subpubkey>:
{
 801ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac7c:	b087      	sub	sp, #28
 801ac7e:	4604      	mov	r4, r0
 801ac80:	4616      	mov	r6, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801ac82:	2300      	movs	r3, #0
 801ac84:	f88d 3007 	strb.w	r3, [sp, #7]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801ac88:	2330      	movs	r3, #48	; 0x30
 801ac8a:	aa05      	add	r2, sp, #20
 801ac8c:	f7f7 f8e1 	bl	8011e52 <mbedtls_asn1_get_tag>
 801ac90:	b128      	cbz	r0, 801ac9e <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801ac92:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
}
 801ac96:	4628      	mov	r0, r5
 801ac98:	b007      	add	sp, #28
 801ac9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    end = *p + len;
 801ac9e:	6827      	ldr	r7, [r4, #0]
 801aca0:	9b05      	ldr	r3, [sp, #20]
 801aca2:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 801aca4:	ab02      	add	r3, sp, #8
 801aca6:	f10d 0207 	add.w	r2, sp, #7
 801acaa:	4639      	mov	r1, r7
 801acac:	4620      	mov	r0, r4
 801acae:	f7ff fcc1 	bl	801a634 <pk_get_pk_alg>
 801acb2:	4605      	mov	r5, r0
 801acb4:	2800      	cmp	r0, #0
 801acb6:	d1ee      	bne.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801acb8:	aa05      	add	r2, sp, #20
 801acba:	4639      	mov	r1, r7
 801acbc:	4620      	mov	r0, r4
 801acbe:	f7f7 f95b 	bl	8011f78 <mbedtls_asn1_get_bitstring_null>
 801acc2:	b9f0      	cbnz	r0, 801ad02 <mbedtls_pk_parse_subpubkey+0x8a>
    if( *p + len != end )
 801acc4:	6823      	ldr	r3, [r4, #0]
 801acc6:	9a05      	ldr	r2, [sp, #20]
 801acc8:	4413      	add	r3, r2
 801acca:	429f      	cmp	r7, r3
 801accc:	d146      	bne.n	801ad5c <mbedtls_pk_parse_subpubkey+0xe4>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 801acce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801acd2:	f7ff f9dd 	bl	801a090 <mbedtls_pk_info_from_type>
 801acd6:	4601      	mov	r1, r0
 801acd8:	2800      	cmp	r0, #0
 801acda:	d041      	beq.n	801ad60 <mbedtls_pk_parse_subpubkey+0xe8>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 801acdc:	4630      	mov	r0, r6
 801acde:	f7ff f9f1 	bl	801a0c4 <mbedtls_pk_setup>
 801ace2:	4605      	mov	r5, r0
 801ace4:	2800      	cmp	r0, #0
 801ace6:	d1d6      	bne.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 801ace8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801acec:	2b01      	cmp	r3, #1
 801acee:	d00b      	beq.n	801ad08 <mbedtls_pk_parse_subpubkey+0x90>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 801acf0:	3b02      	subs	r3, #2
 801acf2:	b2db      	uxtb	r3, r3
 801acf4:	2b01      	cmp	r3, #1
 801acf6:	d914      	bls.n	801ad22 <mbedtls_pk_parse_subpubkey+0xaa>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 801acf8:	4d1a      	ldr	r5, [pc, #104]	; (801ad64 <mbedtls_pk_parse_subpubkey+0xec>)
        mbedtls_pk_free( pk );
 801acfa:	4630      	mov	r0, r6
 801acfc:	f7ff f9ba 	bl	801a074 <mbedtls_pk_free>
 801ad00:	e7c9      	b.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 801ad02:	f5a0 556c 	sub.w	r5, r0, #15104	; 0x3b00
 801ad06:	e7c6      	b.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 801ad08:	6872      	ldr	r2, [r6, #4]
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	4620      	mov	r0, r4
 801ad0e:	f7ff fcbb 	bl	801a688 <pk_get_rsapubkey>
    if( ret == 0 && *p != end )
 801ad12:	4605      	mov	r5, r0
 801ad14:	2800      	cmp	r0, #0
 801ad16:	d1f0      	bne.n	801acfa <mbedtls_pk_parse_subpubkey+0x82>
 801ad18:	6823      	ldr	r3, [r4, #0]
 801ad1a:	42bb      	cmp	r3, r7
 801ad1c:	d0bb      	beq.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 801ad1e:	4d12      	ldr	r5, [pc, #72]	; (801ad68 <mbedtls_pk_parse_subpubkey+0xf0>)
 801ad20:	e7eb      	b.n	801acfa <mbedtls_pk_parse_subpubkey+0x82>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 801ad22:	6871      	ldr	r1, [r6, #4]
 801ad24:	a802      	add	r0, sp, #8
 801ad26:	f7ff fd19 	bl	801a75c <pk_use_ecparams>
        if( ret == 0 )
 801ad2a:	4605      	mov	r5, r0
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	d1e4      	bne.n	801acfa <mbedtls_pk_parse_subpubkey+0x82>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 801ad30:	f8d6 8004 	ldr.w	r8, [r6, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 801ad34:	f108 0988 	add.w	r9, r8, #136	; 0x88
 801ad38:	6822      	ldr	r2, [r4, #0]
 801ad3a:	1abb      	subs	r3, r7, r2
 801ad3c:	4649      	mov	r1, r9
 801ad3e:	4640      	mov	r0, r8
 801ad40:	f7fc fc34 	bl	80175ac <mbedtls_ecp_point_read_binary>
 801ad44:	4605      	mov	r5, r0
 801ad46:	b118      	cbz	r0, 801ad50 <mbedtls_pk_parse_subpubkey+0xd8>
    *p = (unsigned char *) end;
 801ad48:	6027      	str	r7, [r4, #0]
    if( ret == 0 && *p != end )
 801ad4a:	2d00      	cmp	r5, #0
 801ad4c:	d0a3      	beq.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
 801ad4e:	e7d4      	b.n	801acfa <mbedtls_pk_parse_subpubkey+0x82>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 801ad50:	4649      	mov	r1, r9
 801ad52:	4640      	mov	r0, r8
 801ad54:	f7fc fcd8 	bl	8017708 <mbedtls_ecp_check_pubkey>
 801ad58:	4605      	mov	r5, r0
 801ad5a:	e7f5      	b.n	801ad48 <mbedtls_pk_parse_subpubkey+0xd0>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 801ad5c:	4d02      	ldr	r5, [pc, #8]	; (801ad68 <mbedtls_pk_parse_subpubkey+0xf0>)
 801ad5e:	e79a      	b.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801ad60:	4d00      	ldr	r5, [pc, #0]	; (801ad64 <mbedtls_pk_parse_subpubkey+0xec>)
 801ad62:	e798      	b.n	801ac96 <mbedtls_pk_parse_subpubkey+0x1e>
 801ad64:	ffffc380 	.word	0xffffc380
 801ad68:	ffffc49a 	.word	0xffffc49a

0801ad6c <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 801ad6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad70:	b089      	sub	sp, #36	; 0x24
    size_t len;
    mbedtls_pem_context pem;
#endif

    PK_VALIDATE_RET( pk != NULL );
    if( keylen == 0 )
 801ad72:	2a00      	cmp	r2, #0
 801ad74:	f000 80c9 	beq.w	801af0a <mbedtls_pk_parse_key+0x19e>
 801ad78:	4606      	mov	r6, r0
 801ad7a:	460c      	mov	r4, r1
 801ad7c:	4699      	mov	r9, r3
 801ad7e:	4690      	mov	r8, r2
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
    PK_VALIDATE_RET( key != NULL );

#if defined(MBEDTLS_PEM_PARSE_C)
   mbedtls_pem_init( &pem );
 801ad80:	a804      	add	r0, sp, #16
 801ad82:	f7ff f8c9 	bl	8019f18 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( key[keylen - 1] != '\0' )
 801ad86:	f108 37ff 	add.w	r7, r8, #4294967295
 801ad8a:	5de3      	ldrb	r3, [r4, r7]
 801ad8c:	b3b3      	cbz	r3, 801adfc <mbedtls_pk_parse_key+0x90>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 801ad8e:	4642      	mov	r2, r8
 801ad90:	4621      	mov	r1, r4
 801ad92:	4630      	mov	r0, r6
 801ad94:	f7ff fef4 	bl	801ab80 <pk_parse_key_pkcs8_unencrypted_der>
 801ad98:	4605      	mov	r5, r0
 801ad9a:	2800      	cmp	r0, #0
 801ad9c:	d045      	beq.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        return( 0 );

    mbedtls_pk_free( pk );
 801ad9e:	4630      	mov	r0, r6
 801ada0:	f7ff f968 	bl	801a074 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7ff f961 	bl	801a06c <mbedtls_pk_init>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 801adaa:	2001      	movs	r0, #1
 801adac:	f7ff f970 	bl	801a090 <mbedtls_pk_info_from_type>
 801adb0:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 801adb2:	4630      	mov	r0, r6
 801adb4:	f7ff f986 	bl	801a0c4 <mbedtls_pk_setup>
 801adb8:	b930      	cbnz	r0, 801adc8 <mbedtls_pk_parse_key+0x5c>
        pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) == 0 )
 801adba:	4642      	mov	r2, r8
 801adbc:	4621      	mov	r1, r4
 801adbe:	6870      	ldr	r0, [r6, #4]
 801adc0:	f7ff fcee 	bl	801a7a0 <pk_parse_key_pkcs1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 801adc4:	4605      	mov	r5, r0
 801adc6:	b380      	cbz	r0, 801ae2a <mbedtls_pk_parse_key+0xbe>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 801adc8:	4630      	mov	r0, r6
 801adca:	f7ff f953 	bl	801a074 <mbedtls_pk_free>
    mbedtls_pk_init( pk );
 801adce:	4630      	mov	r0, r6
 801add0:	f7ff f94c 	bl	801a06c <mbedtls_pk_init>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 801add4:	2002      	movs	r0, #2
 801add6:	f7ff f95b 	bl	801a090 <mbedtls_pk_info_from_type>
 801adda:	4601      	mov	r1, r0
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 801addc:	4630      	mov	r0, r6
 801adde:	f7ff f971 	bl	801a0c4 <mbedtls_pk_setup>
 801ade2:	b930      	cbnz	r0, 801adf2 <mbedtls_pk_parse_key+0x86>
        pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 801ade4:	4642      	mov	r2, r8
 801ade6:	4621      	mov	r1, r4
 801ade8:	6870      	ldr	r0, [r6, #4]
 801adea:	f7ff fddd 	bl	801a9a8 <pk_parse_key_sec1_der>
    if( mbedtls_pk_setup( pk, pk_info ) == 0 &&
 801adee:	4605      	mov	r5, r0
 801adf0:	b1d8      	cbz	r0, 801ae2a <mbedtls_pk_parse_key+0xbe>
                               key, keylen ) == 0 )
    {
        return( 0 );
    }
    mbedtls_pk_free( pk );
 801adf2:	4630      	mov	r0, r6
 801adf4:	f7ff f93e 	bl	801a074 <mbedtls_pk_free>
     * isn't, this leads to mbedtls_pk_free() being called
     * twice, once here and once by the caller, but this is
     * also ok and in line with the mbedtls_pk_free() calls
     * on failed PEM parsing attempts. */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801adf8:	4d49      	ldr	r5, [pc, #292]	; (801af20 <mbedtls_pk_parse_key+0x1b4>)
 801adfa:	e016      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        ret = mbedtls_pem_read_buffer( &pem,
 801adfc:	ab07      	add	r3, sp, #28
 801adfe:	9302      	str	r3, [sp, #8]
 801ae00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae02:	9301      	str	r3, [sp, #4]
 801ae04:	f8cd 9000 	str.w	r9, [sp]
 801ae08:	4623      	mov	r3, r4
 801ae0a:	4a46      	ldr	r2, [pc, #280]	; (801af24 <mbedtls_pk_parse_key+0x1b8>)
 801ae0c:	4946      	ldr	r1, [pc, #280]	; (801af28 <mbedtls_pk_parse_key+0x1bc>)
 801ae0e:	a804      	add	r0, sp, #16
 801ae10:	f7ff f888 	bl	8019f24 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801ae14:	4605      	mov	r5, r0
 801ae16:	b160      	cbz	r0, 801ae32 <mbedtls_pk_parse_key+0xc6>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 801ae18:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 801ae1c:	d077      	beq.n	801af0e <mbedtls_pk_parse_key+0x1a2>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 801ae1e:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 801ae22:	d076      	beq.n	801af12 <mbedtls_pk_parse_key+0x1a6>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801ae24:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801ae28:	d01a      	beq.n	801ae60 <mbedtls_pk_parse_key+0xf4>
}
 801ae2a:	4628      	mov	r0, r5
 801ae2c:	b009      	add	sp, #36	; 0x24
 801ae2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 801ae32:	2001      	movs	r0, #1
 801ae34:	f7ff f92c 	bl	801a090 <mbedtls_pk_info_from_type>
 801ae38:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 801ae3a:	4630      	mov	r0, r6
 801ae3c:	f7ff f942 	bl	801a0c4 <mbedtls_pk_setup>
 801ae40:	4605      	mov	r5, r0
 801ae42:	b930      	cbnz	r0, 801ae52 <mbedtls_pk_parse_key+0xe6>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 801ae44:	9a05      	ldr	r2, [sp, #20]
 801ae46:	9904      	ldr	r1, [sp, #16]
 801ae48:	6870      	ldr	r0, [r6, #4]
 801ae4a:	f7ff fca9 	bl	801a7a0 <pk_parse_key_pkcs1_der>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 801ae4e:	4605      	mov	r5, r0
 801ae50:	b110      	cbz	r0, 801ae58 <mbedtls_pk_parse_key+0xec>
            mbedtls_pk_free( pk );
 801ae52:	4630      	mov	r0, r6
 801ae54:	f7ff f90e 	bl	801a074 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 801ae58:	a804      	add	r0, sp, #16
 801ae5a:	f7ff f8f5 	bl	801a048 <mbedtls_pem_free>
        return( ret );
 801ae5e:	e7e4      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
    if( key[keylen - 1] != '\0' )
 801ae60:	5de3      	ldrb	r3, [r4, r7]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d193      	bne.n	801ad8e <mbedtls_pk_parse_key+0x22>
        ret = mbedtls_pem_read_buffer( &pem,
 801ae66:	ab07      	add	r3, sp, #28
 801ae68:	9302      	str	r3, [sp, #8]
 801ae6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ae6c:	9301      	str	r3, [sp, #4]
 801ae6e:	f8cd 9000 	str.w	r9, [sp]
 801ae72:	4623      	mov	r3, r4
 801ae74:	4a2d      	ldr	r2, [pc, #180]	; (801af2c <mbedtls_pk_parse_key+0x1c0>)
 801ae76:	492e      	ldr	r1, [pc, #184]	; (801af30 <mbedtls_pk_parse_key+0x1c4>)
 801ae78:	a804      	add	r0, sp, #16
 801ae7a:	f7ff f853 	bl	8019f24 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801ae7e:	4605      	mov	r5, r0
 801ae80:	b1e8      	cbz	r0, 801aebe <mbedtls_pk_parse_key+0x152>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 801ae82:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 801ae86:	d046      	beq.n	801af16 <mbedtls_pk_parse_key+0x1aa>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 801ae88:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 801ae8c:	d045      	beq.n	801af1a <mbedtls_pk_parse_key+0x1ae>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801ae8e:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801ae92:	d1ca      	bne.n	801ae2a <mbedtls_pk_parse_key+0xbe>
    if( key[keylen - 1] != '\0' )
 801ae94:	5de3      	ldrb	r3, [r4, r7]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	f47f af79 	bne.w	801ad8e <mbedtls_pk_parse_key+0x22>
        ret = mbedtls_pem_read_buffer( &pem,
 801ae9c:	ab07      	add	r3, sp, #28
 801ae9e:	9302      	str	r3, [sp, #8]
 801aea0:	2300      	movs	r3, #0
 801aea2:	9301      	str	r3, [sp, #4]
 801aea4:	9300      	str	r3, [sp, #0]
 801aea6:	4623      	mov	r3, r4
 801aea8:	4a22      	ldr	r2, [pc, #136]	; (801af34 <mbedtls_pk_parse_key+0x1c8>)
 801aeaa:	4923      	ldr	r1, [pc, #140]	; (801af38 <mbedtls_pk_parse_key+0x1cc>)
 801aeac:	a804      	add	r0, sp, #16
 801aeae:	f7ff f839 	bl	8019f24 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801aeb2:	4605      	mov	r5, r0
 801aeb4:	b1d0      	cbz	r0, 801aeec <mbedtls_pk_parse_key+0x180>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801aeb6:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801aeba:	d1b6      	bne.n	801ae2a <mbedtls_pk_parse_key+0xbe>
 801aebc:	e767      	b.n	801ad8e <mbedtls_pk_parse_key+0x22>
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY );
 801aebe:	2002      	movs	r0, #2
 801aec0:	f7ff f8e6 	bl	801a090 <mbedtls_pk_info_from_type>
 801aec4:	4601      	mov	r1, r0
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 801aec6:	4630      	mov	r0, r6
 801aec8:	f7ff f8fc 	bl	801a0c4 <mbedtls_pk_setup>
 801aecc:	4605      	mov	r5, r0
 801aece:	b930      	cbnz	r0, 801aede <mbedtls_pk_parse_key+0x172>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 801aed0:	9a05      	ldr	r2, [sp, #20]
 801aed2:	9904      	ldr	r1, [sp, #16]
 801aed4:	6870      	ldr	r0, [r6, #4]
 801aed6:	f7ff fd67 	bl	801a9a8 <pk_parse_key_sec1_der>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 801aeda:	4605      	mov	r5, r0
 801aedc:	b110      	cbz	r0, 801aee4 <mbedtls_pk_parse_key+0x178>
            mbedtls_pk_free( pk );
 801aede:	4630      	mov	r0, r6
 801aee0:	f7ff f8c8 	bl	801a074 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 801aee4:	a804      	add	r0, sp, #16
 801aee6:	f7ff f8af 	bl	801a048 <mbedtls_pem_free>
        return( ret );
 801aeea:	e79e      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 801aeec:	9a05      	ldr	r2, [sp, #20]
 801aeee:	9904      	ldr	r1, [sp, #16]
 801aef0:	4630      	mov	r0, r6
 801aef2:	f7ff fe45 	bl	801ab80 <pk_parse_key_pkcs8_unencrypted_der>
 801aef6:	4605      	mov	r5, r0
 801aef8:	b918      	cbnz	r0, 801af02 <mbedtls_pk_parse_key+0x196>
        mbedtls_pem_free( &pem );
 801aefa:	a804      	add	r0, sp, #16
 801aefc:	f7ff f8a4 	bl	801a048 <mbedtls_pem_free>
        return( ret );
 801af00:	e793      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
            mbedtls_pk_free( pk );
 801af02:	4630      	mov	r0, r6
 801af04:	f7ff f8b6 	bl	801a074 <mbedtls_pk_free>
 801af08:	e7f7      	b.n	801aefa <mbedtls_pk_parse_key+0x18e>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 801af0a:	4d05      	ldr	r5, [pc, #20]	; (801af20 <mbedtls_pk_parse_key+0x1b4>)
 801af0c:	e78d      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 801af0e:	4d0b      	ldr	r5, [pc, #44]	; (801af3c <mbedtls_pk_parse_key+0x1d0>)
 801af10:	e78b      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 801af12:	4d0b      	ldr	r5, [pc, #44]	; (801af40 <mbedtls_pk_parse_key+0x1d4>)
 801af14:	e789      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 801af16:	4d09      	ldr	r5, [pc, #36]	; (801af3c <mbedtls_pk_parse_key+0x1d0>)
 801af18:	e787      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 801af1a:	4d09      	ldr	r5, [pc, #36]	; (801af40 <mbedtls_pk_parse_key+0x1d4>)
 801af1c:	e785      	b.n	801ae2a <mbedtls_pk_parse_key+0xbe>
 801af1e:	bf00      	nop
 801af20:	ffffc300 	.word	0xffffc300
 801af24:	08032e28 	.word	0x08032e28
 801af28:	08032e48 	.word	0x08032e48
 801af2c:	08032e68 	.word	0x08032e68
 801af30:	08032e88 	.word	0x08032e88
 801af34:	08032ea8 	.word	0x08032ea8
 801af38:	08032ec4 	.word	0x08032ec4
 801af3c:	ffffc480 	.word	0xffffc480
 801af40:	ffffc400 	.word	0xffffc400

0801af44 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801af44:	b508      	push	{r3, lr}
 801af46:	460a      	mov	r2, r1
    memset_func( buf, 0, len );
 801af48:	4b02      	ldr	r3, [pc, #8]	; (801af54 <mbedtls_platform_zeroize+0x10>)
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2100      	movs	r1, #0
 801af4e:	4798      	blx	r3
}
 801af50:	bd08      	pop	{r3, pc}
 801af52:	bf00      	nop
 801af54:	20000018 	.word	0x20000018

0801af58 <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 801af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af5c:	b093      	sub	sp, #76	; 0x4c
 801af5e:	9011      	str	r0, [sp, #68]	; 0x44
 801af60:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
    size_t i;

    r0 = ctx->r[0];
 801af62:	4603      	mov	r3, r0
 801af64:	f8d0 e000 	ldr.w	lr, [r0]
    r1 = ctx->r[1];
 801af68:	6844      	ldr	r4, [r0, #4]
 801af6a:	9403      	str	r4, [sp, #12]
    r2 = ctx->r[2];
 801af6c:	6885      	ldr	r5, [r0, #8]
 801af6e:	9507      	str	r5, [sp, #28]
    r3 = ctx->r[3];
 801af70:	68c0      	ldr	r0, [r0, #12]
 801af72:	900d      	str	r0, [sp, #52]	; 0x34

    rs1 = r1 + ( r1 >> 2U );
 801af74:	eb04 0494 	add.w	r4, r4, r4, lsr #2
 801af78:	940c      	str	r4, [sp, #48]	; 0x30
    rs2 = r2 + ( r2 >> 2U );
 801af7a:	eb05 0495 	add.w	r4, r5, r5, lsr #2
 801af7e:	9406      	str	r4, [sp, #24]
    rs3 = r3 + ( r3 >> 2U );
 801af80:	eb00 0090 	add.w	r0, r0, r0, lsr #2
 801af84:	900e      	str	r0, [sp, #56]	; 0x38

    acc0 = ctx->acc[0];
 801af86:	f8d3 b020 	ldr.w	fp, [r3, #32]
    acc1 = ctx->acc[1];
 801af8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    acc2 = ctx->acc[2];
 801af8c:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
    acc3 = ctx->acc[3];
 801af90:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    acc4 = ctx->acc[4];
 801af92:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 801af96:	2900      	cmp	r1, #0
 801af98:	f000 80e3 	beq.w	801b162 <poly1305_process+0x20a>
 801af9c:	4694      	mov	ip, r2
 801af9e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 801afa2:	9310      	str	r3, [sp, #64]	; 0x40
 801afa4:	f8cd b000 	str.w	fp, [sp]
 801afa8:	4602      	mov	r2, r0
 801afaa:	4634      	mov	r4, r6
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = BYTES_TO_U32_LE( input, offset + 0  );
 801afac:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801afb0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801afb4:	041b      	lsls	r3, r3, #16
 801afb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801afba:	f89c 1000 	ldrb.w	r1, [ip]
 801afbe:	430b      	orrs	r3, r1
 801afc0:	f89c 1003 	ldrb.w	r1, [ip, #3]
 801afc4:	ea43 6701 	orr.w	r7, r3, r1, lsl #24
        d1   = BYTES_TO_U32_LE( input, offset + 4  );
 801afc8:	f89c 1005 	ldrb.w	r1, [ip, #5]
 801afcc:	f89c 3006 	ldrb.w	r3, [ip, #6]
 801afd0:	041b      	lsls	r3, r3, #16
 801afd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801afd6:	f89c 1004 	ldrb.w	r1, [ip, #4]
 801afda:	4319      	orrs	r1, r3
 801afdc:	f89c 3007 	ldrb.w	r3, [ip, #7]
 801afe0:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
        d3   = BYTES_TO_U32_LE( input, offset + 12 );

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 801afe4:	2300      	movs	r3, #0
 801afe6:	1852      	adds	r2, r2, r1
 801afe8:	f143 0300 	adc.w	r3, r3, #0
        d0  += (uint64_t) acc0;
 801afec:	9900      	ldr	r1, [sp, #0]
 801afee:	2600      	movs	r6, #0
 801aff0:	4608      	mov	r0, r1
 801aff2:	19c0      	adds	r0, r0, r7
 801aff4:	f146 0100 	adc.w	r1, r6, #0
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 801aff8:	2000      	movs	r0, #0
 801affa:	188e      	adds	r6, r1, r2
 801affc:	eb40 0203 	adc.w	r2, r0, r3
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
 801b000:	f89c 1009 	ldrb.w	r1, [ip, #9]
 801b004:	f89c 300a 	ldrb.w	r3, [ip, #10]
 801b008:	041b      	lsls	r3, r3, #16
 801b00a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801b00e:	f89c 1008 	ldrb.w	r1, [ip, #8]
 801b012:	430b      	orrs	r3, r1
 801b014:	f89c 100b 	ldrb.w	r1, [ip, #11]
 801b018:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 801b01c:	f04f 0b00 	mov.w	fp, #0
 801b020:	eb1a 0a03 	adds.w	sl, sl, r3
 801b024:	f14b 0b00 	adc.w	fp, fp, #0
 801b028:	eb12 010a 	adds.w	r1, r2, sl
 801b02c:	eb40 080b 	adc.w	r8, r0, fp
        d3   = BYTES_TO_U32_LE( input, offset + 12 );
 801b030:	f89c 200d 	ldrb.w	r2, [ip, #13]
 801b034:	f89c 300e 	ldrb.w	r3, [ip, #14]
 801b038:	041b      	lsls	r3, r3, #16
 801b03a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b03e:	f89c 200c 	ldrb.w	r2, [ip, #12]
 801b042:	4313      	orrs	r3, r2
 801b044:	f89c 200f 	ldrb.w	r2, [ip, #15]
 801b048:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 801b04c:	2500      	movs	r5, #0
 801b04e:	18e4      	adds	r4, r4, r3
 801b050:	f145 0500 	adc.w	r5, r5, #0
 801b054:	4603      	mov	r3, r0
 801b056:	eb18 0204 	adds.w	r2, r8, r4
 801b05a:	eb45 0303 	adc.w	r3, r5, r3
        acc0 = (uint32_t) d0;
        acc1 = (uint32_t) d1;
        acc2 = (uint32_t) d2;
        acc3 = (uint32_t) d3;
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 801b05e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b060:	4403      	add	r3, r0
 801b062:	4499      	add	r9, r3
        acc0 = (uint32_t) d0;
 801b064:	9b00      	ldr	r3, [sp, #0]
 801b066:	443b      	add	r3, r7
    return( (uint64_t) a * b );
 801b068:	fbae 4503 	umull	r4, r5, lr, r3

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 801b06c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b06e:	fbe0 4506 	umlal	r4, r5, r0, r6
             mul64( acc1, rs3 ) +
 801b072:	9f06      	ldr	r7, [sp, #24]
 801b074:	fbe7 4501 	umlal	r4, r5, r7, r1
        d0 = mul64( acc0, r0  ) +
 801b078:	46a2      	mov	sl, r4
 801b07a:	46ab      	mov	fp, r5
 801b07c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b07e:	fbe2 ab05 	umlal	sl, fp, r2, r5
    return( (uint64_t) a * b );
 801b082:	9c07      	ldr	r4, [sp, #28]
 801b084:	fba4 4503 	umull	r4, r5, r4, r3
        d1 = mul64( acc0, r1  ) +
             mul64( acc1, r0  ) +
             mul64( acc2, rs3 ) +
             mul64( acc3, rs2 ) +
             mul64( acc4, rs1 );
        d2 = mul64( acc0, r2  ) +
 801b088:	9f03      	ldr	r7, [sp, #12]
 801b08a:	fbe7 4506 	umlal	r4, r5, r7, r6
             mul64( acc1, r1  ) +
 801b08e:	fbee 4501 	umlal	r4, r5, lr, r1
             mul64( acc2, r0  ) +
 801b092:	fbe2 4500 	umlal	r4, r5, r2, r0
        d2 = mul64( acc0, r2  ) +
 801b096:	4627      	mov	r7, r4
 801b098:	46a8      	mov	r8, r5
 801b09a:	9d06      	ldr	r5, [sp, #24]
 801b09c:	fbe5 7809 	umlal	r7, r8, r5, r9
 801b0a0:	e9cd 7808 	strd	r7, r8, [sp, #32]
    return( (uint64_t) a * b );
 801b0a4:	9c07      	ldr	r4, [sp, #28]
 801b0a6:	fba6 4504 	umull	r4, r5, r6, r4
             mul64( acc3, rs3 ) +
             mul64( acc4, rs2 );
        d3 = mul64( acc0, r3  ) +
 801b0aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b0ac:	fbe3 4507 	umlal	r4, r5, r3, r7
             mul64( acc1, r2  ) +
 801b0b0:	9f03      	ldr	r7, [sp, #12]
 801b0b2:	fbe7 4501 	umlal	r4, r5, r7, r1
             mul64( acc2, r1  ) +
 801b0b6:	fbe2 450e 	umlal	r4, r5, r2, lr
        d3 = mul64( acc0, r3  ) +
 801b0ba:	4627      	mov	r7, r4
 801b0bc:	46a8      	mov	r8, r5
 801b0be:	fbe0 7809 	umlal	r7, r8, r0, r9
    return( (uint64_t) a * b );
 801b0c2:	9c03      	ldr	r4, [sp, #12]
 801b0c4:	fba4 4503 	umull	r4, r5, r4, r3
        d1 = mul64( acc0, r1  ) +
 801b0c8:	fbee 4506 	umlal	r4, r5, lr, r6
             mul64( acc1, r0  ) +
 801b0cc:	fbe0 4501 	umlal	r4, r5, r0, r1
             mul64( acc2, rs3 ) +
 801b0d0:	9b06      	ldr	r3, [sp, #24]
 801b0d2:	fbe2 4503 	umlal	r4, r5, r2, r3
             mul64( acc3, r0  ) +
             mul64( acc4, rs3 );
        acc4 *= r0;

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 801b0d6:	e9cd ab00 	strd	sl, fp, [sp]
 801b0da:	2600      	movs	r6, #0
 801b0dc:	eb14 030b 	adds.w	r3, r4, fp
 801b0e0:	9304      	str	r3, [sp, #16]
 801b0e2:	eb45 0306 	adc.w	r3, r5, r6
 801b0e6:	9305      	str	r3, [sp, #20]
 801b0e8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801b0ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b0ee:	fbe5 3409 	umlal	r3, r4, r5, r9
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	4621      	mov	r1, r4
        d2 += ( d1 >> 32 );
 801b0f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b0fa:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 801b0fe:	eb11 0a04 	adds.w	sl, r1, r4
 801b102:	462a      	mov	r2, r5
 801b104:	eb46 0202 	adc.w	r2, r6, r2
        d3 += ( d2 >> 32 );
 801b108:	4630      	mov	r0, r6
 801b10a:	19d1      	adds	r1, r2, r7
 801b10c:	eb46 0208 	adc.w	r2, r6, r8
        acc0 = (uint32_t) d0;
        acc1 = (uint32_t) d1;
        acc2 = (uint32_t) d2;
        acc3 = (uint32_t) d3;
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 801b110:	fb09 290e 	mla	r9, r9, lr, r2

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 801b114:	9c00      	ldr	r4, [sp, #0]
 801b116:	4635      	mov	r5, r6
 801b118:	ea4f 0699 	mov.w	r6, r9, lsr #2
 801b11c:	f029 0203 	bic.w	r2, r9, #3
 801b120:	2300      	movs	r3, #0
 801b122:	1992      	adds	r2, r2, r6
 801b124:	f143 0300 	adc.w	r3, r3, #0
 801b128:	1917      	adds	r7, r2, r4
 801b12a:	eb43 0505 	adc.w	r5, r3, r5
        acc4 &= 3U;
        acc0 = (uint32_t) d0;
 801b12e:	9700      	str	r7, [sp, #0]
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 801b130:	462b      	mov	r3, r5
 801b132:	4604      	mov	r4, r0
 801b134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b136:	4605      	mov	r5, r0
 801b138:	18d2      	adds	r2, r2, r3
 801b13a:	eb40 0404 	adc.w	r4, r0, r4
        acc1 = (uint32_t) d0;
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 801b13e:	eb1a 0a04 	adds.w	sl, sl, r4
 801b142:	eb40 0505 	adc.w	r5, r0, r5
        acc2 = (uint32_t) d0;
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 801b146:	194c      	adds	r4, r1, r5
 801b148:	4140      	adcs	r0, r0
        acc4 &= 3U;
 801b14a:	f009 0903 	and.w	r9, r9, #3
        acc3 = (uint32_t) d0;
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
        acc4 = (uint32_t) d0;
 801b14e:	4481      	add	r9, r0
    for( i = 0U; i < nblocks; i++ )
 801b150:	f10c 0c10 	add.w	ip, ip, #16
 801b154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b156:	459c      	cmp	ip, r3
 801b158:	f47f af28 	bne.w	801afac <poly1305_process+0x54>
 801b15c:	46bb      	mov	fp, r7
 801b15e:	4610      	mov	r0, r2
 801b160:	4626      	mov	r6, r4

        offset    += POLY1305_BLOCK_SIZE_BYTES;
    }

    ctx->acc[0] = acc0;
 801b162:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b164:	f8c3 b020 	str.w	fp, [r3, #32]
    ctx->acc[1] = acc1;
 801b168:	6258      	str	r0, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 801b16a:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 801b16e:	62de      	str	r6, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 801b170:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
}
 801b174:	b013      	add	sp, #76	; 0x4c
 801b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b17a <mbedtls_poly1305_init>:
    mac[14] = (unsigned char)( acc3 >> 16 );
    mac[15] = (unsigned char)( acc3 >> 24 );
}

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 801b17a:	b508      	push	{r3, lr}
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 801b17c:	2148      	movs	r1, #72	; 0x48
 801b17e:	f7ff fee1 	bl	801af44 <mbedtls_platform_zeroize>
}
 801b182:	bd08      	pop	{r3, pc}

0801b184 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
    if( ctx == NULL )
 801b184:	b120      	cbz	r0, 801b190 <mbedtls_poly1305_free+0xc>
{
 801b186:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 801b188:	2148      	movs	r1, #72	; 0x48
 801b18a:	f7ff fedb 	bl	801af44 <mbedtls_platform_zeroize>
}
 801b18e:	bd08      	pop	{r3, pc}
 801b190:	4770      	bx	lr

0801b192 <mbedtls_poly1305_starts>:

int mbedtls_poly1305_starts( mbedtls_poly1305_context *ctx,
                             const unsigned char key[32] )
{
 801b192:	b538      	push	{r3, r4, r5, lr}
 801b194:	4604      	mov	r4, r0
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( key != NULL );

    /* r &= 0x0ffffffc0ffffffc0ffffffc0fffffff */
    ctx->r[0] = BYTES_TO_U32_LE( key, 0 )  & 0x0FFFFFFFU;
 801b196:	784a      	ldrb	r2, [r1, #1]
 801b198:	788b      	ldrb	r3, [r1, #2]
 801b19a:	041b      	lsls	r3, r3, #16
 801b19c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b1a0:	780a      	ldrb	r2, [r1, #0]
 801b1a2:	4313      	orrs	r3, r2
 801b1a4:	78ca      	ldrb	r2, [r1, #3]
 801b1a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b1aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b1ae:	6003      	str	r3, [r0, #0]
    ctx->r[1] = BYTES_TO_U32_LE( key, 4 )  & 0x0FFFFFFCU;
 801b1b0:	794a      	ldrb	r2, [r1, #5]
 801b1b2:	798b      	ldrb	r3, [r1, #6]
 801b1b4:	041b      	lsls	r3, r3, #16
 801b1b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b1ba:	790a      	ldrb	r2, [r1, #4]
 801b1bc:	4313      	orrs	r3, r2
 801b1be:	79ca      	ldrb	r2, [r1, #7]
 801b1c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b1c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b1c8:	f023 0303 	bic.w	r3, r3, #3
 801b1cc:	6043      	str	r3, [r0, #4]
    ctx->r[2] = BYTES_TO_U32_LE( key, 8 )  & 0x0FFFFFFCU;
 801b1ce:	7a4a      	ldrb	r2, [r1, #9]
 801b1d0:	7a8b      	ldrb	r3, [r1, #10]
 801b1d2:	041b      	lsls	r3, r3, #16
 801b1d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b1d8:	7a0a      	ldrb	r2, [r1, #8]
 801b1da:	4313      	orrs	r3, r2
 801b1dc:	7aca      	ldrb	r2, [r1, #11]
 801b1de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b1e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b1e6:	f023 0303 	bic.w	r3, r3, #3
 801b1ea:	6083      	str	r3, [r0, #8]
    ctx->r[3] = BYTES_TO_U32_LE( key, 12 ) & 0x0FFFFFFCU;
 801b1ec:	7b4a      	ldrb	r2, [r1, #13]
 801b1ee:	7b8b      	ldrb	r3, [r1, #14]
 801b1f0:	041b      	lsls	r3, r3, #16
 801b1f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b1f6:	7b0a      	ldrb	r2, [r1, #12]
 801b1f8:	4313      	orrs	r3, r2
 801b1fa:	7bca      	ldrb	r2, [r1, #15]
 801b1fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b200:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b204:	f023 0303 	bic.w	r3, r3, #3
 801b208:	60c3      	str	r3, [r0, #12]

    ctx->s[0] = BYTES_TO_U32_LE( key, 16 );
 801b20a:	7c4a      	ldrb	r2, [r1, #17]
 801b20c:	7c8b      	ldrb	r3, [r1, #18]
 801b20e:	041b      	lsls	r3, r3, #16
 801b210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b214:	7c0a      	ldrb	r2, [r1, #16]
 801b216:	4313      	orrs	r3, r2
 801b218:	7cca      	ldrb	r2, [r1, #19]
 801b21a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b21e:	6103      	str	r3, [r0, #16]
    ctx->s[1] = BYTES_TO_U32_LE( key, 20 );
 801b220:	7d4a      	ldrb	r2, [r1, #21]
 801b222:	7d8b      	ldrb	r3, [r1, #22]
 801b224:	041b      	lsls	r3, r3, #16
 801b226:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b22a:	7d0a      	ldrb	r2, [r1, #20]
 801b22c:	4313      	orrs	r3, r2
 801b22e:	7dca      	ldrb	r2, [r1, #23]
 801b230:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b234:	6143      	str	r3, [r0, #20]
    ctx->s[2] = BYTES_TO_U32_LE( key, 24 );
 801b236:	7e4a      	ldrb	r2, [r1, #25]
 801b238:	7e8b      	ldrb	r3, [r1, #26]
 801b23a:	041b      	lsls	r3, r3, #16
 801b23c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b240:	7e0a      	ldrb	r2, [r1, #24]
 801b242:	4313      	orrs	r3, r2
 801b244:	7eca      	ldrb	r2, [r1, #27]
 801b246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b24a:	6183      	str	r3, [r0, #24]
    ctx->s[3] = BYTES_TO_U32_LE( key, 28 );
 801b24c:	7f4a      	ldrb	r2, [r1, #29]
 801b24e:	7f8b      	ldrb	r3, [r1, #30]
 801b250:	041b      	lsls	r3, r3, #16
 801b252:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b256:	7f0a      	ldrb	r2, [r1, #28]
 801b258:	4313      	orrs	r3, r2
 801b25a:	7fca      	ldrb	r2, [r1, #31]
 801b25c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b260:	61c3      	str	r3, [r0, #28]

    /* Initial accumulator state */
    ctx->acc[0] = 0U;
 801b262:	2500      	movs	r5, #0
 801b264:	6205      	str	r5, [r0, #32]
    ctx->acc[1] = 0U;
 801b266:	6245      	str	r5, [r0, #36]	; 0x24
    ctx->acc[2] = 0U;
 801b268:	6285      	str	r5, [r0, #40]	; 0x28
    ctx->acc[3] = 0U;
 801b26a:	62c5      	str	r5, [r0, #44]	; 0x2c
    ctx->acc[4] = 0U;
 801b26c:	6305      	str	r5, [r0, #48]	; 0x30

    /* Queue initially empty */
    mbedtls_platform_zeroize( ctx->queue, sizeof( ctx->queue ) );
 801b26e:	2110      	movs	r1, #16
 801b270:	3034      	adds	r0, #52	; 0x34
 801b272:	f7ff fe67 	bl	801af44 <mbedtls_platform_zeroize>
    ctx->queue_len = 0U;
 801b276:	6465      	str	r5, [r4, #68]	; 0x44

    return( 0 );
}
 801b278:	4628      	mov	r0, r5
 801b27a:	bd38      	pop	{r3, r4, r5, pc}

0801b27c <mbedtls_poly1305_update>:
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 801b27c:	2a00      	cmp	r2, #0
 801b27e:	d042      	beq.n	801b306 <mbedtls_poly1305_update+0x8a>
{
 801b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b284:	4604      	mov	r4, r0
 801b286:	460f      	mov	r7, r1
 801b288:	4615      	mov	r5, r2
    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 801b28a:	6c46      	ldr	r6, [r0, #68]	; 0x44
 801b28c:	b31e      	cbz	r6, 801b2d6 <mbedtls_poly1305_update+0x5a>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 801b28e:	f1c6 0810 	rsb	r8, r6, #16

        if( ilen < queue_free_len )
 801b292:	4542      	cmp	r2, r8
 801b294:	d208      	bcs.n	801b2a8 <mbedtls_poly1305_update+0x2c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 801b296:	f106 0034 	add.w	r0, r6, #52	; 0x34
 801b29a:	4420      	add	r0, r4
 801b29c:	f00f f94d 	bl	802a53a <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 801b2a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b2a2:	441d      	add	r5, r3
 801b2a4:	6465      	str	r5, [r4, #68]	; 0x44

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
    }

    if( remaining > 0U )
 801b2a6:	e02b      	b.n	801b300 <mbedtls_poly1305_update+0x84>
            memcpy( &ctx->queue[ctx->queue_len],
 801b2a8:	f106 0034 	add.w	r0, r6, #52	; 0x34
 801b2ac:	4642      	mov	r2, r8
 801b2ae:	4420      	add	r0, r4
 801b2b0:	f00f f943 	bl	802a53a <memcpy>
            ctx->queue_len = 0U;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	6463      	str	r3, [r4, #68]	; 0x44
            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 801b2b8:	2301      	movs	r3, #1
 801b2ba:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801b2be:	4619      	mov	r1, r3
 801b2c0:	4620      	mov	r0, r4
 801b2c2:	f7ff fe49 	bl	801af58 <poly1305_process>
            remaining -= queue_free_len;
 801b2c6:	3e10      	subs	r6, #16
 801b2c8:	4435      	add	r5, r6
    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 801b2ca:	2d0f      	cmp	r5, #15
 801b2cc:	d901      	bls.n	801b2d2 <mbedtls_poly1305_update+0x56>
            offset    += queue_free_len;
 801b2ce:	4646      	mov	r6, r8
 801b2d0:	e003      	b.n	801b2da <mbedtls_poly1305_update+0x5e>
 801b2d2:	4646      	mov	r6, r8
 801b2d4:	e00c      	b.n	801b2f0 <mbedtls_poly1305_update+0x74>
    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 801b2d6:	2a0f      	cmp	r2, #15
 801b2d8:	d90b      	bls.n	801b2f2 <mbedtls_poly1305_update+0x76>
        poly1305_process( ctx, nblocks, &input[offset], 1U );
 801b2da:	2301      	movs	r3, #1
 801b2dc:	19ba      	adds	r2, r7, r6
 801b2de:	0929      	lsrs	r1, r5, #4
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	f7ff fe39 	bl	801af58 <poly1305_process>
        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 801b2e6:	f025 030f 	bic.w	r3, r5, #15
 801b2ea:	441e      	add	r6, r3
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 801b2ec:	f005 050f 	and.w	r5, r5, #15
    if( remaining > 0U )
 801b2f0:	b135      	cbz	r5, 801b300 <mbedtls_poly1305_update+0x84>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 801b2f2:	6465      	str	r5, [r4, #68]	; 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 801b2f4:	462a      	mov	r2, r5
 801b2f6:	19b9      	adds	r1, r7, r6
 801b2f8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801b2fc:	f00f f91d 	bl	802a53a <memcpy>
    }

    return( 0 );
}
 801b300:	2000      	movs	r0, #0
 801b302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b306:	2000      	movs	r0, #0
 801b308:	4770      	bx	lr

0801b30a <mbedtls_poly1305_finish>:

int mbedtls_poly1305_finish( mbedtls_poly1305_context *ctx,
                             unsigned char mac[16] )
{
 801b30a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30e:	b087      	sub	sp, #28
 801b310:	4605      	mov	r5, r0
 801b312:	460c      	mov	r4, r1
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( mac != NULL );

    /* Process any leftover data */
    if( ctx->queue_len > 0U )
 801b314:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b316:	2800      	cmp	r0, #0
 801b318:	f040 8096 	bne.w	801b448 <mbedtls_poly1305_finish+0x13e>
    acc0 = ctx->acc[0];
 801b31c:	6a2e      	ldr	r6, [r5, #32]
    acc1 = ctx->acc[1];
 801b31e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    acc2 = ctx->acc[2];
 801b320:	f8d5 c028 	ldr.w	ip, [r5, #40]	; 0x28
    d  = ( (uint64_t) acc0 + 5U );
 801b324:	1d73      	adds	r3, r6, #5
 801b326:	bf2c      	ite	cs
 801b328:	2301      	movcs	r3, #1
 801b32a:	2300      	movcc	r3, #0
    d  = ( (uint64_t) acc1 + ( d >> 32 ) );
 801b32c:	9300      	str	r3, [sp, #0]
 801b32e:	2300      	movs	r3, #0
 801b330:	9301      	str	r3, [sp, #4]
 801b332:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b336:	eb10 0907 	adds.w	r9, r0, r7
 801b33a:	f141 0a00 	adc.w	sl, r1, #0
 801b33e:	464a      	mov	r2, r9
 801b340:	4653      	mov	r3, sl
    d  = ( (uint64_t) acc2 + ( d >> 32 ) );
 801b342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b346:	eb1a 0a0c 	adds.w	sl, sl, ip
 801b34a:	f141 0b00 	adc.w	fp, r1, #0
 801b34e:	46d0      	mov	r8, sl
 801b350:	46d9      	mov	r9, fp
    d  = ( (uint64_t) acc3 + ( d >> 32 ) );
 801b352:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801b356:	460a      	mov	r2, r1
 801b358:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801b35a:	eb1b 0103 	adds.w	r1, fp, r3
 801b35e:	f142 0200 	adc.w	r2, r2, #0
 801b362:	4613      	mov	r3, r2
 801b364:	460a      	mov	r2, r1
    g4 = acc4 + (uint32_t) ( d >> 32U );
 801b366:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b368:	eb01 0b03 	add.w	fp, r1, r3
    mask = (uint32_t) 0U - ( g4 >> 2U );
 801b36c:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801b370:	f1cb 0000 	rsb	r0, fp, #0
    mask_inv = ~mask;
 801b374:	f10b 3bff 	add.w	fp, fp, #4294967295
    acc0 = ( acc0 & mask_inv ) | ( g0 & mask );
 801b378:	ea06 010b 	and.w	r1, r6, fp
    g0 = (uint32_t) d;
 801b37c:	3605      	adds	r6, #5
    acc0 = ( acc0 & mask_inv ) | ( g0 & mask );
 801b37e:	4006      	ands	r6, r0
 801b380:	ea41 0e06 	orr.w	lr, r1, r6
    acc1 = ( acc1 & mask_inv ) | ( g1 & mask );
 801b384:	ea07 070b 	and.w	r7, r7, fp
    acc2 = ( acc2 & mask_inv ) | ( g2 & mask );
 801b388:	ea0c 080b 	and.w	r8, ip, fp
    acc3 = ( acc3 & mask_inv ) | ( g3 & mask );
 801b38c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801b38e:	ea01 0b0b 	and.w	fp, r1, fp
    acc0 = (uint32_t) d;
 801b392:	6929      	ldr	r1, [r5, #16]
 801b394:	eb0e 0c01 	add.w	ip, lr, r1
    acc1 = ( acc1 & mask_inv ) | ( g1 & mask );
 801b398:	9e02      	ldr	r6, [sp, #8]
 801b39a:	9002      	str	r0, [sp, #8]
 801b39c:	4006      	ands	r6, r0
 801b39e:	433e      	orrs	r6, r7
    d = (uint64_t) acc1 + ctx->s[1] + ( d >> 32U );
 801b3a0:	6968      	ldr	r0, [r5, #20]
 801b3a2:	2100      	movs	r1, #0
 801b3a4:	1980      	adds	r0, r0, r6
 801b3a6:	f141 0100 	adc.w	r1, r1, #0
    d = (uint64_t) acc0 + ctx->s[0];
 801b3aa:	692f      	ldr	r7, [r5, #16]
 801b3ac:	f04f 0a00 	mov.w	sl, #0
 801b3b0:	463e      	mov	r6, r7
 801b3b2:	eb16 060e 	adds.w	r6, r6, lr
 801b3b6:	f14a 0700 	adc.w	r7, sl, #0
    d = (uint64_t) acc1 + ctx->s[1] + ( d >> 32U );
 801b3ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b3be:	19c6      	adds	r6, r0, r7
 801b3c0:	eb41 070e 	adc.w	r7, r1, lr
    acc2 = ( acc2 & mask_inv ) | ( g2 & mask );
 801b3c4:	9902      	ldr	r1, [sp, #8]
 801b3c6:	9804      	ldr	r0, [sp, #16]
 801b3c8:	ea01 0a00 	and.w	sl, r1, r0
 801b3cc:	ea4a 0808 	orr.w	r8, sl, r8
    d = (uint64_t) acc2 + ctx->s[2] + ( d >> 32U );
 801b3d0:	69a8      	ldr	r0, [r5, #24]
 801b3d2:	2100      	movs	r1, #0
 801b3d4:	eb10 0008 	adds.w	r0, r0, r8
 801b3d8:	f141 0100 	adc.w	r1, r1, #0
 801b3dc:	e9dd 9a00 	ldrd	r9, sl, [sp]
 801b3e0:	19c7      	adds	r7, r0, r7
 801b3e2:	eb41 0e0a 	adc.w	lr, r1, sl
    acc3 = ( acc3 & mask_inv ) | ( g3 & mask );
 801b3e6:	9802      	ldr	r0, [sp, #8]
 801b3e8:	4010      	ands	r0, r2
 801b3ea:	ea40 0b0b 	orr.w	fp, r0, fp
 801b3ee:	69eb      	ldr	r3, [r5, #28]
 801b3f0:	449b      	add	fp, r3
    acc3 += ctx->s[3] + (uint32_t) ( d >> 32U );
 801b3f2:	44f3      	add	fp, lr
    mac[ 0] = (unsigned char)( acc0       );
 801b3f4:	f884 c000 	strb.w	ip, [r4]
    mac[ 1] = (unsigned char)( acc0 >>  8 );
 801b3f8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801b3fc:	7063      	strb	r3, [r4, #1]
    mac[ 2] = (unsigned char)( acc0 >> 16 );
 801b3fe:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801b402:	70a3      	strb	r3, [r4, #2]
    mac[ 3] = (unsigned char)( acc0 >> 24 );
 801b404:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 801b408:	f884 c003 	strb.w	ip, [r4, #3]
    mac[ 4] = (unsigned char)( acc1       );
 801b40c:	7126      	strb	r6, [r4, #4]
    mac[ 5] = (unsigned char)( acc1 >>  8 );
 801b40e:	0a33      	lsrs	r3, r6, #8
 801b410:	7163      	strb	r3, [r4, #5]
    mac[ 6] = (unsigned char)( acc1 >> 16 );
 801b412:	0c33      	lsrs	r3, r6, #16
 801b414:	71a3      	strb	r3, [r4, #6]
    mac[ 7] = (unsigned char)( acc1 >> 24 );
 801b416:	0e36      	lsrs	r6, r6, #24
 801b418:	71e6      	strb	r6, [r4, #7]
    mac[ 8] = (unsigned char)( acc2       );
 801b41a:	7227      	strb	r7, [r4, #8]
    mac[ 9] = (unsigned char)( acc2 >>  8 );
 801b41c:	0a3b      	lsrs	r3, r7, #8
 801b41e:	7263      	strb	r3, [r4, #9]
    mac[10] = (unsigned char)( acc2 >> 16 );
 801b420:	0c3b      	lsrs	r3, r7, #16
 801b422:	72a3      	strb	r3, [r4, #10]
    mac[11] = (unsigned char)( acc2 >> 24 );
 801b424:	0e38      	lsrs	r0, r7, #24
 801b426:	72e0      	strb	r0, [r4, #11]
    mac[12] = (unsigned char)( acc3       );
 801b428:	f884 b00c 	strb.w	fp, [r4, #12]
    mac[13] = (unsigned char)( acc3 >>  8 );
 801b42c:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801b430:	7363      	strb	r3, [r4, #13]
    mac[14] = (unsigned char)( acc3 >> 16 );
 801b432:	ea4f 431b 	mov.w	r3, fp, lsr #16
 801b436:	73a3      	strb	r3, [r4, #14]
    mac[15] = (unsigned char)( acc3 >> 24 );
 801b438:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801b43c:	f884 b00f 	strb.w	fp, [r4, #15]
    }

    poly1305_compute_mac( ctx, mac );

    return( 0 );
}
 801b440:	4650      	mov	r0, sl
 801b442:	b007      	add	sp, #28
 801b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ctx->queue[ctx->queue_len] = 1U;
 801b448:	182b      	adds	r3, r5, r0
 801b44a:	2601      	movs	r6, #1
 801b44c:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
        ctx->queue_len++;
 801b450:	1982      	adds	r2, r0, r6
 801b452:	646a      	str	r2, [r5, #68]	; 0x44
        memset( &ctx->queue[ctx->queue_len],
 801b454:	3035      	adds	r0, #53	; 0x35
 801b456:	f1c2 0210 	rsb	r2, r2, #16
 801b45a:	2100      	movs	r1, #0
 801b45c:	4428      	add	r0, r5
 801b45e:	f00f f894 	bl	802a58a <memset>
        poly1305_process( ctx, 1U,          /* Process 1 block */
 801b462:	2300      	movs	r3, #0
 801b464:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801b468:	4631      	mov	r1, r6
 801b46a:	4628      	mov	r0, r5
 801b46c:	f7ff fd74 	bl	801af58 <poly1305_process>
 801b470:	e754      	b.n	801b31c <mbedtls_poly1305_finish+0x12>
	...

0801b474 <rsa_check_context>:
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
                              int blinding_needed )
{
 801b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b476:	4604      	mov	r4, r0
 801b478:	460d      	mov	r5, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 801b47a:	6847      	ldr	r7, [r0, #4]
 801b47c:	f100 0608 	add.w	r6, r0, #8
 801b480:	4630      	mov	r0, r6
 801b482:	f7f7 fa28 	bl	80128d6 <mbedtls_mpi_size>
 801b486:	4287      	cmp	r7, r0
 801b488:	d159      	bne.n	801b53e <rsa_check_context+0xca>
 801b48a:	6863      	ldr	r3, [r4, #4]
 801b48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b490:	d857      	bhi.n	801b542 <rsa_check_context+0xce>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 801b492:	2100      	movs	r1, #0
 801b494:	4630      	mov	r0, r6
 801b496:	f7f7 fc5c 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b49a:	2800      	cmp	r0, #0
 801b49c:	dd53      	ble.n	801b546 <rsa_check_context+0xd2>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 801b49e:	2100      	movs	r1, #0
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	f7f7 f9c4 	bl	801282e <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d04f      	beq.n	801b54a <rsa_check_context+0xd6>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 801b4aa:	2d00      	cmp	r5, #0
 801b4ac:	d03a      	beq.n	801b524 <rsa_check_context+0xb0>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 801b4ae:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 801b4b2:	2100      	movs	r1, #0
 801b4b4:	4628      	mov	r0, r5
 801b4b6:	f7f7 fc4c 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 801b4ba:	2800      	cmp	r0, #0
 801b4bc:	dd47      	ble.n	801b54e <rsa_check_context+0xda>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 801b4be:	2100      	movs	r1, #0
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	f7f7 f9b4 	bl	801282e <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 801b4c6:	2800      	cmp	r0, #0
 801b4c8:	d043      	beq.n	801b552 <rsa_check_context+0xde>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 801b4ca:	f104 0538 	add.w	r5, r4, #56	; 0x38
 801b4ce:	2100      	movs	r1, #0
 801b4d0:	4628      	mov	r0, r5
 801b4d2:	f7f7 fc3e 	bl	8012d52 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	dd3d      	ble.n	801b556 <rsa_check_context+0xe2>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 801b4da:	2100      	movs	r1, #0
 801b4dc:	4628      	mov	r0, r5
 801b4de:	f7f7 f9a6 	bl	801282e <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 801b4e2:	2800      	cmp	r0, #0
 801b4e4:	d039      	beq.n	801b55a <rsa_check_context+0xe6>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 801b4e6:	2100      	movs	r1, #0
 801b4e8:	f104 0014 	add.w	r0, r4, #20
 801b4ec:	f7f7 fc31 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b4f0:	2800      	cmp	r0, #0
 801b4f2:	dd36      	ble.n	801b562 <rsa_check_context+0xee>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 801b4f4:	2100      	movs	r1, #0
 801b4f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801b4fa:	f7f7 fc2a 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( is_priv &&
 801b4fe:	2800      	cmp	r0, #0
 801b500:	dd2d      	ble.n	801b55e <rsa_check_context+0xea>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 801b502:	2100      	movs	r1, #0
 801b504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b508:	f7f7 fc23 	bl	8012d52 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 801b50c:	2800      	cmp	r0, #0
 801b50e:	dd14      	ble.n	801b53a <rsa_check_context+0xc6>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 801b510:	2100      	movs	r1, #0
 801b512:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b516:	f7f7 fc1c 	bl	8012d52 <mbedtls_mpi_cmp_int>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b51a:	2800      	cmp	r0, #0
 801b51c:	4812      	ldr	r0, [pc, #72]	; (801b568 <rsa_check_context+0xf4>)
 801b51e:	bfc8      	it	gt
 801b520:	2000      	movgt	r0, #0
 801b522:	e009      	b.n	801b538 <rsa_check_context+0xc4>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 801b524:	2100      	movs	r1, #0
 801b526:	f104 0014 	add.w	r0, r4, #20
 801b52a:	f7f7 fc12 	bl	8012d52 <mbedtls_mpi_cmp_int>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b52e:	490e      	ldr	r1, [pc, #56]	; (801b568 <rsa_check_context+0xf4>)
 801b530:	2800      	cmp	r0, #0
 801b532:	bfcc      	ite	gt
 801b534:	4628      	movgt	r0, r5
 801b536:	4608      	movle	r0, r1
    }
#endif

    return( 0 );
}
 801b538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b53a:	480b      	ldr	r0, [pc, #44]	; (801b568 <rsa_check_context+0xf4>)
 801b53c:	e7fc      	b.n	801b538 <rsa_check_context+0xc4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b53e:	480a      	ldr	r0, [pc, #40]	; (801b568 <rsa_check_context+0xf4>)
 801b540:	e7fa      	b.n	801b538 <rsa_check_context+0xc4>
 801b542:	4809      	ldr	r0, [pc, #36]	; (801b568 <rsa_check_context+0xf4>)
 801b544:	e7f8      	b.n	801b538 <rsa_check_context+0xc4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b546:	4808      	ldr	r0, [pc, #32]	; (801b568 <rsa_check_context+0xf4>)
 801b548:	e7f6      	b.n	801b538 <rsa_check_context+0xc4>
 801b54a:	4807      	ldr	r0, [pc, #28]	; (801b568 <rsa_check_context+0xf4>)
 801b54c:	e7f4      	b.n	801b538 <rsa_check_context+0xc4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b54e:	4806      	ldr	r0, [pc, #24]	; (801b568 <rsa_check_context+0xf4>)
 801b550:	e7f2      	b.n	801b538 <rsa_check_context+0xc4>
 801b552:	4805      	ldr	r0, [pc, #20]	; (801b568 <rsa_check_context+0xf4>)
 801b554:	e7f0      	b.n	801b538 <rsa_check_context+0xc4>
 801b556:	4804      	ldr	r0, [pc, #16]	; (801b568 <rsa_check_context+0xf4>)
 801b558:	e7ee      	b.n	801b538 <rsa_check_context+0xc4>
 801b55a:	4803      	ldr	r0, [pc, #12]	; (801b568 <rsa_check_context+0xf4>)
 801b55c:	e7ec      	b.n	801b538 <rsa_check_context+0xc4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b55e:	4802      	ldr	r0, [pc, #8]	; (801b568 <rsa_check_context+0xf4>)
 801b560:	e7ea      	b.n	801b538 <rsa_check_context+0xc4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b562:	4801      	ldr	r0, [pc, #4]	; (801b568 <rsa_check_context+0xf4>)
 801b564:	e7e8      	b.n	801b538 <rsa_check_context+0xc4>
 801b566:	bf00      	nop
 801b568:	ffffbf80 	.word	0xffffbf80

0801b56c <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 801b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b570:	b095      	sub	sp, #84	; 0x54
 801b572:	4604      	mov	r4, r0
 801b574:	460e      	mov	r6, r1
 801b576:	4691      	mov	r9, r2
 801b578:	469a      	mov	sl, r3
 801b57a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 801b57c:	2240      	movs	r2, #64	; 0x40
 801b57e:	2100      	movs	r1, #0
 801b580:	a804      	add	r0, sp, #16
 801b582:	f00f f802 	bl	802a58a <memset>
    memset( counter, 0, 4 );
 801b586:	2300      	movs	r3, #0
 801b588:	9303      	str	r3, [sp, #12]

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 801b58a:	6838      	ldr	r0, [r7, #0]
 801b58c:	f7fd fdc8 	bl	8019120 <mbedtls_md_get_size>

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 801b590:	2e00      	cmp	r6, #0
 801b592:	d036      	beq.n	801b602 <mgf_mask+0x96>
 801b594:	4680      	mov	r8, r0

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 801b596:	f04f 0b04 	mov.w	fp, #4
 801b59a:	e006      	b.n	801b5aa <mgf_mask+0x3e>
            goto exit;

        for( i = 0; i < use_len; ++i )
            *p++ ^= mask[i];

        counter[3]++;
 801b59c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801b5a0:	3301      	adds	r3, #1
 801b5a2:	f88d 300f 	strb.w	r3, [sp, #15]
    while( dlen > 0 )
 801b5a6:	1b76      	subs	r6, r6, r5
 801b5a8:	d02d      	beq.n	801b606 <mgf_mask+0x9a>
        if( dlen < hlen )
 801b5aa:	4645      	mov	r5, r8
 801b5ac:	45b0      	cmp	r8, r6
 801b5ae:	bf28      	it	cs
 801b5b0:	4635      	movcs	r5, r6
        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 801b5b2:	4638      	mov	r0, r7
 801b5b4:	f7fd fca2 	bl	8018efc <mbedtls_md_starts>
 801b5b8:	9001      	str	r0, [sp, #4]
 801b5ba:	bb20      	cbnz	r0, 801b606 <mgf_mask+0x9a>
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 801b5bc:	4652      	mov	r2, sl
 801b5be:	4649      	mov	r1, r9
 801b5c0:	4638      	mov	r0, r7
 801b5c2:	f7fd fca9 	bl	8018f18 <mbedtls_md_update>
 801b5c6:	9001      	str	r0, [sp, #4]
 801b5c8:	b9e8      	cbnz	r0, 801b606 <mgf_mask+0x9a>
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 801b5ca:	465a      	mov	r2, fp
 801b5cc:	a903      	add	r1, sp, #12
 801b5ce:	4638      	mov	r0, r7
 801b5d0:	f7fd fca2 	bl	8018f18 <mbedtls_md_update>
 801b5d4:	9001      	str	r0, [sp, #4]
 801b5d6:	b9b0      	cbnz	r0, 801b606 <mgf_mask+0x9a>
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 801b5d8:	a904      	add	r1, sp, #16
 801b5da:	4638      	mov	r0, r7
 801b5dc:	f7fd fcac 	bl	8018f38 <mbedtls_md_finish>
 801b5e0:	9001      	str	r0, [sp, #4]
 801b5e2:	b980      	cbnz	r0, 801b606 <mgf_mask+0x9a>
        for( i = 0; i < use_len; ++i )
 801b5e4:	2d00      	cmp	r5, #0
 801b5e6:	d0d9      	beq.n	801b59c <mgf_mask+0x30>
 801b5e8:	aa04      	add	r2, sp, #16
 801b5ea:	1960      	adds	r0, r4, r5
            *p++ ^= mask[i];
 801b5ec:	f812 3b01 	ldrb.w	r3, [r2], #1
 801b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5f4:	404b      	eors	r3, r1
 801b5f6:	f804 3c01 	strb.w	r3, [r4, #-1]
        for( i = 0; i < use_len; ++i )
 801b5fa:	4284      	cmp	r4, r0
 801b5fc:	d1f6      	bne.n	801b5ec <mgf_mask+0x80>
            *p++ ^= mask[i];
 801b5fe:	4604      	mov	r4, r0
 801b600:	e7cc      	b.n	801b59c <mgf_mask+0x30>
    int ret = 0;
 801b602:	2300      	movs	r3, #0
 801b604:	9301      	str	r3, [sp, #4]

        dlen -= use_len;
    }

exit:
    mbedtls_platform_zeroize( mask, sizeof( mask ) );
 801b606:	2140      	movs	r1, #64	; 0x40
 801b608:	a804      	add	r0, sp, #16
 801b60a:	f7ff fc9b 	bl	801af44 <mbedtls_platform_zeroize>

    return( ret );
}
 801b60e:	9801      	ldr	r0, [sp, #4]
 801b610:	b015      	add	sp, #84	; 0x54
 801b612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b618 <rsa_rsassa_pkcs1_v15_encode>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 801b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b61c:	b083      	sub	sp, #12
 801b61e:	4617      	mov	r7, r2
 801b620:	461c      	mov	r4, r3
    size_t oid_size  = 0;
 801b622:	2300      	movs	r3, #0
 801b624:	9301      	str	r3, [sp, #4]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 801b626:	9300      	str	r3, [sp, #0]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 801b628:	b950      	cbnz	r0, 801b640 <rsa_rsassa_pkcs1_v15_encode+0x28>
 801b62a:	460d      	mov	r5, r1
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 801b62c:	428c      	cmp	r4, r1
 801b62e:	f0c0 8087 	bcc.w	801b740 <rsa_rsassa_pkcs1_v15_encode+0x128>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 801b632:	1a64      	subs	r4, r4, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 801b634:	2c0a      	cmp	r4, #10
 801b636:	f200 8086 	bhi.w	801b746 <rsa_rsassa_pkcs1_v15_encode+0x12e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b63a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b63e:	e062      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
 801b640:	4606      	mov	r6, r0
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 801b642:	f7fd fbf7 	bl	8018e34 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801b646:	4605      	mov	r5, r0
 801b648:	2800      	cmp	r0, #0
 801b64a:	d067      	beq.n	801b71c <rsa_rsassa_pkcs1_v15_encode+0x104>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 801b64c:	aa01      	add	r2, sp, #4
 801b64e:	4669      	mov	r1, sp
 801b650:	4630      	mov	r0, r6
 801b652:	f7fe fc49 	bl	8019ee8 <mbedtls_oid_get_oid_by_md>
 801b656:	4681      	mov	r9, r0
 801b658:	2800      	cmp	r0, #0
 801b65a:	d162      	bne.n	801b722 <rsa_rsassa_pkcs1_v15_encode+0x10a>
        hashlen = mbedtls_md_get_size( md_info );
 801b65c:	4628      	mov	r0, r5
 801b65e:	f7fd fd5f 	bl	8019120 <mbedtls_md_get_size>
 801b662:	4606      	mov	r6, r0
        if( 8 + hashlen + oid_size  >= 0x80         ||
 801b664:	f8dd a004 	ldr.w	sl, [sp, #4]
 801b668:	eb0a 0300 	add.w	r3, sl, r0
 801b66c:	f103 0208 	add.w	r2, r3, #8
 801b670:	2a7f      	cmp	r2, #127	; 0x7f
 801b672:	d859      	bhi.n	801b728 <rsa_rsassa_pkcs1_v15_encode+0x110>
            10 + hashlen + oid_size <  10 + hashlen )
 801b674:	f103 020a 	add.w	r2, r3, #10
 801b678:	f100 010a 	add.w	r1, r0, #10
            10 + hashlen            <  hashlen      ||
 801b67c:	428a      	cmp	r2, r1
 801b67e:	d356      	bcc.n	801b72e <rsa_rsassa_pkcs1_v15_encode+0x116>
        if( nb_pad < 10 + hashlen + oid_size )
 801b680:	42a2      	cmp	r2, r4
 801b682:	d857      	bhi.n	801b734 <rsa_rsassa_pkcs1_v15_encode+0x11c>
        nb_pad -= 10 + hashlen + oid_size;
 801b684:	f1a4 050a 	sub.w	r5, r4, #10
 801b688:	1aed      	subs	r5, r5, r3
    if( nb_pad < 3 + 8 )
 801b68a:	2d0a      	cmp	r5, #10
 801b68c:	d955      	bls.n	801b73a <rsa_rsassa_pkcs1_v15_encode+0x122>
    nb_pad -= 3;
 801b68e:	3d03      	subs	r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 801b690:	f04f 0b00 	mov.w	fp, #0
 801b694:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801b698:	f808 bb02 	strb.w	fp, [r8], #2
    *p++ = MBEDTLS_RSA_SIGN;
 801b69c:	2301      	movs	r3, #1
 801b69e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6a0:	7053      	strb	r3, [r2, #1]
    memset( p, 0xFF, nb_pad );
 801b6a2:	462a      	mov	r2, r5
 801b6a4:	21ff      	movs	r1, #255	; 0xff
 801b6a6:	4640      	mov	r0, r8
 801b6a8:	f00e ff6f 	bl	802a58a <memset>
    p += nb_pad;
 801b6ac:	eb08 0305 	add.w	r3, r8, r5
    *p++ = 0;
 801b6b0:	f808 b005 	strb.w	fp, [r8, r5]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801b6b4:	2030      	movs	r0, #48	; 0x30
 801b6b6:	7058      	strb	r0, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 801b6b8:	fa5f f28a 	uxtb.w	r2, sl
 801b6bc:	f102 0108 	add.w	r1, r2, #8
 801b6c0:	4431      	add	r1, r6
 801b6c2:	7099      	strb	r1, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801b6c4:	70d8      	strb	r0, [r3, #3]
    *p++ = (unsigned char)( 0x04 + oid_size );
 801b6c6:	1d11      	adds	r1, r2, #4
 801b6c8:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 801b6ca:	2106      	movs	r1, #6
 801b6cc:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 801b6ce:	1ddd      	adds	r5, r3, #7
 801b6d0:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 801b6d2:	4652      	mov	r2, sl
 801b6d4:	9900      	ldr	r1, [sp, #0]
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	f00e ff2f 	bl	802a53a <memcpy>
    p += oid_size;
 801b6dc:	eb05 030a 	add.w	r3, r5, sl
    *p++ = MBEDTLS_ASN1_NULL;
 801b6e0:	2205      	movs	r2, #5
 801b6e2:	f805 200a 	strb.w	r2, [r5, sl]
    *p++ = 0x00;
 801b6e6:	f883 b001 	strb.w	fp, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 801b6ea:	2204      	movs	r2, #4
 801b6ec:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 801b6ee:	189d      	adds	r5, r3, r2
 801b6f0:	70de      	strb	r6, [r3, #3]
    memcpy( p, hash, hashlen );
 801b6f2:	4632      	mov	r2, r6
 801b6f4:	4639      	mov	r1, r7
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	f00e ff1f 	bl	802a53a <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 801b6fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6fe:	4423      	add	r3, r4
    p += hashlen;
 801b700:	442e      	add	r6, r5
    if( p != dst + dst_len )
 801b702:	42b3      	cmp	r3, r6
 801b704:	d103      	bne.n	801b70e <rsa_rsassa_pkcs1_v15_encode+0xf6>
        mbedtls_platform_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 801b706:	4648      	mov	r0, r9
 801b708:	b003      	add	sp, #12
 801b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_platform_zeroize( dst, dst_len );
 801b70e:	4621      	mov	r1, r4
 801b710:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b712:	f7ff fc17 	bl	801af44 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b716:	f8df 905c 	ldr.w	r9, [pc, #92]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b71a:	e7f4      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b71c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b720:	e7f1      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b722:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b726:	e7ee      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b728:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b72c:	e7eb      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
 801b72e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b732:	e7e8      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b734:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b738:	e7e5      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b73a:	f8df 9038 	ldr.w	r9, [pc, #56]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b73e:	e7e2      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b740:	f8df 9030 	ldr.w	r9, [pc, #48]	; 801b774 <rsa_rsassa_pkcs1_v15_encode+0x15c>
 801b744:	e7df      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
    nb_pad -= 3;
 801b746:	3c03      	subs	r4, #3
    *p++ = 0;
 801b748:	f04f 0900 	mov.w	r9, #0
 801b74c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b74e:	f806 9b02 	strb.w	r9, [r6], #2
    *p++ = MBEDTLS_RSA_SIGN;
 801b752:	2301      	movs	r3, #1
 801b754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b756:	7053      	strb	r3, [r2, #1]
    memset( p, 0xFF, nb_pad );
 801b758:	4622      	mov	r2, r4
 801b75a:	21ff      	movs	r1, #255	; 0xff
 801b75c:	4630      	mov	r0, r6
 801b75e:	f00e ff14 	bl	802a58a <memset>
    p += nb_pad;
 801b762:	1930      	adds	r0, r6, r4
    *p++ = 0;
 801b764:	f806 9004 	strb.w	r9, [r6, r4]
        memcpy( p, hash, hashlen );
 801b768:	462a      	mov	r2, r5
 801b76a:	4639      	mov	r1, r7
 801b76c:	3001      	adds	r0, #1
 801b76e:	f00e fee4 	bl	802a53a <memcpy>
        return( 0 );
 801b772:	e7c8      	b.n	801b706 <rsa_rsassa_pkcs1_v15_encode+0xee>
 801b774:	ffffbf80 	.word	0xffffbf80

0801b778 <mbedtls_rsa_import_raw>:
{
 801b778:	b570      	push	{r4, r5, r6, lr}
 801b77a:	4604      	mov	r4, r0
 801b77c:	461d      	mov	r5, r3
    if( N != NULL )
 801b77e:	b169      	cbz	r1, 801b79c <mbedtls_rsa_import_raw+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 801b780:	f100 0608 	add.w	r6, r0, #8
 801b784:	4630      	mov	r0, r6
 801b786:	f7f7 f8ac 	bl	80128e2 <mbedtls_mpi_read_binary>
 801b78a:	4603      	mov	r3, r0
 801b78c:	b110      	cbz	r0, 801b794 <mbedtls_rsa_import_raw+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 801b78e:	f5a3 4381 	sub.w	r3, r3, #16512	; 0x4080
 801b792:	e02e      	b.n	801b7f2 <mbedtls_rsa_import_raw+0x7a>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 801b794:	4630      	mov	r0, r6
 801b796:	f7f7 f89e 	bl	80128d6 <mbedtls_mpi_size>
 801b79a:	6060      	str	r0, [r4, #4]
    if( P != NULL )
 801b79c:	b145      	cbz	r5, 801b7b0 <mbedtls_rsa_import_raw+0x38>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 801b79e:	9a04      	ldr	r2, [sp, #16]
 801b7a0:	4629      	mov	r1, r5
 801b7a2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801b7a6:	f7f7 f89c 	bl	80128e2 <mbedtls_mpi_read_binary>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	2800      	cmp	r0, #0
 801b7ae:	d1ee      	bne.n	801b78e <mbedtls_rsa_import_raw+0x16>
    if( Q != NULL )
 801b7b0:	9b05      	ldr	r3, [sp, #20]
 801b7b2:	b143      	cbz	r3, 801b7c6 <mbedtls_rsa_import_raw+0x4e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 801b7b4:	9a06      	ldr	r2, [sp, #24]
 801b7b6:	4619      	mov	r1, r3
 801b7b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801b7bc:	f7f7 f891 	bl	80128e2 <mbedtls_mpi_read_binary>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	2800      	cmp	r0, #0
 801b7c4:	d1e3      	bne.n	801b78e <mbedtls_rsa_import_raw+0x16>
    if( D != NULL )
 801b7c6:	9b07      	ldr	r3, [sp, #28]
 801b7c8:	b143      	cbz	r3, 801b7dc <mbedtls_rsa_import_raw+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 801b7ca:	9a08      	ldr	r2, [sp, #32]
 801b7cc:	4619      	mov	r1, r3
 801b7ce:	f104 0020 	add.w	r0, r4, #32
 801b7d2:	f7f7 f886 	bl	80128e2 <mbedtls_mpi_read_binary>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	2800      	cmp	r0, #0
 801b7da:	d1d8      	bne.n	801b78e <mbedtls_rsa_import_raw+0x16>
    if( E != NULL )
 801b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7de:	b153      	cbz	r3, 801b7f6 <mbedtls_rsa_import_raw+0x7e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 801b7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b7e2:	4619      	mov	r1, r3
 801b7e4:	f104 0014 	add.w	r0, r4, #20
 801b7e8:	f7f7 f87b 	bl	80128e2 <mbedtls_mpi_read_binary>
    if( ret != 0 )
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	2800      	cmp	r0, #0
 801b7f0:	d1cd      	bne.n	801b78e <mbedtls_rsa_import_raw+0x16>
}
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	bd70      	pop	{r4, r5, r6, pc}
    return( 0 );
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	e7fb      	b.n	801b7f2 <mbedtls_rsa_import_raw+0x7a>
	...

0801b7fc <mbedtls_rsa_complete>:
{
 801b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b800:	b089      	sub	sp, #36	; 0x24
 801b802:	4604      	mov	r4, r0
    have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 801b804:	f100 0b08 	add.w	fp, r0, #8
 801b808:	2100      	movs	r1, #0
 801b80a:	4658      	mov	r0, fp
 801b80c:	f7f7 faa1 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b810:	9003      	str	r0, [sp, #12]
    have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 801b812:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 801b816:	2100      	movs	r1, #0
 801b818:	4638      	mov	r0, r7
 801b81a:	f7f7 fa9a 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b81e:	4605      	mov	r5, r0
    have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 801b820:	f104 0838 	add.w	r8, r4, #56	; 0x38
 801b824:	2100      	movs	r1, #0
 801b826:	4640      	mov	r0, r8
 801b828:	f7f7 fa93 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b82c:	4606      	mov	r6, r0
 801b82e:	9006      	str	r0, [sp, #24]
    have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 801b830:	f104 0920 	add.w	r9, r4, #32
 801b834:	2100      	movs	r1, #0
 801b836:	4648      	mov	r0, r9
 801b838:	f7f7 fa8b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b83c:	9007      	str	r0, [sp, #28]
    have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 801b83e:	f104 0a14 	add.w	sl, r4, #20
 801b842:	2100      	movs	r1, #0
 801b844:	4650      	mov	r0, sl
 801b846:	f7f7 fa84 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801b84a:	9004      	str	r0, [sp, #16]
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 801b84c:	b145      	cbz	r5, 801b860 <mbedtls_rsa_complete+0x64>
 801b84e:	b1b6      	cbz	r6, 801b87e <mbedtls_rsa_complete+0x82>
 801b850:	9b07      	ldr	r3, [sp, #28]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d02c      	beq.n	801b8b0 <mbedtls_rsa_complete+0xb4>
 801b856:	2800      	cmp	r0, #0
 801b858:	f040 80b2 	bne.w	801b9c0 <mbedtls_rsa_complete+0x1c4>
 801b85c:	4606      	mov	r6, r0
 801b85e:	e00f      	b.n	801b880 <mbedtls_rsa_complete+0x84>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 801b860:	9b03      	ldr	r3, [sp, #12]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d026      	beq.n	801b8b4 <mbedtls_rsa_complete+0xb8>
 801b866:	9b06      	ldr	r3, [sp, #24]
 801b868:	ea55 0603 	orrs.w	r6, r5, r3
 801b86c:	d124      	bne.n	801b8b8 <mbedtls_rsa_complete+0xbc>
 801b86e:	9b07      	ldr	r3, [sp, #28]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d031      	beq.n	801b8d8 <mbedtls_rsa_complete+0xdc>
 801b874:	9b04      	ldr	r3, [sp, #16]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d140      	bne.n	801b8fc <mbedtls_rsa_complete+0x100>
 801b87a:	461e      	mov	r6, r3
 801b87c:	e02d      	b.n	801b8da <mbedtls_rsa_complete+0xde>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 801b87e:	9e06      	ldr	r6, [sp, #24]
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 801b880:	2d00      	cmp	r5, #0
 801b882:	d02a      	beq.n	801b8da <mbedtls_rsa_complete+0xde>
 801b884:	9b06      	ldr	r3, [sp, #24]
 801b886:	b9cb      	cbnz	r3, 801b8bc <mbedtls_rsa_complete+0xc0>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 801b888:	2300      	movs	r3, #0
 801b88a:	9304      	str	r3, [sp, #16]
 801b88c:	9305      	str	r3, [sp, #20]
    is_priv = n_missing || pq_missing || d_missing;
 801b88e:	2e00      	cmp	r6, #0
 801b890:	d13e      	bne.n	801b910 <mbedtls_rsa_complete+0x114>
 801b892:	9b05      	ldr	r3, [sp, #20]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d165      	bne.n	801b964 <mbedtls_rsa_complete+0x168>
 801b898:	9b04      	ldr	r3, [sp, #16]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	f040 8083 	bne.w	801b9a6 <mbedtls_rsa_complete+0x1aa>
    if( !is_priv && !is_pub )
 801b8a0:	2e00      	cmp	r6, #0
 801b8a2:	d05d      	beq.n	801b960 <mbedtls_rsa_complete+0x164>
    if( !have_N && have_P && have_Q )
 801b8a4:	9b03      	ldr	r3, [sp, #12]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	f000 8094 	beq.w	801b9d4 <mbedtls_rsa_complete+0x1d8>
    is_priv = n_missing || pq_missing || d_missing;
 801b8ac:	9e04      	ldr	r6, [sp, #16]
 801b8ae:	e03b      	b.n	801b928 <mbedtls_rsa_complete+0x12c>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 801b8b0:	9e07      	ldr	r6, [sp, #28]
 801b8b2:	e7e5      	b.n	801b880 <mbedtls_rsa_complete+0x84>
 801b8b4:	9e03      	ldr	r6, [sp, #12]
 801b8b6:	e7e3      	b.n	801b880 <mbedtls_rsa_complete+0x84>
 801b8b8:	462e      	mov	r6, r5
 801b8ba:	e7e1      	b.n	801b880 <mbedtls_rsa_complete+0x84>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 801b8bc:	9b07      	ldr	r3, [sp, #28]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d1e2      	bne.n	801b888 <mbedtls_rsa_complete+0x8c>
 801b8c2:	9b04      	ldr	r3, [sp, #16]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d0df      	beq.n	801b888 <mbedtls_rsa_complete+0x8c>
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 801b8c8:	9b03      	ldr	r3, [sp, #12]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	f040 80ad 	bne.w	801ba2a <mbedtls_rsa_complete+0x22e>
 801b8d0:	9305      	str	r3, [sp, #20]
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 801b8d2:	2301      	movs	r3, #1
 801b8d4:	9304      	str	r3, [sp, #16]
 801b8d6:	e7da      	b.n	801b88e <mbedtls_rsa_complete+0x92>
 801b8d8:	9e07      	ldr	r6, [sp, #28]
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 801b8da:	9b03      	ldr	r3, [sp, #12]
 801b8dc:	b18b      	cbz	r3, 801b902 <mbedtls_rsa_complete+0x106>
 801b8de:	2300      	movs	r3, #0
 801b8e0:	9305      	str	r3, [sp, #20]
 801b8e2:	9b06      	ldr	r3, [sp, #24]
 801b8e4:	432b      	orrs	r3, r5
 801b8e6:	9a07      	ldr	r2, [sp, #28]
 801b8e8:	4313      	orrs	r3, r2
 801b8ea:	d10e      	bne.n	801b90a <mbedtls_rsa_complete+0x10e>
 801b8ec:	9b04      	ldr	r3, [sp, #16]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d0cd      	beq.n	801b88e <mbedtls_rsa_complete+0x92>
    is_priv = n_missing || pq_missing || d_missing;
 801b8f2:	2e00      	cmp	r6, #0
 801b8f4:	d169      	bne.n	801b9ca <mbedtls_rsa_complete+0x1ce>
 801b8f6:	9604      	str	r6, [sp, #16]
    is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 801b8f8:	2601      	movs	r6, #1
 801b8fa:	e7ca      	b.n	801b892 <mbedtls_rsa_complete+0x96>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	9305      	str	r3, [sp, #20]
 801b900:	e7ef      	b.n	801b8e2 <mbedtls_rsa_complete+0xe6>
 801b902:	9b03      	ldr	r3, [sp, #12]
 801b904:	9304      	str	r3, [sp, #16]
 801b906:	9305      	str	r3, [sp, #20]
 801b908:	e7c1      	b.n	801b88e <mbedtls_rsa_complete+0x92>
 801b90a:	2300      	movs	r3, #0
 801b90c:	9304      	str	r3, [sp, #16]
 801b90e:	e7be      	b.n	801b88e <mbedtls_rsa_complete+0x92>
    if( !have_N && have_P && have_Q )
 801b910:	9b03      	ldr	r3, [sp, #12]
 801b912:	b913      	cbnz	r3, 801b91a <mbedtls_rsa_complete+0x11e>
 801b914:	b10d      	cbz	r5, 801b91a <mbedtls_rsa_complete+0x11e>
 801b916:	9b06      	ldr	r3, [sp, #24]
 801b918:	b983      	cbnz	r3, 801b93c <mbedtls_rsa_complete+0x140>
    if( pq_missing )
 801b91a:	9b05      	ldr	r3, [sp, #20]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d164      	bne.n	801b9ea <mbedtls_rsa_complete+0x1ee>
    else if( d_missing )
 801b920:	9b04      	ldr	r3, [sp, #16]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d175      	bne.n	801ba12 <mbedtls_rsa_complete+0x216>
    if( is_priv )
 801b926:	bb66      	cbnz	r6, 801b982 <mbedtls_rsa_complete+0x186>
    return( rsa_check_context( ctx, is_priv, 1 ) );
 801b928:	2201      	movs	r2, #1
 801b92a:	4631      	mov	r1, r6
 801b92c:	4620      	mov	r0, r4
 801b92e:	f7ff fda1 	bl	801b474 <rsa_check_context>
}
 801b932:	b009      	add	sp, #36	; 0x24
 801b934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    is_priv = n_missing || pq_missing || d_missing;
 801b938:	9e05      	ldr	r6, [sp, #20]
 801b93a:	e7ec      	b.n	801b916 <mbedtls_rsa_complete+0x11a>
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 801b93c:	4642      	mov	r2, r8
 801b93e:	4639      	mov	r1, r7
 801b940:	4658      	mov	r0, fp
 801b942:	f7f7 fb2f 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801b946:	b110      	cbz	r0, 801b94e <mbedtls_rsa_complete+0x152>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 801b948:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 801b94c:	e7f1      	b.n	801b932 <mbedtls_rsa_complete+0x136>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 801b94e:	4658      	mov	r0, fp
 801b950:	f7f6 ffc1 	bl	80128d6 <mbedtls_mpi_size>
 801b954:	6060      	str	r0, [r4, #4]
 801b956:	e7e0      	b.n	801b91a <mbedtls_rsa_complete+0x11e>
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 801b958:	9604      	str	r6, [sp, #16]
    is_priv = n_missing || pq_missing || d_missing;
 801b95a:	9b07      	ldr	r3, [sp, #28]
 801b95c:	9305      	str	r3, [sp, #20]
 801b95e:	e7dc      	b.n	801b91a <mbedtls_rsa_complete+0x11e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801b960:	4836      	ldr	r0, [pc, #216]	; (801ba3c <mbedtls_rsa_complete+0x240>)
 801b962:	e7e6      	b.n	801b932 <mbedtls_rsa_complete+0x136>
    if( !have_N && have_P && have_Q )
 801b964:	9b03      	ldr	r3, [sp, #12]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d03c      	beq.n	801b9e4 <mbedtls_rsa_complete+0x1e8>
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 801b96a:	f8cd 8000 	str.w	r8, [sp]
 801b96e:	463b      	mov	r3, r7
 801b970:	464a      	mov	r2, r9
 801b972:	4651      	mov	r1, sl
 801b974:	4658      	mov	r0, fp
 801b976:	f001 fa2b 	bl	801cdd0 <mbedtls_rsa_deduce_primes>
        if( ret != 0 )
 801b97a:	4603      	mov	r3, r0
 801b97c:	2800      	cmp	r0, #0
 801b97e:	d13f      	bne.n	801ba00 <mbedtls_rsa_complete+0x204>
    is_priv = n_missing || pq_missing || d_missing;
 801b980:	9e05      	ldr	r6, [sp, #20]
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 801b982:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801b986:	9301      	str	r3, [sp, #4]
 801b988:	f104 0350 	add.w	r3, r4, #80	; 0x50
 801b98c:	9300      	str	r3, [sp, #0]
 801b98e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b992:	464a      	mov	r2, r9
 801b994:	4641      	mov	r1, r8
 801b996:	4638      	mov	r0, r7
 801b998:	f001 fd12 	bl	801d3c0 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 801b99c:	2800      	cmp	r0, #0
 801b99e:	d0c3      	beq.n	801b928 <mbedtls_rsa_complete+0x12c>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 801b9a0:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 801b9a4:	e7c5      	b.n	801b932 <mbedtls_rsa_complete+0x136>
    if( !have_N && have_P && have_Q )
 801b9a6:	9b03      	ldr	r3, [sp, #12]
 801b9a8:	b36b      	cbz	r3, 801ba06 <mbedtls_rsa_complete+0x20a>
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 801b9aa:	464b      	mov	r3, r9
 801b9ac:	4652      	mov	r2, sl
 801b9ae:	4641      	mov	r1, r8
 801b9b0:	4638      	mov	r0, r7
 801b9b2:	f001 fb31 	bl	801d018 <mbedtls_rsa_deduce_private_exponent>
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	2800      	cmp	r0, #0
 801b9ba:	d133      	bne.n	801ba24 <mbedtls_rsa_complete+0x228>
    is_priv = n_missing || pq_missing || d_missing;
 801b9bc:	9e04      	ldr	r6, [sp, #16]
 801b9be:	e7e0      	b.n	801b982 <mbedtls_rsa_complete+0x186>
    pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 801b9c0:	9b03      	ldr	r3, [sp, #12]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d137      	bne.n	801ba36 <mbedtls_rsa_complete+0x23a>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 801b9c6:	2601      	movs	r6, #1
 801b9c8:	e75a      	b.n	801b880 <mbedtls_rsa_complete+0x84>
    if( pq_missing )
 801b9ca:	9b05      	ldr	r3, [sp, #20]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d0aa      	beq.n	801b926 <mbedtls_rsa_complete+0x12a>
    is_priv = n_missing || pq_missing || d_missing;
 801b9d0:	9e05      	ldr	r6, [sp, #20]
 801b9d2:	e00a      	b.n	801b9ea <mbedtls_rsa_complete+0x1ee>
    if( !have_N && have_P && have_Q )
 801b9d4:	b125      	cbz	r5, 801b9e0 <mbedtls_rsa_complete+0x1e4>
    is_priv = n_missing || pq_missing || d_missing;
 801b9d6:	9b03      	ldr	r3, [sp, #12]
 801b9d8:	461e      	mov	r6, r3
    if( !have_N && have_P && have_Q )
 801b9da:	9304      	str	r3, [sp, #16]
 801b9dc:	9305      	str	r3, [sp, #20]
 801b9de:	e79a      	b.n	801b916 <mbedtls_rsa_complete+0x11a>
    is_priv = n_missing || pq_missing || d_missing;
 801b9e0:	462e      	mov	r6, r5
 801b9e2:	e7a0      	b.n	801b926 <mbedtls_rsa_complete+0x12a>
    if( !have_N && have_P && have_Q )
 801b9e4:	2d00      	cmp	r5, #0
 801b9e6:	d1a7      	bne.n	801b938 <mbedtls_rsa_complete+0x13c>
    is_priv = n_missing || pq_missing || d_missing;
 801b9e8:	9e05      	ldr	r6, [sp, #20]
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
 801b9ea:	f8cd 8000 	str.w	r8, [sp]
 801b9ee:	463b      	mov	r3, r7
 801b9f0:	464a      	mov	r2, r9
 801b9f2:	4651      	mov	r1, sl
 801b9f4:	4658      	mov	r0, fp
 801b9f6:	f001 f9eb 	bl	801cdd0 <mbedtls_rsa_deduce_primes>
        if( ret != 0 )
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	2800      	cmp	r0, #0
 801b9fe:	d092      	beq.n	801b926 <mbedtls_rsa_complete+0x12a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 801ba00:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
 801ba04:	e795      	b.n	801b932 <mbedtls_rsa_complete+0x136>
    if( !have_N && have_P && have_Q )
 801ba06:	b11d      	cbz	r5, 801ba10 <mbedtls_rsa_complete+0x214>
    is_priv = n_missing || pq_missing || d_missing;
 801ba08:	9e04      	ldr	r6, [sp, #16]
    if( !have_N && have_P && have_Q )
 801ba0a:	9b03      	ldr	r3, [sp, #12]
 801ba0c:	9305      	str	r3, [sp, #20]
 801ba0e:	e782      	b.n	801b916 <mbedtls_rsa_complete+0x11a>
    is_priv = n_missing || pq_missing || d_missing;
 801ba10:	9e04      	ldr	r6, [sp, #16]
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 801ba12:	464b      	mov	r3, r9
 801ba14:	4652      	mov	r2, sl
 801ba16:	4641      	mov	r1, r8
 801ba18:	4638      	mov	r0, r7
 801ba1a:	f001 fafd 	bl	801d018 <mbedtls_rsa_deduce_private_exponent>
 801ba1e:	4603      	mov	r3, r0
 801ba20:	2800      	cmp	r0, #0
 801ba22:	d080      	beq.n	801b926 <mbedtls_rsa_complete+0x12a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 801ba24:	f5a3 4081 	sub.w	r0, r3, #16512	; 0x4080
 801ba28:	e783      	b.n	801b932 <mbedtls_rsa_complete+0x136>
    is_priv = n_missing || pq_missing || d_missing;
 801ba2a:	2e00      	cmp	r6, #0
 801ba2c:	d194      	bne.n	801b958 <mbedtls_rsa_complete+0x15c>
 801ba2e:	9605      	str	r6, [sp, #20]
    d_missing  =              have_P &&  have_Q && !have_D && have_E;
 801ba30:	2301      	movs	r3, #1
 801ba32:	9304      	str	r3, [sp, #16]
 801ba34:	e72d      	b.n	801b892 <mbedtls_rsa_complete+0x96>
    n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 801ba36:	2601      	movs	r6, #1
 801ba38:	e726      	b.n	801b888 <mbedtls_rsa_complete+0x8c>
 801ba3a:	bf00      	nop
 801ba3c:	ffffbf80 	.word	0xffffbf80

0801ba40 <mbedtls_rsa_init>:
{
 801ba40:	b570      	push	{r4, r5, r6, lr}
 801ba42:	4604      	mov	r4, r0
 801ba44:	460e      	mov	r6, r1
 801ba46:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 801ba48:	22ac      	movs	r2, #172	; 0xac
 801ba4a:	2100      	movs	r1, #0
 801ba4c:	f00e fd9d 	bl	802a58a <memset>
    ctx->padding = padding;
 801ba50:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 801ba54:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
}
 801ba58:	bd70      	pop	{r4, r5, r6, pc}

0801ba5a <mbedtls_rsa_get_len>:
}
 801ba5a:	6840      	ldr	r0, [r0, #4]
 801ba5c:	4770      	bx	lr
	...

0801ba60 <mbedtls_rsa_check_pubkey>:
{
 801ba60:	b570      	push	{r4, r5, r6, lr}
 801ba62:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 801ba64:	2200      	movs	r2, #0
 801ba66:	4611      	mov	r1, r2
 801ba68:	f7ff fd04 	bl	801b474 <rsa_check_context>
 801ba6c:	b9e8      	cbnz	r0, 801baaa <mbedtls_rsa_check_pubkey+0x4a>
 801ba6e:	4605      	mov	r5, r0
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 801ba70:	f104 0608 	add.w	r6, r4, #8
 801ba74:	4630      	mov	r0, r6
 801ba76:	f7f6 ff0a 	bl	801288e <mbedtls_mpi_bitlen>
 801ba7a:	287f      	cmp	r0, #127	; 0x7f
 801ba7c:	d917      	bls.n	801baae <mbedtls_rsa_check_pubkey+0x4e>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 801ba7e:	3414      	adds	r4, #20
 801ba80:	2100      	movs	r1, #0
 801ba82:	4620      	mov	r0, r4
 801ba84:	f7f6 fed3 	bl	801282e <mbedtls_mpi_get_bit>
 801ba88:	b198      	cbz	r0, 801bab2 <mbedtls_rsa_check_pubkey+0x52>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 801ba8a:	4620      	mov	r0, r4
 801ba8c:	f7f6 feff 	bl	801288e <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 801ba90:	2801      	cmp	r0, #1
 801ba92:	d910      	bls.n	801bab6 <mbedtls_rsa_check_pubkey+0x56>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 801ba94:	4631      	mov	r1, r6
 801ba96:	4620      	mov	r0, r4
 801ba98:	f7f7 f903 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801ba9c:	4b07      	ldr	r3, [pc, #28]	; (801babc <mbedtls_rsa_check_pubkey+0x5c>)
 801ba9e:	ea15 0520 	ands.w	r5, r5, r0, asr #32
 801baa2:	bf38      	it	cc
 801baa4:	461d      	movcc	r5, r3
}
 801baa6:	4628      	mov	r0, r5
 801baa8:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801baaa:	4d04      	ldr	r5, [pc, #16]	; (801babc <mbedtls_rsa_check_pubkey+0x5c>)
 801baac:	e7fb      	b.n	801baa6 <mbedtls_rsa_check_pubkey+0x46>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801baae:	4d03      	ldr	r5, [pc, #12]	; (801babc <mbedtls_rsa_check_pubkey+0x5c>)
 801bab0:	e7f9      	b.n	801baa6 <mbedtls_rsa_check_pubkey+0x46>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bab2:	4d02      	ldr	r5, [pc, #8]	; (801babc <mbedtls_rsa_check_pubkey+0x5c>)
 801bab4:	e7f7      	b.n	801baa6 <mbedtls_rsa_check_pubkey+0x46>
 801bab6:	4d01      	ldr	r5, [pc, #4]	; (801babc <mbedtls_rsa_check_pubkey+0x5c>)
 801bab8:	e7f5      	b.n	801baa6 <mbedtls_rsa_check_pubkey+0x46>
 801baba:	bf00      	nop
 801babc:	ffffbe00 	.word	0xffffbe00

0801bac0 <mbedtls_rsa_check_privkey>:
{
 801bac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bac2:	b085      	sub	sp, #20
 801bac4:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 801bac6:	f7ff ffcb 	bl	801ba60 <mbedtls_rsa_check_pubkey>
 801baca:	bb60      	cbnz	r0, 801bb26 <mbedtls_rsa_check_privkey+0x66>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 801bacc:	2201      	movs	r2, #1
 801bace:	4611      	mov	r1, r2
 801bad0:	4620      	mov	r0, r4
 801bad2:	f7ff fccf 	bl	801b474 <rsa_check_context>
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 801bad6:	bb40      	cbnz	r0, 801bb2a <mbedtls_rsa_check_privkey+0x6a>
    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 801bad8:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 801badc:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801bae0:	f104 0720 	add.w	r7, r4, #32
 801bae4:	2300      	movs	r3, #0
 801bae6:	9302      	str	r3, [sp, #8]
 801bae8:	9301      	str	r3, [sp, #4]
 801baea:	f104 0314 	add.w	r3, r4, #20
 801baee:	9300      	str	r3, [sp, #0]
 801baf0:	463b      	mov	r3, r7
 801baf2:	4632      	mov	r2, r6
 801baf4:	4629      	mov	r1, r5
 801baf6:	f104 0008 	add.w	r0, r4, #8
 801bafa:	f001 fb89 	bl	801d210 <mbedtls_rsa_validate_params>
 801bafe:	b9b0      	cbnz	r0, 801bb2e <mbedtls_rsa_check_privkey+0x6e>
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 801bb00:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 801bb04:	9301      	str	r3, [sp, #4]
 801bb06:	f104 0350 	add.w	r3, r4, #80	; 0x50
 801bb0a:	9300      	str	r3, [sp, #0]
 801bb0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb10:	463a      	mov	r2, r7
 801bb12:	4631      	mov	r1, r6
 801bb14:	4628      	mov	r0, r5
 801bb16:	f001 faed 	bl	801d0f4 <mbedtls_rsa_validate_crt>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb1a:	2800      	cmp	r0, #0
 801bb1c:	4b05      	ldr	r3, [pc, #20]	; (801bb34 <mbedtls_rsa_check_privkey+0x74>)
 801bb1e:	bf18      	it	ne
 801bb20:	4618      	movne	r0, r3
}
 801bb22:	b005      	add	sp, #20
 801bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb26:	4803      	ldr	r0, [pc, #12]	; (801bb34 <mbedtls_rsa_check_privkey+0x74>)
 801bb28:	e7fb      	b.n	801bb22 <mbedtls_rsa_check_privkey+0x62>
 801bb2a:	4802      	ldr	r0, [pc, #8]	; (801bb34 <mbedtls_rsa_check_privkey+0x74>)
 801bb2c:	e7f9      	b.n	801bb22 <mbedtls_rsa_check_privkey+0x62>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb2e:	4801      	ldr	r0, [pc, #4]	; (801bb34 <mbedtls_rsa_check_privkey+0x74>)
 801bb30:	e7f7      	b.n	801bb22 <mbedtls_rsa_check_privkey+0x62>
 801bb32:	bf00      	nop
 801bb34:	ffffbe00 	.word	0xffffbe00

0801bb38 <mbedtls_rsa_check_pub_priv>:
{
 801bb38:	b538      	push	{r3, r4, r5, lr}
 801bb3a:	4605      	mov	r5, r0
 801bb3c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 801bb3e:	f7ff ff8f 	bl	801ba60 <mbedtls_rsa_check_pubkey>
 801bb42:	b9a8      	cbnz	r0, 801bb70 <mbedtls_rsa_check_pub_priv+0x38>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 801bb44:	4620      	mov	r0, r4
 801bb46:	f7ff ffbb 	bl	801bac0 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 801bb4a:	b998      	cbnz	r0, 801bb74 <mbedtls_rsa_check_pub_priv+0x3c>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 801bb4c:	f104 0108 	add.w	r1, r4, #8
 801bb50:	f105 0008 	add.w	r0, r5, #8
 801bb54:	f7f7 f8a5 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801bb58:	b970      	cbnz	r0, 801bb78 <mbedtls_rsa_check_pub_priv+0x40>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 801bb5a:	f104 0114 	add.w	r1, r4, #20
 801bb5e:	f105 0014 	add.w	r0, r5, #20
 801bb62:	f7f7 f89e 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb66:	2800      	cmp	r0, #0
 801bb68:	4b04      	ldr	r3, [pc, #16]	; (801bb7c <mbedtls_rsa_check_pub_priv+0x44>)
 801bb6a:	bf18      	it	ne
 801bb6c:	4618      	movne	r0, r3
}
 801bb6e:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb70:	4802      	ldr	r0, [pc, #8]	; (801bb7c <mbedtls_rsa_check_pub_priv+0x44>)
 801bb72:	e7fc      	b.n	801bb6e <mbedtls_rsa_check_pub_priv+0x36>
 801bb74:	4801      	ldr	r0, [pc, #4]	; (801bb7c <mbedtls_rsa_check_pub_priv+0x44>)
 801bb76:	e7fa      	b.n	801bb6e <mbedtls_rsa_check_pub_priv+0x36>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801bb78:	4800      	ldr	r0, [pc, #0]	; (801bb7c <mbedtls_rsa_check_pub_priv+0x44>)
 801bb7a:	e7f8      	b.n	801bb6e <mbedtls_rsa_check_pub_priv+0x36>
 801bb7c:	ffffbe00 	.word	0xffffbe00

0801bb80 <mbedtls_rsa_public>:
{
 801bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb82:	b087      	sub	sp, #28
 801bb84:	4605      	mov	r5, r0
 801bb86:	460c      	mov	r4, r1
 801bb88:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 801bb8a:	2200      	movs	r2, #0
 801bb8c:	4611      	mov	r1, r2
 801bb8e:	f7ff fc71 	bl	801b474 <rsa_check_context>
 801bb92:	2800      	cmp	r0, #0
 801bb94:	d136      	bne.n	801bc04 <mbedtls_rsa_public+0x84>
    mbedtls_mpi_init( &T );
 801bb96:	a803      	add	r0, sp, #12
 801bb98:	f7f6 fd47 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801bb9c:	686a      	ldr	r2, [r5, #4]
 801bb9e:	4621      	mov	r1, r4
 801bba0:	a803      	add	r0, sp, #12
 801bba2:	f7f6 fe9e 	bl	80128e2 <mbedtls_mpi_read_binary>
 801bba6:	4604      	mov	r4, r0
 801bba8:	b128      	cbz	r0, 801bbb6 <mbedtls_rsa_public+0x36>
    mbedtls_mpi_free( &T );
 801bbaa:	a803      	add	r0, sp, #12
 801bbac:	f7f6 fd43 	bl	8012636 <mbedtls_mpi_free>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 801bbb0:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
 801bbb4:	e023      	b.n	801bbfe <mbedtls_rsa_public+0x7e>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 801bbb6:	f105 0408 	add.w	r4, r5, #8
 801bbba:	4621      	mov	r1, r4
 801bbbc:	a803      	add	r0, sp, #12
 801bbbe:	f7f7 f870 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	db02      	blt.n	801bbcc <mbedtls_rsa_public+0x4c>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801bbc6:	f06f 0403 	mvn.w	r4, #3
 801bbca:	e7ee      	b.n	801bbaa <mbedtls_rsa_public+0x2a>
    olen = ctx->len;
 801bbcc:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 801bbce:	f105 0368 	add.w	r3, r5, #104	; 0x68
 801bbd2:	9300      	str	r3, [sp, #0]
 801bbd4:	4623      	mov	r3, r4
 801bbd6:	f105 0214 	add.w	r2, r5, #20
 801bbda:	a903      	add	r1, sp, #12
 801bbdc:	4608      	mov	r0, r1
 801bbde:	f7f7 fcbf 	bl	8013560 <mbedtls_mpi_exp_mod>
 801bbe2:	4604      	mov	r4, r0
 801bbe4:	2800      	cmp	r0, #0
 801bbe6:	d1e0      	bne.n	801bbaa <mbedtls_rsa_public+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 801bbe8:	463a      	mov	r2, r7
 801bbea:	4631      	mov	r1, r6
 801bbec:	a803      	add	r0, sp, #12
 801bbee:	f7f6 fea9 	bl	8012944 <mbedtls_mpi_write_binary>
 801bbf2:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 801bbf4:	a803      	add	r0, sp, #12
 801bbf6:	f7f6 fd1e 	bl	8012636 <mbedtls_mpi_free>
    if( ret != 0 )
 801bbfa:	2c00      	cmp	r4, #0
 801bbfc:	d1d8      	bne.n	801bbb0 <mbedtls_rsa_public+0x30>
}
 801bbfe:	4620      	mov	r0, r4
 801bc00:	b007      	add	sp, #28
 801bc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801bc04:	4c00      	ldr	r4, [pc, #0]	; (801bc08 <mbedtls_rsa_public+0x88>)
 801bc06:	e7fa      	b.n	801bbfe <mbedtls_rsa_public+0x7e>
 801bc08:	ffffbf80 	.word	0xffffbf80

0801bc0c <mbedtls_rsa_private>:
{
 801bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc10:	b0a3      	sub	sp, #140	; 0x8c
 801bc12:	4604      	mov	r4, r0
 801bc14:	4616      	mov	r6, r2
 801bc16:	461d      	mov	r5, r3
    if( rsa_check_context( ctx, 1             /* private key checks */,
 801bc18:	460f      	mov	r7, r1
 801bc1a:	1e0a      	subs	r2, r1, #0
 801bc1c:	bf18      	it	ne
 801bc1e:	2201      	movne	r2, #1
 801bc20:	2101      	movs	r1, #1
 801bc22:	f7ff fc27 	bl	801b474 <rsa_check_context>
 801bc26:	2800      	cmp	r0, #0
 801bc28:	f040 8163 	bne.w	801bef2 <mbedtls_rsa_private+0x2e6>
    mbedtls_mpi_init( &T );
 801bc2c:	a81f      	add	r0, sp, #124	; 0x7c
 801bc2e:	f7f6 fcfc 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 );
 801bc32:	a81c      	add	r0, sp, #112	; 0x70
 801bc34:	f7f6 fcf9 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 801bc38:	a819      	add	r0, sp, #100	; 0x64
 801bc3a:	f7f6 fcf6 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 801bc3e:	a816      	add	r0, sp, #88	; 0x58
 801bc40:	f7f6 fcf3 	bl	801262a <mbedtls_mpi_init>
    if( f_rng != NULL )
 801bc44:	2f00      	cmp	r7, #0
 801bc46:	f000 81f4 	beq.w	801c032 <mbedtls_rsa_private+0x426>
        mbedtls_mpi_init( &DP_blind );
 801bc4a:	a80d      	add	r0, sp, #52	; 0x34
 801bc4c:	f7f6 fced 	bl	801262a <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 801bc50:	a80a      	add	r0, sp, #40	; 0x28
 801bc52:	f7f6 fcea 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 801bc56:	a813      	add	r0, sp, #76	; 0x4c
 801bc58:	f7f6 fce7 	bl	801262a <mbedtls_mpi_init>
 801bc5c:	a810      	add	r0, sp, #64	; 0x40
 801bc5e:	f7f6 fce4 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 801bc62:	a807      	add	r0, sp, #28
 801bc64:	f7f6 fce1 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 801bc68:	a804      	add	r0, sp, #16
 801bc6a:	f7f6 fcde 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801bc6e:	6862      	ldr	r2, [r4, #4]
 801bc70:	4629      	mov	r1, r5
 801bc72:	a81f      	add	r0, sp, #124	; 0x7c
 801bc74:	f7f6 fe35 	bl	80128e2 <mbedtls_mpi_read_binary>
 801bc78:	4605      	mov	r5, r0
 801bc7a:	b148      	cbz	r0, 801bc90 <mbedtls_rsa_private+0x84>
    mbedtls_mpi_free( &P1 );
 801bc7c:	a81c      	add	r0, sp, #112	; 0x70
 801bc7e:	f7f6 fcda 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bc82:	a819      	add	r0, sp, #100	; 0x64
 801bc84:	f7f6 fcd7 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bc88:	a816      	add	r0, sp, #88	; 0x58
 801bc8a:	f7f6 fcd4 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801bc8e:	e015      	b.n	801bcbc <mbedtls_rsa_private+0xb0>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 801bc90:	f104 0808 	add.w	r8, r4, #8
 801bc94:	4641      	mov	r1, r8
 801bc96:	a81f      	add	r0, sp, #124	; 0x7c
 801bc98:	f7f7 f803 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	db29      	blt.n	801bcf4 <mbedtls_rsa_private+0xe8>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801bca0:	f06f 0503 	mvn.w	r5, #3
    mbedtls_mpi_free( &P1 );
 801bca4:	a81c      	add	r0, sp, #112	; 0x70
 801bca6:	f7f6 fcc6 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bcaa:	a819      	add	r0, sp, #100	; 0x64
 801bcac:	f7f6 fcc3 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bcb0:	a816      	add	r0, sp, #88	; 0x58
 801bcb2:	f7f6 fcc0 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801bcb6:	2f00      	cmp	r7, #0
 801bcb8:	f000 81d9 	beq.w	801c06e <mbedtls_rsa_private+0x462>
        mbedtls_mpi_free( &DP_blind );
 801bcbc:	a80d      	add	r0, sp, #52	; 0x34
 801bcbe:	f7f6 fcba 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 801bcc2:	a80a      	add	r0, sp, #40	; 0x28
 801bcc4:	f7f6 fcb7 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 801bcc8:	a81f      	add	r0, sp, #124	; 0x7c
 801bcca:	f7f6 fcb4 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 801bcce:	a813      	add	r0, sp, #76	; 0x4c
 801bcd0:	f7f6 fcb1 	bl	8012636 <mbedtls_mpi_free>
 801bcd4:	a810      	add	r0, sp, #64	; 0x40
 801bcd6:	f7f6 fcae 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 801bcda:	a804      	add	r0, sp, #16
 801bcdc:	f7f6 fcab 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 801bce0:	a807      	add	r0, sp, #28
 801bce2:	f7f6 fca8 	bl	8012636 <mbedtls_mpi_free>
    if( ret != 0 )
 801bce6:	2d00      	cmp	r5, #0
 801bce8:	f040 81d0 	bne.w	801c08c <mbedtls_rsa_private+0x480>
}
 801bcec:	4628      	mov	r0, r5
 801bcee:	b023      	add	sp, #140	; 0x8c
 801bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 801bcf4:	a91f      	add	r1, sp, #124	; 0x7c
 801bcf6:	a807      	add	r0, sp, #28
 801bcf8:	f7f6 fd13 	bl	8012722 <mbedtls_mpi_copy>
 801bcfc:	4605      	mov	r5, r0
 801bcfe:	2800      	cmp	r0, #0
 801bd00:	d1d0      	bne.n	801bca4 <mbedtls_rsa_private+0x98>
    mbedtls_mpi *DP = &ctx->DP;
 801bd02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd06:	9302      	str	r3, [sp, #8]
    mbedtls_mpi *DQ = &ctx->DQ;
 801bd08:	f104 0350 	add.w	r3, r4, #80	; 0x50
 801bd0c:	9303      	str	r3, [sp, #12]
    if( f_rng != NULL )
 801bd0e:	2f00      	cmp	r7, #0
 801bd10:	f000 810c 	beq.w	801bf2c <mbedtls_rsa_private+0x320>
    if( ctx->Vf.p != NULL )
 801bd14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	f000 809b 	beq.w	801be54 <mbedtls_rsa_private+0x248>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 801bd1e:	f104 098c 	add.w	r9, r4, #140	; 0x8c
 801bd22:	464a      	mov	r2, r9
 801bd24:	4649      	mov	r1, r9
 801bd26:	4648      	mov	r0, r9
 801bd28:	f7f7 f93c 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bd2c:	4605      	mov	r5, r0
 801bd2e:	b148      	cbz	r0, 801bd44 <mbedtls_rsa_private+0x138>
    mbedtls_mpi_free( &P1 );
 801bd30:	a81c      	add	r0, sp, #112	; 0x70
 801bd32:	f7f6 fc80 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bd36:	a819      	add	r0, sp, #100	; 0x64
 801bd38:	f7f6 fc7d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bd3c:	a816      	add	r0, sp, #88	; 0x58
 801bd3e:	f7f6 fc7a 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801bd42:	e7bb      	b.n	801bcbc <mbedtls_rsa_private+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 801bd44:	4642      	mov	r2, r8
 801bd46:	4649      	mov	r1, r9
 801bd48:	4648      	mov	r0, r9
 801bd4a:	f7f7 fbd4 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801bd4e:	4605      	mov	r5, r0
 801bd50:	2800      	cmp	r0, #0
 801bd52:	d1ed      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 801bd54:	f104 0998 	add.w	r9, r4, #152	; 0x98
 801bd58:	464a      	mov	r2, r9
 801bd5a:	4649      	mov	r1, r9
 801bd5c:	4648      	mov	r0, r9
 801bd5e:	f7f7 f921 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bd62:	4605      	mov	r5, r0
 801bd64:	2800      	cmp	r0, #0
 801bd66:	d1e3      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 801bd68:	4642      	mov	r2, r8
 801bd6a:	4649      	mov	r1, r9
 801bd6c:	4648      	mov	r0, r9
 801bd6e:	f7f7 fbc2 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801bd72:	4605      	mov	r5, r0
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 801bd74:	2d00      	cmp	r5, #0
 801bd76:	d1db      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 801bd78:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 801bd7c:	a91f      	add	r1, sp, #124	; 0x7c
 801bd7e:	4608      	mov	r0, r1
 801bd80:	f7f7 f910 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bd84:	4605      	mov	r5, r0
 801bd86:	2800      	cmp	r0, #0
 801bd88:	d1d2      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 801bd8a:	4642      	mov	r2, r8
 801bd8c:	a91f      	add	r1, sp, #124	; 0x7c
 801bd8e:	4608      	mov	r0, r1
 801bd90:	f7f7 fbb1 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801bd94:	4605      	mov	r5, r0
 801bd96:	2800      	cmp	r0, #0
 801bd98:	d1ca      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 801bd9a:	2201      	movs	r2, #1
 801bd9c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 801bda0:	a81c      	add	r0, sp, #112	; 0x70
 801bda2:	f7f7 f8e8 	bl	8012f76 <mbedtls_mpi_sub_int>
 801bda6:	4605      	mov	r5, r0
 801bda8:	2800      	cmp	r0, #0
 801bdaa:	d1c1      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 801bdac:	2201      	movs	r2, #1
 801bdae:	f104 0138 	add.w	r1, r4, #56	; 0x38
 801bdb2:	a819      	add	r0, sp, #100	; 0x64
 801bdb4:	f7f7 f8df 	bl	8012f76 <mbedtls_mpi_sub_int>
 801bdb8:	4605      	mov	r5, r0
 801bdba:	2800      	cmp	r0, #0
 801bdbc:	d1b8      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801bdbe:	4633      	mov	r3, r6
 801bdc0:	463a      	mov	r2, r7
 801bdc2:	211c      	movs	r1, #28
 801bdc4:	a816      	add	r0, sp, #88	; 0x58
 801bdc6:	f7f7 fecc 	bl	8013b62 <mbedtls_mpi_fill_random>
 801bdca:	4605      	mov	r5, r0
 801bdcc:	2800      	cmp	r0, #0
 801bdce:	d1af      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 801bdd0:	aa16      	add	r2, sp, #88	; 0x58
 801bdd2:	a91c      	add	r1, sp, #112	; 0x70
 801bdd4:	a80d      	add	r0, sp, #52	; 0x34
 801bdd6:	f7f7 f8e5 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bdda:	4605      	mov	r5, r0
 801bddc:	2800      	cmp	r0, #0
 801bdde:	d1a7      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 801bde0:	9a02      	ldr	r2, [sp, #8]
 801bde2:	a90d      	add	r1, sp, #52	; 0x34
 801bde4:	4608      	mov	r0, r1
 801bde6:	f7f7 f861 	bl	8012eac <mbedtls_mpi_add_mpi>
 801bdea:	4605      	mov	r5, r0
 801bdec:	2800      	cmp	r0, #0
 801bdee:	d19f      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801bdf0:	4633      	mov	r3, r6
 801bdf2:	463a      	mov	r2, r7
 801bdf4:	211c      	movs	r1, #28
 801bdf6:	a816      	add	r0, sp, #88	; 0x58
 801bdf8:	f7f7 feb3 	bl	8013b62 <mbedtls_mpi_fill_random>
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	2800      	cmp	r0, #0
 801be00:	d196      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 801be02:	aa16      	add	r2, sp, #88	; 0x58
 801be04:	a919      	add	r1, sp, #100	; 0x64
 801be06:	a80a      	add	r0, sp, #40	; 0x28
 801be08:	f7f7 f8cc 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801be0c:	4605      	mov	r5, r0
 801be0e:	2800      	cmp	r0, #0
 801be10:	d18e      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 801be12:	9a03      	ldr	r2, [sp, #12]
 801be14:	a90a      	add	r1, sp, #40	; 0x28
 801be16:	4608      	mov	r0, r1
 801be18:	f7f7 f848 	bl	8012eac <mbedtls_mpi_add_mpi>
 801be1c:	4605      	mov	r5, r0
 801be1e:	2800      	cmp	r0, #0
 801be20:	d186      	bne.n	801bd30 <mbedtls_rsa_private+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 801be22:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 801be26:	f104 0374 	add.w	r3, r4, #116	; 0x74
 801be2a:	9300      	str	r3, [sp, #0]
 801be2c:	4633      	mov	r3, r6
 801be2e:	aa0d      	add	r2, sp, #52	; 0x34
 801be30:	a91f      	add	r1, sp, #124	; 0x7c
 801be32:	a813      	add	r0, sp, #76	; 0x4c
 801be34:	f7f7 fb94 	bl	8013560 <mbedtls_mpi_exp_mod>
 801be38:	4605      	mov	r5, r0
 801be3a:	2800      	cmp	r0, #0
 801be3c:	f000 808d 	beq.w	801bf5a <mbedtls_rsa_private+0x34e>
    mbedtls_mpi_free( &P1 );
 801be40:	a81c      	add	r0, sp, #112	; 0x70
 801be42:	f7f6 fbf8 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801be46:	a819      	add	r0, sp, #100	; 0x64
 801be48:	f7f6 fbf5 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801be4c:	a816      	add	r0, sp, #88	; 0x58
 801be4e:	f7f6 fbf2 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801be52:	e733      	b.n	801bcbc <mbedtls_rsa_private+0xb0>
 801be54:	f04f 0a0b 	mov.w	sl, #11
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 801be58:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801be5c:	f104 098c 	add.w	r9, r4, #140	; 0x8c
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 801be60:	6861      	ldr	r1, [r4, #4]
 801be62:	4633      	mov	r3, r6
 801be64:	463a      	mov	r2, r7
 801be66:	3901      	subs	r1, #1
 801be68:	4658      	mov	r0, fp
 801be6a:	f7f7 fe7a 	bl	8013b62 <mbedtls_mpi_fill_random>
 801be6e:	2800      	cmp	r0, #0
 801be70:	d141      	bne.n	801bef6 <mbedtls_rsa_private+0x2ea>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801be72:	4642      	mov	r2, r8
 801be74:	4659      	mov	r1, fp
 801be76:	4648      	mov	r0, r9
 801be78:	f7f7 fde4 	bl	8013a44 <mbedtls_mpi_gcd>
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d13c      	bne.n	801befa <mbedtls_rsa_private+0x2ee>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 801be80:	2101      	movs	r1, #1
 801be82:	4648      	mov	r0, r9
 801be84:	f7f6 ff65 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801be88:	b120      	cbz	r0, 801be94 <mbedtls_rsa_private+0x288>
        if( count++ > 10 )
 801be8a:	f1ba 0a01 	subs.w	sl, sl, #1
 801be8e:	d1e7      	bne.n	801be60 <mbedtls_rsa_private+0x254>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 801be90:	4d80      	ldr	r5, [pc, #512]	; (801c094 <mbedtls_rsa_private+0x488>)
 801be92:	e74d      	b.n	801bd30 <mbedtls_rsa_private+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 801be94:	4642      	mov	r2, r8
 801be96:	4659      	mov	r1, fp
 801be98:	4648      	mov	r0, r9
 801be9a:	f7f7 fe93 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 801be9e:	4605      	mov	r5, r0
 801bea0:	2800      	cmp	r0, #0
 801bea2:	f47f af45 	bne.w	801bd30 <mbedtls_rsa_private+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 801bea6:	f104 0368 	add.w	r3, r4, #104	; 0x68
 801beaa:	9300      	str	r3, [sp, #0]
 801beac:	4643      	mov	r3, r8
 801beae:	f104 0214 	add.w	r2, r4, #20
 801beb2:	4649      	mov	r1, r9
 801beb4:	4648      	mov	r0, r9
 801beb6:	f7f7 fb53 	bl	8013560 <mbedtls_mpi_exp_mod>
 801beba:	4605      	mov	r5, r0
cleanup:
 801bebc:	e75a      	b.n	801bd74 <mbedtls_rsa_private+0x168>
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 801bebe:	a907      	add	r1, sp, #28
 801bec0:	a804      	add	r0, sp, #16
 801bec2:	f7f6 feee 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
 801bec6:	b108      	cbz	r0, 801becc <mbedtls_rsa_private+0x2c0>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 801bec8:	4d73      	ldr	r5, [pc, #460]	; (801c098 <mbedtls_rsa_private+0x48c>)
 801beca:	e6eb      	b.n	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 801becc:	6862      	ldr	r2, [r4, #4]
 801bece:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801bed0:	a81f      	add	r0, sp, #124	; 0x7c
 801bed2:	f7f6 fd37 	bl	8012944 <mbedtls_mpi_write_binary>
 801bed6:	4605      	mov	r5, r0
    mbedtls_mpi_free( &P1 );
 801bed8:	a81c      	add	r0, sp, #112	; 0x70
 801beda:	f7f6 fbac 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bede:	a819      	add	r0, sp, #100	; 0x64
 801bee0:	f7f6 fba9 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bee4:	a816      	add	r0, sp, #88	; 0x58
 801bee6:	f7f6 fba6 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801beea:	2f00      	cmp	r7, #0
 801beec:	f43f aeec 	beq.w	801bcc8 <mbedtls_rsa_private+0xbc>
 801bef0:	e6e4      	b.n	801bcbc <mbedtls_rsa_private+0xb0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801bef2:	4d6a      	ldr	r5, [pc, #424]	; (801c09c <mbedtls_rsa_private+0x490>)
 801bef4:	e6fa      	b.n	801bcec <mbedtls_rsa_private+0xe0>
 801bef6:	4605      	mov	r5, r0
 801bef8:	e71a      	b.n	801bd30 <mbedtls_rsa_private+0x124>
 801befa:	4605      	mov	r5, r0
 801befc:	e718      	b.n	801bd30 <mbedtls_rsa_private+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 801befe:	f104 0368 	add.w	r3, r4, #104	; 0x68
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	4643      	mov	r3, r8
 801bf06:	f104 0214 	add.w	r2, r4, #20
 801bf0a:	a91f      	add	r1, sp, #124	; 0x7c
 801bf0c:	a804      	add	r0, sp, #16
 801bf0e:	f7f7 fb27 	bl	8013560 <mbedtls_mpi_exp_mod>
 801bf12:	4605      	mov	r5, r0
 801bf14:	2800      	cmp	r0, #0
 801bf16:	d0d2      	beq.n	801bebe <mbedtls_rsa_private+0x2b2>
    mbedtls_mpi_free( &P1 );
 801bf18:	a81c      	add	r0, sp, #112	; 0x70
 801bf1a:	f7f6 fb8c 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bf1e:	a819      	add	r0, sp, #100	; 0x64
 801bf20:	f7f6 fb89 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bf24:	a816      	add	r0, sp, #88	; 0x58
 801bf26:	f7f6 fb86 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801bf2a:	e0a0      	b.n	801c06e <mbedtls_rsa_private+0x462>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 801bf2c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 801bf30:	f104 0374 	add.w	r3, r4, #116	; 0x74
 801bf34:	9300      	str	r3, [sp, #0]
 801bf36:	4633      	mov	r3, r6
 801bf38:	9a02      	ldr	r2, [sp, #8]
 801bf3a:	a91f      	add	r1, sp, #124	; 0x7c
 801bf3c:	a813      	add	r0, sp, #76	; 0x4c
 801bf3e:	f7f7 fb0f 	bl	8013560 <mbedtls_mpi_exp_mod>
 801bf42:	4605      	mov	r5, r0
 801bf44:	b158      	cbz	r0, 801bf5e <mbedtls_rsa_private+0x352>
    mbedtls_mpi_free( &P1 );
 801bf46:	a81c      	add	r0, sp, #112	; 0x70
 801bf48:	f7f6 fb75 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801bf4c:	a819      	add	r0, sp, #100	; 0x64
 801bf4e:	f7f6 fb72 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801bf52:	a816      	add	r0, sp, #88	; 0x58
 801bf54:	f7f6 fb6f 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801bf58:	e089      	b.n	801c06e <mbedtls_rsa_private+0x462>
        DQ = &DQ_blind;
 801bf5a:	ab0a      	add	r3, sp, #40	; 0x28
 801bf5c:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 801bf5e:	f104 0938 	add.w	r9, r4, #56	; 0x38
 801bf62:	f104 0380 	add.w	r3, r4, #128	; 0x80
 801bf66:	9300      	str	r3, [sp, #0]
 801bf68:	464b      	mov	r3, r9
 801bf6a:	9a03      	ldr	r2, [sp, #12]
 801bf6c:	a91f      	add	r1, sp, #124	; 0x7c
 801bf6e:	a810      	add	r0, sp, #64	; 0x40
 801bf70:	f7f7 faf6 	bl	8013560 <mbedtls_mpi_exp_mod>
 801bf74:	4605      	mov	r5, r0
 801bf76:	2800      	cmp	r0, #0
 801bf78:	f47f ae94 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 801bf7c:	aa10      	add	r2, sp, #64	; 0x40
 801bf7e:	a913      	add	r1, sp, #76	; 0x4c
 801bf80:	a81f      	add	r0, sp, #124	; 0x7c
 801bf82:	f7f6 ffb9 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801bf86:	4605      	mov	r5, r0
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	f47f ae8b 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 801bf8e:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 801bf92:	a91f      	add	r1, sp, #124	; 0x7c
 801bf94:	a813      	add	r0, sp, #76	; 0x4c
 801bf96:	f7f7 f805 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bf9a:	4605      	mov	r5, r0
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	f47f ae81 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 801bfa2:	4632      	mov	r2, r6
 801bfa4:	a913      	add	r1, sp, #76	; 0x4c
 801bfa6:	a81f      	add	r0, sp, #124	; 0x7c
 801bfa8:	f7f7 faa5 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801bfac:	4605      	mov	r5, r0
 801bfae:	2800      	cmp	r0, #0
 801bfb0:	f47f ae78 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 801bfb4:	464a      	mov	r2, r9
 801bfb6:	a91f      	add	r1, sp, #124	; 0x7c
 801bfb8:	a813      	add	r0, sp, #76	; 0x4c
 801bfba:	f7f6 fff3 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bfbe:	4605      	mov	r5, r0
 801bfc0:	2800      	cmp	r0, #0
 801bfc2:	f47f ae6f 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 801bfc6:	aa13      	add	r2, sp, #76	; 0x4c
 801bfc8:	a910      	add	r1, sp, #64	; 0x40
 801bfca:	a81f      	add	r0, sp, #124	; 0x7c
 801bfcc:	f7f6 ff6e 	bl	8012eac <mbedtls_mpi_add_mpi>
 801bfd0:	4605      	mov	r5, r0
 801bfd2:	2800      	cmp	r0, #0
 801bfd4:	f47f ae66 	bne.w	801bca4 <mbedtls_rsa_private+0x98>
    if( f_rng != NULL )
 801bfd8:	2f00      	cmp	r7, #0
 801bfda:	d090      	beq.n	801befe <mbedtls_rsa_private+0x2f2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 801bfdc:	f104 0298 	add.w	r2, r4, #152	; 0x98
 801bfe0:	a91f      	add	r1, sp, #124	; 0x7c
 801bfe2:	4608      	mov	r0, r1
 801bfe4:	f7f6 ffde 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801bfe8:	4605      	mov	r5, r0
 801bfea:	2800      	cmp	r0, #0
 801bfec:	f47f aea0 	bne.w	801bd30 <mbedtls_rsa_private+0x124>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 801bff0:	4642      	mov	r2, r8
 801bff2:	a91f      	add	r1, sp, #124	; 0x7c
 801bff4:	4608      	mov	r0, r1
 801bff6:	f7f7 fa7e 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801bffa:	4605      	mov	r5, r0
 801bffc:	2800      	cmp	r0, #0
 801bffe:	f47f ae97 	bne.w	801bd30 <mbedtls_rsa_private+0x124>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 801c002:	f104 0368 	add.w	r3, r4, #104	; 0x68
 801c006:	9300      	str	r3, [sp, #0]
 801c008:	4643      	mov	r3, r8
 801c00a:	f104 0214 	add.w	r2, r4, #20
 801c00e:	a91f      	add	r1, sp, #124	; 0x7c
 801c010:	a804      	add	r0, sp, #16
 801c012:	f7f7 faa5 	bl	8013560 <mbedtls_mpi_exp_mod>
 801c016:	4605      	mov	r5, r0
 801c018:	2800      	cmp	r0, #0
 801c01a:	f43f af50 	beq.w	801bebe <mbedtls_rsa_private+0x2b2>
    mbedtls_mpi_free( &P1 );
 801c01e:	a81c      	add	r0, sp, #112	; 0x70
 801c020:	f7f6 fb09 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801c024:	a819      	add	r0, sp, #100	; 0x64
 801c026:	f7f6 fb06 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801c02a:	a816      	add	r0, sp, #88	; 0x58
 801c02c:	f7f6 fb03 	bl	8012636 <mbedtls_mpi_free>
    if( f_rng != NULL )
 801c030:	e644      	b.n	801bcbc <mbedtls_rsa_private+0xb0>
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 801c032:	a813      	add	r0, sp, #76	; 0x4c
 801c034:	f7f6 faf9 	bl	801262a <mbedtls_mpi_init>
 801c038:	a810      	add	r0, sp, #64	; 0x40
 801c03a:	f7f6 faf6 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &I );
 801c03e:	a807      	add	r0, sp, #28
 801c040:	f7f6 faf3 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 801c044:	a804      	add	r0, sp, #16
 801c046:	f7f6 faf0 	bl	801262a <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801c04a:	6862      	ldr	r2, [r4, #4]
 801c04c:	4629      	mov	r1, r5
 801c04e:	a81f      	add	r0, sp, #124	; 0x7c
 801c050:	f7f6 fc47 	bl	80128e2 <mbedtls_mpi_read_binary>
 801c054:	4605      	mov	r5, r0
 801c056:	2800      	cmp	r0, #0
 801c058:	f43f ae1a 	beq.w	801bc90 <mbedtls_rsa_private+0x84>
    mbedtls_mpi_free( &P1 );
 801c05c:	a81c      	add	r0, sp, #112	; 0x70
 801c05e:	f7f6 faea 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 801c062:	a819      	add	r0, sp, #100	; 0x64
 801c064:	f7f6 fae7 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 801c068:	a816      	add	r0, sp, #88	; 0x58
 801c06a:	f7f6 fae4 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 801c06e:	a81f      	add	r0, sp, #124	; 0x7c
 801c070:	f7f6 fae1 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 801c074:	a813      	add	r0, sp, #76	; 0x4c
 801c076:	f7f6 fade 	bl	8012636 <mbedtls_mpi_free>
 801c07a:	a810      	add	r0, sp, #64	; 0x40
 801c07c:	f7f6 fadb 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &C );
 801c080:	a804      	add	r0, sp, #16
 801c082:	f7f6 fad8 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 801c086:	a807      	add	r0, sp, #28
 801c088:	f7f6 fad5 	bl	8012636 <mbedtls_mpi_free>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 801c08c:	f5a5 4586 	sub.w	r5, r5, #17152	; 0x4300
 801c090:	e62c      	b.n	801bcec <mbedtls_rsa_private+0xe0>
 801c092:	bf00      	nop
 801c094:	ffffbb80 	.word	0xffffbb80
 801c098:	ffffbc80 	.word	0xffffbc80
 801c09c:	ffffbf80 	.word	0xffffbf80

0801c0a0 <mbedtls_rsa_rsaes_oaep_encrypt>:
{
 801c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a4:	b08b      	sub	sp, #44	; 0x2c
 801c0a6:	4605      	mov	r5, r0
 801c0a8:	460e      	mov	r6, r1
 801c0aa:	9203      	str	r2, [sp, #12]
 801c0ac:	9305      	str	r3, [sp, #20]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c0ae:	2b01      	cmp	r3, #1
 801c0b0:	d031      	beq.n	801c116 <mbedtls_rsa_rsaes_oaep_encrypt+0x76>
    if( f_rng == NULL )
 801c0b2:	2e00      	cmp	r6, #0
 801c0b4:	f000 8095 	beq.w	801c1e2 <mbedtls_rsa_rsaes_oaep_encrypt+0x142>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 801c0b8:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
 801c0bc:	f7fc feba 	bl	8018e34 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c0c0:	4607      	mov	r7, r0
 801c0c2:	2800      	cmp	r0, #0
 801c0c4:	f000 8090 	beq.w	801c1e8 <mbedtls_rsa_rsaes_oaep_encrypt+0x148>
    olen = ctx->len;
 801c0c8:	f8d5 a004 	ldr.w	sl, [r5, #4]
    hlen = mbedtls_md_get_size( md_info );
 801c0cc:	f7fd f828 	bl	8019120 <mbedtls_md_get_size>
 801c0d0:	4604      	mov	r4, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 801c0d2:	0043      	lsls	r3, r0, #1
 801c0d4:	9304      	str	r3, [sp, #16]
 801c0d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c0d8:	3302      	adds	r3, #2
 801c0da:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801c0de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	f0c0 8084 	bcc.w	801c1ee <mbedtls_rsa_rsaes_oaep_encrypt+0x14e>
 801c0e6:	4553      	cmp	r3, sl
 801c0e8:	f200 8084 	bhi.w	801c1f4 <mbedtls_rsa_rsaes_oaep_encrypt+0x154>
    memset( output, 0, olen );
 801c0ec:	4652      	mov	r2, sl
 801c0ee:	2100      	movs	r1, #0
 801c0f0:	9818      	ldr	r0, [sp, #96]	; 0x60
 801c0f2:	f00e fa4a 	bl	802a58a <memset>
    *p++ = 0;
 801c0f6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 801c100:	4622      	mov	r2, r4
 801c102:	4649      	mov	r1, r9
 801c104:	9803      	ldr	r0, [sp, #12]
 801c106:	47b0      	blx	r6
 801c108:	b160      	cbz	r0, 801c124 <mbedtls_rsa_rsaes_oaep_encrypt+0x84>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 801c10a:	f5a0 4889 	sub.w	r8, r0, #17536	; 0x4480
}
 801c10e:	4640      	mov	r0, r8
 801c110:	b00b      	add	sp, #44	; 0x2c
 801c112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c116:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801c11a:	2b01      	cmp	r3, #1
 801c11c:	d0c9      	beq.n	801c0b2 <mbedtls_rsa_rsaes_oaep_encrypt+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c11e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801c1fc <mbedtls_rsa_rsaes_oaep_encrypt+0x15c>
 801c122:	e7f4      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
    p += hlen;
 801c124:	eb09 0b04 	add.w	fp, r9, r4
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 801c128:	465b      	mov	r3, fp
 801c12a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c12c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c12e:	4638      	mov	r0, r7
 801c130:	f7fc ff10 	bl	8018f54 <mbedtls_md>
 801c134:	4680      	mov	r8, r0
 801c136:	2800      	cmp	r0, #0
 801c138:	d1e9      	bne.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
    p += olen - 2 * hlen - 2 - ilen;
 801c13a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c13c:	ebaa 0303 	sub.w	r3, sl, r3
 801c140:	3b02      	subs	r3, #2
 801c142:	4423      	add	r3, r4
 801c144:	9a04      	ldr	r2, [sp, #16]
 801c146:	1a9b      	subs	r3, r3, r2
 801c148:	eb0b 0003 	add.w	r0, fp, r3
    *p++ = 1;
 801c14c:	2201      	movs	r2, #1
 801c14e:	f80b 2003 	strb.w	r2, [fp, r3]
    memcpy( p, input, ilen );
 801c152:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c154:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801c156:	3001      	adds	r0, #1
 801c158:	f00e f9ef 	bl	802a53a <memcpy>
    mbedtls_md_init( &md_ctx );
 801c15c:	a807      	add	r0, sp, #28
 801c15e:	f7fc fe8b 	bl	8018e78 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 801c162:	2200      	movs	r2, #0
 801c164:	4639      	mov	r1, r7
 801c166:	a807      	add	r0, sp, #28
 801c168:	f7fc fea4 	bl	8018eb4 <mbedtls_md_setup>
 801c16c:	4680      	mov	r8, r0
 801c16e:	b118      	cbz	r0, 801c178 <mbedtls_rsa_rsaes_oaep_encrypt+0xd8>
    mbedtls_md_free( &md_ctx );
 801c170:	a807      	add	r0, sp, #28
 801c172:	f7fc fe86 	bl	8018e82 <mbedtls_md_free>
    if( ret != 0 )
 801c176:	e7ca      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 801c178:	1c63      	adds	r3, r4, #1
 801c17a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c17c:	18d0      	adds	r0, r2, r3
 801c17e:	4607      	mov	r7, r0
 801c180:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c184:	ebaa 0a04 	sub.w	sl, sl, r4
 801c188:	ab07      	add	r3, sp, #28
 801c18a:	9300      	str	r3, [sp, #0]
 801c18c:	4623      	mov	r3, r4
 801c18e:	464a      	mov	r2, r9
 801c190:	4651      	mov	r1, sl
 801c192:	f7ff f9eb 	bl	801b56c <mgf_mask>
 801c196:	4680      	mov	r8, r0
 801c198:	2800      	cmp	r0, #0
 801c19a:	d1e9      	bne.n	801c170 <mbedtls_rsa_rsaes_oaep_encrypt+0xd0>
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 801c19c:	f10d 0b1c 	add.w	fp, sp, #28
 801c1a0:	f8cd b000 	str.w	fp, [sp]
 801c1a4:	4653      	mov	r3, sl
 801c1a6:	463a      	mov	r2, r7
 801c1a8:	4621      	mov	r1, r4
 801c1aa:	4648      	mov	r0, r9
 801c1ac:	f7ff f9de 	bl	801b56c <mgf_mask>
 801c1b0:	4680      	mov	r8, r0
    mbedtls_md_free( &md_ctx );
 801c1b2:	4658      	mov	r0, fp
 801c1b4:	f7fc fe65 	bl	8018e82 <mbedtls_md_free>
    if( ret != 0 )
 801c1b8:	f1b8 0f00 	cmp.w	r8, #0
 801c1bc:	d1a7      	bne.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801c1be:	9b05      	ldr	r3, [sp, #20]
 801c1c0:	b933      	cbnz	r3, 801c1d0 <mbedtls_rsa_rsaes_oaep_encrypt+0x130>
            ? mbedtls_rsa_public(  ctx, output, output )
 801c1c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c1c4:	4611      	mov	r1, r2
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	f7ff fcda 	bl	801bb80 <mbedtls_rsa_public>
 801c1cc:	4680      	mov	r8, r0
 801c1ce:	e79e      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801c1d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c1d2:	9300      	str	r3, [sp, #0]
 801c1d4:	9a03      	ldr	r2, [sp, #12]
 801c1d6:	4631      	mov	r1, r6
 801c1d8:	4628      	mov	r0, r5
 801c1da:	f7ff fd17 	bl	801bc0c <mbedtls_rsa_private>
 801c1de:	4680      	mov	r8, r0
 801c1e0:	e795      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c1e2:	f8df 8018 	ldr.w	r8, [pc, #24]	; 801c1fc <mbedtls_rsa_rsaes_oaep_encrypt+0x15c>
 801c1e6:	e792      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c1e8:	f8df 8010 	ldr.w	r8, [pc, #16]	; 801c1fc <mbedtls_rsa_rsaes_oaep_encrypt+0x15c>
 801c1ec:	e78f      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c1ee:	f8df 800c 	ldr.w	r8, [pc, #12]	; 801c1fc <mbedtls_rsa_rsaes_oaep_encrypt+0x15c>
 801c1f2:	e78c      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
 801c1f4:	f8df 8004 	ldr.w	r8, [pc, #4]	; 801c1fc <mbedtls_rsa_rsaes_oaep_encrypt+0x15c>
 801c1f8:	e789      	b.n	801c10e <mbedtls_rsa_rsaes_oaep_encrypt+0x6e>
 801c1fa:	bf00      	nop
 801c1fc:	ffffbf80 	.word	0xffffbf80

0801c200 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
{
 801c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c204:	b083      	sub	sp, #12
 801c206:	4683      	mov	fp, r0
 801c208:	460e      	mov	r6, r1
 801c20a:	4617      	mov	r7, r2
 801c20c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801c210:	2b01      	cmp	r3, #1
 801c212:	d01e      	beq.n	801c252 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x52>
    olen = ctx->len;
 801c214:	f8db 2004 	ldr.w	r2, [fp, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 801c218:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c21a:	f111 0f0c 	cmn.w	r1, #12
 801c21e:	d853      	bhi.n	801c2c8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc8>
 801c220:	310b      	adds	r1, #11
 801c222:	4291      	cmp	r1, r2
 801c224:	d852      	bhi.n	801c2cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xcc>
    nb_pad = olen - 3 - ilen;
 801c226:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c228:	1a52      	subs	r2, r2, r1
 801c22a:	3a03      	subs	r2, #3
    *p++ = 0;
 801c22c:	2100      	movs	r1, #0
 801c22e:	f88a 1000 	strb.w	r1, [sl]
    if( mode == MBEDTLS_RSA_PUBLIC )
 801c232:	bb43      	cbnz	r3, 801c286 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
        if( f_rng == NULL )
 801c234:	2e00      	cmp	r6, #0
 801c236:	d04b      	beq.n	801c2d0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd0>
        *p++ = MBEDTLS_RSA_CRYPT;
 801c238:	f10a 0502 	add.w	r5, sl, #2
 801c23c:	2302      	movs	r3, #2
 801c23e:	f88a 3001 	strb.w	r3, [sl, #1]
        while( nb_pad-- > 0 )
 801c242:	2a00      	cmp	r2, #0
 801c244:	d046      	beq.n	801c2d4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd4>
 801c246:	441a      	add	r2, r3
 801c248:	eb0a 0902 	add.w	r9, sl, r2
                ret = f_rng( p_rng, p, 1 );
 801c24c:	f04f 0801 	mov.w	r8, #1
 801c250:	e00a      	b.n	801c268 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x68>
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801c252:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 801c256:	2a00      	cmp	r2, #0
 801c258:	d0dc      	beq.n	801c214 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x14>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c25a:	4826      	ldr	r0, [pc, #152]	; (801c2f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xf4>)
 801c25c:	e031      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
            if( rng_dl == 0 || ret != 0 )
 801c25e:	b17c      	cbz	r4, 801c280 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
 801c260:	b970      	cbnz	r0, 801c280 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
            p++;
 801c262:	3501      	adds	r5, #1
        while( nb_pad-- > 0 )
 801c264:	454d      	cmp	r5, r9
 801c266:	d036      	beq.n	801c2d6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd6>
            int rng_dl = 100;
 801c268:	2464      	movs	r4, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 801c26a:	4642      	mov	r2, r8
 801c26c:	4629      	mov	r1, r5
 801c26e:	4638      	mov	r0, r7
 801c270:	47b0      	blx	r6
            } while( *p == 0 && --rng_dl && ret == 0 );
 801c272:	782b      	ldrb	r3, [r5, #0]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d1f2      	bne.n	801c25e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 801c278:	3c01      	subs	r4, #1
 801c27a:	d001      	beq.n	801c280 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x80>
 801c27c:	2800      	cmp	r0, #0
 801c27e:	d0f4      	beq.n	801c26a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x6a>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 801c280:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 801c284:	e01d      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
        *p++ = MBEDTLS_RSA_SIGN;
 801c286:	f10a 0002 	add.w	r0, sl, #2
 801c28a:	2301      	movs	r3, #1
 801c28c:	f88a 3001 	strb.w	r3, [sl, #1]
        while( nb_pad-- > 0 )
 801c290:	b142      	cbz	r2, 801c2a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa4>
 801c292:	1c91      	adds	r1, r2, #2
 801c294:	4451      	add	r1, sl
        *p++ = MBEDTLS_RSA_SIGN;
 801c296:	4603      	mov	r3, r0
            *p++ = 0xFF;
 801c298:	24ff      	movs	r4, #255	; 0xff
 801c29a:	f803 4b01 	strb.w	r4, [r3], #1
        while( nb_pad-- > 0 )
 801c29e:	428b      	cmp	r3, r1
 801c2a0:	d1fb      	bne.n	801c29a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x9a>
 801c2a2:	4410      	add	r0, r2
    *p++ = 0;
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
 801c2aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c2ae:	f00e f944 	bl	802a53a <memcpy>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 801c2b2:	f8cd a000 	str.w	sl, [sp]
 801c2b6:	4653      	mov	r3, sl
 801c2b8:	463a      	mov	r2, r7
 801c2ba:	4631      	mov	r1, r6
 801c2bc:	4658      	mov	r0, fp
 801c2be:	f7ff fca5 	bl	801bc0c <mbedtls_rsa_private>
}
 801c2c2:	b003      	add	sp, #12
 801c2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c2c8:	480a      	ldr	r0, [pc, #40]	; (801c2f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xf4>)
 801c2ca:	e7fa      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
 801c2cc:	4809      	ldr	r0, [pc, #36]	; (801c2f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xf4>)
 801c2ce:	e7f8      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c2d0:	4808      	ldr	r0, [pc, #32]	; (801c2f4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xf4>)
 801c2d2:	e7f6      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
        *p++ = MBEDTLS_RSA_CRYPT;
 801c2d4:	46a9      	mov	r9, r5
    *p++ = 0;
 801c2d6:	4648      	mov	r0, r9
 801c2d8:	2300      	movs	r3, #0
 801c2da:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy( p, input, ilen );
 801c2de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c2e2:	f00e f92a 	bl	802a53a <memcpy>
            ? mbedtls_rsa_public(  ctx, output, output )
 801c2e6:	4652      	mov	r2, sl
 801c2e8:	4651      	mov	r1, sl
 801c2ea:	4658      	mov	r0, fp
 801c2ec:	f7ff fc48 	bl	801bb80 <mbedtls_rsa_public>
 801c2f0:	e7e7      	b.n	801c2c2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc2>
 801c2f2:	bf00      	nop
 801c2f4:	ffffbf80 	.word	0xffffbf80

0801c2f8 <mbedtls_rsa_pkcs1_encrypt>:
{
 801c2f8:	b510      	push	{r4, lr}
 801c2fa:	b086      	sub	sp, #24
    switch( ctx->padding )
 801c2fc:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 801c300:	b124      	cbz	r4, 801c30c <mbedtls_rsa_pkcs1_encrypt+0x14>
 801c302:	2c01      	cmp	r4, #1
 801c304:	d00b      	beq.n	801c31e <mbedtls_rsa_pkcs1_encrypt+0x26>
 801c306:	480c      	ldr	r0, [pc, #48]	; (801c338 <mbedtls_rsa_pkcs1_encrypt+0x40>)
}
 801c308:	b006      	add	sp, #24
 801c30a:	bd10      	pop	{r4, pc}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 801c30c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c30e:	9402      	str	r4, [sp, #8]
 801c310:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c312:	9401      	str	r4, [sp, #4]
 801c314:	9c08      	ldr	r4, [sp, #32]
 801c316:	9400      	str	r4, [sp, #0]
 801c318:	f7ff ff72 	bl	801c200 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
 801c31c:	e7f4      	b.n	801c308 <mbedtls_rsa_pkcs1_encrypt+0x10>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 801c31e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c320:	9404      	str	r4, [sp, #16]
 801c322:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c324:	9403      	str	r4, [sp, #12]
 801c326:	9c08      	ldr	r4, [sp, #32]
 801c328:	9402      	str	r4, [sp, #8]
 801c32a:	2400      	movs	r4, #0
 801c32c:	9401      	str	r4, [sp, #4]
 801c32e:	9400      	str	r4, [sp, #0]
 801c330:	f7ff feb6 	bl	801c0a0 <mbedtls_rsa_rsaes_oaep_encrypt>
 801c334:	e7e8      	b.n	801c308 <mbedtls_rsa_pkcs1_encrypt+0x10>
 801c336:	bf00      	nop
 801c338:	ffffbf00 	.word	0xffffbf00

0801c33c <mbedtls_rsa_rsaes_oaep_decrypt>:
{
 801c33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c340:	b0d9      	sub	sp, #356	; 0x164
 801c342:	4604      	mov	r4, r0
 801c344:	9103      	str	r1, [sp, #12]
 801c346:	4690      	mov	r8, r2
 801c348:	461e      	mov	r6, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c34a:	2b01      	cmp	r3, #1
 801c34c:	d02d      	beq.n	801c3aa <mbedtls_rsa_rsaes_oaep_decrypt+0x6e>
    ilen = ctx->len;
 801c34e:	6867      	ldr	r7, [r4, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 801c350:	f1a7 0310 	sub.w	r3, r7, #16
 801c354:	2bf0      	cmp	r3, #240	; 0xf0
 801c356:	f200 80b3 	bhi.w	801c4c0 <mbedtls_rsa_rsaes_oaep_decrypt+0x184>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 801c35a:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 801c35e:	f7fc fd69 	bl	8018e34 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c362:	4683      	mov	fp, r0
 801c364:	2800      	cmp	r0, #0
 801c366:	f000 80ad 	beq.w	801c4c4 <mbedtls_rsa_rsaes_oaep_decrypt+0x188>
    hlen = mbedtls_md_get_size( md_info );
 801c36a:	f7fc fed9 	bl	8019120 <mbedtls_md_get_size>
 801c36e:	4605      	mov	r5, r0
    if( 2 * hlen + 2 > ilen )
 801c370:	f100 0901 	add.w	r9, r0, #1
 801c374:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801c378:	ebb7 0f49 	cmp.w	r7, r9, lsl #1
 801c37c:	f0c0 80a4 	bcc.w	801c4c8 <mbedtls_rsa_rsaes_oaep_decrypt+0x18c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801c380:	b9ce      	cbnz	r6, 801c3b6 <mbedtls_rsa_rsaes_oaep_decrypt+0x7a>
          ? mbedtls_rsa_public(  ctx, input, buf )
 801c382:	aa18      	add	r2, sp, #96	; 0x60
 801c384:	9965      	ldr	r1, [sp, #404]	; 0x194
 801c386:	4620      	mov	r0, r4
 801c388:	f7ff fbfa 	bl	801bb80 <mbedtls_rsa_public>
 801c38c:	4604      	mov	r4, r0
    if( ret != 0 )
 801c38e:	b1e4      	cbz	r4, 801c3ca <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801c390:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c394:	a818      	add	r0, sp, #96	; 0x60
 801c396:	f7fe fdd5 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( lhash, sizeof( lhash ) );
 801c39a:	2140      	movs	r1, #64	; 0x40
 801c39c:	a808      	add	r0, sp, #32
 801c39e:	f7fe fdd1 	bl	801af44 <mbedtls_platform_zeroize>
}
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	b059      	add	sp, #356	; 0x164
 801c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c3aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801c3ae:	2b01      	cmp	r3, #1
 801c3b0:	d0cd      	beq.n	801c34e <mbedtls_rsa_rsaes_oaep_decrypt+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c3b2:	4c46      	ldr	r4, [pc, #280]	; (801c4cc <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 801c3b4:	e7f5      	b.n	801c3a2 <mbedtls_rsa_rsaes_oaep_decrypt+0x66>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801c3b6:	ab18      	add	r3, sp, #96	; 0x60
 801c3b8:	9300      	str	r3, [sp, #0]
 801c3ba:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801c3bc:	4642      	mov	r2, r8
 801c3be:	9903      	ldr	r1, [sp, #12]
 801c3c0:	4620      	mov	r0, r4
 801c3c2:	f7ff fc23 	bl	801bc0c <mbedtls_rsa_private>
 801c3c6:	4604      	mov	r4, r0
 801c3c8:	e7e1      	b.n	801c38e <mbedtls_rsa_rsaes_oaep_decrypt+0x52>
    mbedtls_md_init( &md_ctx );
 801c3ca:	a805      	add	r0, sp, #20
 801c3cc:	f7fc fd54 	bl	8018e78 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 801c3d0:	2200      	movs	r2, #0
 801c3d2:	4659      	mov	r1, fp
 801c3d4:	a805      	add	r0, sp, #20
 801c3d6:	f7fc fd6d 	bl	8018eb4 <mbedtls_md_setup>
 801c3da:	4604      	mov	r4, r0
 801c3dc:	b9e8      	cbnz	r0, 801c41a <mbedtls_rsa_rsaes_oaep_decrypt+0xde>
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 801c3de:	ab18      	add	r3, sp, #96	; 0x60
 801c3e0:	4499      	add	r9, r3
 801c3e2:	1e7e      	subs	r6, r7, #1
 801c3e4:	1b76      	subs	r6, r6, r5
 801c3e6:	ab05      	add	r3, sp, #20
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	4633      	mov	r3, r6
 801c3ec:	464a      	mov	r2, r9
 801c3ee:	4629      	mov	r1, r5
 801c3f0:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 801c3f4:	f7ff f8ba 	bl	801b56c <mgf_mask>
 801c3f8:	4604      	mov	r4, r0
 801c3fa:	b950      	cbnz	r0, 801c412 <mbedtls_rsa_rsaes_oaep_decrypt+0xd6>
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 801c3fc:	ab05      	add	r3, sp, #20
 801c3fe:	9300      	str	r3, [sp, #0]
 801c400:	462b      	mov	r3, r5
 801c402:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 801c406:	4631      	mov	r1, r6
 801c408:	4648      	mov	r0, r9
 801c40a:	f7ff f8af 	bl	801b56c <mgf_mask>
                          &md_ctx ) ) != 0 ||
 801c40e:	4604      	mov	r4, r0
 801c410:	b138      	cbz	r0, 801c422 <mbedtls_rsa_rsaes_oaep_decrypt+0xe6>
        mbedtls_md_free( &md_ctx );
 801c412:	a805      	add	r0, sp, #20
 801c414:	f7fc fd35 	bl	8018e82 <mbedtls_md_free>
        goto cleanup;
 801c418:	e7ba      	b.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
        mbedtls_md_free( &md_ctx );
 801c41a:	a805      	add	r0, sp, #20
 801c41c:	f7fc fd31 	bl	8018e82 <mbedtls_md_free>
        goto cleanup;
 801c420:	e7b6      	b.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
    mbedtls_md_free( &md_ctx );
 801c422:	a805      	add	r0, sp, #20
 801c424:	f7fc fd2d 	bl	8018e82 <mbedtls_md_free>
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 801c428:	ab08      	add	r3, sp, #32
 801c42a:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 801c42c:	9962      	ldr	r1, [sp, #392]	; 0x188
 801c42e:	4658      	mov	r0, fp
 801c430:	f7fc fd90 	bl	8018f54 <mbedtls_md>
 801c434:	4604      	mov	r4, r0
 801c436:	2800      	cmp	r0, #0
 801c438:	d1aa      	bne.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
    bad |= *p++; /* First byte must be 0 */
 801c43a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
    p += hlen; /* Skip seed */
 801c43e:	f10d 0361 	add.w	r3, sp, #97	; 0x61
 801c442:	195a      	adds	r2, r3, r5
    for( i = 0; i < hlen; i++ )
 801c444:	b395      	cbz	r5, 801c4ac <mbedtls_rsa_rsaes_oaep_decrypt+0x170>
 801c446:	a908      	add	r1, sp, #32
 801c448:	4415      	add	r5, r2
        bad |= lhash[i] ^ *p++;
 801c44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c44e:	f812 0b01 	ldrb.w	r0, [r2], #1
 801c452:	4043      	eors	r3, r0
 801c454:	431e      	orrs	r6, r3
    for( i = 0; i < hlen; i++ )
 801c456:	42aa      	cmp	r2, r5
 801c458:	d1f7      	bne.n	801c44a <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 801c45a:	ebb7 0a0a 	subs.w	sl, r7, sl
 801c45e:	d013      	beq.n	801c488 <mbedtls_rsa_rsaes_oaep_decrypt+0x14c>
 801c460:	1e69      	subs	r1, r5, #1
 801c462:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c466:	eb05 000a 	add.w	r0, r5, sl
    pad_done = 0;
 801c46a:	f04f 0a00 	mov.w	sl, #0
    pad_len = 0;
 801c46e:	4652      	mov	r2, sl
        pad_done |= p[i];
 801c470:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c474:	431a      	orrs	r2, r3
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801c476:	4253      	negs	r3, r2
 801c478:	4313      	orrs	r3, r2
 801c47a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801c47e:	f083 0301 	eor.w	r3, r3, #1
 801c482:	449a      	add	sl, r3
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 801c484:	4281      	cmp	r1, r0
 801c486:	d1f3      	bne.n	801c470 <mbedtls_rsa_rsaes_oaep_decrypt+0x134>
    bad |= *p++ ^ 0x01;
 801c488:	f815 300a 	ldrb.w	r3, [r5, sl]
 801c48c:	f083 0301 	eor.w	r3, r3, #1
    if( bad != 0 )
 801c490:	4333      	orrs	r3, r6
 801c492:	d113      	bne.n	801c4bc <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    bad |= *p++ ^ 0x01;
 801c494:	f10a 0a01 	add.w	sl, sl, #1
 801c498:	eb05 010a 	add.w	r1, r5, sl
    if( ilen - ( p - buf ) > output_max_len )
 801c49c:	aa18      	add	r2, sp, #96	; 0x60
 801c49e:	1a8a      	subs	r2, r1, r2
 801c4a0:	1aba      	subs	r2, r7, r2
 801c4a2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801c4a4:	429a      	cmp	r2, r3
 801c4a6:	d903      	bls.n	801c4b0 <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 801c4a8:	4c09      	ldr	r4, [pc, #36]	; (801c4d0 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>)
 801c4aa:	e771      	b.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
    p += hlen; /* Skip seed */
 801c4ac:	4615      	mov	r5, r2
 801c4ae:	e7d4      	b.n	801c45a <mbedtls_rsa_rsaes_oaep_decrypt+0x11e>
    *olen = ilen - (p - buf);
 801c4b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801c4b2:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 801c4b4:	9866      	ldr	r0, [sp, #408]	; 0x198
 801c4b6:	f00e f840 	bl	802a53a <memcpy>
    ret = 0;
 801c4ba:	e769      	b.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801c4bc:	4c05      	ldr	r4, [pc, #20]	; (801c4d4 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>)
 801c4be:	e767      	b.n	801c390 <mbedtls_rsa_rsaes_oaep_decrypt+0x54>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c4c0:	4c02      	ldr	r4, [pc, #8]	; (801c4cc <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 801c4c2:	e76e      	b.n	801c3a2 <mbedtls_rsa_rsaes_oaep_decrypt+0x66>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c4c4:	4c01      	ldr	r4, [pc, #4]	; (801c4cc <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 801c4c6:	e76c      	b.n	801c3a2 <mbedtls_rsa_rsaes_oaep_decrypt+0x66>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c4c8:	4c00      	ldr	r4, [pc, #0]	; (801c4cc <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 801c4ca:	e76a      	b.n	801c3a2 <mbedtls_rsa_rsaes_oaep_decrypt+0x66>
 801c4cc:	ffffbf80 	.word	0xffffbf80
 801c4d0:	ffffbc00 	.word	0xffffbc00
 801c4d4:	ffffbf00 	.word	0xffffbf00

0801c4d8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
{
 801c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4dc:	b0c5      	sub	sp, #276	; 0x114
    ilen = ctx->len;
 801c4de:	6844      	ldr	r4, [r0, #4]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801c4e0:	2b01      	cmp	r3, #1
 801c4e2:	d07f      	beq.n	801c5e4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>
    if( ilen < 16 || ilen > sizeof( buf ) )
 801c4e4:	f1a4 0510 	sub.w	r5, r4, #16
 801c4e8:	2df0      	cmp	r5, #240	; 0xf0
 801c4ea:	f200 80dd 	bhi.w	801c6a8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1d0>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	f040 80e0 	bne.w	801c6b4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1dc>
          ? mbedtls_rsa_public(  ctx, input, buf )
 801c4f4:	aa04      	add	r2, sp, #16
 801c4f6:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801c4f8:	f7ff fb42 	bl	801bb80 <mbedtls_rsa_public>
    if( ret != 0 )
 801c4fc:	9003      	str	r0, [sp, #12]
 801c4fe:	2800      	cmp	r0, #0
 801c500:	f040 80c6 	bne.w	801c690 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b8>
    bad |= buf[0];
 801c504:	f89d 7010 	ldrb.w	r7, [sp, #16]
        bad |= buf[1] ^ MBEDTLS_RSA_SIGN;
 801c508:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801c50c:	f083 0301 	eor.w	r3, r3, #1
 801c510:	431f      	orrs	r7, r3
        for( i = 2; i < ilen; i++ )
 801c512:	f10d 0611 	add.w	r6, sp, #17
    unsigned char pad_done = 0;
 801c516:	2100      	movs	r1, #0
    size_t pad_count = 0;
 801c518:	460d      	mov	r5, r1
        for( i = 2; i < ilen; i++ )
 801c51a:	f10d 0c10 	add.w	ip, sp, #16
            pad_done |= if_int( buf[i], 0, 1 );
 801c51e:	4632      	mov	r2, r6
 801c520:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801c524:	2b00      	cmp	r3, #0
 801c526:	bf08      	it	eq
 801c528:	f041 0101 	orreq.w	r1, r1, #1
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c52c:	4248      	negs	r0, r1
 801c52e:	4308      	orrs	r0, r1
            pad_count += if_int( pad_done, 0, 1 );
 801c530:	2800      	cmp	r0, #0
 801c532:	bfa8      	it	ge
 801c534:	3501      	addge	r5, #1
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 801c536:	43db      	mvns	r3, r3
 801c538:	b2db      	uxtb	r3, r3
    return( ( mask & if1 ) | (~mask & if0 ) );
 801c53a:	ea23 73e0 	bic.w	r3, r3, r0, asr #31
            bad |= if_int( pad_done, 0, buf[i] ^ 0xFF );
 801c53e:	431f      	orrs	r7, r3
        for( i = 2; i < ilen; i++ )
 801c540:	1c93      	adds	r3, r2, #2
 801c542:	eba3 030c 	sub.w	r3, r3, ip
 801c546:	429c      	cmp	r4, r3
 801c548:	d8e9      	bhi.n	801c51e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x46>
    plaintext_max_size = ( output_max_len > ilen - 11 ?
 801c54a:	f1a4 020b 	sub.w	r2, r4, #11
 801c54e:	9b51      	ldr	r3, [sp, #324]	; 0x144
 801c550:	429a      	cmp	r2, r3
 801c552:	bf28      	it	cs
 801c554:	461a      	movcs	r2, r3
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 801c556:	f1a5 0608 	sub.w	r6, r5, #8
 801c55a:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c55e:	424e      	negs	r6, r1
 801c560:	430e      	orrs	r6, r1
 801c562:	17f6      	asrs	r6, r6, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 801c564:	3601      	adds	r6, #1
    bad |= size_greater_than( 8, pad_count );
 801c566:	433e      	orrs	r6, r7
                             (unsigned) ( ilen - pad_count - 3 ) );
 801c568:	f1a4 0803 	sub.w	r8, r4, #3
 801c56c:	eba8 0505 	sub.w	r5, r8, r5
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c570:	4273      	negs	r3, r6
 801c572:	ea43 0106 	orr.w	r1, r3, r6
    return( ( mask & if1 ) | (~mask & if0 ) );
 801c576:	ea85 0802 	eor.w	r8, r5, r2
 801c57a:	ea08 78e1 	and.w	r8, r8, r1, asr #31
 801c57e:	ea88 0805 	eor.w	r8, r8, r5
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 801c582:	eba2 0708 	sub.w	r7, r2, r8
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c586:	17fd      	asrs	r5, r7, #31
    return( ( mask & if1 ) | (~mask & if0 ) );
 801c588:	f405 4088 	and.w	r0, r5, #17408	; 0x4400
 801c58c:	f480 4382 	eor.w	r3, r0, #16640	; 0x4100
 801c590:	ea03 73e1 	and.w	r3, r3, r1, asr #31
 801c594:	4043      	eors	r3, r0
    ret = - (int) if_int( bad, - MBEDTLS_ERR_RSA_INVALID_PADDING,
 801c596:	425b      	negs	r3, r3
 801c598:	9303      	str	r3, [sp, #12]
    bad = all_or_nothing_int( bad | output_too_large );
 801c59a:	ea46 77d7 	orr.w	r7, r6, r7, lsr #31
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c59e:	427e      	negs	r6, r7
 801c5a0:	433e      	orrs	r6, r7
 801c5a2:	17f6      	asrs	r6, r6, #31
    for( i = 11; i < ilen; i++ )
 801c5a4:	f10d 011a 	add.w	r1, sp, #26
        buf[i] &= ~bad;
 801c5a8:	43f6      	mvns	r6, r6
    for( i = 11; i < ilen; i++ )
 801c5aa:	af04      	add	r7, sp, #16
        buf[i] &= ~bad;
 801c5ac:	460b      	mov	r3, r1
 801c5ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c5b2:	4030      	ands	r0, r6
 801c5b4:	7008      	strb	r0, [r1, #0]
    for( i = 11; i < ilen; i++ )
 801c5b6:	3302      	adds	r3, #2
 801c5b8:	1bdb      	subs	r3, r3, r7
 801c5ba:	429c      	cmp	r4, r3
 801c5bc:	d8f6      	bhi.n	801c5ac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    return( ( mask & if1 ) | (~mask & if0 ) );
 801c5be:	2d00      	cmp	r5, #0
 801c5c0:	bf18      	it	ne
 801c5c2:	4690      	movne	r8, r2
    mem_move_to_left( buf + ilen - plaintext_max_size,
 801c5c4:	1aa1      	subs	r1, r4, r2
 801c5c6:	ab04      	add	r3, sp, #16
 801c5c8:	4419      	add	r1, r3
    if( total == 0 )
 801c5ca:	2a00      	cmp	r2, #0
 801c5cc:	d05a      	beq.n	801c684 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
        for( n = 0; n < total - 1; n++ )
 801c5ce:	f102 3aff 	add.w	sl, r2, #4294967295
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 801c5d2:	eb01 0e0a 	add.w	lr, r1, sl
 801c5d6:	f1c8 0500 	rsb	r5, r8, #0
 801c5da:	eba2 0b08 	sub.w	fp, r2, r8
 801c5de:	46f1      	mov	r9, lr
 801c5e0:	4656      	mov	r6, sl
 801c5e2:	e03d      	b.n	801c660 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x188>
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801c5e4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d15a      	bne.n	801c6a2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ca>
    if( ilen < 16 || ilen > sizeof( buf ) )
 801c5ec:	f1a4 0310 	sub.w	r3, r4, #16
 801c5f0:	2bf0      	cmp	r3, #240	; 0xf0
 801c5f2:	d85c      	bhi.n	801c6ae <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1d6>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801c5f4:	ab04      	add	r3, sp, #16
 801c5f6:	9300      	str	r3, [sp, #0]
 801c5f8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 801c5fa:	f7ff fb07 	bl	801bc0c <mbedtls_rsa_private>
    if( ret != 0 )
 801c5fe:	9003      	str	r0, [sp, #12]
 801c600:	2800      	cmp	r0, #0
 801c602:	d145      	bne.n	801c690 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b8>
        bad |= buf[1] ^ MBEDTLS_RSA_CRYPT;
 801c604:	f89d 7011 	ldrb.w	r7, [sp, #17]
 801c608:	f087 0702 	eor.w	r7, r7, #2
 801c60c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c610:	431f      	orrs	r7, r3
        for( i = 2; i < ilen; i++ )
 801c612:	f10d 0011 	add.w	r0, sp, #17
    unsigned char pad_done = 0;
 801c616:	2100      	movs	r1, #0
    size_t pad_count = 0;
 801c618:	460d      	mov	r5, r1
        for( i = 2; i < ilen; i++ )
 801c61a:	ae04      	add	r6, sp, #16
            pad_done  |= ((buf[i] | (unsigned char)-buf[i]) >> 7) ^ 1;
 801c61c:	4602      	mov	r2, r0
 801c61e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801c622:	f1c3 0c00 	rsb	ip, r3, #0
 801c626:	ea43 030c 	orr.w	r3, r3, ip
 801c62a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801c62e:	f083 0301 	eor.w	r3, r3, #1
 801c632:	4319      	orrs	r1, r3
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 801c634:	424b      	negs	r3, r1
 801c636:	430b      	orrs	r3, r1
 801c638:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801c63c:	f083 0301 	eor.w	r3, r3, #1
 801c640:	441d      	add	r5, r3
        for( i = 2; i < ilen; i++ )
 801c642:	3202      	adds	r2, #2
 801c644:	1b92      	subs	r2, r2, r6
 801c646:	4294      	cmp	r4, r2
 801c648:	d8e8      	bhi.n	801c61c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x144>
 801c64a:	e77e      	b.n	801c54a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x72>
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 801c64c:	f89e 3000 	ldrb.w	r3, [lr]
 801c650:	b2db      	uxtb	r3, r3
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c652:	4240      	negs	r0, r0
        buf[total-1] = if_int( no_op, buf[total-1], 0 );
 801c654:	4018      	ands	r0, r3
 801c656:	f88e 0000 	strb.w	r0, [lr]
    for( i = 0; i < total; i++ )
 801c65a:	3501      	adds	r5, #1
 801c65c:	455d      	cmp	r5, fp
 801c65e:	d011      	beq.n	801c684 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1ac>
    return( ( max - size ) >> ( sizeof( size_t ) * 8 - 1 ) );
 801c660:	0fe8      	lsrs	r0, r5, #31
        for( n = 0; n < total - 1; n++ )
 801c662:	2e00      	cmp	r6, #0
 801c664:	d0f2      	beq.n	801c64c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
 801c666:	f1c0 0c00 	rsb	ip, r0, #0
 801c66a:	460b      	mov	r3, r1
            unsigned char current = buf[n];
 801c66c:	461f      	mov	r7, r3
 801c66e:	781c      	ldrb	r4, [r3, #0]
            unsigned char next = buf[n+1];
 801c670:	f813 af01 	ldrb.w	sl, [r3, #1]!
            buf[n] = if_int( no_op, current, next );
 801c674:	f1bc 0f00 	cmp.w	ip, #0
 801c678:	bf08      	it	eq
 801c67a:	4654      	moveq	r4, sl
 801c67c:	703c      	strb	r4, [r7, #0]
        for( n = 0; n < total - 1; n++ )
 801c67e:	4599      	cmp	r9, r3
 801c680:	d1f4      	bne.n	801c66c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x194>
 801c682:	e7e3      	b.n	801c64c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x174>
    memcpy( output, buf + ilen - plaintext_max_size, plaintext_max_size );
 801c684:	9850      	ldr	r0, [sp, #320]	; 0x140
 801c686:	f00d ff58 	bl	802a53a <memcpy>
    *olen = plaintext_size;
 801c68a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 801c68c:	f8c3 8000 	str.w	r8, [r3]
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 801c690:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c694:	a804      	add	r0, sp, #16
 801c696:	f7fe fc55 	bl	801af44 <mbedtls_platform_zeroize>
}
 801c69a:	9803      	ldr	r0, [sp, #12]
 801c69c:	b045      	add	sp, #276	; 0x114
 801c69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c6a2:	4b0a      	ldr	r3, [pc, #40]	; (801c6cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1f4>)
 801c6a4:	9303      	str	r3, [sp, #12]
 801c6a6:	e7f8      	b.n	801c69a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1c2>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c6a8:	4b08      	ldr	r3, [pc, #32]	; (801c6cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1f4>)
 801c6aa:	9303      	str	r3, [sp, #12]
 801c6ac:	e7f5      	b.n	801c69a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1c2>
 801c6ae:	4b07      	ldr	r3, [pc, #28]	; (801c6cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1f4>)
 801c6b0:	9303      	str	r3, [sp, #12]
 801c6b2:	e7f2      	b.n	801c69a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1c2>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801c6b4:	ab04      	add	r3, sp, #16
 801c6b6:	9300      	str	r3, [sp, #0]
 801c6b8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 801c6ba:	f7ff faa7 	bl	801bc0c <mbedtls_rsa_private>
    if( ret != 0 )
 801c6be:	9003      	str	r0, [sp, #12]
 801c6c0:	2800      	cmp	r0, #0
 801c6c2:	d1e5      	bne.n	801c690 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1b8>
    bad |= buf[0];
 801c6c4:	f89d 7010 	ldrb.w	r7, [sp, #16]
    if( mode == MBEDTLS_RSA_PRIVATE )
 801c6c8:	e71e      	b.n	801c508 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x30>
 801c6ca:	bf00      	nop
 801c6cc:	ffffbf80 	.word	0xffffbf80

0801c6d0 <mbedtls_rsa_pkcs1_decrypt>:
{
 801c6d0:	b510      	push	{r4, lr}
 801c6d2:	b086      	sub	sp, #24
    switch( ctx->padding )
 801c6d4:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 801c6d8:	b124      	cbz	r4, 801c6e4 <mbedtls_rsa_pkcs1_decrypt+0x14>
 801c6da:	2c01      	cmp	r4, #1
 801c6dc:	d00d      	beq.n	801c6fa <mbedtls_rsa_pkcs1_decrypt+0x2a>
 801c6de:	480e      	ldr	r0, [pc, #56]	; (801c718 <mbedtls_rsa_pkcs1_decrypt+0x48>)
}
 801c6e0:	b006      	add	sp, #24
 801c6e2:	bd10      	pop	{r4, pc}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 801c6e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c6e6:	9403      	str	r4, [sp, #12]
 801c6e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c6ea:	9402      	str	r4, [sp, #8]
 801c6ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c6ee:	9401      	str	r4, [sp, #4]
 801c6f0:	9c08      	ldr	r4, [sp, #32]
 801c6f2:	9400      	str	r4, [sp, #0]
 801c6f4:	f7ff fef0 	bl	801c4d8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
 801c6f8:	e7f2      	b.n	801c6e0 <mbedtls_rsa_pkcs1_decrypt+0x10>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 801c6fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c6fc:	9405      	str	r4, [sp, #20]
 801c6fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c700:	9404      	str	r4, [sp, #16]
 801c702:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c704:	9403      	str	r4, [sp, #12]
 801c706:	9c08      	ldr	r4, [sp, #32]
 801c708:	9402      	str	r4, [sp, #8]
 801c70a:	2400      	movs	r4, #0
 801c70c:	9401      	str	r4, [sp, #4]
 801c70e:	9400      	str	r4, [sp, #0]
 801c710:	f7ff fe14 	bl	801c33c <mbedtls_rsa_rsaes_oaep_decrypt>
 801c714:	e7e4      	b.n	801c6e0 <mbedtls_rsa_pkcs1_decrypt+0x10>
 801c716:	bf00      	nop
 801c718:	ffffbf00 	.word	0xffffbf00

0801c71c <mbedtls_rsa_rsassa_pss_sign>:
{
 801c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c720:	b09d      	sub	sp, #116	; 0x74
 801c722:	4605      	mov	r5, r0
 801c724:	460f      	mov	r7, r1
 801c726:	9203      	str	r2, [sp, #12]
 801c728:	9304      	str	r3, [sp, #16]
 801c72a:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 801c72e:	f8dd 90a4 	ldr.w	r9, [sp, #164]	; 0xa4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c732:	2b01      	cmp	r3, #1
 801c734:	d034      	beq.n	801c7a0 <mbedtls_rsa_rsassa_pss_sign+0x84>
    if( f_rng == NULL )
 801c736:	2f00      	cmp	r7, #0
 801c738:	f000 80c7 	beq.w	801c8ca <mbedtls_rsa_rsassa_pss_sign+0x1ae>
    olen = ctx->len;
 801c73c:	686e      	ldr	r6, [r5, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 801c73e:	b138      	cbz	r0, 801c750 <mbedtls_rsa_rsassa_pss_sign+0x34>
        md_info = mbedtls_md_info_from_type( md_alg );
 801c740:	f7fc fb78 	bl	8018e34 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801c744:	2800      	cmp	r0, #0
 801c746:	f000 80c3 	beq.w	801c8d0 <mbedtls_rsa_rsassa_pss_sign+0x1b4>
        hashlen = mbedtls_md_get_size( md_info );
 801c74a:	f7fc fce9 	bl	8019120 <mbedtls_md_get_size>
 801c74e:	9027      	str	r0, [sp, #156]	; 0x9c
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 801c750:	f895 00a8 	ldrb.w	r0, [r5, #168]	; 0xa8
 801c754:	f7fc fb6e 	bl	8018e34 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c758:	4680      	mov	r8, r0
 801c75a:	2800      	cmp	r0, #0
 801c75c:	f000 80bb 	beq.w	801c8d6 <mbedtls_rsa_rsassa_pss_sign+0x1ba>
    hlen = mbedtls_md_get_size( md_info );
 801c760:	f7fc fcde 	bl	8019120 <mbedtls_md_get_size>
 801c764:	4604      	mov	r4, r0
    if( olen < hlen + min_slen + 2 )
 801c766:	0043      	lsls	r3, r0, #1
 801c768:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 801c76c:	f0c0 80b6 	bcc.w	801c8dc <mbedtls_rsa_rsassa_pss_sign+0x1c0>
    else if( olen >= hlen + hlen + 2 )
 801c770:	3302      	adds	r3, #2
 801c772:	42b3      	cmp	r3, r6
        slen = olen - hlen - 2;
 801c774:	bf86      	itte	hi
 801c776:	f1a6 0a02 	subhi.w	sl, r6, #2
 801c77a:	ebaa 0a00 	subhi.w	sl, sl, r0
        slen = hlen;
 801c77e:	4682      	movls	sl, r0
    memset( sig, 0, olen );
 801c780:	4632      	mov	r2, r6
 801c782:	2100      	movs	r1, #0
 801c784:	4648      	mov	r0, r9
 801c786:	f00d ff00 	bl	802a58a <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 801c78a:	4652      	mov	r2, sl
 801c78c:	a90c      	add	r1, sp, #48	; 0x30
 801c78e:	9803      	ldr	r0, [sp, #12]
 801c790:	47b8      	blx	r7
 801c792:	b160      	cbz	r0, 801c7ae <mbedtls_rsa_rsassa_pss_sign+0x92>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 801c794:	f5a0 4889 	sub.w	r8, r0, #17536	; 0x4480
}
 801c798:	4640      	mov	r0, r8
 801c79a:	b01d      	add	sp, #116	; 0x74
 801c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801c7a0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 801c7a4:	2b01      	cmp	r3, #1
 801c7a6:	d0c6      	beq.n	801c736 <mbedtls_rsa_rsassa_pss_sign+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c7a8:	f8df 8138 	ldr.w	r8, [pc, #312]	; 801c8e4 <mbedtls_rsa_rsassa_pss_sign+0x1c8>
 801c7ac:	e7f4      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801c7ae:	f105 0308 	add.w	r3, r5, #8
 801c7b2:	9305      	str	r3, [sp, #20]
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	f7f6 f86a 	bl	801288e <mbedtls_mpi_bitlen>
 801c7ba:	9006      	str	r0, [sp, #24]
    p += olen - hlen - slen - 2;
 801c7bc:	1b33      	subs	r3, r6, r4
 801c7be:	9307      	str	r3, [sp, #28]
 801c7c0:	3b02      	subs	r3, #2
 801c7c2:	eba3 030a 	sub.w	r3, r3, sl
 801c7c6:	eb09 0b03 	add.w	fp, r9, r3
    *p++ = 0x01;
 801c7ca:	f10b 0b01 	add.w	fp, fp, #1
 801c7ce:	2201      	movs	r2, #1
 801c7d0:	f809 2003 	strb.w	r2, [r9, r3]
    memcpy( p, salt, slen );
 801c7d4:	4652      	mov	r2, sl
 801c7d6:	a90c      	add	r1, sp, #48	; 0x30
 801c7d8:	4658      	mov	r0, fp
 801c7da:	f00d feae 	bl	802a53a <memcpy>
    mbedtls_md_init( &md_ctx );
 801c7de:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 801c7e2:	4660      	mov	r0, ip
 801c7e4:	f7fc fb48 	bl	8018e78 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	4641      	mov	r1, r8
 801c7ec:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 801c7f0:	4660      	mov	r0, ip
 801c7f2:	f7fc fb5f 	bl	8018eb4 <mbedtls_md_setup>
 801c7f6:	4680      	mov	r8, r0
 801c7f8:	b118      	cbz	r0, 801c802 <mbedtls_rsa_rsassa_pss_sign+0xe6>
    mbedtls_md_free( &md_ctx );
 801c7fa:	a809      	add	r0, sp, #36	; 0x24
 801c7fc:	f7fc fb41 	bl	8018e82 <mbedtls_md_free>
    if( ret != 0 )
 801c800:	e7ca      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 801c802:	a809      	add	r0, sp, #36	; 0x24
 801c804:	f7fc fb7a 	bl	8018efc <mbedtls_md_starts>
 801c808:	4680      	mov	r8, r0
 801c80a:	2800      	cmp	r0, #0
 801c80c:	d1f5      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    p += slen;
 801c80e:	44d3      	add	fp, sl
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 801c810:	2208      	movs	r2, #8
 801c812:	4659      	mov	r1, fp
 801c814:	a809      	add	r0, sp, #36	; 0x24
 801c816:	f7fc fb7f 	bl	8018f18 <mbedtls_md_update>
 801c81a:	4680      	mov	r8, r0
 801c81c:	2800      	cmp	r0, #0
 801c81e:	d1ec      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 801c820:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c822:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c824:	a809      	add	r0, sp, #36	; 0x24
 801c826:	f7fc fb77 	bl	8018f18 <mbedtls_md_update>
 801c82a:	4680      	mov	r8, r0
 801c82c:	2800      	cmp	r0, #0
 801c82e:	d1e4      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 801c830:	4652      	mov	r2, sl
 801c832:	a90c      	add	r1, sp, #48	; 0x30
 801c834:	a809      	add	r0, sp, #36	; 0x24
 801c836:	f7fc fb6f 	bl	8018f18 <mbedtls_md_update>
 801c83a:	4680      	mov	r8, r0
 801c83c:	2800      	cmp	r0, #0
 801c83e:	d1dc      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 801c840:	4659      	mov	r1, fp
 801c842:	a809      	add	r0, sp, #36	; 0x24
 801c844:	f7fc fb78 	bl	8018f38 <mbedtls_md_finish>
 801c848:	4680      	mov	r8, r0
 801c84a:	2800      	cmp	r0, #0
 801c84c:	d1d5      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801c84e:	9906      	ldr	r1, [sp, #24]
 801c850:	1e4b      	subs	r3, r1, #1
    if( msb % 8 == 0 )
 801c852:	f013 0f07 	tst.w	r3, #7
 801c856:	bf0c      	ite	eq
 801c858:	2001      	moveq	r0, #1
 801c85a:	2000      	movne	r0, #0
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 801c85c:	9a07      	ldr	r2, [sp, #28]
 801c85e:	1e51      	subs	r1, r2, #1
 801c860:	ab09      	add	r3, sp, #36	; 0x24
 801c862:	9300      	str	r3, [sp, #0]
 801c864:	4623      	mov	r3, r4
 801c866:	465a      	mov	r2, fp
 801c868:	1a09      	subs	r1, r1, r0
 801c86a:	4448      	add	r0, r9
 801c86c:	f7fe fe7e 	bl	801b56c <mgf_mask>
 801c870:	4680      	mov	r8, r0
 801c872:	2800      	cmp	r0, #0
 801c874:	d1c1      	bne.n	801c7fa <mbedtls_rsa_rsassa_pss_sign+0xde>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801c876:	9805      	ldr	r0, [sp, #20]
 801c878:	f7f6 f809 	bl	801288e <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 801c87c:	ebc0 06c6 	rsb	r6, r0, r6, lsl #3
 801c880:	1c70      	adds	r0, r6, #1
 801c882:	26ff      	movs	r6, #255	; 0xff
 801c884:	4106      	asrs	r6, r0
 801c886:	f899 3000 	ldrb.w	r3, [r9]
 801c88a:	401e      	ands	r6, r3
 801c88c:	f889 6000 	strb.w	r6, [r9]
    *p++ = 0xBC;
 801c890:	23bc      	movs	r3, #188	; 0xbc
 801c892:	f80b 3004 	strb.w	r3, [fp, r4]
    mbedtls_platform_zeroize( salt, sizeof( salt ) );
 801c896:	2140      	movs	r1, #64	; 0x40
 801c898:	a80c      	add	r0, sp, #48	; 0x30
 801c89a:	f7fe fb53 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_md_free( &md_ctx );
 801c89e:	a809      	add	r0, sp, #36	; 0x24
 801c8a0:	f7fc faef 	bl	8018e82 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 801c8a4:	9b04      	ldr	r3, [sp, #16]
 801c8a6:	b933      	cbnz	r3, 801c8b6 <mbedtls_rsa_rsassa_pss_sign+0x19a>
            ? mbedtls_rsa_public(  ctx, sig, sig )
 801c8a8:	464a      	mov	r2, r9
 801c8aa:	4649      	mov	r1, r9
 801c8ac:	4628      	mov	r0, r5
 801c8ae:	f7ff f967 	bl	801bb80 <mbedtls_rsa_public>
 801c8b2:	4680      	mov	r8, r0
 801c8b4:	e770      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 801c8b6:	f8cd 9000 	str.w	r9, [sp]
 801c8ba:	464b      	mov	r3, r9
 801c8bc:	9a03      	ldr	r2, [sp, #12]
 801c8be:	4639      	mov	r1, r7
 801c8c0:	4628      	mov	r0, r5
 801c8c2:	f7ff f9a3 	bl	801bc0c <mbedtls_rsa_private>
 801c8c6:	4680      	mov	r8, r0
 801c8c8:	e766      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c8ca:	f8df 8018 	ldr.w	r8, [pc, #24]	; 801c8e4 <mbedtls_rsa_rsassa_pss_sign+0x1c8>
 801c8ce:	e763      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c8d0:	f8df 8010 	ldr.w	r8, [pc, #16]	; 801c8e4 <mbedtls_rsa_rsassa_pss_sign+0x1c8>
 801c8d4:	e760      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c8d6:	f8df 800c 	ldr.w	r8, [pc, #12]	; 801c8e4 <mbedtls_rsa_rsassa_pss_sign+0x1c8>
 801c8da:	e75d      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c8dc:	f8df 8004 	ldr.w	r8, [pc, #4]	; 801c8e4 <mbedtls_rsa_rsassa_pss_sign+0x1c8>
 801c8e0:	e75a      	b.n	801c798 <mbedtls_rsa_rsassa_pss_sign+0x7c>
 801c8e2:	bf00      	nop
 801c8e4:	ffffbf80 	.word	0xffffbf80

0801c8e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 801c8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8ec:	b082      	sub	sp, #8
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	460e      	mov	r6, r1
 801c8f2:	4692      	mov	sl, r2
 801c8f4:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 801c8f8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801c8fc:	2b01      	cmp	r3, #1
 801c8fe:	d12c      	bne.n	801c95a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x72>
 801c900:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801c904:	2b00      	cmp	r3, #0
 801c906:	d163      	bne.n	801c9d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xe8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 801c908:	f8cd 8000 	str.w	r8, [sp]
 801c90c:	6863      	ldr	r3, [r4, #4]
 801c90e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c912:	f7fe fe81 	bl	801b618 <rsa_rsassa_pkcs1_v15_encode>
 801c916:	4607      	mov	r7, r0
 801c918:	b9d8      	cbnz	r0, 801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = mbedtls_calloc( 1, ctx->len );
 801c91a:	6861      	ldr	r1, [r4, #4]
 801c91c:	2001      	movs	r0, #1
 801c91e:	f00c fab5 	bl	8028e8c <mbedtls_calloc>
    if( sig_try == NULL )
 801c922:	4605      	mov	r5, r0
 801c924:	2800      	cmp	r0, #0
 801c926:	d055      	beq.n	801c9d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xec>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = mbedtls_calloc( 1, ctx->len );
 801c928:	6861      	ldr	r1, [r4, #4]
 801c92a:	2001      	movs	r0, #1
 801c92c:	f00c faae 	bl	8028e8c <mbedtls_calloc>
    if( verif == NULL )
 801c930:	4681      	mov	r9, r0
 801c932:	b330      	cbz	r0, 801c982 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
    {
        mbedtls_free( sig_try );
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 801c934:	9500      	str	r5, [sp, #0]
 801c936:	4643      	mov	r3, r8
 801c938:	4652      	mov	r2, sl
 801c93a:	4631      	mov	r1, r6
 801c93c:	4620      	mov	r0, r4
 801c93e:	f7ff f965 	bl	801bc0c <mbedtls_rsa_private>
 801c942:	4607      	mov	r7, r0
 801c944:	b318      	cbz	r0, 801c98e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 801c946:	4628      	mov	r0, r5
 801c948:	f00c faae 	bl	8028ea8 <mbedtls_free>
    mbedtls_free( verif );
 801c94c:	4648      	mov	r0, r9
 801c94e:	f00c faab 	bl	8028ea8 <mbedtls_free>

    return( ret );
}
 801c952:	4638      	mov	r0, r7
 801c954:	b002      	add	sp, #8
 801c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c95a:	461d      	mov	r5, r3
    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 801c95c:	f8cd 8000 	str.w	r8, [sp]
 801c960:	6863      	ldr	r3, [r4, #4]
 801c962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c966:	f7fe fe57 	bl	801b618 <rsa_rsassa_pkcs1_v15_encode>
 801c96a:	4607      	mov	r7, r0
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d1f0      	bne.n	801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
    if( mode == MBEDTLS_RSA_PUBLIC )
 801c970:	2d00      	cmp	r5, #0
 801c972:	d1d2      	bne.n	801c91a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 801c974:	4642      	mov	r2, r8
 801c976:	4641      	mov	r1, r8
 801c978:	4620      	mov	r0, r4
 801c97a:	f7ff f901 	bl	801bb80 <mbedtls_rsa_public>
 801c97e:	4607      	mov	r7, r0
 801c980:	e7e7      	b.n	801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
        mbedtls_free( sig_try );
 801c982:	4628      	mov	r0, r5
 801c984:	f00c fa90 	bl	8028ea8 <mbedtls_free>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801c988:	f06f 070f 	mvn.w	r7, #15
 801c98c:	e7e1      	b.n	801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 801c98e:	464a      	mov	r2, r9
 801c990:	4629      	mov	r1, r5
 801c992:	4620      	mov	r0, r4
 801c994:	f7ff f8f4 	bl	801bb80 <mbedtls_rsa_public>
 801c998:	4607      	mov	r7, r0
 801c99a:	2800      	cmp	r0, #0
 801c99c:	d1d3      	bne.n	801c946 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 801c99e:	6862      	ldr	r2, [r4, #4]
    for( i = 0; i < n; i++ )
 801c9a0:	b18a      	cbz	r2, 801c9c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xde>
 801c9a2:	f109 31ff 	add.w	r1, r9, #4294967295
 801c9a6:	f108 34ff 	add.w	r4, r8, #4294967295
 801c9aa:	f102 3cff 	add.w	ip, r2, #4294967295
 801c9ae:	44cc      	add	ip, r9
        diff |= A[i] ^ B[i];
 801c9b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c9b4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 801c9b8:	4073      	eors	r3, r6
 801c9ba:	4318      	orrs	r0, r3
    for( i = 0; i < n; i++ )
 801c9bc:	4561      	cmp	r1, ip
 801c9be:	d1f7      	bne.n	801c9b0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>
    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 801c9c0:	b108      	cbz	r0, 801c9c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xde>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 801c9c2:	4f06      	ldr	r7, [pc, #24]	; (801c9dc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf4>)
 801c9c4:	e7bf      	b.n	801c946 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
    memcpy( sig, sig_try, ctx->len );
 801c9c6:	4629      	mov	r1, r5
 801c9c8:	4640      	mov	r0, r8
 801c9ca:	f00d fdb6 	bl	802a53a <memcpy>
 801c9ce:	e7ba      	b.n	801c946 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801c9d0:	4f03      	ldr	r7, [pc, #12]	; (801c9e0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xf8>)
 801c9d2:	e7be      	b.n	801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 801c9d4:	f06f 070f 	mvn.w	r7, #15
 801c9d8:	e7bb      	b.n	801c952 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x6a>
 801c9da:	bf00      	nop
 801c9dc:	ffffbd00 	.word	0xffffbd00
 801c9e0:	ffffbf80 	.word	0xffffbf80

0801c9e4 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 801c9e4:	b530      	push	{r4, r5, lr}
 801c9e6:	b085      	sub	sp, #20
 801c9e8:	f89d 5020 	ldrb.w	r5, [sp, #32]
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );
    RSA_VALIDATE_RET( sig != NULL );

    switch( ctx->padding )
 801c9ec:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 801c9f0:	b124      	cbz	r4, 801c9fc <mbedtls_rsa_pkcs1_sign+0x18>
 801c9f2:	2c01      	cmp	r4, #1
 801c9f4:	d00c      	beq.n	801ca10 <mbedtls_rsa_pkcs1_sign+0x2c>
 801c9f6:	480b      	ldr	r0, [pc, #44]	; (801ca24 <mbedtls_rsa_pkcs1_sign+0x40>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 801c9f8:	b005      	add	sp, #20
 801c9fa:	bd30      	pop	{r4, r5, pc}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 801c9fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c9fe:	9403      	str	r4, [sp, #12]
 801ca00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ca02:	9402      	str	r4, [sp, #8]
 801ca04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ca06:	9401      	str	r4, [sp, #4]
 801ca08:	9500      	str	r5, [sp, #0]
 801ca0a:	f7ff ff6d 	bl	801c8e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
 801ca0e:	e7f3      	b.n	801c9f8 <mbedtls_rsa_pkcs1_sign+0x14>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801ca10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ca12:	9403      	str	r4, [sp, #12]
 801ca14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ca16:	9402      	str	r4, [sp, #8]
 801ca18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ca1a:	9401      	str	r4, [sp, #4]
 801ca1c:	9500      	str	r5, [sp, #0]
 801ca1e:	f7ff fe7d 	bl	801c71c <mbedtls_rsa_rsassa_pss_sign>
 801ca22:	e7e9      	b.n	801c9f8 <mbedtls_rsa_pkcs1_sign+0x14>
 801ca24:	ffffbf00 	.word	0xffffbf00

0801ca28 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 801ca28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca2c:	b0d9      	sub	sp, #356	; 0x164
 801ca2e:	4604      	mov	r4, r0
 801ca30:	f89d 7180 	ldrb.w	r7, [sp, #384]	; 0x180
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801ca34:	2b01      	cmp	r3, #1
 801ca36:	d05b      	beq.n	801caf0 <mbedtls_rsa_rsassa_pss_verify_ext+0xc8>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    siglen = ctx->len;
 801ca38:	6846      	ldr	r6, [r0, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 801ca3a:	f1a6 0010 	sub.w	r0, r6, #16
 801ca3e:	28f0      	cmp	r0, #240	; 0xf0
 801ca40:	f200 80cf 	bhi.w	801cbe2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ba>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d15c      	bne.n	801cb02 <mbedtls_rsa_rsassa_pss_verify_ext+0xda>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 801ca48:	aa03      	add	r2, sp, #12
 801ca4a:	9965      	ldr	r1, [sp, #404]	; 0x194
 801ca4c:	4620      	mov	r0, r4
 801ca4e:	f7ff f897 	bl	801bb80 <mbedtls_rsa_public>
 801ca52:	4605      	mov	r5, r0

    if( ret != 0 )
 801ca54:	2d00      	cmp	r5, #0
 801ca56:	d147      	bne.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 801ca58:	f106 39ff 	add.w	r9, r6, #4294967295
 801ca5c:	ab03      	add	r3, sp, #12
 801ca5e:	f813 3009 	ldrb.w	r3, [r3, r9]
 801ca62:	2bbc      	cmp	r3, #188	; 0xbc
 801ca64:	f040 80bf 	bne.w	801cbe6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1be>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 801ca68:	b147      	cbz	r7, 801ca7c <mbedtls_rsa_rsassa_pss_verify_ext+0x54>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 801ca6a:	4638      	mov	r0, r7
 801ca6c:	f7fc f9e2 	bl	8018e34 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801ca70:	2800      	cmp	r0, #0
 801ca72:	f000 80ba 	beq.w	801cbea <mbedtls_rsa_rsassa_pss_verify_ext+0x1c2>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 801ca76:	f7fc fb53 	bl	8019120 <mbedtls_md_get_size>
 801ca7a:	9061      	str	r0, [sp, #388]	; 0x184
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 801ca7c:	f89d 018c 	ldrb.w	r0, [sp, #396]	; 0x18c
 801ca80:	f7fc f9d8 	bl	8018e34 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801ca84:	4605      	mov	r5, r0
 801ca86:	2800      	cmp	r0, #0
 801ca88:	f000 80b1 	beq.w	801cbee <mbedtls_rsa_rsassa_pss_verify_ext+0x1c6>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 801ca8c:	f7fc fb48 	bl	8019120 <mbedtls_md_get_size>
 801ca90:	4680      	mov	r8, r0

    memset( zeros, 0, 8 );
 801ca92:	2300      	movs	r3, #0
 801ca94:	9346      	str	r3, [sp, #280]	; 0x118
 801ca96:	9347      	str	r3, [sp, #284]	; 0x11c

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801ca98:	f104 0008 	add.w	r0, r4, #8
 801ca9c:	f7f5 fef7 	bl	801288e <mbedtls_mpi_bitlen>
 801caa0:	1e47      	subs	r7, r0, #1

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 801caa2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801caa6:	f1c6 0301 	rsb	r3, r6, #1
 801caaa:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 801caae:	fa52 f303 	asrs.w	r3, r2, r3
 801cab2:	f040 809e 	bne.w	801cbf2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ca>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 801cab6:	f017 0f07 	tst.w	r7, #7
    {
        p++;
        siglen -= 1;
 801caba:	bf06      	itte	eq
 801cabc:	464e      	moveq	r6, r9
        p++;
 801cabe:	f10d 040d 	addeq.w	r4, sp, #13
    p = buf;
 801cac2:	ac03      	addne	r4, sp, #12
    }

    if( siglen < hlen + 2 )
 801cac4:	f108 0302 	add.w	r3, r8, #2
 801cac8:	42b3      	cmp	r3, r6
 801caca:	f200 8094 	bhi.w	801cbf6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 801cace:	a843      	add	r0, sp, #268	; 0x10c
 801cad0:	f7fc f9d2 	bl	8018e78 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 801cad4:	2200      	movs	r2, #0
 801cad6:	4629      	mov	r1, r5
 801cad8:	a843      	add	r0, sp, #268	; 0x10c
 801cada:	f7fc f9eb 	bl	8018eb4 <mbedtls_md_setup>
 801cade:	4605      	mov	r5, r0
 801cae0:	b1b8      	cbz	r0, 801cb12 <mbedtls_rsa_rsassa_pss_verify_ext+0xea>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 801cae2:	a843      	add	r0, sp, #268	; 0x10c
 801cae4:	f7fc f9cd 	bl	8018e82 <mbedtls_md_free>

    return( ret );
}
 801cae8:	4628      	mov	r0, r5
 801caea:	b059      	add	sp, #356	; 0x164
 801caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801caf0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801caf4:	2b01      	cmp	r3, #1
 801caf6:	d172      	bne.n	801cbde <mbedtls_rsa_rsassa_pss_verify_ext+0x1b6>
    siglen = ctx->len;
 801caf8:	6846      	ldr	r6, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 801cafa:	f1a6 0310 	sub.w	r3, r6, #16
 801cafe:	2bf0      	cmp	r3, #240	; 0xf0
 801cb00:	d87b      	bhi.n	801cbfa <mbedtls_rsa_rsassa_pss_verify_ext+0x1d2>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801cb02:	ab03      	add	r3, sp, #12
 801cb04:	9300      	str	r3, [sp, #0]
 801cb06:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801cb08:	4620      	mov	r0, r4
 801cb0a:	f7ff f87f 	bl	801bc0c <mbedtls_rsa_private>
 801cb0e:	4605      	mov	r5, r0
 801cb10:	e7a0      	b.n	801ca54 <mbedtls_rsa_rsassa_pss_verify_ext+0x2c>
    hash_start = p + siglen - hlen - 1;
 801cb12:	ea6f 0108 	mvn.w	r1, r8
 801cb16:	4431      	add	r1, r6
 801cb18:	eb04 0901 	add.w	r9, r4, r1
    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 801cb1c:	ab43      	add	r3, sp, #268	; 0x10c
 801cb1e:	9300      	str	r3, [sp, #0]
 801cb20:	4643      	mov	r3, r8
 801cb22:	464a      	mov	r2, r9
 801cb24:	4620      	mov	r0, r4
 801cb26:	f7fe fd21 	bl	801b56c <mgf_mask>
    if( ret != 0 )
 801cb2a:	4605      	mov	r5, r0
 801cb2c:	2800      	cmp	r0, #0
 801cb2e:	d1d8      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 801cb30:	ebc7 06c6 	rsb	r6, r7, r6, lsl #3
 801cb34:	27ff      	movs	r7, #255	; 0xff
 801cb36:	fa47 f606 	asr.w	r6, r7, r6
 801cb3a:	f89d 700c 	ldrb.w	r7, [sp, #12]
 801cb3e:	403e      	ands	r6, r7
 801cb40:	f88d 600c 	strb.w	r6, [sp, #12]
    while( p < hash_start - 1 && *p == 0 )
 801cb44:	f109 33ff 	add.w	r3, r9, #4294967295
 801cb48:	429c      	cmp	r4, r3
 801cb4a:	d209      	bcs.n	801cb60 <mbedtls_rsa_rsassa_pss_verify_ext+0x138>
 801cb4c:	4623      	mov	r3, r4
 801cb4e:	f109 31ff 	add.w	r1, r9, #4294967295
 801cb52:	461c      	mov	r4, r3
 801cb54:	3301      	adds	r3, #1
 801cb56:	7822      	ldrb	r2, [r4, #0]
 801cb58:	b912      	cbnz	r2, 801cb60 <mbedtls_rsa_rsassa_pss_verify_ext+0x138>
        p++;
 801cb5a:	461c      	mov	r4, r3
    while( p < hash_start - 1 && *p == 0 )
 801cb5c:	428b      	cmp	r3, r1
 801cb5e:	d1f8      	bne.n	801cb52 <mbedtls_rsa_rsassa_pss_verify_ext+0x12a>
    if( *p++ != 0x01 )
 801cb60:	7823      	ldrb	r3, [r4, #0]
 801cb62:	2b01      	cmp	r3, #1
 801cb64:	d137      	bne.n	801cbd6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1ae>
 801cb66:	3401      	adds	r4, #1
    observed_salt_len = hash_start - p;
 801cb68:	eba9 0604 	sub.w	r6, r9, r4
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 801cb6c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801cb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb72:	d001      	beq.n	801cb78 <mbedtls_rsa_rsassa_pss_verify_ext+0x150>
 801cb74:	429e      	cmp	r6, r3
 801cb76:	d130      	bne.n	801cbda <mbedtls_rsa_rsassa_pss_verify_ext+0x1b2>
    ret = mbedtls_md_starts( &md_ctx );
 801cb78:	a843      	add	r0, sp, #268	; 0x10c
 801cb7a:	f7fc f9bf 	bl	8018efc <mbedtls_md_starts>
    if ( ret != 0 )
 801cb7e:	4605      	mov	r5, r0
 801cb80:	2800      	cmp	r0, #0
 801cb82:	d1ae      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 801cb84:	2208      	movs	r2, #8
 801cb86:	a946      	add	r1, sp, #280	; 0x118
 801cb88:	a843      	add	r0, sp, #268	; 0x10c
 801cb8a:	f7fc f9c5 	bl	8018f18 <mbedtls_md_update>
    if ( ret != 0 )
 801cb8e:	4605      	mov	r5, r0
 801cb90:	2800      	cmp	r0, #0
 801cb92:	d1a6      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 801cb94:	9a61      	ldr	r2, [sp, #388]	; 0x184
 801cb96:	9962      	ldr	r1, [sp, #392]	; 0x188
 801cb98:	a843      	add	r0, sp, #268	; 0x10c
 801cb9a:	f7fc f9bd 	bl	8018f18 <mbedtls_md_update>
    if ( ret != 0 )
 801cb9e:	4605      	mov	r5, r0
 801cba0:	2800      	cmp	r0, #0
 801cba2:	d19e      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 801cba4:	4632      	mov	r2, r6
 801cba6:	4621      	mov	r1, r4
 801cba8:	a843      	add	r0, sp, #268	; 0x10c
 801cbaa:	f7fc f9b5 	bl	8018f18 <mbedtls_md_update>
    if ( ret != 0 )
 801cbae:	4605      	mov	r5, r0
 801cbb0:	2800      	cmp	r0, #0
 801cbb2:	d196      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    ret = mbedtls_md_finish( &md_ctx, result );
 801cbb4:	a948      	add	r1, sp, #288	; 0x120
 801cbb6:	a843      	add	r0, sp, #268	; 0x10c
 801cbb8:	f7fc f9be 	bl	8018f38 <mbedtls_md_finish>
    if ( ret != 0 )
 801cbbc:	4605      	mov	r5, r0
 801cbbe:	2800      	cmp	r0, #0
 801cbc0:	d18f      	bne.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
    if( memcmp( hash_start, result, hlen ) != 0 )
 801cbc2:	4642      	mov	r2, r8
 801cbc4:	a948      	add	r1, sp, #288	; 0x120
 801cbc6:	4648      	mov	r0, r9
 801cbc8:	f00d fca9 	bl	802a51e <memcmp>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 801cbcc:	1e05      	subs	r5, r0, #0
 801cbce:	4b0c      	ldr	r3, [pc, #48]	; (801cc00 <mbedtls_rsa_rsassa_pss_verify_ext+0x1d8>)
 801cbd0:	bf18      	it	ne
 801cbd2:	461d      	movne	r5, r3
 801cbd4:	e785      	b.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801cbd6:	4d0b      	ldr	r5, [pc, #44]	; (801cc04 <mbedtls_rsa_rsassa_pss_verify_ext+0x1dc>)
 801cbd8:	e783      	b.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 801cbda:	4d0a      	ldr	r5, [pc, #40]	; (801cc04 <mbedtls_rsa_rsassa_pss_verify_ext+0x1dc>)
 801cbdc:	e781      	b.n	801cae2 <mbedtls_rsa_rsassa_pss_verify_ext+0xba>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbde:	4d0a      	ldr	r5, [pc, #40]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbe0:	e782      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbe2:	4d09      	ldr	r5, [pc, #36]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbe4:	e780      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 801cbe6:	4d07      	ldr	r5, [pc, #28]	; (801cc04 <mbedtls_rsa_rsassa_pss_verify_ext+0x1dc>)
 801cbe8:	e77e      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbea:	4d07      	ldr	r5, [pc, #28]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbec:	e77c      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbee:	4d06      	ldr	r5, [pc, #24]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbf0:	e77a      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbf2:	4d05      	ldr	r5, [pc, #20]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbf4:	e778      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbf6:	4d04      	ldr	r5, [pc, #16]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbf8:	e776      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801cbfa:	4d03      	ldr	r5, [pc, #12]	; (801cc08 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e0>)
 801cbfc:	e774      	b.n	801cae8 <mbedtls_rsa_rsassa_pss_verify_ext+0xc0>
 801cbfe:	bf00      	nop
 801cc00:	ffffbc80 	.word	0xffffbc80
 801cc04:	ffffbf00 	.word	0xffffbf00
 801cc08:	ffffbf80 	.word	0xffffbf80

0801cc0c <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 801cc0c:	b570      	push	{r4, r5, r6, lr}
 801cc0e:	b086      	sub	sp, #24
 801cc10:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 801cc14:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 801cc18:	b17c      	cbz	r4, 801cc3a <mbedtls_rsa_rsassa_pss_verify+0x2e>
 801cc1a:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 801cc1c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801cc1e:	9605      	str	r6, [sp, #20]
 801cc20:	f04f 36ff 	mov.w	r6, #4294967295
 801cc24:	9604      	str	r6, [sp, #16]
 801cc26:	9403      	str	r4, [sp, #12]
 801cc28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cc2a:	9402      	str	r4, [sp, #8]
 801cc2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc2e:	9401      	str	r4, [sp, #4]
 801cc30:	9500      	str	r5, [sp, #0]
 801cc32:	f7ff fef9 	bl	801ca28 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 801cc36:	b006      	add	sp, #24
 801cc38:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 801cc3a:	462c      	mov	r4, r5
 801cc3c:	e7ee      	b.n	801cc1c <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

0801cc40 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 801cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc44:	b083      	sub	sp, #12
 801cc46:	4604      	mov	r4, r0
 801cc48:	468a      	mov	sl, r1
 801cc4a:	4693      	mov	fp, r2
 801cc4c:	4699      	mov	r9, r3
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    sig_len = ctx->len;
 801cc4e:	6845      	ldr	r5, [r0, #4]

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 801cc50:	2b01      	cmp	r3, #1
 801cc52:	d103      	bne.n	801cc5c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x1c>
 801cc54:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d140      	bne.n	801ccde <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x9e>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 801cc5c:	4629      	mov	r1, r5
 801cc5e:	2001      	movs	r0, #1
 801cc60:	f00c f914 	bl	8028e8c <mbedtls_calloc>
 801cc64:	4680      	mov	r8, r0
 801cc66:	2800      	cmp	r0, #0
 801cc68:	d03b      	beq.n	801cce2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa2>
        ( encoded_expected = mbedtls_calloc( 1, sig_len ) ) == NULL )
 801cc6a:	4629      	mov	r1, r5
 801cc6c:	2001      	movs	r0, #1
 801cc6e:	f00c f90d 	bl	8028e8c <mbedtls_calloc>
    if( ( encoded          = mbedtls_calloc( 1, sig_len ) ) == NULL ||
 801cc72:	4607      	mov	r7, r0
 801cc74:	2800      	cmp	r0, #0
 801cc76:	d037      	beq.n	801cce8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa8>
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 801cc78:	9000      	str	r0, [sp, #0]
 801cc7a:	462b      	mov	r3, r5
 801cc7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cc80:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801cc84:	f7fe fcc8 	bl	801b618 <rsa_rsassa_pkcs1_v15_encode>
 801cc88:	4606      	mov	r6, r0
 801cc8a:	bb78      	cbnz	r0, 801ccec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xac>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 801cc8c:	f1b9 0f00 	cmp.w	r9, #0
 801cc90:	d11b      	bne.n	801ccca <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
          ? mbedtls_rsa_public(  ctx, sig, encoded )
 801cc92:	4642      	mov	r2, r8
 801cc94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cc96:	4620      	mov	r0, r4
 801cc98:	f7fe ff72 	bl	801bb80 <mbedtls_rsa_public>
 801cc9c:	4606      	mov	r6, r0
    if( ret != 0 )
 801cc9e:	bb2e      	cbnz	r6, 801ccec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xac>
    for( i = 0; i < n; i++ )
 801cca0:	b325      	cbz	r5, 801ccec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xac>
 801cca2:	f108 32ff 	add.w	r2, r8, #4294967295
 801cca6:	1e78      	subs	r0, r7, #1
 801cca8:	f105 3cff 	add.w	ip, r5, #4294967295
 801ccac:	44c4      	add	ip, r8
    unsigned char diff = 0;
 801ccae:	2100      	movs	r1, #0
        diff |= A[i] ^ B[i];
 801ccb0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801ccb4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 801ccb8:	4063      	eors	r3, r4
 801ccba:	4319      	orrs	r1, r3
    for( i = 0; i < n; i++ )
 801ccbc:	4562      	cmp	r2, ip
 801ccbe:	d1f7      	bne.n	801ccb0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x70>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 801ccc0:	4b14      	ldr	r3, [pc, #80]	; (801cd14 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd4>)
 801ccc2:	2900      	cmp	r1, #0
 801ccc4:	bf18      	it	ne
 801ccc6:	461e      	movne	r6, r3
 801ccc8:	e010      	b.n	801ccec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xac>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 801ccca:	f8cd 8000 	str.w	r8, [sp]
 801ccce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccd0:	465a      	mov	r2, fp
 801ccd2:	4651      	mov	r1, sl
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	f7fe ff99 	bl	801bc0c <mbedtls_rsa_private>
 801ccda:	4606      	mov	r6, r0
 801ccdc:	e7df      	b.n	801cc9e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801ccde:	4e0e      	ldr	r6, [pc, #56]	; (801cd18 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xd8>)
 801cce0:	e013      	b.n	801cd0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 801cce2:	f06f 060f 	mvn.w	r6, #15
 801cce6:	e010      	b.n	801cd0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
 801cce8:	f06f 060f 	mvn.w	r6, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_platform_zeroize( encoded, sig_len );
 801ccec:	4629      	mov	r1, r5
 801ccee:	4640      	mov	r0, r8
 801ccf0:	f7fe f928 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( encoded );
 801ccf4:	4640      	mov	r0, r8
 801ccf6:	f00c f8d7 	bl	8028ea8 <mbedtls_free>
    }

    if( encoded_expected != NULL )
 801ccfa:	b137      	cbz	r7, 801cd0a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xca>
    {
        mbedtls_platform_zeroize( encoded_expected, sig_len );
 801ccfc:	4629      	mov	r1, r5
 801ccfe:	4638      	mov	r0, r7
 801cd00:	f7fe f920 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( encoded_expected );
 801cd04:	4638      	mov	r0, r7
 801cd06:	f00c f8cf 	bl	8028ea8 <mbedtls_free>
    }

    return( ret );
}
 801cd0a:	4630      	mov	r0, r6
 801cd0c:	b003      	add	sp, #12
 801cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd12:	bf00      	nop
 801cd14:	ffffbc80 	.word	0xffffbc80
 801cd18:	ffffbf80 	.word	0xffffbf80

0801cd1c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 801cd1c:	b530      	push	{r4, r5, lr}
 801cd1e:	b085      	sub	sp, #20
 801cd20:	f89d 5020 	ldrb.w	r5, [sp, #32]
    RSA_VALIDATE_RET( sig != NULL );
    RSA_VALIDATE_RET( ( md_alg  == MBEDTLS_MD_NONE &&
                        hashlen == 0 ) ||
                      hash != NULL );

    switch( ctx->padding )
 801cd24:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 801cd28:	b124      	cbz	r4, 801cd34 <mbedtls_rsa_pkcs1_verify+0x18>
 801cd2a:	2c01      	cmp	r4, #1
 801cd2c:	d00c      	beq.n	801cd48 <mbedtls_rsa_pkcs1_verify+0x2c>
 801cd2e:	480b      	ldr	r0, [pc, #44]	; (801cd5c <mbedtls_rsa_pkcs1_verify+0x40>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 801cd30:	b005      	add	sp, #20
 801cd32:	bd30      	pop	{r4, r5, pc}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 801cd34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd36:	9403      	str	r4, [sp, #12]
 801cd38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cd3a:	9402      	str	r4, [sp, #8]
 801cd3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cd3e:	9401      	str	r4, [sp, #4]
 801cd40:	9500      	str	r5, [sp, #0]
 801cd42:	f7ff ff7d 	bl	801cc40 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
 801cd46:	e7f3      	b.n	801cd30 <mbedtls_rsa_pkcs1_verify+0x14>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 801cd48:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd4a:	9403      	str	r4, [sp, #12]
 801cd4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cd4e:	9402      	str	r4, [sp, #8]
 801cd50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cd52:	9401      	str	r4, [sp, #4]
 801cd54:	9500      	str	r5, [sp, #0]
 801cd56:	f7ff ff59 	bl	801cc0c <mbedtls_rsa_rsassa_pss_verify>
 801cd5a:	e7e9      	b.n	801cd30 <mbedtls_rsa_pkcs1_verify+0x14>
 801cd5c:	ffffbf00 	.word	0xffffbf00

0801cd60 <mbedtls_rsa_free>:
/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    if( ctx == NULL )
 801cd60:	b3a8      	cbz	r0, 801cdce <mbedtls_rsa_free+0x6e>
{
 801cd62:	b510      	push	{r4, lr}
 801cd64:	4604      	mov	r4, r0
        return;

    mbedtls_mpi_free( &ctx->Vi );
 801cd66:	308c      	adds	r0, #140	; 0x8c
 801cd68:	f7f5 fc65 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
 801cd6c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801cd70:	f7f5 fc61 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
 801cd74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cd78:	f7f5 fc5d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
 801cd7c:	f104 0020 	add.w	r0, r4, #32
 801cd80:	f7f5 fc59 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
 801cd84:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801cd88:	f7f5 fc55 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
 801cd8c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801cd90:	f7f5 fc51 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
 801cd94:	f104 0014 	add.w	r0, r4, #20
 801cd98:	f7f5 fc4d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
 801cd9c:	f104 0008 	add.w	r0, r4, #8
 801cda0:	f7f5 fc49 	bl	8012636 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
 801cda4:	f104 0080 	add.w	r0, r4, #128	; 0x80
 801cda8:	f7f5 fc45 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
 801cdac:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801cdb0:	f7f5 fc41 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
 801cdb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cdb8:	f7f5 fc3d 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
 801cdbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cdc0:	f7f5 fc39 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 801cdc4:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801cdc8:	f7f5 fc35 	bl	8012636 <mbedtls_mpi_free>
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 801cdcc:	bd10      	pop	{r4, pc}
 801cdce:	4770      	bx	lr

0801cdd0 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 801cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd4:	b099      	sub	sp, #100	; 0x64
 801cdd6:	4604      	mov	r4, r0
 801cdd8:	4689      	mov	r9, r1
 801cdda:	4690      	mov	r8, r2
 801cddc:	469c      	mov	ip, r3
 801cdde:	9f22      	ldr	r7, [sp, #136]	; 0x88
    uint16_t order;    /* Order of 2 in DE - 1 */

    mbedtls_mpi T;  /* Holds largest odd divisor of DE - 1     */
    mbedtls_mpi K;  /* Temporary holding the current candidate */

    const unsigned char primes[] = { 2,
 801cde0:	ad04      	add	r5, sp, #16
 801cde2:	4e8c      	ldr	r6, [pc, #560]	; (801d014 <mbedtls_rsa_deduce_primes+0x244>)
 801cde4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801cde6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cde8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801cdea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cdec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801cdee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cdf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cdf4:	f845 0b04 	str.w	r0, [r5], #4
 801cdf8:	8029      	strh	r1, [r5, #0]
         229,  233,  239,  241,  251
    };

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 801cdfa:	f1bc 0f00 	cmp.w	ip, #0
 801cdfe:	f000 80ed 	beq.w	801cfdc <mbedtls_rsa_deduce_primes+0x20c>
 801ce02:	4666      	mov	r6, ip
 801ce04:	2f00      	cmp	r7, #0
 801ce06:	f000 80ec 	beq.w	801cfe2 <mbedtls_rsa_deduce_primes+0x212>
 801ce0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	f040 80ea 	bne.w	801cfe8 <mbedtls_rsa_deduce_primes+0x218>
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	f040 80e9 	bne.w	801cfee <mbedtls_rsa_deduce_primes+0x21e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 801ce1c:	2100      	movs	r1, #0
 801ce1e:	4620      	mov	r0, r4
 801ce20:	f7f5 ff97 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801ce24:	2800      	cmp	r0, #0
 801ce26:	f340 80e5 	ble.w	801cff4 <mbedtls_rsa_deduce_primes+0x224>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801ce2a:	2101      	movs	r1, #1
 801ce2c:	4640      	mov	r0, r8
 801ce2e:	f7f5 ff90 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 801ce32:	2800      	cmp	r0, #0
 801ce34:	f340 80e1 	ble.w	801cffa <mbedtls_rsa_deduce_primes+0x22a>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 801ce38:	4621      	mov	r1, r4
 801ce3a:	4640      	mov	r0, r8
 801ce3c:	f7f5 ff31 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801ce40:	2800      	cmp	r0, #0
 801ce42:	f280 80dd 	bge.w	801d000 <mbedtls_rsa_deduce_primes+0x230>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801ce46:	2101      	movs	r1, #1
 801ce48:	4648      	mov	r0, r9
 801ce4a:	f7f5 ff82 	bl	8012d52 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 801ce4e:	2800      	cmp	r0, #0
 801ce50:	f340 80d9 	ble.w	801d006 <mbedtls_rsa_deduce_primes+0x236>
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 801ce54:	4621      	mov	r1, r4
 801ce56:	4648      	mov	r0, r9
 801ce58:	f7f5 ff23 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801ce5c:	2800      	cmp	r0, #0
 801ce5e:	f280 80d5 	bge.w	801d00c <mbedtls_rsa_deduce_primes+0x23c>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 801ce62:	a812      	add	r0, sp, #72	; 0x48
 801ce64:	f7f5 fbe1 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 801ce68:	a815      	add	r0, sp, #84	; 0x54
 801ce6a:	f7f5 fbde 	bl	801262a <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 801ce6e:	464a      	mov	r2, r9
 801ce70:	4641      	mov	r1, r8
 801ce72:	a815      	add	r0, sp, #84	; 0x54
 801ce74:	f7f6 f896 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801ce78:	4605      	mov	r5, r0
 801ce7a:	b148      	cbz	r0, 801ce90 <mbedtls_rsa_deduce_primes+0xc0>

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 801ce7c:	a812      	add	r0, sp, #72	; 0x48
 801ce7e:	f7f5 fbda 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 801ce82:	a815      	add	r0, sp, #84	; 0x54
 801ce84:	f7f5 fbd7 	bl	8012636 <mbedtls_mpi_free>
    return( ret );
}
 801ce88:	4628      	mov	r0, r5
 801ce8a:	b019      	add	sp, #100	; 0x64
 801ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 801ce90:	2201      	movs	r2, #1
 801ce92:	a915      	add	r1, sp, #84	; 0x54
 801ce94:	4608      	mov	r0, r1
 801ce96:	f7f6 f86e 	bl	8012f76 <mbedtls_mpi_sub_int>
 801ce9a:	4605      	mov	r5, r0
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	d1ed      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 801cea0:	a815      	add	r0, sp, #84	; 0x54
 801cea2:	f7f5 fcd5 	bl	8012850 <mbedtls_mpi_lsb>
 801cea6:	fa1f fa80 	uxth.w	sl, r0
 801ceaa:	f1ba 0f00 	cmp.w	sl, #0
 801ceae:	d102      	bne.n	801ceb6 <mbedtls_rsa_deduce_primes+0xe6>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801ceb0:	f06f 0503 	mvn.w	r5, #3
 801ceb4:	e7e2      	b.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 801ceb6:	4651      	mov	r1, sl
 801ceb8:	a815      	add	r0, sp, #84	; 0x54
 801ceba:	f7f5 fde0 	bl	8012a7e <mbedtls_mpi_shift_r>
 801cebe:	4605      	mov	r5, r0
 801cec0:	2800      	cmp	r0, #0
 801cec2:	d1db      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
    if( N->p[0] % 8 == 1 )
 801cec4:	68a3      	ldr	r3, [r4, #8]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f003 0307 	and.w	r3, r3, #7
 801cecc:	2b01      	cmp	r3, #1
 801cece:	bf14      	ite	ne
 801ced0:	2300      	movne	r3, #0
 801ced2:	2301      	moveq	r3, #1
    attempt = 0;
 801ced4:	b29a      	uxth	r2, r3
 801ced6:	9202      	str	r2, [sp, #8]
    for( ; attempt < num_primes; ++attempt )
 801ced8:	aa04      	add	r2, sp, #16
 801ceda:	18d3      	adds	r3, r2, r3
 801cedc:	9303      	str	r3, [sp, #12]
    attempt = 0;
 801cede:	469b      	mov	fp, r3
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 801cee0:	f04f 0801 	mov.w	r8, #1
 801cee4:	e053      	b.n	801cf8e <mbedtls_rsa_deduce_primes+0x1be>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801cee6:	4642      	mov	r2, r8
 801cee8:	a912      	add	r1, sp, #72	; 0x48
 801ceea:	4608      	mov	r0, r1
 801ceec:	f7f6 f843 	bl	8012f76 <mbedtls_mpi_sub_int>
 801cef0:	4605      	mov	r5, r0
 801cef2:	2800      	cmp	r0, #0
 801cef4:	d1c2      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 801cef6:	aa12      	add	r2, sp, #72	; 0x48
 801cef8:	4611      	mov	r1, r2
 801cefa:	4610      	mov	r0, r2
 801cefc:	f7f6 f852 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801cf00:	4605      	mov	r5, r0
 801cf02:	2800      	cmp	r0, #0
 801cf04:	d1ba      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 801cf06:	4622      	mov	r2, r4
 801cf08:	a912      	add	r1, sp, #72	; 0x48
 801cf0a:	4608      	mov	r0, r1
 801cf0c:	f7f6 faf3 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801cf10:	4605      	mov	r5, r0
 801cf12:	2800      	cmp	r0, #0
 801cf14:	d1b2      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
        for( iter = 1; iter <= order; ++iter )
 801cf16:	f109 0901 	add.w	r9, r9, #1
 801cf1a:	fa1f f989 	uxth.w	r9, r9
 801cf1e:	45ca      	cmp	sl, r9
 801cf20:	d329      	bcc.n	801cf76 <mbedtls_rsa_deduce_primes+0x1a6>
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 801cf22:	4641      	mov	r1, r8
 801cf24:	a812      	add	r0, sp, #72	; 0x48
 801cf26:	f7f5 ff14 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801cf2a:	b320      	cbz	r0, 801cf76 <mbedtls_rsa_deduce_primes+0x1a6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 801cf2c:	4642      	mov	r2, r8
 801cf2e:	a912      	add	r1, sp, #72	; 0x48
 801cf30:	4608      	mov	r0, r1
 801cf32:	f7f6 f809 	bl	8012f48 <mbedtls_mpi_add_int>
 801cf36:	4605      	mov	r5, r0
 801cf38:	2800      	cmp	r0, #0
 801cf3a:	d19f      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 801cf3c:	4622      	mov	r2, r4
 801cf3e:	a912      	add	r1, sp, #72	; 0x48
 801cf40:	4630      	mov	r0, r6
 801cf42:	f7f6 fd7f 	bl	8013a44 <mbedtls_mpi_gcd>
 801cf46:	4605      	mov	r5, r0
 801cf48:	2800      	cmp	r0, #0
 801cf4a:	d197      	bne.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 801cf4c:	4641      	mov	r1, r8
 801cf4e:	4630      	mov	r0, r6
 801cf50:	f7f5 feff 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801cf54:	2801      	cmp	r0, #1
 801cf56:	d1c6      	bne.n	801cee6 <mbedtls_rsa_deduce_primes+0x116>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 801cf58:	4621      	mov	r1, r4
 801cf5a:	4630      	mov	r0, r6
 801cf5c:	f7f5 fea1 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 801cf60:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cf64:	d1bf      	bne.n	801cee6 <mbedtls_rsa_deduce_primes+0x116>
                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 801cf66:	4633      	mov	r3, r6
 801cf68:	4622      	mov	r2, r4
 801cf6a:	2100      	movs	r1, #0
 801cf6c:	4638      	mov	r0, r7
 801cf6e:	f7f6 f88f 	bl	8013090 <mbedtls_mpi_div_mpi>
 801cf72:	4605      	mov	r5, r0
 801cf74:	e782      	b.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 801cf76:	4641      	mov	r1, r8
 801cf78:	a812      	add	r0, sp, #72	; 0x48
 801cf7a:	f7f5 feea 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801cf7e:	bb50      	cbnz	r0, 801cfd6 <mbedtls_rsa_deduce_primes+0x206>
    for( ; attempt < num_primes; ++attempt )
 801cf80:	9b02      	ldr	r3, [sp, #8]
 801cf82:	9a03      	ldr	r2, [sp, #12]
 801cf84:	1a9b      	subs	r3, r3, r2
 801cf86:	445b      	add	r3, fp
 801cf88:	b29b      	uxth	r3, r3
 801cf8a:	2b35      	cmp	r3, #53	; 0x35
 801cf8c:	d820      	bhi.n	801cfd0 <mbedtls_rsa_deduce_primes+0x200>
        mbedtls_mpi_lset( &K, primes[attempt] );
 801cf8e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801cf92:	a812      	add	r0, sp, #72	; 0x48
 801cf94:	f7f5 fc2e 	bl	80127f4 <mbedtls_mpi_lset>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 801cf98:	4622      	mov	r2, r4
 801cf9a:	a912      	add	r1, sp, #72	; 0x48
 801cf9c:	4630      	mov	r0, r6
 801cf9e:	f7f6 fd51 	bl	8013a44 <mbedtls_mpi_gcd>
 801cfa2:	4605      	mov	r5, r0
 801cfa4:	2800      	cmp	r0, #0
 801cfa6:	f47f af69 	bne.w	801ce7c <mbedtls_rsa_deduce_primes+0xac>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 801cfaa:	4641      	mov	r1, r8
 801cfac:	4630      	mov	r0, r6
 801cfae:	f7f5 fed0 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	d1e4      	bne.n	801cf80 <mbedtls_rsa_deduce_primes+0x1b0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 801cfb6:	9700      	str	r7, [sp, #0]
 801cfb8:	4623      	mov	r3, r4
 801cfba:	aa15      	add	r2, sp, #84	; 0x54
 801cfbc:	a912      	add	r1, sp, #72	; 0x48
 801cfbe:	4608      	mov	r0, r1
 801cfc0:	f7f6 face 	bl	8013560 <mbedtls_mpi_exp_mod>
 801cfc4:	4605      	mov	r5, r0
 801cfc6:	2800      	cmp	r0, #0
 801cfc8:	f47f af58 	bne.w	801ce7c <mbedtls_rsa_deduce_primes+0xac>
        for( iter = 1; iter <= order; ++iter )
 801cfcc:	46c1      	mov	r9, r8
 801cfce:	e7a8      	b.n	801cf22 <mbedtls_rsa_deduce_primes+0x152>
    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 801cfd0:	f06f 0503 	mvn.w	r5, #3
 801cfd4:	e752      	b.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
 801cfd6:	f06f 0503 	mvn.w	r5, #3
 801cfda:	e74f      	b.n	801ce7c <mbedtls_rsa_deduce_primes+0xac>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 801cfdc:	f06f 0503 	mvn.w	r5, #3
 801cfe0:	e752      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801cfe2:	f06f 0503 	mvn.w	r5, #3
 801cfe6:	e74f      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801cfe8:	f06f 0503 	mvn.w	r5, #3
 801cfec:	e74c      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801cfee:	f06f 0503 	mvn.w	r5, #3
 801cff2:	e749      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 801cff4:	f06f 0503 	mvn.w	r5, #3
 801cff8:	e746      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801cffa:	f06f 0503 	mvn.w	r5, #3
 801cffe:	e743      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801d000:	f06f 0503 	mvn.w	r5, #3
 801d004:	e740      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801d006:	f06f 0503 	mvn.w	r5, #3
 801d00a:	e73d      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801d00c:	f06f 0503 	mvn.w	r5, #3
 801d010:	e73a      	b.n	801ce88 <mbedtls_rsa_deduce_primes+0xb8>
 801d012:	bf00      	nop
 801d014:	08032ee0 	.word	0x08032ee0

0801d018 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 801d018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d01a:	b087      	sub	sp, #28
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d059      	beq.n	801d0d4 <mbedtls_rsa_deduce_private_exponent+0xbc>
 801d020:	4604      	mov	r4, r0
 801d022:	460f      	mov	r7, r1
 801d024:	4616      	mov	r6, r2
 801d026:	461d      	mov	r5, r3
 801d028:	2100      	movs	r1, #0
 801d02a:	4618      	mov	r0, r3
 801d02c:	f7f5 fe91 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d030:	2800      	cmp	r0, #0
 801d032:	d152      	bne.n	801d0da <mbedtls_rsa_deduce_private_exponent+0xc2>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801d034:	2101      	movs	r1, #1
 801d036:	4620      	mov	r0, r4
 801d038:	f7f5 fe8b 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d03c:	2800      	cmp	r0, #0
 801d03e:	dd4f      	ble.n	801d0e0 <mbedtls_rsa_deduce_private_exponent+0xc8>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 801d040:	2101      	movs	r1, #1
 801d042:	4638      	mov	r0, r7
 801d044:	f7f5 fe85 	bl	8012d52 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801d048:	2800      	cmp	r0, #0
 801d04a:	dd4c      	ble.n	801d0e6 <mbedtls_rsa_deduce_private_exponent+0xce>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 801d04c:	2100      	movs	r1, #0
 801d04e:	4630      	mov	r0, r6
 801d050:	f7f5 fe7f 	bl	8012d52 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 801d054:	2800      	cmp	r0, #0
 801d056:	d049      	beq.n	801d0ec <mbedtls_rsa_deduce_private_exponent+0xd4>
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 801d058:	a803      	add	r0, sp, #12
 801d05a:	f7f5 fae6 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 801d05e:	4668      	mov	r0, sp
 801d060:	f7f5 fae3 	bl	801262a <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 801d064:	2201      	movs	r2, #1
 801d066:	4621      	mov	r1, r4
 801d068:	a803      	add	r0, sp, #12
 801d06a:	f7f5 ff84 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d06e:	4604      	mov	r4, r0
 801d070:	b140      	cbz	r0, 801d084 <mbedtls_rsa_deduce_private_exponent+0x6c>
    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );

cleanup:

    mbedtls_mpi_free( &K );
 801d072:	a803      	add	r0, sp, #12
 801d074:	f7f5 fadf 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801d078:	4668      	mov	r0, sp
 801d07a:	f7f5 fadc 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 801d07e:	4620      	mov	r0, r4
 801d080:	b007      	add	sp, #28
 801d082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 801d084:	2201      	movs	r2, #1
 801d086:	4639      	mov	r1, r7
 801d088:	4668      	mov	r0, sp
 801d08a:	f7f5 ff74 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d08e:	4604      	mov	r4, r0
 801d090:	2800      	cmp	r0, #0
 801d092:	d1ee      	bne.n	801d072 <mbedtls_rsa_deduce_private_exponent+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 801d094:	466a      	mov	r2, sp
 801d096:	a903      	add	r1, sp, #12
 801d098:	4628      	mov	r0, r5
 801d09a:	f7f6 fcd3 	bl	8013a44 <mbedtls_mpi_gcd>
 801d09e:	4604      	mov	r4, r0
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	d1e6      	bne.n	801d072 <mbedtls_rsa_deduce_private_exponent+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 801d0a4:	466a      	mov	r2, sp
 801d0a6:	a903      	add	r1, sp, #12
 801d0a8:	4608      	mov	r0, r1
 801d0aa:	f7f5 ff7b 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801d0ae:	4604      	mov	r4, r0
 801d0b0:	2800      	cmp	r0, #0
 801d0b2:	d1de      	bne.n	801d072 <mbedtls_rsa_deduce_private_exponent+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 801d0b4:	462b      	mov	r3, r5
 801d0b6:	aa03      	add	r2, sp, #12
 801d0b8:	2100      	movs	r1, #0
 801d0ba:	4610      	mov	r0, r2
 801d0bc:	f7f5 ffe8 	bl	8013090 <mbedtls_mpi_div_mpi>
 801d0c0:	4604      	mov	r4, r0
 801d0c2:	2800      	cmp	r0, #0
 801d0c4:	d1d5      	bne.n	801d072 <mbedtls_rsa_deduce_private_exponent+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 801d0c6:	aa03      	add	r2, sp, #12
 801d0c8:	4631      	mov	r1, r6
 801d0ca:	4628      	mov	r0, r5
 801d0cc:	f7f6 fd7a 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 801d0d0:	4604      	mov	r4, r0
cleanup:
 801d0d2:	e7ce      	b.n	801d072 <mbedtls_rsa_deduce_private_exponent+0x5a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 801d0d4:	f06f 0403 	mvn.w	r4, #3
 801d0d8:	e7d1      	b.n	801d07e <mbedtls_rsa_deduce_private_exponent+0x66>
 801d0da:	f06f 0403 	mvn.w	r4, #3
 801d0de:	e7ce      	b.n	801d07e <mbedtls_rsa_deduce_private_exponent+0x66>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 801d0e0:	f06f 0403 	mvn.w	r4, #3
 801d0e4:	e7cb      	b.n	801d07e <mbedtls_rsa_deduce_private_exponent+0x66>
 801d0e6:	f06f 0403 	mvn.w	r4, #3
 801d0ea:	e7c8      	b.n	801d07e <mbedtls_rsa_deduce_private_exponent+0x66>
 801d0ec:	f06f 0403 	mvn.w	r4, #3
 801d0f0:	e7c5      	b.n	801d07e <mbedtls_rsa_deduce_private_exponent+0x66>
	...

0801d0f4 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 801d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0f8:	b086      	sub	sp, #24
 801d0fa:	4604      	mov	r4, r0
 801d0fc:	4688      	mov	r8, r1
 801d0fe:	4617      	mov	r7, r2
 801d100:	461d      	mov	r5, r3
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 801d102:	a803      	add	r0, sp, #12
 801d104:	f7f5 fa91 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 801d108:	4668      	mov	r0, sp
 801d10a:	f7f5 fa8e 	bl	801262a <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 801d10e:	b385      	cbz	r5, 801d172 <mbedtls_rsa_validate_crt+0x7e>
    {
        if( P == NULL )
 801d110:	2c00      	cmp	r4, #0
 801d112:	d075      	beq.n	801d200 <mbedtls_rsa_validate_crt+0x10c>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 801d114:	2201      	movs	r2, #1
 801d116:	4621      	mov	r1, r4
 801d118:	a803      	add	r0, sp, #12
 801d11a:	f7f5 ff2c 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d11e:	4606      	mov	r6, r0
 801d120:	b188      	cbz	r0, 801d146 <mbedtls_rsa_validate_crt+0x52>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 801d122:	f516 4f84 	cmn.w	r6, #16896	; 0x4200
 801d126:	d004      	beq.n	801d132 <mbedtls_rsa_validate_crt+0x3e>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 801d128:	f516 4f81 	cmn.w	r6, #16512	; 0x4080
 801d12c:	d001      	beq.n	801d132 <mbedtls_rsa_validate_crt+0x3e>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801d12e:	f5a6 4684 	sub.w	r6, r6, #16896	; 0x4200
    }

    mbedtls_mpi_free( &K );
 801d132:	a803      	add	r0, sp, #12
 801d134:	f7f5 fa7f 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801d138:	4668      	mov	r0, sp
 801d13a:	f7f5 fa7c 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 801d13e:	4630      	mov	r0, r6
 801d140:	b006      	add	sp, #24
 801d142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 801d146:	463a      	mov	r2, r7
 801d148:	4629      	mov	r1, r5
 801d14a:	4668      	mov	r0, sp
 801d14c:	f7f5 fed4 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801d150:	4606      	mov	r6, r0
 801d152:	2800      	cmp	r0, #0
 801d154:	d1e5      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801d156:	aa03      	add	r2, sp, #12
 801d158:	4669      	mov	r1, sp
 801d15a:	4668      	mov	r0, sp
 801d15c:	f7f6 f9cb 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d160:	4606      	mov	r6, r0
 801d162:	2800      	cmp	r0, #0
 801d164:	d1dd      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 801d166:	2100      	movs	r1, #0
 801d168:	4668      	mov	r0, sp
 801d16a:	f7f5 fdf2 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d16e:	2800      	cmp	r0, #0
 801d170:	d148      	bne.n	801d204 <mbedtls_rsa_validate_crt+0x110>
    if( DQ != NULL )
 801d172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d174:	b1fb      	cbz	r3, 801d1b6 <mbedtls_rsa_validate_crt+0xc2>
        if( Q == NULL )
 801d176:	f1b8 0f00 	cmp.w	r8, #0
 801d17a:	d041      	beq.n	801d200 <mbedtls_rsa_validate_crt+0x10c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 801d17c:	2201      	movs	r2, #1
 801d17e:	4641      	mov	r1, r8
 801d180:	a803      	add	r0, sp, #12
 801d182:	f7f5 fef8 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d186:	4606      	mov	r6, r0
 801d188:	2800      	cmp	r0, #0
 801d18a:	d1ca      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 801d18c:	463a      	mov	r2, r7
 801d18e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d190:	4668      	mov	r0, sp
 801d192:	f7f5 feb1 	bl	8012ef8 <mbedtls_mpi_sub_mpi>
 801d196:	4606      	mov	r6, r0
 801d198:	2800      	cmp	r0, #0
 801d19a:	d1c2      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 801d19c:	aa03      	add	r2, sp, #12
 801d19e:	4669      	mov	r1, sp
 801d1a0:	4668      	mov	r0, sp
 801d1a2:	f7f6 f9a8 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d1a6:	4606      	mov	r6, r0
 801d1a8:	2800      	cmp	r0, #0
 801d1aa:	d1ba      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 801d1ac:	2100      	movs	r1, #0
 801d1ae:	4668      	mov	r0, sp
 801d1b0:	f7f5 fdcf 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d1b4:	bb30      	cbnz	r0, 801d204 <mbedtls_rsa_validate_crt+0x110>
    if( QP != NULL )
 801d1b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1b8:	b303      	cbz	r3, 801d1fc <mbedtls_rsa_validate_crt+0x108>
        if( P == NULL || Q == NULL )
 801d1ba:	b30c      	cbz	r4, 801d200 <mbedtls_rsa_validate_crt+0x10c>
 801d1bc:	f1b8 0f00 	cmp.w	r8, #0
 801d1c0:	d01e      	beq.n	801d200 <mbedtls_rsa_validate_crt+0x10c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 801d1c2:	4642      	mov	r2, r8
 801d1c4:	4619      	mov	r1, r3
 801d1c6:	a803      	add	r0, sp, #12
 801d1c8:	f7f5 feec 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801d1cc:	4606      	mov	r6, r0
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	d1a7      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	a903      	add	r1, sp, #12
 801d1d6:	4608      	mov	r0, r1
 801d1d8:	f7f5 fecd 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d1dc:	4606      	mov	r6, r0
 801d1de:	2800      	cmp	r0, #0
 801d1e0:	d19f      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 801d1e2:	4622      	mov	r2, r4
 801d1e4:	a903      	add	r1, sp, #12
 801d1e6:	4608      	mov	r0, r1
 801d1e8:	f7f6 f985 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d1ec:	4606      	mov	r6, r0
 801d1ee:	2800      	cmp	r0, #0
 801d1f0:	d197      	bne.n	801d122 <mbedtls_rsa_validate_crt+0x2e>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 801d1f2:	2100      	movs	r1, #0
 801d1f4:	a803      	add	r0, sp, #12
 801d1f6:	f7f5 fdac 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d1fa:	b918      	cbnz	r0, 801d204 <mbedtls_rsa_validate_crt+0x110>
{
 801d1fc:	2600      	movs	r6, #0
 801d1fe:	e798      	b.n	801d132 <mbedtls_rsa_validate_crt+0x3e>
 801d200:	4e01      	ldr	r6, [pc, #4]	; (801d208 <mbedtls_rsa_validate_crt+0x114>)
 801d202:	e796      	b.n	801d132 <mbedtls_rsa_validate_crt+0x3e>
 801d204:	4e01      	ldr	r6, [pc, #4]	; (801d20c <mbedtls_rsa_validate_crt+0x118>)
 801d206:	e794      	b.n	801d132 <mbedtls_rsa_validate_crt+0x3e>
 801d208:	ffffbf80 	.word	0xffffbf80
 801d20c:	ffffbe00 	.word	0xffffbe00

0801d210 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 801d210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d214:	b086      	sub	sp, #24
 801d216:	4680      	mov	r8, r0
 801d218:	460c      	mov	r4, r1
 801d21a:	4615      	mov	r5, r2
 801d21c:	461e      	mov	r6, r3
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 801d21e:	a803      	add	r0, sp, #12
 801d220:	f7f5 fa03 	bl	801262a <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 801d224:	4668      	mov	r0, sp
 801d226:	f7f5 fa00 	bl	801262a <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 801d22a:	2c00      	cmp	r4, #0
 801d22c:	f000 80a3 	beq.w	801d376 <mbedtls_rsa_validate_params+0x166>
 801d230:	2d00      	cmp	r5, #0
 801d232:	f000 809c 	beq.w	801d36e <mbedtls_rsa_validate_params+0x15e>
 801d236:	f1b8 0f00 	cmp.w	r8, #0
 801d23a:	d038      	beq.n	801d2ae <mbedtls_rsa_validate_params+0x9e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 801d23c:	462a      	mov	r2, r5
 801d23e:	4621      	mov	r1, r4
 801d240:	a803      	add	r0, sp, #12
 801d242:	f7f5 feaf 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801d246:	4607      	mov	r7, r0
 801d248:	b158      	cbz	r0, 801d262 <mbedtls_rsa_validate_params+0x52>
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 801d24a:	a803      	add	r0, sp, #12
 801d24c:	f7f5 f9f3 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801d250:	4668      	mov	r0, sp
 801d252:	f7f5 f9f0 	bl	8012636 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 801d256:	f517 4f84 	cmn.w	r7, #16896	; 0x4200
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 801d25a:	bf18      	it	ne
 801d25c:	f5a7 4784 	subne.w	r7, r7, #16896	; 0x4200
 801d260:	e01f      	b.n	801d2a2 <mbedtls_rsa_validate_params+0x92>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 801d262:	2101      	movs	r1, #1
 801d264:	4640      	mov	r0, r8
 801d266:	f7f5 fd74 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d26a:	2800      	cmp	r0, #0
 801d26c:	f340 809e 	ble.w	801d3ac <mbedtls_rsa_validate_params+0x19c>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 801d270:	4641      	mov	r1, r8
 801d272:	a803      	add	r0, sp, #12
 801d274:	f7f5 fd15 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 801d278:	2800      	cmp	r0, #0
 801d27a:	f040 8097 	bne.w	801d3ac <mbedtls_rsa_validate_params+0x19c>
    if( N != NULL && D != NULL && E != NULL )
 801d27e:	2e00      	cmp	r6, #0
 801d280:	d17e      	bne.n	801d380 <mbedtls_rsa_validate_params+0x170>
 801d282:	e007      	b.n	801d294 <mbedtls_rsa_validate_params+0x84>
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 801d284:	4641      	mov	r1, r8
 801d286:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d288:	f7f5 fd0b 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 801d28c:	2800      	cmp	r0, #0
 801d28e:	f280 808d 	bge.w	801d3ac <mbedtls_rsa_validate_params+0x19c>
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 801d292:	b954      	cbnz	r4, 801d2aa <mbedtls_rsa_validate_params+0x9a>
    mbedtls_mpi_free( &K );
 801d294:	a803      	add	r0, sp, #12
 801d296:	f7f5 f9ce 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801d29a:	4668      	mov	r0, sp
 801d29c:	f7f5 f9cb 	bl	8012636 <mbedtls_mpi_free>
 801d2a0:	2700      	movs	r7, #0
    }

    return( ret );
}
 801d2a2:	4638      	mov	r0, r7
 801d2a4:	b006      	add	sp, #24
 801d2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 801d2aa:	2d00      	cmp	r5, #0
 801d2ac:	d0f2      	beq.n	801d294 <mbedtls_rsa_validate_params+0x84>
 801d2ae:	2e00      	cmp	r6, #0
 801d2b0:	d0f0      	beq.n	801d294 <mbedtls_rsa_validate_params+0x84>
 801d2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d0ed      	beq.n	801d294 <mbedtls_rsa_validate_params+0x84>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801d2b8:	2101      	movs	r1, #1
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	f7f5 fd49 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d2c0:	2800      	cmp	r0, #0
 801d2c2:	dd73      	ble.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 801d2c4:	2101      	movs	r1, #1
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	f7f5 fd43 	bl	8012d52 <mbedtls_mpi_cmp_int>
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 801d2cc:	2800      	cmp	r0, #0
 801d2ce:	dd6d      	ble.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 801d2d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2d2:	4631      	mov	r1, r6
 801d2d4:	a803      	add	r0, sp, #12
 801d2d6:	f7f5 fe65 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801d2da:	4607      	mov	r7, r0
 801d2dc:	2800      	cmp	r0, #0
 801d2de:	d1b4      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801d2e0:	2201      	movs	r2, #1
 801d2e2:	a903      	add	r1, sp, #12
 801d2e4:	4608      	mov	r0, r1
 801d2e6:	f7f5 fe46 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d2ea:	4607      	mov	r7, r0
 801d2ec:	2800      	cmp	r0, #0
 801d2ee:	d1ac      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 801d2f0:	2201      	movs	r2, #1
 801d2f2:	4621      	mov	r1, r4
 801d2f4:	4668      	mov	r0, sp
 801d2f6:	f7f5 fe3e 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d2fa:	4607      	mov	r7, r0
 801d2fc:	2800      	cmp	r0, #0
 801d2fe:	d1a4      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 801d300:	466a      	mov	r2, sp
 801d302:	a903      	add	r1, sp, #12
 801d304:	4608      	mov	r0, r1
 801d306:	f7f6 f8f6 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d30a:	4607      	mov	r7, r0
 801d30c:	2800      	cmp	r0, #0
 801d30e:	d19c      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 801d310:	2100      	movs	r1, #0
 801d312:	a803      	add	r0, sp, #12
 801d314:	f7f5 fd1d 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d318:	2800      	cmp	r0, #0
 801d31a:	d147      	bne.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 801d31c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d31e:	4631      	mov	r1, r6
 801d320:	a803      	add	r0, sp, #12
 801d322:	f7f5 fe3f 	bl	8012fa4 <mbedtls_mpi_mul_mpi>
 801d326:	4607      	mov	r7, r0
 801d328:	2800      	cmp	r0, #0
 801d32a:	d18e      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 801d32c:	2201      	movs	r2, #1
 801d32e:	a903      	add	r1, sp, #12
 801d330:	4608      	mov	r0, r1
 801d332:	f7f5 fe20 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d336:	4607      	mov	r7, r0
 801d338:	2800      	cmp	r0, #0
 801d33a:	d186      	bne.n	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 801d33c:	2201      	movs	r2, #1
 801d33e:	4629      	mov	r1, r5
 801d340:	4668      	mov	r0, sp
 801d342:	f7f5 fe18 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d346:	4607      	mov	r7, r0
 801d348:	2800      	cmp	r0, #0
 801d34a:	f47f af7e 	bne.w	801d24a <mbedtls_rsa_validate_params+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 801d34e:	466a      	mov	r2, sp
 801d350:	a903      	add	r1, sp, #12
 801d352:	4608      	mov	r0, r1
 801d354:	f7f6 f8cf 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d358:	4607      	mov	r7, r0
 801d35a:	2800      	cmp	r0, #0
 801d35c:	f47f af75 	bne.w	801d24a <mbedtls_rsa_validate_params+0x3a>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 801d360:	2100      	movs	r1, #0
 801d362:	a803      	add	r0, sp, #12
 801d364:	f7f5 fcf5 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d368:	2800      	cmp	r0, #0
 801d36a:	d093      	beq.n	801d294 <mbedtls_rsa_validate_params+0x84>
 801d36c:	e01e      	b.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
    if( N != NULL && D != NULL && E != NULL )
 801d36e:	f1b8 0f00 	cmp.w	r8, #0
 801d372:	d103      	bne.n	801d37c <mbedtls_rsa_validate_params+0x16c>
 801d374:	e78e      	b.n	801d294 <mbedtls_rsa_validate_params+0x84>
 801d376:	f1b8 0f00 	cmp.w	r8, #0
 801d37a:	d08b      	beq.n	801d294 <mbedtls_rsa_validate_params+0x84>
 801d37c:	2e00      	cmp	r6, #0
 801d37e:	d088      	beq.n	801d292 <mbedtls_rsa_validate_params+0x82>
 801d380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d382:	2b00      	cmp	r3, #0
 801d384:	d085      	beq.n	801d292 <mbedtls_rsa_validate_params+0x82>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801d386:	2101      	movs	r1, #1
 801d388:	4630      	mov	r0, r6
 801d38a:	f7f5 fce2 	bl	8012d52 <mbedtls_mpi_cmp_int>
 801d38e:	2800      	cmp	r0, #0
 801d390:	dd0c      	ble.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801d392:	2101      	movs	r1, #1
 801d394:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d396:	f7f5 fcdc 	bl	8012d52 <mbedtls_mpi_cmp_int>
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 801d39a:	2800      	cmp	r0, #0
 801d39c:	dd06      	ble.n	801d3ac <mbedtls_rsa_validate_params+0x19c>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 801d39e:	4641      	mov	r1, r8
 801d3a0:	4630      	mov	r0, r6
 801d3a2:	f7f5 fc7e 	bl	8012ca2 <mbedtls_mpi_cmp_mpi>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	f6ff af6c 	blt.w	801d284 <mbedtls_rsa_validate_params+0x74>
    mbedtls_mpi_free( &K );
 801d3ac:	a803      	add	r0, sp, #12
 801d3ae:	f7f5 f942 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 801d3b2:	4668      	mov	r0, sp
 801d3b4:	f7f5 f93f 	bl	8012636 <mbedtls_mpi_free>
 801d3b8:	4f00      	ldr	r7, [pc, #0]	; (801d3bc <mbedtls_rsa_validate_params+0x1ac>)
 801d3ba:	e772      	b.n	801d2a2 <mbedtls_rsa_validate_params+0x92>
 801d3bc:	ffffbe00 	.word	0xffffbe00

0801d3c0 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 801d3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3c4:	b084      	sub	sp, #16
 801d3c6:	4680      	mov	r8, r0
 801d3c8:	460f      	mov	r7, r1
 801d3ca:	4616      	mov	r6, r2
 801d3cc:	461c      	mov	r4, r3
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 801d3ce:	a801      	add	r0, sp, #4
 801d3d0:	f7f5 f92b 	bl	801262a <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 801d3d4:	b1ac      	cbz	r4, 801d402 <mbedtls_rsa_deduce_crt+0x42>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 801d3d6:	2201      	movs	r2, #1
 801d3d8:	4641      	mov	r1, r8
 801d3da:	a801      	add	r0, sp, #4
 801d3dc:	f7f5 fdcb 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d3e0:	4605      	mov	r5, r0
 801d3e2:	b130      	cbz	r0, 801d3f2 <mbedtls_rsa_deduce_crt+0x32>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
    }

cleanup:
    mbedtls_mpi_free( &K );
 801d3e4:	a801      	add	r0, sp, #4
 801d3e6:	f7f5 f926 	bl	8012636 <mbedtls_mpi_free>

    return( ret );
}
 801d3ea:	4628      	mov	r0, r5
 801d3ec:	b004      	add	sp, #16
 801d3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 801d3f2:	aa01      	add	r2, sp, #4
 801d3f4:	4631      	mov	r1, r6
 801d3f6:	4620      	mov	r0, r4
 801d3f8:	f7f6 f87d 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d3fc:	4605      	mov	r5, r0
 801d3fe:	2800      	cmp	r0, #0
 801d400:	d1f0      	bne.n	801d3e4 <mbedtls_rsa_deduce_crt+0x24>
    if( DQ != NULL )
 801d402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d404:	b17b      	cbz	r3, 801d426 <mbedtls_rsa_deduce_crt+0x66>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 801d406:	2201      	movs	r2, #1
 801d408:	4639      	mov	r1, r7
 801d40a:	a801      	add	r0, sp, #4
 801d40c:	f7f5 fdb3 	bl	8012f76 <mbedtls_mpi_sub_int>
 801d410:	4605      	mov	r5, r0
 801d412:	2800      	cmp	r0, #0
 801d414:	d1e6      	bne.n	801d3e4 <mbedtls_rsa_deduce_crt+0x24>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 801d416:	aa01      	add	r2, sp, #4
 801d418:	4631      	mov	r1, r6
 801d41a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d41c:	f7f6 f86b 	bl	80134f6 <mbedtls_mpi_mod_mpi>
 801d420:	4605      	mov	r5, r0
 801d422:	2800      	cmp	r0, #0
 801d424:	d1de      	bne.n	801d3e4 <mbedtls_rsa_deduce_crt+0x24>
    if( QP != NULL )
 801d426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d428:	b133      	cbz	r3, 801d438 <mbedtls_rsa_deduce_crt+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 801d42a:	4642      	mov	r2, r8
 801d42c:	4639      	mov	r1, r7
 801d42e:	4618      	mov	r0, r3
 801d430:	f7f6 fbc8 	bl	8013bc4 <mbedtls_mpi_inv_mod>
 801d434:	4605      	mov	r5, r0
cleanup:
 801d436:	e7d5      	b.n	801d3e4 <mbedtls_rsa_deduce_crt+0x24>
 801d438:	2500      	movs	r5, #0
 801d43a:	e7d3      	b.n	801d3e4 <mbedtls_rsa_deduce_crt+0x24>

0801d43c <mbedtls_sha1_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
 801d43c:	b508      	push	{r3, lr}
    SHA1_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 801d43e:	225c      	movs	r2, #92	; 0x5c
 801d440:	2100      	movs	r1, #0
 801d442:	f00d f8a2 	bl	802a58a <memset>
}
 801d446:	bd08      	pop	{r3, pc}

0801d448 <mbedtls_sha1_free>:

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 801d448:	b120      	cbz	r0, 801d454 <mbedtls_sha1_free+0xc>
{
 801d44a:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
 801d44c:	215c      	movs	r1, #92	; 0x5c
 801d44e:	f7fd fd79 	bl	801af44 <mbedtls_platform_zeroize>
}
 801d452:	bd08      	pop	{r3, pc}
 801d454:	4770      	bx	lr

0801d456 <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 801d456:	b508      	push	{r3, lr}
    SHA1_VALIDATE( dst != NULL );
    SHA1_VALIDATE( src != NULL );

    *dst = *src;
 801d458:	225c      	movs	r2, #92	; 0x5c
 801d45a:	f00d f86e 	bl	802a53a <memcpy>
}
 801d45e:	bd08      	pop	{r3, pc}

0801d460 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 801d460:	4603      	mov	r3, r0
    SHA1_VALIDATE_RET( ctx != NULL );

    ctx->total[0] = 0;
 801d462:	2000      	movs	r0, #0
 801d464:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 801d466:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
 801d468:	4a08      	ldr	r2, [pc, #32]	; (801d48c <mbedtls_sha1_starts_ret+0x2c>)
 801d46a:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 801d46c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 801d470:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 801d472:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 801d476:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 801d47a:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 801d47e:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 801d480:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 801d484:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 801d486:	4a02      	ldr	r2, [pc, #8]	; (801d490 <mbedtls_sha1_starts_ret+0x30>)
 801d488:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 801d48a:	4770      	bx	lr
 801d48c:	67452301 	.word	0x67452301
 801d490:	c3d2e1f0 	.word	0xc3d2e1f0

0801d494 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 801d494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d498:	b09b      	sub	sp, #108	; 0x6c
 801d49a:	4682      	mov	sl, r0
    uint32_t temp, W[16], A, B, C, D, E;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( (const unsigned char *)data != NULL );

    GET_UINT32_BE( W[ 0], data,  0 );
 801d49c:	780b      	ldrb	r3, [r1, #0]
 801d49e:	784d      	ldrb	r5, [r1, #1]
 801d4a0:	042d      	lsls	r5, r5, #16
 801d4a2:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 801d4a6:	78cb      	ldrb	r3, [r1, #3]
 801d4a8:	431d      	orrs	r5, r3
 801d4aa:	788b      	ldrb	r3, [r1, #2]
 801d4ac:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
 801d4b0:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[ 1], data,  4 );
 801d4b2:	790b      	ldrb	r3, [r1, #4]
 801d4b4:	794d      	ldrb	r5, [r1, #5]
 801d4b6:	042d      	lsls	r5, r5, #16
 801d4b8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 801d4bc:	79cb      	ldrb	r3, [r1, #7]
 801d4be:	431d      	orrs	r5, r3
 801d4c0:	798b      	ldrb	r3, [r1, #6]
 801d4c2:	ea45 2203 	orr.w	r2, r5, r3, lsl #8
 801d4c6:	920d      	str	r2, [sp, #52]	; 0x34
    GET_UINT32_BE( W[ 2], data,  8 );
 801d4c8:	7a0b      	ldrb	r3, [r1, #8]
 801d4ca:	7a4a      	ldrb	r2, [r1, #9]
 801d4cc:	0412      	lsls	r2, r2, #16
 801d4ce:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801d4d2:	7acb      	ldrb	r3, [r1, #11]
 801d4d4:	431a      	orrs	r2, r3
 801d4d6:	7a8b      	ldrb	r3, [r1, #10]
 801d4d8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 801d4dc:	7b0b      	ldrb	r3, [r1, #12]
 801d4de:	f891 900d 	ldrb.w	r9, [r1, #13]
 801d4e2:	ea4f 4909 	mov.w	r9, r9, lsl #16
 801d4e6:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
 801d4ea:	7bcb      	ldrb	r3, [r1, #15]
 801d4ec:	ea49 0903 	orr.w	r9, r9, r3
 801d4f0:	7b8b      	ldrb	r3, [r1, #14]
 801d4f2:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 801d4f6:	7c08      	ldrb	r0, [r1, #16]
 801d4f8:	7c4b      	ldrb	r3, [r1, #17]
 801d4fa:	041b      	lsls	r3, r3, #16
 801d4fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801d500:	7cc8      	ldrb	r0, [r1, #19]
 801d502:	4303      	orrs	r3, r0
 801d504:	7c88      	ldrb	r0, [r1, #18]
 801d506:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801d50a:	9308      	str	r3, [sp, #32]
    GET_UINT32_BE( W[ 5], data, 20 );
 801d50c:	7d0b      	ldrb	r3, [r1, #20]
 801d50e:	7d48      	ldrb	r0, [r1, #21]
 801d510:	0400      	lsls	r0, r0, #16
 801d512:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801d516:	7dcb      	ldrb	r3, [r1, #23]
 801d518:	4318      	orrs	r0, r3
 801d51a:	7d8b      	ldrb	r3, [r1, #22]
 801d51c:	ea40 2403 	orr.w	r4, r0, r3, lsl #8
 801d520:	9409      	str	r4, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 6], data, 24 );
 801d522:	7e0b      	ldrb	r3, [r1, #24]
 801d524:	f891 e019 	ldrb.w	lr, [r1, #25]
 801d528:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 801d52c:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
 801d530:	7ecb      	ldrb	r3, [r1, #27]
 801d532:	ea4e 0e03 	orr.w	lr, lr, r3
 801d536:	7e8b      	ldrb	r3, [r1, #26]
 801d538:	ea4e 2503 	orr.w	r5, lr, r3, lsl #8
 801d53c:	950a      	str	r5, [sp, #40]	; 0x28
    GET_UINT32_BE( W[ 7], data, 28 );
 801d53e:	7f0b      	ldrb	r3, [r1, #28]
 801d540:	7f4d      	ldrb	r5, [r1, #29]
 801d542:	042d      	lsls	r5, r5, #16
 801d544:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 801d548:	7fcb      	ldrb	r3, [r1, #31]
 801d54a:	431d      	orrs	r5, r3
 801d54c:	7f8b      	ldrb	r3, [r1, #30]
 801d54e:	ea45 2703 	orr.w	r7, r5, r3, lsl #8
 801d552:	970f      	str	r7, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 8], data, 32 );
 801d554:	f891 0020 	ldrb.w	r0, [r1, #32]
 801d558:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 801d55c:	041b      	lsls	r3, r3, #16
 801d55e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801d562:	f891 0023 	ldrb.w	r0, [r1, #35]	; 0x23
 801d566:	4303      	orrs	r3, r0
 801d568:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
 801d56c:	ea43 2c00 	orr.w	ip, r3, r0, lsl #8
 801d570:	f8cd c008 	str.w	ip, [sp, #8]
    GET_UINT32_BE( W[ 9], data, 36 );
 801d574:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 801d578:	f891 c025 	ldrb.w	ip, [r1, #37]	; 0x25
 801d57c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 801d580:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
 801d584:	f891 3027 	ldrb.w	r3, [r1, #39]	; 0x27
 801d588:	ea4c 0c03 	orr.w	ip, ip, r3
 801d58c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801d590:	ea4c 2403 	orr.w	r4, ip, r3, lsl #8
 801d594:	9403      	str	r4, [sp, #12]
    GET_UINT32_BE( W[10], data, 40 );
 801d596:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d59a:	f891 6029 	ldrb.w	r6, [r1, #41]	; 0x29
 801d59e:	0436      	lsls	r6, r6, #16
 801d5a0:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
 801d5a4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 801d5a8:	431e      	orrs	r6, r3
 801d5aa:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 801d5ae:	ea46 2503 	orr.w	r5, r6, r3, lsl #8
 801d5b2:	9504      	str	r5, [sp, #16]
    GET_UINT32_BE( W[11], data, 44 );
 801d5b4:	f891 602c 	ldrb.w	r6, [r1, #44]	; 0x2c
 801d5b8:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 801d5bc:	041b      	lsls	r3, r3, #16
 801d5be:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 801d5c2:	f891 602f 	ldrb.w	r6, [r1, #47]	; 0x2f
 801d5c6:	431e      	orrs	r6, r3
 801d5c8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
 801d5cc:	ea46 2c03 	orr.w	ip, r6, r3, lsl #8
 801d5d0:	f8cd c014 	str.w	ip, [sp, #20]
    GET_UINT32_BE( W[12], data, 48 );
 801d5d4:	f891 7030 	ldrb.w	r7, [r1, #48]	; 0x30
 801d5d8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 801d5dc:	041b      	lsls	r3, r3, #16
 801d5de:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 801d5e2:	f891 7033 	ldrb.w	r7, [r1, #51]	; 0x33
 801d5e6:	431f      	orrs	r7, r3
 801d5e8:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801d5ec:	ea47 2c03 	orr.w	ip, r7, r3, lsl #8
 801d5f0:	f8cd c018 	str.w	ip, [sp, #24]
    GET_UINT32_BE( W[13], data, 52 );
 801d5f4:	f891 8034 	ldrb.w	r8, [r1, #52]	; 0x34
 801d5f8:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801d5fc:	041b      	lsls	r3, r3, #16
 801d5fe:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 801d602:	f891 8037 	ldrb.w	r8, [r1, #55]	; 0x37
 801d606:	ea43 0808 	orr.w	r8, r3, r8
 801d60a:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 801d60e:	ea48 2c03 	orr.w	ip, r8, r3, lsl #8
 801d612:	f8cd c000 	str.w	ip, [sp]
    GET_UINT32_BE( W[14], data, 56 );
 801d616:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
 801d61a:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 801d61e:	041b      	lsls	r3, r3, #16
 801d620:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801d624:	f891 403b 	ldrb.w	r4, [r1, #59]	; 0x3b
 801d628:	431c      	orrs	r4, r3
 801d62a:	f891 e03a 	ldrb.w	lr, [r1, #58]	; 0x3a
 801d62e:	ea44 2c0e 	orr.w	ip, r4, lr, lsl #8
 801d632:	f8cd c004 	str.w	ip, [sp, #4]
    GET_UINT32_BE( W[15], data, 60 );
 801d636:	f891 403c 	ldrb.w	r4, [r1, #60]	; 0x3c
 801d63a:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 801d63e:	041b      	lsls	r3, r3, #16
 801d640:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801d644:	f891 403f 	ldrb.w	r4, [r1, #63]	; 0x3f
 801d648:	431c      	orrs	r4, r3
 801d64a:	f891 503e 	ldrb.w	r5, [r1, #62]	; 0x3e
 801d64e:	ea44 2c05 	orr.w	ip, r4, r5, lsl #8
 801d652:	f8cd c01c 	str.w	ip, [sp, #28]
    {                                                           \
        (e) += S((a),5) + F((b),(c),(d)) + K + (x);             \
        (b) = S((b),30);                                        \
    } while( 0 )

    A = ctx->state[0];
 801d656:	f8da 0008 	ldr.w	r0, [sl, #8]
 801d65a:	4606      	mov	r6, r0
    B = ctx->state[1];
 801d65c:	f8da 400c 	ldr.w	r4, [sl, #12]
    C = ctx->state[2];
 801d660:	f8da 7010 	ldr.w	r7, [sl, #16]
    D = ctx->state[3];
 801d664:	f8da 0014 	ldr.w	r0, [sl, #20]
 801d668:	4603      	mov	r3, r0
    E = ctx->state[4];
 801d66a:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801d66e:	f8da 0018 	ldr.w	r0, [sl, #24]
 801d672:	9016      	str	r0, [sp, #88]	; 0x58

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 801d674:	ea87 0503 	eor.w	r5, r7, r3
 801d678:	4025      	ands	r5, r4
 801d67a:	9315      	str	r3, [sp, #84]	; 0x54
 801d67c:	405d      	eors	r5, r3
 801d67e:	4bde      	ldr	r3, [pc, #888]	; (801d9f8 <mbedtls_internal_sha1_process+0x564>)
 801d680:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d682:	4419      	add	r1, r3
 801d684:	960b      	str	r6, [sp, #44]	; 0x2c
 801d686:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 801d68a:	440d      	add	r5, r1
 801d68c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d68e:	440d      	add	r5, r1
    P( E, A, B, C, D, W[1]  );
 801d690:	46a6      	mov	lr, r4
 801d692:	ea87 01b4 	eor.w	r1, r7, r4, ror #2
 801d696:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801d698:	4031      	ands	r1, r6
 801d69a:	9714      	str	r7, [sp, #80]	; 0x50
 801d69c:	4079      	eors	r1, r7
 801d69e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d6a0:	4418      	add	r0, r3
 801d6a2:	4401      	add	r1, r0
 801d6a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d6a6:	4401      	add	r1, r0
 801d6a8:	eb01 61f5 	add.w	r1, r1, r5, ror #27
 801d6ac:	ea4f 00b6 	mov.w	r0, r6, ror #2
    P( D, E, A, B, C, W[2]  );
 801d6b0:	ea80 07b4 	eor.w	r7, r0, r4, ror #2
 801d6b4:	402f      	ands	r7, r5
 801d6b6:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 801d6ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6bc:	441c      	add	r4, r3
 801d6be:	4414      	add	r4, r2
 801d6c0:	4427      	add	r7, r4
 801d6c2:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( C, D, E, A, B, W[3]  );
 801d6c6:	ea80 04b5 	eor.w	r4, r0, r5, ror #2
 801d6ca:	400c      	ands	r4, r1
 801d6cc:	4044      	eors	r4, r0
 801d6ce:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 801d6d2:	eb03 06be 	add.w	r6, r3, lr, ror #2
 801d6d6:	444e      	add	r6, r9
 801d6d8:	4434      	add	r4, r6
 801d6da:	eb04 64f7 	add.w	r4, r4, r7, ror #27
 801d6de:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, W[4]  );
 801d6e2:	ea81 0cb5 	eor.w	ip, r1, r5, ror #2
 801d6e6:	ea0c 0c07 	and.w	ip, ip, r7
 801d6ea:	ea8c 0cb5 	eor.w	ip, ip, r5, ror #2
 801d6ee:	4418      	add	r0, r3
 801d6f0:	9e08      	ldr	r6, [sp, #32]
 801d6f2:	4430      	add	r0, r6
 801d6f4:	4484      	add	ip, r0
 801d6f6:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( A, B, C, D, E, W[5]  );
 801d6fa:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
 801d6fe:	4020      	ands	r0, r4
 801d700:	4048      	eors	r0, r1
 801d702:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d704:	441e      	add	r6, r3
 801d706:	eb06 05b5 	add.w	r5, r6, r5, ror #2
 801d70a:	4428      	add	r0, r5
 801d70c:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 801d710:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, W[6]  );
 801d714:	ea84 05b7 	eor.w	r5, r4, r7, ror #2
 801d718:	ea05 050c 	and.w	r5, r5, ip
 801d71c:	ea85 05b7 	eor.w	r5, r5, r7, ror #2
 801d720:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d722:	441e      	add	r6, r3
 801d724:	4431      	add	r1, r6
 801d726:	440d      	add	r5, r1
 801d728:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, W[7]  );
 801d72c:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 801d730:	4006      	ands	r6, r0
 801d732:	4066      	eors	r6, r4
 801d734:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d736:	4419      	add	r1, r3
 801d738:	eb01 07b7 	add.w	r7, r1, r7, ror #2
 801d73c:	443e      	add	r6, r7
 801d73e:	eb06 66f5 	add.w	r6, r6, r5, ror #27
 801d742:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, W[8]  );
 801d746:	ea80 01bc 	eor.w	r1, r0, ip, ror #2
 801d74a:	4029      	ands	r1, r5
 801d74c:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 801d750:	9f02      	ldr	r7, [sp, #8]
 801d752:	441f      	add	r7, r3
 801d754:	443c      	add	r4, r7
 801d756:	4421      	add	r1, r4
 801d758:	eb01 61f6 	add.w	r1, r1, r6, ror #27
    P( B, C, D, E, A, W[9]  );
 801d75c:	ea80 04b5 	eor.w	r4, r0, r5, ror #2
 801d760:	4034      	ands	r4, r6
 801d762:	4044      	eors	r4, r0
 801d764:	9f03      	ldr	r7, [sp, #12]
 801d766:	441f      	add	r7, r3
 801d768:	eb07 0cbc 	add.w	ip, r7, ip, ror #2
 801d76c:	4464      	add	r4, ip
 801d76e:	eb04 64f1 	add.w	r4, r4, r1, ror #27
 801d772:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( A, B, C, D, E, W[10] );
 801d776:	ea86 0ab5 	eor.w	sl, r6, r5, ror #2
 801d77a:	ea0a 0a01 	and.w	sl, sl, r1
 801d77e:	ea8a 0ab5 	eor.w	sl, sl, r5, ror #2
 801d782:	9f04      	ldr	r7, [sp, #16]
 801d784:	441f      	add	r7, r3
 801d786:	4438      	add	r0, r7
 801d788:	4482      	add	sl, r0
 801d78a:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( E, A, B, C, D, W[11] );
 801d78e:	ea86 08b1 	eor.w	r8, r6, r1, ror #2
 801d792:	ea08 0804 	and.w	r8, r8, r4
 801d796:	ea88 0806 	eor.w	r8, r8, r6
 801d79a:	9805      	ldr	r0, [sp, #20]
 801d79c:	4418      	add	r0, r3
 801d79e:	eb00 05b5 	add.w	r5, r0, r5, ror #2
 801d7a2:	44a8      	add	r8, r5
 801d7a4:	eb08 68fa 	add.w	r8, r8, sl, ror #27
 801d7a8:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, W[12] );
 801d7ac:	ea84 07b1 	eor.w	r7, r4, r1, ror #2
 801d7b0:	ea07 070a 	and.w	r7, r7, sl
 801d7b4:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 801d7b8:	9d06      	ldr	r5, [sp, #24]
 801d7ba:	18e8      	adds	r0, r5, r3
 801d7bc:	4406      	add	r6, r0
 801d7be:	4437      	add	r7, r6
 801d7c0:	eb07 67f8 	add.w	r7, r7, r8, ror #27
    P( C, D, E, A, B, W[13] );
 801d7c4:	ea84 0eba 	eor.w	lr, r4, sl, ror #2
 801d7c8:	ea0e 0e08 	and.w	lr, lr, r8
 801d7cc:	ea8e 0e04 	eor.w	lr, lr, r4
 801d7d0:	9e00      	ldr	r6, [sp, #0]
 801d7d2:	18f0      	adds	r0, r6, r3
 801d7d4:	eb00 01b1 	add.w	r1, r0, r1, ror #2
 801d7d8:	448e      	add	lr, r1
 801d7da:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
 801d7de:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( B, C, D, E, A, W[14] );
 801d7e2:	ea88 0bba 	eor.w	fp, r8, sl, ror #2
 801d7e6:	ea0b 0b07 	and.w	fp, fp, r7
 801d7ea:	ea8b 0bba 	eor.w	fp, fp, sl, ror #2
 801d7ee:	9d01      	ldr	r5, [sp, #4]
 801d7f0:	18e9      	adds	r1, r5, r3
 801d7f2:	440c      	add	r4, r1
 801d7f4:	44a3      	add	fp, r4
 801d7f6:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
 801d7fa:	ea88 00b7 	eor.w	r0, r8, r7, ror #2
 801d7fe:	ea00 000e 	and.w	r0, r0, lr
 801d802:	ea80 0008 	eor.w	r0, r0, r8
 801d806:	9c07      	ldr	r4, [sp, #28]
 801d808:	18e1      	adds	r1, r4, r3
 801d80a:	eb01 0aba 	add.w	sl, r1, sl, ror #2
 801d80e:	4450      	add	r0, sl
 801d810:	eb00 60fb 	add.w	r0, r0, fp, ror #27
 801d814:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( E, A, B, C, D, R(16) );
 801d818:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d81a:	ea81 0502 	eor.w	r5, r1, r2
 801d81e:	9902      	ldr	r1, [sp, #8]
 801d820:	404d      	eors	r5, r1
 801d822:	ea85 0c06 	eor.w	ip, r5, r6
 801d826:	4665      	mov	r5, ip
 801d828:	4666      	mov	r6, ip
 801d82a:	ea8e 0cb7 	eor.w	ip, lr, r7, ror #2
 801d82e:	ea0c 0c0b 	and.w	ip, ip, fp
 801d832:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 801d836:	eb03 71f5 	add.w	r1, r3, r5, ror #31
 801d83a:	4488      	add	r8, r1
 801d83c:	44c4      	add	ip, r8
 801d83e:	eb0c 6cf0 	add.w	ip, ip, r0, ror #27
    P( D, E, A, B, C, R(17) );
 801d842:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d844:	ea85 0509 	eor.w	r5, r5, r9
 801d848:	9903      	ldr	r1, [sp, #12]
 801d84a:	404d      	eors	r5, r1
 801d84c:	9c01      	ldr	r4, [sp, #4]
 801d84e:	ea85 0804 	eor.w	r8, r5, r4
 801d852:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
 801d856:	4005      	ands	r5, r0
 801d858:	ea85 050e 	eor.w	r5, r5, lr
 801d85c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801d860:	eb03 71f8 	add.w	r1, r3, r8, ror #31
 801d864:	eb01 07b7 	add.w	r7, r1, r7, ror #2
 801d868:	443d      	add	r5, r7
 801d86a:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 801d86e:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( C, D, E, A, B, R(18) );
 801d872:	9c08      	ldr	r4, [sp, #32]
 801d874:	4062      	eors	r2, r4
 801d876:	9f04      	ldr	r7, [sp, #16]
 801d878:	407a      	eors	r2, r7
 801d87a:	9f07      	ldr	r7, [sp, #28]
 801d87c:	ea82 0407 	eor.w	r4, r2, r7
 801d880:	ea4f 72f4 	mov.w	r2, r4, ror #31
 801d884:	9210      	str	r2, [sp, #64]	; 0x40
 801d886:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
 801d88a:	ea01 010c 	and.w	r1, r1, ip
 801d88e:	ea81 01bb 	eor.w	r1, r1, fp, ror #2
 801d892:	9412      	str	r4, [sp, #72]	; 0x48
 801d894:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 801d898:	44a6      	add	lr, r4
 801d89a:	4471      	add	r1, lr
 801d89c:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( B, C, D, E, A, R(19) );
 801d8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8a2:	ea89 0902 	eor.w	r9, r9, r2
 801d8a6:	9a05      	ldr	r2, [sp, #20]
 801d8a8:	ea89 0902 	eor.w	r9, r9, r2
 801d8ac:	960c      	str	r6, [sp, #48]	; 0x30
 801d8ae:	ea89 79f6 	eor.w	r9, r9, r6, ror #31
 801d8b2:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 801d8b6:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 801d8ba:	ea80 04bc 	eor.w	r4, r0, ip, ror #2
 801d8be:	402c      	ands	r4, r5
 801d8c0:	4044      	eors	r4, r0
 801d8c2:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 801d8c6:	eb03 03bb 	add.w	r3, r3, fp, ror #2
 801d8ca:	441c      	add	r4, r3
 801d8cc:	eb04 64f1 	add.w	r4, r4, r1, ror #27
 801d8d0:	ea4f 05b5 	mov.w	r5, r5, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 801d8d4:	9b08      	ldr	r3, [sp, #32]
 801d8d6:	469e      	mov	lr, r3
 801d8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8da:	ea8e 0303 	eor.w	r3, lr, r3
 801d8de:	9a06      	ldr	r2, [sp, #24]
 801d8e0:	4053      	eors	r3, r2
 801d8e2:	ea83 73f8 	eor.w	r3, r3, r8, ror #31
 801d8e6:	461a      	mov	r2, r3
 801d8e8:	ea85 06bc 	eor.w	r6, r5, ip, ror #2
 801d8ec:	404e      	eors	r6, r1
 801d8ee:	4b43      	ldr	r3, [pc, #268]	; (801d9fc <mbedtls_internal_sha1_process+0x568>)
 801d8f0:	920e      	str	r2, [sp, #56]	; 0x38
 801d8f2:	eb03 77f2 	add.w	r7, r3, r2, ror #31
 801d8f6:	4438      	add	r0, r7
 801d8f8:	4406      	add	r6, r0
 801d8fa:	eb06 66f4 	add.w	r6, r6, r4, ror #27
    P( E, A, B, C, D, R(21) );
 801d8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d902:	4050      	eors	r0, r2
 801d904:	9f00      	ldr	r7, [sp, #0]
 801d906:	4078      	eors	r0, r7
 801d908:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d90a:	ea80 70f7 	eor.w	r0, r0, r7, ror #31
 801d90e:	ea85 0ab1 	eor.w	sl, r5, r1, ror #2
 801d912:	ea8a 0a04 	eor.w	sl, sl, r4
 801d916:	9008      	str	r0, [sp, #32]
 801d918:	eb03 77f0 	add.w	r7, r3, r0, ror #31
 801d91c:	eb07 0cbc 	add.w	ip, r7, ip, ror #2
 801d920:	44e2      	add	sl, ip
 801d922:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
 801d926:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( D, E, A, B, C, R(22) );
 801d92a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d92c:	4684      	mov	ip, r0
 801d92e:	9802      	ldr	r0, [sp, #8]
 801d930:	ea8c 0e00 	eor.w	lr, ip, r0
 801d934:	9801      	ldr	r0, [sp, #4]
 801d936:	ea8e 0e00 	eor.w	lr, lr, r0
 801d93a:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801d93e:	ea4f 7cfe 	mov.w	ip, lr, ror #31
 801d942:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801d946:	ea84 07b1 	eor.w	r7, r4, r1, ror #2
 801d94a:	4077      	eors	r7, r6
 801d94c:	eb03 7cfe 	add.w	ip, r3, lr, ror #31
 801d950:	4465      	add	r5, ip
 801d952:	442f      	add	r7, r5
 801d954:	eb07 67fa 	add.w	r7, r7, sl, ror #27
    P( C, D, E, A, B, R(23) );
 801d958:	9d03      	ldr	r5, [sp, #12]
 801d95a:	4055      	eors	r5, r2
 801d95c:	9a07      	ldr	r2, [sp, #28]
 801d95e:	4055      	eors	r5, r2
 801d960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d962:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
 801d966:	ea4f 75f2 	mov.w	r5, r2, ror #31
 801d96a:	950a      	str	r5, [sp, #40]	; 0x28
 801d96c:	ea84 08b6 	eor.w	r8, r4, r6, ror #2
 801d970:	ea88 080a 	eor.w	r8, r8, sl
 801d974:	9217      	str	r2, [sp, #92]	; 0x5c
 801d976:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
 801d97a:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
 801d97e:	4488      	add	r8, r1
 801d980:	eb08 68f7 	add.w	r8, r8, r7, ror #27
 801d984:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( B, C, D, E, A, R(24) );
 801d988:	9d02      	ldr	r5, [sp, #8]
 801d98a:	46ac      	mov	ip, r5
 801d98c:	9d04      	ldr	r5, [sp, #16]
 801d98e:	ea8c 0105 	eor.w	r1, ip, r5
 801d992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d994:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 801d998:	9a08      	ldr	r2, [sp, #32]
 801d99a:	ea81 71f2 	eor.w	r1, r1, r2, ror #31
 801d99e:	ea8a 0cb6 	eor.w	ip, sl, r6, ror #2
 801d9a2:	ea8c 0c07 	eor.w	ip, ip, r7
 801d9a6:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 801d9aa:	445c      	add	r4, fp
 801d9ac:	4464      	add	r4, ip
 801d9ae:	eb04 64f8 	add.w	r4, r4, r8, ror #27
    P( A, B, C, D, E, R(25) );
 801d9b2:	9d03      	ldr	r5, [sp, #12]
 801d9b4:	46ac      	mov	ip, r5
 801d9b6:	9d05      	ldr	r5, [sp, #20]
 801d9b8:	ea8c 0c05 	eor.w	ip, ip, r5
 801d9bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9be:	ea8c 7cf2 	eor.w	ip, ip, r2, ror #31
 801d9c2:	ea8c 7cfe 	eor.w	ip, ip, lr, ror #31
 801d9c6:	ea8a 0bb7 	eor.w	fp, sl, r7, ror #2
 801d9ca:	ea8b 0b08 	eor.w	fp, fp, r8
 801d9ce:	f8cd c008 	str.w	ip, [sp, #8]
 801d9d2:	eb03 7cfc 	add.w	ip, r3, ip, ror #31
 801d9d6:	eb0c 06b6 	add.w	r6, ip, r6, ror #2
 801d9da:	44b3      	add	fp, r6
 801d9dc:	eb0b 6bf4 	add.w	fp, fp, r4, ror #27
 801d9e0:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( E, A, B, C, D, R(26) );
 801d9e4:	9a04      	ldr	r2, [sp, #16]
 801d9e6:	9e06      	ldr	r6, [sp, #24]
 801d9e8:	4056      	eors	r6, r2
 801d9ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d9ec:	ea86 72f5 	eor.w	r2, r6, r5, ror #31
 801d9f0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801d9f2:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 801d9f6:	e003      	b.n	801da00 <mbedtls_internal_sha1_process+0x56c>
 801d9f8:	5a827999 	.word	0x5a827999
 801d9fc:	6ed9eba1 	.word	0x6ed9eba1
 801da00:	ea4f 76f2 	mov.w	r6, r2, ror #31
 801da04:	960f      	str	r6, [sp, #60]	; 0x3c
 801da06:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 801da0a:	ea8c 0c04 	eor.w	ip, ip, r4
 801da0e:	eb03 76f2 	add.w	r6, r3, r2, ror #31
 801da12:	44b2      	add	sl, r6
 801da14:	44d4      	add	ip, sl
 801da16:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
    P( D, E, A, B, C, R(27) );
 801da1a:	9d05      	ldr	r5, [sp, #20]
 801da1c:	9e00      	ldr	r6, [sp, #0]
 801da1e:	406e      	eors	r6, r5
 801da20:	ea86 79f9 	eor.w	r9, r6, r9, ror #31
 801da24:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 801da28:	ea4f 7af9 	mov.w	sl, r9, ror #31
 801da2c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 801da30:	ea88 06b4 	eor.w	r6, r8, r4, ror #2
 801da34:	ea86 060b 	eor.w	r6, r6, fp
 801da38:	eb03 7af9 	add.w	sl, r3, r9, ror #31
 801da3c:	eb0a 07b7 	add.w	r7, sl, r7, ror #2
 801da40:	443e      	add	r6, r7
 801da42:	eb06 66fc 	add.w	r6, r6, ip, ror #27
 801da46:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(28) );
 801da4a:	9f06      	ldr	r7, [sp, #24]
 801da4c:	4047      	eors	r7, r0
 801da4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801da50:	ea87 77f5 	eor.w	r7, r7, r5, ror #31
 801da54:	9d02      	ldr	r5, [sp, #8]
 801da56:	ea87 7af5 	eor.w	sl, r7, r5, ror #31
 801da5a:	ea8b 07b4 	eor.w	r7, fp, r4, ror #2
 801da5e:	ea87 070c 	eor.w	r7, r7, ip
 801da62:	f8cd a00c 	str.w	sl, [sp, #12]
 801da66:	eb03 7afa 	add.w	sl, r3, sl, ror #31
 801da6a:	44d0      	add	r8, sl
 801da6c:	4447      	add	r7, r8
 801da6e:	eb07 67f6 	add.w	r7, r7, r6, ror #27
    P( B, C, D, E, A, R(29) );
 801da72:	9800      	ldr	r0, [sp, #0]
 801da74:	4680      	mov	r8, r0
 801da76:	9807      	ldr	r0, [sp, #28]
 801da78:	ea88 0800 	eor.w	r8, r8, r0
 801da7c:	9d08      	ldr	r5, [sp, #32]
 801da7e:	ea88 78f5 	eor.w	r8, r8, r5, ror #31
 801da82:	ea88 78f2 	eor.w	r8, r8, r2, ror #31
 801da86:	4645      	mov	r5, r8
 801da88:	ea8b 08bc 	eor.w	r8, fp, ip, ror #2
 801da8c:	ea88 0806 	eor.w	r8, r8, r6
 801da90:	9500      	str	r5, [sp, #0]
 801da92:	eb03 7af5 	add.w	sl, r3, r5, ror #31
 801da96:	eb0a 04b4 	add.w	r4, sl, r4, ror #2
 801da9a:	44a0      	add	r8, r4
 801da9c:	eb08 68f7 	add.w	r8, r8, r7, ror #27
 801daa0:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( A, B, C, D, E, R(30) );
 801daa4:	9c01      	ldr	r4, [sp, #4]
 801daa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801daa8:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801daac:	ea84 7efe 	eor.w	lr, r4, lr, ror #31
 801dab0:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801dab4:	ea4f 7afe 	mov.w	sl, lr, ror #31
 801dab8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 801dabc:	ea86 0abc 	eor.w	sl, r6, ip, ror #2
 801dac0:	ea8a 0a07 	eor.w	sl, sl, r7
 801dac4:	eb03 74fe 	add.w	r4, r3, lr, ror #31
 801dac8:	44a3      	add	fp, r4
 801daca:	44da      	add	sl, fp
 801dacc:	eb0a 6af8 	add.w	sl, sl, r8, ror #27
    P( E, A, B, C, D, R(31) );
 801dad0:	4683      	mov	fp, r0
 801dad2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dad4:	ea8b 74f0 	eor.w	r4, fp, r0, ror #31
 801dad8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801dada:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801dade:	9d03      	ldr	r5, [sp, #12]
 801dae0:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801dae4:	4625      	mov	r5, r4
 801dae6:	ea4f 74f4 	mov.w	r4, r4, ror #31
 801daea:	940d      	str	r4, [sp, #52]	; 0x34
 801daec:	ea86 0bb7 	eor.w	fp, r6, r7, ror #2
 801daf0:	ea8b 0b08 	eor.w	fp, fp, r8
 801daf4:	9506      	str	r5, [sp, #24]
 801daf6:	eb03 75f5 	add.w	r5, r3, r5, ror #31
 801dafa:	eb05 0cbc 	add.w	ip, r5, ip, ror #2
 801dafe:	44e3      	add	fp, ip
 801db00:	eb0b 6bfa 	add.w	fp, fp, sl, ror #27
 801db04:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(32) );
 801db08:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801db0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801db0c:	ea84 75f5 	eor.w	r5, r4, r5, ror #31
 801db10:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
 801db14:	9c00      	ldr	r4, [sp, #0]
 801db16:	ea85 7cf4 	eor.w	ip, r5, r4, ror #31
 801db1a:	4664      	mov	r4, ip
 801db1c:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 801db20:	ea8c 0c0a 	eor.w	ip, ip, sl
 801db24:	eb03 75f4 	add.w	r5, r3, r4, ror #31
 801db28:	442e      	add	r6, r5
 801db2a:	44b4      	add	ip, r6
 801db2c:	eb0c 6cfb 	add.w	ip, ip, fp, ror #27
    P( C, D, E, A, B, R(33) );
 801db30:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801db32:	ea86 75f0 	eor.w	r5, r6, r0, ror #31
 801db36:	9802      	ldr	r0, [sp, #8]
 801db38:	ea85 75f0 	eor.w	r5, r5, r0, ror #31
 801db3c:	ea85 76fe 	eor.w	r6, r5, lr, ror #31
 801db40:	ea88 05ba 	eor.w	r5, r8, sl, ror #2
 801db44:	ea85 050b 	eor.w	r5, r5, fp
 801db48:	9601      	str	r6, [sp, #4]
 801db4a:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 801db4e:	eb06 07b7 	add.w	r7, r6, r7, ror #2
 801db52:	443d      	add	r5, r7
 801db54:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 801db58:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( B, C, D, E, A, R(34) );
 801db5c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801db5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801db60:	ea87 76f0 	eor.w	r6, r7, r0, ror #31
 801db64:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 801db68:	9a06      	ldr	r2, [sp, #24]
 801db6a:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 801db6e:	ea4f 72f6 	mov.w	r2, r6, ror #31
 801db72:	920c      	str	r2, [sp, #48]	; 0x30
 801db74:	ea8b 07ba 	eor.w	r7, fp, sl, ror #2
 801db78:	ea87 070c 	eor.w	r7, r7, ip
 801db7c:	eb03 72f6 	add.w	r2, r3, r6, ror #31
 801db80:	4490      	add	r8, r2
 801db82:	4447      	add	r7, r8
 801db84:	eb07 67f5 	add.w	r7, r7, r5, ror #27
    P( A, B, C, D, E, R(35) );
 801db88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801db8a:	4690      	mov	r8, r2
 801db8c:	9a08      	ldr	r2, [sp, #32]
 801db8e:	ea88 72f2 	eor.w	r2, r8, r2, ror #31
 801db92:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 801db96:	9417      	str	r4, [sp, #92]	; 0x5c
 801db98:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 801db9c:	ea4f 78f9 	mov.w	r8, r9, ror #31
 801dba0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801dba4:	ea8b 02bc 	eor.w	r2, fp, ip, ror #2
 801dba8:	406a      	eors	r2, r5
 801dbaa:	eb03 78f9 	add.w	r8, r3, r9, ror #31
 801dbae:	eb08 0aba 	add.w	sl, r8, sl, ror #2
 801dbb2:	4452      	add	r2, sl
 801dbb4:	eb02 62f7 	add.w	r2, r2, r7, ror #27
 801dbb8:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( E, A, B, C, D, R(36) );
 801dbbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dbbe:	ea84 78f0 	eor.w	r8, r4, r0, ror #31
 801dbc2:	9803      	ldr	r0, [sp, #12]
 801dbc4:	ea88 78f0 	eor.w	r8, r8, r0, ror #31
 801dbc8:	9c01      	ldr	r4, [sp, #4]
 801dbca:	ea88 78f4 	eor.w	r8, r8, r4, ror #31
 801dbce:	ea85 0abc 	eor.w	sl, r5, ip, ror #2
 801dbd2:	ea8a 0a07 	eor.w	sl, sl, r7
 801dbd6:	f8cd 8010 	str.w	r8, [sp, #16]
 801dbda:	eb03 78f8 	add.w	r8, r3, r8, ror #31
 801dbde:	44c3      	add	fp, r8
 801dbe0:	44da      	add	sl, fp
 801dbe2:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( D, E, A, B, C, R(37) );
 801dbe6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dbe8:	9808      	ldr	r0, [sp, #32]
 801dbea:	ea84 70f0 	eor.w	r0, r4, r0, ror #31
 801dbee:	9c00      	ldr	r4, [sp, #0]
 801dbf0:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 801dbf4:	ea80 78f6 	eor.w	r8, r0, r6, ror #31
 801dbf8:	4644      	mov	r4, r8
 801dbfa:	ea85 08b7 	eor.w	r8, r5, r7, ror #2
 801dbfe:	ea88 0802 	eor.w	r8, r8, r2
 801dc02:	9405      	str	r4, [sp, #20]
 801dc04:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 801dc08:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
 801dc0c:	44e0      	add	r8, ip
 801dc0e:	eb08 68fa 	add.w	r8, r8, sl, ror #27
 801dc12:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( C, D, E, A, B, R(38) );
 801dc16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801dc18:	ea84 70f1 	eor.w	r0, r4, r1, ror #31
 801dc1c:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
 801dc20:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801dc24:	ea4f 7cfe 	mov.w	ip, lr, ror #31
 801dc28:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801dc2c:	ea82 0cb7 	eor.w	ip, r2, r7, ror #2
 801dc30:	ea8c 0c0a 	eor.w	ip, ip, sl
 801dc34:	eb03 70fe 	add.w	r0, r3, lr, ror #31
 801dc38:	4405      	add	r5, r0
 801dc3a:	44ac      	add	ip, r5
 801dc3c:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( B, C, D, E, A, R(39) );
 801dc40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801dc42:	46ab      	mov	fp, r5
 801dc44:	9d02      	ldr	r5, [sp, #8]
 801dc46:	ea8b 7bf5 	eor.w	fp, fp, r5, ror #31
 801dc4a:	9d06      	ldr	r5, [sp, #24]
 801dc4c:	ea8b 74f5 	eor.w	r4, fp, r5, ror #31
 801dc50:	9d04      	ldr	r5, [sp, #16]
 801dc52:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801dc56:	ea4f 75f4 	mov.w	r5, r4, ror #31
 801dc5a:	950a      	str	r5, [sp, #40]	; 0x28
 801dc5c:	ea82 05ba 	eor.w	r5, r2, sl, ror #2
 801dc60:	ea85 0508 	eor.w	r5, r5, r8
 801dc64:	eb03 73f4 	add.w	r3, r3, r4, ror #31
 801dc68:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 801dc6c:	441d      	add	r5, r3
 801dc6e:	eb05 65fc 	add.w	r5, r5, ip, ror #27
#undef F

#define F(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 801dc72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dc74:	ea83 71f1 	eor.w	r1, r3, r1, ror #31
 801dc78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc7a:	ea81 71f3 	eor.w	r1, r1, r3, ror #31
 801dc7e:	9b05      	ldr	r3, [sp, #20]
 801dc80:	ea81 7bf3 	eor.w	fp, r1, r3, ror #31
 801dc84:	4be2      	ldr	r3, [pc, #904]	; (801e010 <mbedtls_internal_sha1_process+0xb7c>)
 801dc86:	f8cd b018 	str.w	fp, [sp, #24]
 801dc8a:	eb03 71fb 	add.w	r1, r3, fp, ror #31
 801dc8e:	440a      	add	r2, r1
 801dc90:	eb02 61f5 	add.w	r1, r2, r5, ror #27
 801dc94:	ea4c 02b8 	orr.w	r2, ip, r8, ror #2
 801dc98:	ea02 02ba 	and.w	r2, r2, sl, ror #2
 801dc9c:	ea0c 00b8 	and.w	r0, ip, r8, ror #2
 801dca0:	4302      	orrs	r2, r0
 801dca2:	440a      	add	r2, r1
    P( E, A, B, C, D, R(41) );
 801dca4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801dca6:	9802      	ldr	r0, [sp, #8]
 801dca8:	ea87 71f0 	eor.w	r1, r7, r0, ror #31
 801dcac:	9f01      	ldr	r7, [sp, #4]
 801dcae:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 801dcb2:	ea81 7bfe 	eor.w	fp, r1, lr, ror #31
 801dcb6:	ea45 07bc 	orr.w	r7, r5, ip, ror #2
 801dcba:	ea07 01b8 	and.w	r1, r7, r8, ror #2
 801dcbe:	ea05 07bc 	and.w	r7, r5, ip, ror #2
 801dcc2:	430f      	orrs	r7, r1
 801dcc4:	f8cd b01c 	str.w	fp, [sp, #28]
 801dcc8:	eb03 71fb 	add.w	r1, r3, fp, ror #31
 801dccc:	eb01 0aba 	add.w	sl, r1, sl, ror #2
 801dcd0:	4457      	add	r7, sl
 801dcd2:	eb07 67f2 	add.w	r7, r7, r2, ror #27
    P( D, E, A, B, C, R(42) );
 801dcd6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801dcd8:	9803      	ldr	r0, [sp, #12]
 801dcda:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 801dcde:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 801dce2:	ea80 71f4 	eor.w	r1, r0, r4, ror #31
 801dce6:	ea4f 76f1 	mov.w	r6, r1, ror #31
 801dcea:	960f      	str	r6, [sp, #60]	; 0x3c
 801dcec:	9109      	str	r1, [sp, #36]	; 0x24
 801dcee:	eb03 76f1 	add.w	r6, r3, r1, ror #31
 801dcf2:	eb06 08b8 	add.w	r8, r6, r8, ror #2
 801dcf6:	eb08 66f7 	add.w	r6, r8, r7, ror #27
 801dcfa:	ea42 08b5 	orr.w	r8, r2, r5, ror #2
 801dcfe:	ea08 08bc 	and.w	r8, r8, ip, ror #2
 801dd02:	ea02 01b5 	and.w	r1, r2, r5, ror #2
 801dd06:	ea48 0801 	orr.w	r8, r8, r1
 801dd0a:	44b0      	add	r8, r6
    P( C, D, E, A, B, R(43) );
 801dd0c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dd0e:	9900      	ldr	r1, [sp, #0]
 801dd10:	468b      	mov	fp, r1
 801dd12:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
 801dd16:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
 801dd1a:	9e06      	ldr	r6, [sp, #24]
 801dd1c:	ea89 79f6 	eor.w	r9, r9, r6, ror #31
 801dd20:	ea4f 7af9 	mov.w	sl, r9, ror #31
 801dd24:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 801dd28:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 801dd2c:	ea06 01b5 	and.w	r1, r6, r5, ror #2
 801dd30:	ea07 06b2 	and.w	r6, r7, r2, ror #2
 801dd34:	430e      	orrs	r6, r1
 801dd36:	eb03 71f9 	add.w	r1, r3, r9, ror #31
 801dd3a:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
 801dd3e:	4466      	add	r6, ip
 801dd40:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( B, C, D, E, A, R(44) );
 801dd44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801dd46:	468c      	mov	ip, r1
 801dd48:	9903      	ldr	r1, [sp, #12]
 801dd4a:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
 801dd4e:	9804      	ldr	r0, [sp, #16]
 801dd50:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 801dd54:	9807      	ldr	r0, [sp, #28]
 801dd56:	ea81 7cf0 	eor.w	ip, r1, r0, ror #31
 801dd5a:	f8cd c020 	str.w	ip, [sp, #32]
 801dd5e:	eb03 7afc 	add.w	sl, r3, ip, ror #31
 801dd62:	eb0a 05b5 	add.w	r5, sl, r5, ror #2
 801dd66:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 801dd6a:	ea48 0ab7 	orr.w	sl, r8, r7, ror #2
 801dd6e:	ea0a 0ab2 	and.w	sl, sl, r2, ror #2
 801dd72:	ea08 01b7 	and.w	r1, r8, r7, ror #2
 801dd76:	ea4a 0a01 	orr.w	sl, sl, r1
 801dd7a:	44aa      	add	sl, r5
    P( A, B, C, D, E, R(45) );
 801dd7c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801dd7e:	ea85 71fb 	eor.w	r1, r5, fp, ror #31
 801dd82:	9805      	ldr	r0, [sp, #20]
 801dd84:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 801dd88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801dd8a:	ea81 7cf5 	eor.w	ip, r1, r5, ror #31
 801dd8e:	4665      	mov	r5, ip
 801dd90:	ea46 0cb8 	orr.w	ip, r6, r8, ror #2
 801dd94:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 801dd98:	ea06 0cb8 	and.w	ip, r6, r8, ror #2
 801dd9c:	ea41 0c0c 	orr.w	ip, r1, ip
 801dda0:	9500      	str	r5, [sp, #0]
 801dda2:	eb03 71f5 	add.w	r1, r3, r5, ror #31
 801dda6:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 801ddaa:	4494      	add	ip, r2
 801ddac:	eb0c 6cfa 	add.w	ip, ip, sl, ror #27
    P( E, A, B, C, D, R(46) );
 801ddb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ddb2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ddb4:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 801ddb8:	ea82 7efe 	eor.w	lr, r2, lr, ror #31
 801ddbc:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801ddc0:	ea4f 7bfe 	mov.w	fp, lr, ror #31
 801ddc4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 801ddc8:	eb03 71fe 	add.w	r1, r3, lr, ror #31
 801ddcc:	eb01 07b7 	add.w	r7, r1, r7, ror #2
 801ddd0:	eb07 61fc 	add.w	r1, r7, ip, ror #27
 801ddd4:	ea4a 07b6 	orr.w	r7, sl, r6, ror #2
 801ddd8:	ea07 07b8 	and.w	r7, r7, r8, ror #2
 801dddc:	ea0a 02b6 	and.w	r2, sl, r6, ror #2
 801dde0:	4317      	orrs	r7, r2
 801dde2:	440f      	add	r7, r1
    P( D, E, A, B, C, R(47) );
 801dde4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dde6:	4693      	mov	fp, r2
 801dde8:	9a01      	ldr	r2, [sp, #4]
 801ddea:	ea8b 7bf2 	eor.w	fp, fp, r2, ror #31
 801ddee:	ea8b 7bf4 	eor.w	fp, fp, r4, ror #31
 801ddf2:	9c08      	ldr	r4, [sp, #32]
 801ddf4:	ea8b 7bf4 	eor.w	fp, fp, r4, ror #31
 801ddf8:	ea4f 74fb 	mov.w	r4, fp, ror #31
 801ddfc:	940d      	str	r4, [sp, #52]	; 0x34
 801ddfe:	ea4c 01ba 	orr.w	r1, ip, sl, ror #2
 801de02:	ea01 02b6 	and.w	r2, r1, r6, ror #2
 801de06:	ea0c 01ba 	and.w	r1, ip, sl, ror #2
 801de0a:	4311      	orrs	r1, r2
 801de0c:	eb03 72fb 	add.w	r2, r3, fp, ror #31
 801de10:	eb02 08b8 	add.w	r8, r2, r8, ror #2
 801de14:	4441      	add	r1, r8
 801de16:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( C, D, E, A, B, R(48) );
 801de1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801de1c:	ea84 75f5 	eor.w	r5, r4, r5, ror #31
 801de20:	9c06      	ldr	r4, [sp, #24]
 801de22:	ea85 75f4 	eor.w	r5, r5, r4, ror #31
 801de26:	9a00      	ldr	r2, [sp, #0]
 801de28:	ea85 78f2 	eor.w	r8, r5, r2, ror #31
 801de2c:	f8cd 8008 	str.w	r8, [sp, #8]
 801de30:	eb03 72f8 	add.w	r2, r3, r8, ror #31
 801de34:	eb02 06b6 	add.w	r6, r2, r6, ror #2
 801de38:	eb06 62f1 	add.w	r2, r6, r1, ror #27
 801de3c:	ea47 06bc 	orr.w	r6, r7, ip, ror #2
 801de40:	ea06 06ba 	and.w	r6, r6, sl, ror #2
 801de44:	ea07 08bc 	and.w	r8, r7, ip, ror #2
 801de48:	ea46 0608 	orr.w	r6, r6, r8
 801de4c:	4416      	add	r6, r2
    P( B, C, D, E, A, R(49) );
 801de4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801de50:	9a01      	ldr	r2, [sp, #4]
 801de52:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 801de56:	9a07      	ldr	r2, [sp, #28]
 801de58:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 801de5c:	ea85 78fe 	eor.w	r8, r5, lr, ror #31
 801de60:	ea41 05b7 	orr.w	r5, r1, r7, ror #2
 801de64:	ea05 02bc 	and.w	r2, r5, ip, ror #2
 801de68:	ea01 05b7 	and.w	r5, r1, r7, ror #2
 801de6c:	4315      	orrs	r5, r2
 801de6e:	f8cd 8004 	str.w	r8, [sp, #4]
 801de72:	eb03 72f8 	add.w	r2, r3, r8, ror #31
 801de76:	eb02 0aba 	add.w	sl, r2, sl, ror #2
 801de7a:	4455      	add	r5, sl
 801de7c:	eb05 65f6 	add.w	r5, r5, r6, ror #27
    P( A, B, C, D, E, R(50) );
 801de80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de82:	4690      	mov	r8, r2
 801de84:	9a04      	ldr	r2, [sp, #16]
 801de86:	ea88 7af2 	eor.w	sl, r8, r2, ror #31
 801de8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de8c:	ea8a 7af2 	eor.w	sl, sl, r2, ror #31
 801de90:	ea8a 7afb 	eor.w	sl, sl, fp, ror #31
 801de94:	ea4f 78fa 	mov.w	r8, sl, ror #31
 801de98:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801de9c:	eb03 74fa 	add.w	r4, r3, sl, ror #31
 801dea0:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 801dea4:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
 801dea8:	ea46 04b1 	orr.w	r4, r6, r1, ror #2
 801deac:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 801deb0:	ea06 02b1 	and.w	r2, r6, r1, ror #2
 801deb4:	4314      	orrs	r4, r2
 801deb6:	4464      	add	r4, ip
    P( E, A, B, C, D, R(51) );
 801deb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801deba:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 801debe:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 801dec2:	9802      	ldr	r0, [sp, #8]
 801dec4:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 801dec8:	ea4f 7cf9 	mov.w	ip, r9, ror #31
 801decc:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 801ded0:	ea45 02b6 	orr.w	r2, r5, r6, ror #2
 801ded4:	ea02 00b1 	and.w	r0, r2, r1, ror #2
 801ded8:	ea05 02b6 	and.w	r2, r5, r6, ror #2
 801dedc:	4302      	orrs	r2, r0
 801dede:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 801dee2:	eb00 07b7 	add.w	r7, r0, r7, ror #2
 801dee6:	443a      	add	r2, r7
 801dee8:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( D, E, A, B, C, R(52) );
 801deec:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801deee:	9804      	ldr	r0, [sp, #16]
 801def0:	ea87 78f0 	eor.w	r8, r7, r0, ror #31
 801def4:	9808      	ldr	r0, [sp, #32]
 801def6:	ea88 78f0 	eor.w	r8, r8, r0, ror #31
 801defa:	9f01      	ldr	r7, [sp, #4]
 801defc:	ea88 7cf7 	eor.w	ip, r8, r7, ror #31
 801df00:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 801df04:	eb03 70fc 	add.w	r0, r3, ip, ror #31
 801df08:	eb00 01b1 	add.w	r1, r0, r1, ror #2
 801df0c:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 801df10:	ea44 00b5 	orr.w	r0, r4, r5, ror #2
 801df14:	ea00 00b6 	and.w	r0, r0, r6, ror #2
 801df18:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 801df1c:	4338      	orrs	r0, r7
 801df1e:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
 801df20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801df22:	9905      	ldr	r1, [sp, #20]
 801df24:	ea87 71f1 	eor.w	r1, r7, r1, ror #31
 801df28:	9f00      	ldr	r7, [sp, #0]
 801df2a:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 801df2e:	ea81 7cfa 	eor.w	ip, r1, sl, ror #31
 801df32:	ea42 08b4 	orr.w	r8, r2, r4, ror #2
 801df36:	ea08 01b5 	and.w	r1, r8, r5, ror #2
 801df3a:	ea02 08b4 	and.w	r8, r2, r4, ror #2
 801df3e:	ea41 0808 	orr.w	r8, r1, r8
 801df42:	f8cd c00c 	str.w	ip, [sp, #12]
 801df46:	eb03 71fc 	add.w	r1, r3, ip, ror #31
 801df4a:	eb01 06b6 	add.w	r6, r1, r6, ror #2
 801df4e:	44b0      	add	r8, r6
 801df50:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
 801df54:	9910      	ldr	r1, [sp, #64]	; 0x40
 801df56:	468c      	mov	ip, r1
 801df58:	9906      	ldr	r1, [sp, #24]
 801df5a:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
 801df5e:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 801df62:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801df66:	ea4f 7cfe 	mov.w	ip, lr, ror #31
 801df6a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 801df6e:	eb03 71fe 	add.w	r1, r3, lr, ror #31
 801df72:	eb01 05b5 	add.w	r5, r1, r5, ror #2
 801df76:	eb05 61f8 	add.w	r1, r5, r8, ror #27
 801df7a:	ea40 05b2 	orr.w	r5, r0, r2, ror #2
 801df7e:	ea05 05b4 	and.w	r5, r5, r4, ror #2
 801df82:	ea00 06b2 	and.w	r6, r0, r2, ror #2
 801df86:	4335      	orrs	r5, r6
 801df88:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
 801df8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801df8c:	46b4      	mov	ip, r6
 801df8e:	9e07      	ldr	r6, [sp, #28]
 801df90:	ea8c 77f6 	eor.w	r7, ip, r6, ror #31
 801df94:	ea87 7bfb 	eor.w	fp, r7, fp, ror #31
 801df98:	9909      	ldr	r1, [sp, #36]	; 0x24
 801df9a:	ea8b 7bf1 	eor.w	fp, fp, r1, ror #31
 801df9e:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 801dfa2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 801dfa6:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
 801dfaa:	ea0c 01b2 	and.w	r1, ip, r2, ror #2
 801dfae:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
 801dfb2:	ea41 0c0c 	orr.w	ip, r1, ip
 801dfb6:	eb03 71fb 	add.w	r1, r3, fp, ror #31
 801dfba:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 801dfbe:	44a4      	add	ip, r4
 801dfc0:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
 801dfc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dfc6:	4627      	mov	r7, r4
 801dfc8:	9c06      	ldr	r4, [sp, #24]
 801dfca:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
 801dfce:	9c02      	ldr	r4, [sp, #8]
 801dfd0:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
 801dfd4:	9c03      	ldr	r4, [sp, #12]
 801dfd6:	ea87 71f4 	eor.w	r1, r7, r4, ror #31
 801dfda:	9104      	str	r1, [sp, #16]
 801dfdc:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801dfe0:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 801dfe4:	eb02 61fc 	add.w	r1, r2, ip, ror #27
 801dfe8:	ea45 02b8 	orr.w	r2, r5, r8, ror #2
 801dfec:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 801dff0:	ea05 04b8 	and.w	r4, r5, r8, ror #2
 801dff4:	4322      	orrs	r2, r4
 801dff6:	440a      	add	r2, r1
    P( D, E, A, B, C, R(57) );
 801dff8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dffa:	ea84 76f6 	eor.w	r6, r4, r6, ror #31
 801dffe:	9901      	ldr	r1, [sp, #4]
 801e000:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 801e004:	ea86 76fe 	eor.w	r6, r6, lr, ror #31
 801e008:	ea4c 04b5 	orr.w	r4, ip, r5, ror #2
 801e00c:	e002      	b.n	801e014 <mbedtls_internal_sha1_process+0xb80>
 801e00e:	bf00      	nop
 801e010:	8f1bbcdc 	.word	0x8f1bbcdc
 801e014:	ea04 01b8 	and.w	r1, r4, r8, ror #2
 801e018:	ea0c 04b5 	and.w	r4, ip, r5, ror #2
 801e01c:	430c      	orrs	r4, r1
 801e01e:	9605      	str	r6, [sp, #20]
 801e020:	eb03 71f6 	add.w	r1, r3, r6, ror #31
 801e024:	eb01 00b0 	add.w	r0, r1, r0, ror #2
 801e028:	4404      	add	r4, r0
 801e02a:	eb04 64f2 	add.w	r4, r4, r2, ror #27
    P( C, D, E, A, B, R(58) );
 801e02e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e030:	463e      	mov	r6, r7
 801e032:	9f08      	ldr	r7, [sp, #32]
 801e034:	ea86 70f7 	eor.w	r0, r6, r7, ror #31
 801e038:	ea80 70fa 	eor.w	r0, r0, sl, ror #31
 801e03c:	ea80 70fb 	eor.w	r0, r0, fp, ror #31
 801e040:	ea4f 76f0 	mov.w	r6, r0, ror #31
 801e044:	9608      	str	r6, [sp, #32]
 801e046:	eb03 76f0 	add.w	r6, r3, r0, ror #31
 801e04a:	eb06 08b8 	add.w	r8, r6, r8, ror #2
 801e04e:	eb08 66f4 	add.w	r6, r8, r4, ror #27
 801e052:	ea42 08bc 	orr.w	r8, r2, ip, ror #2
 801e056:	ea08 08b5 	and.w	r8, r8, r5, ror #2
 801e05a:	ea02 01bc 	and.w	r1, r2, ip, ror #2
 801e05e:	ea48 0801 	orr.w	r8, r8, r1
 801e062:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(59) );
 801e064:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e066:	9900      	ldr	r1, [sp, #0]
 801e068:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
 801e06c:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
 801e070:	9e04      	ldr	r6, [sp, #16]
 801e072:	ea89 79f6 	eor.w	r9, r9, r6, ror #31
 801e076:	ea4f 7af9 	mov.w	sl, r9, ror #31
 801e07a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801e07e:	ea44 01b2 	orr.w	r1, r4, r2, ror #2
 801e082:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 801e086:	ea04 06b2 	and.w	r6, r4, r2, ror #2
 801e08a:	430e      	orrs	r6, r1
 801e08c:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 801e090:	eb03 03b5 	add.w	r3, r3, r5, ror #2
 801e094:	441e      	add	r6, r3
 801e096:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 801e09a:	ea4f 03b4 	mov.w	r3, r4, ror #2
#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 801e09e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e0a0:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 801e0a4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e0a6:	ea85 75f7 	eor.w	r5, r5, r7, ror #31
 801e0aa:	9f05      	ldr	r7, [sp, #20]
 801e0ac:	ea85 7af7 	eor.w	sl, r5, r7, ror #31
 801e0b0:	4654      	mov	r4, sl
 801e0b2:	ea83 0ab2 	eor.w	sl, r3, r2, ror #2
 801e0b6:	ea8a 0a08 	eor.w	sl, sl, r8
 801e0ba:	4ddb      	ldr	r5, [pc, #876]	; (801e428 <mbedtls_internal_sha1_process+0xf94>)
 801e0bc:	9406      	str	r4, [sp, #24]
 801e0be:	eb05 71f4 	add.w	r1, r5, r4, ror #31
 801e0c2:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
 801e0c6:	44e2      	add	sl, ip
 801e0c8:	eb0a 6af6 	add.w	sl, sl, r6, ror #27
    P( E, A, B, C, D, R(61) );
 801e0cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e0ce:	9c00      	ldr	r4, [sp, #0]
 801e0d0:	ea87 71f4 	eor.w	r1, r7, r4, ror #31
 801e0d4:	9c03      	ldr	r4, [sp, #12]
 801e0d6:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801e0da:	ea81 7cf0 	eor.w	ip, r1, r0, ror #31
 801e0de:	ea83 04b8 	eor.w	r4, r3, r8, ror #2
 801e0e2:	4074      	eors	r4, r6
 801e0e4:	f8cd c000 	str.w	ip, [sp]
 801e0e8:	eb05 71fc 	add.w	r1, r5, ip, ror #31
 801e0ec:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 801e0f0:	4414      	add	r4, r2
 801e0f2:	eb04 64fa 	add.w	r4, r4, sl, ror #27
 801e0f6:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( D, E, A, B, C, R(62) );
 801e0fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e0fc:	4694      	mov	ip, r2
 801e0fe:	9a02      	ldr	r2, [sp, #8]
 801e100:	ea8c 72f2 	eor.w	r2, ip, r2, ror #31
 801e104:	ea82 7efe 	eor.w	lr, r2, lr, ror #31
 801e108:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801e10c:	ea4f 7cfe 	mov.w	ip, lr, ror #31
 801e110:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 801e114:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 801e118:	ea8c 0c0a 	eor.w	ip, ip, sl
 801e11c:	eb05 72fe 	add.w	r2, r5, lr, ror #31
 801e120:	4413      	add	r3, r2
 801e122:	449c      	add	ip, r3
 801e124:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( C, D, E, A, B, R(63) );
 801e128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e12a:	461f      	mov	r7, r3
 801e12c:	9b01      	ldr	r3, [sp, #4]
 801e12e:	ea87 77f3 	eor.w	r7, r7, r3, ror #31
 801e132:	ea87 77fb 	eor.w	r7, r7, fp, ror #31
 801e136:	9b06      	ldr	r3, [sp, #24]
 801e138:	ea87 77f3 	eor.w	r7, r7, r3, ror #31
 801e13c:	ea4f 73f7 	mov.w	r3, r7, ror #31
 801e140:	930d      	str	r3, [sp, #52]	; 0x34
 801e142:	ea86 01ba 	eor.w	r1, r6, sl, ror #2
 801e146:	4061      	eors	r1, r4
 801e148:	eb05 75f7 	add.w	r5, r5, r7, ror #31
 801e14c:	eb05 05b8 	add.w	r5, r5, r8, ror #2
 801e150:	4429      	add	r1, r5
 801e152:	eb01 61fc 	add.w	r1, r1, ip, ror #27
 801e156:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
 801e15a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e15c:	9a02      	ldr	r2, [sp, #8]
 801e15e:	ea85 73f2 	eor.w	r3, r5, r2, ror #31
 801e162:	9d04      	ldr	r5, [sp, #16]
 801e164:	ea83 73f5 	eor.w	r3, r3, r5, ror #31
 801e168:	9a00      	ldr	r2, [sp, #0]
 801e16a:	ea83 78f2 	eor.w	r8, r3, r2, ror #31
 801e16e:	4645      	mov	r5, r8
 801e170:	ea84 08ba 	eor.w	r8, r4, sl, ror #2
 801e174:	ea88 080c 	eor.w	r8, r8, ip
 801e178:	4bab      	ldr	r3, [pc, #684]	; (801e428 <mbedtls_internal_sha1_process+0xf94>)
 801e17a:	9502      	str	r5, [sp, #8]
 801e17c:	eb03 72f5 	add.w	r2, r3, r5, ror #31
 801e180:	4416      	add	r6, r2
 801e182:	44b0      	add	r8, r6
 801e184:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
 801e188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e18a:	4693      	mov	fp, r2
 801e18c:	9a01      	ldr	r2, [sp, #4]
 801e18e:	ea8b 76f2 	eor.w	r6, fp, r2, ror #31
 801e192:	9a05      	ldr	r2, [sp, #20]
 801e194:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 801e198:	ea86 7bfe 	eor.w	fp, r6, lr, ror #31
 801e19c:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 801e1a0:	404e      	eors	r6, r1
 801e1a2:	f8cd b01c 	str.w	fp, [sp, #28]
 801e1a6:	eb03 72fb 	add.w	r2, r3, fp, ror #31
 801e1aa:	eb02 0aba 	add.w	sl, r2, sl, ror #2
 801e1ae:	4456      	add	r6, sl
 801e1b0:	eb06 66f8 	add.w	r6, r6, r8, ror #27
 801e1b4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( E, A, B, C, D, R(66) );
 801e1b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e1ba:	46aa      	mov	sl, r5
 801e1bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e1be:	ea8a 7af5 	eor.w	sl, sl, r5, ror #31
 801e1c2:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 801e1c6:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 801e1ca:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
 801e1ce:	ea8b 0b08 	eor.w	fp, fp, r8
 801e1d2:	eb03 72fa 	add.w	r2, r3, sl, ror #31
 801e1d6:	4414      	add	r4, r2
 801e1d8:	44a3      	add	fp, r4
 801e1da:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( D, E, A, B, C, R(67) );
 801e1de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e1e0:	9a03      	ldr	r2, [sp, #12]
 801e1e2:	ea84 72f2 	eor.w	r2, r4, r2, ror #31
 801e1e6:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 801e1ea:	9c02      	ldr	r4, [sp, #8]
 801e1ec:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 801e1f0:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
 801e1f4:	4072      	eors	r2, r6
 801e1f6:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 801e1fa:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
 801e1fe:	4462      	add	r2, ip
 801e200:	eb02 62fb 	add.w	r2, r2, fp, ror #27
 801e204:	ea4f 06b6 	mov.w	r6, r6, ror #2
    P( C, D, E, A, B, R(68) );
 801e208:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e20a:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801e20e:	9806      	ldr	r0, [sp, #24]
 801e210:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 801e214:	9d07      	ldr	r5, [sp, #28]
 801e216:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801e21a:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 801e21e:	ea8c 0c0b 	eor.w	ip, ip, fp
 801e222:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 801e226:	4401      	add	r1, r0
 801e228:	448c      	add	ip, r1
 801e22a:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( B, C, D, E, A, R(69) );
 801e22e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e230:	9d03      	ldr	r5, [sp, #12]
 801e232:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 801e236:	9d00      	ldr	r5, [sp, #0]
 801e238:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 801e23c:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 801e240:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
 801e244:	4055      	eors	r5, r2
 801e246:	eb03 70f1 	add.w	r0, r3, r1, ror #31
 801e24a:	eb00 08b8 	add.w	r8, r0, r8, ror #2
 801e24e:	4445      	add	r5, r8
 801e250:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 801e254:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
 801e258:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e25a:	4680      	mov	r8, r0
 801e25c:	9804      	ldr	r0, [sp, #16]
 801e25e:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
 801e262:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
 801e266:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 801e26a:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
 801e26e:	ea88 080c 	eor.w	r8, r8, ip
 801e272:	f8cd e00c 	str.w	lr, [sp, #12]
 801e276:	eb03 70fe 	add.w	r0, r3, lr, ror #31
 801e27a:	4406      	add	r6, r0
 801e27c:	44b0      	add	r8, r6
 801e27e:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( E, A, B, C, D, R(71) );
 801e282:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e284:	9805      	ldr	r0, [sp, #20]
 801e286:	ea86 70f0 	eor.w	r0, r6, r0, ror #31
 801e28a:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
 801e28e:	ea87 7ef4 	eor.w	lr, r7, r4, ror #31
 801e292:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
 801e296:	4068      	eors	r0, r5
 801e298:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801e29c:	eb03 76fe 	add.w	r6, r3, lr, ror #31
 801e2a0:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
 801e2a4:	4458      	add	r0, fp
 801e2a6:	eb00 60f8 	add.w	r0, r0, r8, ror #27
 801e2aa:	ea4f 05b5 	mov.w	r5, r5, ror #2
 801e2ae:	9501      	str	r5, [sp, #4]
    P( D, E, A, B, C, R(72) );
 801e2b0:	9e08      	ldr	r6, [sp, #32]
 801e2b2:	9f04      	ldr	r7, [sp, #16]
 801e2b4:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 801e2b8:	9d02      	ldr	r5, [sp, #8]
 801e2ba:	ea87 77f5 	eor.w	r7, r7, r5, ror #31
 801e2be:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 801e2c2:	9d01      	ldr	r5, [sp, #4]
 801e2c4:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 801e2c8:	ea8e 0e08 	eor.w	lr, lr, r8
 801e2cc:	eb03 76f7 	add.w	r6, r3, r7, ror #31
 801e2d0:	4432      	add	r2, r6
 801e2d2:	4496      	add	lr, r2
 801e2d4:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(73) );
 801e2d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e2da:	4693      	mov	fp, r2
 801e2dc:	9a05      	ldr	r2, [sp, #20]
 801e2de:	ea8b 76f2 	eor.w	r6, fp, r2, ror #31
 801e2e2:	9a07      	ldr	r2, [sp, #28]
 801e2e4:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 801e2e8:	9a03      	ldr	r2, [sp, #12]
 801e2ea:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 801e2ee:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
 801e2f2:	4042      	eors	r2, r0
 801e2f4:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
 801e2f8:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
 801e2fc:	4462      	add	r2, ip
 801e2fe:	eb02 62fe 	add.w	r2, r2, lr, ror #27
 801e302:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( B, C, D, E, A, R(74) );
 801e306:	9d08      	ldr	r5, [sp, #32]
 801e308:	46ac      	mov	ip, r5
 801e30a:	9d06      	ldr	r5, [sp, #24]
 801e30c:	ea8c 7cf5 	eor.w	ip, ip, r5, ror #31
 801e310:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
 801e314:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e316:	ea8a 7af5 	eor.w	sl, sl, r5, ror #31
 801e31a:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 801e31e:	ea8c 0c0e 	eor.w	ip, ip, lr
 801e322:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
 801e326:	9d01      	ldr	r5, [sp, #4]
 801e328:	445d      	add	r5, fp
 801e32a:	44ac      	add	ip, r5
 801e32c:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(75) );
 801e330:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801e332:	46ab      	mov	fp, r5
 801e334:	9d00      	ldr	r5, [sp, #0]
 801e336:	ea8b 75f5 	eor.w	r5, fp, r5, ror #31
 801e33a:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 801e33e:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 801e342:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
 801e346:	ea8b 0b02 	eor.w	fp, fp, r2
 801e34a:	eb03 75f7 	add.w	r5, r3, r7, ror #31
 801e34e:	eb05 08b8 	add.w	r8, r5, r8, ror #2
 801e352:	44c3      	add	fp, r8
 801e354:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
 801e358:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 801e35c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e35e:	46a8      	mov	r8, r5
 801e360:	9d06      	ldr	r5, [sp, #24]
 801e362:	ea88 75f5 	eor.w	r5, r8, r5, ror #31
 801e366:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
 801e36a:	ea84 76f6 	eor.w	r6, r4, r6, ror #31
 801e36e:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 801e372:	ea84 040c 	eor.w	r4, r4, ip
 801e376:	eb03 75f6 	add.w	r5, r3, r6, ror #31
 801e37a:	4428      	add	r0, r5
 801e37c:	4420      	add	r0, r4
 801e37e:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( D, E, A, B, C, R(77) );
 801e382:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e384:	9d00      	ldr	r5, [sp, #0]
 801e386:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801e38a:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 801e38e:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 801e392:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801e396:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
 801e39a:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 801e39e:	ea81 010b 	eor.w	r1, r1, fp
 801e3a2:	448e      	add	lr, r1
 801e3a4:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
 801e3a8:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(78) );
 801e3ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e3ae:	9d02      	ldr	r5, [sp, #8]
 801e3b0:	ea84 79f5 	eor.w	r9, r4, r5, ror #31
 801e3b4:	9c03      	ldr	r4, [sp, #12]
 801e3b6:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 801e3ba:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
 801e3be:	eb03 79f9 	add.w	r9, r3, r9, ror #31
 801e3c2:	444a      	add	r2, r9
 801e3c4:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
 801e3c8:	ea89 0900 	eor.w	r9, r9, r0
 801e3cc:	444a      	add	r2, r9
 801e3ce:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(79) );
 801e3d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e3d4:	9d07      	ldr	r5, [sp, #28]
 801e3d6:	ea84 71f5 	eor.w	r1, r4, r5, ror #31
 801e3da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e3dc:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 801e3e0:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
 801e3e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e3e6:	442b      	add	r3, r5
 801e3e8:	eb03 73f6 	add.w	r3, r3, r6, ror #31
 801e3ec:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
 801e3f0:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
 801e3f4:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 801e3f8:	4463      	add	r3, ip
 801e3fa:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 801e3fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 801e400:	460c      	mov	r4, r1
 801e402:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
 801e404:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801e406:	4432      	add	r2, r6
 801e408:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
 801e40a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e40c:	eb07 01be 	add.w	r1, r7, lr, ror #2
 801e410:	6121      	str	r1, [r4, #16]
    ctx->state[3] += D;
 801e412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801e414:	eb02 00b0 	add.w	r0, r2, r0, ror #2
 801e418:	6160      	str	r0, [r4, #20]
    ctx->state[4] += E;
 801e41a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801e41c:	eb01 050b 	add.w	r5, r1, fp
 801e420:	61a5      	str	r5, [r4, #24]

    return( 0 );
}
 801e422:	2000      	movs	r0, #0
 801e424:	e002      	b.n	801e42c <mbedtls_internal_sha1_process+0xf98>
 801e426:	bf00      	nop
 801e428:	ca62c1d6 	.word	0xca62c1d6
 801e42c:	b01b      	add	sp, #108	; 0x6c
 801e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e432:	bf00      	nop

0801e434 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 801e434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA1_VALIDATE_RET( ctx != NULL );
    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 801e438:	2a00      	cmp	r2, #0
 801e43a:	d040      	beq.n	801e4be <mbedtls_sha1_update_ret+0x8a>
 801e43c:	4606      	mov	r6, r0
 801e43e:	460d      	mov	r5, r1
 801e440:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
 801e442:	6803      	ldr	r3, [r0, #0]
 801e444:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 801e448:	4413      	add	r3, r2
 801e44a:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 801e44c:	4293      	cmp	r3, r2
 801e44e:	d202      	bcs.n	801e456 <mbedtls_sha1_update_ret+0x22>
        ctx->total[1]++;
 801e450:	6843      	ldr	r3, [r0, #4]
 801e452:	3301      	adds	r3, #1
 801e454:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
 801e456:	b11f      	cbz	r7, 801e460 <mbedtls_sha1_update_ret+0x2c>
    fill = 64 - left;
 801e458:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 801e45c:	4544      	cmp	r4, r8
 801e45e:	d20e      	bcs.n	801e47e <mbedtls_sha1_update_ret+0x4a>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 801e460:	2c3f      	cmp	r4, #63	; 0x3f
 801e462:	d923      	bls.n	801e4ac <mbedtls_sha1_update_ret+0x78>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 801e464:	4629      	mov	r1, r5
 801e466:	4630      	mov	r0, r6
 801e468:	f7ff f814 	bl	801d494 <mbedtls_internal_sha1_process>
 801e46c:	4603      	mov	r3, r0
 801e46e:	bb38      	cbnz	r0, 801e4c0 <mbedtls_sha1_update_ret+0x8c>
            return( ret );

        input += 64;
 801e470:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
 801e472:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 801e474:	2c3f      	cmp	r4, #63	; 0x3f
 801e476:	d8f5      	bhi.n	801e464 <mbedtls_sha1_update_ret+0x30>
    }

    if( ilen > 0 )
 801e478:	b9c4      	cbnz	r4, 801e4ac <mbedtls_sha1_update_ret+0x78>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 801e47a:	2300      	movs	r3, #0
 801e47c:	e020      	b.n	801e4c0 <mbedtls_sha1_update_ret+0x8c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801e47e:	f106 091c 	add.w	r9, r6, #28
 801e482:	4642      	mov	r2, r8
 801e484:	4629      	mov	r1, r5
 801e486:	eb09 0007 	add.w	r0, r9, r7
 801e48a:	f00c f856 	bl	802a53a <memcpy>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 801e48e:	4649      	mov	r1, r9
 801e490:	4630      	mov	r0, r6
 801e492:	f7fe ffff 	bl	801d494 <mbedtls_internal_sha1_process>
 801e496:	4603      	mov	r3, r0
 801e498:	b990      	cbnz	r0, 801e4c0 <mbedtls_sha1_update_ret+0x8c>
        input += fill;
 801e49a:	4445      	add	r5, r8
        ilen  -= fill;
 801e49c:	443c      	add	r4, r7
 801e49e:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 801e4a0:	2c3f      	cmp	r4, #63	; 0x3f
 801e4a2:	d901      	bls.n	801e4a8 <mbedtls_sha1_update_ret+0x74>
        left = 0;
 801e4a4:	2700      	movs	r7, #0
 801e4a6:	e7dd      	b.n	801e464 <mbedtls_sha1_update_ret+0x30>
 801e4a8:	2700      	movs	r7, #0
 801e4aa:	e7e5      	b.n	801e478 <mbedtls_sha1_update_ret+0x44>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801e4ac:	f106 001c 	add.w	r0, r6, #28
 801e4b0:	4622      	mov	r2, r4
 801e4b2:	4629      	mov	r1, r5
 801e4b4:	4438      	add	r0, r7
 801e4b6:	f00c f840 	bl	802a53a <memcpy>
    return( 0 );
 801e4ba:	2300      	movs	r3, #0
 801e4bc:	e000      	b.n	801e4c0 <mbedtls_sha1_update_ret+0x8c>
        return( 0 );
 801e4be:	2300      	movs	r3, #0
}
 801e4c0:	4618      	mov	r0, r3
 801e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e4c6 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 801e4c6:	b570      	push	{r4, r5, r6, lr}
 801e4c8:	4604      	mov	r4, r0
 801e4ca:	460d      	mov	r5, r1
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801e4cc:	6803      	ldr	r3, [r0, #0]
 801e4ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 801e4d2:	1c58      	adds	r0, r3, #1
 801e4d4:	4423      	add	r3, r4
 801e4d6:	2280      	movs	r2, #128	; 0x80
 801e4d8:	771a      	strb	r2, [r3, #28]

    if( used <= 56 )
 801e4da:	2838      	cmp	r0, #56	; 0x38
 801e4dc:	d860      	bhi.n	801e5a0 <mbedtls_sha1_finish_ret+0xda>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 801e4de:	f104 031c 	add.w	r3, r4, #28
 801e4e2:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 801e4e6:	2100      	movs	r1, #0
 801e4e8:	4418      	add	r0, r3
 801e4ea:	f00c f84e 	bl	802a58a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 801e4ee:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 801e4f0:	6862      	ldr	r2, [r4, #4]
    high = ( ctx->total[0] >> 29 )
 801e4f2:	0f59      	lsrs	r1, r3, #29
 801e4f4:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    low  = ( ctx->total[0] <<  3 );
 801e4f8:	00d8      	lsls	r0, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801e4fa:	f3c2 5647 	ubfx	r6, r2, #21, #8
 801e4fe:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
 801e502:	f3c2 364f 	ubfx	r6, r2, #13, #16
 801e506:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
 801e50a:	f3c2 1257 	ubfx	r2, r2, #5, #24
 801e50e:	f884 2056 	strb.w	r2, [r4, #86]	; 0x56
 801e512:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 801e516:	f3c3 5247 	ubfx	r2, r3, #21, #8
 801e51a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 801e51e:	f3c3 324f 	ubfx	r2, r3, #13, #16
 801e522:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801e526:	f3c3 1357 	ubfx	r3, r3, #5, #24
 801e52a:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801e52e:	f884 005b 	strb.w	r0, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 801e532:	f104 011c 	add.w	r1, r4, #28
 801e536:	4620      	mov	r0, r4
 801e538:	f7fe ffac 	bl	801d494 <mbedtls_internal_sha1_process>
 801e53c:	4603      	mov	r3, r0
 801e53e:	2800      	cmp	r0, #0
 801e540:	d12c      	bne.n	801e59c <mbedtls_sha1_finish_ret+0xd6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801e542:	7ae2      	ldrb	r2, [r4, #11]
 801e544:	702a      	strb	r2, [r5, #0]
 801e546:	8962      	ldrh	r2, [r4, #10]
 801e548:	706a      	strb	r2, [r5, #1]
 801e54a:	68a2      	ldr	r2, [r4, #8]
 801e54c:	0a12      	lsrs	r2, r2, #8
 801e54e:	70aa      	strb	r2, [r5, #2]
 801e550:	68a2      	ldr	r2, [r4, #8]
 801e552:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 801e554:	7be2      	ldrb	r2, [r4, #15]
 801e556:	712a      	strb	r2, [r5, #4]
 801e558:	89e2      	ldrh	r2, [r4, #14]
 801e55a:	716a      	strb	r2, [r5, #5]
 801e55c:	68e2      	ldr	r2, [r4, #12]
 801e55e:	0a12      	lsrs	r2, r2, #8
 801e560:	71aa      	strb	r2, [r5, #6]
 801e562:	68e2      	ldr	r2, [r4, #12]
 801e564:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801e566:	7ce2      	ldrb	r2, [r4, #19]
 801e568:	722a      	strb	r2, [r5, #8]
 801e56a:	8a62      	ldrh	r2, [r4, #18]
 801e56c:	726a      	strb	r2, [r5, #9]
 801e56e:	6922      	ldr	r2, [r4, #16]
 801e570:	0a12      	lsrs	r2, r2, #8
 801e572:	72aa      	strb	r2, [r5, #10]
 801e574:	6922      	ldr	r2, [r4, #16]
 801e576:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 801e578:	7de2      	ldrb	r2, [r4, #23]
 801e57a:	732a      	strb	r2, [r5, #12]
 801e57c:	8ae2      	ldrh	r2, [r4, #22]
 801e57e:	736a      	strb	r2, [r5, #13]
 801e580:	6962      	ldr	r2, [r4, #20]
 801e582:	0a12      	lsrs	r2, r2, #8
 801e584:	73aa      	strb	r2, [r5, #14]
 801e586:	6962      	ldr	r2, [r4, #20]
 801e588:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801e58a:	7ee2      	ldrb	r2, [r4, #27]
 801e58c:	742a      	strb	r2, [r5, #16]
 801e58e:	8b62      	ldrh	r2, [r4, #26]
 801e590:	746a      	strb	r2, [r5, #17]
 801e592:	69a2      	ldr	r2, [r4, #24]
 801e594:	0a12      	lsrs	r2, r2, #8
 801e596:	74aa      	strb	r2, [r5, #18]
 801e598:	69a2      	ldr	r2, [r4, #24]
 801e59a:	74ea      	strb	r2, [r5, #19]

    return( 0 );
}
 801e59c:	4618      	mov	r0, r3
 801e59e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 801e5a0:	f104 061c 	add.w	r6, r4, #28
 801e5a4:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 801e5a8:	2100      	movs	r1, #0
 801e5aa:	4430      	add	r0, r6
 801e5ac:	f00b ffed 	bl	802a58a <memset>
        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 801e5b0:	4631      	mov	r1, r6
 801e5b2:	4620      	mov	r0, r4
 801e5b4:	f7fe ff6e 	bl	801d494 <mbedtls_internal_sha1_process>
 801e5b8:	4603      	mov	r3, r0
 801e5ba:	2800      	cmp	r0, #0
 801e5bc:	d1ee      	bne.n	801e59c <mbedtls_sha1_finish_ret+0xd6>
        memset( ctx->buffer, 0, 56 );
 801e5be:	2238      	movs	r2, #56	; 0x38
 801e5c0:	2100      	movs	r1, #0
 801e5c2:	4630      	mov	r0, r6
 801e5c4:	f00b ffe1 	bl	802a58a <memset>
 801e5c8:	e791      	b.n	801e4ee <mbedtls_sha1_finish_ret+0x28>

0801e5ca <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 801e5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5cc:	b099      	sub	sp, #100	; 0x64
 801e5ce:	4604      	mov	r4, r0
 801e5d0:	460d      	mov	r5, r1
 801e5d2:	4616      	mov	r6, r2
    mbedtls_sha1_context ctx;

    SHA1_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA1_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha1_init( &ctx );
 801e5d4:	a801      	add	r0, sp, #4
 801e5d6:	f7fe ff31 	bl	801d43c <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 801e5da:	a801      	add	r0, sp, #4
 801e5dc:	f7fe ff40 	bl	801d460 <mbedtls_sha1_starts_ret>
 801e5e0:	4607      	mov	r7, r0
 801e5e2:	b128      	cbz	r0, 801e5f0 <mbedtls_sha1_ret+0x26>

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 801e5e4:	a801      	add	r0, sp, #4
 801e5e6:	f7fe ff2f 	bl	801d448 <mbedtls_sha1_free>

    return( ret );
}
 801e5ea:	4638      	mov	r0, r7
 801e5ec:	b019      	add	sp, #100	; 0x64
 801e5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 801e5f0:	462a      	mov	r2, r5
 801e5f2:	4621      	mov	r1, r4
 801e5f4:	a801      	add	r0, sp, #4
 801e5f6:	f7ff ff1d 	bl	801e434 <mbedtls_sha1_update_ret>
 801e5fa:	4607      	mov	r7, r0
 801e5fc:	2800      	cmp	r0, #0
 801e5fe:	d1f1      	bne.n	801e5e4 <mbedtls_sha1_ret+0x1a>
    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 801e600:	4631      	mov	r1, r6
 801e602:	a801      	add	r0, sp, #4
 801e604:	f7ff ff5f 	bl	801e4c6 <mbedtls_sha1_finish_ret>
 801e608:	4607      	mov	r7, r0
exit:
 801e60a:	e7eb      	b.n	801e5e4 <mbedtls_sha1_ret+0x1a>

0801e60c <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 801e60c:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 801e60e:	226c      	movs	r2, #108	; 0x6c
 801e610:	2100      	movs	r1, #0
 801e612:	f00b ffba 	bl	802a58a <memset>
}
 801e616:	bd08      	pop	{r3, pc}

0801e618 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 801e618:	b120      	cbz	r0, 801e624 <mbedtls_sha256_free+0xc>
{
 801e61a:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 801e61c:	216c      	movs	r1, #108	; 0x6c
 801e61e:	f7fc fc91 	bl	801af44 <mbedtls_platform_zeroize>
}
 801e622:	bd08      	pop	{r3, pc}
 801e624:	4770      	bx	lr

0801e626 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 801e626:	b508      	push	{r3, lr}
    SHA256_VALIDATE( dst != NULL );
    SHA256_VALIDATE( src != NULL );

    *dst = *src;
 801e628:	226c      	movs	r2, #108	; 0x6c
 801e62a:	f00b ff86 	bl	802a53a <memcpy>
}
 801e62e:	bd08      	pop	{r3, pc}

0801e630 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 801e630:	2300      	movs	r3, #0
 801e632:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 801e634:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 801e636:	460b      	mov	r3, r1
 801e638:	b9b9      	cbnz	r1, 801e66a <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 801e63a:	4a19      	ldr	r2, [pc, #100]	; (801e6a0 <mbedtls_sha256_starts_ret+0x70>)
 801e63c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 801e63e:	4a19      	ldr	r2, [pc, #100]	; (801e6a4 <mbedtls_sha256_starts_ret+0x74>)
 801e640:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 801e642:	4a19      	ldr	r2, [pc, #100]	; (801e6a8 <mbedtls_sha256_starts_ret+0x78>)
 801e644:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 801e646:	4a19      	ldr	r2, [pc, #100]	; (801e6ac <mbedtls_sha256_starts_ret+0x7c>)
 801e648:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
 801e64a:	4a19      	ldr	r2, [pc, #100]	; (801e6b0 <mbedtls_sha256_starts_ret+0x80>)
 801e64c:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 801e64e:	4a19      	ldr	r2, [pc, #100]	; (801e6b4 <mbedtls_sha256_starts_ret+0x84>)
 801e650:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 801e652:	4a19      	ldr	r2, [pc, #100]	; (801e6b8 <mbedtls_sha256_starts_ret+0x88>)
 801e654:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 801e656:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
 801e65a:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
 801e65e:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
 801e662:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
 801e664:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
 801e666:	2000      	movs	r0, #0
 801e668:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
 801e66a:	4a14      	ldr	r2, [pc, #80]	; (801e6bc <mbedtls_sha256_starts_ret+0x8c>)
 801e66c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
 801e66e:	4a14      	ldr	r2, [pc, #80]	; (801e6c0 <mbedtls_sha256_starts_ret+0x90>)
 801e670:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 801e672:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
 801e676:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 801e67a:	f502 6201 	add.w	r2, r2, #2064	; 0x810
 801e67e:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 801e680:	4a10      	ldr	r2, [pc, #64]	; (801e6c4 <mbedtls_sha256_starts_ret+0x94>)
 801e682:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 801e684:	4a10      	ldr	r2, [pc, #64]	; (801e6c8 <mbedtls_sha256_starts_ret+0x98>)
 801e686:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
 801e688:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
 801e68c:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
 801e690:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
 801e694:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 801e696:	4a0d      	ldr	r2, [pc, #52]	; (801e6cc <mbedtls_sha256_starts_ret+0x9c>)
 801e698:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 801e69a:	4a0d      	ldr	r2, [pc, #52]	; (801e6d0 <mbedtls_sha256_starts_ret+0xa0>)
 801e69c:	6242      	str	r2, [r0, #36]	; 0x24
 801e69e:	e7e1      	b.n	801e664 <mbedtls_sha256_starts_ret+0x34>
 801e6a0:	6a09e667 	.word	0x6a09e667
 801e6a4:	bb67ae85 	.word	0xbb67ae85
 801e6a8:	3c6ef372 	.word	0x3c6ef372
 801e6ac:	a54ff53a 	.word	0xa54ff53a
 801e6b0:	510e527f 	.word	0x510e527f
 801e6b4:	9b05688c 	.word	0x9b05688c
 801e6b8:	1f83d9ab 	.word	0x1f83d9ab
 801e6bc:	c1059ed8 	.word	0xc1059ed8
 801e6c0:	367cd507 	.word	0x367cd507
 801e6c4:	f70e5939 	.word	0xf70e5939
 801e6c8:	ffc00b31 	.word	0xffc00b31
 801e6cc:	64f98fa7 	.word	0x64f98fa7
 801e6d0:	befa4fa4 	.word	0xbefa4fa4

0801e6d4 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 801e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d8:	b0d3      	sub	sp, #332	; 0x14c
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 801e6da:	f100 0308 	add.w	r3, r0, #8
 801e6de:	9307      	str	r3, [sp, #28]
 801e6e0:	aa09      	add	r2, sp, #36	; 0x24
 801e6e2:	9208      	str	r2, [sp, #32]
 801e6e4:	f100 0428 	add.w	r4, r0, #40	; 0x28
 801e6e8:	9409      	str	r4, [sp, #36]	; 0x24
        A[i] = ctx->state[i];
 801e6ea:	f853 0b04 	ldr.w	r0, [r3], #4
 801e6ee:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
 801e6f2:	42a3      	cmp	r3, r4
 801e6f4:	d1f9      	bne.n	801e6ea <mbedtls_internal_sha256_process+0x16>
 801e6f6:	aa11      	add	r2, sp, #68	; 0x44
 801e6f8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 801e6fc:	ac21      	add	r4, sp, #132	; 0x84
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 801e6fe:	7808      	ldrb	r0, [r1, #0]
 801e700:	784b      	ldrb	r3, [r1, #1]
 801e702:	041b      	lsls	r3, r3, #16
 801e704:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801e708:	78c8      	ldrb	r0, [r1, #3]
 801e70a:	4303      	orrs	r3, r0
 801e70c:	7888      	ldrb	r0, [r1, #2]
 801e70e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 801e712:	f842 3f04 	str.w	r3, [r2, #4]!
    for( i = 0; i < 16; i++ )
 801e716:	3104      	adds	r1, #4
 801e718:	42a2      	cmp	r2, r4
 801e71a:	d1f0      	bne.n	801e6fe <mbedtls_internal_sha256_process+0x2a>
 801e71c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e71e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e720:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e722:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e724:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 801e728:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e72a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 801e72e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801e732:	4b99      	ldr	r3, [pc, #612]	; (801e998 <mbedtls_internal_sha256_process+0x2c4>)
 801e734:	9301      	str	r3, [sp, #4]
 801e736:	f8cd b014 	str.w	fp, [sp, #20]
 801e73a:	4699      	mov	r9, r3
 801e73c:	4688      	mov	r8, r1
 801e73e:	4615      	mov	r5, r2

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 801e740:	ea4f 23f4 	mov.w	r3, r4, ror #11
 801e744:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
 801e748:	ea83 6174 	eor.w	r1, r3, r4, ror #25
 801e74c:	f8d9 3000 	ldr.w	r3, [r9]
 801e750:	f8db 2000 	ldr.w	r2, [fp]
 801e754:	4413      	add	r3, r2
 801e756:	440b      	add	r3, r1
 801e758:	ea88 0206 	eor.w	r2, r8, r6
 801e75c:	4022      	ands	r2, r4
 801e75e:	ea82 0208 	eor.w	r2, r2, r8
 801e762:	4413      	add	r3, r2
 801e764:	441d      	add	r5, r3
 801e766:	eb0a 0205 	add.w	r2, sl, r5
 801e76a:	ea4f 337e 	mov.w	r3, lr, ror #13
 801e76e:	ea83 03be 	eor.w	r3, r3, lr, ror #2
 801e772:	ea83 53be 	eor.w	r3, r3, lr, ror #22
 801e776:	ea4e 0107 	orr.w	r1, lr, r7
 801e77a:	ea01 010c 	and.w	r1, r1, ip
 801e77e:	ea0e 0007 	and.w	r0, lr, r7
 801e782:	4301      	orrs	r1, r0
 801e784:	440b      	add	r3, r1
 801e786:	441d      	add	r5, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 801e788:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e78c:	f8db 1004 	ldr.w	r1, [fp, #4]
 801e790:	440b      	add	r3, r1
 801e792:	4498      	add	r8, r3
 801e794:	ea84 0306 	eor.w	r3, r4, r6
 801e798:	4013      	ands	r3, r2
 801e79a:	4073      	eors	r3, r6
 801e79c:	4498      	add	r8, r3
 801e79e:	ea4f 23f2 	mov.w	r3, r2, ror #11
 801e7a2:	ea83 13b2 	eor.w	r3, r3, r2, ror #6
 801e7a6:	ea83 6372 	eor.w	r3, r3, r2, ror #25
 801e7aa:	4443      	add	r3, r8
 801e7ac:	449c      	add	ip, r3
 801e7ae:	ea4f 3875 	mov.w	r8, r5, ror #13
 801e7b2:	ea88 08b5 	eor.w	r8, r8, r5, ror #2
 801e7b6:	ea88 58b5 	eor.w	r8, r8, r5, ror #22
 801e7ba:	ea45 010e 	orr.w	r1, r5, lr
 801e7be:	4039      	ands	r1, r7
 801e7c0:	ea05 000e 	and.w	r0, r5, lr
 801e7c4:	4301      	orrs	r1, r0
 801e7c6:	4488      	add	r8, r1
 801e7c8:	4498      	add	r8, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 801e7ca:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801e7ce:	f8db 0008 	ldr.w	r0, [fp, #8]
 801e7d2:	180b      	adds	r3, r1, r0
 801e7d4:	4433      	add	r3, r6
 801e7d6:	ea82 0604 	eor.w	r6, r2, r4
 801e7da:	ea06 060c 	and.w	r6, r6, ip
 801e7de:	4066      	eors	r6, r4
 801e7e0:	4433      	add	r3, r6
 801e7e2:	ea4f 26fc 	mov.w	r6, ip, ror #11
 801e7e6:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 801e7ea:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 801e7ee:	441e      	add	r6, r3
 801e7f0:	4437      	add	r7, r6
 801e7f2:	ea4f 3378 	mov.w	r3, r8, ror #13
 801e7f6:	ea83 03b8 	eor.w	r3, r3, r8, ror #2
 801e7fa:	ea83 53b8 	eor.w	r3, r3, r8, ror #22
 801e7fe:	ea45 0108 	orr.w	r1, r5, r8
 801e802:	ea01 010e 	and.w	r1, r1, lr
 801e806:	ea05 0008 	and.w	r0, r5, r8
 801e80a:	4301      	orrs	r1, r0
 801e80c:	440b      	add	r3, r1
 801e80e:	4433      	add	r3, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 801e810:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801e814:	f8db 000c 	ldr.w	r0, [fp, #12]
 801e818:	4401      	add	r1, r0
 801e81a:	4421      	add	r1, r4
 801e81c:	ea82 040c 	eor.w	r4, r2, ip
 801e820:	403c      	ands	r4, r7
 801e822:	4054      	eors	r4, r2
 801e824:	4421      	add	r1, r4
 801e826:	ea4f 24f7 	mov.w	r4, r7, ror #11
 801e82a:	ea84 14b7 	eor.w	r4, r4, r7, ror #6
 801e82e:	ea84 6477 	eor.w	r4, r4, r7, ror #25
 801e832:	440c      	add	r4, r1
 801e834:	44a6      	add	lr, r4
 801e836:	ea4f 3173 	mov.w	r1, r3, ror #13
 801e83a:	ea81 01b3 	eor.w	r1, r1, r3, ror #2
 801e83e:	ea81 51b3 	eor.w	r1, r1, r3, ror #22
 801e842:	ea48 0003 	orr.w	r0, r8, r3
 801e846:	4028      	ands	r0, r5
 801e848:	ea08 0603 	and.w	r6, r8, r3
 801e84c:	4330      	orrs	r0, r6
 801e84e:	4401      	add	r1, r0
 801e850:	4421      	add	r1, r4
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 801e852:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801e856:	f8db 4010 	ldr.w	r4, [fp, #16]
 801e85a:	4420      	add	r0, r4
 801e85c:	4402      	add	r2, r0
 801e85e:	ea8c 0007 	eor.w	r0, ip, r7
 801e862:	ea00 000e 	and.w	r0, r0, lr
 801e866:	ea80 000c 	eor.w	r0, r0, ip
 801e86a:	4402      	add	r2, r0
 801e86c:	ea4f 2afe 	mov.w	sl, lr, ror #11
 801e870:	ea8a 1abe 	eor.w	sl, sl, lr, ror #6
 801e874:	ea8a 6a7e 	eor.w	sl, sl, lr, ror #25
 801e878:	eb02 000a 	add.w	r0, r2, sl
 801e87c:	4405      	add	r5, r0
 801e87e:	ea4f 3271 	mov.w	r2, r1, ror #13
 801e882:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 801e886:	ea82 52b1 	eor.w	r2, r2, r1, ror #22
 801e88a:	ea43 0a01 	orr.w	sl, r3, r1
 801e88e:	ea0a 0a08 	and.w	sl, sl, r8
 801e892:	ea03 0401 	and.w	r4, r3, r1
 801e896:	ea4a 0a04 	orr.w	sl, sl, r4
 801e89a:	4452      	add	r2, sl
 801e89c:	eb02 0a00 	add.w	sl, r2, r0
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 801e8a0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801e8a4:	f8db 4014 	ldr.w	r4, [fp, #20]
 801e8a8:	4420      	add	r0, r4
 801e8aa:	4484      	add	ip, r0
 801e8ac:	ea87 020e 	eor.w	r2, r7, lr
 801e8b0:	402a      	ands	r2, r5
 801e8b2:	407a      	eors	r2, r7
 801e8b4:	4494      	add	ip, r2
 801e8b6:	ea4f 22f5 	mov.w	r2, r5, ror #11
 801e8ba:	ea82 12b5 	eor.w	r2, r2, r5, ror #6
 801e8be:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 801e8c2:	4462      	add	r2, ip
 801e8c4:	4490      	add	r8, r2
 801e8c6:	ea4f 3c7a 	mov.w	ip, sl, ror #13
 801e8ca:	ea8c 0cba 	eor.w	ip, ip, sl, ror #2
 801e8ce:	ea8c 5cba 	eor.w	ip, ip, sl, ror #22
 801e8d2:	ea41 000a 	orr.w	r0, r1, sl
 801e8d6:	4018      	ands	r0, r3
 801e8d8:	ea01 040a 	and.w	r4, r1, sl
 801e8dc:	4320      	orrs	r0, r4
 801e8de:	4484      	add	ip, r0
 801e8e0:	4494      	add	ip, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 801e8e2:	f8d9 2018 	ldr.w	r2, [r9, #24]
 801e8e6:	f8db 0018 	ldr.w	r0, [fp, #24]
 801e8ea:	4402      	add	r2, r0
 801e8ec:	4417      	add	r7, r2
 801e8ee:	ea8e 0205 	eor.w	r2, lr, r5
 801e8f2:	ea02 0208 	and.w	r2, r2, r8
 801e8f6:	ea82 020e 	eor.w	r2, r2, lr
 801e8fa:	4417      	add	r7, r2
 801e8fc:	ea4f 22f8 	mov.w	r2, r8, ror #11
 801e900:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 801e904:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 801e908:	443a      	add	r2, r7
 801e90a:	189e      	adds	r6, r3, r2
 801e90c:	ea4f 377c 	mov.w	r7, ip, ror #13
 801e910:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 801e914:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 801e918:	ea4a 030c 	orr.w	r3, sl, ip
 801e91c:	400b      	ands	r3, r1
 801e91e:	ea0a 000c 	and.w	r0, sl, ip
 801e922:	4303      	orrs	r3, r0
 801e924:	441f      	add	r7, r3
 801e926:	4417      	add	r7, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 801e928:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801e92c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e930:	4413      	add	r3, r2
 801e932:	449e      	add	lr, r3
 801e934:	ea85 0308 	eor.w	r3, r5, r8
 801e938:	4033      	ands	r3, r6
 801e93a:	406b      	eors	r3, r5
 801e93c:	449e      	add	lr, r3
 801e93e:	ea4f 23f6 	mov.w	r3, r6, ror #11
 801e942:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 801e946:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 801e94a:	4473      	add	r3, lr
 801e94c:	18cc      	adds	r4, r1, r3
 801e94e:	ea4f 3e77 	mov.w	lr, r7, ror #13
 801e952:	ea8e 0eb7 	eor.w	lr, lr, r7, ror #2
 801e956:	ea8e 5eb7 	eor.w	lr, lr, r7, ror #22
 801e95a:	ea4c 0207 	orr.w	r2, ip, r7
 801e95e:	ea02 020a 	and.w	r2, r2, sl
 801e962:	ea0c 0107 	and.w	r1, ip, r7
 801e966:	430a      	orrs	r2, r1
 801e968:	4496      	add	lr, r2
 801e96a:	449e      	add	lr, r3
    for( i = 0; i < 16; i += 8 )
 801e96c:	f109 0920 	add.w	r9, r9, #32
 801e970:	f10b 0b20 	add.w	fp, fp, #32
 801e974:	4b09      	ldr	r3, [pc, #36]	; (801e99c <mbedtls_internal_sha256_process+0x2c8>)
 801e976:	4599      	cmp	r9, r3
 801e978:	f47f aee2 	bne.w	801e740 <mbedtls_internal_sha256_process+0x6c>
 801e97c:	9504      	str	r5, [sp, #16]
 801e97e:	9403      	str	r4, [sp, #12]
 801e980:	f8cd 8008 	str.w	r8, [sp, #8]
 801e984:	f8dd b014 	ldr.w	fp, [sp, #20]
 801e988:	f10b 03c0 	add.w	r3, fp, #192	; 0xc0
 801e98c:	9306      	str	r3, [sp, #24]
 801e98e:	4633      	mov	r3, r6
 801e990:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801e994:	e004      	b.n	801e9a0 <mbedtls_internal_sha256_process+0x2cc>
 801e996:	bf00      	nop
 801e998:	08032f18 	.word	0x08032f18
 801e99c:	08032f58 	.word	0x08032f58
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 801e9a0:	f8db 4004 	ldr.w	r4, [fp, #4]
 801e9a4:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 801e9a8:	ea4f 41f2 	mov.w	r1, r2, ror #19
 801e9ac:	ea81 4172 	eor.w	r1, r1, r2, ror #17
 801e9b0:	ea81 2192 	eor.w	r1, r1, r2, lsr #10
 801e9b4:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 801e9b8:	f8db 0000 	ldr.w	r0, [fp]
 801e9bc:	4402      	add	r2, r0
 801e9be:	4411      	add	r1, r2
 801e9c0:	ea4f 40b4 	mov.w	r0, r4, ror #18
 801e9c4:	ea80 10f4 	eor.w	r0, r0, r4, ror #7
 801e9c8:	ea80 00d4 	eor.w	r0, r0, r4, lsr #3
 801e9cc:	180d      	adds	r5, r1, r0
 801e9ce:	9903      	ldr	r1, [sp, #12]
 801e9d0:	ea4f 20f1 	mov.w	r0, r1, ror #11
 801e9d4:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 801e9d8:	ea80 6271 	eor.w	r2, r0, r1, ror #25
 801e9dc:	9e02      	ldr	r6, [sp, #8]
 801e9de:	4630      	mov	r0, r6
 801e9e0:	4058      	eors	r0, r3
 801e9e2:	4008      	ands	r0, r1
 801e9e4:	4070      	eors	r0, r6
 801e9e6:	4410      	add	r0, r2
 801e9e8:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
 801e9ec:	4410      	add	r0, r2
 801e9ee:	4428      	add	r0, r5
 801e9f0:	9505      	str	r5, [sp, #20]
 801e9f2:	f8cb 5040 	str.w	r5, [fp, #64]	; 0x40
 801e9f6:	9a04      	ldr	r2, [sp, #16]
 801e9f8:	4402      	add	r2, r0
 801e9fa:	4610      	mov	r0, r2
 801e9fc:	4492      	add	sl, r2
 801e9fe:	ea4f 327e 	mov.w	r2, lr, ror #13
 801ea02:	ea82 02be 	eor.w	r2, r2, lr, ror #2
 801ea06:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 801ea0a:	ea4e 0107 	orr.w	r1, lr, r7
 801ea0e:	ea01 010c 	and.w	r1, r1, ip
 801ea12:	ea0e 0507 	and.w	r5, lr, r7
 801ea16:	4329      	orrs	r1, r5
 801ea18:	4411      	add	r1, r2
 801ea1a:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801ea1c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ea20:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
 801ea24:	ea4f 45f1 	mov.w	r5, r1, ror #19
 801ea28:	ea85 4571 	eor.w	r5, r5, r1, ror #17
 801ea2c:	ea85 2591 	eor.w	r5, r5, r1, lsr #10
 801ea30:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
 801ea34:	4421      	add	r1, r4
 801ea36:	440d      	add	r5, r1
 801ea38:	ea4f 46b2 	mov.w	r6, r2, ror #18
 801ea3c:	ea86 16f2 	eor.w	r6, r6, r2, ror #7
 801ea40:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
 801ea44:	442e      	add	r6, r5
 801ea46:	9c03      	ldr	r4, [sp, #12]
 801ea48:	ea84 0503 	eor.w	r5, r4, r3
 801ea4c:	ea05 050a 	and.w	r5, r5, sl
 801ea50:	405d      	eors	r5, r3
 801ea52:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 801ea56:	9c02      	ldr	r4, [sp, #8]
 801ea58:	4421      	add	r1, r4
 801ea5a:	198c      	adds	r4, r1, r6
 801ea5c:	4425      	add	r5, r4
 801ea5e:	f8cb 6044 	str.w	r6, [fp, #68]	; 0x44
 801ea62:	ea4f 21fa 	mov.w	r1, sl, ror #11
 801ea66:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
 801ea6a:	ea81 617a 	eor.w	r1, r1, sl, ror #25
 801ea6e:	194c      	adds	r4, r1, r5
 801ea70:	44a4      	add	ip, r4
 801ea72:	f8cd c008 	str.w	ip, [sp, #8]
 801ea76:	ea4f 3170 	mov.w	r1, r0, ror #13
 801ea7a:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 801ea7e:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 801ea82:	ea4e 0500 	orr.w	r5, lr, r0
 801ea86:	403d      	ands	r5, r7
 801ea88:	ea0e 0c00 	and.w	ip, lr, r0
 801ea8c:	ea45 050c 	orr.w	r5, r5, ip
 801ea90:	4429      	add	r1, r5
 801ea92:	4421      	add	r1, r4
 801ea94:	9104      	str	r1, [sp, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 801ea96:	f8db 500c 	ldr.w	r5, [fp, #12]
 801ea9a:	9c05      	ldr	r4, [sp, #20]
 801ea9c:	ea4f 48f4 	mov.w	r8, r4, ror #19
 801eaa0:	ea88 4874 	eor.w	r8, r8, r4, ror #17
 801eaa4:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 801eaa8:	f8db 402c 	ldr.w	r4, [fp, #44]	; 0x2c
 801eaac:	4414      	add	r4, r2
 801eaae:	44a0      	add	r8, r4
 801eab0:	ea4f 4cb5 	mov.w	ip, r5, ror #18
 801eab4:	ea8c 1cf5 	eor.w	ip, ip, r5, ror #7
 801eab8:	ea8c 0cd5 	eor.w	ip, ip, r5, lsr #3
 801eabc:	44c4      	add	ip, r8
 801eabe:	9a03      	ldr	r2, [sp, #12]
 801eac0:	ea82 040a 	eor.w	r4, r2, sl
 801eac4:	9902      	ldr	r1, [sp, #8]
 801eac6:	400c      	ands	r4, r1
 801eac8:	4054      	eors	r4, r2
 801eaca:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
 801eace:	441a      	add	r2, r3
 801ead0:	4462      	add	r2, ip
 801ead2:	4414      	add	r4, r2
 801ead4:	f8cb c048 	str.w	ip, [fp, #72]	; 0x48
 801ead8:	ea4f 23f1 	mov.w	r3, r1, ror #11
 801eadc:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
 801eae0:	ea83 6371 	eor.w	r3, r3, r1, ror #25
 801eae4:	191a      	adds	r2, r3, r4
 801eae6:	18bb      	adds	r3, r7, r2
 801eae8:	9301      	str	r3, [sp, #4]
 801eaea:	9904      	ldr	r1, [sp, #16]
 801eaec:	ea4f 3371 	mov.w	r3, r1, ror #13
 801eaf0:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 801eaf4:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 801eaf8:	ea40 0401 	orr.w	r4, r0, r1
 801eafc:	ea04 040e 	and.w	r4, r4, lr
 801eb00:	460f      	mov	r7, r1
 801eb02:	ea00 0801 	and.w	r8, r0, r1
 801eb06:	ea44 0408 	orr.w	r4, r4, r8
 801eb0a:	4423      	add	r3, r4
 801eb0c:	4413      	add	r3, r2
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 801eb0e:	f8db 4010 	ldr.w	r4, [fp, #16]
 801eb12:	ea4f 42f6 	mov.w	r2, r6, ror #19
 801eb16:	ea82 4276 	eor.w	r2, r2, r6, ror #17
 801eb1a:	ea82 2696 	eor.w	r6, r2, r6, lsr #10
 801eb1e:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 801eb22:	442a      	add	r2, r5
 801eb24:	4416      	add	r6, r2
 801eb26:	ea4f 42b4 	mov.w	r2, r4, ror #18
 801eb2a:	ea82 12f4 	eor.w	r2, r2, r4, ror #7
 801eb2e:	ea82 02d4 	eor.w	r2, r2, r4, lsr #3
 801eb32:	4416      	add	r6, r2
 801eb34:	9902      	ldr	r1, [sp, #8]
 801eb36:	ea8a 0801 	eor.w	r8, sl, r1
 801eb3a:	9a01      	ldr	r2, [sp, #4]
 801eb3c:	ea08 0802 	and.w	r8, r8, r2
 801eb40:	ea88 080a 	eor.w	r8, r8, sl
 801eb44:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
 801eb48:	9d03      	ldr	r5, [sp, #12]
 801eb4a:	442a      	add	r2, r5
 801eb4c:	1995      	adds	r5, r2, r6
 801eb4e:	44a8      	add	r8, r5
 801eb50:	f8cb 604c 	str.w	r6, [fp, #76]	; 0x4c
 801eb54:	9a01      	ldr	r2, [sp, #4]
 801eb56:	ea4f 22f2 	mov.w	r2, r2, ror #11
 801eb5a:	9901      	ldr	r1, [sp, #4]
 801eb5c:	ea82 12b1 	eor.w	r2, r2, r1, ror #6
 801eb60:	ea82 6271 	eor.w	r2, r2, r1, ror #25
 801eb64:	eb02 0508 	add.w	r5, r2, r8
 801eb68:	44ae      	add	lr, r5
 801eb6a:	ea4f 3273 	mov.w	r2, r3, ror #13
 801eb6e:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 801eb72:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 801eb76:	ea47 0803 	orr.w	r8, r7, r3
 801eb7a:	ea08 0800 	and.w	r8, r8, r0
 801eb7e:	ea07 0103 	and.w	r1, r7, r3
 801eb82:	ea48 0801 	orr.w	r8, r8, r1
 801eb86:	4442      	add	r2, r8
 801eb88:	442a      	add	r2, r5
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 801eb8a:	f8db 8014 	ldr.w	r8, [fp, #20]
 801eb8e:	ea4f 45fc 	mov.w	r5, ip, ror #19
 801eb92:	ea85 457c 	eor.w	r5, r5, ip, ror #17
 801eb96:	ea85 2c9c 	eor.w	ip, r5, ip, lsr #10
 801eb9a:	f8db 5034 	ldr.w	r5, [fp, #52]	; 0x34
 801eb9e:	442c      	add	r4, r5
 801eba0:	44a4      	add	ip, r4
 801eba2:	ea4f 44b8 	mov.w	r4, r8, ror #18
 801eba6:	ea84 14f8 	eor.w	r4, r4, r8, ror #7
 801ebaa:	ea84 04d8 	eor.w	r4, r4, r8, lsr #3
 801ebae:	4464      	add	r4, ip
 801ebb0:	9d02      	ldr	r5, [sp, #8]
 801ebb2:	9f01      	ldr	r7, [sp, #4]
 801ebb4:	ea85 0c07 	eor.w	ip, r5, r7
 801ebb8:	ea0c 0c0e 	and.w	ip, ip, lr
 801ebbc:	ea8c 0c05 	eor.w	ip, ip, r5
 801ebc0:	f8d9 5050 	ldr.w	r5, [r9, #80]	; 0x50
 801ebc4:	4425      	add	r5, r4
 801ebc6:	44aa      	add	sl, r5
 801ebc8:	44d4      	add	ip, sl
 801ebca:	f8cb 4050 	str.w	r4, [fp, #80]	; 0x50
 801ebce:	ea4f 2afe 	mov.w	sl, lr, ror #11
 801ebd2:	ea8a 1abe 	eor.w	sl, sl, lr, ror #6
 801ebd6:	ea8a 6a7e 	eor.w	sl, sl, lr, ror #25
 801ebda:	eb0a 050c 	add.w	r5, sl, ip
 801ebde:	4428      	add	r0, r5
 801ebe0:	4601      	mov	r1, r0
 801ebe2:	ea4f 3a72 	mov.w	sl, r2, ror #13
 801ebe6:	ea8a 0ab2 	eor.w	sl, sl, r2, ror #2
 801ebea:	ea8a 5ab2 	eor.w	sl, sl, r2, ror #22
 801ebee:	ea43 0002 	orr.w	r0, r3, r2
 801ebf2:	9f04      	ldr	r7, [sp, #16]
 801ebf4:	4038      	ands	r0, r7
 801ebf6:	ea03 0c02 	and.w	ip, r3, r2
 801ebfa:	ea40 000c 	orr.w	r0, r0, ip
 801ebfe:	4482      	add	sl, r0
 801ec00:	44aa      	add	sl, r5
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 801ec02:	f8db 5018 	ldr.w	r5, [fp, #24]
 801ec06:	ea4f 40f6 	mov.w	r0, r6, ror #19
 801ec0a:	ea80 4076 	eor.w	r0, r0, r6, ror #17
 801ec0e:	ea80 2696 	eor.w	r6, r0, r6, lsr #10
 801ec12:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 801ec16:	4480      	add	r8, r0
 801ec18:	4446      	add	r6, r8
 801ec1a:	ea4f 48b5 	mov.w	r8, r5, ror #18
 801ec1e:	ea88 18f5 	eor.w	r8, r8, r5, ror #7
 801ec22:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
 801ec26:	4446      	add	r6, r8
 801ec28:	9801      	ldr	r0, [sp, #4]
 801ec2a:	ea80 080e 	eor.w	r8, r0, lr
 801ec2e:	460f      	mov	r7, r1
 801ec30:	ea08 0801 	and.w	r8, r8, r1
 801ec34:	9901      	ldr	r1, [sp, #4]
 801ec36:	ea88 0801 	eor.w	r8, r8, r1
 801ec3a:	f8d9 0054 	ldr.w	r0, [r9, #84]	; 0x54
 801ec3e:	4430      	add	r0, r6
 801ec40:	9902      	ldr	r1, [sp, #8]
 801ec42:	4408      	add	r0, r1
 801ec44:	4480      	add	r8, r0
 801ec46:	f8cb 6054 	str.w	r6, [fp, #84]	; 0x54
 801ec4a:	ea4f 2cf7 	mov.w	ip, r7, ror #11
 801ec4e:	ea8c 1cb7 	eor.w	ip, ip, r7, ror #6
 801ec52:	ea8c 6c77 	eor.w	ip, ip, r7, ror #25
 801ec56:	eb0c 0008 	add.w	r0, ip, r8
 801ec5a:	9904      	ldr	r1, [sp, #16]
 801ec5c:	4401      	add	r1, r0
 801ec5e:	9102      	str	r1, [sp, #8]
 801ec60:	ea4f 3c7a 	mov.w	ip, sl, ror #13
 801ec64:	ea8c 0cba 	eor.w	ip, ip, sl, ror #2
 801ec68:	ea8c 5cba 	eor.w	ip, ip, sl, ror #22
 801ec6c:	ea42 010a 	orr.w	r1, r2, sl
 801ec70:	4019      	ands	r1, r3
 801ec72:	ea02 080a 	and.w	r8, r2, sl
 801ec76:	ea41 0108 	orr.w	r1, r1, r8
 801ec7a:	448c      	add	ip, r1
 801ec7c:	4484      	add	ip, r0
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 801ec7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ec82:	ea4f 41f4 	mov.w	r1, r4, ror #19
 801ec86:	ea81 4174 	eor.w	r1, r1, r4, ror #17
 801ec8a:	ea81 2494 	eor.w	r4, r1, r4, lsr #10
 801ec8e:	f8db 103c 	ldr.w	r1, [fp, #60]	; 0x3c
 801ec92:	440d      	add	r5, r1
 801ec94:	442c      	add	r4, r5
 801ec96:	ea4f 45b0 	mov.w	r5, r0, ror #18
 801ec9a:	ea85 15f0 	eor.w	r5, r5, r0, ror #7
 801ec9e:	ea85 05d0 	eor.w	r5, r5, r0, lsr #3
 801eca2:	442c      	add	r4, r5
 801eca4:	9704      	str	r7, [sp, #16]
 801eca6:	ea8e 0507 	eor.w	r5, lr, r7
 801ecaa:	9902      	ldr	r1, [sp, #8]
 801ecac:	400d      	ands	r5, r1
 801ecae:	ea85 050e 	eor.w	r5, r5, lr
 801ecb2:	f8d9 1058 	ldr.w	r1, [r9, #88]	; 0x58
 801ecb6:	4421      	add	r1, r4
 801ecb8:	9f01      	ldr	r7, [sp, #4]
 801ecba:	440f      	add	r7, r1
 801ecbc:	442f      	add	r7, r5
 801ecbe:	f8cb 4058 	str.w	r4, [fp, #88]	; 0x58
 801ecc2:	9d02      	ldr	r5, [sp, #8]
 801ecc4:	ea4f 21f5 	mov.w	r1, r5, ror #11
 801ecc8:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 801eccc:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 801ecd0:	4439      	add	r1, r7
 801ecd2:	440b      	add	r3, r1
 801ecd4:	ea4f 377c 	mov.w	r7, ip, ror #13
 801ecd8:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 801ecdc:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 801ece0:	ea4a 040c 	orr.w	r4, sl, ip
 801ece4:	4014      	ands	r4, r2
 801ece6:	ea0a 050c 	and.w	r5, sl, ip
 801ecea:	432c      	orrs	r4, r5
 801ecec:	4427      	add	r7, r4
 801ecee:	440f      	add	r7, r1
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 801ecf0:	f8db 1020 	ldr.w	r1, [fp, #32]
 801ecf4:	ea4f 48f6 	mov.w	r8, r6, ror #19
 801ecf8:	ea88 4876 	eor.w	r8, r8, r6, ror #17
 801ecfc:	ea88 2696 	eor.w	r6, r8, r6, lsr #10
 801ed00:	9c05      	ldr	r4, [sp, #20]
 801ed02:	4420      	add	r0, r4
 801ed04:	4406      	add	r6, r0
 801ed06:	ea4f 40b1 	mov.w	r0, r1, ror #18
 801ed0a:	ea80 10f1 	eor.w	r0, r0, r1, ror #7
 801ed0e:	ea80 01d1 	eor.w	r1, r0, r1, lsr #3
 801ed12:	440e      	add	r6, r1
 801ed14:	9904      	ldr	r1, [sp, #16]
 801ed16:	4608      	mov	r0, r1
 801ed18:	9d02      	ldr	r5, [sp, #8]
 801ed1a:	4068      	eors	r0, r5
 801ed1c:	4018      	ands	r0, r3
 801ed1e:	4048      	eors	r0, r1
 801ed20:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 801ed24:	4431      	add	r1, r6
 801ed26:	448e      	add	lr, r1
 801ed28:	4486      	add	lr, r0
 801ed2a:	f8cb 605c 	str.w	r6, [fp, #92]	; 0x5c
 801ed2e:	ea4f 21f3 	mov.w	r1, r3, ror #11
 801ed32:	ea81 11b3 	eor.w	r1, r1, r3, ror #6
 801ed36:	ea81 6173 	eor.w	r1, r1, r3, ror #25
 801ed3a:	4471      	add	r1, lr
 801ed3c:	440a      	add	r2, r1
 801ed3e:	9203      	str	r2, [sp, #12]
 801ed40:	ea4f 3e77 	mov.w	lr, r7, ror #13
 801ed44:	ea8e 0eb7 	eor.w	lr, lr, r7, ror #2
 801ed48:	ea8e 5eb7 	eor.w	lr, lr, r7, ror #22
 801ed4c:	ea4c 0207 	orr.w	r2, ip, r7
 801ed50:	ea02 020a 	and.w	r2, r2, sl
 801ed54:	ea0c 0007 	and.w	r0, ip, r7
 801ed58:	4302      	orrs	r2, r0
 801ed5a:	4496      	add	lr, r2
 801ed5c:	448e      	add	lr, r1
    for( i = 16; i < 64; i += 8 )
 801ed5e:	f109 0920 	add.w	r9, r9, #32
 801ed62:	f10b 0b20 	add.w	fp, fp, #32
 801ed66:	9a06      	ldr	r2, [sp, #24]
 801ed68:	4593      	cmp	fp, r2
 801ed6a:	f47f ae19 	bne.w	801e9a0 <mbedtls_internal_sha256_process+0x2cc>
 801ed6e:	461e      	mov	r6, r3
 801ed70:	9b04      	ldr	r3, [sp, #16]
 801ed72:	9311      	str	r3, [sp, #68]	; 0x44
 801ed74:	9b03      	ldr	r3, [sp, #12]
 801ed76:	930e      	str	r3, [sp, #56]	; 0x38
 801ed78:	9510      	str	r5, [sp, #64]	; 0x40
 801ed7a:	960f      	str	r6, [sp, #60]	; 0x3c
 801ed7c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801ed80:	970b      	str	r7, [sp, #44]	; 0x2c
 801ed82:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 801ed86:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ed8a:	9b07      	ldr	r3, [sp, #28]
 801ed8c:	9908      	ldr	r1, [sp, #32]
 801ed8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 801ed90:	6818      	ldr	r0, [r3, #0]
 801ed92:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801ed96:	4402      	add	r2, r0
 801ed98:	f843 2b04 	str.w	r2, [r3], #4
    for( i = 0; i < 8; i++ )
 801ed9c:	42a3      	cmp	r3, r4
 801ed9e:	d1f7      	bne.n	801ed90 <mbedtls_internal_sha256_process+0x6bc>

    return( 0 );
}
 801eda0:	2000      	movs	r0, #0
 801eda2:	b053      	add	sp, #332	; 0x14c
 801eda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eda8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 801eda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 801edac:	2a00      	cmp	r2, #0
 801edae:	d040      	beq.n	801ee32 <mbedtls_sha256_update_ret+0x8a>
 801edb0:	4606      	mov	r6, r0
 801edb2:	460d      	mov	r5, r1
 801edb4:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
 801edb6:	6803      	ldr	r3, [r0, #0]
 801edb8:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 801edbc:	4413      	add	r3, r2
 801edbe:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 801edc0:	4293      	cmp	r3, r2
 801edc2:	d202      	bcs.n	801edca <mbedtls_sha256_update_ret+0x22>
        ctx->total[1]++;
 801edc4:	6843      	ldr	r3, [r0, #4]
 801edc6:	3301      	adds	r3, #1
 801edc8:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
 801edca:	b11f      	cbz	r7, 801edd4 <mbedtls_sha256_update_ret+0x2c>
    fill = 64 - left;
 801edcc:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
 801edd0:	4544      	cmp	r4, r8
 801edd2:	d20e      	bcs.n	801edf2 <mbedtls_sha256_update_ret+0x4a>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 801edd4:	2c3f      	cmp	r4, #63	; 0x3f
 801edd6:	d923      	bls.n	801ee20 <mbedtls_sha256_update_ret+0x78>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 801edd8:	4629      	mov	r1, r5
 801edda:	4630      	mov	r0, r6
 801eddc:	f7ff fc7a 	bl	801e6d4 <mbedtls_internal_sha256_process>
 801ede0:	4603      	mov	r3, r0
 801ede2:	bb38      	cbnz	r0, 801ee34 <mbedtls_sha256_update_ret+0x8c>
            return( ret );

        input += 64;
 801ede4:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
 801ede6:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 801ede8:	2c3f      	cmp	r4, #63	; 0x3f
 801edea:	d8f5      	bhi.n	801edd8 <mbedtls_sha256_update_ret+0x30>
    }

    if( ilen > 0 )
 801edec:	b9c4      	cbnz	r4, 801ee20 <mbedtls_sha256_update_ret+0x78>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 801edee:	2300      	movs	r3, #0
 801edf0:	e020      	b.n	801ee34 <mbedtls_sha256_update_ret+0x8c>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801edf2:	f106 0928 	add.w	r9, r6, #40	; 0x28
 801edf6:	4642      	mov	r2, r8
 801edf8:	4629      	mov	r1, r5
 801edfa:	eb09 0007 	add.w	r0, r9, r7
 801edfe:	f00b fb9c 	bl	802a53a <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801ee02:	4649      	mov	r1, r9
 801ee04:	4630      	mov	r0, r6
 801ee06:	f7ff fc65 	bl	801e6d4 <mbedtls_internal_sha256_process>
 801ee0a:	4603      	mov	r3, r0
 801ee0c:	b990      	cbnz	r0, 801ee34 <mbedtls_sha256_update_ret+0x8c>
        input += fill;
 801ee0e:	4445      	add	r5, r8
        ilen  -= fill;
 801ee10:	443c      	add	r4, r7
 801ee12:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
 801ee14:	2c3f      	cmp	r4, #63	; 0x3f
 801ee16:	d901      	bls.n	801ee1c <mbedtls_sha256_update_ret+0x74>
        left = 0;
 801ee18:	2700      	movs	r7, #0
 801ee1a:	e7dd      	b.n	801edd8 <mbedtls_sha256_update_ret+0x30>
 801ee1c:	2700      	movs	r7, #0
 801ee1e:	e7e5      	b.n	801edec <mbedtls_sha256_update_ret+0x44>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801ee20:	f106 0028 	add.w	r0, r6, #40	; 0x28
 801ee24:	4622      	mov	r2, r4
 801ee26:	4629      	mov	r1, r5
 801ee28:	4438      	add	r0, r7
 801ee2a:	f00b fb86 	bl	802a53a <memcpy>
    return( 0 );
 801ee2e:	2300      	movs	r3, #0
 801ee30:	e000      	b.n	801ee34 <mbedtls_sha256_update_ret+0x8c>
        return( 0 );
 801ee32:	2300      	movs	r3, #0
}
 801ee34:	4618      	mov	r0, r3
 801ee36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ee3a <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 801ee3a:	b570      	push	{r4, r5, r6, lr}
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801ee40:	6803      	ldr	r3, [r0, #0]
 801ee42:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 801ee46:	1c58      	adds	r0, r3, #1
 801ee48:	4423      	add	r3, r4
 801ee4a:	2280      	movs	r2, #128	; 0x80
 801ee4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
 801ee50:	2838      	cmp	r0, #56	; 0x38
 801ee52:	d87f      	bhi.n	801ef54 <mbedtls_sha256_finish_ret+0x11a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 801ee54:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801ee58:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 801ee5c:	2100      	movs	r1, #0
 801ee5e:	4418      	add	r0, r3
 801ee60:	f00b fb93 	bl	802a58a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 801ee64:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 801ee66:	6862      	ldr	r2, [r4, #4]
    high = ( ctx->total[0] >> 29 )
 801ee68:	0f59      	lsrs	r1, r3, #29
 801ee6a:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    low  = ( ctx->total[0] <<  3 );
 801ee6e:	00d8      	lsls	r0, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801ee70:	f3c2 5647 	ubfx	r6, r2, #21, #8
 801ee74:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
 801ee78:	f3c2 364f 	ubfx	r6, r2, #13, #16
 801ee7c:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
 801ee80:	f3c2 1257 	ubfx	r2, r2, #5, #24
 801ee84:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801ee88:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 801ee8c:	f3c3 5247 	ubfx	r2, r3, #21, #8
 801ee90:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 801ee94:	f3c3 324f 	ubfx	r2, r3, #13, #16
 801ee98:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801ee9c:	f3c3 1357 	ubfx	r3, r3, #5, #24
 801eea0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 801eea4:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801eea8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801eeac:	4620      	mov	r0, r4
 801eeae:	f7ff fc11 	bl	801e6d4 <mbedtls_internal_sha256_process>
 801eeb2:	4603      	mov	r3, r0
 801eeb4:	2800      	cmp	r0, #0
 801eeb6:	d15b      	bne.n	801ef70 <mbedtls_sha256_finish_ret+0x136>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801eeb8:	7ae2      	ldrb	r2, [r4, #11]
 801eeba:	702a      	strb	r2, [r5, #0]
 801eebc:	8962      	ldrh	r2, [r4, #10]
 801eebe:	706a      	strb	r2, [r5, #1]
 801eec0:	68a2      	ldr	r2, [r4, #8]
 801eec2:	0a12      	lsrs	r2, r2, #8
 801eec4:	70aa      	strb	r2, [r5, #2]
 801eec6:	68a2      	ldr	r2, [r4, #8]
 801eec8:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 801eeca:	7be2      	ldrb	r2, [r4, #15]
 801eecc:	712a      	strb	r2, [r5, #4]
 801eece:	89e2      	ldrh	r2, [r4, #14]
 801eed0:	716a      	strb	r2, [r5, #5]
 801eed2:	68e2      	ldr	r2, [r4, #12]
 801eed4:	0a12      	lsrs	r2, r2, #8
 801eed6:	71aa      	strb	r2, [r5, #6]
 801eed8:	68e2      	ldr	r2, [r4, #12]
 801eeda:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801eedc:	7ce2      	ldrb	r2, [r4, #19]
 801eede:	722a      	strb	r2, [r5, #8]
 801eee0:	8a62      	ldrh	r2, [r4, #18]
 801eee2:	726a      	strb	r2, [r5, #9]
 801eee4:	6922      	ldr	r2, [r4, #16]
 801eee6:	0a12      	lsrs	r2, r2, #8
 801eee8:	72aa      	strb	r2, [r5, #10]
 801eeea:	6922      	ldr	r2, [r4, #16]
 801eeec:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 801eeee:	7de2      	ldrb	r2, [r4, #23]
 801eef0:	732a      	strb	r2, [r5, #12]
 801eef2:	8ae2      	ldrh	r2, [r4, #22]
 801eef4:	736a      	strb	r2, [r5, #13]
 801eef6:	6962      	ldr	r2, [r4, #20]
 801eef8:	0a12      	lsrs	r2, r2, #8
 801eefa:	73aa      	strb	r2, [r5, #14]
 801eefc:	6962      	ldr	r2, [r4, #20]
 801eefe:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801ef00:	7ee2      	ldrb	r2, [r4, #27]
 801ef02:	742a      	strb	r2, [r5, #16]
 801ef04:	8b62      	ldrh	r2, [r4, #26]
 801ef06:	746a      	strb	r2, [r5, #17]
 801ef08:	69a2      	ldr	r2, [r4, #24]
 801ef0a:	0a12      	lsrs	r2, r2, #8
 801ef0c:	74aa      	strb	r2, [r5, #18]
 801ef0e:	69a2      	ldr	r2, [r4, #24]
 801ef10:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 801ef12:	7fe2      	ldrb	r2, [r4, #31]
 801ef14:	752a      	strb	r2, [r5, #20]
 801ef16:	8be2      	ldrh	r2, [r4, #30]
 801ef18:	756a      	strb	r2, [r5, #21]
 801ef1a:	69e2      	ldr	r2, [r4, #28]
 801ef1c:	0a12      	lsrs	r2, r2, #8
 801ef1e:	75aa      	strb	r2, [r5, #22]
 801ef20:	69e2      	ldr	r2, [r4, #28]
 801ef22:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 801ef24:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801ef28:	762a      	strb	r2, [r5, #24]
 801ef2a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 801ef2c:	766a      	strb	r2, [r5, #25]
 801ef2e:	6a22      	ldr	r2, [r4, #32]
 801ef30:	0a12      	lsrs	r2, r2, #8
 801ef32:	76aa      	strb	r2, [r5, #26]
 801ef34:	6a22      	ldr	r2, [r4, #32]
 801ef36:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 801ef38:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801ef3a:	b9ca      	cbnz	r2, 801ef70 <mbedtls_sha256_finish_ret+0x136>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 801ef3c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801ef40:	772b      	strb	r3, [r5, #28]
 801ef42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801ef44:	776b      	strb	r3, [r5, #29]
 801ef46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef48:	0a1b      	lsrs	r3, r3, #8
 801ef4a:	77ab      	strb	r3, [r5, #30]
 801ef4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ef4e:	77eb      	strb	r3, [r5, #31]

    return( 0 );
 801ef50:	4613      	mov	r3, r2
 801ef52:	e00d      	b.n	801ef70 <mbedtls_sha256_finish_ret+0x136>
        memset( ctx->buffer + used, 0, 64 - used );
 801ef54:	f104 0628 	add.w	r6, r4, #40	; 0x28
 801ef58:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 801ef5c:	2100      	movs	r1, #0
 801ef5e:	4430      	add	r0, r6
 801ef60:	f00b fb13 	bl	802a58a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801ef64:	4631      	mov	r1, r6
 801ef66:	4620      	mov	r0, r4
 801ef68:	f7ff fbb4 	bl	801e6d4 <mbedtls_internal_sha256_process>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	b108      	cbz	r0, 801ef74 <mbedtls_sha256_finish_ret+0x13a>
}
 801ef70:	4618      	mov	r0, r3
 801ef72:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
 801ef74:	2238      	movs	r2, #56	; 0x38
 801ef76:	2100      	movs	r1, #0
 801ef78:	4630      	mov	r0, r6
 801ef7a:	f00b fb06 	bl	802a58a <memset>
 801ef7e:	e771      	b.n	801ee64 <mbedtls_sha256_finish_ret+0x2a>

0801ef80 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 801ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef82:	b09d      	sub	sp, #116	; 0x74
 801ef84:	4605      	mov	r5, r0
 801ef86:	460e      	mov	r6, r1
 801ef88:	4617      	mov	r7, r2
 801ef8a:	461c      	mov	r4, r3

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 801ef8c:	a801      	add	r0, sp, #4
 801ef8e:	f7ff fb3d 	bl	801e60c <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 801ef92:	4621      	mov	r1, r4
 801ef94:	a801      	add	r0, sp, #4
 801ef96:	f7ff fb4b 	bl	801e630 <mbedtls_sha256_starts_ret>
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	b128      	cbz	r0, 801efaa <mbedtls_sha256_ret+0x2a>

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 801ef9e:	a801      	add	r0, sp, #4
 801efa0:	f7ff fb3a 	bl	801e618 <mbedtls_sha256_free>

    return( ret );
}
 801efa4:	4620      	mov	r0, r4
 801efa6:	b01d      	add	sp, #116	; 0x74
 801efa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 801efaa:	4632      	mov	r2, r6
 801efac:	4629      	mov	r1, r5
 801efae:	a801      	add	r0, sp, #4
 801efb0:	f7ff fefa 	bl	801eda8 <mbedtls_sha256_update_ret>
 801efb4:	4604      	mov	r4, r0
 801efb6:	2800      	cmp	r0, #0
 801efb8:	d1f1      	bne.n	801ef9e <mbedtls_sha256_ret+0x1e>
    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 801efba:	4639      	mov	r1, r7
 801efbc:	a801      	add	r0, sp, #4
 801efbe:	f7ff ff3c 	bl	801ee3a <mbedtls_sha256_finish_ret>
 801efc2:	4604      	mov	r4, r0
exit:
 801efc4:	e7eb      	b.n	801ef9e <mbedtls_sha256_ret+0x1e>

0801efc6 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 801efc6:	b508      	push	{r3, lr}
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 801efc8:	22d8      	movs	r2, #216	; 0xd8
 801efca:	2100      	movs	r1, #0
 801efcc:	f00b fadd 	bl	802a58a <memset>
}
 801efd0:	bd08      	pop	{r3, pc}

0801efd2 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 801efd2:	b120      	cbz	r0, 801efde <mbedtls_sha512_free+0xc>
{
 801efd4:	b508      	push	{r3, lr}
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 801efd6:	21d8      	movs	r1, #216	; 0xd8
 801efd8:	f7fb ffb4 	bl	801af44 <mbedtls_platform_zeroize>
}
 801efdc:	bd08      	pop	{r3, pc}
 801efde:	4770      	bx	lr

0801efe0 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 801efe0:	b508      	push	{r3, lr}
    SHA512_VALIDATE( dst != NULL );
    SHA512_VALIDATE( src != NULL );

    *dst = *src;
 801efe2:	22d8      	movs	r2, #216	; 0xd8
 801efe4:	f00b faa9 	bl	802a53a <memcpy>
}
 801efe8:	bd08      	pop	{r3, pc}
 801efea:	0000      	movs	r0, r0
 801efec:	0000      	movs	r0, r0
	...

0801eff0 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 801eff0:	b430      	push	{r4, r5}
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 801eff2:	2200      	movs	r2, #0
 801eff4:	2300      	movs	r3, #0
 801eff6:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 801effa:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 801effe:	460b      	mov	r3, r1
 801f000:	bb61      	cbnz	r1, 801f05c <mbedtls_sha512_starts_ret+0x6c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 801f002:	a52b      	add	r5, pc, #172	; (adr r5, 801f0b0 <mbedtls_sha512_starts_ret+0xc0>)
 801f004:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f008:	e9c0 4504 	strd	r4, r5, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 801f00c:	a52a      	add	r5, pc, #168	; (adr r5, 801f0b8 <mbedtls_sha512_starts_ret+0xc8>)
 801f00e:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f012:	e9c0 4506 	strd	r4, r5, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 801f016:	a52a      	add	r5, pc, #168	; (adr r5, 801f0c0 <mbedtls_sha512_starts_ret+0xd0>)
 801f018:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f01c:	e9c0 4508 	strd	r4, r5, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 801f020:	a529      	add	r5, pc, #164	; (adr r5, 801f0c8 <mbedtls_sha512_starts_ret+0xd8>)
 801f022:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f026:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 801f02a:	a529      	add	r5, pc, #164	; (adr r5, 801f0d0 <mbedtls_sha512_starts_ret+0xe0>)
 801f02c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f030:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 801f034:	a528      	add	r5, pc, #160	; (adr r5, 801f0d8 <mbedtls_sha512_starts_ret+0xe8>)
 801f036:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f03a:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 801f03e:	a528      	add	r5, pc, #160	; (adr r5, 801f0e0 <mbedtls_sha512_starts_ret+0xf0>)
 801f040:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f044:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 801f048:	a527      	add	r5, pc, #156	; (adr r5, 801f0e8 <mbedtls_sha512_starts_ret+0xf8>)
 801f04a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f04e:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
    }

    ctx->is384 = is384;
 801f052:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

    return( 0 );
}
 801f056:	2000      	movs	r0, #0
 801f058:	bc30      	pop	{r4, r5}
 801f05a:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 801f05c:	a524      	add	r5, pc, #144	; (adr r5, 801f0f0 <mbedtls_sha512_starts_ret+0x100>)
 801f05e:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f062:	e9c0 4504 	strd	r4, r5, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 801f066:	a524      	add	r5, pc, #144	; (adr r5, 801f0f8 <mbedtls_sha512_starts_ret+0x108>)
 801f068:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f06c:	e9c0 4506 	strd	r4, r5, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 801f070:	a523      	add	r5, pc, #140	; (adr r5, 801f100 <mbedtls_sha512_starts_ret+0x110>)
 801f072:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f076:	e9c0 4508 	strd	r4, r5, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 801f07a:	a523      	add	r5, pc, #140	; (adr r5, 801f108 <mbedtls_sha512_starts_ret+0x118>)
 801f07c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f080:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 801f084:	a522      	add	r5, pc, #136	; (adr r5, 801f110 <mbedtls_sha512_starts_ret+0x120>)
 801f086:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f08a:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 801f08e:	a522      	add	r5, pc, #136	; (adr r5, 801f118 <mbedtls_sha512_starts_ret+0x128>)
 801f090:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f094:	e9c0 450e 	strd	r4, r5, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 801f098:	a521      	add	r5, pc, #132	; (adr r5, 801f120 <mbedtls_sha512_starts_ret+0x130>)
 801f09a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f09e:	e9c0 4510 	strd	r4, r5, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801f0a2:	a521      	add	r5, pc, #132	; (adr r5, 801f128 <mbedtls_sha512_starts_ret+0x138>)
 801f0a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801f0a8:	e9c0 4512 	strd	r4, r5, [r0, #72]	; 0x48
 801f0ac:	e7d1      	b.n	801f052 <mbedtls_sha512_starts_ret+0x62>
 801f0ae:	bf00      	nop
 801f0b0:	f3bcc908 	.word	0xf3bcc908
 801f0b4:	6a09e667 	.word	0x6a09e667
 801f0b8:	84caa73b 	.word	0x84caa73b
 801f0bc:	bb67ae85 	.word	0xbb67ae85
 801f0c0:	fe94f82b 	.word	0xfe94f82b
 801f0c4:	3c6ef372 	.word	0x3c6ef372
 801f0c8:	5f1d36f1 	.word	0x5f1d36f1
 801f0cc:	a54ff53a 	.word	0xa54ff53a
 801f0d0:	ade682d1 	.word	0xade682d1
 801f0d4:	510e527f 	.word	0x510e527f
 801f0d8:	2b3e6c1f 	.word	0x2b3e6c1f
 801f0dc:	9b05688c 	.word	0x9b05688c
 801f0e0:	fb41bd6b 	.word	0xfb41bd6b
 801f0e4:	1f83d9ab 	.word	0x1f83d9ab
 801f0e8:	137e2179 	.word	0x137e2179
 801f0ec:	5be0cd19 	.word	0x5be0cd19
 801f0f0:	c1059ed8 	.word	0xc1059ed8
 801f0f4:	cbbb9d5d 	.word	0xcbbb9d5d
 801f0f8:	367cd507 	.word	0x367cd507
 801f0fc:	629a292a 	.word	0x629a292a
 801f100:	3070dd17 	.word	0x3070dd17
 801f104:	9159015a 	.word	0x9159015a
 801f108:	f70e5939 	.word	0xf70e5939
 801f10c:	152fecd8 	.word	0x152fecd8
 801f110:	ffc00b31 	.word	0xffc00b31
 801f114:	67332667 	.word	0x67332667
 801f118:	68581511 	.word	0x68581511
 801f11c:	8eb44a87 	.word	0x8eb44a87
 801f120:	64f98fa7 	.word	0x64f98fa7
 801f124:	db0c2e0d 	.word	0xdb0c2e0d
 801f128:	befa4fa4 	.word	0xbefa4fa4
 801f12c:	47b5481d 	.word	0x47b5481d

0801f130 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 801f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f134:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 801f138:	900d      	str	r0, [sp, #52]	; 0x34
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 801f13a:	a81c      	add	r0, sp, #112	; 0x70
 801f13c:	ab1e      	add	r3, sp, #120	; 0x78
 801f13e:	9304      	str	r3, [sp, #16]
 801f140:	f10d 0cf0 	add.w	ip, sp, #240	; 0xf0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 801f144:	780c      	ldrb	r4, [r1, #0]
 801f146:	784a      	ldrb	r2, [r1, #1]
 801f148:	0412      	lsls	r2, r2, #16
 801f14a:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 801f14e:	79ca      	ldrb	r2, [r1, #7]
 801f150:	788e      	ldrb	r6, [r1, #2]
 801f152:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 801f156:	78ce      	ldrb	r6, [r1, #3]
 801f158:	f891 8004 	ldrb.w	r8, [r1, #4]
 801f15c:	ea42 6208 	orr.w	r2, r2, r8, lsl #24
 801f160:	f891 8005 	ldrb.w	r8, [r1, #5]
 801f164:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 801f168:	f891 8006 	ldrb.w	r8, [r1, #6]
 801f16c:	ea42 2208 	orr.w	r2, r2, r8, lsl #8
 801f170:	4334      	orrs	r4, r6
 801f172:	f840 2f08 	str.w	r2, [r0, #8]!
 801f176:	6044      	str	r4, [r0, #4]
    for( i = 0; i < 16; i++ )
 801f178:	3108      	adds	r1, #8
 801f17a:	4560      	cmp	r0, ip
 801f17c:	d1e2      	bne.n	801f144 <mbedtls_internal_sha512_process+0x14>
    }

    for( ; i < 80; i++ )
 801f17e:	9904      	ldr	r1, [sp, #16]
 801f180:	f501 7500 	add.w	r5, r1, #512	; 0x200
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 801f184:	468c      	mov	ip, r1
 801f186:	6f0c      	ldr	r4, [r1, #112]	; 0x70
 801f188:	f8d1 e074 	ldr.w	lr, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 801f18c:	6888      	ldr	r0, [r1, #8]
 801f18e:	68cf      	ldr	r7, [r1, #12]
 801f190:	3108      	adds	r1, #8
        W[i] = S1(W[i -  2]) + W[i -  7] +
 801f192:	0ce6      	lsrs	r6, r4, #19
 801f194:	ea46 364e 	orr.w	r6, r6, lr, lsl #13
 801f198:	ea4f 42de 	mov.w	r2, lr, lsr #19
 801f19c:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 801f1a0:	ea4f 08ce 	mov.w	r8, lr, lsl #3
 801f1a4:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
 801f1a8:	00e3      	lsls	r3, r4, #3
 801f1aa:	ea43 735e 	orr.w	r3, r3, lr, lsr #29
 801f1ae:	4073      	eors	r3, r6
 801f1b0:	ea82 0208 	eor.w	r2, r2, r8
 801f1b4:	09a4      	lsrs	r4, r4, #6
 801f1b6:	ea44 648e 	orr.w	r4, r4, lr, lsl #26
 801f1ba:	4063      	eors	r3, r4
 801f1bc:	ea82 129e 	eor.w	r2, r2, lr, lsr #6
               S0(W[i - 15]) + W[i - 16];
 801f1c0:	f8dc 4048 	ldr.w	r4, [ip, #72]	; 0x48
 801f1c4:	f8dc 604c 	ldr.w	r6, [ip, #76]	; 0x4c
 801f1c8:	f8dc e000 	ldr.w	lr, [ip]
 801f1cc:	f8dc c004 	ldr.w	ip, [ip, #4]
 801f1d0:	eb14 040e 	adds.w	r4, r4, lr
 801f1d4:	eb46 060c 	adc.w	r6, r6, ip
 801f1d8:	191b      	adds	r3, r3, r4
 801f1da:	eb46 0202 	adc.w	r2, r6, r2
 801f1de:	0844      	lsrs	r4, r0, #1
 801f1e0:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
 801f1e4:	087e      	lsrs	r6, r7, #1
 801f1e6:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 801f1ea:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 801f1ee:	ea4e 6e07 	orr.w	lr, lr, r7, lsl #24
 801f1f2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f1f6:	ea4c 6c00 	orr.w	ip, ip, r0, lsl #24
 801f1fa:	ea84 040e 	eor.w	r4, r4, lr
 801f1fe:	ea86 060c 	eor.w	r6, r6, ip
 801f202:	09c0      	lsrs	r0, r0, #7
 801f204:	ea40 6047 	orr.w	r0, r0, r7, lsl #25
 801f208:	4060      	eors	r0, r4
 801f20a:	ea86 14d7 	eor.w	r4, r6, r7, lsr #7
 801f20e:	1818      	adds	r0, r3, r0
 801f210:	eb44 0202 	adc.w	r2, r4, r2
        W[i] = S1(W[i -  2]) + W[i -  7] +
 801f214:	6788      	str	r0, [r1, #120]	; 0x78
 801f216:	67ca      	str	r2, [r1, #124]	; 0x7c
    for( ; i < 80; i++ )
 801f218:	42a9      	cmp	r1, r5
 801f21a:	d1b3      	bne.n	801f184 <mbedtls_internal_sha512_process+0x54>
    }

    A = ctx->state[0];
 801f21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f21e:	6919      	ldr	r1, [r3, #16]
 801f220:	9117      	str	r1, [sp, #92]	; 0x5c
 801f222:	6958      	ldr	r0, [r3, #20]
 801f224:	9018      	str	r0, [sp, #96]	; 0x60
    B = ctx->state[1];
 801f226:	699d      	ldr	r5, [r3, #24]
 801f228:	9519      	str	r5, [sp, #100]	; 0x64
 801f22a:	69de      	ldr	r6, [r3, #28]
 801f22c:	961a      	str	r6, [sp, #104]	; 0x68
    C = ctx->state[2];
 801f22e:	6a1f      	ldr	r7, [r3, #32]
 801f230:	971b      	str	r7, [sp, #108]	; 0x6c
 801f232:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801f234:	941c      	str	r4, [sp, #112]	; 0x70
    D = ctx->state[3];
 801f236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f238:	920e      	str	r2, [sp, #56]	; 0x38
 801f23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f23c:	920f      	str	r2, [sp, #60]	; 0x3c
    E = ctx->state[4];
 801f23e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f240:	9210      	str	r2, [sp, #64]	; 0x40
 801f242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f244:	9211      	str	r2, [sp, #68]	; 0x44
    F = ctx->state[5];
 801f246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f248:	9212      	str	r2, [sp, #72]	; 0x48
 801f24a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f24c:	9213      	str	r2, [sp, #76]	; 0x4c
    G = ctx->state[6];
 801f24e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f250:	9214      	str	r2, [sp, #80]	; 0x50
 801f252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f254:	9215      	str	r2, [sp, #84]	; 0x54
    H = ctx->state[7];
 801f256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f258:	921d      	str	r2, [sp, #116]	; 0x74
 801f25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f25c:	9316      	str	r3, [sp, #88]	; 0x58
 801f25e:	920a      	str	r2, [sp, #40]	; 0x28
 801f260:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f262:	9300      	str	r3, [sp, #0]
    G = ctx->state[6];
 801f264:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f266:	9305      	str	r3, [sp, #20]
 801f268:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    F = ctx->state[5];
 801f26c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f26e:	9308      	str	r3, [sp, #32]
 801f270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f272:	9309      	str	r3, [sp, #36]	; 0x24
    E = ctx->state[4];
 801f274:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801f278:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    D = ctx->state[3];
 801f27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f27e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
    C = ctx->state[2];
 801f282:	46a2      	mov	sl, r4
    B = ctx->state[1];
 801f284:	950b      	str	r5, [sp, #44]	; 0x2c
 801f286:	9601      	str	r6, [sp, #4]
    A = ctx->state[0];
 801f288:	9107      	str	r1, [sp, #28]
 801f28a:	9003      	str	r0, [sp, #12]
 801f28c:	4c05      	ldr	r4, [pc, #20]	; (801f2a4 <mbedtls_internal_sha512_process+0x174>)
 801f28e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801f292:	46b8      	mov	r8, r7
 801f294:	f8cd 9018 	str.w	r9, [sp, #24]
 801f298:	4699      	mov	r9, r3
 801f29a:	f8cd c008 	str.w	ip, [sp, #8]
 801f29e:	f8dd c010 	ldr.w	ip, [sp, #16]
 801f2a2:	e001      	b.n	801f2a8 <mbedtls_internal_sha512_process+0x178>
 801f2a4:	08033018 	.word	0x08033018
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 801f2a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f2aa:	0b8d      	lsrs	r5, r1, #14
 801f2ac:	9f06      	ldr	r7, [sp, #24]
 801f2ae:	ea45 4587 	orr.w	r5, r5, r7, lsl #18
 801f2b2:	0bbe      	lsrs	r6, r7, #14
 801f2b4:	ea46 4681 	orr.w	r6, r6, r1, lsl #18
 801f2b8:	0c8a      	lsrs	r2, r1, #18
 801f2ba:	ea42 3287 	orr.w	r2, r2, r7, lsl #14
 801f2be:	0cbb      	lsrs	r3, r7, #18
 801f2c0:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
 801f2c4:	4055      	eors	r5, r2
 801f2c6:	405e      	eors	r6, r3
 801f2c8:	05fb      	lsls	r3, r7, #23
 801f2ca:	ea43 2351 	orr.w	r3, r3, r1, lsr #9
 801f2ce:	05ca      	lsls	r2, r1, #23
 801f2d0:	ea42 2257 	orr.w	r2, r2, r7, lsr #9
 801f2d4:	4055      	eors	r5, r2
 801f2d6:	405e      	eors	r6, r3
 801f2d8:	6822      	ldr	r2, [r4, #0]
 801f2da:	6860      	ldr	r0, [r4, #4]
 801f2dc:	f8dc 1000 	ldr.w	r1, [ip]
 801f2e0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f2e4:	1852      	adds	r2, r2, r1
 801f2e6:	eb40 0303 	adc.w	r3, r0, r3
 801f2ea:	18aa      	adds	r2, r5, r2
 801f2ec:	eb46 0303 	adc.w	r3, r6, r3
 801f2f0:	9d08      	ldr	r5, [sp, #32]
 801f2f2:	9805      	ldr	r0, [sp, #20]
 801f2f4:	ea85 0700 	eor.w	r7, r5, r0
 801f2f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f2fa:	46b6      	mov	lr, r6
 801f2fc:	9e02      	ldr	r6, [sp, #8]
 801f2fe:	ea8e 0e06 	eor.w	lr, lr, r6
 801f302:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f304:	400f      	ands	r7, r1
 801f306:	9d06      	ldr	r5, [sp, #24]
 801f308:	ea0e 0e05 	and.w	lr, lr, r5
 801f30c:	4047      	eors	r7, r0
 801f30e:	ea8e 0e06 	eor.w	lr, lr, r6
 801f312:	19d2      	adds	r2, r2, r7
 801f314:	eb43 030e 	adc.w	r3, r3, lr
 801f318:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f31a:	1811      	adds	r1, r2, r0
 801f31c:	9a00      	ldr	r2, [sp, #0]
 801f31e:	eb43 0202 	adc.w	r2, r3, r2
 801f322:	4613      	mov	r3, r2
 801f324:	9100      	str	r1, [sp, #0]
 801f326:	eb19 0e01 	adds.w	lr, r9, r1
 801f32a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801f32e:	eb4b 0b02 	adc.w	fp, fp, r2
 801f332:	9807      	ldr	r0, [sp, #28]
 801f334:	ea4f 7e10 	mov.w	lr, r0, lsr #28
 801f338:	9e03      	ldr	r6, [sp, #12]
 801f33a:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
 801f33e:	0f37      	lsrs	r7, r6, #28
 801f340:	ea47 1700 	orr.w	r7, r7, r0, lsl #4
 801f344:	07b1      	lsls	r1, r6, #30
 801f346:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 801f34a:	0782      	lsls	r2, r0, #30
 801f34c:	ea42 0296 	orr.w	r2, r2, r6, lsr #2
 801f350:	ea8e 0e02 	eor.w	lr, lr, r2
 801f354:	404f      	eors	r7, r1
 801f356:	0671      	lsls	r1, r6, #25
 801f358:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 801f35c:	0642      	lsls	r2, r0, #25
 801f35e:	ea42 12d6 	orr.w	r2, r2, r6, lsr #7
 801f362:	ea8e 0e02 	eor.w	lr, lr, r2
 801f366:	404f      	eors	r7, r1
 801f368:	4602      	mov	r2, r0
 801f36a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f36c:	ea40 0605 	orr.w	r6, r0, r5
 801f370:	9803      	ldr	r0, [sp, #12]
 801f372:	4681      	mov	r9, r0
 801f374:	9801      	ldr	r0, [sp, #4]
 801f376:	ea49 0100 	orr.w	r1, r9, r0
 801f37a:	ea06 0608 	and.w	r6, r6, r8
 801f37e:	ea01 010a 	and.w	r1, r1, sl
 801f382:	402a      	ands	r2, r5
 801f384:	9d03      	ldr	r5, [sp, #12]
 801f386:	9801      	ldr	r0, [sp, #4]
 801f388:	4028      	ands	r0, r5
 801f38a:	4332      	orrs	r2, r6
 801f38c:	4301      	orrs	r1, r0
 801f38e:	eb1e 0202 	adds.w	r2, lr, r2
 801f392:	eb47 0101 	adc.w	r1, r7, r1
 801f396:	9800      	ldr	r0, [sp, #0]
 801f398:	1810      	adds	r0, r2, r0
 801f39a:	9000      	str	r0, [sp, #0]
 801f39c:	eb43 0201 	adc.w	r2, r3, r1
 801f3a0:	9204      	str	r2, [sp, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 801f3a2:	68a3      	ldr	r3, [r4, #8]
 801f3a4:	68e0      	ldr	r0, [r4, #12]
 801f3a6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801f3aa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801f3ae:	195b      	adds	r3, r3, r5
 801f3b0:	eb46 0000 	adc.w	r0, r6, r0
 801f3b4:	9f05      	ldr	r7, [sp, #20]
 801f3b6:	19db      	adds	r3, r3, r7
 801f3b8:	9f02      	ldr	r7, [sp, #8]
 801f3ba:	eb40 0e07 	adc.w	lr, r0, r7
 801f3be:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f3c0:	9f08      	ldr	r7, [sp, #32]
 801f3c2:	ea80 0507 	eor.w	r5, r0, r7
 801f3c6:	9806      	ldr	r0, [sp, #24]
 801f3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3ca:	4050      	eors	r0, r2
 801f3cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f3ce:	400d      	ands	r5, r1
 801f3d0:	ea00 000b 	and.w	r0, r0, fp
 801f3d4:	407d      	eors	r5, r7
 801f3d6:	ea80 0702 	eor.w	r7, r0, r2
 801f3da:	195b      	adds	r3, r3, r5
 801f3dc:	eb4e 0007 	adc.w	r0, lr, r7
 801f3e0:	0b8d      	lsrs	r5, r1, #14
 801f3e2:	ea45 478b 	orr.w	r7, r5, fp, lsl #18
 801f3e6:	ea4f 369b 	mov.w	r6, fp, lsr #14
 801f3ea:	ea46 4981 	orr.w	r9, r6, r1, lsl #18
 801f3ee:	0c8d      	lsrs	r5, r1, #18
 801f3f0:	ea45 358b 	orr.w	r5, r5, fp, lsl #14
 801f3f4:	ea4f 469b 	mov.w	r6, fp, lsr #18
 801f3f8:	ea46 3681 	orr.w	r6, r6, r1, lsl #14
 801f3fc:	407d      	eors	r5, r7
 801f3fe:	ea89 0606 	eor.w	r6, r9, r6
 801f402:	ea4f 5ecb 	mov.w	lr, fp, lsl #23
 801f406:	ea4e 2e51 	orr.w	lr, lr, r1, lsr #9
 801f40a:	05cf      	lsls	r7, r1, #23
 801f40c:	ea47 275b 	orr.w	r7, r7, fp, lsr #9
 801f410:	407d      	eors	r5, r7
 801f412:	ea86 0e0e 	eor.w	lr, r6, lr
 801f416:	195d      	adds	r5, r3, r5
 801f418:	eb40 090e 	adc.w	r9, r0, lr
 801f41c:	eb18 0605 	adds.w	r6, r8, r5
 801f420:	9605      	str	r6, [sp, #20]
 801f422:	eb4a 0a09 	adc.w	sl, sl, r9
 801f426:	9800      	ldr	r0, [sp, #0]
 801f428:	0f07      	lsrs	r7, r0, #28
 801f42a:	9a04      	ldr	r2, [sp, #16]
 801f42c:	ea47 1702 	orr.w	r7, r7, r2, lsl #4
 801f430:	0f16      	lsrs	r6, r2, #28
 801f432:	ea46 1e00 	orr.w	lr, r6, r0, lsl #4
 801f436:	0796      	lsls	r6, r2, #30
 801f438:	ea46 0690 	orr.w	r6, r6, r0, lsr #2
 801f43c:	0783      	lsls	r3, r0, #30
 801f43e:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801f442:	405f      	eors	r7, r3
 801f444:	ea8e 0606 	eor.w	r6, lr, r6
 801f448:	ea4f 6e42 	mov.w	lr, r2, lsl #25
 801f44c:	ea4e 1ed0 	orr.w	lr, lr, r0, lsr #7
 801f450:	0643      	lsls	r3, r0, #25
 801f452:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 801f456:	405f      	eors	r7, r3
 801f458:	ea86 020e 	eor.w	r2, r6, lr
 801f45c:	9b07      	ldr	r3, [sp, #28]
 801f45e:	9e00      	ldr	r6, [sp, #0]
 801f460:	ea43 0006 	orr.w	r0, r3, r6
 801f464:	9903      	ldr	r1, [sp, #12]
 801f466:	9e04      	ldr	r6, [sp, #16]
 801f468:	ea41 0e06 	orr.w	lr, r1, r6
 801f46c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801f46e:	4030      	ands	r0, r6
 801f470:	9e01      	ldr	r6, [sp, #4]
 801f472:	ea0e 0e06 	and.w	lr, lr, r6
 801f476:	4698      	mov	r8, r3
 801f478:	9b00      	ldr	r3, [sp, #0]
 801f47a:	ea08 0303 	and.w	r3, r8, r3
 801f47e:	9e04      	ldr	r6, [sp, #16]
 801f480:	ea01 0806 	and.w	r8, r1, r6
 801f484:	4303      	orrs	r3, r0
 801f486:	ea4e 0e08 	orr.w	lr, lr, r8
 801f48a:	18fb      	adds	r3, r7, r3
 801f48c:	eb42 0e0e 	adc.w	lr, r2, lr
 801f490:	195a      	adds	r2, r3, r5
 801f492:	9202      	str	r2, [sp, #8]
 801f494:	eb4e 0e09 	adc.w	lr, lr, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801f498:	6920      	ldr	r0, [r4, #16]
 801f49a:	6965      	ldr	r5, [r4, #20]
 801f49c:	f8dc 6010 	ldr.w	r6, [ip, #16]
 801f4a0:	f8dc 7014 	ldr.w	r7, [ip, #20]
 801f4a4:	1980      	adds	r0, r0, r6
 801f4a6:	eb47 0505 	adc.w	r5, r7, r5
 801f4aa:	9a08      	ldr	r2, [sp, #32]
 801f4ac:	1880      	adds	r0, r0, r2
 801f4ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4b0:	eb45 0702 	adc.w	r7, r5, r2
 801f4b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4b8:	ea83 0602 	eor.w	r6, r3, r2
 801f4bc:	9906      	ldr	r1, [sp, #24]
 801f4be:	ea81 050b 	eor.w	r5, r1, fp
 801f4c2:	9a05      	ldr	r2, [sp, #20]
 801f4c4:	4016      	ands	r6, r2
 801f4c6:	ea05 050a 	and.w	r5, r5, sl
 801f4ca:	405e      	eors	r6, r3
 801f4cc:	ea85 0801 	eor.w	r8, r5, r1
 801f4d0:	1986      	adds	r6, r0, r6
 801f4d2:	eb47 0508 	adc.w	r5, r7, r8
 801f4d6:	0b90      	lsrs	r0, r2, #14
 801f4d8:	ea40 488a 	orr.w	r8, r0, sl, lsl #18
 801f4dc:	ea4f 399a 	mov.w	r9, sl, lsr #14
 801f4e0:	ea49 4982 	orr.w	r9, r9, r2, lsl #18
 801f4e4:	0c90      	lsrs	r0, r2, #18
 801f4e6:	ea40 308a 	orr.w	r0, r0, sl, lsl #14
 801f4ea:	ea4f 479a 	mov.w	r7, sl, lsr #18
 801f4ee:	ea47 3782 	orr.w	r7, r7, r2, lsl #14
 801f4f2:	ea88 0000 	eor.w	r0, r8, r0
 801f4f6:	ea89 0907 	eor.w	r9, r9, r7
 801f4fa:	ea4f 57ca 	mov.w	r7, sl, lsl #23
 801f4fe:	ea47 2752 	orr.w	r7, r7, r2, lsr #9
 801f502:	ea4f 58c2 	mov.w	r8, r2, lsl #23
 801f506:	ea48 285a 	orr.w	r8, r8, sl, lsr #9
 801f50a:	ea80 0008 	eor.w	r0, r0, r8
 801f50e:	ea89 0907 	eor.w	r9, r9, r7
 801f512:	1830      	adds	r0, r6, r0
 801f514:	eb45 0909 	adc.w	r9, r5, r9
 801f518:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f51a:	182d      	adds	r5, r5, r0
 801f51c:	9508      	str	r5, [sp, #32]
 801f51e:	9d01      	ldr	r5, [sp, #4]
 801f520:	eb45 0509 	adc.w	r5, r5, r9
 801f524:	9501      	str	r5, [sp, #4]
 801f526:	9a02      	ldr	r2, [sp, #8]
 801f528:	0f17      	lsrs	r7, r2, #28
 801f52a:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
 801f52e:	ea4f 761e 	mov.w	r6, lr, lsr #28
 801f532:	ea46 1802 	orr.w	r8, r6, r2, lsl #4
 801f536:	ea4f 768e 	mov.w	r6, lr, lsl #30
 801f53a:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 801f53e:	0795      	lsls	r5, r2, #30
 801f540:	ea45 059e 	orr.w	r5, r5, lr, lsr #2
 801f544:	406f      	eors	r7, r5
 801f546:	ea88 0606 	eor.w	r6, r8, r6
 801f54a:	ea4f 684e 	mov.w	r8, lr, lsl #25
 801f54e:	ea48 18d2 	orr.w	r8, r8, r2, lsr #7
 801f552:	0655      	lsls	r5, r2, #25
 801f554:	ea45 15de 	orr.w	r5, r5, lr, lsr #7
 801f558:	406f      	eors	r7, r5
 801f55a:	ea86 0608 	eor.w	r6, r6, r8
 801f55e:	9d00      	ldr	r5, [sp, #0]
 801f560:	4315      	orrs	r5, r2
 801f562:	9904      	ldr	r1, [sp, #16]
 801f564:	ea41 080e 	orr.w	r8, r1, lr
 801f568:	9907      	ldr	r1, [sp, #28]
 801f56a:	400d      	ands	r5, r1
 801f56c:	9903      	ldr	r1, [sp, #12]
 801f56e:	ea08 0801 	and.w	r8, r8, r1
 801f572:	9a00      	ldr	r2, [sp, #0]
 801f574:	9902      	ldr	r1, [sp, #8]
 801f576:	400a      	ands	r2, r1
 801f578:	9904      	ldr	r1, [sp, #16]
 801f57a:	ea01 010e 	and.w	r1, r1, lr
 801f57e:	4315      	orrs	r5, r2
 801f580:	ea48 0801 	orr.w	r8, r8, r1
 801f584:	197d      	adds	r5, r7, r5
 801f586:	eb46 0808 	adc.w	r8, r6, r8
 801f58a:	1828      	adds	r0, r5, r0
 801f58c:	9009      	str	r0, [sp, #36]	; 0x24
 801f58e:	eb48 0709 	adc.w	r7, r8, r9
 801f592:	970b      	str	r7, [sp, #44]	; 0x2c
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 801f594:	69a0      	ldr	r0, [r4, #24]
 801f596:	69e7      	ldr	r7, [r4, #28]
 801f598:	f8dc 6018 	ldr.w	r6, [ip, #24]
 801f59c:	f8dc 501c 	ldr.w	r5, [ip, #28]
 801f5a0:	1980      	adds	r0, r0, r6
 801f5a2:	eb47 0505 	adc.w	r5, r7, r5
 801f5a6:	18c0      	adds	r0, r0, r3
 801f5a8:	9e06      	ldr	r6, [sp, #24]
 801f5aa:	eb46 0505 	adc.w	r5, r6, r5
 801f5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5b0:	9e05      	ldr	r6, [sp, #20]
 801f5b2:	405e      	eors	r6, r3
 801f5b4:	ea8b 070a 	eor.w	r7, fp, sl
 801f5b8:	9908      	ldr	r1, [sp, #32]
 801f5ba:	400e      	ands	r6, r1
 801f5bc:	9a01      	ldr	r2, [sp, #4]
 801f5be:	4017      	ands	r7, r2
 801f5c0:	405e      	eors	r6, r3
 801f5c2:	ea87 070b 	eor.w	r7, r7, fp
 801f5c6:	1980      	adds	r0, r0, r6
 801f5c8:	eb45 0707 	adc.w	r7, r5, r7
 801f5cc:	460d      	mov	r5, r1
 801f5ce:	ea4f 3891 	mov.w	r8, r1, lsr #14
 801f5d2:	9901      	ldr	r1, [sp, #4]
 801f5d4:	ea48 4981 	orr.w	r9, r8, r1, lsl #18
 801f5d8:	0b8e      	lsrs	r6, r1, #14
 801f5da:	462b      	mov	r3, r5
 801f5dc:	ea46 4685 	orr.w	r6, r6, r5, lsl #18
 801f5e0:	ea4f 4895 	mov.w	r8, r5, lsr #18
 801f5e4:	ea48 3881 	orr.w	r8, r8, r1, lsl #14
 801f5e8:	0c8d      	lsrs	r5, r1, #18
 801f5ea:	ea45 3583 	orr.w	r5, r5, r3, lsl #14
 801f5ee:	ea89 0808 	eor.w	r8, r9, r8
 801f5f2:	406e      	eors	r6, r5
 801f5f4:	05cd      	lsls	r5, r1, #23
 801f5f6:	ea45 2553 	orr.w	r5, r5, r3, lsr #9
 801f5fa:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 801f5fe:	ea49 2951 	orr.w	r9, r9, r1, lsr #9
 801f602:	ea88 0909 	eor.w	r9, r8, r9
 801f606:	4075      	eors	r5, r6
 801f608:	eb10 0009 	adds.w	r0, r0, r9
 801f60c:	eb47 0505 	adc.w	r5, r7, r5
 801f610:	9907      	ldr	r1, [sp, #28]
 801f612:	eb11 0800 	adds.w	r8, r1, r0
 801f616:	f8cd 8018 	str.w	r8, [sp, #24]
 801f61a:	9903      	ldr	r1, [sp, #12]
 801f61c:	eb41 0805 	adc.w	r8, r1, r5
 801f620:	f8cd 800c 	str.w	r8, [sp, #12]
 801f624:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f626:	ea4f 7911 	mov.w	r9, r1, lsr #28
 801f62a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f62c:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
 801f630:	ea4f 7812 	mov.w	r8, r2, lsr #28
 801f634:	ea48 1801 	orr.w	r8, r8, r1, lsl #4
 801f638:	0797      	lsls	r7, r2, #30
 801f63a:	ea47 0791 	orr.w	r7, r7, r1, lsr #2
 801f63e:	078e      	lsls	r6, r1, #30
 801f640:	4613      	mov	r3, r2
 801f642:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 801f646:	ea89 0906 	eor.w	r9, r9, r6
 801f64a:	ea88 0807 	eor.w	r8, r8, r7
 801f64e:	0657      	lsls	r7, r2, #25
 801f650:	ea47 17d1 	orr.w	r7, r7, r1, lsr #7
 801f654:	064e      	lsls	r6, r1, #25
 801f656:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
 801f65a:	ea89 0906 	eor.w	r9, r9, r6
 801f65e:	ea88 0807 	eor.w	r8, r8, r7
 801f662:	9e02      	ldr	r6, [sp, #8]
 801f664:	430e      	orrs	r6, r1
 801f666:	ea4e 0702 	orr.w	r7, lr, r2
 801f66a:	9a00      	ldr	r2, [sp, #0]
 801f66c:	4016      	ands	r6, r2
 801f66e:	9a04      	ldr	r2, [sp, #16]
 801f670:	4017      	ands	r7, r2
 801f672:	9a02      	ldr	r2, [sp, #8]
 801f674:	4011      	ands	r1, r2
 801f676:	ea0e 0203 	and.w	r2, lr, r3
 801f67a:	430e      	orrs	r6, r1
 801f67c:	4317      	orrs	r7, r2
 801f67e:	eb19 0606 	adds.w	r6, r9, r6
 801f682:	eb48 0707 	adc.w	r7, r8, r7
 801f686:	1830      	adds	r0, r6, r0
 801f688:	4601      	mov	r1, r0
 801f68a:	eb47 0005 	adc.w	r0, r7, r5
 801f68e:	4603      	mov	r3, r0
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 801f690:	6a20      	ldr	r0, [r4, #32]
 801f692:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801f694:	f8dc 6020 	ldr.w	r6, [ip, #32]
 801f698:	f8dc 5024 	ldr.w	r5, [ip, #36]	; 0x24
 801f69c:	1980      	adds	r0, r0, r6
 801f69e:	eb47 0505 	adc.w	r5, r7, r5
 801f6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f6a4:	1886      	adds	r6, r0, r2
 801f6a6:	9607      	str	r6, [sp, #28]
 801f6a8:	eb45 050b 	adc.w	r5, r5, fp
 801f6ac:	9a05      	ldr	r2, [sp, #20]
 801f6ae:	9e08      	ldr	r6, [sp, #32]
 801f6b0:	4056      	eors	r6, r2
 801f6b2:	9f01      	ldr	r7, [sp, #4]
 801f6b4:	ea8a 0807 	eor.w	r8, sl, r7
 801f6b8:	9f06      	ldr	r7, [sp, #24]
 801f6ba:	403e      	ands	r6, r7
 801f6bc:	9803      	ldr	r0, [sp, #12]
 801f6be:	ea08 0800 	and.w	r8, r8, r0
 801f6c2:	4056      	eors	r6, r2
 801f6c4:	ea88 080a 	eor.w	r8, r8, sl
 801f6c8:	9807      	ldr	r0, [sp, #28]
 801f6ca:	1986      	adds	r6, r0, r6
 801f6cc:	9607      	str	r6, [sp, #28]
 801f6ce:	eb45 0508 	adc.w	r5, r5, r8
 801f6d2:	463a      	mov	r2, r7
 801f6d4:	ea4f 3997 	mov.w	r9, r7, lsr #14
 801f6d8:	9e03      	ldr	r6, [sp, #12]
 801f6da:	4637      	mov	r7, r6
 801f6dc:	ea49 4986 	orr.w	r9, r9, r6, lsl #18
 801f6e0:	ea4f 3896 	mov.w	r8, r6, lsr #14
 801f6e4:	ea48 4b82 	orr.w	fp, r8, r2, lsl #18
 801f6e8:	0c96      	lsrs	r6, r2, #18
 801f6ea:	4638      	mov	r0, r7
 801f6ec:	ea46 3687 	orr.w	r6, r6, r7, lsl #14
 801f6f0:	ea4f 4897 	mov.w	r8, r7, lsr #18
 801f6f4:	ea48 3782 	orr.w	r7, r8, r2, lsl #14
 801f6f8:	ea89 0906 	eor.w	r9, r9, r6
 801f6fc:	ea8b 0807 	eor.w	r8, fp, r7
 801f700:	05c7      	lsls	r7, r0, #23
 801f702:	ea47 2752 	orr.w	r7, r7, r2, lsr #9
 801f706:	05d6      	lsls	r6, r2, #23
 801f708:	ea46 2650 	orr.w	r6, r6, r0, lsr #9
 801f70c:	ea89 0606 	eor.w	r6, r9, r6
 801f710:	ea88 0707 	eor.w	r7, r8, r7
 801f714:	9807      	ldr	r0, [sp, #28]
 801f716:	1986      	adds	r6, r0, r6
 801f718:	eb45 0707 	adc.w	r7, r5, r7
 801f71c:	9d00      	ldr	r5, [sp, #0]
 801f71e:	960c      	str	r6, [sp, #48]	; 0x30
 801f720:	eb15 0806 	adds.w	r8, r5, r6
 801f724:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801f728:	9804      	ldr	r0, [sp, #16]
 801f72a:	eb40 0807 	adc.w	r8, r0, r7
 801f72e:	f8cd 8000 	str.w	r8, [sp]
 801f732:	460a      	mov	r2, r1
 801f734:	0f0d      	lsrs	r5, r1, #28
 801f736:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
 801f73a:	0f19      	lsrs	r1, r3, #28
 801f73c:	ea41 1b02 	orr.w	fp, r1, r2, lsl #4
 801f740:	0799      	lsls	r1, r3, #30
 801f742:	4616      	mov	r6, r2
 801f744:	ea41 0192 	orr.w	r1, r1, r2, lsr #2
 801f748:	0792      	lsls	r2, r2, #30
 801f74a:	4618      	mov	r0, r3
 801f74c:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 801f750:	4055      	eors	r5, r2
 801f752:	ea8b 0101 	eor.w	r1, fp, r1
 801f756:	ea4f 6b43 	mov.w	fp, r3, lsl #25
 801f75a:	4633      	mov	r3, r6
 801f75c:	ea4b 1bd6 	orr.w	fp, fp, r6, lsr #7
 801f760:	0672      	lsls	r2, r6, #25
 801f762:	9004      	str	r0, [sp, #16]
 801f764:	ea42 12d0 	orr.w	r2, r2, r0, lsr #7
 801f768:	4055      	eors	r5, r2
 801f76a:	ea81 010b 	eor.w	r1, r1, fp
 801f76e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f770:	9307      	str	r3, [sp, #28]
 801f772:	ea46 0203 	orr.w	r2, r6, r3
 801f776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f778:	ea43 0b00 	orr.w	fp, r3, r0
 801f77c:	9b02      	ldr	r3, [sp, #8]
 801f77e:	401a      	ands	r2, r3
 801f780:	ea0b 0b0e 	and.w	fp, fp, lr
 801f784:	9b07      	ldr	r3, [sp, #28]
 801f786:	ea06 0803 	and.w	r8, r6, r3
 801f78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f78c:	ea03 0600 	and.w	r6, r3, r0
 801f790:	ea42 0208 	orr.w	r2, r2, r8
 801f794:	ea4b 0b06 	orr.w	fp, fp, r6
 801f798:	18aa      	adds	r2, r5, r2
 801f79a:	eb41 0b0b 	adc.w	fp, r1, fp
 801f79e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f7a0:	eb12 0906 	adds.w	r9, r2, r6
 801f7a4:	eb4b 0b07 	adc.w	fp, fp, r7
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 801f7a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801f7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f7ac:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
 801f7b0:	f8dc 102c 	ldr.w	r1, [ip, #44]	; 0x2c
 801f7b4:	1812      	adds	r2, r2, r0
 801f7b6:	eb46 0101 	adc.w	r1, r6, r1
 801f7ba:	9d05      	ldr	r5, [sp, #20]
 801f7bc:	1952      	adds	r2, r2, r5
 801f7be:	eb41 010a 	adc.w	r1, r1, sl
 801f7c2:	9105      	str	r1, [sp, #20]
 801f7c4:	9f08      	ldr	r7, [sp, #32]
 801f7c6:	9d06      	ldr	r5, [sp, #24]
 801f7c8:	ea87 0005 	eor.w	r0, r7, r5
 801f7cc:	9e01      	ldr	r6, [sp, #4]
 801f7ce:	9d03      	ldr	r5, [sp, #12]
 801f7d0:	4075      	eors	r5, r6
 801f7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7d4:	4018      	ands	r0, r3
 801f7d6:	9900      	ldr	r1, [sp, #0]
 801f7d8:	400d      	ands	r5, r1
 801f7da:	4078      	eors	r0, r7
 801f7dc:	4075      	eors	r5, r6
 801f7de:	1812      	adds	r2, r2, r0
 801f7e0:	9905      	ldr	r1, [sp, #20]
 801f7e2:	eb45 0101 	adc.w	r1, r5, r1
 801f7e6:	0b9f      	lsrs	r7, r3, #14
 801f7e8:	9d00      	ldr	r5, [sp, #0]
 801f7ea:	ea47 4885 	orr.w	r8, r7, r5, lsl #18
 801f7ee:	0bad      	lsrs	r5, r5, #14
 801f7f0:	ea45 4683 	orr.w	r6, r5, r3, lsl #18
 801f7f4:	0c9f      	lsrs	r7, r3, #18
 801f7f6:	9d00      	ldr	r5, [sp, #0]
 801f7f8:	ea47 3085 	orr.w	r0, r7, r5, lsl #14
 801f7fc:	0cad      	lsrs	r5, r5, #18
 801f7fe:	ea45 3583 	orr.w	r5, r5, r3, lsl #14
 801f802:	ea88 0700 	eor.w	r7, r8, r0
 801f806:	4075      	eors	r5, r6
 801f808:	9800      	ldr	r0, [sp, #0]
 801f80a:	05c6      	lsls	r6, r0, #23
 801f80c:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
 801f810:	05d8      	lsls	r0, r3, #23
 801f812:	9b00      	ldr	r3, [sp, #0]
 801f814:	ea40 2053 	orr.w	r0, r0, r3, lsr #9
 801f818:	4078      	eors	r0, r7
 801f81a:	406e      	eors	r6, r5
 801f81c:	1812      	adds	r2, r2, r0
 801f81e:	eb41 0606 	adc.w	r6, r1, r6
 801f822:	9b02      	ldr	r3, [sp, #8]
 801f824:	eb13 0802 	adds.w	r8, r3, r2
 801f828:	f8cd 8014 	str.w	r8, [sp, #20]
 801f82c:	eb4e 0e06 	adc.w	lr, lr, r6
 801f830:	f8cd e008 	str.w	lr, [sp, #8]
 801f834:	ea4f 7019 	mov.w	r0, r9, lsr #28
 801f838:	ea40 100b 	orr.w	r0, r0, fp, lsl #4
 801f83c:	ea4f 711b 	mov.w	r1, fp, lsr #28
 801f840:	ea41 1a09 	orr.w	sl, r1, r9, lsl #4
 801f844:	ea4f 718b 	mov.w	r1, fp, lsl #30
 801f848:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 801f84c:	ea4f 7389 	mov.w	r3, r9, lsl #30
 801f850:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
 801f854:	4058      	eors	r0, r3
 801f856:	ea8a 0101 	eor.w	r1, sl, r1
 801f85a:	ea4f 6a4b 	mov.w	sl, fp, lsl #25
 801f85e:	ea4a 1ad9 	orr.w	sl, sl, r9, lsr #7
 801f862:	ea4f 6349 	mov.w	r3, r9, lsl #25
 801f866:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 801f86a:	4058      	eors	r0, r3
 801f86c:	ea81 010a 	eor.w	r1, r1, sl
 801f870:	9d07      	ldr	r5, [sp, #28]
 801f872:	ea45 0309 	orr.w	r3, r5, r9
 801f876:	9f04      	ldr	r7, [sp, #16]
 801f878:	ea47 0a0b 	orr.w	sl, r7, fp
 801f87c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f87e:	402b      	ands	r3, r5
 801f880:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f882:	ea0a 0a07 	and.w	sl, sl, r7
 801f886:	9d07      	ldr	r5, [sp, #28]
 801f888:	ea05 0709 	and.w	r7, r5, r9
 801f88c:	9d04      	ldr	r5, [sp, #16]
 801f88e:	ea05 050b 	and.w	r5, r5, fp
 801f892:	433b      	orrs	r3, r7
 801f894:	ea4a 0a05 	orr.w	sl, sl, r5
 801f898:	18c3      	adds	r3, r0, r3
 801f89a:	eb41 0a0a 	adc.w	sl, r1, sl
 801f89e:	eb13 0802 	adds.w	r8, r3, r2
 801f8a2:	eb4a 0a06 	adc.w	sl, sl, r6
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 801f8a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f8a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f8aa:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 801f8ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801f8b2:	185b      	adds	r3, r3, r1
 801f8b4:	eb40 0202 	adc.w	r2, r0, r2
 801f8b8:	9908      	ldr	r1, [sp, #32]
 801f8ba:	185b      	adds	r3, r3, r1
 801f8bc:	9901      	ldr	r1, [sp, #4]
 801f8be:	eb42 0501 	adc.w	r5, r2, r1
 801f8c2:	9906      	ldr	r1, [sp, #24]
 801f8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f8c6:	ea81 0702 	eor.w	r7, r1, r2
 801f8ca:	9803      	ldr	r0, [sp, #12]
 801f8cc:	9a00      	ldr	r2, [sp, #0]
 801f8ce:	4042      	eors	r2, r0
 801f8d0:	9e05      	ldr	r6, [sp, #20]
 801f8d2:	4037      	ands	r7, r6
 801f8d4:	9e02      	ldr	r6, [sp, #8]
 801f8d6:	4032      	ands	r2, r6
 801f8d8:	404f      	eors	r7, r1
 801f8da:	ea82 0600 	eor.w	r6, r2, r0
 801f8de:	19df      	adds	r7, r3, r7
 801f8e0:	eb45 0206 	adc.w	r2, r5, r6
 801f8e4:	9201      	str	r2, [sp, #4]
 801f8e6:	9905      	ldr	r1, [sp, #20]
 801f8e8:	0b8b      	lsrs	r3, r1, #14
 801f8ea:	9802      	ldr	r0, [sp, #8]
 801f8ec:	ea43 4680 	orr.w	r6, r3, r0, lsl #18
 801f8f0:	ea4f 3e90 	mov.w	lr, r0, lsr #14
 801f8f4:	ea4e 4581 	orr.w	r5, lr, r1, lsl #18
 801f8f8:	0c8b      	lsrs	r3, r1, #18
 801f8fa:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 801f8fe:	ea4f 4e90 	mov.w	lr, r0, lsr #18
 801f902:	4608      	mov	r0, r1
 801f904:	ea4e 3181 	orr.w	r1, lr, r1, lsl #14
 801f908:	4073      	eors	r3, r6
 801f90a:	ea85 0e01 	eor.w	lr, r5, r1
 801f90e:	9902      	ldr	r1, [sp, #8]
 801f910:	05cd      	lsls	r5, r1, #23
 801f912:	ea45 2550 	orr.w	r5, r5, r0, lsr #9
 801f916:	05c6      	lsls	r6, r0, #23
 801f918:	ea46 2651 	orr.w	r6, r6, r1, lsr #9
 801f91c:	4073      	eors	r3, r6
 801f91e:	ea8e 0505 	eor.w	r5, lr, r5
 801f922:	18fb      	adds	r3, r7, r3
 801f924:	9a01      	ldr	r2, [sp, #4]
 801f926:	eb42 0505 	adc.w	r5, r2, r5
 801f92a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f92c:	eb16 0e03 	adds.w	lr, r6, r3
 801f930:	f8cd e020 	str.w	lr, [sp, #32]
 801f934:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f936:	eb47 0e05 	adc.w	lr, r7, r5
 801f93a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801f93e:	ea4f 7018 	mov.w	r0, r8, lsr #28
 801f942:	ea40 100a 	orr.w	r0, r0, sl, lsl #4
 801f946:	ea4f 711a 	mov.w	r1, sl, lsr #28
 801f94a:	ea41 1608 	orr.w	r6, r1, r8, lsl #4
 801f94e:	ea4f 718a 	mov.w	r1, sl, lsl #30
 801f952:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 801f956:	ea4f 7288 	mov.w	r2, r8, lsl #30
 801f95a:	ea42 029a 	orr.w	r2, r2, sl, lsr #2
 801f95e:	4050      	eors	r0, r2
 801f960:	4071      	eors	r1, r6
 801f962:	ea4f 664a 	mov.w	r6, sl, lsl #25
 801f966:	ea46 16d8 	orr.w	r6, r6, r8, lsr #7
 801f96a:	ea4f 6248 	mov.w	r2, r8, lsl #25
 801f96e:	ea42 12da 	orr.w	r2, r2, sl, lsr #7
 801f972:	4050      	eors	r0, r2
 801f974:	4071      	eors	r1, r6
 801f976:	ea49 0208 	orr.w	r2, r9, r8
 801f97a:	ea4b 060a 	orr.w	r6, fp, sl
 801f97e:	9f07      	ldr	r7, [sp, #28]
 801f980:	403a      	ands	r2, r7
 801f982:	9f04      	ldr	r7, [sp, #16]
 801f984:	403e      	ands	r6, r7
 801f986:	ea09 0e08 	and.w	lr, r9, r8
 801f98a:	ea0b 070a 	and.w	r7, fp, sl
 801f98e:	ea42 020e 	orr.w	r2, r2, lr
 801f992:	433e      	orrs	r6, r7
 801f994:	1882      	adds	r2, r0, r2
 801f996:	eb41 0606 	adc.w	r6, r1, r6
 801f99a:	eb12 0e03 	adds.w	lr, r2, r3
 801f99e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801f9a2:	eb46 0e05 	adc.w	lr, r6, r5
 801f9a6:	f8cd e004 	str.w	lr, [sp, #4]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 801f9aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f9ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801f9ae:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 801f9b2:	f8dc 003c 	ldr.w	r0, [ip, #60]	; 0x3c
 801f9b6:	185b      	adds	r3, r3, r1
 801f9b8:	eb40 0202 	adc.w	r2, r0, r2
 801f9bc:	9906      	ldr	r1, [sp, #24]
 801f9be:	185b      	adds	r3, r3, r1
 801f9c0:	9803      	ldr	r0, [sp, #12]
 801f9c2:	eb42 0500 	adc.w	r5, r2, r0
 801f9c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f9c8:	9e05      	ldr	r6, [sp, #20]
 801f9ca:	ea81 0706 	eor.w	r7, r1, r6
 801f9ce:	9800      	ldr	r0, [sp, #0]
 801f9d0:	9e02      	ldr	r6, [sp, #8]
 801f9d2:	ea80 0206 	eor.w	r2, r0, r6
 801f9d6:	9e08      	ldr	r6, [sp, #32]
 801f9d8:	4037      	ands	r7, r6
 801f9da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f9dc:	4032      	ands	r2, r6
 801f9de:	404f      	eors	r7, r1
 801f9e0:	ea82 0600 	eor.w	r6, r2, r0
 801f9e4:	19df      	adds	r7, r3, r7
 801f9e6:	eb45 0206 	adc.w	r2, r5, r6
 801f9ea:	9203      	str	r2, [sp, #12]
 801f9ec:	9908      	ldr	r1, [sp, #32]
 801f9ee:	0b8b      	lsrs	r3, r1, #14
 801f9f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f9f2:	ea43 4682 	orr.w	r6, r3, r2, lsl #18
 801f9f6:	ea4f 3e92 	mov.w	lr, r2, lsr #14
 801f9fa:	ea4e 4581 	orr.w	r5, lr, r1, lsl #18
 801f9fe:	0c8b      	lsrs	r3, r1, #18
 801fa00:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801fa04:	ea4f 4e92 	mov.w	lr, r2, lsr #18
 801fa08:	4608      	mov	r0, r1
 801fa0a:	ea4e 3181 	orr.w	r1, lr, r1, lsl #14
 801fa0e:	4073      	eors	r3, r6
 801fa10:	ea85 0e01 	eor.w	lr, r5, r1
 801fa14:	05d5      	lsls	r5, r2, #23
 801fa16:	ea45 2550 	orr.w	r5, r5, r0, lsr #9
 801fa1a:	05c6      	lsls	r6, r0, #23
 801fa1c:	ea46 2652 	orr.w	r6, r6, r2, lsr #9
 801fa20:	4073      	eors	r3, r6
 801fa22:	ea8e 0505 	eor.w	r5, lr, r5
 801fa26:	18fb      	adds	r3, r7, r3
 801fa28:	9a03      	ldr	r2, [sp, #12]
 801fa2a:	eb42 0505 	adc.w	r5, r2, r5
 801fa2e:	9f07      	ldr	r7, [sp, #28]
 801fa30:	9303      	str	r3, [sp, #12]
 801fa32:	18f9      	adds	r1, r7, r3
 801fa34:	910c      	str	r1, [sp, #48]	; 0x30
 801fa36:	9f04      	ldr	r7, [sp, #16]
 801fa38:	eb47 0105 	adc.w	r1, r7, r5
 801fa3c:	9106      	str	r1, [sp, #24]
 801fa3e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fa40:	0f38      	lsrs	r0, r7, #28
 801fa42:	9b01      	ldr	r3, [sp, #4]
 801fa44:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 801fa48:	0f19      	lsrs	r1, r3, #28
 801fa4a:	ea41 1607 	orr.w	r6, r1, r7, lsl #4
 801fa4e:	0799      	lsls	r1, r3, #30
 801fa50:	ea41 0197 	orr.w	r1, r1, r7, lsr #2
 801fa54:	07ba      	lsls	r2, r7, #30
 801fa56:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 801fa5a:	4050      	eors	r0, r2
 801fa5c:	4071      	eors	r1, r6
 801fa5e:	065e      	lsls	r6, r3, #25
 801fa60:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 801fa64:	067a      	lsls	r2, r7, #25
 801fa66:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 801fa6a:	4050      	eors	r0, r2
 801fa6c:	4071      	eors	r1, r6
 801fa6e:	ea48 0207 	orr.w	r2, r8, r7
 801fa72:	ea4a 0603 	orr.w	r6, sl, r3
 801fa76:	ea02 0209 	and.w	r2, r2, r9
 801fa7a:	ea06 060b 	and.w	r6, r6, fp
 801fa7e:	ea08 0e07 	and.w	lr, r8, r7
 801fa82:	ea0a 0703 	and.w	r7, sl, r3
 801fa86:	ea42 020e 	orr.w	r2, r2, lr
 801fa8a:	433e      	orrs	r6, r7
 801fa8c:	1882      	adds	r2, r0, r2
 801fa8e:	eb41 0606 	adc.w	r6, r1, r6
 801fa92:	9b03      	ldr	r3, [sp, #12]
 801fa94:	18d3      	adds	r3, r2, r3
 801fa96:	9307      	str	r3, [sp, #28]
 801fa98:	eb46 0305 	adc.w	r3, r6, r5
 801fa9c:	9303      	str	r3, [sp, #12]
    }
    while( i < 80 );
 801fa9e:	3440      	adds	r4, #64	; 0x40
 801faa0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 801faa4:	4b2b      	ldr	r3, [pc, #172]	; (801fb54 <mbedtls_internal_sha512_process+0xa24>)
 801faa6:	429c      	cmp	r4, r3
 801faa8:	f47f abfe 	bne.w	801f2a8 <mbedtls_internal_sha512_process+0x178>
 801faac:	4644      	mov	r4, r8
 801faae:	464d      	mov	r5, r9
 801fab0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801fab4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801fab8:	f8dd c008 	ldr.w	ip, [sp, #8]

    ctx->state[0] += A;
 801fabc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fabe:	9a07      	ldr	r2, [sp, #28]
 801fac0:	189b      	adds	r3, r3, r2
 801fac2:	9a03      	ldr	r2, [sp, #12]
 801fac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801fac6:	eb41 0202 	adc.w	r2, r1, r2
 801faca:	990d      	ldr	r1, [sp, #52]	; 0x34
 801facc:	610b      	str	r3, [r1, #16]
 801face:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
 801fad0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fad4:	189b      	adds	r3, r3, r2
 801fad6:	9a01      	ldr	r2, [sp, #4]
 801fad8:	981a      	ldr	r0, [sp, #104]	; 0x68
 801fada:	eb40 0202 	adc.w	r2, r0, r2
 801fade:	4608      	mov	r0, r1
 801fae0:	618b      	str	r3, [r1, #24]
 801fae2:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
 801fae4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fae6:	1912      	adds	r2, r2, r4
 801fae8:	991c      	ldr	r1, [sp, #112]	; 0x70
 801faea:	eb41 040a 	adc.w	r4, r1, sl
 801faee:	6202      	str	r2, [r0, #32]
 801faf0:	4602      	mov	r2, r0
 801faf2:	6244      	str	r4, [r0, #36]	; 0x24
    ctx->state[3] += D;
 801faf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faf6:	1959      	adds	r1, r3, r5
 801faf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fafa:	eb43 060b 	adc.w	r6, r3, fp
 801fafe:	6281      	str	r1, [r0, #40]	; 0x28
 801fb00:	62c6      	str	r6, [r0, #44]	; 0x2c
    ctx->state[4] += E;
 801fb02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb04:	eb13 0608 	adds.w	r6, r3, r8
 801fb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fb0a:	eb43 0409 	adc.w	r4, r3, r9
 801fb0e:	6306      	str	r6, [r0, #48]	; 0x30
 801fb10:	6344      	str	r4, [r0, #52]	; 0x34
    ctx->state[5] += F;
 801fb12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fb14:	9908      	ldr	r1, [sp, #32]
 801fb16:	185b      	adds	r3, r3, r1
 801fb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fb1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fb1c:	eb41 0000 	adc.w	r0, r1, r0
 801fb20:	6393      	str	r3, [r2, #56]	; 0x38
 801fb22:	4613      	mov	r3, r2
 801fb24:	63d0      	str	r0, [r2, #60]	; 0x3c
    ctx->state[6] += G;
 801fb26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb28:	9905      	ldr	r1, [sp, #20]
 801fb2a:	1852      	adds	r2, r2, r1
 801fb2c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fb2e:	eb41 000c 	adc.w	r0, r1, ip
 801fb32:	641a      	str	r2, [r3, #64]	; 0x40
 801fb34:	6458      	str	r0, [r3, #68]	; 0x44
    ctx->state[7] += H;
 801fb36:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801fb38:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fb3a:	1851      	adds	r1, r2, r1
 801fb3c:	9a00      	ldr	r2, [sp, #0]
 801fb3e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801fb40:	eb40 0202 	adc.w	r2, r0, r2
 801fb44:	6499      	str	r1, [r3, #72]	; 0x48
 801fb46:	64da      	str	r2, [r3, #76]	; 0x4c

    return( 0 );
}
 801fb48:	2000      	movs	r0, #0
 801fb4a:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
 801fb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb52:	bf00      	nop
 801fb54:	08033298 	.word	0x08033298

0801fb58 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 801fb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 801fb5c:	2a00      	cmp	r2, #0
 801fb5e:	d04b      	beq.n	801fbf8 <mbedtls_sha512_update_ret+0xa0>
 801fb60:	4606      	mov	r6, r0
 801fb62:	460d      	mov	r5, r1
 801fb64:	4614      	mov	r4, r2
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 801fb66:	e9d0 2300 	ldrd	r2, r3, [r0]
 801fb6a:	f002 077f 	and.w	r7, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 801fb6e:	1912      	adds	r2, r2, r4
 801fb70:	f143 0300 	adc.w	r3, r3, #0
 801fb74:	e9c0 2300 	strd	r2, r3, [r0]

    if( ctx->total[0] < (uint64_t) ilen )
 801fb78:	2100      	movs	r1, #0
 801fb7a:	428b      	cmp	r3, r1
 801fb7c:	bf08      	it	eq
 801fb7e:	42a2      	cmpeq	r2, r4
 801fb80:	d206      	bcs.n	801fb90 <mbedtls_sha512_update_ret+0x38>
        ctx->total[1]++;
 801fb82:	68b3      	ldr	r3, [r6, #8]
 801fb84:	68f2      	ldr	r2, [r6, #12]
 801fb86:	3301      	adds	r3, #1
 801fb88:	f142 0200 	adc.w	r2, r2, #0
 801fb8c:	60b3      	str	r3, [r6, #8]
 801fb8e:	60f2      	str	r2, [r6, #12]

    if( left && ilen >= fill )
 801fb90:	b11f      	cbz	r7, 801fb9a <mbedtls_sha512_update_ret+0x42>
    fill = 128 - left;
 801fb92:	f1c7 0880 	rsb	r8, r7, #128	; 0x80
    if( left && ilen >= fill )
 801fb96:	4544      	cmp	r4, r8
 801fb98:	d20e      	bcs.n	801fbb8 <mbedtls_sha512_update_ret+0x60>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 801fb9a:	2c7f      	cmp	r4, #127	; 0x7f
 801fb9c:	d923      	bls.n	801fbe6 <mbedtls_sha512_update_ret+0x8e>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 801fb9e:	4629      	mov	r1, r5
 801fba0:	4630      	mov	r0, r6
 801fba2:	f7ff fac5 	bl	801f130 <mbedtls_internal_sha512_process>
 801fba6:	4603      	mov	r3, r0
 801fba8:	bb38      	cbnz	r0, 801fbfa <mbedtls_sha512_update_ret+0xa2>
            return( ret );

        input += 128;
 801fbaa:	3580      	adds	r5, #128	; 0x80
        ilen  -= 128;
 801fbac:	3c80      	subs	r4, #128	; 0x80
    while( ilen >= 128 )
 801fbae:	2c7f      	cmp	r4, #127	; 0x7f
 801fbb0:	d8f5      	bhi.n	801fb9e <mbedtls_sha512_update_ret+0x46>
    }

    if( ilen > 0 )
 801fbb2:	b9c4      	cbnz	r4, 801fbe6 <mbedtls_sha512_update_ret+0x8e>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
 801fbb4:	2300      	movs	r3, #0
 801fbb6:	e020      	b.n	801fbfa <mbedtls_sha512_update_ret+0xa2>
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801fbb8:	f106 0950 	add.w	r9, r6, #80	; 0x50
 801fbbc:	4642      	mov	r2, r8
 801fbbe:	4629      	mov	r1, r5
 801fbc0:	eb09 0007 	add.w	r0, r9, r7
 801fbc4:	f00a fcb9 	bl	802a53a <memcpy>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 801fbc8:	4649      	mov	r1, r9
 801fbca:	4630      	mov	r0, r6
 801fbcc:	f7ff fab0 	bl	801f130 <mbedtls_internal_sha512_process>
 801fbd0:	4603      	mov	r3, r0
 801fbd2:	b990      	cbnz	r0, 801fbfa <mbedtls_sha512_update_ret+0xa2>
        input += fill;
 801fbd4:	4445      	add	r5, r8
        ilen  -= fill;
 801fbd6:	3c80      	subs	r4, #128	; 0x80
 801fbd8:	443c      	add	r4, r7
    while( ilen >= 128 )
 801fbda:	2c7f      	cmp	r4, #127	; 0x7f
 801fbdc:	d901      	bls.n	801fbe2 <mbedtls_sha512_update_ret+0x8a>
        left = 0;
 801fbde:	2700      	movs	r7, #0
 801fbe0:	e7dd      	b.n	801fb9e <mbedtls_sha512_update_ret+0x46>
 801fbe2:	2700      	movs	r7, #0
 801fbe4:	e7e5      	b.n	801fbb2 <mbedtls_sha512_update_ret+0x5a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801fbe6:	f106 0050 	add.w	r0, r6, #80	; 0x50
 801fbea:	4622      	mov	r2, r4
 801fbec:	4629      	mov	r1, r5
 801fbee:	4438      	add	r0, r7
 801fbf0:	f00a fca3 	bl	802a53a <memcpy>
    return( 0 );
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	e000      	b.n	801fbfa <mbedtls_sha512_update_ret+0xa2>
        return( 0 );
 801fbf8:	2300      	movs	r3, #0
}
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801fc00 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 801fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc02:	4604      	mov	r4, r0
 801fc04:	460d      	mov	r5, r1
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 801fc06:	6803      	ldr	r3, [r0, #0]
 801fc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 801fc0c:	1c58      	adds	r0, r3, #1
 801fc0e:	4423      	add	r3, r4
 801fc10:	2280      	movs	r2, #128	; 0x80
 801fc12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if( used <= 112 )
 801fc16:	2870      	cmp	r0, #112	; 0x70
 801fc18:	f200 8119 	bhi.w	801fe4e <mbedtls_sha512_finish_ret+0x24e>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 801fc1c:	f104 0350 	add.w	r3, r4, #80	; 0x50
 801fc20:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 801fc24:	2100      	movs	r1, #0
 801fc26:	4418      	add	r0, r3
 801fc28:	f00a fcaf 	bl	802a58a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 801fc2c:	6826      	ldr	r6, [r4, #0]
 801fc2e:	6863      	ldr	r3, [r4, #4]
         | ( ctx->total[1] <<  3 );
 801fc30:	68a1      	ldr	r1, [r4, #8]
 801fc32:	68e2      	ldr	r2, [r4, #12]
 801fc34:	00d2      	lsls	r2, r2, #3
 801fc36:	ea42 7251 	orr.w	r2, r2, r1, lsr #29
    high = ( ctx->total[0] >> 61 )
 801fc3a:	0f58      	lsrs	r0, r3, #29
 801fc3c:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 801fc40:	00db      	lsls	r3, r3, #3
 801fc42:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 801fc46:	00f7      	lsls	r7, r6, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 801fc48:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fc4c:	f884 c0c0 	strb.w	ip, [r4, #192]	; 0xc0
 801fc50:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801fc54:	f884 c0c1 	strb.w	ip, [r4, #193]	; 0xc1
 801fc58:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801fc5c:	f884 c0c2 	strb.w	ip, [r4, #194]	; 0xc2
 801fc60:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
 801fc64:	f3c1 5247 	ubfx	r2, r1, #21, #8
 801fc68:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 801fc6c:	f3c1 324f 	ubfx	r2, r1, #13, #16
 801fc70:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 801fc74:	f3c1 1157 	ubfx	r1, r1, #5, #24
 801fc78:	f884 10c6 	strb.w	r1, [r4, #198]	; 0xc6
 801fc7c:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 801fc80:	0e1a      	lsrs	r2, r3, #24
 801fc82:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 801fc86:	0c1a      	lsrs	r2, r3, #16
 801fc88:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 801fc8c:	0a1a      	lsrs	r2, r3, #8
 801fc8e:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 801fc92:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 801fc96:	f3c6 5347 	ubfx	r3, r6, #21, #8
 801fc9a:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 801fc9e:	f3c6 334f 	ubfx	r3, r6, #13, #16
 801fca2:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 801fca6:	f3c6 1357 	ubfx	r3, r6, #5, #24
 801fcaa:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 801fcae:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 801fcb2:	f104 0150 	add.w	r1, r4, #80	; 0x50
 801fcb6:	4620      	mov	r0, r4
 801fcb8:	f7ff fa3a 	bl	801f130 <mbedtls_internal_sha512_process>
 801fcbc:	2800      	cmp	r0, #0
 801fcbe:	f040 80d3 	bne.w	801fe68 <mbedtls_sha512_finish_ret+0x268>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 801fcc2:	7de3      	ldrb	r3, [r4, #23]
 801fcc4:	702b      	strb	r3, [r5, #0]
 801fcc6:	8ae3      	ldrh	r3, [r4, #22]
 801fcc8:	706b      	strb	r3, [r5, #1]
 801fcca:	6963      	ldr	r3, [r4, #20]
 801fccc:	0a1b      	lsrs	r3, r3, #8
 801fcce:	70ab      	strb	r3, [r5, #2]
 801fcd0:	6963      	ldr	r3, [r4, #20]
 801fcd2:	70eb      	strb	r3, [r5, #3]
 801fcd4:	7ce3      	ldrb	r3, [r4, #19]
 801fcd6:	712b      	strb	r3, [r5, #4]
 801fcd8:	8a63      	ldrh	r3, [r4, #18]
 801fcda:	716b      	strb	r3, [r5, #5]
 801fcdc:	6923      	ldr	r3, [r4, #16]
 801fcde:	0a1b      	lsrs	r3, r3, #8
 801fce0:	71ab      	strb	r3, [r5, #6]
 801fce2:	6923      	ldr	r3, [r4, #16]
 801fce4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 801fce6:	7fe3      	ldrb	r3, [r4, #31]
 801fce8:	722b      	strb	r3, [r5, #8]
 801fcea:	8be3      	ldrh	r3, [r4, #30]
 801fcec:	726b      	strb	r3, [r5, #9]
 801fcee:	69e3      	ldr	r3, [r4, #28]
 801fcf0:	0a1b      	lsrs	r3, r3, #8
 801fcf2:	72ab      	strb	r3, [r5, #10]
 801fcf4:	69e3      	ldr	r3, [r4, #28]
 801fcf6:	72eb      	strb	r3, [r5, #11]
 801fcf8:	7ee3      	ldrb	r3, [r4, #27]
 801fcfa:	732b      	strb	r3, [r5, #12]
 801fcfc:	8b63      	ldrh	r3, [r4, #26]
 801fcfe:	736b      	strb	r3, [r5, #13]
 801fd00:	69a3      	ldr	r3, [r4, #24]
 801fd02:	0a1b      	lsrs	r3, r3, #8
 801fd04:	73ab      	strb	r3, [r5, #14]
 801fd06:	69a3      	ldr	r3, [r4, #24]
 801fd08:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 801fd0a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801fd0e:	742b      	strb	r3, [r5, #16]
 801fd10:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801fd12:	746b      	strb	r3, [r5, #17]
 801fd14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd16:	0a1b      	lsrs	r3, r3, #8
 801fd18:	74ab      	strb	r3, [r5, #18]
 801fd1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fd1c:	74eb      	strb	r3, [r5, #19]
 801fd1e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801fd22:	752b      	strb	r3, [r5, #20]
 801fd24:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801fd26:	756b      	strb	r3, [r5, #21]
 801fd28:	6a23      	ldr	r3, [r4, #32]
 801fd2a:	0a1b      	lsrs	r3, r3, #8
 801fd2c:	75ab      	strb	r3, [r5, #22]
 801fd2e:	6a23      	ldr	r3, [r4, #32]
 801fd30:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 801fd32:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801fd36:	762b      	strb	r3, [r5, #24]
 801fd38:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801fd3a:	766b      	strb	r3, [r5, #25]
 801fd3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801fd3e:	0a1b      	lsrs	r3, r3, #8
 801fd40:	76ab      	strb	r3, [r5, #26]
 801fd42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801fd44:	76eb      	strb	r3, [r5, #27]
 801fd46:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801fd4a:	772b      	strb	r3, [r5, #28]
 801fd4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801fd4e:	776b      	strb	r3, [r5, #29]
 801fd50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fd52:	0a1b      	lsrs	r3, r3, #8
 801fd54:	77ab      	strb	r3, [r5, #30]
 801fd56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fd58:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 801fd5a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801fd5e:	f885 3020 	strb.w	r3, [r5, #32]
 801fd62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801fd64:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 801fd68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fd6a:	0a1b      	lsrs	r3, r3, #8
 801fd6c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 801fd70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fd72:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 801fd76:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801fd7a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801fd7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801fd80:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801fd84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fd86:	0a1b      	lsrs	r3, r3, #8
 801fd88:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 801fd8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801fd8e:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 801fd92:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 801fd96:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 801fd9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801fd9c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 801fda0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fda2:	0a1b      	lsrs	r3, r3, #8
 801fda4:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 801fda8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fdaa:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 801fdae:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 801fdb2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 801fdb6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801fdb8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 801fdbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fdbe:	0a1b      	lsrs	r3, r3, #8
 801fdc0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 801fdc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fdc6:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 801fdca:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d14a      	bne.n	801fe68 <mbedtls_sha512_finish_ret+0x268>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 801fdd2:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 801fdd6:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
 801fdda:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 801fdde:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
 801fde2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801fde4:	0a12      	lsrs	r2, r2, #8
 801fde6:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
 801fdea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801fdec:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
 801fdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fdf4:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
 801fdf8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 801fdfc:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
 801fe00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fe02:	0a12      	lsrs	r2, r2, #8
 801fe04:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
 801fe08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801fe0a:	f885 2037 	strb.w	r2, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 801fe0e:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 801fe12:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
 801fe16:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 801fe1a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
 801fe1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801fe20:	0a12      	lsrs	r2, r2, #8
 801fe22:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
 801fe26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801fe28:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
 801fe2c:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 801fe30:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
 801fe34:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801fe38:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 801fe3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801fe3e:	0a12      	lsrs	r2, r2, #8
 801fe40:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
 801fe44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801fe46:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
    }

    return( 0 );
 801fe4a:	4618      	mov	r0, r3
 801fe4c:	e00c      	b.n	801fe68 <mbedtls_sha512_finish_ret+0x268>
        memset( ctx->buffer + used, 0, 128 - used );
 801fe4e:	f104 0650 	add.w	r6, r4, #80	; 0x50
 801fe52:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 801fe56:	2100      	movs	r1, #0
 801fe58:	4430      	add	r0, r6
 801fe5a:	f00a fb96 	bl	802a58a <memset>
        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 801fe5e:	4631      	mov	r1, r6
 801fe60:	4620      	mov	r0, r4
 801fe62:	f7ff f965 	bl	801f130 <mbedtls_internal_sha512_process>
 801fe66:	b100      	cbz	r0, 801fe6a <mbedtls_sha512_finish_ret+0x26a>
}
 801fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memset( ctx->buffer, 0, 112 );
 801fe6a:	2270      	movs	r2, #112	; 0x70
 801fe6c:	2100      	movs	r1, #0
 801fe6e:	4630      	mov	r0, r6
 801fe70:	f00a fb8b 	bl	802a58a <memset>
 801fe74:	e6da      	b.n	801fc2c <mbedtls_sha512_finish_ret+0x2c>

0801fe76 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 801fe76:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe78:	b0b7      	sub	sp, #220	; 0xdc
 801fe7a:	4605      	mov	r5, r0
 801fe7c:	460e      	mov	r6, r1
 801fe7e:	4617      	mov	r7, r2
 801fe80:	461c      	mov	r4, r3

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 801fe82:	4668      	mov	r0, sp
 801fe84:	f7ff f89f 	bl	801efc6 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 801fe88:	4621      	mov	r1, r4
 801fe8a:	4668      	mov	r0, sp
 801fe8c:	f7ff f8b0 	bl	801eff0 <mbedtls_sha512_starts_ret>
 801fe90:	4604      	mov	r4, r0
 801fe92:	b128      	cbz	r0, 801fea0 <mbedtls_sha512_ret+0x2a>

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 801fe94:	4668      	mov	r0, sp
 801fe96:	f7ff f89c 	bl	801efd2 <mbedtls_sha512_free>

    return( ret );
}
 801fe9a:	4620      	mov	r0, r4
 801fe9c:	b037      	add	sp, #220	; 0xdc
 801fe9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 801fea0:	4632      	mov	r2, r6
 801fea2:	4629      	mov	r1, r5
 801fea4:	4668      	mov	r0, sp
 801fea6:	f7ff fe57 	bl	801fb58 <mbedtls_sha512_update_ret>
 801feaa:	4604      	mov	r4, r0
 801feac:	2800      	cmp	r0, #0
 801feae:	d1f1      	bne.n	801fe94 <mbedtls_sha512_ret+0x1e>
    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 801feb0:	4639      	mov	r1, r7
 801feb2:	4668      	mov	r0, sp
 801feb4:	f7ff fea4 	bl	801fc00 <mbedtls_sha512_finish_ret>
 801feb8:	4604      	mov	r4, r0
exit:
 801feba:	e7eb      	b.n	801fe94 <mbedtls_sha512_ret+0x1e>

0801febc <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 801febc:	4601      	mov	r1, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 801febe:	4a06      	ldr	r2, [pc, #24]	; (801fed8 <mbedtls_ssl_ciphersuite_from_id+0x1c>)
 801fec0:	f64c 43a8 	movw	r3, #52392	; 0xcca8
 801fec4:	4610      	mov	r0, r2
    {
        if( cur->id == ciphersuite )
 801fec6:	4299      	cmp	r1, r3
 801fec8:	d004      	beq.n	801fed4 <mbedtls_ssl_ciphersuite_from_id+0x18>
    while( cur->id != 0 )
 801feca:	f852 3f20 	ldr.w	r3, [r2, #32]!
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d1f8      	bne.n	801fec4 <mbedtls_ssl_ciphersuite_from_id+0x8>
            return( cur );

        cur++;
    }

    return( NULL );
 801fed2:	2000      	movs	r0, #0
}
 801fed4:	4770      	bx	lr
 801fed6:	bf00      	nop
 801fed8:	080334e4 	.word	0x080334e4

0801fedc <mbedtls_ssl_list_ciphersuites>:
{
 801fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
 801fede:	4b11      	ldr	r3, [pc, #68]	; (801ff24 <mbedtls_ssl_list_ciphersuites+0x48>)
 801fee0:	681b      	ldr	r3, [r3, #0]
 801fee2:	b9eb      	cbnz	r3, 801ff20 <mbedtls_ssl_list_ciphersuites+0x44>
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801fee4:	4d10      	ldr	r5, [pc, #64]	; (801ff28 <mbedtls_ssl_list_ciphersuites+0x4c>)
 801fee6:	4e11      	ldr	r6, [pc, #68]	; (801ff2c <mbedtls_ssl_list_ciphersuites+0x50>)
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801fee8:	f64c 44a8 	movw	r4, #52392	; 0xcca8
 801feec:	f105 0738 	add.w	r7, r5, #56	; 0x38
 801fef0:	e004      	b.n	801fefc <mbedtls_ssl_list_ciphersuites+0x20>
 801fef2:	f856 4f04 	ldr.w	r4, [r6, #4]!
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801fef6:	b174      	cbz	r4, 801ff16 <mbedtls_ssl_list_ciphersuites+0x3a>
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801fef8:	42bd      	cmp	r5, r7
 801fefa:	d20c      	bcs.n	801ff16 <mbedtls_ssl_list_ciphersuites+0x3a>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 801fefc:	4620      	mov	r0, r4
 801fefe:	f7ff ffdd 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
 801ff02:	2800      	cmp	r0, #0
 801ff04:	d0f5      	beq.n	801fef2 <mbedtls_ssl_list_ciphersuites+0x16>
    if( cs_info->cipher == MBEDTLS_CIPHER_DES_EDE3_ECB ||
 801ff06:	7a03      	ldrb	r3, [r0, #8]
 801ff08:	3b24      	subs	r3, #36	; 0x24
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 801ff0a:	b2db      	uxtb	r3, r3
 801ff0c:	2b01      	cmp	r3, #1
                *(q++) = *p;
 801ff0e:	bf88      	it	hi
 801ff10:	f845 4b04 	strhi.w	r4, [r5], #4
 801ff14:	e7ed      	b.n	801fef2 <mbedtls_ssl_list_ciphersuites+0x16>
        *q = 0;
 801ff16:	2300      	movs	r3, #0
 801ff18:	602b      	str	r3, [r5, #0]
        supported_init = 1;
 801ff1a:	4b02      	ldr	r3, [pc, #8]	; (801ff24 <mbedtls_ssl_list_ciphersuites+0x48>)
 801ff1c:	2201      	movs	r2, #1
 801ff1e:	601a      	str	r2, [r3, #0]
}
 801ff20:	4801      	ldr	r0, [pc, #4]	; (801ff28 <mbedtls_ssl_list_ciphersuites+0x4c>)
 801ff22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff24:	200108e4 	.word	0x200108e4
 801ff28:	200108a8 	.word	0x200108a8
 801ff2c:	080336c4 	.word	0x080336c4

0801ff30 <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 801ff30:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 801ff32:	f7ff ffc3 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 801ff36:	b108      	cbz	r0, 801ff3c <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 801ff38:	6840      	ldr	r0, [r0, #4]
}
 801ff3a:	bd08      	pop	{r3, pc}
        return( "unknown" );
 801ff3c:	4800      	ldr	r0, [pc, #0]	; (801ff40 <mbedtls_ssl_get_ciphersuite_name+0x10>)
 801ff3e:	e7fc      	b.n	801ff3a <mbedtls_ssl_get_ciphersuite_name+0xa>
 801ff40:	08033298 	.word	0x08033298

0801ff44 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801ff44:	7a80      	ldrb	r0, [r0, #10]
 801ff46:	1e43      	subs	r3, r0, #1
 801ff48:	2b09      	cmp	r3, #9
 801ff4a:	d808      	bhi.n	801ff5e <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
 801ff4c:	e8df f003 	tbb	[pc, r3]
 801ff50:	0a090909 	.word	0x0a090909
 801ff54:	07090707 	.word	0x07090707
 801ff58:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
 801ff5a:	2002      	movs	r0, #2
 801ff5c:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
 801ff5e:	2000      	movs	r0, #0
 801ff60:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
 801ff62:	2001      	movs	r0, #1
    }
}
 801ff64:	4770      	bx	lr

0801ff66 <mbedtls_ssl_get_ciphersuite_sig_alg>:

mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801ff66:	7a80      	ldrb	r0, [r0, #10]
 801ff68:	2803      	cmp	r0, #3
 801ff6a:	d903      	bls.n	801ff74 <mbedtls_ssl_get_ciphersuite_sig_alg+0xe>

        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        default:
            return( MBEDTLS_PK_NONE );
 801ff6c:	2804      	cmp	r0, #4
 801ff6e:	bf18      	it	ne
 801ff70:	2000      	movne	r0, #0
    }
}
 801ff72:	4770      	bx	lr
            return( MBEDTLS_PK_NONE );
 801ff74:	3800      	subs	r0, #0
 801ff76:	bf18      	it	ne
 801ff78:	2001      	movne	r0, #1
 801ff7a:	4770      	bx	lr

0801ff7c <mbedtls_ssl_ciphersuite_uses_ec>:

#if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
int mbedtls_ssl_ciphersuite_uses_ec( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801ff7c:	7a80      	ldrb	r0, [r0, #10]
 801ff7e:	2804      	cmp	r0, #4
 801ff80:	d804      	bhi.n	801ff8c <mbedtls_ssl_ciphersuite_uses_ec+0x10>
 801ff82:	2802      	cmp	r0, #2
 801ff84:	bf94      	ite	ls
 801ff86:	2000      	movls	r0, #0
 801ff88:	2001      	movhi	r0, #1
 801ff8a:	4770      	bx	lr
 801ff8c:	3808      	subs	r0, #8
 801ff8e:	b2c0      	uxtb	r0, r0
 801ff90:	2803      	cmp	r0, #3
 801ff92:	bf8c      	ite	hi
 801ff94:	2000      	movhi	r0, #0
 801ff96:	2001      	movls	r0, #1
            return( 1 );

        default:
            return( 0 );
    }
}
 801ff98:	4770      	bx	lr
	...

0801ff9c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 801ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffa0:	b09d      	sub	sp, #116	; 0x74
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801ffa2:	6843      	ldr	r3, [r0, #4]
 801ffa4:	2b10      	cmp	r3, #16
 801ffa6:	f001 8510 	beq.w	80219ca <mbedtls_ssl_handshake_client_step+0x1a2e>
 801ffaa:	4604      	mov	r4, r0
 801ffac:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801ffae:	2a00      	cmp	r2, #0
 801ffb0:	f001 850e 	beq.w	80219d0 <mbedtls_ssl_handshake_client_step+0x1a34>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 801ffb4:	9301      	str	r3, [sp, #4]
 801ffb6:	4bbb      	ldr	r3, [pc, #748]	; (80202a4 <mbedtls_ssl_handshake_client_step+0x308>)
 801ffb8:	9300      	str	r3, [sp, #0]
 801ffba:	f640 53b6 	movw	r3, #3510	; 0xdb6
 801ffbe:	4aba      	ldr	r2, [pc, #744]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 801ffc0:	2102      	movs	r1, #2
 801ffc2:	f7f5 fba5 	bl	8015710 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801ffc6:	4620      	mov	r0, r4
 801ffc8:	f004 fb4e 	bl	8024668 <mbedtls_ssl_flush_output>
 801ffcc:	4605      	mov	r5, r0
 801ffce:	b9c0      	cbnz	r0, 8020002 <mbedtls_ssl_handshake_client_step+0x66>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
    }
#endif

    switch( ssl->state )
 801ffd0:	6863      	ldr	r3, [r4, #4]
 801ffd2:	2b0f      	cmp	r3, #15
 801ffd4:	f201 84ec 	bhi.w	80219b0 <mbedtls_ssl_handshake_client_step+0x1a14>
 801ffd8:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ffdc:	00170010 	.word	0x00170010
 801ffe0:	066102ec 	.word	0x066102ec
 801ffe4:	08e40667 	.word	0x08e40667
 801ffe8:	0a3609e6 	.word	0x0a3609e6
 801ffec:	0baa0a62 	.word	0x0baa0a62
 801fff0:	0cc60cc0 	.word	0x0cc60cc0
 801fff4:	0cd20ccc 	.word	0x0cd20ccc
 801fff8:	0ce50cd8 	.word	0x0ce50cd8
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 801fffc:	2201      	movs	r2, #1
 801fffe:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8020000:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 8020002:	4628      	mov	r0, r5
 8020004:	b01d      	add	sp, #116	; 0x74
 8020006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 802000a:	4ba8      	ldr	r3, [pc, #672]	; (80202ac <mbedtls_ssl_handshake_client_step+0x310>)
 802000c:	9300      	str	r3, [sp, #0]
 802000e:	f240 3306 	movw	r3, #774	; 0x306
 8020012:	4aa5      	ldr	r2, [pc, #660]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 8020014:	2102      	movs	r1, #2
 8020016:	4620      	mov	r0, r4
 8020018:	f7f5 fb7a 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->conf->f_rng == NULL )
 802001c:	6821      	ldr	r1, [r4, #0]
 802001e:	698b      	ldr	r3, [r1, #24]
 8020020:	2b00      	cmp	r3, #0
 8020022:	f000 80c1 	beq.w	80201a8 <mbedtls_ssl_handshake_client_step+0x20c>
        ssl->major_ver = ssl->conf->min_major_ver;
 8020026:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 802002a:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 802002c:	f891 306f 	ldrb.w	r3, [r1, #111]	; 0x6f
 8020030:	60e3      	str	r3, [r4, #12]
    if( ssl->conf->max_major_ver == 0 )
 8020032:	f891 006c 	ldrb.w	r0, [r1, #108]	; 0x6c
 8020036:	2800      	cmp	r0, #0
 8020038:	f000 80c1 	beq.w	80201be <mbedtls_ssl_handshake_client_step+0x222>
    buf = ssl->out_msg;
 802003c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
                       ssl->conf->transport, p );
 8020040:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 8020044:	1d33      	adds	r3, r6, #4
 8020046:	f3c2 0240 	ubfx	r2, r2, #1, #1
 802004a:	f891 106d 	ldrb.w	r1, [r1, #109]	; 0x6d
 802004e:	f006 febd 	bl	8026dcc <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 8020052:	4f95      	ldr	r7, [pc, #596]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 8020054:	7973      	ldrb	r3, [r6, #5]
 8020056:	9302      	str	r3, [sp, #8]
 8020058:	7933      	ldrb	r3, [r6, #4]
 802005a:	9301      	str	r3, [sp, #4]
 802005c:	4b94      	ldr	r3, [pc, #592]	; (80202b0 <mbedtls_ssl_handshake_client_step+0x314>)
 802005e:	9300      	str	r3, [sp, #0]
 8020060:	f240 332b 	movw	r3, #811	; 0x32b
 8020064:	463a      	mov	r2, r7
 8020066:	2103      	movs	r1, #3
 8020068:	4620      	mov	r0, r4
 802006a:	f7f5 fb51 	bl	8015710 <mbedtls_debug_print_msg>
    unsigned char *p = ssl->handshake->randbytes;
 802006e:	6b25      	ldr	r5, [r4, #48]	; 0x30
    t = mbedtls_time( NULL );
 8020070:	2000      	movs	r0, #0
 8020072:	f00b f885 	bl	802b180 <time>
    *p++ = (unsigned char)( t >> 24 );
 8020076:	0e03      	lsrs	r3, r0, #24
 8020078:	f885 3314 	strb.w	r3, [r5, #788]	; 0x314
    *p++ = (unsigned char)( t >> 16 );
 802007c:	0c03      	lsrs	r3, r0, #16
 802007e:	f885 3315 	strb.w	r3, [r5, #789]	; 0x315
    *p++ = (unsigned char)( t >>  8 );
 8020082:	0a03      	lsrs	r3, r0, #8
 8020084:	f885 3316 	strb.w	r3, [r5, #790]	; 0x316
    *p++ = (unsigned char)( t       );
 8020088:	f885 0317 	strb.w	r0, [r5, #791]	; 0x317
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 802008c:	9002      	str	r0, [sp, #8]
 802008e:	9103      	str	r1, [sp, #12]
 8020090:	4b88      	ldr	r3, [pc, #544]	; (80202b4 <mbedtls_ssl_handshake_client_step+0x318>)
 8020092:	9300      	str	r3, [sp, #0]
 8020094:	f240 23bf 	movw	r3, #703	; 0x2bf
 8020098:	463a      	mov	r2, r7
 802009a:	2103      	movs	r1, #3
 802009c:	4620      	mov	r0, r4
 802009e:	f7f5 fb37 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 80200a2:	6823      	ldr	r3, [r4, #0]
 80200a4:	699f      	ldr	r7, [r3, #24]
 80200a6:	221c      	movs	r2, #28
 80200a8:	f505 7146 	add.w	r1, r5, #792	; 0x318
 80200ac:	69d8      	ldr	r0, [r3, #28]
 80200ae:	47b8      	blx	r7
    if( ( ret = ssl_generate_random( ssl ) ) != 0 )
 80200b0:	4605      	mov	r5, r0
 80200b2:	2800      	cmp	r0, #0
 80200b4:	f040 808e 	bne.w	80201d4 <mbedtls_ssl_handshake_client_step+0x238>
    p += 2;
 80200b8:	1db2      	adds	r2, r6, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 80200ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80200bc:	f8d3 c314 	ldr.w	ip, [r3, #788]	; 0x314
 80200c0:	f8d3 7318 	ldr.w	r7, [r3, #792]	; 0x318
 80200c4:	f8d3 031c 	ldr.w	r0, [r3, #796]	; 0x31c
 80200c8:	f8d3 1320 	ldr.w	r1, [r3, #800]	; 0x320
 80200cc:	f8c6 c006 	str.w	ip, [r6, #6]
 80200d0:	f8c6 700a 	str.w	r7, [r6, #10]
 80200d4:	f8c6 000e 	str.w	r0, [r6, #14]
 80200d8:	f8c6 1012 	str.w	r1, [r6, #18]
 80200dc:	f8d3 c324 	ldr.w	ip, [r3, #804]	; 0x324
 80200e0:	f8d3 7328 	ldr.w	r7, [r3, #808]	; 0x328
 80200e4:	f8d3 032c 	ldr.w	r0, [r3, #812]	; 0x32c
 80200e8:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 80200ec:	f8c6 c016 	str.w	ip, [r6, #22]
 80200f0:	f8c6 701a 	str.w	r7, [r6, #26]
 80200f4:	f8c6 001e 	str.w	r0, [r6, #30]
 80200f8:	f8c6 1022 	str.w	r1, [r6, #34]	; 0x22
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 80200fc:	2320      	movs	r3, #32
 80200fe:	9302      	str	r3, [sp, #8]
 8020100:	9201      	str	r2, [sp, #4]
 8020102:	4b6d      	ldr	r3, [pc, #436]	; (80202b8 <mbedtls_ssl_handshake_client_step+0x31c>)
 8020104:	9300      	str	r3, [sp, #0]
 8020106:	f240 3335 	movw	r3, #821	; 0x335
 802010a:	4a67      	ldr	r2, [pc, #412]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 802010c:	2103      	movs	r1, #3
 802010e:	4620      	mov	r0, r4
 8020110:	f7f5 fb64 	bl	80157dc <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 8020114:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8020116:	691f      	ldr	r7, [r3, #16]
    if( n < 16 || n > 32 ||
 8020118:	f1a7 0310 	sub.w	r3, r7, #16
 802011c:	2b10      	cmp	r3, #16
 802011e:	f201 84a9 	bhi.w	8021a74 <mbedtls_ssl_handshake_client_step+0x1ad8>
        ssl->handshake->resume == 0 )
 8020122:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if( n < 16 || n > 32 ||
 8020124:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8020128:	2b00      	cmp	r3, #0
 802012a:	f001 84a3 	beq.w	8021a74 <mbedtls_ssl_handshake_client_step+0x1ad8>
    *p++ = (unsigned char) n;
 802012e:	f106 0e27 	add.w	lr, r6, #39	; 0x27
 8020132:	f886 7026 	strb.w	r7, [r6, #38]	; 0x26
    for( i = 0; i < n; i++ )
 8020136:	f107 0027 	add.w	r0, r7, #39	; 0x27
 802013a:	4430      	add	r0, r6
    *p++ = (unsigned char) n;
 802013c:	4673      	mov	r3, lr
 802013e:	f06f 0c26 	mvn.w	ip, #38	; 0x26
 8020142:	ebac 0c06 	sub.w	ip, ip, r6
 8020146:	eb03 010c 	add.w	r1, r3, ip
        *p++ = ssl->session_negotiate->id[i];
 802014a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802014c:	440a      	add	r2, r1
 802014e:	7d12      	ldrb	r2, [r2, #20]
 8020150:	f803 2b01 	strb.w	r2, [r3], #1
    for( i = 0; i < n; i++ )
 8020154:	4283      	cmp	r3, r0
 8020156:	d1f6      	bne.n	8020146 <mbedtls_ssl_handshake_client_step+0x1aa>
 8020158:	eb0e 0b07 	add.w	fp, lr, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 802015c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80202a8 <mbedtls_ssl_handshake_client_step+0x30c>
 8020160:	9701      	str	r7, [sp, #4]
 8020162:	4b56      	ldr	r3, [pc, #344]	; (80202bc <mbedtls_ssl_handshake_client_step+0x320>)
 8020164:	9300      	str	r3, [sp, #0]
 8020166:	f240 336a 	movw	r3, #874	; 0x36a
 802016a:	4642      	mov	r2, r8
 802016c:	2103      	movs	r1, #3
 802016e:	4620      	mov	r0, r4
 8020170:	f7f5 face 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 8020174:	9702      	str	r7, [sp, #8]
 8020176:	f106 0327 	add.w	r3, r6, #39	; 0x27
 802017a:	9301      	str	r3, [sp, #4]
 802017c:	4b50      	ldr	r3, [pc, #320]	; (80202c0 <mbedtls_ssl_handshake_client_step+0x324>)
 802017e:	9300      	str	r3, [sp, #0]
 8020180:	f240 336b 	movw	r3, #875	; 0x36b
 8020184:	4642      	mov	r2, r8
 8020186:	2103      	movs	r1, #3
 8020188:	4620      	mov	r0, r4
 802018a:	f7f5 fb27 	bl	80157dc <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 802018e:	6823      	ldr	r3, [r4, #0]
 8020190:	68e2      	ldr	r2, [r4, #12]
 8020192:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    p += 2;
 8020196:	f10b 0702 	add.w	r7, fp, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
 802019a:	f8d8 0000 	ldr.w	r0, [r8]
 802019e:	b320      	cbz	r0, 80201ea <mbedtls_ssl_handshake_client_step+0x24e>
    n = 0;
 80201a0:	f04f 0a00 	mov.w	sl, #0
 80201a4:	f001 bc55 	b.w	8021a52 <mbedtls_ssl_handshake_client_step+0x1ab6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 80201a8:	4b46      	ldr	r3, [pc, #280]	; (80202c4 <mbedtls_ssl_handshake_client_step+0x328>)
 80201aa:	9300      	str	r3, [sp, #0]
 80201ac:	f240 330a 	movw	r3, #778	; 0x30a
 80201b0:	4a3d      	ldr	r2, [pc, #244]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 80201b2:	2101      	movs	r1, #1
 80201b4:	4620      	mov	r0, r4
 80201b6:	f7f5 faab 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80201ba:	4d43      	ldr	r5, [pc, #268]	; (80202c8 <mbedtls_ssl_handshake_client_step+0x32c>)
 80201bc:	e721      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 80201be:	4b43      	ldr	r3, [pc, #268]	; (80202cc <mbedtls_ssl_handshake_client_step+0x330>)
 80201c0:	9300      	str	r3, [sp, #0]
 80201c2:	f44f 7346 	mov.w	r3, #792	; 0x318
 80201c6:	4a38      	ldr	r2, [pc, #224]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 80201c8:	2101      	movs	r1, #1
 80201ca:	4620      	mov	r0, r4
 80201cc:	f7f5 faa0 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80201d0:	4d3f      	ldr	r5, [pc, #252]	; (80202d0 <mbedtls_ssl_handshake_client_step+0x334>)
 80201d2:	e716      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 80201d4:	9001      	str	r0, [sp, #4]
 80201d6:	4b3f      	ldr	r3, [pc, #252]	; (80202d4 <mbedtls_ssl_handshake_client_step+0x338>)
 80201d8:	9300      	str	r3, [sp, #0]
 80201da:	f44f 734c 	mov.w	r3, #816	; 0x330
 80201de:	4a32      	ldr	r2, [pc, #200]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 80201e0:	2101      	movs	r1, #1
 80201e2:	4620      	mov	r0, r4
 80201e4:	f7f5 fac6 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80201e8:	e70b      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    int uses_ec = 0;
 80201ea:	4605      	mov	r5, r0
    n = 0;
 80201ec:	f04f 0a00 	mov.w	sl, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites (excluding SCSVs)", n ) );
 80201f0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80202a8 <mbedtls_ssl_handshake_client_step+0x30c>
 80201f4:	f8cd a004 	str.w	sl, [sp, #4]
 80201f8:	4b37      	ldr	r3, [pc, #220]	; (80202d8 <mbedtls_ssl_handshake_client_step+0x33c>)
 80201fa:	9300      	str	r3, [sp, #0]
 80201fc:	f240 33a6 	movw	r3, #934	; 0x3a6
 8020200:	464a      	mov	r2, r9
 8020202:	2103      	movs	r1, #3
 8020204:	4620      	mov	r0, r4
 8020206:	f7f5 fa83 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
 802020a:	4b34      	ldr	r3, [pc, #208]	; (80202dc <mbedtls_ssl_handshake_client_step+0x340>)
 802020c:	9300      	str	r3, [sp, #0]
 802020e:	f240 33af 	movw	r3, #943	; 0x3af
 8020212:	464a      	mov	r2, r9
 8020214:	2103      	movs	r1, #3
 8020216:	4620      	mov	r0, r4
 8020218:	f7f5 fa7a 	bl	8015710 <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 802021c:	f04f 0800 	mov.w	r8, #0
 8020220:	f887 8000 	strb.w	r8, [r7]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 8020224:	23ff      	movs	r3, #255	; 0xff
 8020226:	707b      	strb	r3, [r7, #1]
        n++;
 8020228:	f10a 0a01 	add.w	sl, sl, #1
    *q++ = (unsigned char)( n >> 7 );
 802022c:	ea4f 13da 	mov.w	r3, sl, lsr #7
 8020230:	f88b 3000 	strb.w	r3, [fp]
    *q++ = (unsigned char)( n << 1 );
 8020234:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8020238:	f88b a001 	strb.w	sl, [fp, #1]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 802023c:	f04f 0a01 	mov.w	sl, #1
 8020240:	f8cd a004 	str.w	sl, [sp, #4]
 8020244:	4b26      	ldr	r3, [pc, #152]	; (80202e0 <mbedtls_ssl_handshake_client_step+0x344>)
 8020246:	9300      	str	r3, [sp, #0]
 8020248:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 802024c:	464a      	mov	r2, r9
 802024e:	2103      	movs	r1, #3
 8020250:	4620      	mov	r0, r4
 8020252:	f7f5 fa5d 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 8020256:	f8cd 8004 	str.w	r8, [sp, #4]
 802025a:	4b22      	ldr	r3, [pc, #136]	; (80202e4 <mbedtls_ssl_handshake_client_step+0x348>)
 802025c:	9300      	str	r3, [sp, #0]
 802025e:	f240 33e1 	movw	r3, #993	; 0x3e1
 8020262:	464a      	mov	r2, r9
 8020264:	2103      	movs	r1, #3
 8020266:	4620      	mov	r0, r4
 8020268:	f7f5 fa52 	bl	8015710 <mbedtls_debug_print_msg>
        *p++ = 1;
 802026c:	f887 a002 	strb.w	sl, [r7, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 8020270:	f107 0904 	add.w	r9, r7, #4
 8020274:	f887 8003 	strb.w	r8, [r7, #3]
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 8020278:	f107 0a06 	add.w	sl, r7, #6
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 802027c:	6823      	ldr	r3, [r4, #0]
 802027e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8020282:	2b03      	cmp	r3, #3
 8020284:	d032      	beq.n	80202ec <mbedtls_ssl_handshake_client_step+0x350>
    if( uses_ec )
 8020286:	2d00      	cmp	r5, #0
 8020288:	f040 8093 	bne.w	80203b2 <mbedtls_ssl_handshake_client_step+0x416>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 802028c:	2300      	movs	r3, #0
 802028e:	9301      	str	r3, [sp, #4]
 8020290:	4b15      	ldr	r3, [pc, #84]	; (80202e8 <mbedtls_ssl_handshake_client_step+0x34c>)
 8020292:	9300      	str	r3, [sp, #0]
 8020294:	f240 432e 	movw	r3, #1070	; 0x42e
 8020298:	4a03      	ldr	r2, [pc, #12]	; (80202a8 <mbedtls_ssl_handshake_client_step+0x30c>)
 802029a:	2103      	movs	r1, #3
 802029c:	4620      	mov	r0, r4
 802029e:	f7f5 fa37 	bl	8015710 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 80202a2:	e131      	b.n	8020508 <mbedtls_ssl_handshake_client_step+0x56c>
 80202a4:	08033a40 	.word	0x08033a40
 80202a8:	08033a08 	.word	0x08033a08
 80202ac:	08033a54 	.word	0x08033a54
 80202b0:	08033ad4 	.word	0x08033ad4
 80202b4:	08033af8 	.word	0x08033af8
 80202b8:	08033b2c 	.word	0x08033b2c
 80202bc:	08033b48 	.word	0x08033b48
 80202c0:	08033b6c 	.word	0x08033b6c
 80202c4:	08033a6c 	.word	0x08033a6c
 80202c8:	ffff8c00 	.word	0xffff8c00
 80202cc:	08033a7c 	.word	0x08033a7c
 80202d0:	ffff8f00 	.word	0xffff8f00
 80202d4:	08033b18 	.word	0x08033b18
 80202d8:	08033b88 	.word	0x08033b88
 80202dc:	08033bbc 	.word	0x08033bbc
 80202e0:	08033be4 	.word	0x08033be4
 80202e4:	08033c04 	.word	0x08033c04
 80202e8:	08033d04 	.word	0x08033d04
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80202ec:	f8d4 b098 	ldr.w	fp, [r4, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 80202f0:	4ba7      	ldr	r3, [pc, #668]	; (8020590 <mbedtls_ssl_handshake_client_step+0x5f4>)
 80202f2:	9300      	str	r3, [sp, #0]
 80202f4:	23ba      	movs	r3, #186	; 0xba
 80202f6:	4aa7      	ldr	r2, [pc, #668]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 80202f8:	2103      	movs	r1, #3
 80202fa:	4620      	mov	r0, r4
 80202fc:	f7f5 fa08 	bl	8015710 <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8020300:	6823      	ldr	r3, [r4, #0]
 8020302:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
 8020306:	f8d8 0000 	ldr.w	r0, [r8]
 802030a:	2800      	cmp	r0, #0
 802030c:	d046      	beq.n	802039c <mbedtls_ssl_handshake_client_step+0x400>
 802030e:	4643      	mov	r3, r8
 8020310:	f1c8 0c04 	rsb	ip, r8, #4
        sig_alg_len += 2;
 8020314:	eb03 010c 	add.w	r1, r3, ip
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8020318:	f853 2f04 	ldr.w	r2, [r3, #4]!
 802031c:	2a00      	cmp	r2, #0
 802031e:	d1f9      	bne.n	8020314 <mbedtls_ssl_handshake_client_step+0x378>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 8020320:	f50b 5b00 	add.w	fp, fp, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 8020324:	45da      	cmp	sl, fp
 8020326:	d83b      	bhi.n	80203a0 <mbedtls_ssl_handshake_client_step+0x404>
 8020328:	ebab 0b0a 	sub.w	fp, fp, sl
 802032c:	3106      	adds	r1, #6
 802032e:	458b      	cmp	fp, r1
 8020330:	d336      	bcc.n	80203a0 <mbedtls_ssl_handshake_client_step+0x404>
    sig_alg_len = 0;
 8020332:	2300      	movs	r3, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8020334:	b1f8      	cbz	r0, 8020376 <mbedtls_ssl_handshake_client_step+0x3da>
 8020336:	46bb      	mov	fp, r7
 8020338:	f1c7 0304 	rsb	r3, r7, #4
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 802033c:	9608      	str	r6, [sp, #32]
 802033e:	461e      	mov	r6, r3
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8020340:	f006 fa73 	bl	802682a <mbedtls_ssl_hash_from_md_alg>
 8020344:	f88b 000c 	strb.w	r0, [fp, #12]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 8020348:	f04f 0303 	mov.w	r3, #3
 802034c:	f88b 300d 	strb.w	r3, [fp, #13]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8020350:	f8d8 0000 	ldr.w	r0, [r8]
 8020354:	f006 fa69 	bl	802682a <mbedtls_ssl_hash_from_md_alg>
 8020358:	f88b 000e 	strb.w	r0, [fp, #14]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 802035c:	eb06 030b 	add.w	r3, r6, fp
 8020360:	f04f 0201 	mov.w	r2, #1
 8020364:	f88b 200f 	strb.w	r2, [fp, #15]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8020368:	f858 0f04 	ldr.w	r0, [r8, #4]!
 802036c:	f10b 0b04 	add.w	fp, fp, #4
 8020370:	2800      	cmp	r0, #0
 8020372:	d1e5      	bne.n	8020340 <mbedtls_ssl_handshake_client_step+0x3a4>
 8020374:	9e08      	ldr	r6, [sp, #32]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 8020376:	2200      	movs	r2, #0
 8020378:	71ba      	strb	r2, [r7, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 802037a:	220d      	movs	r2, #13
 802037c:	71fa      	strb	r2, [r7, #7]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 802037e:	1c9a      	adds	r2, r3, #2
 8020380:	0a12      	lsrs	r2, r2, #8
 8020382:	723a      	strb	r2, [r7, #8]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 8020384:	b2da      	uxtb	r2, r3
 8020386:	1c91      	adds	r1, r2, #2
 8020388:	7279      	strb	r1, [r7, #9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 802038a:	0a19      	lsrs	r1, r3, #8
 802038c:	72b9      	strb	r1, [r7, #10]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 802038e:	72fa      	strb	r2, [r7, #11]
    *olen = 6 + sig_alg_len;
 8020390:	f103 0806 	add.w	r8, r3, #6
    if( uses_ec )
 8020394:	2d00      	cmp	r5, #0
 8020396:	f000 80a2 	beq.w	80204de <mbedtls_ssl_handshake_client_step+0x542>
 802039a:	e00c      	b.n	80203b6 <mbedtls_ssl_handshake_client_step+0x41a>
    size_t sig_alg_len = 0;
 802039c:	2100      	movs	r1, #0
 802039e:	e7bf      	b.n	8020320 <mbedtls_ssl_handshake_client_step+0x384>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 80203a0:	4b7d      	ldr	r3, [pc, #500]	; (8020598 <mbedtls_ssl_handshake_client_step+0x5fc>)
 80203a2:	9300      	str	r3, [sp, #0]
 80203a4:	23c8      	movs	r3, #200	; 0xc8
 80203a6:	4a7b      	ldr	r2, [pc, #492]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 80203a8:	2101      	movs	r1, #1
 80203aa:	4620      	mov	r0, r4
 80203ac:	f7f5 f9b0 	bl	8015710 <mbedtls_debug_print_msg>
        return;
 80203b0:	e769      	b.n	8020286 <mbedtls_ssl_handshake_client_step+0x2ea>
    if( uses_ec )
 80203b2:	f04f 0800 	mov.w	r8, #0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80203b6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80203ba:	9308      	str	r3, [sp, #32]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 80203bc:	4b77      	ldr	r3, [pc, #476]	; (802059c <mbedtls_ssl_handshake_client_step+0x600>)
 80203be:	9300      	str	r3, [sp, #0]
 80203c0:	f240 130f 	movw	r3, #271	; 0x10f
 80203c4:	4a73      	ldr	r2, [pc, #460]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 80203c6:	2103      	movs	r1, #3
 80203c8:	4620      	mov	r0, r4
 80203ca:	f7f5 f9a1 	bl	8015710 <mbedtls_debug_print_msg>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 80203ce:	6823      	ldr	r3, [r4, #0]
 80203d0:	f8d3 b048 	ldr.w	fp, [r3, #72]	; 0x48
 80203d4:	f89b 0000 	ldrb.w	r0, [fp]
 80203d8:	2800      	cmp	r0, #0
 80203da:	f000 80b2 	beq.w	8020542 <mbedtls_ssl_handshake_client_step+0x5a6>
    size_t elliptic_curve_len = 0;
 80203de:	2500      	movs	r5, #0
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 80203e0:	f7f6 fda6 	bl	8016f30 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
 80203e4:	2800      	cmp	r0, #0
 80203e6:	d045      	beq.n	8020474 <mbedtls_ssl_handshake_client_step+0x4d8>
        elliptic_curve_len += 2;
 80203e8:	3502      	adds	r5, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 80203ea:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
 80203ee:	2800      	cmp	r0, #0
 80203f0:	d1f6      	bne.n	80203e0 <mbedtls_ssl_handshake_client_step+0x444>
        ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 80203f2:	f108 0302 	add.w	r3, r8, #2
 80203f6:	eb09 0203 	add.w	r2, r9, r3
 80203fa:	9209      	str	r2, [sp, #36]	; 0x24
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 80203fc:	9b08      	ldr	r3, [sp, #32]
 80203fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 8020402:	429a      	cmp	r2, r3
 8020404:	f200 809f 	bhi.w	8020546 <mbedtls_ssl_handshake_client_step+0x5aa>
 8020408:	1a9b      	subs	r3, r3, r2
 802040a:	3506      	adds	r5, #6
 802040c:	42ab      	cmp	r3, r5
 802040e:	f0c0 809a 	bcc.w	8020546 <mbedtls_ssl_handshake_client_step+0x5aa>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 8020412:	6823      	ldr	r3, [r4, #0]
 8020414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020416:	7818      	ldrb	r0, [r3, #0]
 8020418:	2800      	cmp	r0, #0
 802041a:	f000 809f 	beq.w	802055c <mbedtls_ssl_handshake_client_step+0x5c0>
 802041e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    elliptic_curve_len = 0;
 8020422:	2500      	movs	r5, #0
 8020424:	9608      	str	r6, [sp, #32]
 8020426:	461e      	mov	r6, r3
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 8020428:	f7f6 fd82 	bl	8016f30 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 802042c:	8843      	ldrh	r3, [r0, #2]
 802042e:	0a1b      	lsrs	r3, r3, #8
 8020430:	f88b 3006 	strb.w	r3, [fp, #6]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 8020434:	462a      	mov	r2, r5
 8020436:	3502      	adds	r5, #2
 8020438:	8843      	ldrh	r3, [r0, #2]
 802043a:	f88b 3007 	strb.w	r3, [fp, #7]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 802043e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8020442:	f10b 0b02 	add.w	fp, fp, #2
 8020446:	2800      	cmp	r0, #0
 8020448:	d1ee      	bne.n	8020428 <mbedtls_ssl_handshake_client_step+0x48c>
 802044a:	9e08      	ldr	r6, [sp, #32]
    if( elliptic_curve_len == 0 )
 802044c:	b1e5      	cbz	r5, 8020488 <mbedtls_ssl_handshake_client_step+0x4ec>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 802044e:	2300      	movs	r3, #0
 8020450:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020452:	700b      	strb	r3, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 8020454:	230a      	movs	r3, #10
 8020456:	704b      	strb	r3, [r1, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 8020458:	1d13      	adds	r3, r2, #4
 802045a:	0a1b      	lsrs	r3, r3, #8
 802045c:	708b      	strb	r3, [r1, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 802045e:	b2eb      	uxtb	r3, r5
 8020460:	f103 0c02 	add.w	ip, r3, #2
 8020464:	f881 c003 	strb.w	ip, [r1, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 8020468:	0a2d      	lsrs	r5, r5, #8
 802046a:	710d      	strb	r5, [r1, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 802046c:	714b      	strb	r3, [r1, #5]
    *olen = 6 + elliptic_curve_len;
 802046e:	f102 0508 	add.w	r5, r2, #8
 8020472:	e009      	b.n	8020488 <mbedtls_ssl_handshake_client_step+0x4ec>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
 8020474:	4b4a      	ldr	r3, [pc, #296]	; (80205a0 <mbedtls_ssl_handshake_client_step+0x604>)
 8020476:	9300      	str	r3, [sp, #0]
 8020478:	f44f 738e 	mov.w	r3, #284	; 0x11c
 802047c:	4a45      	ldr	r2, [pc, #276]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 802047e:	2101      	movs	r1, #1
 8020480:	4620      	mov	r0, r4
 8020482:	f7f5 f945 	bl	8015710 <mbedtls_debug_print_msg>
    *olen = 0;
 8020486:	2500      	movs	r5, #0
        ext_len += olen;
 8020488:	4445      	add	r5, r8
        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 802048a:	f105 0b02 	add.w	fp, r5, #2
 802048e:	44cb      	add	fp, r9
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 8020490:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8020494:	f503 5800 	add.w	r8, r3, #8192	; 0x2000
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 8020498:	4b42      	ldr	r3, [pc, #264]	; (80205a4 <mbedtls_ssl_handshake_client_step+0x608>)
 802049a:	9300      	str	r3, [sp, #0]
 802049c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80204a0:	4a3c      	ldr	r2, [pc, #240]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 80204a2:	2103      	movs	r1, #3
 80204a4:	4620      	mov	r0, r4
 80204a6:	f7f5 f933 	bl	8015710 <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 6 )
 80204aa:	45c3      	cmp	fp, r8
 80204ac:	d858      	bhi.n	8020560 <mbedtls_ssl_handshake_client_step+0x5c4>
 80204ae:	eba8 080b 	sub.w	r8, r8, fp
 80204b2:	f1b8 0f05 	cmp.w	r8, #5
 80204b6:	d953      	bls.n	8020560 <mbedtls_ssl_handshake_client_step+0x5c4>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 80204b8:	2300      	movs	r3, #0
 80204ba:	f88b 3000 	strb.w	r3, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 80204be:	220b      	movs	r2, #11
 80204c0:	f88b 2001 	strb.w	r2, [fp, #1]
    *p++ = 0x00;
 80204c4:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = 2;
 80204c8:	2202      	movs	r2, #2
 80204ca:	f88b 2003 	strb.w	r2, [fp, #3]
    *p++ = 1;
 80204ce:	2201      	movs	r2, #1
 80204d0:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 80204d4:	f88b 3005 	strb.w	r3, [fp, #5]
    *olen = 6;
 80204d8:	f04f 0806 	mov.w	r8, #6
        ext_len += olen;
 80204dc:	44a8      	add	r8, r5
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 80204de:	f8cd 8004 	str.w	r8, [sp, #4]
 80204e2:	4b31      	ldr	r3, [pc, #196]	; (80205a8 <mbedtls_ssl_handshake_client_step+0x60c>)
 80204e4:	9300      	str	r3, [sp, #0]
 80204e6:	f240 432e 	movw	r3, #1070	; 0x42e
 80204ea:	4a2a      	ldr	r2, [pc, #168]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 80204ec:	2103      	movs	r1, #3
 80204ee:	4620      	mov	r0, r4
 80204f0:	f7f5 f90e 	bl	8015710 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 80204f4:	f1b8 0f00 	cmp.w	r8, #0
 80204f8:	d006      	beq.n	8020508 <mbedtls_ssl_handshake_client_step+0x56c>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 80204fa:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80204fe:	713b      	strb	r3, [r7, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8020500:	f887 8005 	strb.w	r8, [r7, #5]
        p += ext_len;
 8020504:	eb0a 0908 	add.w	r9, sl, r8
    ssl->out_msglen  = p - buf;
 8020508:	eba9 0606 	sub.w	r6, r9, r6
 802050c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8020510:	2316      	movs	r3, #22
 8020512:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8020516:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802051a:	2201      	movs	r2, #1
 802051c:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 802051e:	6863      	ldr	r3, [r4, #4]
 8020520:	4413      	add	r3, r2
 8020522:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 8020524:	4620      	mov	r0, r4
 8020526:	f004 fb31 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 802052a:	4605      	mov	r5, r0
 802052c:	bb20      	cbnz	r0, 8020578 <mbedtls_ssl_handshake_client_step+0x5dc>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 802052e:	4b1f      	ldr	r3, [pc, #124]	; (80205ac <mbedtls_ssl_handshake_client_step+0x610>)
 8020530:	9300      	str	r3, [sp, #0]
 8020532:	f240 4352 	movw	r3, #1106	; 0x452
 8020536:	4a17      	ldr	r2, [pc, #92]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 8020538:	2102      	movs	r1, #2
 802053a:	4620      	mov	r0, r4
 802053c:	f7f5 f8e8 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 8020540:	e55f      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    size_t elliptic_curve_len = 0;
 8020542:	2500      	movs	r5, #0
 8020544:	e755      	b.n	80203f2 <mbedtls_ssl_handshake_client_step+0x456>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8020546:	4b14      	ldr	r3, [pc, #80]	; (8020598 <mbedtls_ssl_handshake_client_step+0x5fc>)
 8020548:	9300      	str	r3, [sp, #0]
 802054a:	f240 1325 	movw	r3, #293	; 0x125
 802054e:	4a11      	ldr	r2, [pc, #68]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 8020550:	2101      	movs	r1, #1
 8020552:	4620      	mov	r0, r4
 8020554:	f7f5 f8dc 	bl	8015710 <mbedtls_debug_print_msg>
    *olen = 0;
 8020558:	2500      	movs	r5, #0
        return;
 802055a:	e795      	b.n	8020488 <mbedtls_ssl_handshake_client_step+0x4ec>
    *olen = 0;
 802055c:	2500      	movs	r5, #0
 802055e:	e793      	b.n	8020488 <mbedtls_ssl_handshake_client_step+0x4ec>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 8020560:	4b0d      	ldr	r3, [pc, #52]	; (8020598 <mbedtls_ssl_handshake_client_step+0x5fc>)
 8020562:	9300      	str	r3, [sp, #0]
 8020564:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8020568:	4a0a      	ldr	r2, [pc, #40]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 802056a:	2101      	movs	r1, #1
 802056c:	4620      	mov	r0, r4
 802056e:	f7f5 f8cf 	bl	8015710 <mbedtls_debug_print_msg>
    *olen = 0;
 8020572:	f04f 0800 	mov.w	r8, #0
        return;
 8020576:	e7b1      	b.n	80204dc <mbedtls_ssl_handshake_client_step+0x540>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 8020578:	9001      	str	r0, [sp, #4]
 802057a:	4b0d      	ldr	r3, [pc, #52]	; (80205b0 <mbedtls_ssl_handshake_client_step+0x614>)
 802057c:	9300      	str	r3, [sp, #0]
 802057e:	f240 4345 	movw	r3, #1093	; 0x445
 8020582:	4a04      	ldr	r2, [pc, #16]	; (8020594 <mbedtls_ssl_handshake_client_step+0x5f8>)
 8020584:	2101      	movs	r1, #1
 8020586:	4620      	mov	r0, r4
 8020588:	f7f5 f8f4 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802058c:	e539      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 802058e:	bf00      	nop
 8020590:	08033c24 	.word	0x08033c24
 8020594:	08033a08 	.word	0x08033a08
 8020598:	08033c58 	.word	0x08033c58
 802059c:	08033c6c 	.word	0x08033c6c
 80205a0:	08033ca8 	.word	0x08033ca8
 80205a4:	08033ccc 	.word	0x08033ccc
 80205a8:	08033d04 	.word	0x08033d04
 80205ac:	08033d50 	.word	0x08033d50
 80205b0:	08033d30 	.word	0x08033d30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 80205b4:	4b8a      	ldr	r3, [pc, #552]	; (80207e0 <mbedtls_ssl_handshake_client_step+0x844>)
 80205b6:	9300      	str	r3, [sp, #0]
 80205b8:	f240 53db 	movw	r3, #1499	; 0x5db
 80205bc:	4a89      	ldr	r2, [pc, #548]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 80205be:	2102      	movs	r1, #2
 80205c0:	4620      	mov	r0, r4
 80205c2:	f7f5 f8a5 	bl	8015710 <mbedtls_debug_print_msg>
    buf = ssl->in_msg;
 80205c6:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80205ca:	2101      	movs	r1, #1
 80205cc:	4620      	mov	r0, r4
 80205ce:	f004 fcc3 	bl	8024f58 <mbedtls_ssl_read_record>
 80205d2:	4605      	mov	r5, r0
 80205d4:	2800      	cmp	r0, #0
 80205d6:	f040 80ab 	bne.w	8020730 <mbedtls_ssl_handshake_client_step+0x794>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80205da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80205dc:	2b16      	cmp	r3, #22
 80205de:	f040 80b2 	bne.w	8020746 <mbedtls_ssl_handshake_client_step+0x7aa>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80205e2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80205e4:	2b29      	cmp	r3, #41	; 0x29
 80205e6:	f240 80be 	bls.w	8020766 <mbedtls_ssl_handshake_client_step+0x7ca>
 80205ea:	f898 3000 	ldrb.w	r3, [r8]
 80205ee:	2b02      	cmp	r3, #2
 80205f0:	f040 80b9 	bne.w	8020766 <mbedtls_ssl_handshake_client_step+0x7ca>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 80205f4:	f108 0904 	add.w	r9, r8, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 80205f8:	2302      	movs	r3, #2
 80205fa:	9302      	str	r3, [sp, #8]
 80205fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8020600:	4b79      	ldr	r3, [pc, #484]	; (80207e8 <mbedtls_ssl_handshake_client_step+0x84c>)
 8020602:	9300      	str	r3, [sp, #0]
 8020604:	f240 632b 	movw	r3, #1579	; 0x62b
 8020608:	4a76      	ldr	r2, [pc, #472]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 802060a:	2103      	movs	r1, #3
 802060c:	4620      	mov	r0, r4
 802060e:	f7f5 f8e5 	bl	80157dc <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 8020612:	4621      	mov	r1, r4
 8020614:	f851 3b0c 	ldr.w	r3, [r1], #12
 8020618:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 802061c:	464b      	mov	r3, r9
 802061e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8020622:	f104 0008 	add.w	r0, r4, #8
 8020626:	f006 fbd4 	bl	8026dd2 <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 802062a:	68a2      	ldr	r2, [r4, #8]
 802062c:	6823      	ldr	r3, [r4, #0]
 802062e:	f893 006e 	ldrb.w	r0, [r3, #110]	; 0x6e
 8020632:	4282      	cmp	r2, r0
 8020634:	f2c0 80a7 	blt.w	8020786 <mbedtls_ssl_handshake_client_step+0x7ea>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8020638:	68e1      	ldr	r1, [r4, #12]
 802063a:	f893 606f 	ldrb.w	r6, [r3, #111]	; 0x6f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 802063e:	42b1      	cmp	r1, r6
 8020640:	f2c0 80a1 	blt.w	8020786 <mbedtls_ssl_handshake_client_step+0x7ea>
        ssl->major_ver > ssl->conf->max_major_ver ||
 8020644:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 8020648:	42b2      	cmp	r2, r6
 802064a:	f300 809c 	bgt.w	8020786 <mbedtls_ssl_handshake_client_step+0x7ea>
        ssl->minor_ver > ssl->conf->max_minor_ver )
 802064e:	f893 606d 	ldrb.w	r6, [r3, #109]	; 0x6d
        ssl->major_ver > ssl->conf->max_major_ver ||
 8020652:	42b1      	cmp	r1, r6
 8020654:	f300 8097 	bgt.w	8020786 <mbedtls_ssl_handshake_client_step+0x7ea>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu",
 8020658:	4f62      	ldr	r7, [pc, #392]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 802065a:	f898 2006 	ldrb.w	r2, [r8, #6]
 802065e:	f898 3007 	ldrb.w	r3, [r8, #7]
 8020662:	041b      	lsls	r3, r3, #16
 8020664:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8020668:	f898 2009 	ldrb.w	r2, [r8, #9]
 802066c:	4313      	orrs	r3, r2
 802066e:	f898 2008 	ldrb.w	r2, [r8, #8]
 8020672:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020676:	9301      	str	r3, [sp, #4]
 8020678:	4b5c      	ldr	r3, [pc, #368]	; (80207ec <mbedtls_ssl_handshake_client_step+0x850>)
 802067a:	9300      	str	r3, [sp, #0]
 802067c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8020680:	463a      	mov	r2, r7
 8020682:	2103      	movs	r1, #3
 8020684:	4620      	mov	r0, r4
 8020686:	f7f5 f843 	bl	8015710 <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 802068a:	4643      	mov	r3, r8
 802068c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802068e:	f853 cf06 	ldr.w	ip, [r3, #6]!
 8020692:	685e      	ldr	r6, [r3, #4]
 8020694:	6898      	ldr	r0, [r3, #8]
 8020696:	68d9      	ldr	r1, [r3, #12]
 8020698:	f8c2 c334 	str.w	ip, [r2, #820]	; 0x334
 802069c:	f8c2 6338 	str.w	r6, [r2, #824]	; 0x338
 80206a0:	f8c2 033c 	str.w	r0, [r2, #828]	; 0x33c
 80206a4:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
 80206a8:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80206ac:	695e      	ldr	r6, [r3, #20]
 80206ae:	6998      	ldr	r0, [r3, #24]
 80206b0:	69d9      	ldr	r1, [r3, #28]
 80206b2:	f8c2 c344 	str.w	ip, [r2, #836]	; 0x344
 80206b6:	f8c2 6348 	str.w	r6, [r2, #840]	; 0x348
 80206ba:	f8c2 034c 	str.w	r0, [r2, #844]	; 0x34c
 80206be:	f8c2 1350 	str.w	r1, [r2, #848]	; 0x350
    n = buf[34];
 80206c2:	f898 6026 	ldrb.w	r6, [r8, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 80206c6:	2220      	movs	r2, #32
 80206c8:	9202      	str	r2, [sp, #8]
 80206ca:	9301      	str	r3, [sp, #4]
 80206cc:	4b48      	ldr	r3, [pc, #288]	; (80207f0 <mbedtls_ssl_handshake_client_step+0x854>)
 80206ce:	9300      	str	r3, [sp, #0]
 80206d0:	f240 634a 	movw	r3, #1610	; 0x64a
 80206d4:	463a      	mov	r2, r7
 80206d6:	2103      	movs	r1, #3
 80206d8:	4620      	mov	r0, r4
 80206da:	f7f5 f87f 	bl	80157dc <mbedtls_debug_print_buf>
    if( n > 32 )
 80206de:	2e20      	cmp	r6, #32
 80206e0:	d86e      	bhi.n	80207c0 <mbedtls_ssl_handshake_client_step+0x824>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80206e2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80206e4:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80206e8:	4293      	cmp	r3, r2
 80206ea:	f240 808f 	bls.w	802080c <mbedtls_ssl_handshake_client_step+0x870>
        ext_len = ( ( buf[38 + n] <<  8 )
 80206ee:	eb09 0206 	add.w	r2, r9, r6
 80206f2:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 80206f6:	f892 7027 	ldrb.w	r7, [r2, #39]	; 0x27
 80206fa:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 80206fe:	1e7a      	subs	r2, r7, #1
 8020700:	2a02      	cmp	r2, #2
 8020702:	d905      	bls.n	8020710 <mbedtls_ssl_handshake_client_step+0x774>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 8020704:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 8020708:	443a      	add	r2, r7
        if( ( ext_len > 0 && ext_len < 4 ) ||
 802070a:	4293      	cmp	r3, r2
 802070c:	f000 8085 	beq.w	802081a <mbedtls_ssl_handshake_client_step+0x87e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020710:	4b38      	ldr	r3, [pc, #224]	; (80207f4 <mbedtls_ssl_handshake_client_step+0x858>)
 8020712:	9300      	str	r3, [sp, #0]
 8020714:	f240 635c 	movw	r3, #1628	; 0x65c
 8020718:	4a32      	ldr	r2, [pc, #200]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 802071a:	2101      	movs	r1, #1
 802071c:	4620      	mov	r0, r4
 802071e:	f7f4 fff7 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020722:	2232      	movs	r2, #50	; 0x32
 8020724:	2102      	movs	r1, #2
 8020726:	4620      	mov	r0, r4
 8020728:	f004 fbbe 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 802072c:	4d32      	ldr	r5, [pc, #200]	; (80207f8 <mbedtls_ssl_handshake_client_step+0x85c>)
 802072e:	e468      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8020730:	9001      	str	r0, [sp, #4]
 8020732:	4b32      	ldr	r3, [pc, #200]	; (80207fc <mbedtls_ssl_handshake_client_step+0x860>)
 8020734:	9300      	str	r3, [sp, #0]
 8020736:	f240 53e2 	movw	r3, #1506	; 0x5e2
 802073a:	4a2a      	ldr	r2, [pc, #168]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 802073c:	2101      	movs	r1, #1
 802073e:	4620      	mov	r0, r4
 8020740:	f7f5 f818 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8020744:	e45d      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020746:	4b2b      	ldr	r3, [pc, #172]	; (80207f4 <mbedtls_ssl_handshake_client_step+0x858>)
 8020748:	9300      	str	r3, [sp, #0]
 802074a:	f240 53fc 	movw	r3, #1532	; 0x5fc
 802074e:	4a25      	ldr	r2, [pc, #148]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 8020750:	2101      	movs	r1, #1
 8020752:	4620      	mov	r0, r4
 8020754:	f7f4 ffdc 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020758:	220a      	movs	r2, #10
 802075a:	2102      	movs	r1, #2
 802075c:	4620      	mov	r0, r4
 802075e:	f004 fba3 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8020762:	4d27      	ldr	r5, [pc, #156]	; (8020800 <mbedtls_ssl_handshake_client_step+0x864>)
 8020764:	e44d      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020766:	4b23      	ldr	r3, [pc, #140]	; (80207f4 <mbedtls_ssl_handshake_client_step+0x858>)
 8020768:	9300      	str	r3, [sp, #0]
 802076a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 802076e:	4a1d      	ldr	r2, [pc, #116]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 8020770:	2101      	movs	r1, #1
 8020772:	4620      	mov	r0, r4
 8020774:	f7f4 ffcc 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020778:	2232      	movs	r2, #50	; 0x32
 802077a:	2102      	movs	r1, #2
 802077c:	4620      	mov	r0, r4
 802077e:	f004 fb93 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020782:	4d1d      	ldr	r5, [pc, #116]	; (80207f8 <mbedtls_ssl_handshake_client_step+0x85c>)
 8020784:	e43d      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 8020786:	f893 106d 	ldrb.w	r1, [r3, #109]	; 0x6d
 802078a:	9106      	str	r1, [sp, #24]
 802078c:	f893 106c 	ldrb.w	r1, [r3, #108]	; 0x6c
 8020790:	9105      	str	r1, [sp, #20]
 8020792:	68e1      	ldr	r1, [r4, #12]
 8020794:	9104      	str	r1, [sp, #16]
 8020796:	9203      	str	r2, [sp, #12]
 8020798:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 802079c:	9302      	str	r3, [sp, #8]
 802079e:	9001      	str	r0, [sp, #4]
 80207a0:	4b18      	ldr	r3, [pc, #96]	; (8020804 <mbedtls_ssl_handshake_client_step+0x868>)
 80207a2:	9300      	str	r3, [sp, #0]
 80207a4:	f240 6334 	movw	r3, #1588	; 0x634
 80207a8:	4a0e      	ldr	r2, [pc, #56]	; (80207e4 <mbedtls_ssl_handshake_client_step+0x848>)
 80207aa:	2101      	movs	r1, #1
 80207ac:	4620      	mov	r0, r4
 80207ae:	f7f4 ffaf 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80207b2:	2246      	movs	r2, #70	; 0x46
 80207b4:	2102      	movs	r1, #2
 80207b6:	4620      	mov	r0, r4
 80207b8:	f004 fb76 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80207bc:	4d12      	ldr	r5, [pc, #72]	; (8020808 <mbedtls_ssl_handshake_client_step+0x86c>)
 80207be:	e420      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80207c0:	4b0c      	ldr	r3, [pc, #48]	; (80207f4 <mbedtls_ssl_handshake_client_step+0x858>)
 80207c2:	9300      	str	r3, [sp, #0]
 80207c4:	f240 634e 	movw	r3, #1614	; 0x64e
 80207c8:	463a      	mov	r2, r7
 80207ca:	2101      	movs	r1, #1
 80207cc:	4620      	mov	r0, r4
 80207ce:	f7f4 ff9f 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80207d2:	2232      	movs	r2, #50	; 0x32
 80207d4:	2102      	movs	r1, #2
 80207d6:	4620      	mov	r0, r4
 80207d8:	f004 fb66 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80207dc:	4d06      	ldr	r5, [pc, #24]	; (80207f8 <mbedtls_ssl_handshake_client_step+0x85c>)
 80207de:	e410      	b.n	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 80207e0:	08033d68 	.word	0x08033d68
 80207e4:	08033a08 	.word	0x08033a08
 80207e8:	08033db4 	.word	0x08033db4
 80207ec:	08033e18 	.word	0x08033e18
 80207f0:	08033e38 	.word	0x08033e38
 80207f4:	08033d98 	.word	0x08033d98
 80207f8:	ffff8680 	.word	0xffff8680
 80207fc:	08033d80 	.word	0x08033d80
 8020800:	ffff8900 	.word	0xffff8900
 8020804:	08033dcc 	.word	0x08033dcc
 8020808:	ffff9180 	.word	0xffff9180
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 802080c:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 8020810:	4293      	cmp	r3, r2
        ext_len = 0;
 8020812:	bf08      	it	eq
 8020814:	2700      	moveq	r7, #0
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 8020816:	f040 80ca 	bne.w	80209ae <mbedtls_ssl_handshake_client_step+0xa12>
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 802081a:	eb09 0306 	add.w	r3, r9, r6
 802081e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8020822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8020826:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802082a:	9308      	str	r3, [sp, #32]
    comp = buf[37 + n];
 802082c:	f106 0325 	add.w	r3, r6, #37	; 0x25
 8020830:	9309      	str	r3, [sp, #36]	; 0x24
 8020832:	f819 3003 	ldrb.w	r3, [r9, r3]
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 8020836:	2b00      	cmp	r3, #0
 8020838:	f040 80ca 	bne.w	80209d0 <mbedtls_ssl_handshake_client_step+0xa34>
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 802083c:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 8020840:	9808      	ldr	r0, [sp, #32]
 8020842:	f7ff fb3b 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
 8020846:	f8ca 0000 	str.w	r0, [sl]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 802084a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802084c:	6819      	ldr	r1, [r3, #0]
 802084e:	2900      	cmp	r1, #0
 8020850:	f000 80d0 	beq.w	80209f4 <mbedtls_ssl_handshake_client_step+0xa58>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 8020854:	4620      	mov	r0, r4
 8020856:	f005 f87f 	bl	8025958 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 802085a:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>
 802085e:	9601      	str	r6, [sp, #4]
 8020860:	4bbb      	ldr	r3, [pc, #748]	; (8020b50 <mbedtls_ssl_handshake_client_step+0xbb4>)
 8020862:	9300      	str	r3, [sp, #0]
 8020864:	f240 639a 	movw	r3, #1690	; 0x69a
 8020868:	4652      	mov	r2, sl
 802086a:	2103      	movs	r1, #3
 802086c:	4620      	mov	r0, r4
 802086e:	f7f4 ff4f 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 8020872:	f108 0827 	add.w	r8, r8, #39	; 0x27
 8020876:	9602      	str	r6, [sp, #8]
 8020878:	f8cd 8004 	str.w	r8, [sp, #4]
 802087c:	4bb5      	ldr	r3, [pc, #724]	; (8020b54 <mbedtls_ssl_handshake_client_step+0xbb8>)
 802087e:	9300      	str	r3, [sp, #0]
 8020880:	f240 639b 	movw	r3, #1691	; 0x69b
 8020884:	4652      	mov	r2, sl
 8020886:	2103      	movs	r1, #3
 8020888:	4620      	mov	r0, r4
 802088a:	f7f4 ffa7 	bl	80157dc <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 802088e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8020892:	f8db 3384 	ldr.w	r3, [fp, #900]	; 0x384
 8020896:	b133      	cbz	r3, 80208a6 <mbedtls_ssl_handshake_client_step+0x90a>
 8020898:	b12e      	cbz	r6, 80208a6 <mbedtls_ssl_handshake_client_step+0x90a>
        ssl->session_negotiate->ciphersuite != i ||
 802089a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if( ssl->handshake->resume == 0 || n == 0 ||
 802089c:	6883      	ldr	r3, [r0, #8]
 802089e:	9a08      	ldr	r2, [sp, #32]
 80208a0:	429a      	cmp	r2, r3
 80208a2:	f000 80ba 	beq.w	8020a1a <mbedtls_ssl_handshake_client_step+0xa7e>
        ssl->state++;
 80208a6:	6863      	ldr	r3, [r4, #4]
 80208a8:	3301      	adds	r3, #1
 80208aa:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 80208ac:	f04f 0a00 	mov.w	sl, #0
 80208b0:	f8cb a384 	str.w	sl, [fp, #900]	; 0x384
        ssl->session_negotiate->start = mbedtls_time( NULL );
 80208b4:	f8d4 b02c 	ldr.w	fp, [r4, #44]	; 0x2c
 80208b8:	4650      	mov	r0, sl
 80208ba:	f00a fc61 	bl	802b180 <time>
 80208be:	e9cb 0100 	strd	r0, r1, [fp]
        ssl->session_negotiate->ciphersuite = i;
 80208c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80208c4:	9a08      	ldr	r2, [sp, #32]
 80208c6:	609a      	str	r2, [r3, #8]
        ssl->session_negotiate->compression = comp;
 80208c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80208ca:	f8c3 a00c 	str.w	sl, [r3, #12]
        ssl->session_negotiate->id_len = n;
 80208ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80208d0:	611e      	str	r6, [r3, #16]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80208d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80208d4:	4632      	mov	r2, r6
 80208d6:	4641      	mov	r1, r8
 80208d8:	3014      	adds	r0, #20
 80208da:	f009 fe2e 	bl	802a53a <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 80208de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80208e0:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 80208e4:	4b9c      	ldr	r3, [pc, #624]	; (8020b58 <mbedtls_ssl_handshake_client_step+0xbbc>)
 80208e6:	4a9d      	ldr	r2, [pc, #628]	; (8020b5c <mbedtls_ssl_handshake_client_step+0xbc0>)
 80208e8:	2900      	cmp	r1, #0
 80208ea:	bf08      	it	eq
 80208ec:	4613      	moveq	r3, r2
 80208ee:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>
 80208f2:	9301      	str	r3, [sp, #4]
 80208f4:	4b9a      	ldr	r3, [pc, #616]	; (8020b60 <mbedtls_ssl_handshake_client_step+0xbc4>)
 80208f6:	9300      	str	r3, [sp, #0]
 80208f8:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 80208fc:	4642      	mov	r2, r8
 80208fe:	2103      	movs	r1, #3
 8020900:	4620      	mov	r0, r4
 8020902:	f7f4 ff05 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 8020906:	9b08      	ldr	r3, [sp, #32]
 8020908:	9301      	str	r3, [sp, #4]
 802090a:	4b96      	ldr	r3, [pc, #600]	; (8020b64 <mbedtls_ssl_handshake_client_step+0xbc8>)
 802090c:	9300      	str	r3, [sp, #0]
 802090e:	f240 63c3 	movw	r3, #1731	; 0x6c3
 8020912:	4642      	mov	r2, r8
 8020914:	2103      	movs	r1, #3
 8020916:	4620      	mov	r0, r4
 8020918:	f7f4 fefa 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 802091c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802091e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8020922:	9301      	str	r3, [sp, #4]
 8020924:	4b90      	ldr	r3, [pc, #576]	; (8020b68 <mbedtls_ssl_handshake_client_step+0xbcc>)
 8020926:	9300      	str	r3, [sp, #0]
 8020928:	f240 63c4 	movw	r3, #1732	; 0x6c4
 802092c:	4642      	mov	r2, r8
 802092e:	2103      	movs	r1, #3
 8020930:	4620      	mov	r0, r4
 8020932:	f7f4 feed 	bl	8015710 <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 8020936:	6823      	ldr	r3, [r4, #0]
 8020938:	68e2      	ldr	r2, [r4, #12]
 802093a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802093e:	3a04      	subs	r2, #4
 8020940:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8020944:	2b00      	cmp	r3, #0
 8020946:	f000 8093 	beq.w	8020a70 <mbedtls_ssl_handshake_client_step+0xad4>
            ssl->session_negotiate->ciphersuite )
 802094a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802094c:	6888      	ldr	r0, [r1, #8]
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 802094e:	4283      	cmp	r3, r0
 8020950:	d1f6      	bne.n	8020940 <mbedtls_ssl_handshake_client_step+0x9a4>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 8020952:	f7ff fab3 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL )
 8020956:	2800      	cmp	r0, #0
 8020958:	f001 8093 	beq.w	8021a82 <mbedtls_ssl_handshake_client_step+0x1ae6>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 802095c:	68e2      	ldr	r2, [r4, #12]
    if( suite_info->min_minor_ver > max_minor_ver ||
 802095e:	6901      	ldr	r1, [r0, #16]
 8020960:	428a      	cmp	r2, r1
 8020962:	f2c1 808e 	blt.w	8021a82 <mbedtls_ssl_handshake_client_step+0x1ae6>
 8020966:	6981      	ldr	r1, [r0, #24]
 8020968:	428a      	cmp	r2, r1
 802096a:	f301 808a 	bgt.w	8021a82 <mbedtls_ssl_handshake_client_step+0x1ae6>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 802096e:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>
 8020972:	6843      	ldr	r3, [r0, #4]
 8020974:	9301      	str	r3, [sp, #4]
 8020976:	4b7d      	ldr	r3, [pc, #500]	; (8020b6c <mbedtls_ssl_handshake_client_step+0xbd0>)
 8020978:	9300      	str	r3, [sp, #0]
 802097a:	f240 63e4 	movw	r3, #1764	; 0x6e4
 802097e:	4642      	mov	r2, r8
 8020980:	2103      	movs	r1, #3
 8020982:	4620      	mov	r0, r4
 8020984:	f7f4 fec4 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->session_negotiate->compression = comp;
 8020988:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802098a:	2200      	movs	r2, #0
 802098c:	60da      	str	r2, [r3, #12]
    ext = buf + 40 + n;
 802098e:	3628      	adds	r6, #40	; 0x28
 8020990:	44b1      	add	r9, r6
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 8020992:	9701      	str	r7, [sp, #4]
 8020994:	4b76      	ldr	r3, [pc, #472]	; (8020b70 <mbedtls_ssl_handshake_client_step+0xbd4>)
 8020996:	9300      	str	r3, [sp, #0]
 8020998:	f240 63fd 	movw	r3, #1789	; 0x6fd
 802099c:	4642      	mov	r2, r8
 802099e:	2102      	movs	r1, #2
 80209a0:	4620      	mov	r0, r4
 80209a2:	f7f4 feb5 	bl	8015710 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 80209a6:	46c2      	mov	sl, r8
 80209a8:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 8020b9c <mbedtls_ssl_handshake_client_step+0xc00>
    while( ext_len )
 80209ac:	e117      	b.n	8020bde <mbedtls_ssl_handshake_client_step+0xc42>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 80209ae:	4b71      	ldr	r3, [pc, #452]	; (8020b74 <mbedtls_ssl_handshake_client_step+0xbd8>)
 80209b0:	9300      	str	r3, [sp, #0]
 80209b2:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 80209b6:	4a70      	ldr	r2, [pc, #448]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 80209b8:	2101      	movs	r1, #1
 80209ba:	4620      	mov	r0, r4
 80209bc:	f7f4 fea8 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80209c0:	2232      	movs	r2, #50	; 0x32
 80209c2:	2102      	movs	r1, #2
 80209c4:	4620      	mov	r0, r4
 80209c6:	f004 fa6f 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80209ca:	4d6c      	ldr	r5, [pc, #432]	; (8020b7c <mbedtls_ssl_handshake_client_step+0xbe0>)
 80209cc:	f7ff bb19 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 80209d0:	9301      	str	r3, [sp, #4]
 80209d2:	4b6b      	ldr	r3, [pc, #428]	; (8020b80 <mbedtls_ssl_handshake_client_step+0xbe4>)
 80209d4:	9300      	str	r3, [sp, #0]
 80209d6:	f240 6385 	movw	r3, #1669	; 0x685
 80209da:	4a67      	ldr	r2, [pc, #412]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 80209dc:	2101      	movs	r1, #1
 80209de:	4620      	mov	r0, r4
 80209e0:	f7f4 fe96 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80209e4:	222f      	movs	r2, #47	; 0x2f
 80209e6:	2102      	movs	r1, #2
 80209e8:	4620      	mov	r0, r4
 80209ea:	f004 fa5d 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80209ee:	4d65      	ldr	r5, [pc, #404]	; (8020b84 <mbedtls_ssl_handshake_client_step+0xbe8>)
 80209f0:	f7ff bb07 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 80209f4:	9b08      	ldr	r3, [sp, #32]
 80209f6:	9301      	str	r3, [sp, #4]
 80209f8:	4b63      	ldr	r3, [pc, #396]	; (8020b88 <mbedtls_ssl_handshake_client_step+0xbec>)
 80209fa:	9300      	str	r3, [sp, #0]
 80209fc:	f240 6392 	movw	r3, #1682	; 0x692
 8020a00:	4a5d      	ldr	r2, [pc, #372]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020a02:	2101      	movs	r1, #1
 8020a04:	4620      	mov	r0, r4
 8020a06:	f7f4 fe83 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020a0a:	2250      	movs	r2, #80	; 0x50
 8020a0c:	2102      	movs	r1, #2
 8020a0e:	4620      	mov	r0, r4
 8020a10:	f004 fa4a 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8020a14:	4d5d      	ldr	r5, [pc, #372]	; (8020b8c <mbedtls_ssl_handshake_client_step+0xbf0>)
 8020a16:	f7ff baf4 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        ssl->session_negotiate->ciphersuite != i ||
 8020a1a:	68c3      	ldr	r3, [r0, #12]
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	f47f af42 	bne.w	80208a6 <mbedtls_ssl_handshake_client_step+0x90a>
        ssl->session_negotiate->compression != comp ||
 8020a22:	6903      	ldr	r3, [r0, #16]
 8020a24:	429e      	cmp	r6, r3
 8020a26:	f47f af3e 	bne.w	80208a6 <mbedtls_ssl_handshake_client_step+0x90a>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 8020a2a:	4632      	mov	r2, r6
 8020a2c:	4641      	mov	r1, r8
 8020a2e:	3014      	adds	r0, #20
 8020a30:	f009 fd75 	bl	802a51e <memcmp>
        ssl->session_negotiate->id_len != n ||
 8020a34:	2800      	cmp	r0, #0
 8020a36:	f47f af36 	bne.w	80208a6 <mbedtls_ssl_handshake_client_step+0x90a>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 8020a3a:	230c      	movs	r3, #12
 8020a3c:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8020a3e:	4620      	mov	r0, r4
 8020a40:	f003 fa82 	bl	8023f48 <mbedtls_ssl_derive_keys>
 8020a44:	4680      	mov	r8, r0
 8020a46:	2800      	cmp	r0, #0
 8020a48:	f43f af49 	beq.w	80208de <mbedtls_ssl_handshake_client_step+0x942>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8020a4c:	9001      	str	r0, [sp, #4]
 8020a4e:	4b50      	ldr	r3, [pc, #320]	; (8020b90 <mbedtls_ssl_handshake_client_step+0xbf4>)
 8020a50:	9300      	str	r3, [sp, #0]
 8020a52:	f240 63b9 	movw	r3, #1721	; 0x6b9
 8020a56:	4a48      	ldr	r2, [pc, #288]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020a58:	2101      	movs	r1, #1
 8020a5a:	4620      	mov	r0, r4
 8020a5c:	f7f4 fe8a 	bl	8015774 <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020a60:	2250      	movs	r2, #80	; 0x50
 8020a62:	2102      	movs	r1, #2
 8020a64:	4620      	mov	r0, r4
 8020a66:	f004 fa1f 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( ret );
 8020a6a:	4645      	mov	r5, r8
 8020a6c:	f7ff bac9 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020a70:	4b40      	ldr	r3, [pc, #256]	; (8020b74 <mbedtls_ssl_handshake_client_step+0xbd8>)
 8020a72:	9300      	str	r3, [sp, #0]
 8020a74:	f240 63ce 	movw	r3, #1742	; 0x6ce
 8020a78:	4a3f      	ldr	r2, [pc, #252]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020a7a:	2101      	movs	r1, #1
 8020a7c:	4620      	mov	r0, r4
 8020a7e:	f7f4 fe47 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020a82:	222f      	movs	r2, #47	; 0x2f
 8020a84:	2102      	movs	r1, #2
 8020a86:	4620      	mov	r0, r4
 8020a88:	f004 fa0e 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020a8c:	4d3b      	ldr	r5, [pc, #236]	; (8020b7c <mbedtls_ssl_handshake_client_step+0xbe0>)
 8020a8e:	f7ff bab8 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020a92:	4b38      	ldr	r3, [pc, #224]	; (8020b74 <mbedtls_ssl_handshake_client_step+0xbd8>)
 8020a94:	9300      	str	r3, [sp, #0]
 8020a96:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8020a9a:	4a37      	ldr	r2, [pc, #220]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020a9c:	2101      	movs	r1, #1
 8020a9e:	4620      	mov	r0, r4
 8020aa0:	f7f4 fe36 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020aa4:	2232      	movs	r2, #50	; 0x32
 8020aa6:	2102      	movs	r1, #2
 8020aa8:	4620      	mov	r0, r4
 8020aaa:	f004 f9fd 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020aae:	4d33      	ldr	r5, [pc, #204]	; (8020b7c <mbedtls_ssl_handshake_client_step+0xbe0>)
 8020ab0:	f7ff baa7 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 8020ab4:	4b37      	ldr	r3, [pc, #220]	; (8020b94 <mbedtls_ssl_handshake_client_step+0xbf8>)
 8020ab6:	9300      	str	r3, [sp, #0]
 8020ab8:	f240 4371 	movw	r3, #1137	; 0x471
 8020abc:	4a2e      	ldr	r2, [pc, #184]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020abe:	2101      	movs	r1, #1
 8020ac0:	4620      	mov	r0, r4
 8020ac2:	f7f4 fe25 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020ac6:	2228      	movs	r2, #40	; 0x28
 8020ac8:	2102      	movs	r1, #2
 8020aca:	4620      	mov	r0, r4
 8020acc:	f004 f9ec 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020ad0:	4d2a      	ldr	r5, [pc, #168]	; (8020b7c <mbedtls_ssl_handshake_client_step+0xbe0>)
 8020ad2:	f7ff ba96 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 8020ad6:	f8cd b000 	str.w	fp, [sp]
 8020ada:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 8020ade:	4652      	mov	r2, sl
 8020ae0:	2103      	movs	r1, #3
 8020ae2:	4620      	mov	r0, r4
 8020ae4:	f7f4 fe14 	bl	8015710 <mbedtls_debug_print_msg>
    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
 8020ae8:	b316      	cbz	r6, 8020b30 <mbedtls_ssl_handshake_client_step+0xb94>
 8020aea:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020aee:	1c5a      	adds	r2, r3, #1
 8020af0:	4296      	cmp	r6, r2
 8020af2:	d11d      	bne.n	8020b30 <mbedtls_ssl_handshake_client_step+0xb94>
    list_size = buf[0];
 8020af4:	461a      	mov	r2, r3
    while( list_size > 0 )
 8020af6:	b153      	cbz	r3, 8020b0e <mbedtls_ssl_handshake_client_step+0xb72>
 8020af8:	f109 0305 	add.w	r3, r9, #5
 8020afc:	4619      	mov	r1, r3
 8020afe:	4411      	add	r1, r2
 8020b00:	4618      	mov	r0, r3
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 8020b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b06:	2a01      	cmp	r2, #1
 8020b08:	d94a      	bls.n	8020ba0 <mbedtls_ssl_handshake_client_step+0xc04>
    while( list_size > 0 )
 8020b0a:	4299      	cmp	r1, r3
 8020b0c:	d1f8      	bne.n	8020b00 <mbedtls_ssl_handshake_client_step+0xb64>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
 8020b0e:	4b22      	ldr	r3, [pc, #136]	; (8020b98 <mbedtls_ssl_handshake_client_step+0xbfc>)
 8020b10:	9300      	str	r3, [sp, #0]
 8020b12:	f240 5314 	movw	r3, #1300	; 0x514
 8020b16:	4a18      	ldr	r2, [pc, #96]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020b18:	2101      	movs	r1, #1
 8020b1a:	4620      	mov	r0, r4
 8020b1c:	f7f4 fdf8 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020b20:	2228      	movs	r2, #40	; 0x28
 8020b22:	2102      	movs	r1, #2
 8020b24:	4620      	mov	r0, r4
 8020b26:	f004 f9bf 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020b2a:	4d14      	ldr	r5, [pc, #80]	; (8020b7c <mbedtls_ssl_handshake_client_step+0xbe0>)
 8020b2c:	f7ff ba69 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020b30:	4b10      	ldr	r3, [pc, #64]	; (8020b74 <mbedtls_ssl_handshake_client_step+0xbd8>)
 8020b32:	9300      	str	r3, [sp, #0]
 8020b34:	f240 43f9 	movw	r3, #1273	; 0x4f9
 8020b38:	4a0f      	ldr	r2, [pc, #60]	; (8020b78 <mbedtls_ssl_handshake_client_step+0xbdc>)
 8020b3a:	2101      	movs	r1, #1
 8020b3c:	4620      	mov	r0, r4
 8020b3e:	f7f4 fde7 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020b42:	2232      	movs	r2, #50	; 0x32
 8020b44:	2102      	movs	r1, #2
 8020b46:	4620      	mov	r0, r4
 8020b48:	f004 f9ae 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020b4c:	e7ed      	b.n	8020b2a <mbedtls_ssl_handshake_client_step+0xb8e>
 8020b4e:	bf00      	nop
 8020b50:	08033e9c 	.word	0x08033e9c
 8020b54:	08033ec0 	.word	0x08033ec0
 8020b58:	08035e00 	.word	0x08035e00
 8020b5c:	08033a04 	.word	0x08033a04
 8020b60:	08033ef4 	.word	0x08033ef4
 8020b64:	08033f10 	.word	0x08033f10
 8020b68:	08033f38 	.word	0x08033f38
 8020b6c:	08034548 	.word	0x08034548
 8020b70:	08034570 	.word	0x08034570
 8020b74:	08033d98 	.word	0x08033d98
 8020b78:	08033a08 	.word	0x08033a08
 8020b7c:	ffff8680 	.word	0xffff8680
 8020b80:	08033e54 	.word	0x08033e54
 8020b84:	ffff8f80 	.word	0xffff8f80
 8020b88:	08033e78 	.word	0x08033e78
 8020b8c:	ffff8f00 	.word	0xffff8f00
 8020b90:	08033edc 	.word	0x08033edc
 8020b94:	08033f78 	.word	0x08033f78
 8020b98:	08033fe0 	.word	0x08033fe0
 8020b9c:	08033f9c 	.word	0x08033f9c
            ssl->handshake->ecdh_ctx.point_format = p[0];
 8020ba0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020ba2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 8020ba6:	7803      	ldrb	r3, [r0, #0]
 8020ba8:	9301      	str	r3, [sp, #4]
 8020baa:	4b89      	ldr	r3, [pc, #548]	; (8020dd0 <mbedtls_ssl_handshake_client_step+0xe34>)
 8020bac:	9300      	str	r3, [sp, #0]
 8020bae:	f240 530c 	movw	r3, #1292	; 0x50c
 8020bb2:	4652      	mov	r2, sl
 8020bb4:	2104      	movs	r1, #4
 8020bb6:	4620      	mov	r0, r4
 8020bb8:	f7f4 fdaa 	bl	8015710 <mbedtls_debug_print_msg>
            return( 0 );
 8020bbc:	e009      	b.n	8020bd2 <mbedtls_ssl_handshake_client_step+0xc36>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 8020bbe:	9301      	str	r3, [sp, #4]
 8020bc0:	4b84      	ldr	r3, [pc, #528]	; (8020dd4 <mbedtls_ssl_handshake_client_step+0xe38>)
 8020bc2:	9300      	str	r3, [sp, #0]
 8020bc4:	f240 7384 	movw	r3, #1924	; 0x784
 8020bc8:	4652      	mov	r2, sl
 8020bca:	2103      	movs	r1, #3
 8020bcc:	4620      	mov	r0, r4
 8020bce:	f7f4 fd9f 	bl	8015710 <mbedtls_debug_print_msg>
        ext_len -= 4 + ext_size;
 8020bd2:	1bbe      	subs	r6, r7, r6
 8020bd4:	1f37      	subs	r7, r6, #4
        ext += 4 + ext_size;
 8020bd6:	44c1      	add	r9, r8
        if( ext_len > 0 && ext_len < 4 )
 8020bd8:	3e05      	subs	r6, #5
 8020bda:	2e02      	cmp	r6, #2
 8020bdc:	d92d      	bls.n	8020c3a <mbedtls_ssl_handshake_client_step+0xc9e>
    while( ext_len )
 8020bde:	b3c7      	cbz	r7, 8020c52 <mbedtls_ssl_handshake_client_step+0xcb6>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 8020be0:	f899 2000 	ldrb.w	r2, [r9]
                                | ( ext[1]       ) );
 8020be4:	f899 3001 	ldrb.w	r3, [r9, #1]
 8020be8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
 8020bec:	f899 2002 	ldrb.w	r2, [r9, #2]
                                | ( ext[3]       ) );
 8020bf0:	f899 6003 	ldrb.w	r6, [r9, #3]
 8020bf4:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
        if( ext_size + 4 > ext_len )
 8020bf8:	f106 0804 	add.w	r8, r6, #4
 8020bfc:	45b8      	cmp	r8, r7
 8020bfe:	f63f af48 	bhi.w	8020a92 <mbedtls_ssl_handshake_client_step+0xaf6>
        switch( ext_id )
 8020c02:	2b0b      	cmp	r3, #11
 8020c04:	f43f af67 	beq.w	8020ad6 <mbedtls_ssl_handshake_client_step+0xb3a>
 8020c08:	f64f 7201 	movw	r2, #65281	; 0xff01
 8020c0c:	4293      	cmp	r3, r2
 8020c0e:	d1d6      	bne.n	8020bbe <mbedtls_ssl_handshake_client_step+0xc22>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 8020c10:	4b71      	ldr	r3, [pc, #452]	; (8020dd8 <mbedtls_ssl_handshake_client_step+0xe3c>)
 8020c12:	9300      	str	r3, [sp, #0]
 8020c14:	f240 7311 	movw	r3, #1809	; 0x711
 8020c18:	4652      	mov	r2, sl
 8020c1a:	2103      	movs	r1, #3
 8020c1c:	4620      	mov	r0, r4
 8020c1e:	f7f4 fd77 	bl	8015710 <mbedtls_debug_print_msg>
        if( len != 1 || buf[0] != 0x00 )
 8020c22:	2e01      	cmp	r6, #1
 8020c24:	f47f af46 	bne.w	8020ab4 <mbedtls_ssl_handshake_client_step+0xb18>
 8020c28:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	f47f af41 	bne.w	8020ab4 <mbedtls_ssl_handshake_client_step+0xb18>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8020c32:	2301      	movs	r3, #1
 8020c34:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    return( 0 );
 8020c38:	e7cb      	b.n	8020bd2 <mbedtls_ssl_handshake_client_step+0xc36>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8020c3a:	4b68      	ldr	r3, [pc, #416]	; (8020ddc <mbedtls_ssl_handshake_client_step+0xe40>)
 8020c3c:	9300      	str	r3, [sp, #0]
 8020c3e:	f240 738d 	movw	r3, #1933	; 0x78d
 8020c42:	4a67      	ldr	r2, [pc, #412]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020c44:	2101      	movs	r1, #1
 8020c46:	4620      	mov	r0, r4
 8020c48:	f7f4 fd62 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020c4c:	4d65      	ldr	r5, [pc, #404]	; (8020de4 <mbedtls_ssl_handshake_client_step+0xe48>)
 8020c4e:	f7ff b9d8 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8020c52:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8020c56:	b933      	cbnz	r3, 8020c66 <mbedtls_ssl_handshake_client_step+0xcca>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8020c58:	6823      	ldr	r3, [r4, #0]
 8020c5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8020c5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8020c62:	2b20      	cmp	r3, #32
 8020c64:	d00a      	beq.n	8020c7c <mbedtls_ssl_handshake_client_step+0xce0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 8020c66:	4b60      	ldr	r3, [pc, #384]	; (8020de8 <mbedtls_ssl_handshake_client_step+0xe4c>)
 8020c68:	9300      	str	r3, [sp, #0]
 8020c6a:	f240 73ba 	movw	r3, #1978	; 0x7ba
 8020c6e:	4a5c      	ldr	r2, [pc, #368]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020c70:	2102      	movs	r1, #2
 8020c72:	4620      	mov	r0, r4
 8020c74:	f7f4 fd4c 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 8020c78:	f7ff b9c3 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 8020c7c:	4b5b      	ldr	r3, [pc, #364]	; (8020dec <mbedtls_ssl_handshake_client_step+0xe50>)
 8020c7e:	9300      	str	r3, [sp, #0]
 8020c80:	f44f 63f3 	mov.w	r3, #1944	; 0x798
 8020c84:	4a56      	ldr	r2, [pc, #344]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020c86:	2101      	movs	r1, #1
 8020c88:	4620      	mov	r0, r4
 8020c8a:	f7f4 fd41 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020c8e:	2228      	movs	r2, #40	; 0x28
 8020c90:	2102      	movs	r1, #2
 8020c92:	4620      	mov	r0, r4
 8020c94:	f004 f908 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8020c98:	4d52      	ldr	r5, [pc, #328]	; (8020de4 <mbedtls_ssl_handshake_client_step+0xe48>)
 8020c9a:	f7ff b9b2 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_parse_certificate( ssl );
 8020c9e:	4620      	mov	r0, r4
 8020ca0:	f005 fdf0 	bl	8026884 <mbedtls_ssl_parse_certificate>
 8020ca4:	4605      	mov	r5, r0
           break;
 8020ca6:	f7ff b9ac 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8020caa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020cac:	681e      	ldr	r6, [r3, #0]
    unsigned char *p = NULL, *end = NULL;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	930a      	str	r3, [sp, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 8020cb2:	4b4f      	ldr	r3, [pc, #316]	; (8020df0 <mbedtls_ssl_handshake_client_step+0xe54>)
 8020cb4:	9300      	str	r3, [sp, #0]
 8020cb6:	f44f 6312 	mov.w	r3, #2336	; 0x920
 8020cba:	4a49      	ldr	r2, [pc, #292]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020cbc:	2102      	movs	r1, #2
 8020cbe:	4620      	mov	r0, r4
 8020cc0:	f7f4 fd26 	bl	8015710 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8020cc4:	7ab3      	ldrb	r3, [r6, #10]
 8020cc6:	2b01      	cmp	r3, #1
 8020cc8:	d022      	beq.n	8020d10 <mbedtls_ssl_handshake_client_step+0xd74>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8020cca:	2101      	movs	r1, #1
 8020ccc:	4620      	mov	r0, r4
 8020cce:	f004 f943 	bl	8024f58 <mbedtls_ssl_read_record>
 8020cd2:	4605      	mov	r5, r0
 8020cd4:	bb50      	cbnz	r0, 8020d2c <mbedtls_ssl_handshake_client_step+0xd90>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8020cd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8020cd8:	2b16      	cmp	r3, #22
 8020cda:	d133      	bne.n	8020d44 <mbedtls_ssl_handshake_client_step+0xda8>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 8020cdc:	6e67      	ldr	r7, [r4, #100]	; 0x64
 8020cde:	783b      	ldrb	r3, [r7, #0]
 8020ce0:	2b0c      	cmp	r3, #12
 8020ce2:	d051      	beq.n	8020d88 <mbedtls_ssl_handshake_client_step+0xdec>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8020ce4:	7ab3      	ldrb	r3, [r6, #10]
 8020ce6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8020cea:	2b05      	cmp	r3, #5
 8020cec:	d03b      	beq.n	8020d66 <mbedtls_ssl_handshake_client_step+0xdca>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 8020cee:	4b41      	ldr	r3, [pc, #260]	; (8020df4 <mbedtls_ssl_handshake_client_step+0xe58>)
 8020cf0:	9300      	str	r3, [sp, #0]
 8020cf2:	f640 1368 	movw	r3, #2408	; 0x968
 8020cf6:	4a3a      	ldr	r2, [pc, #232]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020cf8:	2101      	movs	r1, #1
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	f7f4 fd08 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020d00:	220a      	movs	r2, #10
 8020d02:	2102      	movs	r1, #2
 8020d04:	4620      	mov	r0, r4
 8020d06:	f004 f8cf 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8020d0a:	4d3b      	ldr	r5, [pc, #236]	; (8020df8 <mbedtls_ssl_handshake_client_step+0xe5c>)
 8020d0c:	f7ff b979 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 8020d10:	4b3a      	ldr	r3, [pc, #232]	; (8020dfc <mbedtls_ssl_handshake_client_step+0xe60>)
 8020d12:	9300      	str	r3, [sp, #0]
 8020d14:	f640 1325 	movw	r3, #2341	; 0x925
 8020d18:	4a31      	ldr	r2, [pc, #196]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020d1a:	2102      	movs	r1, #2
 8020d1c:	4620      	mov	r0, r4
 8020d1e:	f7f4 fcf7 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 8020d22:	6863      	ldr	r3, [r4, #4]
 8020d24:	3301      	adds	r3, #1
 8020d26:	6063      	str	r3, [r4, #4]
        return( 0 );
 8020d28:	f7ff b96b 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8020d2c:	9001      	str	r0, [sp, #4]
 8020d2e:	4b34      	ldr	r3, [pc, #208]	; (8020e00 <mbedtls_ssl_handshake_client_step+0xe64>)
 8020d30:	9300      	str	r3, [sp, #0]
 8020d32:	f640 134d 	movw	r3, #2381	; 0x94d
 8020d36:	4a2a      	ldr	r2, [pc, #168]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020d38:	2101      	movs	r1, #1
 8020d3a:	4620      	mov	r0, r4
 8020d3c:	f7f4 fd1a 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8020d40:	f7ff b95f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8020d44:	4b2f      	ldr	r3, [pc, #188]	; (8020e04 <mbedtls_ssl_handshake_client_step+0xe68>)
 8020d46:	9300      	str	r3, [sp, #0]
 8020d48:	f640 1353 	movw	r3, #2387	; 0x953
 8020d4c:	4a24      	ldr	r2, [pc, #144]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020d4e:	2101      	movs	r1, #1
 8020d50:	4620      	mov	r0, r4
 8020d52:	f7f4 fcdd 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020d56:	220a      	movs	r2, #10
 8020d58:	2102      	movs	r1, #2
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	f004 f8a4 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8020d60:	4d25      	ldr	r5, [pc, #148]	; (8020df8 <mbedtls_ssl_handshake_client_step+0xe5c>)
 8020d62:	f7ff b94e 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            ssl->keep_current_message = 1;
 8020d66:	2301      	movs	r3, #1
 8020d68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    ssl->state++;
 8020d6c:	6863      	ldr	r3, [r4, #4]
 8020d6e:	3301      	adds	r3, #1
 8020d70:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 8020d72:	4b25      	ldr	r3, [pc, #148]	; (8020e08 <mbedtls_ssl_handshake_client_step+0xe6c>)
 8020d74:	9300      	str	r3, [sp, #0]
 8020d76:	f640 2368 	movw	r3, #2664	; 0xa68
 8020d7a:	4a19      	ldr	r2, [pc, #100]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020d7c:	2102      	movs	r1, #2
 8020d7e:	4620      	mov	r0, r4
 8020d80:	f7f4 fcc6 	bl	8015710 <mbedtls_debug_print_msg>
           break;
 8020d84:	f7ff b93d 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8020d88:	1d3a      	adds	r2, r7, #4
 8020d8a:	920a      	str	r2, [sp, #40]	; 0x28
    end = ssl->in_msg + ssl->in_hslen;
 8020d8c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8020d8e:	441f      	add	r7, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 8020d90:	3b04      	subs	r3, #4
 8020d92:	9302      	str	r3, [sp, #8]
 8020d94:	9201      	str	r2, [sp, #4]
 8020d96:	4b1d      	ldr	r3, [pc, #116]	; (8020e0c <mbedtls_ssl_handshake_client_step+0xe70>)
 8020d98:	9300      	str	r3, [sp, #0]
 8020d9a:	f640 1378 	movw	r3, #2424	; 0x978
 8020d9e:	4a10      	ldr	r2, [pc, #64]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020da0:	2103      	movs	r1, #3
 8020da2:	4620      	mov	r0, r4
 8020da4:	f7f4 fd1a 	bl	80157dc <mbedtls_debug_print_buf>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 8020da8:	7ab2      	ldrb	r2, [r6, #10]
 8020daa:	1ed3      	subs	r3, r2, #3
 8020dac:	b2db      	uxtb	r3, r3
 8020dae:	2b01      	cmp	r3, #1
 8020db0:	d932      	bls.n	8020e18 <mbedtls_ssl_handshake_client_step+0xe7c>
 8020db2:	2a08      	cmp	r2, #8
 8020db4:	d030      	beq.n	8020e18 <mbedtls_ssl_handshake_client_step+0xe7c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8020db6:	4b16      	ldr	r3, [pc, #88]	; (8020e10 <mbedtls_ssl_handshake_client_step+0xe74>)
 8020db8:	9300      	str	r3, [sp, #0]
 8020dba:	f640 13c5 	movw	r3, #2501	; 0x9c5
 8020dbe:	4a08      	ldr	r2, [pc, #32]	; (8020de0 <mbedtls_ssl_handshake_client_step+0xe44>)
 8020dc0:	2101      	movs	r1, #1
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	f7f4 fca4 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8020dc8:	4d12      	ldr	r5, [pc, #72]	; (8020e14 <mbedtls_ssl_handshake_client_step+0xe78>)
 8020dca:	f7ff b91a 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 8020dce:	bf00      	nop
 8020dd0:	08033fc4 	.word	0x08033fc4
 8020dd4:	08033ffc 	.word	0x08033ffc
 8020dd8:	08033f58 	.word	0x08033f58
 8020ddc:	08033d98 	.word	0x08033d98
 8020de0:	08033a08 	.word	0x08033a08
 8020de4:	ffff8680 	.word	0xffff8680
 8020de8:	08034054 	.word	0x08034054
 8020dec:	08034024 	.word	0x08034024
 8020df0:	0803406c 	.word	0x0803406c
 8020df4:	080340d0 	.word	0x080340d0
 8020df8:	ffff8900 	.word	0xffff8900
 8020dfc:	0803408c 	.word	0x0803408c
 8020e00:	08033d80 	.word	0x08033d80
 8020e04:	080340b0 	.word	0x080340b0
 8020e08:	08034270 	.word	0x08034270
 8020e0c:	08034100 	.word	0x08034100
 8020e10:	08034130 	.word	0x08034130
 8020e14:	ffff9400 	.word	0xffff9400
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 8020e18:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020e1a:	463a      	mov	r2, r7
 8020e1c:	a90a      	add	r1, sp, #40	; 0x28
 8020e1e:	3080      	adds	r0, #128	; 0x80
 8020e20:	f7f5 f890 	bl	8015f44 <mbedtls_ecdh_read_params>
 8020e24:	2800      	cmp	r0, #0
 8020e26:	f040 8092 	bne.w	8020f4e <mbedtls_ssl_handshake_client_step+0xfb2>
    grp_id = ssl->handshake->ecdh_ctx.grp.id;
 8020e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020e2c:	f893 8080 	ldrb.w	r8, [r3, #128]	; 0x80
    curve_info = mbedtls_ecp_curve_info_from_grp_id( grp_id );
 8020e30:	4640      	mov	r0, r8
 8020e32:	f7f6 f87d 	bl	8016f30 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 8020e36:	2800      	cmp	r0, #0
 8020e38:	f000 80a4 	beq.w	8020f84 <mbedtls_ssl_handshake_client_step+0xfe8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );
 8020e3c:	6883      	ldr	r3, [r0, #8]
 8020e3e:	9301      	str	r3, [sp, #4]
 8020e40:	4bb7      	ldr	r3, [pc, #732]	; (8021120 <mbedtls_ssl_handshake_client_step+0x1184>)
 8020e42:	9300      	str	r3, [sp, #0]
 8020e44:	f240 73fc 	movw	r3, #2044	; 0x7fc
 8020e48:	4ab6      	ldr	r2, [pc, #728]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020e4a:	2102      	movs	r1, #2
 8020e4c:	4620      	mov	r0, r4
 8020e4e:	f7f4 fc5f 	bl	8015710 <mbedtls_debug_print_msg>
    if( mbedtls_ssl_check_curve( ssl, grp_id ) != 0 )
 8020e52:	4641      	mov	r1, r8
 8020e54:	4620      	mov	r0, r4
 8020e56:	f005 fcfe 	bl	8026856 <mbedtls_ssl_check_curve>
 8020e5a:	2800      	cmp	r0, #0
 8020e5c:	f040 809b 	bne.w	8020f96 <mbedtls_ssl_handshake_client_step+0xffa>
    MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 8020e60:	2301      	movs	r3, #1
 8020e62:	9301      	str	r3, [sp, #4]
 8020e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020e66:	3380      	adds	r3, #128	; 0x80
 8020e68:	9300      	str	r3, [sp, #0]
 8020e6a:	f640 0306 	movw	r3, #2054	; 0x806
 8020e6e:	4aad      	ldr	r2, [pc, #692]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020e70:	2103      	movs	r1, #3
 8020e72:	4620      	mov	r0, r4
 8020e74:	f7f4 ff36 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 8020e78:	7ab3      	ldrb	r3, [r6, #10]
 8020e7a:	3b02      	subs	r3, #2
 8020e7c:	2b02      	cmp	r3, #2
 8020e7e:	f63f af75 	bhi.w	8020d6c <mbedtls_ssl_handshake_client_step+0xdd0>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8020e82:	68e3      	ldr	r3, [r4, #12]
 8020e84:	2b03      	cmp	r3, #3
 8020e86:	f040 80d8 	bne.w	802103a <mbedtls_ssl_handshake_client_step+0x109e>
        size_t params_len = p - params;
 8020e8a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    if( (*p) + 2 > end )
 8020e8e:	f108 0302 	add.w	r3, r8, #2
 8020e92:	429f      	cmp	r7, r3
 8020e94:	f0c0 8095 	bcc.w	8020fc2 <mbedtls_ssl_handshake_client_step+0x1026>
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8020e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020e9a:	9308      	str	r3, [sp, #32]
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 8020e9c:	f898 0000 	ldrb.w	r0, [r8]
 8020ea0:	f005 fcad 	bl	80267fe <mbedtls_ssl_md_alg_from_hash>
 8020ea4:	4681      	mov	r9, r0
 8020ea6:	2800      	cmp	r0, #0
 8020ea8:	d07f      	beq.n	8020faa <mbedtls_ssl_handshake_client_step+0x100e>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 8020eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020eac:	7858      	ldrb	r0, [r3, #1]
 8020eae:	f005 fc85 	bl	80267bc <mbedtls_ssl_pk_alg_from_sig>
 8020eb2:	4682      	mov	sl, r0
 8020eb4:	2800      	cmp	r0, #0
 8020eb6:	f000 8095 	beq.w	8020fe4 <mbedtls_ssl_handshake_client_step+0x1048>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 8020eba:	4649      	mov	r1, r9
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	f005 ff6d 	bl	8026d9c <mbedtls_ssl_check_sig_hash>
 8020ec2:	2800      	cmp	r0, #0
 8020ec4:	f040 809b 	bne.w	8020ffe <mbedtls_ssl_handshake_client_step+0x1062>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
 8020ec8:	f8df b258 	ldr.w	fp, [pc, #600]	; 8021124 <mbedtls_ssl_handshake_client_step+0x1188>
 8020ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ece:	785b      	ldrb	r3, [r3, #1]
 8020ed0:	9301      	str	r3, [sp, #4]
 8020ed2:	4b95      	ldr	r3, [pc, #596]	; (8021128 <mbedtls_ssl_handshake_client_step+0x118c>)
 8020ed4:	9300      	str	r3, [sp, #0]
 8020ed6:	f640 03e6 	movw	r3, #2278	; 0x8e6
 8020eda:	465a      	mov	r2, fp
 8020edc:	2102      	movs	r1, #2
 8020ede:	4620      	mov	r0, r4
 8020ee0:	f7f4 fc16 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
 8020ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ee6:	781b      	ldrb	r3, [r3, #0]
 8020ee8:	9301      	str	r3, [sp, #4]
 8020eea:	4b90      	ldr	r3, [pc, #576]	; (802112c <mbedtls_ssl_handshake_client_step+0x1190>)
 8020eec:	9300      	str	r3, [sp, #0]
 8020eee:	f640 03e7 	movw	r3, #2279	; 0x8e7
 8020ef2:	465a      	mov	r2, fp
 8020ef4:	2102      	movs	r1, #2
 8020ef6:	4620      	mov	r0, r4
 8020ef8:	f7f4 fc0a 	bl	8015710 <mbedtls_debug_print_msg>
    *p += 2;
 8020efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020efe:	3302      	adds	r3, #2
 8020f00:	930a      	str	r3, [sp, #40]	; 0x28
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 8020f02:	4630      	mov	r0, r6
 8020f04:	f7ff f81e 	bl	801ff44 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 8020f08:	4550      	cmp	r0, sl
 8020f0a:	f040 8085 	bne.w	8021018 <mbedtls_ssl_handshake_client_step+0x107c>
        if( p > end - 2 )
 8020f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f10:	1eba      	subs	r2, r7, #2
 8020f12:	4293      	cmp	r3, r2
 8020f14:	f200 809d 	bhi.w	8021052 <mbedtls_ssl_handshake_client_step+0x10b6>
        sig_len = ( p[0] << 8 ) | p[1];
 8020f18:	781a      	ldrb	r2, [r3, #0]
 8020f1a:	785e      	ldrb	r6, [r3, #1]
 8020f1c:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
        p += 2;
 8020f20:	3302      	adds	r3, #2
 8020f22:	930a      	str	r3, [sp, #40]	; 0x28
        if( p != end - sig_len )
 8020f24:	1bbf      	subs	r7, r7, r6
 8020f26:	42bb      	cmp	r3, r7
 8020f28:	f000 80a4 	beq.w	8021074 <mbedtls_ssl_handshake_client_step+0x10d8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8020f2c:	4b80      	ldr	r3, [pc, #512]	; (8021130 <mbedtls_ssl_handshake_client_step+0x1194>)
 8020f2e:	9300      	str	r3, [sp, #0]
 8020f30:	f640 230e 	movw	r3, #2574	; 0xa0e
 8020f34:	4a7b      	ldr	r2, [pc, #492]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020f36:	2101      	movs	r1, #1
 8020f38:	4620      	mov	r0, r4
 8020f3a:	f7f4 fbe9 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020f3e:	2232      	movs	r2, #50	; 0x32
 8020f40:	2102      	movs	r1, #2
 8020f42:	4620      	mov	r0, r4
 8020f44:	f003 ffb0 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8020f48:	4d7a      	ldr	r5, [pc, #488]	; (8021134 <mbedtls_ssl_handshake_client_step+0x1198>)
 8020f4a:	f7ff b85a 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_read_params" ), ret );
 8020f4e:	9001      	str	r0, [sp, #4]
 8020f50:	4b79      	ldr	r3, [pc, #484]	; (8021138 <mbedtls_ssl_handshake_client_step+0x119c>)
 8020f52:	9300      	str	r3, [sp, #0]
 8020f54:	f640 0325 	movw	r3, #2085	; 0x825
 8020f58:	4a72      	ldr	r2, [pc, #456]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020f5a:	2101      	movs	r1, #1
 8020f5c:	4620      	mov	r0, r4
 8020f5e:	f7f4 fc09 	bl	8015774 <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8020f62:	4b73      	ldr	r3, [pc, #460]	; (8021130 <mbedtls_ssl_handshake_client_step+0x1194>)
 8020f64:	9300      	str	r3, [sp, #0]
 8020f66:	f640 13ab 	movw	r3, #2475	; 0x9ab
 8020f6a:	4a6e      	ldr	r2, [pc, #440]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020f6c:	2101      	movs	r1, #1
 8020f6e:	4620      	mov	r0, r4
 8020f70:	f7f4 fbce 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020f74:	222f      	movs	r2, #47	; 0x2f
 8020f76:	2102      	movs	r1, #2
 8020f78:	4620      	mov	r0, r4
 8020f7a:	f003 ff95 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8020f7e:	4d6d      	ldr	r5, [pc, #436]	; (8021134 <mbedtls_ssl_handshake_client_step+0x1198>)
 8020f80:	f7ff b83f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8020f84:	4b6d      	ldr	r3, [pc, #436]	; (802113c <mbedtls_ssl_handshake_client_step+0x11a0>)
 8020f86:	9300      	str	r3, [sp, #0]
 8020f88:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8020f8c:	4a65      	ldr	r2, [pc, #404]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020f8e:	2101      	movs	r1, #1
 8020f90:	4620      	mov	r0, r4
 8020f92:	f7f4 fbbd 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message (ECDHE curve)" ) );
 8020f96:	4b6a      	ldr	r3, [pc, #424]	; (8021140 <mbedtls_ssl_handshake_client_step+0x11a4>)
 8020f98:	9300      	str	r3, [sp, #0]
 8020f9a:	f640 032f 	movw	r3, #2095	; 0x82f
 8020f9e:	4a61      	ldr	r2, [pc, #388]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020fa0:	2101      	movs	r1, #1
 8020fa2:	4620      	mov	r0, r4
 8020fa4:	f7f4 fbb4 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8020fa8:	e7db      	b.n	8020f62 <mbedtls_ssl_handshake_client_step+0xfc6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Server used unsupported "
 8020faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fac:	781b      	ldrb	r3, [r3, #0]
 8020fae:	9301      	str	r3, [sp, #4]
 8020fb0:	4b64      	ldr	r3, [pc, #400]	; (8021144 <mbedtls_ssl_handshake_client_step+0x11a8>)
 8020fb2:	9300      	str	r3, [sp, #0]
 8020fb4:	f640 03cd 	movw	r3, #2253	; 0x8cd
 8020fb8:	4a5a      	ldr	r2, [pc, #360]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020fba:	2101      	movs	r1, #1
 8020fbc:	4620      	mov	r0, r4
 8020fbe:	f7f4 fba7 	bl	8015710 <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8020fc2:	4b5b      	ldr	r3, [pc, #364]	; (8021130 <mbedtls_ssl_handshake_client_step+0x1194>)
 8020fc4:	9300      	str	r3, [sp, #0]
 8020fc6:	f640 13dd 	movw	r3, #2525	; 0x9dd
 8020fca:	4a56      	ldr	r2, [pc, #344]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020fcc:	2101      	movs	r1, #1
 8020fce:	4620      	mov	r0, r4
 8020fd0:	f7f4 fb9e 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8020fd4:	222f      	movs	r2, #47	; 0x2f
 8020fd6:	2102      	movs	r1, #2
 8020fd8:	4620      	mov	r0, r4
 8020fda:	f003 ff65 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8020fde:	4d55      	ldr	r5, [pc, #340]	; (8021134 <mbedtls_ssl_handshake_client_step+0x1198>)
 8020fe0:	f7ff b80f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used unsupported "
 8020fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fe6:	785b      	ldrb	r3, [r3, #1]
 8020fe8:	9301      	str	r3, [sp, #4]
 8020fea:	4b57      	ldr	r3, [pc, #348]	; (8021148 <mbedtls_ssl_handshake_client_step+0x11ac>)
 8020fec:	9300      	str	r3, [sp, #0]
 8020fee:	f640 03d7 	movw	r3, #2263	; 0x8d7
 8020ff2:	4a4c      	ldr	r2, [pc, #304]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8020ff4:	2101      	movs	r1, #1
 8020ff6:	4620      	mov	r0, r4
 8020ff8:	f7f4 fb8a 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8020ffc:	e7e1      	b.n	8020fc2 <mbedtls_ssl_handshake_client_step+0x1026>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 8020ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021000:	781b      	ldrb	r3, [r3, #0]
 8021002:	9301      	str	r3, [sp, #4]
 8021004:	4b51      	ldr	r3, [pc, #324]	; (802114c <mbedtls_ssl_handshake_client_step+0x11b0>)
 8021006:	9300      	str	r3, [sp, #0]
 8021008:	f640 03e1 	movw	r3, #2273	; 0x8e1
 802100c:	4a45      	ldr	r2, [pc, #276]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 802100e:	2101      	movs	r1, #1
 8021010:	4620      	mov	r0, r4
 8021012:	f7f4 fb7d 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8021016:	e7d4      	b.n	8020fc2 <mbedtls_ssl_handshake_client_step+0x1026>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8021018:	4b45      	ldr	r3, [pc, #276]	; (8021130 <mbedtls_ssl_handshake_client_step+0x1194>)
 802101a:	9300      	str	r3, [sp, #0]
 802101c:	f640 13e5 	movw	r3, #2533	; 0x9e5
 8021020:	465a      	mov	r2, fp
 8021022:	2101      	movs	r1, #1
 8021024:	4620      	mov	r0, r4
 8021026:	f7f4 fb73 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802102a:	222f      	movs	r2, #47	; 0x2f
 802102c:	2102      	movs	r1, #2
 802102e:	4620      	mov	r0, r4
 8021030:	f003 ff3a 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 8021034:	4d3f      	ldr	r5, [pc, #252]	; (8021134 <mbedtls_ssl_handshake_client_step+0x1198>)
 8021036:	f7fe bfe4 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 802103a:	4b40      	ldr	r3, [pc, #256]	; (802113c <mbedtls_ssl_handshake_client_step+0x11a0>)
 802103c:	9300      	str	r3, [sp, #0]
 802103e:	f640 13fa 	movw	r3, #2554	; 0x9fa
 8021042:	4a38      	ldr	r2, [pc, #224]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8021044:	2101      	movs	r1, #1
 8021046:	4620      	mov	r0, r4
 8021048:	f7f4 fb62 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802104c:	4d40      	ldr	r5, [pc, #256]	; (8021150 <mbedtls_ssl_handshake_client_step+0x11b4>)
 802104e:	f7fe bfd8 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8021052:	4b37      	ldr	r3, [pc, #220]	; (8021130 <mbedtls_ssl_handshake_client_step+0x1194>)
 8021054:	9300      	str	r3, [sp, #0]
 8021056:	f640 2304 	movw	r3, #2564	; 0xa04
 802105a:	4a32      	ldr	r2, [pc, #200]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 802105c:	2101      	movs	r1, #1
 802105e:	4620      	mov	r0, r4
 8021060:	f7f4 fb56 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021064:	2232      	movs	r2, #50	; 0x32
 8021066:	2102      	movs	r1, #2
 8021068:	4620      	mov	r0, r4
 802106a:	f003 ff1d 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 802106e:	4d31      	ldr	r5, [pc, #196]	; (8021134 <mbedtls_ssl_handshake_client_step+0x1198>)
 8021070:	f7fe bfc7 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_BUF( 3, "signature", p, sig_len );
 8021074:	9602      	str	r6, [sp, #8]
 8021076:	9301      	str	r3, [sp, #4]
 8021078:	4b36      	ldr	r3, [pc, #216]	; (8021154 <mbedtls_ssl_handshake_client_step+0x11b8>)
 802107a:	9300      	str	r3, [sp, #0]
 802107c:	f640 2314 	movw	r3, #2580	; 0xa14
 8021080:	4a28      	ldr	r2, [pc, #160]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8021082:	2103      	movs	r1, #3
 8021084:	4620      	mov	r0, r4
 8021086:	f7f4 fba9 	bl	80157dc <mbedtls_debug_print_buf>
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 802108a:	9b08      	ldr	r3, [sp, #32]
 802108c:	3304      	adds	r3, #4
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
 802108e:	f8cd 9004 	str.w	r9, [sp, #4]
        size_t params_len = p - params;
 8021092:	eba8 0203 	sub.w	r2, r8, r3
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
 8021096:	9200      	str	r2, [sp, #0]
 8021098:	aa0b      	add	r2, sp, #44	; 0x2c
 802109a:	a90c      	add	r1, sp, #48	; 0x30
 802109c:	4620      	mov	r0, r4
 802109e:	f005 febb 	bl	8026e18 <mbedtls_ssl_get_key_exchange_md_tls1_2>
            if( ret != 0 )
 80210a2:	b110      	cbz	r0, 80210aa <mbedtls_ssl_handshake_client_step+0x110e>
                return( ret );
 80210a4:	4605      	mov	r5, r0
 80210a6:	f7fe bfac 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );
 80210aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210ac:	9302      	str	r3, [sp, #8]
 80210ae:	ab0c      	add	r3, sp, #48	; 0x30
 80210b0:	9301      	str	r3, [sp, #4]
 80210b2:	4b29      	ldr	r3, [pc, #164]	; (8021158 <mbedtls_ssl_handshake_client_step+0x11bc>)
 80210b4:	9300      	str	r3, [sp, #0]
 80210b6:	f640 2338 	movw	r3, #2616	; 0xa38
 80210ba:	4a1a      	ldr	r2, [pc, #104]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 80210bc:	2103      	movs	r1, #3
 80210be:	4620      	mov	r0, r4
 80210c0:	f7f4 fb8c 	bl	80157dc <mbedtls_debug_print_buf>
        if( ssl->session_negotiate->peer_cert == NULL )
 80210c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80210c6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80210c8:	2800      	cmp	r0, #0
 80210ca:	d049      	beq.n	8021160 <mbedtls_ssl_handshake_client_step+0x11c4>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 80210cc:	4651      	mov	r1, sl
 80210ce:	30bc      	adds	r0, #188	; 0xbc
 80210d0:	f7f9 f810 	bl	801a0f4 <mbedtls_pk_can_do>
 80210d4:	2800      	cmp	r0, #0
 80210d6:	d054      	beq.n	8021182 <mbedtls_ssl_handshake_client_step+0x11e6>
                        &ssl->session_negotiate->peer_cert->pk,
 80210d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if( ( ret = mbedtls_pk_verify_restartable(
 80210da:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80210dc:	2300      	movs	r3, #0
 80210de:	9302      	str	r3, [sp, #8]
 80210e0:	9601      	str	r6, [sp, #4]
 80210e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210e4:	9300      	str	r3, [sp, #0]
 80210e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210e8:	aa0c      	add	r2, sp, #48	; 0x30
 80210ea:	4649      	mov	r1, r9
 80210ec:	30bc      	adds	r0, #188	; 0xbc
 80210ee:	f7f9 f80d 	bl	801a10c <mbedtls_pk_verify_restartable>
 80210f2:	4606      	mov	r6, r0
 80210f4:	2800      	cmp	r0, #0
 80210f6:	f43f ae39 	beq.w	8020d6c <mbedtls_ssl_handshake_client_step+0xdd0>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80210fa:	2233      	movs	r2, #51	; 0x33
 80210fc:	2102      	movs	r1, #2
 80210fe:	4620      	mov	r0, r4
 8021100:	f003 fed2 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 8021104:	9601      	str	r6, [sp, #4]
 8021106:	4b15      	ldr	r3, [pc, #84]	; (802115c <mbedtls_ssl_handshake_client_step+0x11c0>)
 8021108:	9300      	str	r3, [sp, #0]
 802110a:	f640 235b 	movw	r3, #2651	; 0xa5b
 802110e:	4a05      	ldr	r2, [pc, #20]	; (8021124 <mbedtls_ssl_handshake_client_step+0x1188>)
 8021110:	2101      	movs	r1, #1
 8021112:	4620      	mov	r0, r4
 8021114:	f7f4 fb2e 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8021118:	4635      	mov	r5, r6
 802111a:	f7fe bf72 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 802111e:	bf00      	nop
 8021120:	08034144 	.word	0x08034144
 8021124:	08033a08 	.word	0x08033a08
 8021128:	080341e4 	.word	0x080341e4
 802112c:	08034208 	.word	0x08034208
 8021130:	080340b0 	.word	0x080340b0
 8021134:	ffff8500 	.word	0xffff8500
 8021138:	08034114 	.word	0x08034114
 802113c:	08034130 	.word	0x08034130
 8021140:	0803459c 	.word	0x0803459c
 8021144:	08034154 	.word	0x08034154
 8021148:	08034180 	.word	0x08034180
 802114c:	080341b0 	.word	0x080341b0
 8021150:	ffff9400 	.word	0xffff9400
 8021154:	08034228 	.word	0x08034228
 8021158:	08034234 	.word	0x08034234
 802115c:	0803425c 	.word	0x0803425c
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8021160:	4bbc      	ldr	r3, [pc, #752]	; (8021454 <mbedtls_ssl_handshake_client_step+0x14b8>)
 8021162:	9300      	str	r3, [sp, #0]
 8021164:	f640 233c 	movw	r3, #2620	; 0xa3c
 8021168:	4abb      	ldr	r2, [pc, #748]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 802116a:	2102      	movs	r1, #2
 802116c:	4620      	mov	r0, r4
 802116e:	f7f4 facf 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021172:	2228      	movs	r2, #40	; 0x28
 8021174:	2102      	movs	r1, #2
 8021176:	4620      	mov	r0, r4
 8021178:	f003 fe96 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 802117c:	4db7      	ldr	r5, [pc, #732]	; (802145c <mbedtls_ssl_handshake_client_step+0x14c0>)
 802117e:	f7fe bf40 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 8021182:	4bb7      	ldr	r3, [pc, #732]	; (8021460 <mbedtls_ssl_handshake_client_step+0x14c4>)
 8021184:	9300      	str	r3, [sp, #0]
 8021186:	f640 2347 	movw	r3, #2631	; 0xa47
 802118a:	4ab3      	ldr	r2, [pc, #716]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 802118c:	2101      	movs	r1, #1
 802118e:	4620      	mov	r0, r4
 8021190:	f7f4 fabe 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021194:	2228      	movs	r2, #40	; 0x28
 8021196:	2102      	movs	r1, #2
 8021198:	4620      	mov	r0, r4
 802119a:	f003 fe85 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 802119e:	4db1      	ldr	r5, [pc, #708]	; (8021464 <mbedtls_ssl_handshake_client_step+0x14c8>)
 80211a0:	f7fe bf2f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80211a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80211a6:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 80211a8:	4baf      	ldr	r3, [pc, #700]	; (8021468 <mbedtls_ssl_handshake_client_step+0x14cc>)
 80211aa:	9300      	str	r3, [sp, #0]
 80211ac:	f640 2389 	movw	r3, #2697	; 0xa89
 80211b0:	4aa9      	ldr	r2, [pc, #676]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80211b2:	2102      	movs	r1, #2
 80211b4:	4620      	mov	r0, r4
 80211b6:	f7f4 faab 	bl	8015710 <mbedtls_debug_print_msg>
    switch( info->key_exchange )
 80211ba:	7ab3      	ldrb	r3, [r6, #10]
 80211bc:	2b04      	cmp	r3, #4
 80211be:	d80e      	bhi.n	80211de <mbedtls_ssl_handshake_client_step+0x1242>
 80211c0:	b98b      	cbnz	r3, 80211e6 <mbedtls_ssl_handshake_client_step+0x124a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 80211c2:	4baa      	ldr	r3, [pc, #680]	; (802146c <mbedtls_ssl_handshake_client_step+0x14d0>)
 80211c4:	9300      	str	r3, [sp, #0]
 80211c6:	f640 238d 	movw	r3, #2701	; 0xa8d
 80211ca:	4aa3      	ldr	r2, [pc, #652]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80211cc:	2102      	movs	r1, #2
 80211ce:	4620      	mov	r0, r4
 80211d0:	f7f4 fa9e 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 80211d4:	6863      	ldr	r3, [r4, #4]
 80211d6:	3301      	adds	r3, #1
 80211d8:	6063      	str	r3, [r4, #4]
        return( 0 );
 80211da:	f7fe bf12 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 80211de:	3b09      	subs	r3, #9
 80211e0:	b2db      	uxtb	r3, r3
 80211e2:	2b01      	cmp	r3, #1
 80211e4:	d8ed      	bhi.n	80211c2 <mbedtls_ssl_handshake_client_step+0x1226>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80211e6:	2101      	movs	r1, #1
 80211e8:	4620      	mov	r0, r4
 80211ea:	f003 feb5 	bl	8024f58 <mbedtls_ssl_read_record>
 80211ee:	4605      	mov	r5, r0
 80211f0:	2800      	cmp	r0, #0
 80211f2:	d145      	bne.n	8021280 <mbedtls_ssl_handshake_client_step+0x12e4>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80211f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80211f6:	2b16      	cmp	r3, #22
 80211f8:	d14e      	bne.n	8021298 <mbedtls_ssl_handshake_client_step+0x12fc>
    ssl->state++;
 80211fa:	6863      	ldr	r3, [r4, #4]
 80211fc:	3301      	adds	r3, #1
 80211fe:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8021200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021202:	781a      	ldrb	r2, [r3, #0]
 8021204:	2a0d      	cmp	r2, #13
 8021206:	bf14      	ite	ne
 8021208:	2300      	movne	r3, #0
 802120a:	2301      	moveq	r3, #1
 802120c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 8021210:	4b97      	ldr	r3, [pc, #604]	; (8021470 <mbedtls_ssl_handshake_client_step+0x14d4>)
 8021212:	4998      	ldr	r1, [pc, #608]	; (8021474 <mbedtls_ssl_handshake_client_step+0x14d8>)
 8021214:	2a0d      	cmp	r2, #13
 8021216:	bf18      	it	ne
 8021218:	460b      	movne	r3, r1
 802121a:	9301      	str	r3, [sp, #4]
 802121c:	4b96      	ldr	r3, [pc, #600]	; (8021478 <mbedtls_ssl_handshake_client_step+0x14dc>)
 802121e:	9300      	str	r3, [sp, #0]
 8021220:	f640 23a3 	movw	r3, #2723	; 0xaa3
 8021224:	4a8c      	ldr	r2, [pc, #560]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021226:	2103      	movs	r1, #3
 8021228:	4620      	mov	r0, r4
 802122a:	f7f4 fa71 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 802122e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8021232:	2b00      	cmp	r3, #0
 8021234:	d041      	beq.n	80212ba <mbedtls_ssl_handshake_client_step+0x131e>
    buf = ssl->in_msg;
 8021236:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 802123a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 802123c:	2b04      	cmp	r3, #4
 802123e:	d940      	bls.n	80212c2 <mbedtls_ssl_handshake_client_step+0x1326>
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 8021240:	f898 7004 	ldrb.w	r7, [r8, #4]
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 8021244:	1dba      	adds	r2, r7, #6
 8021246:	4293      	cmp	r3, r2
 8021248:	d94c      	bls.n	80212e4 <mbedtls_ssl_handshake_client_step+0x1348>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802124a:	68e1      	ldr	r1, [r4, #12]
 802124c:	2903      	cmp	r1, #3
 802124e:	d05a      	beq.n	8021306 <mbedtls_ssl_handshake_client_step+0x136a>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8021250:	44b8      	add	r8, r7
 8021252:	f898 2005 	ldrb.w	r2, [r8, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 8021256:	f898 3006 	ldrb.w	r3, [r8, #6]
 802125a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 802125e:	3707      	adds	r7, #7
 8021260:	441f      	add	r7, r3
 8021262:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8021264:	42bb      	cmp	r3, r7
 8021266:	f040 808e 	bne.w	8021386 <mbedtls_ssl_handshake_client_step+0x13ea>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 802126a:	4b84      	ldr	r3, [pc, #528]	; (802147c <mbedtls_ssl_handshake_client_step+0x14e0>)
 802126c:	9300      	str	r3, [sp, #0]
 802126e:	f640 331e 	movw	r3, #2846	; 0xb1e
 8021272:	4a79      	ldr	r2, [pc, #484]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021274:	2102      	movs	r1, #2
 8021276:	4620      	mov	r0, r4
 8021278:	f7f4 fa4a 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 802127c:	f7fe bec1 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8021280:	9001      	str	r0, [sp, #4]
 8021282:	4b7f      	ldr	r3, [pc, #508]	; (8021480 <mbedtls_ssl_handshake_client_step+0x14e4>)
 8021284:	9300      	str	r3, [sp, #0]
 8021286:	f640 2394 	movw	r3, #2708	; 0xa94
 802128a:	4a73      	ldr	r2, [pc, #460]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 802128c:	2101      	movs	r1, #1
 802128e:	4620      	mov	r0, r4
 8021290:	f7f4 fa70 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8021294:	f7fe beb5 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8021298:	4b7a      	ldr	r3, [pc, #488]	; (8021484 <mbedtls_ssl_handshake_client_step+0x14e8>)
 802129a:	9300      	str	r3, [sp, #0]
 802129c:	f640 239a 	movw	r3, #2714	; 0xa9a
 80212a0:	4a6d      	ldr	r2, [pc, #436]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80212a2:	2101      	movs	r1, #1
 80212a4:	4620      	mov	r0, r4
 80212a6:	f7f4 fa33 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80212aa:	220a      	movs	r2, #10
 80212ac:	2102      	movs	r1, #2
 80212ae:	4620      	mov	r0, r4
 80212b0:	f003 fdfa 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80212b4:	4d69      	ldr	r5, [pc, #420]	; (802145c <mbedtls_ssl_handshake_client_step+0x14c0>)
 80212b6:	f7fe bea4 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        ssl->keep_current_message = 1;
 80212ba:	2301      	movs	r3, #1
 80212bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        goto exit;
 80212c0:	e7d3      	b.n	802126a <mbedtls_ssl_handshake_client_step+0x12ce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80212c2:	4b70      	ldr	r3, [pc, #448]	; (8021484 <mbedtls_ssl_handshake_client_step+0x14e8>)
 80212c4:	9300      	str	r3, [sp, #0]
 80212c6:	f640 23ca 	movw	r3, #2762	; 0xaca
 80212ca:	4a63      	ldr	r2, [pc, #396]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80212cc:	2101      	movs	r1, #1
 80212ce:	4620      	mov	r0, r4
 80212d0:	f7f4 fa1e 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80212d4:	2232      	movs	r2, #50	; 0x32
 80212d6:	2102      	movs	r1, #2
 80212d8:	4620      	mov	r0, r4
 80212da:	f003 fde5 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80212de:	4d6a      	ldr	r5, [pc, #424]	; (8021488 <mbedtls_ssl_handshake_client_step+0x14ec>)
 80212e0:	f7fe be8f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 80212e4:	4b67      	ldr	r3, [pc, #412]	; (8021484 <mbedtls_ssl_handshake_client_step+0x14e8>)
 80212e6:	9300      	str	r3, [sp, #0]
 80212e8:	f640 23de 	movw	r3, #2782	; 0xade
 80212ec:	4a5a      	ldr	r2, [pc, #360]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80212ee:	2101      	movs	r1, #1
 80212f0:	4620      	mov	r0, r4
 80212f2:	f7f4 fa0d 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80212f6:	2232      	movs	r2, #50	; 0x32
 80212f8:	2102      	movs	r1, #2
 80212fa:	4620      	mov	r0, r4
 80212fc:	f003 fdd4 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8021300:	4d61      	ldr	r5, [pc, #388]	; (8021488 <mbedtls_ssl_handshake_client_step+0x14ec>)
 8021302:	f7fe be7e 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 8021306:	eb08 0107 	add.w	r1, r8, r7
 802130a:	7949      	ldrb	r1, [r1, #5]
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 802130c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021310:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8021314:	4611      	mov	r1, r2
 8021316:	9208      	str	r2, [sp, #32]
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        return( 12 );
#else
    ((void) ssl);
#endif
    return( 4 );
 8021318:	1dfa      	adds	r2, r7, #7
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 802131a:	1851      	adds	r1, r2, r1
 802131c:	428b      	cmp	r3, r1
 802131e:	d921      	bls.n	8021364 <mbedtls_ssl_handshake_client_step+0x13c8>
        sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 8021320:	eb08 0302 	add.w	r3, r8, r2
        for( i = 0; i < sig_alg_len; i += 2 )
 8021324:	9a08      	ldr	r2, [sp, #32]
 8021326:	b1ca      	cbz	r2, 802135c <mbedtls_ssl_handshake_client_step+0x13c0>
 8021328:	461e      	mov	r6, r3
 802132a:	f102 39ff 	add.w	r9, r2, #4294967295
 802132e:	f029 0901 	bic.w	r9, r9, #1
 8021332:	3302      	adds	r3, #2
 8021334:	4499      	add	r9, r3
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 8021336:	f8df b120 	ldr.w	fp, [pc, #288]	; 8021458 <mbedtls_ssl_handshake_client_step+0x14bc>
 802133a:	f640 3a07 	movw	sl, #2823	; 0xb07
 802133e:	7873      	ldrb	r3, [r6, #1]
 8021340:	9302      	str	r3, [sp, #8]
 8021342:	f816 3b02 	ldrb.w	r3, [r6], #2
 8021346:	9301      	str	r3, [sp, #4]
 8021348:	4b50      	ldr	r3, [pc, #320]	; (802148c <mbedtls_ssl_handshake_client_step+0x14f0>)
 802134a:	9300      	str	r3, [sp, #0]
 802134c:	4653      	mov	r3, sl
 802134e:	465a      	mov	r2, fp
 8021350:	2103      	movs	r1, #3
 8021352:	4620      	mov	r0, r4
 8021354:	f7f4 f9dc 	bl	8015710 <mbedtls_debug_print_msg>
        for( i = 0; i < sig_alg_len; i += 2 )
 8021358:	454e      	cmp	r6, r9
 802135a:	d1f0      	bne.n	802133e <mbedtls_ssl_handshake_client_step+0x13a2>
        n += 2 + sig_alg_len;
 802135c:	3702      	adds	r7, #2
 802135e:	9b08      	ldr	r3, [sp, #32]
 8021360:	441f      	add	r7, r3
 8021362:	e775      	b.n	8021250 <mbedtls_ssl_handshake_client_step+0x12b4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8021364:	4b47      	ldr	r3, [pc, #284]	; (8021484 <mbedtls_ssl_handshake_client_step+0x14e8>)
 8021366:	9300      	str	r3, [sp, #0]
 8021368:	f640 23fd 	movw	r3, #2813	; 0xafd
 802136c:	4a3a      	ldr	r2, [pc, #232]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 802136e:	2101      	movs	r1, #1
 8021370:	4620      	mov	r0, r4
 8021372:	f7f4 f9cd 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021376:	2232      	movs	r2, #50	; 0x32
 8021378:	2102      	movs	r1, #2
 802137a:	4620      	mov	r0, r4
 802137c:	f003 fd94 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 8021380:	4d41      	ldr	r5, [pc, #260]	; (8021488 <mbedtls_ssl_handshake_client_step+0x14ec>)
 8021382:	f7fe be3e 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 8021386:	4b3f      	ldr	r3, [pc, #252]	; (8021484 <mbedtls_ssl_handshake_client_step+0x14e8>)
 8021388:	9300      	str	r3, [sp, #0]
 802138a:	f640 3317 	movw	r3, #2839	; 0xb17
 802138e:	4a32      	ldr	r2, [pc, #200]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021390:	2101      	movs	r1, #1
 8021392:	4620      	mov	r0, r4
 8021394:	f7f4 f9bc 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021398:	2232      	movs	r2, #50	; 0x32
 802139a:	2102      	movs	r1, #2
 802139c:	4620      	mov	r0, r4
 802139e:	f003 fd83 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80213a2:	4d39      	ldr	r5, [pc, #228]	; (8021488 <mbedtls_ssl_handshake_client_step+0x14ec>)
 80213a4:	f7fe be2d 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 80213a8:	4b39      	ldr	r3, [pc, #228]	; (8021490 <mbedtls_ssl_handshake_client_step+0x14f4>)
 80213aa:	9300      	str	r3, [sp, #0]
 80213ac:	f640 3328 	movw	r3, #2856	; 0xb28
 80213b0:	4a29      	ldr	r2, [pc, #164]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80213b2:	2102      	movs	r1, #2
 80213b4:	4620      	mov	r0, r4
 80213b6:	f7f4 f9ab 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80213ba:	2101      	movs	r1, #1
 80213bc:	4620      	mov	r0, r4
 80213be:	f003 fdcb 	bl	8024f58 <mbedtls_ssl_read_record>
 80213c2:	4605      	mov	r5, r0
 80213c4:	b9b8      	cbnz	r0, 80213f6 <mbedtls_ssl_handshake_client_step+0x145a>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80213c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80213c8:	2b16      	cmp	r3, #22
 80213ca:	d120      	bne.n	802140e <mbedtls_ssl_handshake_client_step+0x1472>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80213cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80213ce:	2b04      	cmp	r3, #4
 80213d0:	d129      	bne.n	8021426 <mbedtls_ssl_handshake_client_step+0x148a>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 80213d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80213d4:	781b      	ldrb	r3, [r3, #0]
 80213d6:	2b0e      	cmp	r3, #14
 80213d8:	d125      	bne.n	8021426 <mbedtls_ssl_handshake_client_step+0x148a>
    ssl->state++;
 80213da:	6863      	ldr	r3, [r4, #4]
 80213dc:	3301      	adds	r3, #1
 80213de:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 80213e0:	4b2c      	ldr	r3, [pc, #176]	; (8021494 <mbedtls_ssl_handshake_client_step+0x14f8>)
 80213e2:	9300      	str	r3, [sp, #0]
 80213e4:	f640 3346 	movw	r3, #2886	; 0xb46
 80213e8:	4a1b      	ldr	r2, [pc, #108]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 80213ea:	2102      	movs	r1, #2
 80213ec:	4620      	mov	r0, r4
 80213ee:	f7f4 f98f 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 80213f2:	f7fe be06 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80213f6:	9001      	str	r0, [sp, #4]
 80213f8:	4b21      	ldr	r3, [pc, #132]	; (8021480 <mbedtls_ssl_handshake_client_step+0x14e4>)
 80213fa:	9300      	str	r3, [sp, #0]
 80213fc:	f640 332c 	movw	r3, #2860	; 0xb2c
 8021400:	4a15      	ldr	r2, [pc, #84]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021402:	2101      	movs	r1, #1
 8021404:	4620      	mov	r0, r4
 8021406:	f7f4 f9b5 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802140a:	f7fe bdfa 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 802140e:	4b22      	ldr	r3, [pc, #136]	; (8021498 <mbedtls_ssl_handshake_client_step+0x14fc>)
 8021410:	9300      	str	r3, [sp, #0]
 8021412:	f640 3332 	movw	r3, #2866	; 0xb32
 8021416:	4a10      	ldr	r2, [pc, #64]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021418:	2101      	movs	r1, #1
 802141a:	4620      	mov	r0, r4
 802141c:	f7f4 f978 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8021420:	4d0e      	ldr	r5, [pc, #56]	; (802145c <mbedtls_ssl_handshake_client_step+0x14c0>)
 8021422:	f7fe bdee 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 8021426:	4b1c      	ldr	r3, [pc, #112]	; (8021498 <mbedtls_ssl_handshake_client_step+0x14fc>)
 8021428:	9300      	str	r3, [sp, #0]
 802142a:	f640 3339 	movw	r3, #2873	; 0xb39
 802142e:	4a0a      	ldr	r2, [pc, #40]	; (8021458 <mbedtls_ssl_handshake_client_step+0x14bc>)
 8021430:	2101      	movs	r1, #1
 8021432:	4620      	mov	r0, r4
 8021434:	f7f4 f96c 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021438:	2232      	movs	r2, #50	; 0x32
 802143a:	2102      	movs	r1, #2
 802143c:	4620      	mov	r0, r4
 802143e:	f003 fd33 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 8021442:	4d16      	ldr	r5, [pc, #88]	; (802149c <mbedtls_ssl_handshake_client_step+0x1500>)
 8021444:	f7fe bddd 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_write_certificate( ssl );
 8021448:	4620      	mov	r0, r4
 802144a:	f004 f8c9 	bl	80255e0 <mbedtls_ssl_write_certificate>
 802144e:	4605      	mov	r5, r0
           break;
 8021450:	f7fe bdd7 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 8021454:	08034244 	.word	0x08034244
 8021458:	08033a08 	.word	0x08033a08
 802145c:	ffff8900 	.word	0xffff8900
 8021460:	080340b0 	.word	0x080340b0
 8021464:	ffff9300 	.word	0xffff9300
 8021468:	08034290 	.word	0x08034290
 802146c:	080342b0 	.word	0x080342b0
 8021470:	08035e00 	.word	0x08035e00
 8021474:	08033a04 	.word	0x08033a04
 8021478:	080342f4 	.word	0x080342f4
 802147c:	0803433c 	.word	0x0803433c
 8021480:	08033d80 	.word	0x08033d80
 8021484:	080342d4 	.word	0x080342d4
 8021488:	ffff8580 	.word	0xffff8580
 802148c:	08034310 	.word	0x08034310
 8021490:	0803435c 	.word	0x0803435c
 8021494:	08034398 	.word	0x08034398
 8021498:	08034378 	.word	0x08034378
 802149c:	ffff8480 	.word	0xffff8480
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80214a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80214a2:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 80214a4:	4b94      	ldr	r3, [pc, #592]	; (80216f8 <mbedtls_ssl_handshake_client_step+0x175c>)
 80214a6:	9300      	str	r3, [sp, #0]
 80214a8:	f640 3352 	movw	r3, #2898	; 0xb52
 80214ac:	4a93      	ldr	r2, [pc, #588]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80214ae:	2102      	movs	r1, #2
 80214b0:	4620      	mov	r0, r4
 80214b2:	f7f4 f92d 	bl	8015710 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 80214b6:	7aaa      	ldrb	r2, [r5, #10]
 80214b8:	1ed3      	subs	r3, r2, #3
 80214ba:	b2db      	uxtb	r3, r3
 80214bc:	2b01      	cmp	r3, #1
 80214be:	d960      	bls.n	8021582 <mbedtls_ssl_handshake_client_step+0x15e6>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 80214c0:	f1a2 0309 	sub.w	r3, r2, #9
 80214c4:	b2db      	uxtb	r3, r3
 80214c6:	2b01      	cmp	r3, #1
 80214c8:	d95b      	bls.n	8021582 <mbedtls_ssl_handshake_client_step+0x15e6>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80214ca:	2a01      	cmp	r2, #1
 80214cc:	f040 80fc 	bne.w	80216c8 <mbedtls_ssl_handshake_client_step+0x172c>
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80214d0:	68e3      	ldr	r3, [r4, #12]
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	bf0c      	ite	eq
 80214d6:	2700      	moveq	r7, #0
 80214d8:	2702      	movne	r7, #2
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80214da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80214dc:	f505 7655 	add.w	r6, r5, #852	; 0x354
    if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
 80214e0:	f107 0804 	add.w	r8, r7, #4
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80214e4:	6820      	ldr	r0, [r4, #0]
                       ssl->conf->transport, p );
 80214e6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80214ea:	4633      	mov	r3, r6
 80214ec:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80214f0:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
 80214f4:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
 80214f8:	f005 fc68 	bl	8026dcc <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80214fc:	6823      	ldr	r3, [r4, #0]
 80214fe:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8021502:	222e      	movs	r2, #46	; 0x2e
 8021504:	f205 3156 	addw	r1, r5, #854	; 0x356
 8021508:	69d8      	ldr	r0, [r3, #28]
 802150a:	47c8      	blx	r9
 802150c:	4605      	mov	r5, r0
 802150e:	2800      	cmp	r0, #0
 8021510:	f040 80aa 	bne.w	8021668 <mbedtls_ssl_handshake_client_step+0x16cc>
    ssl->handshake->pmslen = 48;
 8021514:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021516:	2230      	movs	r2, #48	; 0x30
 8021518:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    if( ssl->session_negotiate->peer_cert == NULL )
 802151c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802151e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8021520:	2800      	cmp	r0, #0
 8021522:	f000 80ad 	beq.w	8021680 <mbedtls_ssl_handshake_client_step+0x16e4>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 8021526:	2101      	movs	r1, #1
 8021528:	30bc      	adds	r0, #188	; 0xbc
 802152a:	f7f8 fde3 	bl	801a0f4 <mbedtls_pk_can_do>
 802152e:	2800      	cmp	r0, #0
 8021530:	f000 80b2 	beq.w	8021698 <mbedtls_ssl_handshake_client_step+0x16fc>
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8021534:	6821      	ldr	r1, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8021536:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802153a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802153c:	f8d2 2310 	ldr.w	r2, [r2, #784]	; 0x310
 8021540:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8021542:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8021544:	69cd      	ldr	r5, [r1, #28]
 8021546:	9503      	str	r5, [sp, #12]
 8021548:	6989      	ldr	r1, [r1, #24]
 802154a:	9102      	str	r1, [sp, #8]
 802154c:	f5c8 5100 	rsb	r1, r8, #8192	; 0x2000
 8021550:	9101      	str	r1, [sp, #4]
 8021552:	a90c      	add	r1, sp, #48	; 0x30
 8021554:	9100      	str	r1, [sp, #0]
 8021556:	4443      	add	r3, r8
 8021558:	4631      	mov	r1, r6
 802155a:	30bc      	adds	r0, #188	; 0xbc
 802155c:	f7f8 fe60 	bl	801a220 <mbedtls_pk_encrypt>
 8021560:	4605      	mov	r5, r0
 8021562:	2800      	cmp	r0, #0
 8021564:	f040 80a4 	bne.w	80216b0 <mbedtls_ssl_handshake_client_step+0x1714>
    if( len_bytes == 2 )
 8021568:	2f00      	cmp	r7, #0
 802156a:	d046      	beq.n	80215fa <mbedtls_ssl_handshake_client_step+0x165e>
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 802156c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802156e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8021572:	0a19      	lsrs	r1, r3, #8
 8021574:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 8021576:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 802157a:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 802157c:	3302      	adds	r3, #2
 802157e:	930c      	str	r3, [sp, #48]	; 0x30
 8021580:	e03b      	b.n	80215fa <mbedtls_ssl_handshake_client_step+0x165e>
                                ssl->conf->f_rng, ssl->conf->p_rng );
 8021582:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 8021584:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8021588:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802158a:	69d9      	ldr	r1, [r3, #28]
 802158c:	9101      	str	r1, [sp, #4]
 802158e:	699b      	ldr	r3, [r3, #24]
 8021590:	9300      	str	r3, [sp, #0]
 8021592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021596:	3204      	adds	r2, #4
 8021598:	a90c      	add	r1, sp, #48	; 0x30
 802159a:	3080      	adds	r0, #128	; 0x80
 802159c:	f7f4 fcf4 	bl	8015f88 <mbedtls_ecdh_make_public>
        if( ret != 0 )
 80215a0:	4605      	mov	r5, r0
 80215a2:	2800      	cmp	r0, #0
 80215a4:	d148      	bne.n	8021638 <mbedtls_ssl_handshake_client_step+0x169c>
        MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 80215a6:	2300      	movs	r3, #0
 80215a8:	9301      	str	r3, [sp, #4]
 80215aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80215ac:	3380      	adds	r3, #128	; 0x80
 80215ae:	9300      	str	r3, [sp, #0]
 80215b0:	f640 33a1 	movw	r3, #2977	; 0xba1
 80215b4:	4a51      	ldr	r2, [pc, #324]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80215b6:	2103      	movs	r1, #3
 80215b8:	4620      	mov	r0, r4
 80215ba:	f7f4 fb93 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 80215be:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80215c0:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 80215c2:	69da      	ldr	r2, [r3, #28]
 80215c4:	9201      	str	r2, [sp, #4]
 80215c6:	699b      	ldr	r3, [r3, #24]
 80215c8:	9300      	str	r3, [sp, #0]
 80215ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80215ce:	f500 7255 	add.w	r2, r0, #852	; 0x354
 80215d2:	f500 7144 	add.w	r1, r0, #784	; 0x310
 80215d6:	3080      	adds	r0, #128	; 0x80
 80215d8:	f7f4 fd14 	bl	8016004 <mbedtls_ecdh_calc_secret>
 80215dc:	4605      	mov	r5, r0
 80215de:	2800      	cmp	r0, #0
 80215e0:	d136      	bne.n	8021650 <mbedtls_ssl_handshake_client_step+0x16b4>
        MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 80215e2:	2302      	movs	r3, #2
 80215e4:	9301      	str	r3, [sp, #4]
 80215e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80215e8:	3380      	adds	r3, #128	; 0x80
 80215ea:	9300      	str	r3, [sp, #0]
 80215ec:	f640 33bd 	movw	r3, #3005	; 0xbbd
 80215f0:	4a42      	ldr	r2, [pc, #264]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80215f2:	2103      	movs	r1, #3
 80215f4:	4620      	mov	r0, r4
 80215f6:	f7f4 fb75 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
    ssl->out_msglen  = i + n;
 80215fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215fc:	3304      	adds	r3, #4
 80215fe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8021602:	2316      	movs	r3, #22
 8021604:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 8021608:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802160c:	2210      	movs	r2, #16
 802160e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 8021610:	6863      	ldr	r3, [r4, #4]
 8021612:	3301      	adds	r3, #1
 8021614:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 8021616:	4620      	mov	r0, r4
 8021618:	f003 fab8 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 802161c:	4605      	mov	r5, r0
 802161e:	2800      	cmp	r0, #0
 8021620:	d15e      	bne.n	80216e0 <mbedtls_ssl_handshake_client_step+0x1744>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 8021622:	4b37      	ldr	r3, [pc, #220]	; (8021700 <mbedtls_ssl_handshake_client_step+0x1764>)
 8021624:	9300      	str	r3, [sp, #0]
 8021626:	f640 4364 	movw	r3, #3172	; 0xc64
 802162a:	4a34      	ldr	r2, [pc, #208]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 802162c:	2102      	movs	r1, #2
 802162e:	4620      	mov	r0, r4
 8021630:	f7f4 f86e 	bl	8015710 <mbedtls_debug_print_msg>
           break;
 8021634:	f7fe bce5 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_public", ret );
 8021638:	9001      	str	r0, [sp, #4]
 802163a:	4b32      	ldr	r3, [pc, #200]	; (8021704 <mbedtls_ssl_handshake_client_step+0x1768>)
 802163c:	9300      	str	r3, [sp, #0]
 802163e:	f640 3399 	movw	r3, #2969	; 0xb99
 8021642:	4a2e      	ldr	r2, [pc, #184]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 8021644:	2101      	movs	r1, #1
 8021646:	4620      	mov	r0, r4
 8021648:	f7f4 f894 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 802164c:	f7fe bcd9 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 8021650:	9001      	str	r0, [sp, #4]
 8021652:	4b2d      	ldr	r3, [pc, #180]	; (8021708 <mbedtls_ssl_handshake_client_step+0x176c>)
 8021654:	9300      	str	r3, [sp, #0]
 8021656:	f640 33b5 	movw	r3, #2997	; 0xbb5
 802165a:	4a28      	ldr	r2, [pc, #160]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 802165c:	2101      	movs	r1, #1
 802165e:	4620      	mov	r0, r4
 8021660:	f7f4 f888 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8021664:	f7fe bccd 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 8021668:	9001      	str	r0, [sp, #4]
 802166a:	4b28      	ldr	r3, [pc, #160]	; (802170c <mbedtls_ssl_handshake_client_step+0x1770>)
 802166c:	9300      	str	r3, [sp, #0]
 802166e:	f640 0382 	movw	r3, #2178	; 0x882
 8021672:	4a22      	ldr	r2, [pc, #136]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 8021674:	2101      	movs	r1, #1
 8021676:	4620      	mov	r0, r4
 8021678:	f7f4 f87c 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802167c:	f7fe bcc1 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 8021680:	4b23      	ldr	r3, [pc, #140]	; (8021710 <mbedtls_ssl_handshake_client_step+0x1774>)
 8021682:	9300      	str	r3, [sp, #0]
 8021684:	f640 038a 	movw	r3, #2186	; 0x88a
 8021688:	4a1c      	ldr	r2, [pc, #112]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 802168a:	2102      	movs	r1, #2
 802168c:	4620      	mov	r0, r4
 802168e:	f7f4 f83f 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8021692:	4d20      	ldr	r5, [pc, #128]	; (8021714 <mbedtls_ssl_handshake_client_step+0x1778>)
 8021694:	f7fe bcb5 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 8021698:	4b1f      	ldr	r3, [pc, #124]	; (8021718 <mbedtls_ssl_handshake_client_step+0x177c>)
 802169a:	9300      	str	r3, [sp, #0]
 802169c:	f640 0394 	movw	r3, #2196	; 0x894
 80216a0:	4a16      	ldr	r2, [pc, #88]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80216a2:	2101      	movs	r1, #1
 80216a4:	4620      	mov	r0, r4
 80216a6:	f7f4 f833 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80216aa:	4d1c      	ldr	r5, [pc, #112]	; (802171c <mbedtls_ssl_handshake_client_step+0x1780>)
 80216ac:	f7fe bca9 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 80216b0:	9001      	str	r0, [sp, #4]
 80216b2:	4b1b      	ldr	r3, [pc, #108]	; (8021720 <mbedtls_ssl_handshake_client_step+0x1784>)
 80216b4:	9300      	str	r3, [sp, #0]
 80216b6:	f640 039e 	movw	r3, #2206	; 0x89e
 80216ba:	4a10      	ldr	r2, [pc, #64]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80216bc:	2101      	movs	r1, #1
 80216be:	4620      	mov	r0, r4
 80216c0:	f7f4 f858 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80216c4:	f7fe bc9d 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80216c8:	4b16      	ldr	r3, [pc, #88]	; (8021724 <mbedtls_ssl_handshake_client_step+0x1788>)
 80216ca:	9300      	str	r3, [sp, #0]
 80216cc:	f640 4354 	movw	r3, #3156	; 0xc54
 80216d0:	4a0a      	ldr	r2, [pc, #40]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80216d2:	2101      	movs	r1, #1
 80216d4:	4620      	mov	r0, r4
 80216d6:	f7f4 f81b 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80216da:	4d13      	ldr	r5, [pc, #76]	; (8021728 <mbedtls_ssl_handshake_client_step+0x178c>)
 80216dc:	f7fe bc91 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 80216e0:	9001      	str	r0, [sp, #4]
 80216e2:	4b12      	ldr	r3, [pc, #72]	; (802172c <mbedtls_ssl_handshake_client_step+0x1790>)
 80216e4:	9300      	str	r3, [sp, #0]
 80216e6:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 80216ea:	4a04      	ldr	r2, [pc, #16]	; (80216fc <mbedtls_ssl_handshake_client_step+0x1760>)
 80216ec:	2101      	movs	r1, #1
 80216ee:	4620      	mov	r0, r4
 80216f0:	f7f4 f840 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80216f4:	f7fe bc85 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 80216f8:	080343b4 	.word	0x080343b4
 80216fc:	08033a08 	.word	0x08033a08
 8021700:	08034450 	.word	0x08034450
 8021704:	080343d4 	.word	0x080343d4
 8021708:	080343f0 	.word	0x080343f0
 802170c:	0803440c 	.word	0x0803440c
 8021710:	08034244 	.word	0x08034244
 8021714:	ffff8900 	.word	0xffff8900
 8021718:	08034414 	.word	0x08034414
 802171c:	ffff9300 	.word	0xffff9300
 8021720:	08034434 	.word	0x08034434
 8021724:	08034130 	.word	0x08034130
 8021728:	ffff9400 	.word	0xffff9400
 802172c:	08033d30 	.word	0x08033d30
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8021730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021732:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 8021734:	2300      	movs	r3, #0
 8021736:	930b      	str	r3, [sp, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 8021738:	4ba7      	ldr	r3, [pc, #668]	; (80219d8 <mbedtls_ssl_handshake_client_step+0x1a3c>)
 802173a:	9300      	str	r3, [sp, #0]
 802173c:	f640 4398 	movw	r3, #3224	; 0xc98
 8021740:	4aa6      	ldr	r2, [pc, #664]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021742:	2102      	movs	r1, #2
 8021744:	4620      	mov	r0, r4
 8021746:	f7f3 ffe3 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 802174a:	4620      	mov	r0, r4
 802174c:	f002 fbfc 	bl	8023f48 <mbedtls_ssl_derive_keys>
 8021750:	4605      	mov	r5, r0
 8021752:	2800      	cmp	r0, #0
 8021754:	f040 808c 	bne.w	8021870 <mbedtls_ssl_handshake_client_step+0x18d4>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8021758:	7ab2      	ldrb	r2, [r6, #10]
 802175a:	1f53      	subs	r3, r2, #5
 802175c:	b2db      	uxtb	r3, r3
 802175e:	2b03      	cmp	r3, #3
 8021760:	f240 8092 	bls.w	8021888 <mbedtls_ssl_handshake_client_step+0x18ec>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 8021764:	2a0b      	cmp	r2, #11
 8021766:	f000 808f 	beq.w	8021888 <mbedtls_ssl_handshake_client_step+0x18ec>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 802176a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 802176e:	2b00      	cmp	r3, #0
 8021770:	f000 80b1 	beq.w	80218d6 <mbedtls_ssl_handshake_client_step+0x193a>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8021774:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021776:	2b00      	cmp	r3, #0
 8021778:	f000 8094 	beq.w	80218a4 <mbedtls_ssl_handshake_client_step+0x1908>
 802177c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8021780:	2a00      	cmp	r2, #0
 8021782:	f000 808f 	beq.w	80218a4 <mbedtls_ssl_handshake_client_step+0x1908>
 8021786:	6812      	ldr	r2, [r2, #0]
 8021788:	2a00      	cmp	r2, #0
 802178a:	f000 80a4 	beq.w	80218d6 <mbedtls_ssl_handshake_client_step+0x193a>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 802178e:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8021792:	2a00      	cmp	r2, #0
 8021794:	f000 808e 	beq.w	80218b4 <mbedtls_ssl_handshake_client_step+0x1918>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 8021798:	6852      	ldr	r2, [r2, #4]
 802179a:	2a00      	cmp	r2, #0
 802179c:	f000 808f 	beq.w	80218be <mbedtls_ssl_handshake_client_step+0x1922>
    ssl->handshake->calc_verify( ssl, hash );
 80217a0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80217a4:	a90c      	add	r1, sp, #48	; 0x30
 80217a6:	4620      	mov	r0, r4
 80217a8:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80217aa:	68e3      	ldr	r3, [r4, #12]
 80217ac:	2b03      	cmp	r3, #3
 80217ae:	f040 80b1 	bne.w	8021914 <mbedtls_ssl_handshake_client_step+0x1978>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80217b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	7a5d      	ldrb	r5, [r3, #9]
 80217b8:	2d07      	cmp	r5, #7
 80217ba:	f000 809a 	beq.w	80218f2 <mbedtls_ssl_handshake_client_step+0x1956>
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80217be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80217c2:	2204      	movs	r2, #4
 80217c4:	711a      	strb	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA256;
 80217c6:	2506      	movs	r5, #6
 80217c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	f000 8096 	beq.w	80218fc <mbedtls_ssl_handshake_client_step+0x1960>
 80217d0:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 80217d4:	2800      	cmp	r0, #0
 80217d6:	f000 8091 	beq.w	80218fc <mbedtls_ssl_handshake_client_step+0x1960>
    return( key_cert == NULL ? NULL : key_cert->key );
 80217da:	6840      	ldr	r0, [r0, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80217dc:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 80217e0:	f004 ffce 	bl	8026780 <mbedtls_ssl_sig_from_pk>
 80217e4:	7170      	strb	r0, [r6, #5]
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80217e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80217e8:	2b00      	cmp	r3, #0
 80217ea:	f000 808d 	beq.w	8021908 <mbedtls_ssl_handshake_client_step+0x196c>
 80217ee:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 80217f2:	2800      	cmp	r0, #0
 80217f4:	f000 8088 	beq.w	8021908 <mbedtls_ssl_handshake_client_step+0x196c>
    return( key_cert == NULL ? NULL : key_cert->key );
 80217f8:	6840      	ldr	r0, [r0, #4]
                         ssl->conf->f_rng, ssl->conf->p_rng, rs_ctx ) ) != 0 )
 80217fa:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_sign_restartable( mbedtls_ssl_own_key( ssl ),
 80217fc:	2300      	movs	r3, #0
 80217fe:	9304      	str	r3, [sp, #16]
 8021800:	69d1      	ldr	r1, [r2, #28]
 8021802:	9103      	str	r1, [sp, #12]
 8021804:	6992      	ldr	r2, [r2, #24]
 8021806:	9202      	str	r2, [sp, #8]
 8021808:	aa0b      	add	r2, sp, #44	; 0x2c
 802180a:	9201      	str	r2, [sp, #4]
 802180c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8021810:	3208      	adds	r2, #8
 8021812:	9200      	str	r2, [sp, #0]
 8021814:	aa0c      	add	r2, sp, #48	; 0x30
 8021816:	4629      	mov	r1, r5
 8021818:	f7f8 fcac 	bl	801a174 <mbedtls_pk_sign_restartable>
 802181c:	4605      	mov	r5, r0
 802181e:	2800      	cmp	r0, #0
 8021820:	f040 8084 	bne.w	802192c <mbedtls_ssl_handshake_client_step+0x1990>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8021824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021826:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 802182a:	0a19      	lsrs	r1, r3, #8
 802182c:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 802182e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8021832:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 8021834:	3308      	adds	r3, #8
 8021836:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802183a:	2316      	movs	r3, #22
 802183c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 8021840:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8021844:	220f      	movs	r2, #15
 8021846:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 8021848:	6863      	ldr	r3, [r4, #4]
 802184a:	3301      	adds	r3, #1
 802184c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802184e:	4620      	mov	r0, r4
 8021850:	f003 f99c 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 8021854:	4605      	mov	r5, r0
 8021856:	2800      	cmp	r0, #0
 8021858:	d174      	bne.n	8021944 <mbedtls_ssl_handshake_client_step+0x19a8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 802185a:	4b61      	ldr	r3, [pc, #388]	; (80219e0 <mbedtls_ssl_handshake_client_step+0x1a44>)
 802185c:	9300      	str	r3, [sp, #0]
 802185e:	f640 5337 	movw	r3, #3383	; 0xd37
 8021862:	4a5e      	ldr	r2, [pc, #376]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021864:	2102      	movs	r1, #2
 8021866:	4620      	mov	r0, r4
 8021868:	f7f3 ff52 	bl	8015710 <mbedtls_debug_print_msg>
           break;
 802186c:	f7fe bbc9 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8021870:	9001      	str	r0, [sp, #4]
 8021872:	4b5c      	ldr	r3, [pc, #368]	; (80219e4 <mbedtls_ssl_handshake_client_step+0x1a48>)
 8021874:	9300      	str	r3, [sp, #0]
 8021876:	f640 43a4 	movw	r3, #3236	; 0xca4
 802187a:	4a58      	ldr	r2, [pc, #352]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 802187c:	2101      	movs	r1, #1
 802187e:	4620      	mov	r0, r4
 8021880:	f7f3 ff78 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8021884:	f7fe bbbd 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 8021888:	4b57      	ldr	r3, [pc, #348]	; (80219e8 <mbedtls_ssl_handshake_client_step+0x1a4c>)
 802188a:	9300      	str	r3, [sp, #0]
 802188c:	f640 43ae 	movw	r3, #3246	; 0xcae
 8021890:	4a52      	ldr	r2, [pc, #328]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021892:	2102      	movs	r1, #2
 8021894:	4620      	mov	r0, r4
 8021896:	f7f3 ff3b 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 802189a:	6863      	ldr	r3, [r4, #4]
 802189c:	3301      	adds	r3, #1
 802189e:	6063      	str	r3, [r4, #4]
        return( 0 );
 80218a0:	f7fe bbaf 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        key_cert = ssl->conf->key_cert;
 80218a4:	6822      	ldr	r2, [r4, #0]
 80218a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 80218a8:	b1aa      	cbz	r2, 80218d6 <mbedtls_ssl_handshake_client_step+0x193a>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 80218aa:	6812      	ldr	r2, [r2, #0]
 80218ac:	b19a      	cbz	r2, 80218d6 <mbedtls_ssl_handshake_client_step+0x193a>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80218ae:	2b00      	cmp	r3, #0
 80218b0:	f47f af6d 	bne.w	802178e <mbedtls_ssl_handshake_client_step+0x17f2>
        key_cert = ssl->conf->key_cert;
 80218b4:	6822      	ldr	r2, [r4, #0]
 80218b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 80218b8:	2a00      	cmp	r2, #0
 80218ba:	f47f af6d 	bne.w	8021798 <mbedtls_ssl_handshake_client_step+0x17fc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 80218be:	4b4b      	ldr	r3, [pc, #300]	; (80219ec <mbedtls_ssl_handshake_client_step+0x1a50>)
 80218c0:	9300      	str	r3, [sp, #0]
 80218c2:	f640 43bc 	movw	r3, #3260	; 0xcbc
 80218c6:	4a45      	ldr	r2, [pc, #276]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 80218c8:	2101      	movs	r1, #1
 80218ca:	4620      	mov	r0, r4
 80218cc:	f7f3 ff20 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80218d0:	4d47      	ldr	r5, [pc, #284]	; (80219f0 <mbedtls_ssl_handshake_client_step+0x1a54>)
 80218d2:	f7fe bb96 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 80218d6:	4b44      	ldr	r3, [pc, #272]	; (80219e8 <mbedtls_ssl_handshake_client_step+0x1a4c>)
 80218d8:	9300      	str	r3, [sp, #0]
 80218da:	f640 43b5 	movw	r3, #3253	; 0xcb5
 80218de:	4a3f      	ldr	r2, [pc, #252]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 80218e0:	2102      	movs	r1, #2
 80218e2:	4620      	mov	r0, r4
 80218e4:	f7f3 ff14 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 80218e8:	6863      	ldr	r3, [r4, #4]
 80218ea:	3301      	adds	r3, #1
 80218ec:	6063      	str	r3, [r4, #4]
        return( 0 );
 80218ee:	f7fe bb88 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80218f2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80218f6:	2205      	movs	r2, #5
 80218f8:	711a      	strb	r2, [r3, #4]
 80218fa:	e765      	b.n	80217c8 <mbedtls_ssl_handshake_client_step+0x182c>
        key_cert = ssl->conf->key_cert;
 80218fc:	6823      	ldr	r3, [r4, #0]
 80218fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 8021900:	2800      	cmp	r0, #0
 8021902:	f47f af6a 	bne.w	80217da <mbedtls_ssl_handshake_client_step+0x183e>
 8021906:	e769      	b.n	80217dc <mbedtls_ssl_handshake_client_step+0x1840>
        key_cert = ssl->conf->key_cert;
 8021908:	6823      	ldr	r3, [r4, #0]
 802190a:	6b98      	ldr	r0, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 802190c:	2800      	cmp	r0, #0
 802190e:	f47f af73 	bne.w	80217f8 <mbedtls_ssl_handshake_client_step+0x185c>
 8021912:	e772      	b.n	80217fa <mbedtls_ssl_handshake_client_step+0x185e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8021914:	4b37      	ldr	r3, [pc, #220]	; (80219f4 <mbedtls_ssl_handshake_client_step+0x1a58>)
 8021916:	9300      	str	r3, [sp, #0]
 8021918:	f640 5312 	movw	r3, #3346	; 0xd12
 802191c:	4a2f      	ldr	r2, [pc, #188]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 802191e:	2101      	movs	r1, #1
 8021920:	4620      	mov	r0, r4
 8021922:	f7f3 fef5 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8021926:	4d34      	ldr	r5, [pc, #208]	; (80219f8 <mbedtls_ssl_handshake_client_step+0x1a5c>)
 8021928:	f7fe bb6b 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 802192c:	9001      	str	r0, [sp, #4]
 802192e:	4b33      	ldr	r3, [pc, #204]	; (80219fc <mbedtls_ssl_handshake_client_step+0x1a60>)
 8021930:	9300      	str	r3, [sp, #0]
 8021932:	f44f 6352 	mov.w	r3, #3360	; 0xd20
 8021936:	4a29      	ldr	r2, [pc, #164]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021938:	2101      	movs	r1, #1
 802193a:	4620      	mov	r0, r4
 802193c:	f7f3 ff1a 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8021940:	f7fe bb5f 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 8021944:	9001      	str	r0, [sp, #4]
 8021946:	4b2e      	ldr	r3, [pc, #184]	; (8021a00 <mbedtls_ssl_handshake_client_step+0x1a64>)
 8021948:	9300      	str	r3, [sp, #0]
 802194a:	f640 5333 	movw	r3, #3379	; 0xd33
 802194e:	4a23      	ldr	r2, [pc, #140]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021950:	2101      	movs	r1, #1
 8021952:	4620      	mov	r0, r4
 8021954:	f7f3 ff0e 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8021958:	f7fe bb53 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 802195c:	4620      	mov	r0, r4
 802195e:	f003 ff4f 	bl	8025800 <mbedtls_ssl_write_change_cipher_spec>
 8021962:	4605      	mov	r5, r0
           break;
 8021964:	f7fe bb4d 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_write_finished( ssl );
 8021968:	4620      	mov	r0, r4
 802196a:	f004 f803 	bl	8025974 <mbedtls_ssl_write_finished>
 802196e:	4605      	mov	r5, r0
           break;
 8021970:	f7fe bb47 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 8021974:	4620      	mov	r0, r4
 8021976:	f003 ff7f 	bl	8025878 <mbedtls_ssl_parse_change_cipher_spec>
 802197a:	4605      	mov	r5, r0
           break;
 802197c:	f7fe bb41 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           ret = mbedtls_ssl_parse_finished( ssl );
 8021980:	4620      	mov	r0, r4
 8021982:	f004 f871 	bl	8025a68 <mbedtls_ssl_parse_finished>
 8021986:	4605      	mov	r5, r0
           break;
 8021988:	f7fe bb3b 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 802198c:	4b1d      	ldr	r3, [pc, #116]	; (8021a04 <mbedtls_ssl_handshake_client_step+0x1a68>)
 802198e:	9300      	str	r3, [sp, #0]
 8021990:	f640 6325 	movw	r3, #3621	; 0xe25
 8021994:	4a11      	ldr	r2, [pc, #68]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 8021996:	2102      	movs	r1, #2
 8021998:	4620      	mov	r0, r4
 802199a:	f7f3 feb9 	bl	8015710 <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 802199e:	230f      	movs	r3, #15
 80219a0:	6063      	str	r3, [r4, #4]
           break;
 80219a2:	f7fe bb2e 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           mbedtls_ssl_handshake_wrapup( ssl );
 80219a6:	4620      	mov	r0, r4
 80219a8:	f004 fc4c 	bl	8026244 <mbedtls_ssl_handshake_wrapup>
           break;
 80219ac:	f7fe bb29 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 80219b0:	9301      	str	r3, [sp, #4]
 80219b2:	4b15      	ldr	r3, [pc, #84]	; (8021a08 <mbedtls_ssl_handshake_client_step+0x1a6c>)
 80219b4:	9300      	str	r3, [sp, #0]
 80219b6:	f640 632e 	movw	r3, #3630	; 0xe2e
 80219ba:	4a08      	ldr	r2, [pc, #32]	; (80219dc <mbedtls_ssl_handshake_client_step+0x1a40>)
 80219bc:	2101      	movs	r1, #1
 80219be:	4620      	mov	r0, r4
 80219c0:	f7f3 fea6 	bl	8015710 <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80219c4:	4d11      	ldr	r5, [pc, #68]	; (8021a0c <mbedtls_ssl_handshake_client_step+0x1a70>)
 80219c6:	f7fe bb1c 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80219ca:	4d10      	ldr	r5, [pc, #64]	; (8021a0c <mbedtls_ssl_handshake_client_step+0x1a70>)
 80219cc:	f7fe bb19 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 80219d0:	4d0e      	ldr	r5, [pc, #56]	; (8021a0c <mbedtls_ssl_handshake_client_step+0x1a70>)
 80219d2:	f7fe bb16 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 80219d6:	bf00      	nop
 80219d8:	08034470 	.word	0x08034470
 80219dc:	08033a08 	.word	0x08033a08
 80219e0:	080344e4 	.word	0x080344e4
 80219e4:	08033edc 	.word	0x08033edc
 80219e8:	0803448c 	.word	0x0803448c
 80219ec:	080344b0 	.word	0x080344b0
 80219f0:	ffff8a00 	.word	0xffff8a00
 80219f4:	08034130 	.word	0x08034130
 80219f8:	ffff9400 	.word	0xffff9400
 80219fc:	080344d4 	.word	0x080344d4
 8021a00:	08033d30 	.word	0x08033d30
 8021a04:	08034500 	.word	0x08034500
 8021a08:	08034510 	.word	0x08034510
 8021a0c:	ffff8f00 	.word	0xffff8f00
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 8021a10:	f8d8 3000 	ldr.w	r3, [r8]
 8021a14:	9301      	str	r3, [sp, #4]
 8021a16:	4b23      	ldr	r3, [pc, #140]	; (8021aa4 <mbedtls_ssl_handshake_client_step+0x1b08>)
 8021a18:	9300      	str	r3, [sp, #0]
 8021a1a:	f240 3399 	movw	r3, #921	; 0x399
 8021a1e:	4a22      	ldr	r2, [pc, #136]	; (8021aa8 <mbedtls_ssl_handshake_client_step+0x1b0c>)
 8021a20:	2103      	movs	r1, #3
 8021a22:	4620      	mov	r0, r4
 8021a24:	f7f3 fe74 	bl	8015710 <mbedtls_debug_print_msg>
        uses_ec |= mbedtls_ssl_ciphersuite_uses_ec( ciphersuite_info );
 8021a28:	4648      	mov	r0, r9
 8021a2a:	f7fe faa7 	bl	801ff7c <mbedtls_ssl_ciphersuite_uses_ec>
 8021a2e:	4305      	orrs	r5, r0
        n++;
 8021a30:	f10a 0a01 	add.w	sl, sl, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8021a34:	f8d8 3000 	ldr.w	r3, [r8]
 8021a38:	121a      	asrs	r2, r3, #8
 8021a3a:	463b      	mov	r3, r7
 8021a3c:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 8021a40:	f8d8 2000 	ldr.w	r2, [r8]
 8021a44:	707a      	strb	r2, [r7, #1]
 8021a46:	461f      	mov	r7, r3
    for( i = 0; ciphersuites[i] != 0; i++ )
 8021a48:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8021a4c:	2800      	cmp	r0, #0
 8021a4e:	f43e abcf 	beq.w	80201f0 <mbedtls_ssl_handshake_client_step+0x254>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 8021a52:	f7fe fa33 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
                                      ssl->conf->min_minor_ver,
 8021a56:	6823      	ldr	r3, [r4, #0]
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 8021a58:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
    if( suite_info == NULL )
 8021a5c:	4681      	mov	r9, r0
 8021a5e:	2800      	cmp	r0, #0
 8021a60:	d0f2      	beq.n	8021a48 <mbedtls_ssl_handshake_client_step+0x1aac>
    if( suite_info->min_minor_ver > max_minor_ver ||
 8021a62:	6901      	ldr	r1, [r0, #16]
 8021a64:	428a      	cmp	r2, r1
 8021a66:	dbef      	blt.n	8021a48 <mbedtls_ssl_handshake_client_step+0x1aac>
        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 8021a68:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
    if( suite_info->min_minor_ver > max_minor_ver ||
 8021a6c:	6983      	ldr	r3, [r0, #24]
 8021a6e:	429a      	cmp	r2, r3
 8021a70:	ddce      	ble.n	8021a10 <mbedtls_ssl_handshake_client_step+0x1a74>
 8021a72:	e7e9      	b.n	8021a48 <mbedtls_ssl_handshake_client_step+0x1aac>
    *p++ = (unsigned char) n;
 8021a74:	f106 0b27 	add.w	fp, r6, #39	; 0x27
 8021a78:	2700      	movs	r7, #0
 8021a7a:	f886 7026 	strb.w	r7, [r6, #38]	; 0x26
    for( i = 0; i < n; i++ )
 8021a7e:	f7fe bb6d 	b.w	802015c <mbedtls_ssl_handshake_client_step+0x1c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 8021a82:	4b0a      	ldr	r3, [pc, #40]	; (8021aac <mbedtls_ssl_handshake_client_step+0x1b10>)
 8021a84:	9300      	str	r3, [sp, #0]
 8021a86:	f240 63de 	movw	r3, #1758	; 0x6de
 8021a8a:	4a07      	ldr	r2, [pc, #28]	; (8021aa8 <mbedtls_ssl_handshake_client_step+0x1b0c>)
 8021a8c:	2101      	movs	r1, #1
 8021a8e:	4620      	mov	r0, r4
 8021a90:	f7f3 fe3e 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021a94:	222f      	movs	r2, #47	; 0x2f
 8021a96:	2102      	movs	r1, #2
 8021a98:	4620      	mov	r0, r4
 8021a9a:	f003 fa05 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 8021a9e:	4d04      	ldr	r5, [pc, #16]	; (8021ab0 <mbedtls_ssl_handshake_client_step+0x1b14>)
 8021aa0:	f7fe baaf 	b.w	8020002 <mbedtls_ssl_handshake_client_step+0x66>
 8021aa4:	08034524 	.word	0x08034524
 8021aa8:	08033a08 	.word	0x08033a08
 8021aac:	08033d98 	.word	0x08033d98
 8021ab0:	ffff8680 	.word	0xffff8680

08021ab4 <mbedtls_ssl_handshake_server_step>:

/*
 * SSL handshake -- server side -- single step
 */
int mbedtls_ssl_handshake_server_step( mbedtls_ssl_context *ssl )
{
 8021ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ab8:	b0ad      	sub	sp, #180	; 0xb4
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 8021aba:	6843      	ldr	r3, [r0, #4]
 8021abc:	2b10      	cmp	r3, #16
 8021abe:	f001 8750 	beq.w	8023962 <mbedtls_ssl_handshake_server_step+0x1eae>
 8021ac2:	4604      	mov	r4, r0
 8021ac4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8021ac6:	2a00      	cmp	r2, #0
 8021ac8:	f001 874f 	beq.w	802396a <mbedtls_ssl_handshake_server_step+0x1eb6>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server state: %d", ssl->state ) );
 8021acc:	9301      	str	r3, [sp, #4]
 8021ace:	4b16      	ldr	r3, [pc, #88]	; (8021b28 <mbedtls_ssl_handshake_server_step+0x74>)
 8021ad0:	9300      	str	r3, [sp, #0]
 8021ad2:	f241 03a3 	movw	r3, #4259	; 0x10a3
 8021ad6:	4a15      	ldr	r2, [pc, #84]	; (8021b2c <mbedtls_ssl_handshake_server_step+0x78>)
 8021ad8:	2102      	movs	r1, #2
 8021ada:	f7f3 fe19 	bl	8015710 <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8021ade:	4620      	mov	r0, r4
 8021ae0:	f002 fdc2 	bl	8024668 <mbedtls_ssl_flush_output>
 8021ae4:	4683      	mov	fp, r0
 8021ae6:	b9d0      	cbnz	r0, 8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        if( ( ret = mbedtls_ssl_flight_transmit( ssl ) ) != 0 )
            return( ret );
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    switch( ssl->state )
 8021ae8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8021aec:	f1ba 0f0f 	cmp.w	sl, #15
 8021af0:	f201 8728 	bhi.w	8023944 <mbedtls_ssl_handshake_server_step+0x1e90>
 8021af4:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8021af8:	001c0010 	.word	0x001c0010
 8021afc:	08df0709 	.word	0x08df0709
 8021b00:	0b0208e5 	.word	0x0b0208e5
 8021b04:	0c0a0bd8 	.word	0x0c0a0bd8
 8021b08:	0def0c24 	.word	0x0def0c24
 8021b0c:	0f020efc 	.word	0x0f020efc
 8021b10:	0f0e0f08 	.word	0x0f0e0f08
 8021b14:	0f210f14 	.word	0x0f210f14
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 8021b18:	2301      	movs	r3, #1
 8021b1a:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8021b1c:	46d3      	mov	fp, sl
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    return( ret );
}
 8021b1e:	4658      	mov	r0, fp
 8021b20:	b02d      	add	sp, #180	; 0xb4
 8021b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b26:	bf00      	nop
 8021b28:	08034604 	.word	0x08034604
 8021b2c:	080345cc 	.word	0x080345cc
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse client hello" ) );
 8021b30:	4bc5      	ldr	r3, [pc, #788]	; (8021e48 <mbedtls_ssl_handshake_server_step+0x394>)
 8021b32:	9300      	str	r3, [sp, #0]
 8021b34:	f240 43bb 	movw	r3, #1211	; 0x4bb
 8021b38:	4ac4      	ldr	r2, [pc, #784]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021b3a:	2102      	movs	r1, #2
 8021b3c:	4620      	mov	r0, r4
 8021b3e:	f7f3 fde7 	bl	8015710 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_ssl_fetch_input( ssl, 5 ) ) != 0 )
 8021b42:	2105      	movs	r1, #5
 8021b44:	4620      	mov	r0, r4
 8021b46:	f002 fcb3 	bl	80244b0 <mbedtls_ssl_fetch_input>
 8021b4a:	4683      	mov	fp, r0
 8021b4c:	2800      	cmp	r0, #0
 8021b4e:	f040 81bd 	bne.w	8021ecc <mbedtls_ssl_handshake_server_step+0x418>
    buf = ssl->in_hdr;
 8021b52:	6da5      	ldr	r5, [r4, #88]	; 0x58
    MBEDTLS_SSL_DEBUG_BUF( 4, "record header", buf, mbedtls_ssl_hdr_len( ssl ) );
 8021b54:	4ebd      	ldr	r6, [pc, #756]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021b56:	2305      	movs	r3, #5
 8021b58:	9302      	str	r3, [sp, #8]
 8021b5a:	9501      	str	r5, [sp, #4]
 8021b5c:	4bbc      	ldr	r3, [pc, #752]	; (8021e50 <mbedtls_ssl_handshake_server_step+0x39c>)
 8021b5e:	9300      	str	r3, [sp, #0]
 8021b60:	f240 43db 	movw	r3, #1243	; 0x4db
 8021b64:	4632      	mov	r2, r6
 8021b66:	2104      	movs	r1, #4
 8021b68:	4620      	mov	r0, r4
 8021b6a:	f7f3 fe37 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, message type: %d",
 8021b6e:	782b      	ldrb	r3, [r5, #0]
 8021b70:	9301      	str	r3, [sp, #4]
 8021b72:	4bb8      	ldr	r3, [pc, #736]	; (8021e54 <mbedtls_ssl_handshake_server_step+0x3a0>)
 8021b74:	9300      	str	r3, [sp, #0]
 8021b76:	f240 43e6 	movw	r3, #1254	; 0x4e6
 8021b7a:	4632      	mov	r2, r6
 8021b7c:	2103      	movs	r1, #3
 8021b7e:	4620      	mov	r0, r4
 8021b80:	f7f3 fdc6 	bl	8015710 <mbedtls_debug_print_msg>
    if( buf[0] != MBEDTLS_SSL_MSG_HANDSHAKE )
 8021b84:	782b      	ldrb	r3, [r5, #0]
 8021b86:	2b16      	cmp	r3, #22
 8021b88:	f040 81ab 	bne.w	8021ee2 <mbedtls_ssl_handshake_server_step+0x42e>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, message len.: %d",
 8021b8c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8021b8e:	4eaf      	ldr	r6, [pc, #700]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021b90:	7811      	ldrb	r1, [r2, #0]
 8021b92:	7853      	ldrb	r3, [r2, #1]
 8021b94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8021b98:	9301      	str	r3, [sp, #4]
 8021b9a:	4baf      	ldr	r3, [pc, #700]	; (8021e58 <mbedtls_ssl_handshake_server_step+0x3a4>)
 8021b9c:	9300      	str	r3, [sp, #0]
 8021b9e:	f240 43ef 	movw	r3, #1263	; 0x4ef
 8021ba2:	4632      	mov	r2, r6
 8021ba4:	2103      	movs	r1, #3
 8021ba6:	4620      	mov	r0, r4
 8021ba8:	f7f3 fdb2 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, protocol version: [%d:%d]",
 8021bac:	78ab      	ldrb	r3, [r5, #2]
 8021bae:	9302      	str	r3, [sp, #8]
 8021bb0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8021bb4:	9301      	str	r3, [sp, #4]
 8021bb6:	4ba9      	ldr	r3, [pc, #676]	; (8021e5c <mbedtls_ssl_handshake_server_step+0x3a8>)
 8021bb8:	9300      	str	r3, [sp, #0]
 8021bba:	f240 43f2 	movw	r3, #1266	; 0x4f2
 8021bbe:	4632      	mov	r2, r6
 8021bc0:	2103      	movs	r1, #3
 8021bc2:	4620      	mov	r0, r4
 8021bc4:	f7f3 fda4 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_ssl_read_version( &major, &minor, ssl->conf->transport, buf + 1 );
 8021bc8:	6823      	ldr	r3, [r4, #0]
 8021bca:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8021bce:	462b      	mov	r3, r5
 8021bd0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8021bd4:	a910      	add	r1, sp, #64	; 0x40
 8021bd6:	a80f      	add	r0, sp, #60	; 0x3c
 8021bd8:	f005 f8fb 	bl	8026dd2 <mbedtls_ssl_read_version>
    if( major < MBEDTLS_SSL_MAJOR_VERSION_3 )
 8021bdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021bde:	2b02      	cmp	r3, #2
 8021be0:	f340 818b 	ble.w	8021efa <mbedtls_ssl_handshake_server_step+0x446>
    msg_len = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8021be4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8021be6:	781a      	ldrb	r2, [r3, #0]
 8021be8:	785d      	ldrb	r5, [r3, #1]
 8021bea:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
        if( msg_len > MBEDTLS_SSL_IN_CONTENT_LEN )
 8021bee:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8021bf2:	f200 818e 	bhi.w	8021f12 <mbedtls_ssl_handshake_server_step+0x45e>
        if( ( ret = mbedtls_ssl_fetch_input( ssl,
 8021bf6:	1d69      	adds	r1, r5, #5
 8021bf8:	4620      	mov	r0, r4
 8021bfa:	f002 fc59 	bl	80244b0 <mbedtls_ssl_fetch_input>
 8021bfe:	4683      	mov	fp, r0
 8021c00:	2800      	cmp	r0, #0
 8021c02:	f040 8192 	bne.w	8021f2a <mbedtls_ssl_handshake_server_step+0x476>
            ssl->in_left = 0;
 8021c06:	2300      	movs	r3, #0
 8021c08:	6763      	str	r3, [r4, #116]	; 0x74
    buf = ssl->in_msg;
 8021c0a:	6e66      	ldr	r6, [r4, #100]	; 0x64
    MBEDTLS_SSL_DEBUG_BUF( 4, "record contents", buf, msg_len );
 8021c0c:	9502      	str	r5, [sp, #8]
 8021c0e:	9601      	str	r6, [sp, #4]
 8021c10:	4b93      	ldr	r3, [pc, #588]	; (8021e60 <mbedtls_ssl_handshake_server_step+0x3ac>)
 8021c12:	9300      	str	r3, [sp, #0]
 8021c14:	f240 5345 	movw	r3, #1349	; 0x545
 8021c18:	4a8c      	ldr	r2, [pc, #560]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021c1a:	2104      	movs	r1, #4
 8021c1c:	4620      	mov	r0, r4
 8021c1e:	f7f3 fddd 	bl	80157dc <mbedtls_debug_print_buf>
    ssl->handshake->update_checksum( ssl, buf, msg_len );
 8021c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021c24:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8021c28:	462a      	mov	r2, r5
 8021c2a:	4631      	mov	r1, r6
 8021c2c:	4620      	mov	r0, r4
 8021c2e:	4798      	blx	r3
    if( msg_len < mbedtls_ssl_hs_hdr_len( ssl ) )
 8021c30:	2d03      	cmp	r5, #3
 8021c32:	f240 8185 	bls.w	8021f40 <mbedtls_ssl_handshake_server_step+0x48c>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, handshake type: %d", buf[0] ) );
 8021c36:	7833      	ldrb	r3, [r6, #0]
 8021c38:	9301      	str	r3, [sp, #4]
 8021c3a:	4b8a      	ldr	r3, [pc, #552]	; (8021e64 <mbedtls_ssl_handshake_server_step+0x3b0>)
 8021c3c:	9300      	str	r3, [sp, #0]
 8021c3e:	f240 5357 	movw	r3, #1367	; 0x557
 8021c42:	4a82      	ldr	r2, [pc, #520]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021c44:	2103      	movs	r1, #3
 8021c46:	4620      	mov	r0, r4
 8021c48:	f7f3 fd62 	bl	8015710 <mbedtls_debug_print_msg>
    if( buf[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
 8021c4c:	7833      	ldrb	r3, [r6, #0]
 8021c4e:	2b01      	cmp	r3, #1
 8021c50:	f040 8182 	bne.w	8021f58 <mbedtls_ssl_handshake_server_step+0x4a4>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, handshake len.: %d",
 8021c54:	7872      	ldrb	r2, [r6, #1]
 8021c56:	78b3      	ldrb	r3, [r6, #2]
 8021c58:	021b      	lsls	r3, r3, #8
 8021c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021c5e:	78f2      	ldrb	r2, [r6, #3]
 8021c60:	4313      	orrs	r3, r2
 8021c62:	9301      	str	r3, [sp, #4]
 8021c64:	4b80      	ldr	r3, [pc, #512]	; (8021e68 <mbedtls_ssl_handshake_server_step+0x3b4>)
 8021c66:	9300      	str	r3, [sp, #0]
 8021c68:	f240 535f 	movw	r3, #1375	; 0x55f
 8021c6c:	4a77      	ldr	r2, [pc, #476]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021c6e:	2103      	movs	r1, #3
 8021c70:	4620      	mov	r0, r4
 8021c72:	f7f3 fd4d 	bl	8015710 <mbedtls_debug_print_msg>
    if( buf[1] != 0 ||
 8021c76:	7873      	ldrb	r3, [r6, #1]
 8021c78:	930c      	str	r3, [sp, #48]	; 0x30
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	f040 8178 	bne.w	8021f70 <mbedtls_ssl_handshake_server_step+0x4bc>
        msg_len != mbedtls_ssl_hs_hdr_len( ssl ) + ( ( buf[2] << 8 ) | buf[3] ) )
 8021c80:	78b2      	ldrb	r2, [r6, #2]
 8021c82:	78f3      	ldrb	r3, [r6, #3]
 8021c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021c88:	3304      	adds	r3, #4
    if( buf[1] != 0 ||
 8021c8a:	429d      	cmp	r5, r3
 8021c8c:	f040 8170 	bne.w	8021f70 <mbedtls_ssl_handshake_server_step+0x4bc>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 8021c90:	1d37      	adds	r7, r6, #4
    msg_len -= mbedtls_ssl_hs_hdr_len( ssl );
 8021c92:	3d04      	subs	r5, #4
    if( msg_len < 38 )
 8021c94:	2d25      	cmp	r5, #37	; 0x25
 8021c96:	f240 8177 	bls.w	8021f88 <mbedtls_ssl_handshake_server_step+0x4d4>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, version", buf, 2 );
 8021c9a:	2302      	movs	r3, #2
 8021c9c:	9302      	str	r3, [sp, #8]
 8021c9e:	9701      	str	r7, [sp, #4]
 8021ca0:	4b72      	ldr	r3, [pc, #456]	; (8021e6c <mbedtls_ssl_handshake_server_step+0x3b8>)
 8021ca2:	9300      	str	r3, [sp, #0]
 8021ca4:	f240 53b9 	movw	r3, #1465	; 0x5b9
 8021ca8:	4a68      	ldr	r2, [pc, #416]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021caa:	2103      	movs	r1, #3
 8021cac:	4620      	mov	r0, r4
 8021cae:	f7f3 fd95 	bl	80157dc <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf );
 8021cb2:	4621      	mov	r1, r4
 8021cb4:	f851 3b0c 	ldr.w	r3, [r1], #12
 8021cb8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 8021cbc:	463b      	mov	r3, r7
 8021cbe:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8021cc2:	f104 0008 	add.w	r0, r4, #8
 8021cc6:	f005 f884 	bl	8026dd2 <mbedtls_ssl_read_version>
    ssl->handshake->max_major_ver = ssl->major_ver;
 8021cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021ccc:	68a2      	ldr	r2, [r4, #8]
 8021cce:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
    ssl->handshake->max_minor_ver = ssl->minor_ver;
 8021cd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021cd4:	68e2      	ldr	r2, [r4, #12]
 8021cd6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8021cda:	68a1      	ldr	r1, [r4, #8]
 8021cdc:	6823      	ldr	r3, [r4, #0]
 8021cde:	f893 006e 	ldrb.w	r0, [r3, #110]	; 0x6e
 8021ce2:	4281      	cmp	r1, r0
 8021ce4:	f2c0 815c 	blt.w	8021fa0 <mbedtls_ssl_handshake_server_step+0x4ec>
        ssl->minor_ver < ssl->conf->min_minor_ver )
 8021ce8:	f893 c06f 	ldrb.w	ip, [r3, #111]	; 0x6f
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 8021cec:	4562      	cmp	r2, ip
 8021cee:	f2c0 8157 	blt.w	8021fa0 <mbedtls_ssl_handshake_server_step+0x4ec>
    if( ssl->major_ver > ssl->conf->max_major_ver )
 8021cf2:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
 8021cf6:	4281      	cmp	r1, r0
 8021cf8:	f340 8169 	ble.w	8021fce <mbedtls_ssl_handshake_server_step+0x51a>
        ssl->major_ver = ssl->conf->max_major_ver;
 8021cfc:	60a0      	str	r0, [r4, #8]
        ssl->minor_ver = ssl->conf->max_minor_ver;
 8021cfe:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8021d02:	60e3      	str	r3, [r4, #12]
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", buf + 2, 32 );
 8021d04:	f106 0806 	add.w	r8, r6, #6
 8021d08:	2320      	movs	r3, #32
 8021d0a:	9302      	str	r3, [sp, #8]
 8021d0c:	f8cd 8004 	str.w	r8, [sp, #4]
 8021d10:	4b57      	ldr	r3, [pc, #348]	; (8021e70 <mbedtls_ssl_handshake_server_step+0x3bc>)
 8021d12:	9300      	str	r3, [sp, #0]
 8021d14:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
 8021d18:	4a4c      	ldr	r2, [pc, #304]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021d1a:	2103      	movs	r1, #3
 8021d1c:	4620      	mov	r0, r4
 8021d1e:	f7f3 fd5d 	bl	80157dc <mbedtls_debug_print_buf>
    memcpy( ssl->handshake->randbytes, buf + 2, 32 );
 8021d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021d24:	f8d6 c006 	ldr.w	ip, [r6, #6]
 8021d28:	f8d6 000a 	ldr.w	r0, [r6, #10]
 8021d2c:	f8d6 100e 	ldr.w	r1, [r6, #14]
 8021d30:	f8d6 2012 	ldr.w	r2, [r6, #18]
 8021d34:	f8c3 c314 	str.w	ip, [r3, #788]	; 0x314
 8021d38:	f8c3 0318 	str.w	r0, [r3, #792]	; 0x318
 8021d3c:	f8c3 131c 	str.w	r1, [r3, #796]	; 0x31c
 8021d40:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8021d44:	f8d6 c016 	ldr.w	ip, [r6, #22]
 8021d48:	f8d6 001a 	ldr.w	r0, [r6, #26]
 8021d4c:	f8d6 101e 	ldr.w	r1, [r6, #30]
 8021d50:	f8d6 2022 	ldr.w	r2, [r6, #34]	; 0x22
 8021d54:	f8c3 c324 	str.w	ip, [r3, #804]	; 0x324
 8021d58:	f8c3 0328 	str.w	r0, [r3, #808]	; 0x328
 8021d5c:	f8c3 132c 	str.w	r1, [r3, #812]	; 0x32c
 8021d60:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
    sess_len = buf[34];
 8021d64:	f896 9026 	ldrb.w	r9, [r6, #38]	; 0x26
    if( sess_len > sizeof( ssl->session_negotiate->id ) ||
 8021d68:	f1b9 0f20 	cmp.w	r9, #32
 8021d6c:	f200 8135 	bhi.w	8021fda <mbedtls_ssl_handshake_server_step+0x526>
        sess_len + 34 + 2 > msg_len ) /* 2 for cipherlist length field */
 8021d70:	f109 0824 	add.w	r8, r9, #36	; 0x24
    if( sess_len > sizeof( ssl->session_negotiate->id ) ||
 8021d74:	4545      	cmp	r5, r8
 8021d76:	f0c0 8130 	bcc.w	8021fda <mbedtls_ssl_handshake_server_step+0x526>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, session id", buf + 35, sess_len );
 8021d7a:	3627      	adds	r6, #39	; 0x27
 8021d7c:	f8cd 9008 	str.w	r9, [sp, #8]
 8021d80:	9601      	str	r6, [sp, #4]
 8021d82:	4b3c      	ldr	r3, [pc, #240]	; (8021e74 <mbedtls_ssl_handshake_server_step+0x3c0>)
 8021d84:	9300      	str	r3, [sp, #0]
 8021d86:	f240 53ea 	movw	r3, #1514	; 0x5ea
 8021d8a:	4a30      	ldr	r2, [pc, #192]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021d8c:	2103      	movs	r1, #3
 8021d8e:	4620      	mov	r0, r4
 8021d90:	f7f3 fd24 	bl	80157dc <mbedtls_debug_print_buf>
    ssl->session_negotiate->id_len = sess_len;
 8021d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021d96:	f8c3 9010 	str.w	r9, [r3, #16]
    memset( ssl->session_negotiate->id, 0,
 8021d9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8021d9c:	2220      	movs	r2, #32
 8021d9e:	2100      	movs	r1, #0
 8021da0:	3014      	adds	r0, #20
 8021da2:	f008 fbf2 	bl	802a58a <memset>
    memcpy( ssl->session_negotiate->id, buf + 35,
 8021da6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8021da8:	6902      	ldr	r2, [r0, #16]
 8021daa:	4631      	mov	r1, r6
 8021dac:	3014      	adds	r0, #20
 8021dae:	f008 fbc4 	bl	802a53a <memcpy>
        ciph_offset = 35 + sess_len;
 8021db2:	f109 0623 	add.w	r6, r9, #35	; 0x23
    ciph_len = ( buf[ciph_offset + 0] << 8 )
 8021db6:	5dba      	ldrb	r2, [r7, r6]
             | ( buf[ciph_offset + 1]      );
 8021db8:	f817 3008 	ldrb.w	r3, [r7, r8]
 8021dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021dc0:	930a      	str	r3, [sp, #40]	; 0x28
    if( ciph_len < 2 ||
 8021dc2:	2b01      	cmp	r3, #1
 8021dc4:	f240 811a 	bls.w	8021ffc <mbedtls_ssl_handshake_server_step+0x548>
        ciph_len + 2 + ciph_offset + 1 > msg_len || /* 1 for comp. alg. len */
 8021dc8:	441e      	add	r6, r3
 8021dca:	f106 0803 	add.w	r8, r6, #3
    if( ciph_len < 2 ||
 8021dce:	4545      	cmp	r5, r8
 8021dd0:	f0c0 8114 	bcc.w	8021ffc <mbedtls_ssl_handshake_server_step+0x548>
        ciph_len + 2 + ciph_offset + 1 > msg_len || /* 1 for comp. alg. len */
 8021dd4:	f013 0301 	ands.w	r3, r3, #1
 8021dd8:	9307      	str	r3, [sp, #28]
 8021dda:	f040 810f 	bne.w	8021ffc <mbedtls_ssl_handshake_server_step+0x548>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, ciphersuitelist",
 8021dde:	f109 0925 	add.w	r9, r9, #37	; 0x25
 8021de2:	eb07 0309 	add.w	r3, r7, r9
 8021de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021dea:	9202      	str	r2, [sp, #8]
 8021dec:	9301      	str	r3, [sp, #4]
 8021dee:	4b22      	ldr	r3, [pc, #136]	; (8021e78 <mbedtls_ssl_handshake_server_step+0x3c4>)
 8021df0:	9300      	str	r3, [sp, #0]
 8021df2:	f240 633e 	movw	r3, #1598	; 0x63e
 8021df6:	4a15      	ldr	r2, [pc, #84]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021df8:	2103      	movs	r1, #3
 8021dfa:	4620      	mov	r0, r4
 8021dfc:	f7f3 fcee 	bl	80157dc <mbedtls_debug_print_buf>
    comp_offset = ciph_offset + 2 + ciph_len;
 8021e00:	3602      	adds	r6, #2
    comp_len = buf[comp_offset];
 8021e02:	5dbb      	ldrb	r3, [r7, r6]
    if( comp_len < 1 ||
 8021e04:	1e5a      	subs	r2, r3, #1
 8021e06:	2a0f      	cmp	r2, #15
 8021e08:	f200 8109 	bhi.w	802201e <mbedtls_ssl_handshake_server_step+0x56a>
        comp_len + comp_offset + 1 > msg_len )
 8021e0c:	441e      	add	r6, r3
 8021e0e:	f106 0901 	add.w	r9, r6, #1
        comp_len > 16 ||
 8021e12:	454d      	cmp	r5, r9
 8021e14:	f0c0 8103 	bcc.w	802201e <mbedtls_ssl_handshake_server_step+0x56a>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, compression",
 8021e18:	9302      	str	r3, [sp, #8]
 8021e1a:	eb07 0308 	add.w	r3, r7, r8
 8021e1e:	9301      	str	r3, [sp, #4]
 8021e20:	4b16      	ldr	r3, [pc, #88]	; (8021e7c <mbedtls_ssl_handshake_server_step+0x3c8>)
 8021e22:	9300      	str	r3, [sp, #0]
 8021e24:	f240 6352 	movw	r3, #1618	; 0x652
 8021e28:	4a08      	ldr	r2, [pc, #32]	; (8021e4c <mbedtls_ssl_handshake_server_step+0x398>)
 8021e2a:	2103      	movs	r1, #3
 8021e2c:	4620      	mov	r0, r4
 8021e2e:	f7f3 fcd5 	bl	80157dc <mbedtls_debug_print_buf>
    ssl->session_negotiate->compression = MBEDTLS_SSL_COMPRESS_NULL;
 8021e32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021e34:	2200      	movs	r2, #0
 8021e36:	60da      	str	r2, [r3, #12]
        if( msg_len > ext_offset )
 8021e38:	454d      	cmp	r5, r9
 8021e3a:	d930      	bls.n	8021e9e <mbedtls_ssl_handshake_server_step+0x3ea>
            if( msg_len < ext_offset + 2 )
 8021e3c:	1cf3      	adds	r3, r6, #3
 8021e3e:	429d      	cmp	r5, r3
 8021e40:	f0c0 80fe 	bcc.w	8022040 <mbedtls_ssl_handshake_server_step+0x58c>
 8021e44:	e01c      	b.n	8021e80 <mbedtls_ssl_handshake_server_step+0x3cc>
 8021e46:	bf00      	nop
 8021e48:	08034618 	.word	0x08034618
 8021e4c:	080345cc 	.word	0x080345cc
 8021e50:	08034648 	.word	0x08034648
 8021e54:	08034658 	.word	0x08034658
 8021e58:	08034698 	.word	0x08034698
 8021e5c:	080346bc 	.word	0x080346bc
 8021e60:	080346e8 	.word	0x080346e8
 8021e64:	080346f8 	.word	0x080346f8
 8021e68:	0803471c 	.word	0x0803471c
 8021e6c:	08034740 	.word	0x08034740
 8021e70:	08033b2c 	.word	0x08033b2c
 8021e74:	08033b6c 	.word	0x08033b6c
 8021e78:	08034798 	.word	0x08034798
 8021e7c:	080347b8 	.word	0x080347b8
            ext_len = ( buf[ext_offset + 0] << 8 )
 8021e80:	f817 1009 	ldrb.w	r1, [r7, r9]
                    | ( buf[ext_offset + 1]      );
 8021e84:	19ba      	adds	r2, r7, r6
 8021e86:	7892      	ldrb	r2, [r2, #2]
 8021e88:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8021e8c:	9107      	str	r1, [sp, #28]
            if( ( ext_len > 0 && ext_len < 4 ) ||
 8021e8e:	1e4a      	subs	r2, r1, #1
 8021e90:	2a02      	cmp	r2, #2
 8021e92:	f240 80e6 	bls.w	8022062 <mbedtls_ssl_handshake_server_step+0x5ae>
                msg_len != ext_offset + 2 + ext_len )
 8021e96:	440b      	add	r3, r1
            if( ( ext_len > 0 && ext_len < 4 ) ||
 8021e98:	429d      	cmp	r5, r3
 8021e9a:	f040 80e2 	bne.w	8022062 <mbedtls_ssl_handshake_server_step+0x5ae>
        ext = buf + ext_offset + 2;
 8021e9e:	3603      	adds	r6, #3
 8021ea0:	eb07 0806 	add.w	r8, r7, r6
        MBEDTLS_SSL_DEBUG_BUF( 3, "client hello extensions", ext, ext_len );
 8021ea4:	9e07      	ldr	r6, [sp, #28]
 8021ea6:	9602      	str	r6, [sp, #8]
 8021ea8:	f8cd 8004 	str.w	r8, [sp, #4]
 8021eac:	4bbf      	ldr	r3, [pc, #764]	; (80221ac <mbedtls_ssl_handshake_server_step+0x6f8>)
 8021eae:	9300      	str	r3, [sp, #0]
 8021eb0:	f240 638a 	movw	r3, #1674	; 0x68a
 8021eb4:	4abe      	ldr	r2, [pc, #760]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021eb6:	2103      	movs	r1, #3
 8021eb8:	4620      	mov	r0, r4
 8021eba:	f7f3 fc8f 	bl	80157dc <mbedtls_debug_print_buf>
    int sig_hash_alg_ext_present = 0;
 8021ebe:	f8cd b020 	str.w	fp, [sp, #32]
 8021ec2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8021ec6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
        while( ext_len != 0 )
 8021eca:	e292      	b.n	80223f2 <mbedtls_ssl_handshake_server_step+0x93e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8021ecc:	9001      	str	r0, [sp, #4]
 8021ece:	4bb9      	ldr	r3, [pc, #740]	; (80221b4 <mbedtls_ssl_handshake_server_step+0x700>)
 8021ed0:	9300      	str	r3, [sp, #0]
 8021ed2:	f240 43cc 	movw	r3, #1228	; 0x4cc
 8021ed6:	4ab6      	ldr	r2, [pc, #728]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021ed8:	2101      	movs	r1, #1
 8021eda:	4620      	mov	r0, r4
 8021edc:	f7f3 fc4a 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8021ee0:	e61d      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021ee2:	4bb5      	ldr	r3, [pc, #724]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021ee4:	9300      	str	r3, [sp, #0]
 8021ee6:	f240 43eb 	movw	r3, #1259	; 0x4eb
 8021eea:	4632      	mov	r2, r6
 8021eec:	2101      	movs	r1, #1
 8021eee:	4620      	mov	r0, r4
 8021ef0:	f7f3 fc0e 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021ef4:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021ef8:	e611      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021efa:	4baf      	ldr	r3, [pc, #700]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021efc:	9300      	str	r3, [sp, #0]
 8021efe:	f240 43fd 	movw	r3, #1277	; 0x4fd
 8021f02:	4632      	mov	r2, r6
 8021f04:	2101      	movs	r1, #1
 8021f06:	4620      	mov	r0, r4
 8021f08:	f7f3 fc02 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f0c:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f10:	e605      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021f12:	4ba9      	ldr	r3, [pc, #676]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021f14:	9300      	str	r3, [sp, #0]
 8021f16:	f240 532f 	movw	r3, #1327	; 0x52f
 8021f1a:	4aa5      	ldr	r2, [pc, #660]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f1c:	2101      	movs	r1, #1
 8021f1e:	4620      	mov	r0, r4
 8021f20:	f7f3 fbf6 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f24:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f28:	e5f9      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8021f2a:	9001      	str	r0, [sp, #4]
 8021f2c:	4ba1      	ldr	r3, [pc, #644]	; (80221b4 <mbedtls_ssl_handshake_server_step+0x700>)
 8021f2e:	9300      	str	r3, [sp, #0]
 8021f30:	f240 5336 	movw	r3, #1334	; 0x536
 8021f34:	4a9e      	ldr	r2, [pc, #632]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f36:	2101      	movs	r1, #1
 8021f38:	4620      	mov	r0, r4
 8021f3a:	f7f3 fc1b 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8021f3e:	e5ee      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021f40:	4b9d      	ldr	r3, [pc, #628]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021f42:	9300      	str	r3, [sp, #0]
 8021f44:	f240 5353 	movw	r3, #1363	; 0x553
 8021f48:	4a99      	ldr	r2, [pc, #612]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f4a:	2101      	movs	r1, #1
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	f7f3 fbdf 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f52:	f8df b278 	ldr.w	fp, [pc, #632]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f56:	e5e2      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021f58:	4b97      	ldr	r3, [pc, #604]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021f5a:	9300      	str	r3, [sp, #0]
 8021f5c:	f240 535b 	movw	r3, #1371	; 0x55b
 8021f60:	4a93      	ldr	r2, [pc, #588]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f62:	2101      	movs	r1, #1
 8021f64:	4620      	mov	r0, r4
 8021f66:	f7f3 fbd3 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f6a:	f8df b260 	ldr.w	fp, [pc, #608]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f6e:	e5d6      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021f70:	4b91      	ldr	r3, [pc, #580]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021f72:	9300      	str	r3, [sp, #0]
 8021f74:	f240 5366 	movw	r3, #1382	; 0x566
 8021f78:	4a8d      	ldr	r2, [pc, #564]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f7a:	2101      	movs	r1, #1
 8021f7c:	4620      	mov	r0, r4
 8021f7e:	f7f3 fbc7 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f82:	f8df b248 	ldr.w	fp, [pc, #584]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f86:	e5ca      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021f88:	4b8b      	ldr	r3, [pc, #556]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021f8a:	9300      	str	r3, [sp, #0]
 8021f8c:	f240 53b2 	movw	r3, #1458	; 0x5b2
 8021f90:	4a87      	ldr	r2, [pc, #540]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021f92:	2101      	movs	r1, #1
 8021f94:	4620      	mov	r0, r4
 8021f96:	f7f3 fbbb 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021f9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021f9e:	e5be      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "client only supports ssl smaller than minimum"
 8021fa0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8021fa4:	9304      	str	r3, [sp, #16]
 8021fa6:	9003      	str	r0, [sp, #12]
 8021fa8:	9202      	str	r2, [sp, #8]
 8021faa:	9101      	str	r1, [sp, #4]
 8021fac:	4b83      	ldr	r3, [pc, #524]	; (80221bc <mbedtls_ssl_handshake_server_step+0x708>)
 8021fae:	9300      	str	r3, [sp, #0]
 8021fb0:	f240 53c4 	movw	r3, #1476	; 0x5c4
 8021fb4:	4a7e      	ldr	r2, [pc, #504]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021fb6:	2101      	movs	r1, #1
 8021fb8:	4620      	mov	r0, r4
 8021fba:	f7f3 fba9 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021fbe:	2246      	movs	r2, #70	; 0x46
 8021fc0:	2102      	movs	r1, #2
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	f002 ff70 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 8021fc8:	f8df b204 	ldr.w	fp, [pc, #516]	; 80221d0 <mbedtls_ssl_handshake_server_step+0x71c>
 8021fcc:	e5a7      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    else if( ssl->minor_ver > ssl->conf->max_minor_ver )
 8021fce:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8021fd2:	429a      	cmp	r2, r3
        ssl->minor_ver = ssl->conf->max_minor_ver;
 8021fd4:	bfc8      	it	gt
 8021fd6:	60e3      	strgt	r3, [r4, #12]
 8021fd8:	e694      	b.n	8021d04 <mbedtls_ssl_handshake_server_step+0x250>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021fda:	4b77      	ldr	r3, [pc, #476]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021fdc:	9300      	str	r3, [sp, #0]
 8021fde:	f240 53e4 	movw	r3, #1508	; 0x5e4
 8021fe2:	4a73      	ldr	r2, [pc, #460]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8021fe4:	2101      	movs	r1, #1
 8021fe6:	4620      	mov	r0, r4
 8021fe8:	f7f3 fb92 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8021fec:	2232      	movs	r2, #50	; 0x32
 8021fee:	2102      	movs	r1, #2
 8021ff0:	4620      	mov	r0, r4
 8021ff2:	f002 ff59 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8021ff6:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8021ffa:	e590      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8021ffc:	4b6e      	ldr	r3, [pc, #440]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8021ffe:	9300      	str	r3, [sp, #0]
 8022000:	f44f 63c7 	mov.w	r3, #1592	; 0x638
 8022004:	4a6a      	ldr	r2, [pc, #424]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022006:	2101      	movs	r1, #1
 8022008:	4620      	mov	r0, r4
 802200a:	f7f3 fb81 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802200e:	2232      	movs	r2, #50	; 0x32
 8022010:	2102      	movs	r1, #2
 8022012:	4620      	mov	r0, r4
 8022014:	f002 ff48 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8022018:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 802201c:	e57f      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 802201e:	4b66      	ldr	r3, [pc, #408]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8022020:	9300      	str	r3, [sp, #0]
 8022022:	f240 634c 	movw	r3, #1612	; 0x64c
 8022026:	4a62      	ldr	r2, [pc, #392]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022028:	2101      	movs	r1, #1
 802202a:	4620      	mov	r0, r4
 802202c:	f7f3 fb70 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022030:	2232      	movs	r2, #50	; 0x32
 8022032:	2102      	movs	r1, #2
 8022034:	4620      	mov	r0, r4
 8022036:	f002 ff37 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802203a:	f8df b190 	ldr.w	fp, [pc, #400]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 802203e:	e56e      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022040:	4b5d      	ldr	r3, [pc, #372]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8022042:	9300      	str	r3, [sp, #0]
 8022044:	f240 6374 	movw	r3, #1652	; 0x674
 8022048:	4a59      	ldr	r2, [pc, #356]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 802204a:	2101      	movs	r1, #1
 802204c:	4620      	mov	r0, r4
 802204e:	f7f3 fb5f 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022052:	2232      	movs	r2, #50	; 0x32
 8022054:	2102      	movs	r1, #2
 8022056:	4620      	mov	r0, r4
 8022058:	f002 ff26 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802205c:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8022060:	e55d      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022062:	4b55      	ldr	r3, [pc, #340]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8022064:	9300      	str	r3, [sp, #0]
 8022066:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 802206a:	4a51      	ldr	r2, [pc, #324]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 802206c:	2101      	movs	r1, #1
 802206e:	4620      	mov	r0, r4
 8022070:	f7f3 fb4e 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022074:	2232      	movs	r2, #50	; 0x32
 8022076:	2102      	movs	r1, #2
 8022078:	4620      	mov	r0, r4
 802207a:	f002 ff15 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802207e:	f8df b14c 	ldr.w	fp, [pc, #332]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8022082:	e54c      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022084:	4b4c      	ldr	r3, [pc, #304]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8022086:	9300      	str	r3, [sp, #0]
 8022088:	f240 6391 	movw	r3, #1681	; 0x691
 802208c:	4a48      	ldr	r2, [pc, #288]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 802208e:	2101      	movs	r1, #1
 8022090:	4620      	mov	r0, r4
 8022092:	f7f3 fb3d 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022096:	2232      	movs	r2, #50	; 0x32
 8022098:	2102      	movs	r1, #2
 802209a:	4620      	mov	r0, r4
 802209c:	f002 ff04 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 80220a0:	f8df b128 	ldr.w	fp, [pc, #296]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 80220a4:	e53b      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 80220a6:	4b44      	ldr	r3, [pc, #272]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 80220a8:	9300      	str	r3, [sp, #0]
 80220aa:	f240 639b 	movw	r3, #1691	; 0x69b
 80220ae:	4a40      	ldr	r2, [pc, #256]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 80220b0:	2101      	movs	r1, #1
 80220b2:	4620      	mov	r0, r4
 80220b4:	f7f3 fb2c 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80220b8:	2232      	movs	r2, #50	; 0x32
 80220ba:	2102      	movs	r1, #2
 80220bc:	4620      	mov	r0, r4
 80220be:	f002 fef3 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 80220c2:	f8df b108 	ldr.w	fp, [pc, #264]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 80220c6:	e52a      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            switch( ext_id )
 80220c8:	f64f 7201 	movw	r2, #65281	; 0xff01
 80220cc:	4293      	cmp	r3, r2
 80220ce:	f040 817e 	bne.w	80223ce <mbedtls_ssl_handshake_server_step+0x91a>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 80220d2:	4b3b      	ldr	r3, [pc, #236]	; (80221c0 <mbedtls_ssl_handshake_server_step+0x70c>)
 80220d4:	9300      	str	r3, [sp, #0]
 80220d6:	f240 63af 	movw	r3, #1711	; 0x6af
 80220da:	4a35      	ldr	r2, [pc, #212]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 80220dc:	2103      	movs	r1, #3
 80220de:	4620      	mov	r0, r4
 80220e0:	f7f3 fb16 	bl	8015710 <mbedtls_debug_print_msg>
        if( len != 1 || buf[0] != 0x0 )
 80220e4:	f1bb 0f01 	cmp.w	fp, #1
 80220e8:	d106      	bne.n	80220f8 <mbedtls_ssl_handshake_server_step+0x644>
 80220ea:	f898 3004 	ldrb.w	r3, [r8, #4]
 80220ee:	b91b      	cbnz	r3, 80220f8 <mbedtls_ssl_handshake_server_step+0x644>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80220f0:	2301      	movs	r3, #1
 80220f2:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
                if( ret != 0 )
 80220f6:	e174      	b.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 80220f8:	4b32      	ldr	r3, [pc, #200]	; (80221c4 <mbedtls_ssl_handshake_server_step+0x710>)
 80220fa:	9300      	str	r3, [sp, #0]
 80220fc:	23b0      	movs	r3, #176	; 0xb0
 80220fe:	4a2c      	ldr	r2, [pc, #176]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022100:	2101      	movs	r1, #1
 8022102:	4620      	mov	r0, r4
 8022104:	f7f3 fb04 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022108:	2228      	movs	r2, #40	; 0x28
 802210a:	2102      	movs	r1, #2
 802210c:	4620      	mov	r0, r4
 802210e:	f002 fecb 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8022112:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 8022116:	e502      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "found signature_algorithms extension" ) );
 8022118:	4b2b      	ldr	r3, [pc, #172]	; (80221c8 <mbedtls_ssl_handshake_server_step+0x714>)
 802211a:	9300      	str	r3, [sp, #0]
 802211c:	f240 63bc 	movw	r3, #1724	; 0x6bc
 8022120:	4a23      	ldr	r2, [pc, #140]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022122:	2103      	movs	r1, #3
 8022124:	4620      	mov	r0, r4
 8022126:	f7f3 faf3 	bl	8015710 <mbedtls_debug_print_msg>
    const unsigned char *end = buf + len;
 802212a:	9b07      	ldr	r3, [sp, #28]
 802212c:	4443      	add	r3, r8
    if ( len < 2 ) {
 802212e:	f1bb 0f01 	cmp.w	fp, #1
 8022132:	d91d      	bls.n	8022170 <mbedtls_ssl_handshake_server_step+0x6bc>
    sig_alg_list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );
 8022134:	f898 1004 	ldrb.w	r1, [r8, #4]
 8022138:	f898 2005 	ldrb.w	r2, [r8, #5]
 802213c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    if( sig_alg_list_size + 2 != len ||
 8022140:	1c91      	adds	r1, r2, #2
 8022142:	458b      	cmp	fp, r1
 8022144:	d122      	bne.n	802218c <mbedtls_ssl_handshake_server_step+0x6d8>
 8022146:	f012 0f01 	tst.w	r2, #1
 802214a:	d11f      	bne.n	802218c <mbedtls_ssl_handshake_server_step+0x6d8>
    for( p = buf + 2; p < end; p += 2 )
 802214c:	f108 0206 	add.w	r2, r8, #6
 8022150:	4293      	cmp	r3, r2
 8022152:	f240 8088 	bls.w	8022266 <mbedtls_ssl_handshake_server_step+0x7b2>
 8022156:	f108 0508 	add.w	r5, r8, #8
 802215a:	eba3 0708 	sub.w	r7, r3, r8
 802215e:	3f07      	subs	r7, #7
 8022160:	f027 0701 	bic.w	r7, r7, #1
 8022164:	f108 030a 	add.w	r3, r8, #10
 8022168:	441f      	add	r7, r3
 802216a:	9608      	str	r6, [sp, #32]
 802216c:	46ba      	mov	sl, r7
 802216e:	e03f      	b.n	80221f0 <mbedtls_ssl_handshake_server_step+0x73c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022170:	4b11      	ldr	r3, [pc, #68]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 8022172:	9300      	str	r3, [sp, #0]
 8022174:	23d8      	movs	r3, #216	; 0xd8
 8022176:	4a0e      	ldr	r2, [pc, #56]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022178:	2101      	movs	r1, #1
 802217a:	4620      	mov	r0, r4
 802217c:	f7f3 fac8 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022180:	2232      	movs	r2, #50	; 0x32
 8022182:	2102      	movs	r1, #2
 8022184:	4620      	mov	r0, r4
 8022186:	f002 fe8f 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802218a:	e00c      	b.n	80221a6 <mbedtls_ssl_handshake_server_step+0x6f2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 802218c:	4b0a      	ldr	r3, [pc, #40]	; (80221b8 <mbedtls_ssl_handshake_server_step+0x704>)
 802218e:	9300      	str	r3, [sp, #0]
 8022190:	23e1      	movs	r3, #225	; 0xe1
 8022192:	4a07      	ldr	r2, [pc, #28]	; (80221b0 <mbedtls_ssl_handshake_server_step+0x6fc>)
 8022194:	2101      	movs	r1, #1
 8022196:	4620      	mov	r0, r4
 8022198:	f7f3 faba 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802219c:	2232      	movs	r2, #50	; 0x32
 802219e:	2102      	movs	r1, #2
 80221a0:	4620      	mov	r0, r4
 80221a2:	f002 fe81 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 80221a6:	f8df b024 	ldr.w	fp, [pc, #36]	; 80221cc <mbedtls_ssl_handshake_server_step+0x718>
 80221aa:	e4b8      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 80221ac:	080347d4 	.word	0x080347d4
 80221b0:	080345cc 	.word	0x080345cc
 80221b4:	08034630 	.word	0x08034630
 80221b8:	0803467c 	.word	0x0803467c
 80221bc:	08034758 	.word	0x08034758
 80221c0:	08033f58 	.word	0x08033f58
 80221c4:	08033f78 	.word	0x08033f78
 80221c8:	080347ec 	.word	0x080347ec
 80221cc:	ffff8700 	.word	0xffff8700
 80221d0:	ffff9180 	.word	0xffff9180
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext"
 80221d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80221d8:	9301      	str	r3, [sp, #4]
 80221da:	4bc0      	ldr	r3, [pc, #768]	; (80224dc <mbedtls_ssl_handshake_server_step+0xa28>)
 80221dc:	9300      	str	r3, [sp, #0]
 80221de:	23f6      	movs	r3, #246	; 0xf6
 80221e0:	4abf      	ldr	r2, [pc, #764]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 80221e2:	2103      	movs	r1, #3
 80221e4:	4620      	mov	r0, r4
 80221e6:	f7f3 fa93 	bl	8015710 <mbedtls_debug_print_msg>
    for( p = buf + 2; p < end; p += 2 )
 80221ea:	3502      	adds	r5, #2
 80221ec:	45aa      	cmp	sl, r5
 80221ee:	d039      	beq.n	8022264 <mbedtls_ssl_handshake_server_step+0x7b0>
        if( ( sig_cur = mbedtls_ssl_pk_alg_from_sig( p[1] ) ) == MBEDTLS_PK_NONE )
 80221f0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 80221f4:	f004 fae2 	bl	80267bc <mbedtls_ssl_pk_alg_from_sig>
 80221f8:	4607      	mov	r7, r0
 80221fa:	2800      	cmp	r0, #0
 80221fc:	d0ea      	beq.n	80221d4 <mbedtls_ssl_handshake_server_step+0x720>
        md_cur = mbedtls_ssl_md_alg_from_hash( p[0] );
 80221fe:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022202:	f004 fafc 	bl	80267fe <mbedtls_ssl_md_alg_from_hash>
        if( md_cur == MBEDTLS_MD_NONE )
 8022206:	4606      	mov	r6, r0
 8022208:	b1a8      	cbz	r0, 8022236 <mbedtls_ssl_handshake_server_step+0x782>
        if( mbedtls_ssl_check_sig_hash( ssl, md_cur ) == 0 )
 802220a:	4601      	mov	r1, r0
 802220c:	4620      	mov	r0, r4
 802220e:	f004 fdc5 	bl	8026d9c <mbedtls_ssl_check_sig_hash>
 8022212:	b9e0      	cbnz	r0, 802224e <mbedtls_ssl_handshake_server_step+0x79a>
            mbedtls_ssl_sig_hash_set_add( &ssl->handshake->hash_algs, sig_cur, md_cur );
 8022214:	4632      	mov	r2, r6
 8022216:	4639      	mov	r1, r7
 8022218:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802221a:	f004 fae0 	bl	80267de <mbedtls_ssl_sig_hash_set_add>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext:"
 802221e:	9602      	str	r6, [sp, #8]
 8022220:	9701      	str	r7, [sp, #4]
 8022222:	4bb0      	ldr	r3, [pc, #704]	; (80224e4 <mbedtls_ssl_handshake_server_step+0xa30>)
 8022224:	9300      	str	r3, [sp, #0]
 8022226:	f240 1307 	movw	r3, #263	; 0x107
 802222a:	4aad      	ldr	r2, [pc, #692]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 802222c:	2103      	movs	r1, #3
 802222e:	4620      	mov	r0, r4
 8022230:	f7f3 fa6e 	bl	8015710 <mbedtls_debug_print_msg>
 8022234:	e7d9      	b.n	80221ea <mbedtls_ssl_handshake_server_step+0x736>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext:"
 8022236:	f815 3c02 	ldrb.w	r3, [r5, #-2]
 802223a:	9301      	str	r3, [sp, #4]
 802223c:	4baa      	ldr	r3, [pc, #680]	; (80224e8 <mbedtls_ssl_handshake_server_step+0xa34>)
 802223e:	9300      	str	r3, [sp, #0]
 8022240:	23ff      	movs	r3, #255	; 0xff
 8022242:	4aa7      	ldr	r2, [pc, #668]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 8022244:	2103      	movs	r1, #3
 8022246:	4620      	mov	r0, r4
 8022248:	f7f3 fa62 	bl	8015710 <mbedtls_debug_print_msg>
            continue;
 802224c:	e7cd      	b.n	80221ea <mbedtls_ssl_handshake_server_step+0x736>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext: "
 802224e:	9601      	str	r6, [sp, #4]
 8022250:	4ba6      	ldr	r3, [pc, #664]	; (80224ec <mbedtls_ssl_handshake_server_step+0xa38>)
 8022252:	9300      	str	r3, [sp, #0]
 8022254:	f240 130d 	movw	r3, #269	; 0x10d
 8022258:	4aa1      	ldr	r2, [pc, #644]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 802225a:	2103      	movs	r1, #3
 802225c:	4620      	mov	r0, r4
 802225e:	f7f3 fa57 	bl	8015710 <mbedtls_debug_print_msg>
 8022262:	e7c2      	b.n	80221ea <mbedtls_ssl_handshake_server_step+0x736>
 8022264:	9e08      	ldr	r6, [sp, #32]
                sig_hash_alg_ext_present = 1;
 8022266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022268:	9308      	str	r3, [sp, #32]
 802226a:	e0ba      	b.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported elliptic curves extension" ) );
 802226c:	4ba0      	ldr	r3, [pc, #640]	; (80224f0 <mbedtls_ssl_handshake_server_step+0xa3c>)
 802226e:	9300      	str	r3, [sp, #0]
 8022270:	f240 63ca 	movw	r3, #1738	; 0x6ca
 8022274:	4a9a      	ldr	r2, [pc, #616]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 8022276:	2103      	movs	r1, #3
 8022278:	4620      	mov	r0, r4
 802227a:	f7f3 fa49 	bl	8015710 <mbedtls_debug_print_msg>
    if ( len < 2 ) {
 802227e:	f1bb 0f01 	cmp.w	fp, #1
 8022282:	d930      	bls.n	80222e6 <mbedtls_ssl_handshake_server_step+0x832>
    list_size = ( ( buf[0] << 8 ) | ( buf[1] ) );
 8022284:	f898 3004 	ldrb.w	r3, [r8, #4]
 8022288:	f898 a005 	ldrb.w	sl, [r8, #5]
 802228c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    if( list_size + 2 != len ||
 8022290:	f10a 0302 	add.w	r3, sl, #2
 8022294:	459b      	cmp	fp, r3
 8022296:	d137      	bne.n	8022308 <mbedtls_ssl_handshake_server_step+0x854>
 8022298:	f01a 0f01 	tst.w	sl, #1
 802229c:	d134      	bne.n	8022308 <mbedtls_ssl_handshake_server_step+0x854>
    if( ssl->handshake->curves != NULL )
 802229e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80222a0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d141      	bne.n	802232c <mbedtls_ssl_handshake_server_step+0x878>
    our_size = list_size / 2 + 1;
 80222a8:	ea4f 055a 	mov.w	r5, sl, lsr #1
 80222ac:	3501      	adds	r5, #1
    if( our_size > MBEDTLS_ECP_DP_MAX )
 80222ae:	46a9      	mov	r9, r5
 80222b0:	2d0c      	cmp	r5, #12
 80222b2:	bf28      	it	cs
 80222b4:	f04f 090c 	movcs.w	r9, #12
    if( ( curves = mbedtls_calloc( our_size, sizeof( *curves ) ) ) == NULL )
 80222b8:	2104      	movs	r1, #4
 80222ba:	4648      	mov	r0, r9
 80222bc:	f006 fde6 	bl	8028e8c <mbedtls_calloc>
 80222c0:	4607      	mov	r7, r0
 80222c2:	2800      	cmp	r0, #0
 80222c4:	d044      	beq.n	8022350 <mbedtls_ssl_handshake_server_step+0x89c>
    ssl->handshake->curves = curves;
 80222c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80222c8:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
    while( list_size > 0 && our_size > 1 )
 80222cc:	f1ba 0f00 	cmp.w	sl, #0
 80222d0:	f000 8087 	beq.w	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
 80222d4:	2d01      	cmp	r5, #1
 80222d6:	f240 8084 	bls.w	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
 80222da:	f108 0508 	add.w	r5, r8, #8
 80222de:	f108 0306 	add.w	r3, r8, #6
 80222e2:	449a      	add	sl, r3
 80222e4:	e043      	b.n	802236e <mbedtls_ssl_handshake_server_step+0x8ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 80222e6:	4b83      	ldr	r3, [pc, #524]	; (80224f4 <mbedtls_ssl_handshake_server_step+0xa40>)
 80222e8:	9300      	str	r3, [sp, #0]
 80222ea:	f44f 7391 	mov.w	r3, #290	; 0x122
 80222ee:	4a7c      	ldr	r2, [pc, #496]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 80222f0:	2101      	movs	r1, #1
 80222f2:	4620      	mov	r0, r4
 80222f4:	f7f3 fa0c 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80222f8:	2232      	movs	r2, #50	; 0x32
 80222fa:	2102      	movs	r1, #2
 80222fc:	4620      	mov	r0, r4
 80222fe:	f002 fdd3 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8022302:	f8df b200 	ldr.w	fp, [pc, #512]	; 8022504 <mbedtls_ssl_handshake_server_step+0xa50>
 8022306:	e40a      	b.n	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022308:	4b7a      	ldr	r3, [pc, #488]	; (80224f4 <mbedtls_ssl_handshake_server_step+0xa40>)
 802230a:	9300      	str	r3, [sp, #0]
 802230c:	f240 132b 	movw	r3, #299	; 0x12b
 8022310:	4a73      	ldr	r2, [pc, #460]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 8022312:	2101      	movs	r1, #1
 8022314:	4620      	mov	r0, r4
 8022316:	f7f3 f9fb 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802231a:	2232      	movs	r2, #50	; 0x32
 802231c:	2102      	movs	r1, #2
 802231e:	4620      	mov	r0, r4
 8022320:	f002 fdc2 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8022324:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8022504 <mbedtls_ssl_handshake_server_step+0xa50>
 8022328:	f7ff bbf9 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 802232c:	4b71      	ldr	r3, [pc, #452]	; (80224f4 <mbedtls_ssl_handshake_server_step+0xa40>)
 802232e:	9300      	str	r3, [sp, #0]
 8022330:	f44f 739a 	mov.w	r3, #308	; 0x134
 8022334:	4a6a      	ldr	r2, [pc, #424]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 8022336:	2101      	movs	r1, #1
 8022338:	4620      	mov	r0, r4
 802233a:	f7f3 f9e9 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802233e:	2232      	movs	r2, #50	; 0x32
 8022340:	2102      	movs	r1, #2
 8022342:	4620      	mov	r0, r4
 8022344:	f002 fdb0 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 8022348:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 8022504 <mbedtls_ssl_handshake_server_step+0xa50>
 802234c:	f7ff bbe7 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022350:	2250      	movs	r2, #80	; 0x50
 8022352:	2102      	movs	r1, #2
 8022354:	4620      	mov	r0, r4
 8022356:	f002 fda7 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 802235a:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8022508 <mbedtls_ssl_handshake_server_step+0xa54>
 802235e:	f7ff bbde 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    while( list_size > 0 && our_size > 1 )
 8022362:	45aa      	cmp	sl, r5
 8022364:	d03d      	beq.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
 8022366:	3502      	adds	r5, #2
 8022368:	f1b9 0f01 	cmp.w	r9, #1
 802236c:	d939      	bls.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
        curve_info = mbedtls_ecp_curve_info_from_tls_id( ( p[0] << 8 ) | p[1] );
 802236e:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8022372:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022376:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 802237a:	f7f4 fde7 	bl	8016f4c <mbedtls_ecp_curve_info_from_tls_id>
        if( curve_info != NULL )
 802237e:	2800      	cmp	r0, #0
 8022380:	d0ef      	beq.n	8022362 <mbedtls_ssl_handshake_server_step+0x8ae>
            *curves++ = curve_info;
 8022382:	f847 0b04 	str.w	r0, [r7], #4
            our_size--;
 8022386:	f109 39ff 	add.w	r9, r9, #4294967295
 802238a:	e7ea      	b.n	8022362 <mbedtls_ssl_handshake_server_step+0x8ae>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 802238c:	4b59      	ldr	r3, [pc, #356]	; (80224f4 <mbedtls_ssl_handshake_server_step+0xa40>)
 802238e:	9300      	str	r3, [sp, #0]
 8022390:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8022394:	4a52      	ldr	r2, [pc, #328]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 8022396:	2101      	movs	r1, #1
 8022398:	4620      	mov	r0, r4
 802239a:	f7f3 f9b9 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802239e:	2232      	movs	r2, #50	; 0x32
 80223a0:	2102      	movs	r1, #2
 80223a2:	4620      	mov	r0, r4
 80223a4:	f002 fd80 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 80223a8:	f8df b158 	ldr.w	fp, [pc, #344]	; 8022504 <mbedtls_ssl_handshake_server_step+0xa50>
 80223ac:	f7ff bbb7 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ssl->handshake->ecdh_ctx.point_format = p[0];
 80223b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80223b2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 80223b6:	7803      	ldrb	r3, [r0, #0]
 80223b8:	9301      	str	r3, [sp, #4]
 80223ba:	4b4f      	ldr	r3, [pc, #316]	; (80224f8 <mbedtls_ssl_handshake_server_step+0xa44>)
 80223bc:	9300      	str	r3, [sp, #0]
 80223be:	f240 1377 	movw	r3, #375	; 0x177
 80223c2:	4a47      	ldr	r2, [pc, #284]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 80223c4:	2104      	movs	r1, #4
 80223c6:	4620      	mov	r0, r4
 80223c8:	f7f3 f9a2 	bl	8015710 <mbedtls_debug_print_msg>
            return( 0 );
 80223cc:	e009      	b.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 80223ce:	9301      	str	r3, [sp, #4]
 80223d0:	4b4a      	ldr	r3, [pc, #296]	; (80224fc <mbedtls_ssl_handshake_server_step+0xa48>)
 80223d2:	9300      	str	r3, [sp, #0]
 80223d4:	f240 7323 	movw	r3, #1827	; 0x723
 80223d8:	4a41      	ldr	r2, [pc, #260]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 80223da:	2103      	movs	r1, #3
 80223dc:	4620      	mov	r0, r4
 80223de:	f7f3 f997 	bl	8015710 <mbedtls_debug_print_msg>
            ext_len -= 4 + ext_size;
 80223e2:	eba6 030b 	sub.w	r3, r6, fp
 80223e6:	1f1e      	subs	r6, r3, #4
            ext += 4 + ext_size;
 80223e8:	9a07      	ldr	r2, [sp, #28]
 80223ea:	4490      	add	r8, r2
            if( ext_len > 0 && ext_len < 4 )
 80223ec:	3b05      	subs	r3, #5
 80223ee:	2b02      	cmp	r3, #2
 80223f0:	d947      	bls.n	8022482 <mbedtls_ssl_handshake_server_step+0x9ce>
        while( ext_len != 0 )
 80223f2:	2e00      	cmp	r6, #0
 80223f4:	d057      	beq.n	80224a6 <mbedtls_ssl_handshake_server_step+0x9f2>
            if ( ext_len < 4 ) {
 80223f6:	2e03      	cmp	r6, #3
 80223f8:	f67f ae44 	bls.w	8022084 <mbedtls_ssl_handshake_server_step+0x5d0>
            ext_id   = ( ( ext[0] <<  8 ) | ( ext[1] ) );
 80223fc:	f898 2000 	ldrb.w	r2, [r8]
 8022400:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            ext_size = ( ( ext[2] <<  8 ) | ( ext[3] ) );
 8022408:	f898 1002 	ldrb.w	r1, [r8, #2]
 802240c:	f898 2003 	ldrb.w	r2, [r8, #3]
 8022410:	ea42 2b01 	orr.w	fp, r2, r1, lsl #8
            if( ext_size + 4 > ext_len )
 8022414:	f10b 0204 	add.w	r2, fp, #4
 8022418:	9207      	str	r2, [sp, #28]
 802241a:	4296      	cmp	r6, r2
 802241c:	f4ff ae43 	bcc.w	80220a6 <mbedtls_ssl_handshake_server_step+0x5f2>
            switch( ext_id )
 8022420:	2b0d      	cmp	r3, #13
 8022422:	f43f ae79 	beq.w	8022118 <mbedtls_ssl_handshake_server_step+0x664>
 8022426:	f73f ae4f 	bgt.w	80220c8 <mbedtls_ssl_handshake_server_step+0x614>
 802242a:	2b0a      	cmp	r3, #10
 802242c:	f43f af1e 	beq.w	802226c <mbedtls_ssl_handshake_server_step+0x7b8>
 8022430:	2b0b      	cmp	r3, #11
 8022432:	d1cc      	bne.n	80223ce <mbedtls_ssl_handshake_server_step+0x91a>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported point formats extension" ) );
 8022434:	4b32      	ldr	r3, [pc, #200]	; (8022500 <mbedtls_ssl_handshake_server_step+0xa4c>)
 8022436:	9300      	str	r3, [sp, #0]
 8022438:	f240 63d2 	movw	r3, #1746	; 0x6d2
 802243c:	4a28      	ldr	r2, [pc, #160]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 802243e:	2103      	movs	r1, #3
 8022440:	4620      	mov	r0, r4
 8022442:	f7f3 f965 	bl	8015710 <mbedtls_debug_print_msg>
                ssl->handshake->cli_exts |= MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT;
 8022446:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8022448:	f8d2 3390 	ldr.w	r3, [r2, #912]	; 0x390
 802244c:	f043 0301 	orr.w	r3, r3, #1
 8022450:	f8c2 3390 	str.w	r3, [r2, #912]	; 0x390
    if( len == 0 || (size_t)( buf[0] + 1 ) != len )
 8022454:	f1bb 0f00 	cmp.w	fp, #0
 8022458:	d098      	beq.n	802238c <mbedtls_ssl_handshake_server_step+0x8d8>
 802245a:	f898 3004 	ldrb.w	r3, [r8, #4]
 802245e:	1c5a      	adds	r2, r3, #1
 8022460:	4593      	cmp	fp, r2
 8022462:	d193      	bne.n	802238c <mbedtls_ssl_handshake_server_step+0x8d8>
    list_size = buf[0];
 8022464:	461a      	mov	r2, r3
    while( list_size > 0 )
 8022466:	2b00      	cmp	r3, #0
 8022468:	d0bb      	beq.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
 802246a:	f108 0305 	add.w	r3, r8, #5
 802246e:	4619      	mov	r1, r3
 8022470:	4411      	add	r1, r2
 8022472:	4618      	mov	r0, r3
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 8022474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022478:	2a01      	cmp	r2, #1
 802247a:	d999      	bls.n	80223b0 <mbedtls_ssl_handshake_server_step+0x8fc>
    while( list_size > 0 )
 802247c:	4299      	cmp	r1, r3
 802247e:	d1f8      	bne.n	8022472 <mbedtls_ssl_handshake_server_step+0x9be>
 8022480:	e7af      	b.n	80223e2 <mbedtls_ssl_handshake_server_step+0x92e>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client hello message" ) );
 8022482:	4b1c      	ldr	r3, [pc, #112]	; (80224f4 <mbedtls_ssl_handshake_server_step+0xa40>)
 8022484:	9300      	str	r3, [sp, #0]
 8022486:	f240 732c 	movw	r3, #1836	; 0x72c
 802248a:	4a15      	ldr	r2, [pc, #84]	; (80224e0 <mbedtls_ssl_handshake_server_step+0xa2c>)
 802248c:	2101      	movs	r1, #1
 802248e:	4620      	mov	r0, r4
 8022490:	f7f3 f93e 	bl	8015710 <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022494:	2232      	movs	r2, #50	; 0x32
 8022496:	2102      	movs	r1, #2
 8022498:	4620      	mov	r0, r4
 802249a:	f002 fd05 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802249e:	f8df b064 	ldr.w	fp, [pc, #100]	; 8022504 <mbedtls_ssl_handshake_server_step+0xa50>
 80224a2:	f7ff bb3c 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 80224a6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80224aa:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    if( sig_hash_alg_ext_present == 0 )
 80224ae:	9b08      	ldr	r3, [sp, #32]
 80224b0:	b13b      	cbz	r3, 80224c2 <mbedtls_ssl_handshake_server_step+0xa0e>
    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )
 80224b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80224b4:	1c96      	adds	r6, r2, #2
        mbedtls_md_type_t md_default = MBEDTLS_MD_SHA1;
 80224b6:	4633      	mov	r3, r6
    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )
 80224b8:	f06f 0101 	mvn.w	r1, #1
 80224bc:	1a89      	subs	r1, r1, r2
 80224be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80224c0:	e028      	b.n	8022514 <mbedtls_ssl_handshake_server_step+0xa60>
        if( mbedtls_ssl_check_sig_hash( ssl, md_default ) != 0 )
 80224c2:	2104      	movs	r1, #4
 80224c4:	4620      	mov	r0, r4
 80224c6:	f004 fc69 	bl	8026d9c <mbedtls_ssl_check_sig_hash>
        mbedtls_md_type_t md_default = MBEDTLS_MD_SHA1;
 80224ca:	2800      	cmp	r0, #0
        mbedtls_ssl_sig_hash_set_const_hash( &ssl->handshake->hash_algs, md_default );
 80224cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80224ce:	bf08      	it	eq
 80224d0:	2104      	moveq	r1, #4
 80224d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80224d4:	f004 f990 	bl	80267f8 <mbedtls_ssl_sig_hash_set_const_hash>
 80224d8:	e7eb      	b.n	80224b2 <mbedtls_ssl_handshake_server_step+0x9fe>
 80224da:	bf00      	nop
 80224dc:	08034814 	.word	0x08034814
 80224e0:	080345cc 	.word	0x080345cc
 80224e4:	080348a4 	.word	0x080348a4
 80224e8:	0803485c 	.word	0x0803485c
 80224ec:	080348e8 	.word	0x080348e8
 80224f0:	0803492c 	.word	0x0803492c
 80224f4:	0803467c 	.word	0x0803467c
 80224f8:	08033fc4 	.word	0x08033fc4
 80224fc:	08033ffc 	.word	0x08033ffc
 8022500:	08034958 	.word	0x08034958
 8022504:	ffff8700 	.word	0xffff8700
 8022508:	ffff8100 	.word	0xffff8100
    for( i = 0, p = buf + ciph_offset + 2; i < ciph_len; i += 2, p += 2 )
 802250c:	3302      	adds	r3, #2
 802250e:	18ca      	adds	r2, r1, r3
 8022510:	4290      	cmp	r0, r2
 8022512:	d914      	bls.n	802253e <mbedtls_ssl_handshake_server_step+0xa8a>
        if( p[0] == 0 && p[1] == MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO )
 8022514:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8022518:	2a00      	cmp	r2, #0
 802251a:	d1f7      	bne.n	802250c <mbedtls_ssl_handshake_server_step+0xa58>
 802251c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8022520:	2aff      	cmp	r2, #255	; 0xff
 8022522:	d1f3      	bne.n	802250c <mbedtls_ssl_handshake_server_step+0xa58>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "received TLS_EMPTY_RENEGOTIATION_INFO " ) );
 8022524:	4bb1      	ldr	r3, [pc, #708]	; (80227ec <mbedtls_ssl_handshake_server_step+0xd38>)
 8022526:	9300      	str	r3, [sp, #0]
 8022528:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 802252c:	4ab0      	ldr	r2, [pc, #704]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 802252e:	2103      	movs	r1, #3
 8022530:	4620      	mov	r0, r4
 8022532:	f7f3 f8ed 	bl	8015710 <mbedtls_debug_print_msg>
            ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 8022536:	2301      	movs	r3, #1
 8022538:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 802253c:	e00a      	b.n	8022554 <mbedtls_ssl_handshake_server_step+0xaa0>
 802253e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8022542:	2b01      	cmp	r3, #1
 8022544:	d006      	beq.n	8022554 <mbedtls_ssl_handshake_server_step+0xaa0>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8022546:	6823      	ldr	r3, [r4, #0]
 8022548:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 802254c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8022550:	2b20      	cmp	r3, #32
 8022552:	d00c      	beq.n	802256e <mbedtls_ssl_handshake_server_step+0xaba>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 8022554:	6823      	ldr	r3, [r4, #0]
 8022556:	68e2      	ldr	r2, [r4, #12]
 8022558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802255c:	9308      	str	r3, [sp, #32]
    got_common_suite = 0;
 802255e:	4659      	mov	r1, fp
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "trying ciphersuite: %s", suite_info->name ) );
 8022560:	f8df 828c 	ldr.w	r8, [pc, #652]	; 80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>
 8022564:	f8cd a01c 	str.w	sl, [sp, #28]
 8022568:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 802256c:	e181      	b.n	8022872 <mbedtls_ssl_handshake_server_step+0xdbe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 802256e:	4ba1      	ldr	r3, [pc, #644]	; (80227f4 <mbedtls_ssl_handshake_server_step+0xd40>)
 8022570:	9300      	str	r3, [sp, #0]
 8022572:	f240 737e 	movw	r3, #1918	; 0x77e
 8022576:	4a9e      	ldr	r2, [pc, #632]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 8022578:	2101      	movs	r1, #1
 802257a:	4620      	mov	r0, r4
 802257c:	f7f3 f8c8 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022580:	2228      	movs	r2, #40	; 0x28
 8022582:	2102      	movs	r1, #2
 8022584:	4620      	mov	r0, r4
 8022586:	f002 fc8f 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
 802258a:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8022830 <mbedtls_ssl_handshake_server_step+0xd7c>
 802258e:	f7ff bac6 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8022592:	4b99      	ldr	r3, [pc, #612]	; (80227f8 <mbedtls_ssl_handshake_server_step+0xd44>)
 8022594:	9300      	str	r3, [sp, #0]
 8022596:	f44f 734c 	mov.w	r3, #816	; 0x330
 802259a:	4a95      	ldr	r2, [pc, #596]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 802259c:	2101      	movs	r1, #1
 802259e:	4620      	mov	r0, r4
 80225a0:	f7f3 f8b6 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80225a4:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8022834 <mbedtls_ssl_handshake_server_step+0xd80>
 80225a8:	f7ff bab9 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: version" ) );
 80225ac:	4b93      	ldr	r3, [pc, #588]	; (80227fc <mbedtls_ssl_handshake_server_step+0xd48>)
 80225ae:	9300      	str	r3, [sp, #0]
 80225b0:	f240 3339 	movw	r3, #825	; 0x339
 80225b4:	4642      	mov	r2, r8
 80225b6:	2103      	movs	r1, #3
 80225b8:	4620      	mov	r0, r4
 80225ba:	f7f3 f8a9 	bl	8015710 <mbedtls_debug_print_msg>
            got_common_suite = 1;
 80225be:	9907      	ldr	r1, [sp, #28]
        for( i = 0; ciphersuites[i] != 0; i++ )
 80225c0:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80225c4:	2800      	cmp	r0, #0
 80225c6:	f000 814d 	beq.w	8022864 <mbedtls_ssl_handshake_server_step+0xdb0>
            if( p[0] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||
 80225ca:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 80225ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80225d2:	429a      	cmp	r2, r3
 80225d4:	d1f4      	bne.n	80225c0 <mbedtls_ssl_handshake_server_step+0xb0c>
                p[1] != ( ( ciphersuites[i]      ) & 0xFF ) )
 80225d6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80225da:	b2c3      	uxtb	r3, r0
            if( p[0] != ( ( ciphersuites[i] >> 8 ) & 0xFF ) ||
 80225dc:	429a      	cmp	r2, r3
 80225de:	d1ef      	bne.n	80225c0 <mbedtls_ssl_handshake_server_step+0xb0c>
    suite_info = mbedtls_ssl_ciphersuite_from_id( suite_id );
 80225e0:	f7fd fc6c 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL )
 80225e4:	4607      	mov	r7, r0
 80225e6:	2800      	cmp	r0, #0
 80225e8:	d0d3      	beq.n	8022592 <mbedtls_ssl_handshake_server_step+0xade>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "trying ciphersuite: %s", suite_info->name ) );
 80225ea:	6843      	ldr	r3, [r0, #4]
 80225ec:	9301      	str	r3, [sp, #4]
 80225ee:	4b84      	ldr	r3, [pc, #528]	; (8022800 <mbedtls_ssl_handshake_server_step+0xd4c>)
 80225f0:	9300      	str	r3, [sp, #0]
 80225f2:	f44f 734d 	mov.w	r3, #820	; 0x334
 80225f6:	4642      	mov	r2, r8
 80225f8:	2103      	movs	r1, #3
 80225fa:	4620      	mov	r0, r4
 80225fc:	f7f3 f888 	bl	8015710 <mbedtls_debug_print_msg>
    if( suite_info->min_minor_ver > ssl->minor_ver ||
 8022600:	68e3      	ldr	r3, [r4, #12]
 8022602:	693a      	ldr	r2, [r7, #16]
 8022604:	429a      	cmp	r2, r3
 8022606:	dcd1      	bgt.n	80225ac <mbedtls_ssl_handshake_server_step+0xaf8>
 8022608:	69ba      	ldr	r2, [r7, #24]
 802260a:	4293      	cmp	r3, r2
 802260c:	dcce      	bgt.n	80225ac <mbedtls_ssl_handshake_server_step+0xaf8>
    if( mbedtls_ssl_ciphersuite_uses_ec( suite_info ) &&
 802260e:	4638      	mov	r0, r7
 8022610:	f7fd fcb4 	bl	801ff7c <mbedtls_ssl_ciphersuite_uses_ec>
 8022614:	b130      	cbz	r0, 8022624 <mbedtls_ssl_handshake_server_step+0xb70>
        ( ssl->handshake->curves == NULL ||
 8022616:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022618:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
    if( mbedtls_ssl_ciphersuite_uses_ec( suite_info ) &&
 802261c:	2b00      	cmp	r3, #0
 802261e:	d02e      	beq.n	802267e <mbedtls_ssl_handshake_server_step+0xbca>
        ( ssl->handshake->curves == NULL ||
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	b363      	cbz	r3, 802267e <mbedtls_ssl_handshake_server_step+0xbca>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8022624:	68e3      	ldr	r3, [r4, #12]
 8022626:	2b03      	cmp	r3, #3
 8022628:	d033      	beq.n	8022692 <mbedtls_ssl_handshake_server_step+0xbde>
        mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );
 802262a:	4638      	mov	r0, r7
 802262c:	f7fd fc8a 	bl	801ff44 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
    if( pk_alg == MBEDTLS_PK_NONE )
 8022630:	4682      	mov	sl, r0
 8022632:	2800      	cmp	r0, #0
 8022634:	d145      	bne.n	80226c2 <mbedtls_ssl_handshake_server_step+0xc0e>
 8022636:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "selected ciphersuite: %s", ciphersuite_info->name ) );
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	9301      	str	r3, [sp, #4]
 802263e:	4b71      	ldr	r3, [pc, #452]	; (8022804 <mbedtls_ssl_handshake_server_step+0xd50>)
 8022640:	9300      	str	r3, [sp, #0]
 8022642:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8022646:	4a6a      	ldr	r2, [pc, #424]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 8022648:	2102      	movs	r1, #2
 802264a:	4620      	mov	r0, r4
 802264c:	f7f3 f860 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->session_negotiate->ciphersuite = ciphersuites[i];
 8022650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022652:	682a      	ldr	r2, [r5, #0]
 8022654:	609a      	str	r2, [r3, #8]
    ssl->transform_negotiate->ciphersuite_info = ciphersuite_info;
 8022656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022658:	601f      	str	r7, [r3, #0]
    ssl->state++;
 802265a:	6863      	ldr	r3, [r4, #4]
 802265c:	3301      	adds	r3, #1
 802265e:	6063      	str	r3, [r4, #4]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8022660:	68e3      	ldr	r3, [r4, #12]
 8022662:	2b03      	cmp	r3, #3
 8022664:	f000 8130 	beq.w	80228c8 <mbedtls_ssl_handshake_server_step+0xe14>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse client hello" ) );
 8022668:	4b67      	ldr	r3, [pc, #412]	; (8022808 <mbedtls_ssl_handshake_server_step+0xd54>)
 802266a:	9300      	str	r3, [sp, #0]
 802266c:	f240 73f1 	movw	r3, #2033	; 0x7f1
 8022670:	4a5f      	ldr	r2, [pc, #380]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 8022672:	2102      	movs	r1, #2
 8022674:	4620      	mov	r0, r4
 8022676:	f7f3 f84b 	bl	8015710 <mbedtls_debug_print_msg>
            break;
 802267a:	f7ff ba50 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: "
 802267e:	4b63      	ldr	r3, [pc, #396]	; (802280c <mbedtls_ssl_handshake_server_step+0xd58>)
 8022680:	9300      	str	r3, [sp, #0]
 8022682:	f44f 7357 	mov.w	r3, #860	; 0x35c
 8022686:	4642      	mov	r2, r8
 8022688:	2103      	movs	r1, #3
 802268a:	4620      	mov	r0, r4
 802268c:	f7f3 f840 	bl	8015710 <mbedtls_debug_print_msg>
        return( 0 );
 8022690:	e795      	b.n	80225be <mbedtls_ssl_handshake_server_step+0xb0a>
        sig_type = mbedtls_ssl_get_ciphersuite_sig_alg( suite_info );
 8022692:	4638      	mov	r0, r7
 8022694:	f7fd fc67 	bl	801ff66 <mbedtls_ssl_get_ciphersuite_sig_alg>
        if( sig_type != MBEDTLS_PK_NONE &&
 8022698:	4681      	mov	r9, r0
 802269a:	2800      	cmp	r0, #0
 802269c:	d0c5      	beq.n	802262a <mbedtls_ssl_handshake_server_step+0xb76>
            mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs, sig_type ) == MBEDTLS_MD_NONE )
 802269e:	4601      	mov	r1, r0
 80226a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80226a2:	f004 f892 	bl	80267ca <mbedtls_ssl_sig_hash_set_find>
        if( sig_type != MBEDTLS_PK_NONE &&
 80226a6:	2800      	cmp	r0, #0
 80226a8:	d1bf      	bne.n	802262a <mbedtls_ssl_handshake_server_step+0xb76>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: no suitable hash algorithm "
 80226aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80226ae:	4b58      	ldr	r3, [pc, #352]	; (8022810 <mbedtls_ssl_handshake_server_step+0xd5c>)
 80226b0:	9300      	str	r3, [sp, #0]
 80226b2:	f240 3379 	movw	r3, #889	; 0x379
 80226b6:	4642      	mov	r2, r8
 80226b8:	2103      	movs	r1, #3
 80226ba:	4620      	mov	r0, r4
 80226bc:	f7f3 f828 	bl	8015710 <mbedtls_debug_print_msg>
            return( 0 );
 80226c0:	e77d      	b.n	80225be <mbedtls_ssl_handshake_server_step+0xb0a>
        list = ssl->conf->key_cert;
 80226c2:	6823      	ldr	r3, [r4, #0]
 80226c4:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite requires certificate" ) );
 80226c8:	4b52      	ldr	r3, [pc, #328]	; (8022814 <mbedtls_ssl_handshake_server_step+0xd60>)
 80226ca:	9300      	str	r3, [sp, #0]
 80226cc:	f240 23ce 	movw	r3, #718	; 0x2ce
 80226d0:	4642      	mov	r2, r8
 80226d2:	2103      	movs	r1, #3
 80226d4:	4620      	mov	r0, r4
 80226d6:	f7f3 f81b 	bl	8015710 <mbedtls_debug_print_msg>
    if( list == NULL )
 80226da:	f1b9 0f00 	cmp.w	r9, #0
 80226de:	d007      	beq.n	80226f0 <mbedtls_ssl_handshake_server_step+0xc3c>
    mbedtls_ssl_key_cert *cur, *list, *fallback = NULL;
 80226e0:	2300      	movs	r3, #0
 80226e2:	9309      	str	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_CRT( 3, "candidate certificate chain, certificate",
 80226e4:	f8df b150 	ldr.w	fp, [pc, #336]	; 8022838 <mbedtls_ssl_handshake_server_step+0xd84>
 80226e8:	4633      	mov	r3, r6
 80226ea:	464e      	mov	r6, r9
 80226ec:	4699      	mov	r9, r3
 80226ee:	e01f      	b.n	8022730 <mbedtls_ssl_handshake_server_step+0xc7c>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "server has no certificate" ) );
 80226f0:	4b49      	ldr	r3, [pc, #292]	; (8022818 <mbedtls_ssl_handshake_server_step+0xd64>)
 80226f2:	9300      	str	r3, [sp, #0]
 80226f4:	f240 23d2 	movw	r3, #722	; 0x2d2
 80226f8:	4642      	mov	r2, r8
 80226fa:	2103      	movs	r1, #3
 80226fc:	4620      	mov	r0, r4
 80226fe:	f7f3 f807 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite mismatch: "
 8022702:	4b46      	ldr	r3, [pc, #280]	; (802281c <mbedtls_ssl_handshake_server_step+0xd68>)
 8022704:	9300      	str	r3, [sp, #0]
 8022706:	f44f 7363 	mov.w	r3, #908	; 0x38c
 802270a:	4642      	mov	r2, r8
 802270c:	2103      	movs	r1, #3
 802270e:	4620      	mov	r0, r4
 8022710:	f7f2 fffe 	bl	8015710 <mbedtls_debug_print_msg>
        return( 0 );
 8022714:	e753      	b.n	80225be <mbedtls_ssl_handshake_server_step+0xb0a>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: key type" ) );
 8022716:	4b42      	ldr	r3, [pc, #264]	; (8022820 <mbedtls_ssl_handshake_server_step+0xd6c>)
 8022718:	9300      	str	r3, [sp, #0]
 802271a:	f240 23dd 	movw	r3, #733	; 0x2dd
 802271e:	4642      	mov	r2, r8
 8022720:	2103      	movs	r1, #3
 8022722:	4620      	mov	r0, r4
 8022724:	f7f2 fff4 	bl	8015710 <mbedtls_debug_print_msg>
    for( cur = list; cur != NULL; cur = cur->next )
 8022728:	68b6      	ldr	r6, [r6, #8]
 802272a:	2e00      	cmp	r6, #0
 802272c:	f001 814a 	beq.w	80239c4 <mbedtls_ssl_handshake_server_step+0x1f10>
        MBEDTLS_SSL_DEBUG_CRT( 3, "candidate certificate chain, certificate",
 8022730:	6833      	ldr	r3, [r6, #0]
 8022732:	9301      	str	r3, [sp, #4]
 8022734:	f8cd b000 	str.w	fp, [sp]
 8022738:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 802273c:	4642      	mov	r2, r8
 802273e:	2103      	movs	r1, #3
 8022740:	4620      	mov	r0, r4
 8022742:	f7f3 fa01 	bl	8015b48 <mbedtls_debug_print_crt>
        if( ! mbedtls_pk_can_do( &cur->cert->pk, pk_alg ) )
 8022746:	6830      	ldr	r0, [r6, #0]
 8022748:	4651      	mov	r1, sl
 802274a:	30bc      	adds	r0, #188	; 0xbc
 802274c:	f7f7 fcd2 	bl	801a0f4 <mbedtls_pk_can_do>
 8022750:	2800      	cmp	r0, #0
 8022752:	d0e0      	beq.n	8022716 <mbedtls_ssl_handshake_server_step+0xc62>
        if( mbedtls_ssl_check_cert_usage( cur->cert, ciphersuite_info,
 8022754:	ab1c      	add	r3, sp, #112	; 0x70
 8022756:	2201      	movs	r2, #1
 8022758:	4639      	mov	r1, r7
 802275a:	6830      	ldr	r0, [r6, #0]
 802275c:	f004 fb34 	bl	8026dc8 <mbedtls_ssl_check_cert_usage>
 8022760:	b9f8      	cbnz	r0, 80227a2 <mbedtls_ssl_handshake_server_step+0xcee>
        if( pk_alg == MBEDTLS_PK_ECDSA &&
 8022762:	f1ba 0f04 	cmp.w	sl, #4
 8022766:	d026      	beq.n	80227b6 <mbedtls_ssl_handshake_server_step+0xd02>
        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 &&
 8022768:	68e3      	ldr	r3, [r4, #12]
 802276a:	2b02      	cmp	r3, #2
 802276c:	dc76      	bgt.n	802285c <mbedtls_ssl_handshake_server_step+0xda8>
            cur->cert->sig_md != MBEDTLS_MD_SHA1 )
 802276e:	6833      	ldr	r3, [r6, #0]
        if( ssl->minor_ver < MBEDTLS_SSL_MINOR_VERSION_3 &&
 8022770:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8022774:	2b04      	cmp	r3, #4
 8022776:	d161      	bne.n	802283c <mbedtls_ssl_handshake_server_step+0xd88>
 8022778:	46b1      	mov	r9, r6
 802277a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
        ssl->handshake->key_cert = cur;
 802277e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022780:	f8c3 91b8 	str.w	r9, [r3, #440]	; 0x1b8
        MBEDTLS_SSL_DEBUG_CRT( 3, "selected certificate chain, certificate",
 8022784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022786:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	9301      	str	r3, [sp, #4]
 802278e:	4b25      	ldr	r3, [pc, #148]	; (8022824 <mbedtls_ssl_handshake_server_step+0xd70>)
 8022790:	9300      	str	r3, [sp, #0]
 8022792:	f240 3316 	movw	r3, #790	; 0x316
 8022796:	4a16      	ldr	r2, [pc, #88]	; (80227f0 <mbedtls_ssl_handshake_server_step+0xd3c>)
 8022798:	2103      	movs	r1, #3
 802279a:	4620      	mov	r0, r4
 802279c:	f7f3 f9d4 	bl	8015b48 <mbedtls_debug_print_crt>
        return( 0 );
 80227a0:	e74b      	b.n	802263a <mbedtls_ssl_handshake_server_step+0xb86>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: "
 80227a2:	4b21      	ldr	r3, [pc, #132]	; (8022828 <mbedtls_ssl_handshake_server_step+0xd74>)
 80227a4:	9300      	str	r3, [sp, #0]
 80227a6:	f44f 733b 	mov.w	r3, #748	; 0x2ec
 80227aa:	4642      	mov	r2, r8
 80227ac:	2103      	movs	r1, #3
 80227ae:	4620      	mov	r0, r4
 80227b0:	f7f2 ffae 	bl	8015710 <mbedtls_debug_print_msg>
            continue;
 80227b4:	e7b8      	b.n	8022728 <mbedtls_ssl_handshake_server_step+0xc74>
            ssl_check_key_curve( &cur->cert->pk, ssl->handshake->curves ) != 0 )
 80227b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80227b8:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
    mbedtls_ecp_group_id grp_id = mbedtls_pk_ec( *pk )->grp.id;
 80227bc:	6833      	ldr	r3, [r6, #0]
 80227be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80227c2:	7819      	ldrb	r1, [r3, #0]
    while( *crv != NULL )
 80227c4:	6813      	ldr	r3, [r2, #0]
 80227c6:	b133      	cbz	r3, 80227d6 <mbedtls_ssl_handshake_server_step+0xd22>
        if( (*crv)->grp_id == grp_id )
 80227c8:	781b      	ldrb	r3, [r3, #0]
 80227ca:	428b      	cmp	r3, r1
 80227cc:	d0cc      	beq.n	8022768 <mbedtls_ssl_handshake_server_step+0xcb4>
    while( *crv != NULL )
 80227ce:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80227d2:	2b00      	cmp	r3, #0
 80227d4:	d1f8      	bne.n	80227c8 <mbedtls_ssl_handshake_server_step+0xd14>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate mismatch: elliptic curve" ) );
 80227d6:	4b15      	ldr	r3, [pc, #84]	; (802282c <mbedtls_ssl_handshake_server_step+0xd78>)
 80227d8:	9300      	str	r3, [sp, #0]
 80227da:	f240 23f5 	movw	r3, #757	; 0x2f5
 80227de:	4642      	mov	r2, r8
 80227e0:	2103      	movs	r1, #3
 80227e2:	4620      	mov	r0, r4
 80227e4:	f7f2 ff94 	bl	8015710 <mbedtls_debug_print_msg>
            continue;
 80227e8:	e79e      	b.n	8022728 <mbedtls_ssl_handshake_server_step+0xc74>
 80227ea:	bf00      	nop
 80227ec:	08034980 	.word	0x08034980
 80227f0:	080345cc 	.word	0x080345cc
 80227f4:	08034024 	.word	0x08034024
 80227f8:	08034130 	.word	0x08034130
 80227fc:	080349c0 	.word	0x080349c0
 8022800:	080349a8 	.word	0x080349a8
 8022804:	080350e4 	.word	0x080350e4
 8022808:	08034c4c 	.word	0x08034c4c
 802280c:	080349e0 	.word	0x080349e0
 8022810:	08034a10 	.word	0x08034a10
 8022814:	08034a5c 	.word	0x08034a5c
 8022818:	08034a80 	.word	0x08034a80
 802281c:	080350b4 	.word	0x080350b4
 8022820:	08034ac8 	.word	0x08034ac8
 8022824:	08034b5c 	.word	0x08034b5c
 8022828:	08034ae8 	.word	0x08034ae8
 802282c:	08035100 	.word	0x08035100
 8022830:	ffff8700 	.word	0xffff8700
 8022834:	ffff9400 	.word	0xffff9400
 8022838:	08034a9c 	.word	0x08034a9c
            if( fallback == NULL )
 802283c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802283e:	461a      	mov	r2, r3
 8022840:	2b00      	cmp	r3, #0
 8022842:	bf08      	it	eq
 8022844:	4632      	moveq	r2, r6
 8022846:	9209      	str	r2, [sp, #36]	; 0x24
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "certificate not preferred: "
 8022848:	4b8a      	ldr	r3, [pc, #552]	; (8022a74 <mbedtls_ssl_handshake_server_step+0xfc0>)
 802284a:	9300      	str	r3, [sp, #0]
 802284c:	f240 3305 	movw	r3, #773	; 0x305
 8022850:	4642      	mov	r2, r8
 8022852:	2103      	movs	r1, #3
 8022854:	4620      	mov	r0, r4
 8022856:	f7f2 ff5b 	bl	8015710 <mbedtls_debug_print_msg>
            continue;
 802285a:	e765      	b.n	8022728 <mbedtls_ssl_handshake_server_step+0xc74>
 802285c:	46b1      	mov	r9, r6
 802285e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8022862:	e78c      	b.n	802277e <mbedtls_ssl_handshake_server_step+0xcca>
    for( j = 0, p = buf + ciph_offset + 2; j < ciph_len; j += 2, p += 2 )
 8022864:	3602      	adds	r6, #2
 8022866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022868:	1af3      	subs	r3, r6, r3
 802286a:	3b02      	subs	r3, #2
 802286c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802286e:	429a      	cmp	r2, r3
 8022870:	d905      	bls.n	802287e <mbedtls_ssl_handshake_server_step+0xdca>
        for( i = 0; ciphersuites[i] != 0; i++ )
 8022872:	9b08      	ldr	r3, [sp, #32]
 8022874:	6818      	ldr	r0, [r3, #0]
 8022876:	2800      	cmp	r0, #0
 8022878:	d0f4      	beq.n	8022864 <mbedtls_ssl_handshake_server_step+0xdb0>
 802287a:	9d08      	ldr	r5, [sp, #32]
 802287c:	e6a5      	b.n	80225ca <mbedtls_ssl_handshake_server_step+0xb16>
    if( got_common_suite )
 802287e:	b189      	cbz	r1, 80228a4 <mbedtls_ssl_handshake_server_step+0xdf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got ciphersuites in common, "
 8022880:	4b7d      	ldr	r3, [pc, #500]	; (8022a78 <mbedtls_ssl_handshake_server_step+0xfc4>)
 8022882:	9300      	str	r3, [sp, #0]
 8022884:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8022888:	4a7c      	ldr	r2, [pc, #496]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 802288a:	2101      	movs	r1, #1
 802288c:	4620      	mov	r0, r4
 802288e:	f7f2 ff3f 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8022892:	2228      	movs	r2, #40	; 0x28
 8022894:	2102      	movs	r1, #2
 8022896:	4620      	mov	r0, r4
 8022898:	f002 fb06 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE );
 802289c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8022aa4 <mbedtls_ssl_handshake_server_step+0xff0>
 80228a0:	f7ff b93d 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no ciphersuites in common" ) );
 80228a4:	4b76      	ldr	r3, [pc, #472]	; (8022a80 <mbedtls_ssl_handshake_server_step+0xfcc>)
 80228a6:	9300      	str	r3, [sp, #0]
 80228a8:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 80228ac:	4a73      	ldr	r2, [pc, #460]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 80228ae:	2101      	movs	r1, #1
 80228b0:	4620      	mov	r0, r4
 80228b2:	f7f2 ff2d 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80228b6:	2228      	movs	r2, #40	; 0x28
 80228b8:	2102      	movs	r1, #2
 80228ba:	4620      	mov	r0, r4
 80228bc:	f002 faf4 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
 80228c0:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8022aa8 <mbedtls_ssl_handshake_server_step+0xff4>
 80228c4:	f7ff b92b 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        mbedtls_pk_type_t sig_alg = mbedtls_ssl_get_ciphersuite_sig_alg( ciphersuite_info );
 80228c8:	4638      	mov	r0, r7
 80228ca:	f7fd fb4c 	bl	801ff66 <mbedtls_ssl_get_ciphersuite_sig_alg>
        if( sig_alg != MBEDTLS_PK_NONE )
 80228ce:	4601      	mov	r1, r0
 80228d0:	b178      	cbz	r0, 80228f2 <mbedtls_ssl_handshake_server_step+0xe3e>
            mbedtls_md_type_t md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,
 80228d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80228d4:	f003 ff79 	bl	80267ca <mbedtls_ssl_sig_hash_set_find>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello v3, signature_algorithm ext: %d",
 80228d8:	f003 ffa7 	bl	802682a <mbedtls_ssl_hash_from_md_alg>
 80228dc:	9001      	str	r0, [sp, #4]
 80228de:	4b69      	ldr	r3, [pc, #420]	; (8022a84 <mbedtls_ssl_handshake_server_step+0xfd0>)
 80228e0:	9300      	str	r3, [sp, #0]
 80228e2:	f240 73e6 	movw	r3, #2022	; 0x7e6
 80228e6:	4a65      	ldr	r2, [pc, #404]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 80228e8:	2103      	movs	r1, #3
 80228ea:	4620      	mov	r0, r4
 80228ec:	f7f2 ff10 	bl	8015710 <mbedtls_debug_print_msg>
 80228f0:	e6ba      	b.n	8022668 <mbedtls_ssl_handshake_server_step+0xbb4>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "no hash algorithm for signature algorithm "
 80228f2:	2300      	movs	r3, #0
 80228f4:	9301      	str	r3, [sp, #4]
 80228f6:	4b64      	ldr	r3, [pc, #400]	; (8022a88 <mbedtls_ssl_handshake_server_step+0xfd4>)
 80228f8:	9300      	str	r3, [sp, #0]
 80228fa:	f240 73eb 	movw	r3, #2027	; 0x7eb
 80228fe:	4a5f      	ldr	r2, [pc, #380]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 8022900:	2103      	movs	r1, #3
 8022902:	4620      	mov	r0, r4
 8022904:	f7f2 ff04 	bl	8015710 <mbedtls_debug_print_msg>
 8022908:	e6ae      	b.n	8022668 <mbedtls_ssl_handshake_server_step+0xbb4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server hello" ) );
 802290a:	4b60      	ldr	r3, [pc, #384]	; (8022a8c <mbedtls_ssl_handshake_server_step+0xfd8>)
 802290c:	9300      	str	r3, [sp, #0]
 802290e:	f640 1371 	movw	r3, #2417	; 0x971
 8022912:	4a5a      	ldr	r2, [pc, #360]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 8022914:	2102      	movs	r1, #2
 8022916:	4620      	mov	r0, r4
 8022918:	f7f2 fefa 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->conf->f_rng == NULL )
 802291c:	6823      	ldr	r3, [r4, #0]
 802291e:	699a      	ldr	r2, [r3, #24]
 8022920:	2a00      	cmp	r2, #0
 8022922:	f000 808c 	beq.w	8022a3e <mbedtls_ssl_handshake_server_step+0xf8a>
    buf = ssl->out_msg;
 8022926:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
                       ssl->conf->transport, p );
 802292a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
    mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 802292e:	1d2b      	adds	r3, r5, #4
 8022930:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8022934:	68e1      	ldr	r1, [r4, #12]
 8022936:	68a0      	ldr	r0, [r4, #8]
 8022938:	f004 fa48 	bl	8026dcc <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen version: [%d:%d]",
 802293c:	4e4f      	ldr	r6, [pc, #316]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 802293e:	796b      	ldrb	r3, [r5, #5]
 8022940:	9302      	str	r3, [sp, #8]
 8022942:	792b      	ldrb	r3, [r5, #4]
 8022944:	9301      	str	r3, [sp, #4]
 8022946:	4b52      	ldr	r3, [pc, #328]	; (8022a90 <mbedtls_ssl_handshake_server_step+0xfdc>)
 8022948:	9300      	str	r3, [sp, #0]
 802294a:	f640 1392 	movw	r3, #2450	; 0x992
 802294e:	4632      	mov	r2, r6
 8022950:	2103      	movs	r1, #3
 8022952:	4620      	mov	r0, r4
 8022954:	f7f2 fedc 	bl	8015710 <mbedtls_debug_print_msg>
    t = mbedtls_time( NULL );
 8022958:	2000      	movs	r0, #0
 802295a:	f008 fc11 	bl	802b180 <time>
    *p++ = (unsigned char)( t >> 24 );
 802295e:	0e03      	lsrs	r3, r0, #24
 8022960:	71ab      	strb	r3, [r5, #6]
    *p++ = (unsigned char)( t >> 16 );
 8022962:	0c03      	lsrs	r3, r0, #16
 8022964:	71eb      	strb	r3, [r5, #7]
    *p++ = (unsigned char)( t >>  8 );
 8022966:	0a03      	lsrs	r3, r0, #8
 8022968:	722b      	strb	r3, [r5, #8]
    *p++ = (unsigned char)( t       );
 802296a:	7268      	strb	r0, [r5, #9]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
 802296c:	9002      	str	r0, [sp, #8]
 802296e:	9103      	str	r1, [sp, #12]
 8022970:	4b48      	ldr	r3, [pc, #288]	; (8022a94 <mbedtls_ssl_handshake_server_step+0xfe0>)
 8022972:	9300      	str	r3, [sp, #0]
 8022974:	f640 139c 	movw	r3, #2460	; 0x99c
 8022978:	4632      	mov	r2, r6
 802297a:	2103      	movs	r1, #3
 802297c:	4620      	mov	r0, r4
 802297e:	f7f2 fec7 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 8022982:	6823      	ldr	r3, [r4, #0]
 8022984:	699e      	ldr	r6, [r3, #24]
 8022986:	221c      	movs	r2, #28
 8022988:	f105 010a 	add.w	r1, r5, #10
 802298c:	69d8      	ldr	r0, [r3, #28]
 802298e:	47b0      	blx	r6
 8022990:	4683      	mov	fp, r0
 8022992:	2800      	cmp	r0, #0
 8022994:	f47f a8c3 	bne.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    memcpy( ssl->handshake->randbytes + 32, buf + 6, 32 );
 8022998:	462b      	mov	r3, r5
 802299a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802299c:	f853 7f06 	ldr.w	r7, [r3, #6]!
 80229a0:	685e      	ldr	r6, [r3, #4]
 80229a2:	6898      	ldr	r0, [r3, #8]
 80229a4:	68d9      	ldr	r1, [r3, #12]
 80229a6:	f8c2 7334 	str.w	r7, [r2, #820]	; 0x334
 80229aa:	f8c2 6338 	str.w	r6, [r2, #824]	; 0x338
 80229ae:	f8c2 033c 	str.w	r0, [r2, #828]	; 0x33c
 80229b2:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
 80229b6:	691f      	ldr	r7, [r3, #16]
 80229b8:	695e      	ldr	r6, [r3, #20]
 80229ba:	6998      	ldr	r0, [r3, #24]
 80229bc:	69d9      	ldr	r1, [r3, #28]
 80229be:	f8c2 7344 	str.w	r7, [r2, #836]	; 0x344
 80229c2:	f8c2 6348 	str.w	r6, [r2, #840]	; 0x348
 80229c6:	f8c2 034c 	str.w	r0, [r2, #844]	; 0x34c
 80229ca:	f8c2 1350 	str.w	r1, [r2, #848]	; 0x350
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, random bytes", buf + 6, 32 );
 80229ce:	2220      	movs	r2, #32
 80229d0:	9202      	str	r2, [sp, #8]
 80229d2:	9301      	str	r3, [sp, #4]
 80229d4:	4b30      	ldr	r3, [pc, #192]	; (8022a98 <mbedtls_ssl_handshake_server_step+0xfe4>)
 80229d6:	9300      	str	r3, [sp, #0]
 80229d8:	f640 13ab 	movw	r3, #2475	; 0x9ab
 80229dc:	4a27      	ldr	r2, [pc, #156]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 80229de:	2103      	movs	r1, #3
 80229e0:	4620      	mov	r0, r4
 80229e2:	f7f2 fefb 	bl	80157dc <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 &&
 80229e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80229e8:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d15f      	bne.n	8022ab0 <mbedtls_ssl_handshake_server_step+0xffc>
        ssl->session_negotiate->id_len != 0 &&
 80229f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if( ssl->handshake->resume == 0 &&
 80229f2:	690b      	ldr	r3, [r1, #16]
 80229f4:	b153      	cbz	r3, 8022a0c <mbedtls_ssl_handshake_server_step+0xf58>
        ssl->conf->f_get_cache != NULL &&
 80229f6:	6822      	ldr	r2, [r4, #0]
 80229f8:	6a13      	ldr	r3, [r2, #32]
        ssl->session_negotiate->id_len != 0 &&
 80229fa:	b13b      	cbz	r3, 8022a0c <mbedtls_ssl_handshake_server_step+0xf58>
        ssl->conf->f_get_cache( ssl->conf->p_cache, ssl->session_negotiate ) == 0 )
 80229fc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80229fe:	4798      	blx	r3
        ssl->conf->f_get_cache != NULL &&
 8022a00:	b350      	cbz	r0, 8022a58 <mbedtls_ssl_handshake_server_step+0xfa4>
    if( ssl->handshake->resume == 0 )
 8022a02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022a04:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	d151      	bne.n	8022ab0 <mbedtls_ssl_handshake_server_step+0xffc>
        ssl->state++;
 8022a0c:	6863      	ldr	r3, [r4, #4]
 8022a0e:	3301      	adds	r3, #1
 8022a10:	6063      	str	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
 8022a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a14:	2000      	movs	r0, #0
 8022a16:	f008 fbb3 	bl	802b180 <time>
 8022a1a:	e9c6 0100 	strd	r0, r1, [r6]
            ssl->session_negotiate->id_len = n = 32;
 8022a1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022a20:	2220      	movs	r2, #32
 8022a22:	611a      	str	r2, [r3, #16]
            if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id,
 8022a24:	6823      	ldr	r3, [r4, #0]
 8022a26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8022a28:	699e      	ldr	r6, [r3, #24]
 8022a2a:	3114      	adds	r1, #20
 8022a2c:	69d8      	ldr	r0, [r3, #28]
 8022a2e:	47b0      	blx	r6
 8022a30:	4683      	mov	fp, r0
 8022a32:	2800      	cmp	r0, #0
 8022a34:	f47f a873 	bne.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ssl->session_negotiate->id_len = n = 32;
 8022a38:	f04f 0820 	mov.w	r8, #32
 8022a3c:	e043      	b.n	8022ac6 <mbedtls_ssl_handshake_server_step+0x1012>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 8022a3e:	4b17      	ldr	r3, [pc, #92]	; (8022a9c <mbedtls_ssl_handshake_server_step+0xfe8>)
 8022a40:	9300      	str	r3, [sp, #0]
 8022a42:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8022a46:	4a0d      	ldr	r2, [pc, #52]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 8022a48:	2101      	movs	r1, #1
 8022a4a:	4620      	mov	r0, r4
 8022a4c:	f7f2 fe60 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_NO_RNG );
 8022a50:	f8df b058 	ldr.w	fp, [pc, #88]	; 8022aac <mbedtls_ssl_handshake_server_step+0xff8>
 8022a54:	f7ff b863 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "session successfully restored from cache" ) );
 8022a58:	4b11      	ldr	r3, [pc, #68]	; (8022aa0 <mbedtls_ssl_handshake_server_step+0xfec>)
 8022a5a:	9300      	str	r3, [sp, #0]
 8022a5c:	f640 13ba 	movw	r3, #2490	; 0x9ba
 8022a60:	4a06      	ldr	r2, [pc, #24]	; (8022a7c <mbedtls_ssl_handshake_server_step+0xfc8>)
 8022a62:	2103      	movs	r1, #3
 8022a64:	4620      	mov	r0, r4
 8022a66:	f7f2 fe53 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->handshake->resume = 1;
 8022a6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022a6c:	2201      	movs	r2, #1
 8022a6e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8022a72:	e7c6      	b.n	8022a02 <mbedtls_ssl_handshake_server_step+0xf4e>
 8022a74:	08034b20 	.word	0x08034b20
 8022a78:	08034b84 	.word	0x08034b84
 8022a7c:	080345cc 	.word	0x080345cc
 8022a80:	08034bb8 	.word	0x08034bb8
 8022a84:	08034bd8 	.word	0x08034bd8
 8022a88:	08034c08 	.word	0x08034c08
 8022a8c:	08034c64 	.word	0x08034c64
 8022a90:	08034c7c 	.word	0x08034c7c
 8022a94:	08033e18 	.word	0x08033e18
 8022a98:	08033e38 	.word	0x08033e38
 8022a9c:	08033a6c 	.word	0x08033a6c
 8022aa0:	08034ca4 	.word	0x08034ca4
 8022aa4:	ffff9680 	.word	0xffff9680
 8022aa8:	ffff8c80 	.word	0xffff8c80
 8022aac:	ffff8c00 	.word	0xffff8c00
        n = ssl->session_negotiate->id_len;
 8022ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022ab2:	f8d3 8010 	ldr.w	r8, [r3, #16]
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 8022ab6:	230c      	movs	r3, #12
 8022ab8:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8022aba:	4620      	mov	r0, r4
 8022abc:	f001 fa44 	bl	8023f48 <mbedtls_ssl_derive_keys>
 8022ac0:	4683      	mov	fp, r0
 8022ac2:	2800      	cmp	r0, #0
 8022ac4:	d17c      	bne.n	8022bc0 <mbedtls_ssl_handshake_server_step+0x110c>
    *p++ = (unsigned char) ssl->session_negotiate->id_len;
 8022ac6:	f105 0727 	add.w	r7, r5, #39	; 0x27
 8022aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022acc:	691b      	ldr	r3, [r3, #16]
 8022ace:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
    memcpy( p, ssl->session_negotiate->id, ssl->session_negotiate->id_len );
 8022ad2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8022ad4:	690a      	ldr	r2, [r1, #16]
 8022ad6:	3114      	adds	r1, #20
 8022ad8:	4638      	mov	r0, r7
 8022ada:	f007 fd2e 	bl	802a53a <memcpy>
    p += ssl->session_negotiate->id_len;
 8022ade:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022ae0:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8022ae4:	eb07 0609 	add.w	r6, r7, r9
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 8022ae8:	f8df a244 	ldr.w	sl, [pc, #580]	; 8022d30 <mbedtls_ssl_handshake_server_step+0x127c>
 8022aec:	f8cd 8004 	str.w	r8, [sp, #4]
 8022af0:	4b87      	ldr	r3, [pc, #540]	; (8022d10 <mbedtls_ssl_handshake_server_step+0x125c>)
 8022af2:	9300      	str	r3, [sp, #0]
 8022af4:	f640 13f4 	movw	r3, #2548	; 0x9f4
 8022af8:	4652      	mov	r2, sl
 8022afa:	2103      	movs	r1, #3
 8022afc:	4620      	mov	r0, r4
 8022afe:	f7f2 fe07 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 39, n );
 8022b02:	f8cd 8008 	str.w	r8, [sp, #8]
 8022b06:	9701      	str	r7, [sp, #4]
 8022b08:	4b82      	ldr	r3, [pc, #520]	; (8022d14 <mbedtls_ssl_handshake_server_step+0x1260>)
 8022b0a:	9300      	str	r3, [sp, #0]
 8022b0c:	f640 13f5 	movw	r3, #2549	; 0x9f5
 8022b10:	4652      	mov	r2, sl
 8022b12:	2103      	movs	r1, #3
 8022b14:	4620      	mov	r0, r4
 8022b16:	f7f2 fe61 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 8022b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022b1c:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8022b20:	4b7d      	ldr	r3, [pc, #500]	; (8022d18 <mbedtls_ssl_handshake_server_step+0x1264>)
 8022b22:	4a7e      	ldr	r2, [pc, #504]	; (8022d1c <mbedtls_ssl_handshake_server_step+0x1268>)
 8022b24:	2900      	cmp	r1, #0
 8022b26:	bf08      	it	eq
 8022b28:	4613      	moveq	r3, r2
 8022b2a:	9301      	str	r3, [sp, #4]
 8022b2c:	4b7c      	ldr	r3, [pc, #496]	; (8022d20 <mbedtls_ssl_handshake_server_step+0x126c>)
 8022b2e:	9300      	str	r3, [sp, #0]
 8022b30:	f640 13f6 	movw	r3, #2550	; 0x9f6
 8022b34:	4652      	mov	r2, sl
 8022b36:	2103      	movs	r1, #3
 8022b38:	4620      	mov	r0, r4
 8022b3a:	f7f2 fde9 	bl	8015710 <mbedtls_debug_print_msg>
    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite >> 8 );
 8022b3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b40:	689b      	ldr	r3, [r3, #8]
 8022b42:	121b      	asrs	r3, r3, #8
 8022b44:	f807 3009 	strb.w	r3, [r7, r9]
    *p++ = (unsigned char)( ssl->session_negotiate->ciphersuite      );
 8022b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b4a:	689b      	ldr	r3, [r3, #8]
 8022b4c:	7073      	strb	r3, [r6, #1]
    *p++ = (unsigned char)( ssl->session_negotiate->compression      );
 8022b4e:	f106 0903 	add.w	r9, r6, #3
 8022b52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b54:	68db      	ldr	r3, [r3, #12]
 8022b56:	70b3      	strb	r3, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s",
 8022b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b5a:	6898      	ldr	r0, [r3, #8]
 8022b5c:	f7fd f9e8 	bl	801ff30 <mbedtls_ssl_get_ciphersuite_name>
 8022b60:	9001      	str	r0, [sp, #4]
 8022b62:	4b70      	ldr	r3, [pc, #448]	; (8022d24 <mbedtls_ssl_handshake_server_step+0x1270>)
 8022b64:	9300      	str	r3, [sp, #0]
 8022b66:	f640 13fd 	movw	r3, #2557	; 0x9fd
 8022b6a:	4652      	mov	r2, sl
 8022b6c:	2103      	movs	r1, #3
 8022b6e:	4620      	mov	r0, r4
 8022b70:	f7f2 fdce 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: 0x%02X",
 8022b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b76:	68db      	ldr	r3, [r3, #12]
 8022b78:	9301      	str	r3, [sp, #4]
 8022b7a:	4b6b      	ldr	r3, [pc, #428]	; (8022d28 <mbedtls_ssl_handshake_server_step+0x1274>)
 8022b7c:	9300      	str	r3, [sp, #0]
 8022b7e:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8022b82:	4652      	mov	r2, sl
 8022b84:	2103      	movs	r1, #3
 8022b86:	4620      	mov	r0, r4
 8022b88:	f7f2 fdc2 	bl	8015710 <mbedtls_debug_print_msg>
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 8022b8c:	f106 0805 	add.w	r8, r6, #5
    if( ssl->secure_renegotiation != MBEDTLS_SSL_SECURE_RENEGOTIATION )
 8022b90:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8022b94:	2b01      	cmp	r3, #1
 8022b96:	d01f      	beq.n	8022bd8 <mbedtls_ssl_handshake_server_step+0x1124>
    if ( mbedtls_ssl_ciphersuite_uses_ec(
 8022b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022b9a:	6898      	ldr	r0, [r3, #8]
 8022b9c:	f7fd f98e 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
 8022ba0:	f7fd f9ec 	bl	801ff7c <mbedtls_ssl_ciphersuite_uses_ec>
 8022ba4:	2800      	cmp	r0, #0
 8022ba6:	d134      	bne.n	8022c12 <mbedtls_ssl_handshake_server_step+0x115e>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, total extension length: %d", ext_len ) );
 8022ba8:	2300      	movs	r3, #0
 8022baa:	9301      	str	r3, [sp, #4]
 8022bac:	4b5f      	ldr	r3, [pc, #380]	; (8022d2c <mbedtls_ssl_handshake_server_step+0x1278>)
 8022bae:	9300      	str	r3, [sp, #0]
 8022bb0:	f640 233b 	movw	r3, #2619	; 0xa3b
 8022bb4:	4a5e      	ldr	r2, [pc, #376]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022bb6:	2103      	movs	r1, #3
 8022bb8:	4620      	mov	r0, r4
 8022bba:	f7f2 fda9 	bl	8015710 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 8022bbe:	e041      	b.n	8022c44 <mbedtls_ssl_handshake_server_step+0x1190>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 8022bc0:	9001      	str	r0, [sp, #4]
 8022bc2:	4b5c      	ldr	r3, [pc, #368]	; (8022d34 <mbedtls_ssl_handshake_server_step+0x1280>)
 8022bc4:	9300      	str	r3, [sp, #0]
 8022bc6:	f640 13e3 	movw	r3, #2531	; 0x9e3
 8022bca:	4a59      	ldr	r2, [pc, #356]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022bcc:	2101      	movs	r1, #1
 8022bce:	4620      	mov	r0, r4
 8022bd0:	f7f2 fdd0 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8022bd4:	f7fe bfa3 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, secure renegotiation extension" ) );
 8022bd8:	4b57      	ldr	r3, [pc, #348]	; (8022d38 <mbedtls_ssl_handshake_server_step+0x1284>)
 8022bda:	9300      	str	r3, [sp, #0]
 8022bdc:	f640 037a 	movw	r3, #2170	; 0x87a
 8022be0:	4652      	mov	r2, sl
 8022be2:	2103      	movs	r1, #3
 8022be4:	4620      	mov	r0, r4
 8022be6:	f7f2 fd93 	bl	8015710 <mbedtls_debug_print_msg>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
 8022bea:	23ff      	movs	r3, #255	; 0xff
 8022bec:	7173      	strb	r3, [r6, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
 8022bee:	2201      	movs	r2, #1
 8022bf0:	71b2      	strb	r2, [r6, #6]
        *p++ = 0x00;
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	71f3      	strb	r3, [r6, #7]
        *p++ = 0x01;
 8022bf6:	7232      	strb	r2, [r6, #8]
        *p++ = 0x00;
 8022bf8:	7273      	strb	r3, [r6, #9]
 8022bfa:	f106 070a 	add.w	r7, r6, #10
    *olen = p - buf;
 8022bfe:	eba7 0708 	sub.w	r7, r7, r8
    if ( mbedtls_ssl_ciphersuite_uses_ec(
 8022c02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8022c04:	6898      	ldr	r0, [r3, #8]
 8022c06:	f7fd f959 	bl	801febc <mbedtls_ssl_ciphersuite_from_id>
 8022c0a:	f7fd f9b7 	bl	801ff7c <mbedtls_ssl_ciphersuite_uses_ec>
 8022c0e:	b148      	cbz	r0, 8022c24 <mbedtls_ssl_handshake_server_step+0x1170>
 8022c10:	e000      	b.n	8022c14 <mbedtls_ssl_handshake_server_step+0x1160>
        *olen = 0;
 8022c12:	2700      	movs	r7, #0
    if( ( ssl->handshake->cli_exts &
 8022c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022c16:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8022c1a:	f013 0f01 	tst.w	r3, #1
 8022c1e:	d12b      	bne.n	8022c78 <mbedtls_ssl_handshake_server_step+0x11c4>
        *olen = 0;
 8022c20:	2300      	movs	r3, #0
        ext_len += olen;
 8022c22:	441f      	add	r7, r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, total extension length: %d", ext_len ) );
 8022c24:	9701      	str	r7, [sp, #4]
 8022c26:	4b41      	ldr	r3, [pc, #260]	; (8022d2c <mbedtls_ssl_handshake_server_step+0x1278>)
 8022c28:	9300      	str	r3, [sp, #0]
 8022c2a:	f640 233b 	movw	r3, #2619	; 0xa3b
 8022c2e:	4a40      	ldr	r2, [pc, #256]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022c30:	2103      	movs	r1, #3
 8022c32:	4620      	mov	r0, r4
 8022c34:	f7f2 fd6c 	bl	8015710 <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 8022c38:	b127      	cbz	r7, 8022c44 <mbedtls_ssl_handshake_server_step+0x1190>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 8022c3a:	0a3b      	lsrs	r3, r7, #8
 8022c3c:	70f3      	strb	r3, [r6, #3]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8022c3e:	7137      	strb	r7, [r6, #4]
        p += ext_len;
 8022c40:	eb08 0907 	add.w	r9, r8, r7
    ssl->out_msglen  = p - buf;
 8022c44:	eba9 0505 	sub.w	r5, r9, r5
 8022c48:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8022c4c:	2316      	movs	r3, #22
 8022c4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO;
 8022c52:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8022c56:	2502      	movs	r5, #2
 8022c58:	701d      	strb	r5, [r3, #0]
    ret = mbedtls_ssl_write_handshake_msg( ssl );
 8022c5a:	4620      	mov	r0, r4
 8022c5c:	f001 ff96 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 8022c60:	4683      	mov	fp, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server hello" ) );
 8022c62:	4b36      	ldr	r3, [pc, #216]	; (8022d3c <mbedtls_ssl_handshake_server_step+0x1288>)
 8022c64:	9300      	str	r3, [sp, #0]
 8022c66:	f640 234e 	movw	r3, #2638	; 0xa4e
 8022c6a:	4a31      	ldr	r2, [pc, #196]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022c6c:	4629      	mov	r1, r5
 8022c6e:	4620      	mov	r0, r4
 8022c70:	f7f2 fd4e 	bl	8015710 <mbedtls_debug_print_msg>
    return( ret );
 8022c74:	f7fe bf53 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 8022c78:	f107 0b02 	add.w	fp, r7, #2
 8022c7c:	eb09 0a0b 	add.w	sl, r9, fp
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, supported_point_formats extension" ) );
 8022c80:	4b2f      	ldr	r3, [pc, #188]	; (8022d40 <mbedtls_ssl_handshake_server_step+0x128c>)
 8022c82:	9300      	str	r3, [sp, #0]
 8022c84:	f640 03c1 	movw	r3, #2241	; 0x8c1
 8022c88:	4a29      	ldr	r2, [pc, #164]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022c8a:	2103      	movs	r1, #3
 8022c8c:	4620      	mov	r0, r4
 8022c8e:	f7f2 fd3f 	bl	8015710 <mbedtls_debug_print_msg>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 8022c92:	2300      	movs	r3, #0
 8022c94:	f809 300b 	strb.w	r3, [r9, fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 8022c98:	220b      	movs	r2, #11
 8022c9a:	f88a 2001 	strb.w	r2, [sl, #1]
    *p++ = 0x00;
 8022c9e:	f88a 3002 	strb.w	r3, [sl, #2]
    *p++ = 2;
 8022ca2:	2202      	movs	r2, #2
 8022ca4:	f88a 2003 	strb.w	r2, [sl, #3]
    *p++ = 1;
 8022ca8:	2201      	movs	r2, #1
 8022caa:	f88a 2004 	strb.w	r2, [sl, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 8022cae:	f88a 3005 	strb.w	r3, [sl, #5]
    *olen = 6;
 8022cb2:	2306      	movs	r3, #6
 8022cb4:	e7b5      	b.n	8022c22 <mbedtls_ssl_handshake_server_step+0x116e>
            ret = mbedtls_ssl_write_certificate( ssl );
 8022cb6:	4620      	mov	r0, r4
 8022cb8:	f002 fc92 	bl	80255e0 <mbedtls_ssl_write_certificate>
 8022cbc:	4683      	mov	fp, r0
            break;
 8022cbe:	f7fe bf2e 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    size_t signature_len = 0;
 8022cc2:	2300      	movs	r3, #0
 8022cc4:	930f      	str	r3, [sp, #60]	; 0x3c
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8022cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022cc8:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server key exchange" ) );
 8022cca:	4b1e      	ldr	r3, [pc, #120]	; (8022d44 <mbedtls_ssl_handshake_server_step+0x1290>)
 8022ccc:	9300      	str	r3, [sp, #0]
 8022cce:	f640 43c7 	movw	r3, #3271	; 0xcc7
 8022cd2:	4a17      	ldr	r2, [pc, #92]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022cd4:	2102      	movs	r1, #2
 8022cd6:	4620      	mov	r0, r4
 8022cd8:	f7f2 fd1a 	bl	8015710 <mbedtls_debug_print_msg>
    switch( info->key_exchange )
 8022cdc:	7aab      	ldrb	r3, [r5, #10]
 8022cde:	3b01      	subs	r3, #1
 8022ce0:	2b09      	cmp	r3, #9
 8022ce2:	d833      	bhi.n	8022d4c <mbedtls_ssl_handshake_server_step+0x1298>
 8022ce4:	e8df f003 	tbb	[pc, r3]
 8022ce8:	32323205 	.word	0x32323205
 8022cec:	32053205 	.word	0x32053205
 8022cf0:	0505      	.short	0x0505
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write server key exchange" ) );
 8022cf2:	4b15      	ldr	r3, [pc, #84]	; (8022d48 <mbedtls_ssl_handshake_server_step+0x1294>)
 8022cf4:	9300      	str	r3, [sp, #0]
 8022cf6:	f640 43d9 	movw	r3, #3289	; 0xcd9
 8022cfa:	4a0d      	ldr	r2, [pc, #52]	; (8022d30 <mbedtls_ssl_handshake_server_step+0x127c>)
 8022cfc:	2102      	movs	r1, #2
 8022cfe:	4620      	mov	r0, r4
 8022d00:	f7f2 fd06 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 8022d04:	6863      	ldr	r3, [r4, #4]
 8022d06:	3301      	adds	r3, #1
 8022d08:	6063      	str	r3, [r4, #4]
        return( 0 );
 8022d0a:	f7fe bf08 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 8022d0e:	bf00      	nop
 8022d10:	08033e9c 	.word	0x08033e9c
 8022d14:	08033ec0 	.word	0x08033ec0
 8022d18:	08035e00 	.word	0x08035e00
 8022d1c:	08033a04 	.word	0x08033a04
 8022d20:	08033ef4 	.word	0x08033ef4
 8022d24:	08034548 	.word	0x08034548
 8022d28:	08034cd0 	.word	0x08034cd0
 8022d2c:	08034570 	.word	0x08034570
 8022d30:	080345cc 	.word	0x080345cc
 8022d34:	08033edc 	.word	0x08033edc
 8022d38:	08034cf4 	.word	0x08034cf4
 8022d3c:	08034d54 	.word	0x08034d54
 8022d40:	08034d24 	.word	0x08034d24
 8022d44:	08034d6c 	.word	0x08034d6c
 8022d48:	08034d8c 	.word	0x08034d8c
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 8022d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022d4e:	681e      	ldr	r6, [r3, #0]
    ssl->out_msglen = 4; /* header (type:1, length:3) to be written later */
 8022d50:	2304      	movs	r3, #4
 8022d52:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    switch( info->key_exchange )
 8022d56:	7ab3      	ldrb	r3, [r6, #10]
 8022d58:	2b04      	cmp	r3, #4
 8022d5a:	f200 8096 	bhi.w	8022e8a <mbedtls_ssl_handshake_server_step+0x13d6>
 8022d5e:	2b02      	cmp	r3, #2
 8022d60:	f200 8096 	bhi.w	8022e90 <mbedtls_ssl_handshake_server_step+0x13dc>
 8022d64:	2500      	movs	r5, #0
    switch( info->key_exchange )
 8022d66:	7ab3      	ldrb	r3, [r6, #10]
 8022d68:	3b02      	subs	r3, #2
 8022d6a:	2b02      	cmp	r3, #2
 8022d6c:	d86d      	bhi.n	8022e4a <mbedtls_ssl_handshake_server_step+0x1396>
        size_t dig_signed_len = ssl->out_msg + ssl->out_msglen - dig_signed;
 8022d6e:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8022d72:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
        size_t hashlen = 0;
 8022d76:	2300      	movs	r3, #0
 8022d78:	9310      	str	r3, [sp, #64]	; 0x40
            mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info );
 8022d7a:	4630      	mov	r0, r6
 8022d7c:	f7fd f8e2 	bl	801ff44 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 8022d80:	4606      	mov	r6, r0
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8022d82:	68e3      	ldr	r3, [r4, #12]
 8022d84:	2b03      	cmp	r3, #3
 8022d86:	f040 8628 	bne.w	80239da <mbedtls_ssl_handshake_server_step+0x1f26>
            if( sig_alg == MBEDTLS_PK_NONE ||
 8022d8a:	2800      	cmp	r0, #0
 8022d8c:	f000 810f 	beq.w	8022fae <mbedtls_ssl_handshake_server_step+0x14fa>
                ( md_alg = mbedtls_ssl_sig_hash_set_find( &ssl->handshake->hash_algs,
 8022d90:	4601      	mov	r1, r0
 8022d92:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8022d94:	f003 fd19 	bl	80267ca <mbedtls_ssl_sig_hash_set_find>
            if( sig_alg == MBEDTLS_PK_NONE ||
 8022d98:	4680      	mov	r8, r0
 8022d9a:	2800      	cmp	r0, #0
 8022d9c:	f000 8107 	beq.w	8022fae <mbedtls_ssl_handshake_server_step+0x14fa>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "pick hash algorithm %d for signing", md_alg ) );
 8022da0:	9001      	str	r0, [sp, #4]
 8022da2:	4bac      	ldr	r3, [pc, #688]	; (8023054 <mbedtls_ssl_handshake_server_step+0x15a0>)
 8022da4:	9300      	str	r3, [sp, #0]
 8022da6:	f640 4342 	movw	r3, #3138	; 0xc42
 8022daa:	4aab      	ldr	r2, [pc, #684]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022dac:	2103      	movs	r1, #3
 8022dae:	4620      	mov	r0, r4
 8022db0:	f7f2 fcae 	bl	8015710 <mbedtls_debug_print_msg>
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
 8022db4:	f8cd 8004 	str.w	r8, [sp, #4]
        size_t dig_signed_len = ssl->out_msg + ssl->out_msglen - dig_signed;
 8022db8:	eb07 0309 	add.w	r3, r7, r9
 8022dbc:	1b5b      	subs	r3, r3, r5
            ret = mbedtls_ssl_get_key_exchange_md_tls1_2( ssl, hash, &hashlen,
 8022dbe:	9300      	str	r3, [sp, #0]
 8022dc0:	462b      	mov	r3, r5
 8022dc2:	aa10      	add	r2, sp, #64	; 0x40
 8022dc4:	a91c      	add	r1, sp, #112	; 0x70
 8022dc6:	4620      	mov	r0, r4
 8022dc8:	f004 f826 	bl	8026e18 <mbedtls_ssl_get_key_exchange_md_tls1_2>
            if( ret != 0 )
 8022dcc:	4683      	mov	fp, r0
 8022dce:	2800      	cmp	r0, #0
 8022dd0:	f040 80c9 	bne.w	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen );
 8022dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022dd6:	9302      	str	r3, [sp, #8]
 8022dd8:	ab1c      	add	r3, sp, #112	; 0x70
 8022dda:	9301      	str	r3, [sp, #4]
 8022ddc:	4b9f      	ldr	r3, [pc, #636]	; (802305c <mbedtls_ssl_handshake_server_step+0x15a8>)
 8022dde:	9300      	str	r3, [sp, #0]
 8022de0:	f640 4368 	movw	r3, #3176	; 0xc68
 8022de4:	4a9c      	ldr	r2, [pc, #624]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022de6:	2103      	movs	r1, #3
 8022de8:	4620      	mov	r0, r4
 8022dea:	f7f2 fcf7 	bl	80157dc <mbedtls_debug_print_buf>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8022dee:	68e3      	ldr	r3, [r4, #12]
 8022df0:	2b03      	cmp	r3, #3
 8022df2:	f000 80e8 	beq.w	8022fc6 <mbedtls_ssl_handshake_server_step+0x1512>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8022df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	f000 80fb 	beq.w	8022ff4 <mbedtls_ssl_handshake_server_step+0x1540>
 8022dfe:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8022e02:	2a00      	cmp	r2, #0
 8022e04:	f000 80f6 	beq.w	8022ff4 <mbedtls_ssl_handshake_server_step+0x1540>
        if( mbedtls_ssl_own_key( ssl ) == NULL )
 8022e08:	6852      	ldr	r2, [r2, #4]
 8022e0a:	2a00      	cmp	r2, #0
 8022e0c:	f000 8100 	beq.w	8023010 <mbedtls_ssl_handshake_server_step+0x155c>
 8022e10:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 8022e14:	2800      	cmp	r0, #0
 8022e16:	f000 80f5 	beq.w	8023004 <mbedtls_ssl_handshake_server_step+0x1550>
    return( key_cert == NULL ? NULL : key_cert->key );
 8022e1a:	6840      	ldr	r0, [r0, #4]
                                     ssl->conf->f_rng,
 8022e1c:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ),
 8022e1e:	69da      	ldr	r2, [r3, #28]
 8022e20:	9203      	str	r2, [sp, #12]
 8022e22:	699b      	ldr	r3, [r3, #24]
 8022e24:	9302      	str	r3, [sp, #8]
 8022e26:	ab0f      	add	r3, sp, #60	; 0x3c
 8022e28:	9301      	str	r3, [sp, #4]
                                     ssl->out_msg + ssl->out_msglen + 2,
 8022e2a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8022e2e:	1c9a      	adds	r2, r3, #2
        if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ),
 8022e30:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8022e34:	4413      	add	r3, r2
 8022e36:	9300      	str	r3, [sp, #0]
 8022e38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022e3a:	aa1c      	add	r2, sp, #112	; 0x70
 8022e3c:	4641      	mov	r1, r8
 8022e3e:	f7f7 f9c5 	bl	801a1cc <mbedtls_pk_sign>
 8022e42:	4683      	mov	fp, r0
 8022e44:	2800      	cmp	r0, #0
 8022e46:	f040 80ef 	bne.w	8023028 <mbedtls_ssl_handshake_server_step+0x1574>
    if( signature_len != 0 )
 8022e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022e4c:	2b00      	cmp	r3, #0
 8022e4e:	f040 811f 	bne.w	8023090 <mbedtls_ssl_handshake_server_step+0x15dc>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8022e52:	2316      	movs	r3, #22
 8022e54:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;
 8022e58:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8022e5c:	220c      	movs	r2, #12
 8022e5e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 8022e60:	6863      	ldr	r3, [r4, #4]
 8022e62:	3301      	adds	r3, #1
 8022e64:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 8022e66:	4620      	mov	r0, r4
 8022e68:	f001 fe90 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 8022e6c:	4683      	mov	fp, r0
 8022e6e:	2800      	cmp	r0, #0
 8022e70:	f040 8138 	bne.w	80230e4 <mbedtls_ssl_handshake_server_step+0x1630>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange" ) );
 8022e74:	4b7a      	ldr	r3, [pc, #488]	; (8023060 <mbedtls_ssl_handshake_server_step+0x15ac>)
 8022e76:	9300      	str	r3, [sp, #0]
 8022e78:	f640 531b 	movw	r3, #3355	; 0xd1b
 8022e7c:	4a76      	ldr	r2, [pc, #472]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022e7e:	2102      	movs	r1, #2
 8022e80:	4620      	mov	r0, r4
 8022e82:	f7f2 fc45 	bl	8015710 <mbedtls_debug_print_msg>
            break;
 8022e86:	f7fe be4a 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    switch( info->key_exchange )
 8022e8a:	2b08      	cmp	r3, #8
 8022e8c:	f040 808d 	bne.w	8022faa <mbedtls_ssl_handshake_server_step+0x14f6>
        size_t len = 0;
 8022e90:	2300      	movs	r3, #0
 8022e92:	931c      	str	r3, [sp, #112]	; 0x70
        for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 8022e94:	6823      	ldr	r3, [r4, #0]
 8022e96:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8022e98:	780a      	ldrb	r2, [r1, #0]
 8022e9a:	2a00      	cmp	r2, #0
 8022e9c:	d058      	beq.n	8022f50 <mbedtls_ssl_handshake_server_step+0x149c>
            for( curve = ssl->handshake->curves; *curve != NULL; curve++ )
 8022e9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022ea0:	f8d3 71b4 	ldr.w	r7, [r3, #436]	; 0x1b4
 8022ea4:	6838      	ldr	r0, [r7, #0]
 8022ea6:	4684      	mov	ip, r0
 8022ea8:	b168      	cbz	r0, 8022ec6 <mbedtls_ssl_handshake_server_step+0x1412>
 8022eaa:	463d      	mov	r5, r7
 8022eac:	4663      	mov	r3, ip
                if( (*curve)->grp_id == *gid )
 8022eae:	781b      	ldrb	r3, [r3, #0]
 8022eb0:	4293      	cmp	r3, r2
 8022eb2:	d00a      	beq.n	8022eca <mbedtls_ssl_handshake_server_step+0x1416>
            for( curve = ssl->handshake->curves; *curve != NULL; curve++ )
 8022eb4:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	d1f8      	bne.n	8022eae <mbedtls_ssl_handshake_server_step+0x13fa>
        for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 8022ebc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022ec0:	2a00      	cmp	r2, #0
 8022ec2:	d1f1      	bne.n	8022ea8 <mbedtls_ssl_handshake_server_step+0x13f4>
 8022ec4:	e003      	b.n	8022ece <mbedtls_ssl_handshake_server_step+0x141a>
            for( curve = ssl->handshake->curves; *curve != NULL; curve++ )
 8022ec6:	463d      	mov	r5, r7
 8022ec8:	e7f8      	b.n	8022ebc <mbedtls_ssl_handshake_server_step+0x1408>
        if( curve == NULL || *curve == NULL )
 8022eca:	2d00      	cmp	r5, #0
 8022ecc:	d040      	beq.n	8022f50 <mbedtls_ssl_handshake_server_step+0x149c>
 8022ece:	682b      	ldr	r3, [r5, #0]
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d03d      	beq.n	8022f50 <mbedtls_ssl_handshake_server_step+0x149c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDHE curve: %s", (*curve)->name ) );
 8022ed4:	689b      	ldr	r3, [r3, #8]
 8022ed6:	9301      	str	r3, [sp, #4]
 8022ed8:	4b62      	ldr	r3, [pc, #392]	; (8023064 <mbedtls_ssl_handshake_server_step+0x15b0>)
 8022eda:	9300      	str	r3, [sp, #0]
 8022edc:	f640 33e9 	movw	r3, #3049	; 0xbe9
 8022ee0:	4a5d      	ldr	r2, [pc, #372]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022ee2:	2102      	movs	r1, #2
 8022ee4:	4620      	mov	r0, r4
 8022ee6:	f7f2 fc13 	bl	8015710 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_ecdh_setup( &ssl->handshake->ecdh_ctx,
 8022eea:	682b      	ldr	r3, [r5, #0]
 8022eec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8022eee:	7819      	ldrb	r1, [r3, #0]
 8022ef0:	3080      	adds	r0, #128	; 0x80
 8022ef2:	f7f2 ffc1 	bl	8015e78 <mbedtls_ecdh_setup>
 8022ef6:	4683      	mov	fp, r0
 8022ef8:	2800      	cmp	r0, #0
 8022efa:	d140      	bne.n	8022f7e <mbedtls_ssl_handshake_server_step+0x14ca>
                  ssl->out_msg + ssl->out_msglen,
 8022efc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
                  ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8022f00:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_make_params(
 8022f02:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8022f06:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8022f08:	69dd      	ldr	r5, [r3, #28]
 8022f0a:	9501      	str	r5, [sp, #4]
 8022f0c:	699b      	ldr	r3, [r3, #24]
 8022f0e:	9300      	str	r3, [sp, #0]
 8022f10:	f5c2 5300 	rsb	r3, r2, #8192	; 0x2000
 8022f14:	440a      	add	r2, r1
 8022f16:	a91c      	add	r1, sp, #112	; 0x70
 8022f18:	3080      	adds	r0, #128	; 0x80
 8022f1a:	f7f2 ffdb 	bl	8015ed4 <mbedtls_ecdh_make_params>
 8022f1e:	4683      	mov	fp, r0
 8022f20:	2800      	cmp	r0, #0
 8022f22:	d137      	bne.n	8022f94 <mbedtls_ssl_handshake_server_step+0x14e0>
        dig_signed = ssl->out_msg + ssl->out_msglen;
 8022f24:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8022f28:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8022f2c:	4415      	add	r5, r2
        ssl->out_msglen += len;
 8022f2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022f30:	4413      	add	r3, r2
 8022f32:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 8022f36:	2300      	movs	r3, #0
 8022f38:	9301      	str	r3, [sp, #4]
 8022f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022f3c:	3380      	adds	r3, #128	; 0x80
 8022f3e:	9300      	str	r3, [sp, #0]
 8022f40:	f640 4302 	movw	r3, #3074	; 0xc02
 8022f44:	4a44      	ldr	r2, [pc, #272]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022f46:	2103      	movs	r1, #3
 8022f48:	4620      	mov	r0, r4
 8022f4a:	f7f2 fecb 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
 8022f4e:	e70a      	b.n	8022d66 <mbedtls_ssl_handshake_server_step+0x12b2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "no matching curve for ECDHE" ) );
 8022f50:	4b45      	ldr	r3, [pc, #276]	; (8023068 <mbedtls_ssl_handshake_server_step+0x15b4>)
 8022f52:	9300      	str	r3, [sp, #0]
 8022f54:	f640 33e5 	movw	r3, #3045	; 0xbe5
 8022f58:	4a3f      	ldr	r2, [pc, #252]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022f5a:	2101      	movs	r1, #1
 8022f5c:	4620      	mov	r0, r4
 8022f5e:	f7f2 fbd7 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
 8022f62:	f8df b120 	ldr.w	fp, [pc, #288]	; 8023084 <mbedtls_ssl_handshake_server_step+0x15d0>
    if( ret != 0 )
 8022f66:	f1bb 0f00 	cmp.w	fp, #0
 8022f6a:	f43f af6e 	beq.w	8022e4a <mbedtls_ssl_handshake_server_step+0x1396>
        if( ret == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
 8022f6e:	f51b 4fca 	cmn.w	fp, #25856	; 0x6500
 8022f72:	d064      	beq.n	802303e <mbedtls_ssl_handshake_server_step+0x158a>
            ssl->out_msglen = 0;
 8022f74:	2300      	movs	r3, #0
 8022f76:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8022f7a:	f7fe bdd0 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecp_group_load", ret );
 8022f7e:	9001      	str	r0, [sp, #4]
 8022f80:	4b3a      	ldr	r3, [pc, #232]	; (802306c <mbedtls_ssl_handshake_server_step+0x15b8>)
 8022f82:	9300      	str	r3, [sp, #0]
 8022f84:	f640 33ee 	movw	r3, #3054	; 0xbee
 8022f88:	4a33      	ldr	r2, [pc, #204]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022f8a:	2101      	movs	r1, #1
 8022f8c:	4620      	mov	r0, r4
 8022f8e:	f7f2 fbf1 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8022f92:	e7e8      	b.n	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_params", ret );
 8022f94:	9001      	str	r0, [sp, #4]
 8022f96:	4b36      	ldr	r3, [pc, #216]	; (8023070 <mbedtls_ssl_handshake_server_step+0x15bc>)
 8022f98:	9300      	str	r3, [sp, #0]
 8022f9a:	f640 33f8 	movw	r3, #3064	; 0xbf8
 8022f9e:	4a2e      	ldr	r2, [pc, #184]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022fa0:	2101      	movs	r1, #1
 8022fa2:	4620      	mov	r0, r4
 8022fa4:	f7f2 fbe6 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8022fa8:	e7dd      	b.n	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
 8022faa:	2500      	movs	r5, #0
 8022fac:	e6db      	b.n	8022d66 <mbedtls_ssl_handshake_server_step+0x12b2>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8022fae:	4b31      	ldr	r3, [pc, #196]	; (8023074 <mbedtls_ssl_handshake_server_step+0x15c0>)
 8022fb0:	9300      	str	r3, [sp, #0]
 8022fb2:	f640 432b 	movw	r3, #3115	; 0xc2b
 8022fb6:	4a28      	ldr	r2, [pc, #160]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8022fb8:	2101      	movs	r1, #1
 8022fba:	4620      	mov	r0, r4
 8022fbc:	f7f2 fba8 	bl	8015710 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8022fc0:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8023088 <mbedtls_ssl_handshake_server_step+0x15d4>
 8022fc4:	e7cf      	b.n	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
            ssl->out_msg[ssl->out_msglen++] =
 8022fc6:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8022fca:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8022fce:	1c6b      	adds	r3, r5, #1
 8022fd0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                mbedtls_ssl_hash_from_md_alg( md_alg );
 8022fd4:	4640      	mov	r0, r8
 8022fd6:	f003 fc28 	bl	802682a <mbedtls_ssl_hash_from_md_alg>
            ssl->out_msg[ssl->out_msglen++] =
 8022fda:	5578      	strb	r0, [r7, r5]
            ssl->out_msg[ssl->out_msglen++] =
 8022fdc:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 8022fe0:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8022fe4:	1c6b      	adds	r3, r5, #1
 8022fe6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                mbedtls_ssl_sig_from_pk_alg( sig_alg );
 8022fea:	4630      	mov	r0, r6
 8022fec:	f003 fbd9 	bl	80267a2 <mbedtls_ssl_sig_from_pk_alg>
            ssl->out_msg[ssl->out_msglen++] =
 8022ff0:	5578      	strb	r0, [r7, r5]
 8022ff2:	e700      	b.n	8022df6 <mbedtls_ssl_handshake_server_step+0x1342>
        key_cert = ssl->conf->key_cert;
 8022ff4:	6822      	ldr	r2, [r4, #0]
 8022ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 8022ff8:	b152      	cbz	r2, 8023010 <mbedtls_ssl_handshake_server_step+0x155c>
        if( mbedtls_ssl_own_key( ssl ) == NULL )
 8022ffa:	6852      	ldr	r2, [r2, #4]
 8022ffc:	b142      	cbz	r2, 8023010 <mbedtls_ssl_handshake_server_step+0x155c>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	f47f af06 	bne.w	8022e10 <mbedtls_ssl_handshake_server_step+0x135c>
        key_cert = ssl->conf->key_cert;
 8023004:	6823      	ldr	r3, [r4, #0]
 8023006:	6b98      	ldr	r0, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 8023008:	2800      	cmp	r0, #0
 802300a:	f47f af06 	bne.w	8022e1a <mbedtls_ssl_handshake_server_step+0x1366>
 802300e:	e705      	b.n	8022e1c <mbedtls_ssl_handshake_server_step+0x1368>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key" ) );
 8023010:	4b19      	ldr	r3, [pc, #100]	; (8023078 <mbedtls_ssl_handshake_server_step+0x15c4>)
 8023012:	9300      	str	r3, [sp, #0]
 8023014:	f640 43a1 	movw	r3, #3233	; 0xca1
 8023018:	4a0f      	ldr	r2, [pc, #60]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 802301a:	2101      	movs	r1, #1
 802301c:	4620      	mov	r0, r4
 802301e:	f7f2 fb77 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 8023022:	f8df b068 	ldr.w	fp, [pc, #104]	; 802308c <mbedtls_ssl_handshake_server_step+0x15d8>
 8023026:	e79e      	b.n	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 8023028:	9001      	str	r0, [sp, #4]
 802302a:	4b14      	ldr	r3, [pc, #80]	; (802307c <mbedtls_ssl_handshake_server_step+0x15c8>)
 802302c:	9300      	str	r3, [sp, #0]
 802302e:	f640 43b1 	movw	r3, #3249	; 0xcb1
 8023032:	4a09      	ldr	r2, [pc, #36]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8023034:	2101      	movs	r1, #1
 8023036:	4620      	mov	r0, r4
 8023038:	f7f2 fb9c 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 802303c:	e793      	b.n	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange (pending)" ) );
 802303e:	4b10      	ldr	r3, [pc, #64]	; (8023080 <mbedtls_ssl_handshake_server_step+0x15cc>)
 8023040:	9300      	str	r3, [sp, #0]
 8023042:	f640 43f7 	movw	r3, #3319	; 0xcf7
 8023046:	4a04      	ldr	r2, [pc, #16]	; (8023058 <mbedtls_ssl_handshake_server_step+0x15a4>)
 8023048:	2102      	movs	r1, #2
 802304a:	4620      	mov	r0, r4
 802304c:	f7f2 fb60 	bl	8015710 <mbedtls_debug_print_msg>
 8023050:	f7fe bd65 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 8023054:	08035128 	.word	0x08035128
 8023058:	080345cc 	.word	0x080345cc
 802305c:	08034234 	.word	0x08034234
 8023060:	08034e5c 	.word	0x08034e5c
 8023064:	08034dcc 	.word	0x08034dcc
 8023068:	08034db0 	.word	0x08034db0
 802306c:	08034ddc 	.word	0x08034ddc
 8023070:	08034df4 	.word	0x08034df4
 8023074:	08034130 	.word	0x08034130
 8023078:	08034e10 	.word	0x08034e10
 802307c:	080344d4 	.word	0x080344d4
 8023080:	08034e24 	.word	0x08034e24
 8023084:	ffff8c80 	.word	0xffff8c80
 8023088:	ffff9400 	.word	0xffff9400
 802308c:	ffff8a00 	.word	0xffff8a00
        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len >> 8 );
 8023090:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8023094:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8023098:	1c50      	adds	r0, r2, #1
 802309a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 802309e:	0a1b      	lsrs	r3, r3, #8
 80230a0:	548b      	strb	r3, [r1, r2]
        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len      );
 80230a2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80230a6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80230aa:	1c59      	adds	r1, r3, #1
 80230ac:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 80230b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80230b2:	54d1      	strb	r1, [r2, r3]
        MBEDTLS_SSL_DEBUG_BUF( 3, "my signature",
 80230b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80230b6:	9302      	str	r3, [sp, #8]
 80230b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80230bc:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80230c0:	4413      	add	r3, r2
 80230c2:	9301      	str	r3, [sp, #4]
 80230c4:	4b94      	ldr	r3, [pc, #592]	; (8023318 <mbedtls_ssl_handshake_server_step+0x1864>)
 80230c6:	9300      	str	r3, [sp, #0]
 80230c8:	f640 5306 	movw	r3, #3334	; 0xd06
 80230cc:	4a93      	ldr	r2, [pc, #588]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80230ce:	2103      	movs	r1, #3
 80230d0:	4620      	mov	r0, r4
 80230d2:	f7f2 fb83 	bl	80157dc <mbedtls_debug_print_buf>
        ssl->out_msglen += signature_len;
 80230d6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80230da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80230dc:	4413      	add	r3, r2
 80230de:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80230e2:	e6b6      	b.n	8022e52 <mbedtls_ssl_handshake_server_step+0x139e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 80230e4:	9001      	str	r0, [sp, #4]
 80230e6:	4b8e      	ldr	r3, [pc, #568]	; (8023320 <mbedtls_ssl_handshake_server_step+0x186c>)
 80230e8:	9300      	str	r3, [sp, #0]
 80230ea:	f640 5317 	movw	r3, #3351	; 0xd17
 80230ee:	4a8b      	ldr	r2, [pc, #556]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80230f0:	2101      	movs	r1, #1
 80230f2:	4620      	mov	r0, r4
 80230f4:	f7f2 fb3e 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80230f8:	f7fe bd11 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80230fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80230fe:	681d      	ldr	r5, [r3, #0]
    const unsigned char * const end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 8023100:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate request" ) );
 8023104:	4b87      	ldr	r3, [pc, #540]	; (8023324 <mbedtls_ssl_handshake_server_step+0x1870>)
 8023106:	9300      	str	r3, [sp, #0]
 8023108:	f640 237b 	movw	r3, #2683	; 0xa7b
 802310c:	4a83      	ldr	r2, [pc, #524]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 802310e:	2102      	movs	r1, #2
 8023110:	4620      	mov	r0, r4
 8023112:	f7f2 fafd 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->state++;
 8023116:	6863      	ldr	r3, [r4, #4]
 8023118:	3301      	adds	r3, #1
 802311a:	6063      	str	r3, [r4, #4]
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 802311c:	7aaa      	ldrb	r2, [r5, #10]
 802311e:	1f53      	subs	r3, r2, #5
 8023120:	b2db      	uxtb	r3, r3
 8023122:	2b03      	cmp	r3, #3
 8023124:	d951      	bls.n	80231ca <mbedtls_ssl_handshake_server_step+0x1716>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
 8023126:	2a0b      	cmp	r2, #11
 8023128:	d04f      	beq.n	80231ca <mbedtls_ssl_handshake_server_step+0x1716>
        authmode = ssl->conf->authmode;
 802312a:	6823      	ldr	r3, [r4, #0]
 802312c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
 8023130:	f013 0f0c 	tst.w	r3, #12
 8023134:	d049      	beq.n	80231ca <mbedtls_ssl_handshake_server_step+0x1716>
    buf = ssl->out_msg;
 8023136:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 802313a:	9207      	str	r2, [sp, #28]
    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_RSA_SIGN;
 802313c:	2301      	movs	r3, #1
 802313e:	7153      	strb	r3, [r2, #5]
    p[1 + ct_len++] = MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN;
 8023140:	2340      	movs	r3, #64	; 0x40
 8023142:	7193      	strb	r3, [r2, #6]
    p[0] = (unsigned char) ct_len++;
 8023144:	2302      	movs	r3, #2
 8023146:	7113      	strb	r3, [r2, #4]
    p += ct_len;
 8023148:	1dd6      	adds	r6, r2, #7
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 802314a:	68e3      	ldr	r3, [r4, #12]
 802314c:	2b03      	cmp	r3, #3
 802314e:	d047      	beq.n	80231e0 <mbedtls_ssl_handshake_server_step+0x172c>
    sa_len = 0;
 8023150:	2300      	movs	r3, #0
 8023152:	9308      	str	r3, [sp, #32]
    p += 2;
 8023154:	3602      	adds	r6, #2
    if( ssl->conf->cert_req_ca_list ==  MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED )
 8023156:	6823      	ldr	r3, [r4, #0]
 8023158:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 802315c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8023160:	d077      	beq.n	8023252 <mbedtls_ssl_handshake_server_step+0x179e>
            crt = ssl->conf->ca_chain;
 8023162:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
        while( crt != NULL && crt->version != 0 )
 8023164:	2f00      	cmp	r7, #0
 8023166:	f000 809c 	beq.w	80232a2 <mbedtls_ssl_handshake_server_step+0x17ee>
    const unsigned char * const end = ssl->out_msg + MBEDTLS_SSL_OUT_CONTENT_LEN;
 802316a:	f509 5900 	add.w	r9, r9, #8192	; 0x2000
    total_dn_size = 0;
 802316e:	f04f 0b00 	mov.w	fp, #0
 8023172:	46a2      	mov	sl, r4
        while( crt != NULL && crt->version != 0 )
 8023174:	69bb      	ldr	r3, [r7, #24]
 8023176:	2b00      	cmp	r3, #0
 8023178:	d069      	beq.n	802324e <mbedtls_ssl_handshake_server_step+0x179a>
            dn_size = crt->subject_raw.len;
 802317a:	6c7d      	ldr	r5, [r7, #68]	; 0x44
            if( end < p ||
 802317c:	454e      	cmp	r6, r9
 802317e:	d85b      	bhi.n	8023238 <mbedtls_ssl_handshake_server_step+0x1784>
                (size_t)( end - p ) < dn_size ||
 8023180:	eba9 0306 	sub.w	r3, r9, r6
            if( end < p ||
 8023184:	429d      	cmp	r5, r3
 8023186:	d857      	bhi.n	8023238 <mbedtls_ssl_handshake_server_step+0x1784>
                (size_t)( end - p ) < 2 + dn_size )
 8023188:	f105 0802 	add.w	r8, r5, #2
                (size_t)( end - p ) < dn_size ||
 802318c:	4543      	cmp	r3, r8
 802318e:	d353      	bcc.n	8023238 <mbedtls_ssl_handshake_server_step+0x1784>
            *p++ = (unsigned char)( dn_size >> 8 );
 8023190:	0a2b      	lsrs	r3, r5, #8
 8023192:	4634      	mov	r4, r6
 8023194:	f804 3b02 	strb.w	r3, [r4], #2
            *p++ = (unsigned char)( dn_size      );
 8023198:	7075      	strb	r5, [r6, #1]
            memcpy( p, crt->subject_raw.p, dn_size );
 802319a:	462a      	mov	r2, r5
 802319c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 802319e:	4620      	mov	r0, r4
 80231a0:	f007 f9cb 	bl	802a53a <memcpy>
            p += dn_size;
 80231a4:	1966      	adds	r6, r4, r5
            MBEDTLS_SSL_DEBUG_BUF( 3, "requested DN", p - dn_size, dn_size );
 80231a6:	9502      	str	r5, [sp, #8]
 80231a8:	9401      	str	r4, [sp, #4]
 80231aa:	4b5f      	ldr	r3, [pc, #380]	; (8023328 <mbedtls_ssl_handshake_server_step+0x1874>)
 80231ac:	9300      	str	r3, [sp, #0]
 80231ae:	f640 3302 	movw	r3, #2818	; 0xb02
 80231b2:	4a5a      	ldr	r2, [pc, #360]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80231b4:	2103      	movs	r1, #3
 80231b6:	4650      	mov	r0, sl
 80231b8:	f7f2 fb10 	bl	80157dc <mbedtls_debug_print_buf>
            total_dn_size += 2 + dn_size;
 80231bc:	44c3      	add	fp, r8
            crt = crt->next;
 80231be:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
        while( crt != NULL && crt->version != 0 )
 80231c2:	2f00      	cmp	r7, #0
 80231c4:	d1d6      	bne.n	8023174 <mbedtls_ssl_handshake_server_step+0x16c0>
 80231c6:	4654      	mov	r4, sl
 80231c8:	e045      	b.n	8023256 <mbedtls_ssl_handshake_server_step+0x17a2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate request" ) );
 80231ca:	4b58      	ldr	r3, [pc, #352]	; (802332c <mbedtls_ssl_handshake_server_step+0x1878>)
 80231cc:	9300      	str	r3, [sp, #0]
 80231ce:	f640 238d 	movw	r3, #2701	; 0xa8d
 80231d2:	4a52      	ldr	r2, [pc, #328]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80231d4:	2102      	movs	r1, #2
 80231d6:	4620      	mov	r0, r4
 80231d8:	f7f2 fa9a 	bl	8015710 <mbedtls_debug_print_msg>
        return( 0 );
 80231dc:	f7fe bc9f 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 80231e0:	6823      	ldr	r3, [r4, #0]
 80231e2:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80231e4:	6838      	ldr	r0, [r7, #0]
 80231e6:	b1f0      	cbz	r0, 8023226 <mbedtls_ssl_handshake_server_step+0x1772>
    sa_len = 0;
 80231e8:	2500      	movs	r5, #0
            p[2 + sa_len++] = MBEDTLS_SSL_SIG_RSA;
 80231ea:	f04f 0a01 	mov.w	sl, #1
            p[2 + sa_len++] = MBEDTLS_SSL_SIG_ECDSA;
 80231ee:	f04f 0b03 	mov.w	fp, #3
 80231f2:	e002      	b.n	80231fa <mbedtls_ssl_handshake_server_step+0x1746>
        for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 80231f4:	f857 0f04 	ldr.w	r0, [r7, #4]!
 80231f8:	b1b0      	cbz	r0, 8023228 <mbedtls_ssl_handshake_server_step+0x1774>
            unsigned char hash = mbedtls_ssl_hash_from_md_alg( *cur );
 80231fa:	f003 fb16 	bl	802682a <mbedtls_ssl_hash_from_md_alg>
            if( MBEDTLS_SSL_HASH_NONE == hash || mbedtls_ssl_set_calc_verify_md( ssl, hash ) )
 80231fe:	4680      	mov	r8, r0
 8023200:	2800      	cmp	r0, #0
 8023202:	d0f7      	beq.n	80231f4 <mbedtls_ssl_handshake_server_step+0x1740>
 8023204:	4601      	mov	r1, r0
 8023206:	4620      	mov	r0, r4
 8023208:	f003 fde8 	bl	8026ddc <mbedtls_ssl_set_calc_verify_md>
 802320c:	2800      	cmp	r0, #0
 802320e:	d1f1      	bne.n	80231f4 <mbedtls_ssl_handshake_server_step+0x1740>
            p[2 + sa_len++] = hash;
 8023210:	1973      	adds	r3, r6, r5
 8023212:	f883 8002 	strb.w	r8, [r3, #2]
            p[2 + sa_len++] = MBEDTLS_SSL_SIG_RSA;
 8023216:	f883 a003 	strb.w	sl, [r3, #3]
            p[2 + sa_len++] = hash;
 802321a:	3504      	adds	r5, #4
 802321c:	f806 8005 	strb.w	r8, [r6, r5]
            p[2 + sa_len++] = MBEDTLS_SSL_SIG_ECDSA;
 8023220:	f883 b005 	strb.w	fp, [r3, #5]
 8023224:	e7e6      	b.n	80231f4 <mbedtls_ssl_handshake_server_step+0x1740>
    sa_len = 0;
 8023226:	2500      	movs	r5, #0
        p[0] = (unsigned char)( sa_len >> 8 );
 8023228:	0a2b      	lsrs	r3, r5, #8
 802322a:	9a07      	ldr	r2, [sp, #28]
 802322c:	71d3      	strb	r3, [r2, #7]
        p[1] = (unsigned char)( sa_len      );
 802322e:	7215      	strb	r5, [r2, #8]
        sa_len += 2;
 8023230:	1cab      	adds	r3, r5, #2
 8023232:	9308      	str	r3, [sp, #32]
        p += sa_len;
 8023234:	441e      	add	r6, r3
 8023236:	e78d      	b.n	8023154 <mbedtls_ssl_handshake_server_step+0x16a0>
 8023238:	4654      	mov	r4, sl
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "skipping CAs: buffer too short" ) );
 802323a:	4b3d      	ldr	r3, [pc, #244]	; (8023330 <mbedtls_ssl_handshake_server_step+0x187c>)
 802323c:	9300      	str	r3, [sp, #0]
 802323e:	f640 23f9 	movw	r3, #2809	; 0xaf9
 8023242:	4a36      	ldr	r2, [pc, #216]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 8023244:	2101      	movs	r1, #1
 8023246:	4650      	mov	r0, sl
 8023248:	f7f2 fa62 	bl	8015710 <mbedtls_debug_print_msg>
                break;
 802324c:	e003      	b.n	8023256 <mbedtls_ssl_handshake_server_step+0x17a2>
 802324e:	4654      	mov	r4, sl
 8023250:	e001      	b.n	8023256 <mbedtls_ssl_handshake_server_step+0x17a2>
    total_dn_size = 0;
 8023252:	f04f 0b00 	mov.w	fp, #0
    ssl->out_msglen  = p - buf;
 8023256:	9b07      	ldr	r3, [sp, #28]
 8023258:	1af6      	subs	r6, r6, r3
 802325a:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 802325e:	2316      	movs	r3, #22
 8023260:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_REQUEST;
 8023264:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8023268:	220d      	movs	r2, #13
 802326a:	701a      	strb	r2, [r3, #0]
    ssl->out_msg[4 + ct_len + sa_len] = (unsigned char)( total_dn_size  >> 8 );
 802326c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8023270:	9908      	ldr	r1, [sp, #32]
 8023272:	440b      	add	r3, r1
 8023274:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023278:	71da      	strb	r2, [r3, #7]
    ssl->out_msg[5 + ct_len + sa_len] = (unsigned char)( total_dn_size       );
 802327a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802327e:	440b      	add	r3, r1
 8023280:	f883 b008 	strb.w	fp, [r3, #8]
    ret = mbedtls_ssl_write_handshake_msg( ssl );
 8023284:	4620      	mov	r0, r4
 8023286:	f001 fc81 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 802328a:	4683      	mov	fp, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate request" ) );
 802328c:	4b29      	ldr	r3, [pc, #164]	; (8023334 <mbedtls_ssl_handshake_server_step+0x1880>)
 802328e:	9300      	str	r3, [sp, #0]
 8023290:	f640 3311 	movw	r3, #2833	; 0xb11
 8023294:	4a21      	ldr	r2, [pc, #132]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 8023296:	2102      	movs	r1, #2
 8023298:	4620      	mov	r0, r4
 802329a:	f7f2 fa39 	bl	8015710 <mbedtls_debug_print_msg>
    return( ret );
 802329e:	f7fe bc3e 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    total_dn_size = 0;
 80232a2:	f04f 0b00 	mov.w	fp, #0
 80232a6:	e7d6      	b.n	8023256 <mbedtls_ssl_handshake_server_step+0x17a2>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server hello done" ) );
 80232a8:	4b23      	ldr	r3, [pc, #140]	; (8023338 <mbedtls_ssl_handshake_server_step+0x1884>)
 80232aa:	9300      	str	r3, [sp, #0]
 80232ac:	f640 5323 	movw	r3, #3363	; 0xd23
 80232b0:	4a1a      	ldr	r2, [pc, #104]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80232b2:	2102      	movs	r1, #2
 80232b4:	4620      	mov	r0, r4
 80232b6:	f7f2 fa2b 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->out_msglen  = 4;
 80232ba:	2304      	movs	r3, #4
 80232bc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80232c0:	2316      	movs	r3, #22
 80232c2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_HELLO_DONE;
 80232c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80232ca:	220e      	movs	r2, #14
 80232cc:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 80232ce:	6863      	ldr	r3, [r4, #4]
 80232d0:	3301      	adds	r3, #1
 80232d2:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80232d4:	4620      	mov	r0, r4
 80232d6:	f001 fc59 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 80232da:	4683      	mov	fp, r0
 80232dc:	b950      	cbnz	r0, 80232f4 <mbedtls_ssl_handshake_server_step+0x1840>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server hello done" ) );
 80232de:	4b17      	ldr	r3, [pc, #92]	; (802333c <mbedtls_ssl_handshake_server_step+0x1888>)
 80232e0:	9300      	str	r3, [sp, #0]
 80232e2:	f640 533f 	movw	r3, #3391	; 0xd3f
 80232e6:	4a0d      	ldr	r2, [pc, #52]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 80232e8:	2102      	movs	r1, #2
 80232ea:	4620      	mov	r0, r4
 80232ec:	f7f2 fa10 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 80232f0:	f7fe bc15 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 80232f4:	9001      	str	r0, [sp, #4]
 80232f6:	4b0a      	ldr	r3, [pc, #40]	; (8023320 <mbedtls_ssl_handshake_server_step+0x186c>)
 80232f8:	9300      	str	r3, [sp, #0]
 80232fa:	f640 5332 	movw	r3, #3378	; 0xd32
 80232fe:	4a07      	ldr	r2, [pc, #28]	; (802331c <mbedtls_ssl_handshake_server_step+0x1868>)
 8023300:	2101      	movs	r1, #1
 8023302:	4620      	mov	r0, r4
 8023304:	f7f2 fa36 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8023308:	f7fe bc09 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ret = mbedtls_ssl_parse_certificate( ssl );
 802330c:	4620      	mov	r0, r4
 802330e:	f003 fab9 	bl	8026884 <mbedtls_ssl_parse_certificate>
 8023312:	4683      	mov	fp, r0
            break;
 8023314:	f7fe bc03 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 8023318:	08034e4c 	.word	0x08034e4c
 802331c:	080345cc 	.word	0x080345cc
 8023320:	08033d30 	.word	0x08033d30
 8023324:	08034e7c 	.word	0x08034e7c
 8023328:	08034ee0 	.word	0x08034ee0
 802332c:	08034e9c 	.word	0x08034e9c
 8023330:	08034ec0 	.word	0x08034ec0
 8023334:	08034ef0 	.word	0x08034ef0
 8023338:	08034f10 	.word	0x08034f10
 802333c:	08034f2c 	.word	0x08034f2c
    ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8023340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023342:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse client key exchange" ) );
 8023344:	4bc1      	ldr	r3, [pc, #772]	; (802364c <mbedtls_ssl_handshake_server_step+0x1b98>)
 8023346:	9300      	str	r3, [sp, #0]
 8023348:	f640 6384 	movw	r3, #3716	; 0xe84
 802334c:	4ac0      	ldr	r2, [pc, #768]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 802334e:	2102      	movs	r1, #2
 8023350:	4620      	mov	r0, r4
 8023352:	f7f2 f9dd 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8023356:	2101      	movs	r1, #1
 8023358:	4620      	mov	r0, r4
 802335a:	f001 fdfd 	bl	8024f58 <mbedtls_ssl_read_record>
 802335e:	4683      	mov	fp, r0
 8023360:	2800      	cmp	r0, #0
 8023362:	f040 80c1 	bne.w	80234e8 <mbedtls_ssl_handshake_server_step+0x1a34>
    p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 8023366:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8023368:	1d37      	adds	r7, r6, #4
    end = ssl->in_msg + ssl->in_hslen;
 802336a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 802336c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802336e:	2b16      	cmp	r3, #22
 8023370:	f040 80c6 	bne.w	8023500 <mbedtls_ssl_handshake_server_step+0x1a4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE )
 8023374:	7833      	ldrb	r3, [r6, #0]
 8023376:	2b10      	cmp	r3, #16
 8023378:	f040 80cf 	bne.w	802351a <mbedtls_ssl_handshake_server_step+0x1a66>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 802337c:	7aa9      	ldrb	r1, [r5, #10]
 802337e:	1ecb      	subs	r3, r1, #3
 8023380:	b2db      	uxtb	r3, r3
 8023382:	2b01      	cmp	r3, #1
 8023384:	f240 80d6 	bls.w	8023534 <mbedtls_ssl_handshake_server_step+0x1a80>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 8023388:	f1a1 0309 	sub.w	r3, r1, #9
 802338c:	b2db      	uxtb	r3, r3
 802338e:	2b01      	cmp	r3, #1
 8023390:	f240 80d0 	bls.w	8023534 <mbedtls_ssl_handshake_server_step+0x1a80>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 8023394:	2901      	cmp	r1, #1
 8023396:	f040 8185 	bne.w	80236a4 <mbedtls_ssl_handshake_server_step+0x1bf0>
    unsigned char *pms = ssl->handshake->premaster + pms_offset;
 802339a:	6b25      	ldr	r5, [r4, #48]	; 0x30
    peer_pms[0] = peer_pms[1] = ~0;
 802339c:	23ff      	movs	r3, #255	; 0xff
 802339e:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 80233a2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80233a6:	2d00      	cmp	r5, #0
 80233a8:	f000 8125 	beq.w	80235f6 <mbedtls_ssl_handshake_server_step+0x1b42>
 80233ac:	f8d5 91b8 	ldr.w	r9, [r5, #440]	; 0x1b8
 80233b0:	f1b9 0f00 	cmp.w	r9, #0
 80233b4:	f000 811f 	beq.w	80235f6 <mbedtls_ssl_handshake_server_step+0x1b42>
    return( key_cert == NULL ? NULL : key_cert->key );
 80233b8:	f8d9 9004 	ldr.w	r9, [r9, #4]
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80233bc:	2d00      	cmp	r5, #0
 80233be:	f000 8127 	beq.w	8023610 <mbedtls_ssl_handshake_server_step+0x1b5c>
 80233c2:	f8d5 01b8 	ldr.w	r0, [r5, #440]	; 0x1b8
 80233c6:	2800      	cmp	r0, #0
 80233c8:	f000 8122 	beq.w	8023610 <mbedtls_ssl_handshake_server_step+0x1b5c>
    return( key_cert == NULL ? NULL : key_cert->cert );
 80233cc:	6800      	ldr	r0, [r0, #0]
    end = ssl->in_msg + ssl->in_hslen;
 80233ce:	eb06 0a02 	add.w	sl, r6, r2
 80233d2:	30bc      	adds	r0, #188	; 0xbc
 80233d4:	f7f6 ff3e 	bl	801a254 <mbedtls_pk_get_bitlen>
 80233d8:	f100 0807 	add.w	r8, r0, #7
 80233dc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_0 )
 80233e0:	68e3      	ldr	r3, [r4, #12]
 80233e2:	b17b      	cbz	r3, 8023404 <mbedtls_ssl_handshake_server_step+0x1950>
        if ( p + 2 > end ) {
 80233e4:	1db7      	adds	r7, r6, #6
 80233e6:	45ba      	cmp	sl, r7
 80233e8:	f0c0 8118 	bcc.w	802361c <mbedtls_ssl_handshake_server_step+0x1b68>
        if( *p++ != ( ( len >> 8 ) & 0xFF ) ||
 80233ec:	7932      	ldrb	r2, [r6, #4]
 80233ee:	f3c8 2307 	ubfx	r3, r8, #8, #8
 80233f2:	429a      	cmp	r2, r3
 80233f4:	f040 811e 	bne.w	8023634 <mbedtls_ssl_handshake_server_step+0x1b80>
            *p++ != ( ( len      ) & 0xFF ) )
 80233f8:	7972      	ldrb	r2, [r6, #5]
 80233fa:	fa5f f388 	uxtb.w	r3, r8
        if( *p++ != ( ( len >> 8 ) & 0xFF ) ||
 80233fe:	429a      	cmp	r2, r3
 8023400:	f040 8118 	bne.w	8023634 <mbedtls_ssl_handshake_server_step+0x1b80>
    if( p + len != end )
 8023404:	eb07 0308 	add.w	r3, r7, r8
 8023408:	459a      	cmp	sl, r3
 802340a:	f040 8133 	bne.w	8023674 <mbedtls_ssl_handshake_server_step+0x1bc0>
    if( ! mbedtls_pk_can_do( private_key, MBEDTLS_PK_RSA ) )
 802340e:	2101      	movs	r1, #1
 8023410:	4648      	mov	r0, r9
 8023412:	f7f6 fe6f 	bl	801a0f4 <mbedtls_pk_can_do>
 8023416:	2800      	cmp	r0, #0
 8023418:	f000 8138 	beq.w	802368c <mbedtls_ssl_handshake_server_step+0x1bd8>
                              ssl->conf->f_rng, ssl->conf->p_rng );
 802341c:	6823      	ldr	r3, [r4, #0]
    ret = mbedtls_pk_decrypt( private_key, p, len,
 802341e:	69da      	ldr	r2, [r3, #28]
 8023420:	9203      	str	r2, [sp, #12]
 8023422:	699b      	ldr	r3, [r3, #24]
 8023424:	9302      	str	r3, [sp, #8]
 8023426:	2330      	movs	r3, #48	; 0x30
 8023428:	9301      	str	r3, [sp, #4]
 802342a:	ab0f      	add	r3, sp, #60	; 0x3c
 802342c:	9300      	str	r3, [sp, #0]
 802342e:	ab1c      	add	r3, sp, #112	; 0x70
 8023430:	4642      	mov	r2, r8
 8023432:	4639      	mov	r1, r7
 8023434:	4648      	mov	r0, r9
 8023436:	f7f6 fed9 	bl	801a1ec <mbedtls_pk_decrypt>
 802343a:	9007      	str	r0, [sp, #28]
    mbedtls_ssl_write_version( ssl->handshake->max_major_ver,
 802343c:	6b20      	ldr	r0, [r4, #48]	; 0x30
                               ssl->conf->transport, ver );
 802343e:	6823      	ldr	r3, [r4, #0]
 8023440:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
    mbedtls_ssl_write_version( ssl->handshake->max_major_ver,
 8023444:	ab0e      	add	r3, sp, #56	; 0x38
 8023446:	f3c2 0240 	ubfx	r2, r2, #1, #1
 802344a:	f8d0 138c 	ldr.w	r1, [r0, #908]	; 0x38c
 802344e:	f8d0 0388 	ldr.w	r0, [r0, #904]	; 0x388
 8023452:	f003 fcbb 	bl	8026dcc <mbedtls_ssl_write_version>
    diff |= peer_pmslen ^ 48;
 8023456:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    diff |= peer_pms[0] ^ ver[0];
 802345a:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 802345e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    diff |= peer_pms[1] ^ ver[1];
 8023462:	f89d 9071 	ldrb.w	r9, [sp, #113]	; 0x71
 8023466:	f89d a039 	ldrb.w	sl, [sp, #57]	; 0x39
    ret = ssl->conf->f_rng( ssl->conf->p_rng, fake_pms, sizeof( fake_pms ) );
 802346a:	6820      	ldr	r0, [r4, #0]
 802346c:	6983      	ldr	r3, [r0, #24]
 802346e:	2230      	movs	r2, #48	; 0x30
 8023470:	a910      	add	r1, sp, #64	; 0x40
 8023472:	69c0      	ldr	r0, [r0, #28]
 8023474:	4798      	blx	r3
    if( ret != 0 )
 8023476:	4683      	mov	fp, r0
 8023478:	2800      	cmp	r0, #0
 802347a:	f040 82c7 	bne.w	8023a0c <mbedtls_ssl_handshake_server_step+0x1f58>
    ssl->handshake->pmslen = 48;
 802347e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023480:	2230      	movs	r2, #48	; 0x30
 8023482:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    for( i = 0; i < ssl->handshake->pmslen; i++ )
 8023486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023488:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 802348c:	2b00      	cmp	r3, #0
 802348e:	f000 8081 	beq.w	8023594 <mbedtls_ssl_handshake_server_step+0x1ae0>
    diff |= peer_pms[0] ^ ver[0];
 8023492:	ea86 0307 	eor.w	r3, r6, r7
    diff |= peer_pms[1] ^ ver[1];
 8023496:	ea89 090a 	eor.w	r9, r9, sl
 802349a:	ea43 0309 	orr.w	r3, r3, r9
    diff |= peer_pmslen ^ 48;
 802349e:	ea88 0802 	eor.w	r8, r8, r2
    diff |= peer_pms[1] ^ ver[1];
 80234a2:	ea43 0308 	orr.w	r3, r3, r8
 80234a6:	9f07      	ldr	r7, [sp, #28]
 80234a8:	431f      	orrs	r7, r3
    mask = - ( ( diff | - diff ) >> ( sizeof( unsigned int ) * 8 - 1 ) );
 80234aa:	427b      	negs	r3, r7
 80234ac:	431f      	orrs	r7, r3
 80234ae:	17ff      	asrs	r7, r7, #31
 80234b0:	fa5f fc87 	uxtb.w	ip, r7
 80234b4:	ae10      	add	r6, sp, #64	; 0x40
 80234b6:	a81c      	add	r0, sp, #112	; 0x70
 80234b8:	f205 3153 	addw	r1, r5, #851	; 0x353
        pms[i] = ( mask & fake_pms[i] ) | ( (~mask) & peer_pms[i] );
 80234bc:	43ff      	mvns	r7, r7
 80234be:	f816 eb01 	ldrb.w	lr, [r6], #1
 80234c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80234c6:	460b      	mov	r3, r1
 80234c8:	403a      	ands	r2, r7
 80234ca:	ea0c 0e0e 	and.w	lr, ip, lr
 80234ce:	ea42 020e 	orr.w	r2, r2, lr
 80234d2:	f801 2f01 	strb.w	r2, [r1, #1]!
    for( i = 0; i < ssl->handshake->pmslen; i++ )
 80234d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80234d8:	f2a3 3352 	subw	r3, r3, #850	; 0x352
 80234dc:	1b5b      	subs	r3, r3, r5
 80234de:	f8d2 2310 	ldr.w	r2, [r2, #784]	; 0x310
 80234e2:	429a      	cmp	r2, r3
 80234e4:	d8eb      	bhi.n	80234be <mbedtls_ssl_handshake_server_step+0x1a0a>
 80234e6:	e055      	b.n	8023594 <mbedtls_ssl_handshake_server_step+0x1ae0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80234e8:	9001      	str	r0, [sp, #4]
 80234ea:	4b5a      	ldr	r3, [pc, #360]	; (8023654 <mbedtls_ssl_handshake_server_step+0x1ba0>)
 80234ec:	9300      	str	r3, [sp, #0]
 80234ee:	f640 6396 	movw	r3, #3734	; 0xe96
 80234f2:	4a57      	ldr	r2, [pc, #348]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 80234f4:	2101      	movs	r1, #1
 80234f6:	4620      	mov	r0, r4
 80234f8:	f7f2 f93c 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80234fc:	f7fe bb0f 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
 8023500:	4b55      	ldr	r3, [pc, #340]	; (8023658 <mbedtls_ssl_handshake_server_step+0x1ba4>)
 8023502:	9300      	str	r3, [sp, #0]
 8023504:	f640 639f 	movw	r3, #3743	; 0xe9f
 8023508:	4a51      	ldr	r2, [pc, #324]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 802350a:	2101      	movs	r1, #1
 802350c:	4620      	mov	r0, r4
 802350e:	f7f2 f8ff 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
 8023512:	f8df b154 	ldr.w	fp, [pc, #340]	; 8023668 <mbedtls_ssl_handshake_server_step+0x1bb4>
 8023516:	f7fe bb02 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
 802351a:	4b4f      	ldr	r3, [pc, #316]	; (8023658 <mbedtls_ssl_handshake_server_step+0x1ba4>)
 802351c:	9300      	str	r3, [sp, #0]
 802351e:	f640 63a5 	movw	r3, #3749	; 0xea5
 8023522:	4a4b      	ldr	r2, [pc, #300]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 8023524:	2101      	movs	r1, #1
 8023526:	4620      	mov	r0, r4
 8023528:	f7f2 f8f2 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
 802352c:	f8df b138 	ldr.w	fp, [pc, #312]	; 8023668 <mbedtls_ssl_handshake_server_step+0x1bb4>
 8023530:	f7fe baf5 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        if( ( ret = mbedtls_ecdh_read_public( &ssl->handshake->ecdh_ctx,
 8023534:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023536:	3a04      	subs	r2, #4
 8023538:	4639      	mov	r1, r7
 802353a:	3080      	adds	r0, #128	; 0x80
 802353c:	f7f2 fd4a 	bl	8015fd4 <mbedtls_ecdh_read_public>
 8023540:	2800      	cmp	r0, #0
 8023542:	d13c      	bne.n	80235be <mbedtls_ssl_handshake_server_step+0x1b0a>
        MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 8023544:	2301      	movs	r3, #1
 8023546:	9301      	str	r3, [sp, #4]
 8023548:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802354a:	3380      	adds	r3, #128	; 0x80
 802354c:	9300      	str	r3, [sp, #0]
 802354e:	f640 63d6 	movw	r3, #3798	; 0xed6
 8023552:	4a3f      	ldr	r2, [pc, #252]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 8023554:	2103      	movs	r1, #3
 8023556:	4620      	mov	r0, r4
 8023558:	f7f2 fbc4 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 802355c:	6b20      	ldr	r0, [r4, #48]	; 0x30
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 802355e:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 8023560:	69da      	ldr	r2, [r3, #28]
 8023562:	9201      	str	r2, [sp, #4]
 8023564:	699b      	ldr	r3, [r3, #24]
 8023566:	9300      	str	r3, [sp, #0]
 8023568:	f44f 7380 	mov.w	r3, #256	; 0x100
 802356c:	f500 7255 	add.w	r2, r0, #852	; 0x354
 8023570:	f500 7144 	add.w	r1, r0, #784	; 0x310
 8023574:	3080      	adds	r0, #128	; 0x80
 8023576:	f7f2 fd45 	bl	8016004 <mbedtls_ecdh_calc_secret>
 802357a:	bb70      	cbnz	r0, 80235da <mbedtls_ssl_handshake_server_step+0x1b26>
        MBEDTLS_SSL_DEBUG_ECDH( 3, &ssl->handshake->ecdh_ctx,
 802357c:	2302      	movs	r3, #2
 802357e:	9301      	str	r3, [sp, #4]
 8023580:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023582:	3380      	adds	r3, #128	; 0x80
 8023584:	9300      	str	r3, [sp, #0]
 8023586:	f640 63e3 	movw	r3, #3811	; 0xee3
 802358a:	4a31      	ldr	r2, [pc, #196]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 802358c:	2103      	movs	r1, #3
 802358e:	4620      	mov	r0, r4
 8023590:	f7f2 fba8 	bl	8015ce4 <mbedtls_debug_printf_ecdh>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8023594:	4620      	mov	r0, r4
 8023596:	f000 fcd7 	bl	8023f48 <mbedtls_ssl_derive_keys>
 802359a:	4683      	mov	fp, r0
 802359c:	2800      	cmp	r0, #0
 802359e:	f040 808e 	bne.w	80236be <mbedtls_ssl_handshake_server_step+0x1c0a>
    ssl->state++;
 80235a2:	6863      	ldr	r3, [r4, #4]
 80235a4:	3301      	adds	r3, #1
 80235a6:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse client key exchange" ) );
 80235a8:	4b2c      	ldr	r3, [pc, #176]	; (802365c <mbedtls_ssl_handshake_server_step+0x1ba8>)
 80235aa:	9300      	str	r3, [sp, #0]
 80235ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80235b0:	4a27      	ldr	r2, [pc, #156]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 80235b2:	2102      	movs	r1, #2
 80235b4:	4620      	mov	r0, r4
 80235b6:	f7f2 f8ab 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 80235ba:	f7fe bab0 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_read_public", ret );
 80235be:	9001      	str	r0, [sp, #4]
 80235c0:	4b27      	ldr	r3, [pc, #156]	; (8023660 <mbedtls_ssl_handshake_server_step+0x1bac>)
 80235c2:	9300      	str	r3, [sp, #0]
 80235c4:	f640 63d2 	movw	r3, #3794	; 0xed2
 80235c8:	4a21      	ldr	r2, [pc, #132]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 80235ca:	2101      	movs	r1, #1
 80235cc:	4620      	mov	r0, r4
 80235ce:	f7f2 f8d1 	bl	8015774 <mbedtls_debug_print_ret>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP );
 80235d2:	f8df b098 	ldr.w	fp, [pc, #152]	; 802366c <mbedtls_ssl_handshake_server_step+0x1bb8>
 80235d6:	f7fe baa2 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 80235da:	9001      	str	r0, [sp, #4]
 80235dc:	4b21      	ldr	r3, [pc, #132]	; (8023664 <mbedtls_ssl_handshake_server_step+0x1bb0>)
 80235de:	9300      	str	r3, [sp, #0]
 80235e0:	f640 63df 	movw	r3, #3807	; 0xedf
 80235e4:	4a1a      	ldr	r2, [pc, #104]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 80235e6:	2101      	movs	r1, #1
 80235e8:	4620      	mov	r0, r4
 80235ea:	f7f2 f8c3 	bl	8015774 <mbedtls_debug_print_ret>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS );
 80235ee:	f8df b080 	ldr.w	fp, [pc, #128]	; 8023670 <mbedtls_ssl_handshake_server_step+0x1bbc>
 80235f2:	f7fe ba94 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        key_cert = ssl->conf->key_cert;
 80235f6:	6823      	ldr	r3, [r4, #0]
 80235f8:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->key );
 80235fc:	f1b9 0f00 	cmp.w	r9, #0
 8023600:	f47f aeda 	bne.w	80233b8 <mbedtls_ssl_handshake_server_step+0x1904>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8023604:	2d00      	cmp	r5, #0
 8023606:	f47f aedc 	bne.w	80233c2 <mbedtls_ssl_handshake_server_step+0x190e>
    return( key_cert == NULL ? NULL : key_cert->key );
 802360a:	46a9      	mov	r9, r5
    return( key_cert == NULL ? NULL : key_cert->cert );
 802360c:	4628      	mov	r0, r5
 802360e:	e6de      	b.n	80233ce <mbedtls_ssl_handshake_server_step+0x191a>
        key_cert = ssl->conf->key_cert;
 8023610:	6823      	ldr	r3, [r4, #0]
 8023612:	6b98      	ldr	r0, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 8023614:	2800      	cmp	r0, #0
 8023616:	f47f aed9 	bne.w	80233cc <mbedtls_ssl_handshake_server_step+0x1918>
 802361a:	e6d8      	b.n	80233ce <mbedtls_ssl_handshake_server_step+0x191a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
 802361c:	4b0e      	ldr	r3, [pc, #56]	; (8023658 <mbedtls_ssl_handshake_server_step+0x1ba4>)
 802361e:	9300      	str	r3, [sp, #0]
 8023620:	f640 53a1 	movw	r3, #3489	; 0xda1
 8023624:	4a0a      	ldr	r2, [pc, #40]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 8023626:	2101      	movs	r1, #1
 8023628:	4620      	mov	r0, r4
 802362a:	f7f2 f871 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
 802362e:	4b0e      	ldr	r3, [pc, #56]	; (8023668 <mbedtls_ssl_handshake_server_step+0x1bb4>)
 8023630:	9307      	str	r3, [sp, #28]
 8023632:	e703      	b.n	802343c <mbedtls_ssl_handshake_server_step+0x1988>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
 8023634:	4b08      	ldr	r3, [pc, #32]	; (8023658 <mbedtls_ssl_handshake_server_step+0x1ba4>)
 8023636:	9300      	str	r3, [sp, #0]
 8023638:	f640 53a7 	movw	r3, #3495	; 0xda7
 802363c:	4a04      	ldr	r2, [pc, #16]	; (8023650 <mbedtls_ssl_handshake_server_step+0x1b9c>)
 802363e:	2101      	movs	r1, #1
 8023640:	4620      	mov	r0, r4
 8023642:	f7f2 f865 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
 8023646:	4b08      	ldr	r3, [pc, #32]	; (8023668 <mbedtls_ssl_handshake_server_step+0x1bb4>)
 8023648:	9307      	str	r3, [sp, #28]
 802364a:	e6f7      	b.n	802343c <mbedtls_ssl_handshake_server_step+0x1988>
 802364c:	08034f48 	.word	0x08034f48
 8023650:	080345cc 	.word	0x080345cc
 8023654:	08033d80 	.word	0x08033d80
 8023658:	08034f68 	.word	0x08034f68
 802365c:	08034fbc 	.word	0x08034fbc
 8023660:	08034f88 	.word	0x08034f88
 8023664:	080343f0 	.word	0x080343f0
 8023668:	ffff8400 	.word	0xffff8400
 802366c:	ffff8380 	.word	0xffff8380
 8023670:	ffff8300 	.word	0xffff8300
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad client key exchange message" ) );
 8023674:	4bbf      	ldr	r3, [pc, #764]	; (8023974 <mbedtls_ssl_handshake_server_step+0x1ec0>)
 8023676:	9300      	str	r3, [sp, #0]
 8023678:	f640 53af 	movw	r3, #3503	; 0xdaf
 802367c:	4abe      	ldr	r2, [pc, #760]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 802367e:	2101      	movs	r1, #1
 8023680:	4620      	mov	r0, r4
 8023682:	f7f2 f845 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
 8023686:	4bbd      	ldr	r3, [pc, #756]	; (802397c <mbedtls_ssl_handshake_server_step+0x1ec8>)
 8023688:	9307      	str	r3, [sp, #28]
 802368a:	e6d7      	b.n	802343c <mbedtls_ssl_handshake_server_step+0x1988>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no RSA private key" ) );
 802368c:	4bbc      	ldr	r3, [pc, #752]	; (8023980 <mbedtls_ssl_handshake_server_step+0x1ecc>)
 802368e:	9300      	str	r3, [sp, #0]
 8023690:	f640 53d3 	movw	r3, #3539	; 0xdd3
 8023694:	4ab8      	ldr	r2, [pc, #736]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023696:	2101      	movs	r1, #1
 8023698:	4620      	mov	r0, r4
 802369a:	f7f2 f839 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 802369e:	4bb9      	ldr	r3, [pc, #740]	; (8023984 <mbedtls_ssl_handshake_server_step+0x1ed0>)
 80236a0:	9307      	str	r3, [sp, #28]
 80236a2:	e6cb      	b.n	802343c <mbedtls_ssl_handshake_server_step+0x1988>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80236a4:	4bb8      	ldr	r3, [pc, #736]	; (8023988 <mbedtls_ssl_handshake_server_step+0x1ed4>)
 80236a6:	9300      	str	r3, [sp, #0]
 80236a8:	f640 7383 	movw	r3, #3971	; 0xf83
 80236ac:	4ab2      	ldr	r2, [pc, #712]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80236ae:	2101      	movs	r1, #1
 80236b0:	4620      	mov	r0, r4
 80236b2:	f7f2 f82d 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80236b6:	f8df b300 	ldr.w	fp, [pc, #768]	; 80239b8 <mbedtls_ssl_handshake_server_step+0x1f04>
 80236ba:	f7fe ba30 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 80236be:	9001      	str	r0, [sp, #4]
 80236c0:	4bb2      	ldr	r3, [pc, #712]	; (802398c <mbedtls_ssl_handshake_server_step+0x1ed8>)
 80236c2:	9300      	str	r3, [sp, #0]
 80236c4:	f640 7389 	movw	r3, #3977	; 0xf89
 80236c8:	4aab      	ldr	r2, [pc, #684]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80236ca:	2101      	movs	r1, #1
 80236cc:	4620      	mov	r0, r4
 80236ce:	f7f2 f851 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80236d2:	f7fe ba24 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 80236d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236d8:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate verify" ) );
 80236da:	4bad      	ldr	r3, [pc, #692]	; (8023990 <mbedtls_ssl_handshake_server_step+0x1edc>)
 80236dc:	9300      	str	r3, [sp, #0]
 80236de:	f640 73be 	movw	r3, #4030	; 0xfbe
 80236e2:	4aa5      	ldr	r2, [pc, #660]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80236e4:	2102      	movs	r1, #2
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7f2 f812 	bl	8015710 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80236ec:	7aaa      	ldrb	r2, [r5, #10]
 80236ee:	1f53      	subs	r3, r2, #5
 80236f0:	b2db      	uxtb	r3, r3
 80236f2:	2b03      	cmp	r3, #3
 80236f4:	d96e      	bls.n	80237d4 <mbedtls_ssl_handshake_server_step+0x1d20>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80236f6:	2a0b      	cmp	r2, #11
 80236f8:	d06c      	beq.n	80237d4 <mbedtls_ssl_handshake_server_step+0x1d20>
        ssl->session_negotiate->peer_cert == NULL )
 80236fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE ||
 80236fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d068      	beq.n	80237d4 <mbedtls_ssl_handshake_server_step+0x1d20>
    ret = mbedtls_ssl_read_record( ssl, 0 /* no checksum update */ );
 8023702:	2100      	movs	r1, #0
 8023704:	4620      	mov	r0, r4
 8023706:	f001 fc27 	bl	8024f58 <mbedtls_ssl_read_record>
    if( 0 != ret )
 802370a:	4683      	mov	fp, r0
 802370c:	2800      	cmp	r0, #0
 802370e:	d16f      	bne.n	80237f0 <mbedtls_ssl_handshake_server_step+0x1d3c>
    ssl->state++;
 8023710:	6863      	ldr	r3, [r4, #4]
 8023712:	3301      	adds	r3, #1
 8023714:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||
 8023716:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8023718:	2b16      	cmp	r3, #22
 802371a:	d175      	bne.n	8023808 <mbedtls_ssl_handshake_server_step+0x1d54>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE_VERIFY )
 802371c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE ||
 802371e:	781a      	ldrb	r2, [r3, #0]
 8023720:	2a0f      	cmp	r2, #15
 8023722:	d171      	bne.n	8023808 <mbedtls_ssl_handshake_server_step+0x1d54>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 8023724:	68e2      	ldr	r2, [r4, #12]
 8023726:	2a03      	cmp	r2, #3
 8023728:	f040 80af 	bne.w	802388a <mbedtls_ssl_handshake_server_step+0x1dd6>
        if( i + 2 > ssl->in_hslen )
 802372c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 802372e:	2a05      	cmp	r2, #5
 8023730:	d977      	bls.n	8023822 <mbedtls_ssl_handshake_server_step+0x1d6e>
        md_alg = mbedtls_ssl_md_alg_from_hash( ssl->in_msg[i] );
 8023732:	7918      	ldrb	r0, [r3, #4]
 8023734:	f003 f863 	bl	80267fe <mbedtls_ssl_md_alg_from_hash>
        if( md_alg == MBEDTLS_MD_NONE || mbedtls_ssl_set_calc_verify_md( ssl, ssl->in_msg[i] ) )
 8023738:	4606      	mov	r6, r0
 802373a:	2800      	cmp	r0, #0
 802373c:	d07e      	beq.n	802383c <mbedtls_ssl_handshake_server_step+0x1d88>
 802373e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023740:	7919      	ldrb	r1, [r3, #4]
 8023742:	4620      	mov	r0, r4
 8023744:	f003 fb4a 	bl	8026ddc <mbedtls_ssl_set_calc_verify_md>
 8023748:	2800      	cmp	r0, #0
 802374a:	d177      	bne.n	802383c <mbedtls_ssl_handshake_server_step+0x1d88>
        if( MBEDTLS_MD_SHA1 == md_alg )
 802374c:	2e04      	cmp	r6, #4
            hash_start += 16;
 802374e:	bf0c      	ite	eq
 8023750:	af20      	addeq	r7, sp, #128	; 0x80
    unsigned char *hash_start = hash;
 8023752:	af1c      	addne	r7, sp, #112	; 0x70
        if( ( pk_alg = mbedtls_ssl_pk_alg_from_sig( ssl->in_msg[i] ) )
 8023754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023756:	7958      	ldrb	r0, [r3, #5]
 8023758:	f003 f830 	bl	80267bc <mbedtls_ssl_pk_alg_from_sig>
 802375c:	4601      	mov	r1, r0
 802375e:	2800      	cmp	r0, #0
 8023760:	d079      	beq.n	8023856 <mbedtls_ssl_handshake_server_step+0x1da2>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 8023762:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8023764:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8023766:	30bc      	adds	r0, #188	; 0xbc
 8023768:	f7f6 fcc4 	bl	801a0f4 <mbedtls_pk_can_do>
 802376c:	2800      	cmp	r0, #0
 802376e:	d07f      	beq.n	8023870 <mbedtls_ssl_handshake_server_step+0x1dbc>
    if( i + 2 > ssl->in_hslen )
 8023770:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8023772:	2b07      	cmp	r3, #7
 8023774:	f240 8096 	bls.w	80238a4 <mbedtls_ssl_handshake_server_step+0x1df0>
    sig_len = ( ssl->in_msg[i] << 8 ) | ssl->in_msg[i+1];
 8023778:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802377a:	7991      	ldrb	r1, [r2, #6]
 802377c:	79d5      	ldrb	r5, [r2, #7]
 802377e:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
    if( i + sig_len != ssl->in_hslen )
 8023782:	f105 0208 	add.w	r2, r5, #8
 8023786:	4293      	cmp	r3, r2
 8023788:	f040 8099 	bne.w	80238be <mbedtls_ssl_handshake_server_step+0x1e0a>
    ssl->handshake->calc_verify( ssl, hash );
 802378c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802378e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8023792:	a91c      	add	r1, sp, #112	; 0x70
 8023794:	4620      	mov	r0, r4
 8023796:	4798      	blx	r3
    if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 8023798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802379a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802379c:	9501      	str	r5, [sp, #4]
                           ssl->in_msg + i, sig_len ) ) != 0 )
 802379e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80237a0:	3308      	adds	r3, #8
    if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 80237a2:	9300      	str	r3, [sp, #0]
 80237a4:	2300      	movs	r3, #0
 80237a6:	463a      	mov	r2, r7
 80237a8:	4631      	mov	r1, r6
 80237aa:	30bc      	adds	r0, #188	; 0xbc
 80237ac:	f7f6 fcd6 	bl	801a15c <mbedtls_pk_verify>
 80237b0:	4683      	mov	fp, r0
 80237b2:	2800      	cmp	r0, #0
 80237b4:	f040 8090 	bne.w	80238d8 <mbedtls_ssl_handshake_server_step+0x1e24>
    mbedtls_ssl_update_handshake_status( ssl );
 80237b8:	4620      	mov	r0, r4
 80237ba:	f001 facd 	bl	8024d58 <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate verify" ) );
 80237be:	4b75      	ldr	r3, [pc, #468]	; (8023994 <mbedtls_ssl_handshake_server_step+0x1ee0>)
 80237c0:	9300      	str	r3, [sp, #0]
 80237c2:	f241 0351 	movw	r3, #4177	; 0x1051
 80237c6:	4a6c      	ldr	r2, [pc, #432]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80237c8:	2102      	movs	r1, #2
 80237ca:	4620      	mov	r0, r4
 80237cc:	f7f1 ffa0 	bl	8015710 <mbedtls_debug_print_msg>
            break;
 80237d0:	f7fe b9a5 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate verify" ) );
 80237d4:	4b70      	ldr	r3, [pc, #448]	; (8023998 <mbedtls_ssl_handshake_server_step+0x1ee4>)
 80237d6:	9300      	str	r3, [sp, #0]
 80237d8:	f640 73c7 	movw	r3, #4039	; 0xfc7
 80237dc:	4a66      	ldr	r2, [pc, #408]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80237de:	2102      	movs	r1, #2
 80237e0:	4620      	mov	r0, r4
 80237e2:	f7f1 ff95 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 80237e6:	6863      	ldr	r3, [r4, #4]
 80237e8:	3301      	adds	r3, #1
 80237ea:	6063      	str	r3, [r4, #4]
        return( 0 );
 80237ec:	f7fe b997 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record" ), ret );
 80237f0:	9001      	str	r0, [sp, #4]
 80237f2:	4b6a      	ldr	r3, [pc, #424]	; (802399c <mbedtls_ssl_handshake_server_step+0x1ee8>)
 80237f4:	9300      	str	r3, [sp, #0]
 80237f6:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 80237fa:	4a5f      	ldr	r2, [pc, #380]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80237fc:	2101      	movs	r1, #1
 80237fe:	4620      	mov	r0, r4
 8023800:	f7f1 ffb8 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8023804:	f7fe b98b 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
 8023808:	4b65      	ldr	r3, [pc, #404]	; (80239a0 <mbedtls_ssl_handshake_server_step+0x1eec>)
 802380a:	9300      	str	r3, [sp, #0]
 802380c:	f640 73da 	movw	r3, #4058	; 0xfda
 8023810:	4a59      	ldr	r2, [pc, #356]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023812:	2101      	movs	r1, #1
 8023814:	4620      	mov	r0, r4
 8023816:	f7f1 ff7b 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 802381a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 802381e:	f7fe b97e 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
 8023822:	4b5f      	ldr	r3, [pc, #380]	; (80239a0 <mbedtls_ssl_handshake_server_step+0x1eec>)
 8023824:	9300      	str	r3, [sp, #0]
 8023826:	f640 73fe 	movw	r3, #4094	; 0xffe
 802382a:	4a53      	ldr	r2, [pc, #332]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 802382c:	2101      	movs	r1, #1
 802382e:	4620      	mov	r0, r4
 8023830:	f7f1 ff6e 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 8023834:	f8df b184 	ldr.w	fp, [pc, #388]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 8023838:	f7fe b971 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "peer not adhering to requested sig_alg"
 802383c:	4b59      	ldr	r3, [pc, #356]	; (80239a4 <mbedtls_ssl_handshake_server_step+0x1ef0>)
 802383e:	9300      	str	r3, [sp, #0]
 8023840:	f241 0309 	movw	r3, #4105	; 0x1009
 8023844:	4a4c      	ldr	r2, [pc, #304]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023846:	2101      	movs	r1, #1
 8023848:	4620      	mov	r0, r4
 802384a:	f7f1 ff61 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 802384e:	f8df b16c 	ldr.w	fp, [pc, #364]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 8023852:	f7fe b964 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "peer not adhering to requested sig_alg"
 8023856:	4b53      	ldr	r3, [pc, #332]	; (80239a4 <mbedtls_ssl_handshake_server_step+0x1ef0>)
 8023858:	9300      	str	r3, [sp, #0]
 802385a:	f241 031e 	movw	r3, #4126	; 0x101e
 802385e:	4a46      	ldr	r2, [pc, #280]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023860:	2101      	movs	r1, #1
 8023862:	4620      	mov	r0, r4
 8023864:	f7f1 ff54 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 8023868:	f8df b150 	ldr.w	fp, [pc, #336]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 802386c:	f7fe b957 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "sig_alg doesn't match cert key" ) );
 8023870:	4b4d      	ldr	r3, [pc, #308]	; (80239a8 <mbedtls_ssl_handshake_server_step+0x1ef4>)
 8023872:	9300      	str	r3, [sp, #0]
 8023874:	f241 0328 	movw	r3, #4136	; 0x1028
 8023878:	4a3f      	ldr	r2, [pc, #252]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 802387a:	2101      	movs	r1, #1
 802387c:	4620      	mov	r0, r4
 802387e:	f7f1 ff47 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 8023882:	f8df b138 	ldr.w	fp, [pc, #312]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 8023886:	f7fe b94a 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 802388a:	4b3f      	ldr	r3, [pc, #252]	; (8023988 <mbedtls_ssl_handshake_server_step+0x1ed4>)
 802388c:	9300      	str	r3, [sp, #0]
 802388e:	f241 0331 	movw	r3, #4145	; 0x1031
 8023892:	4a39      	ldr	r2, [pc, #228]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023894:	2101      	movs	r1, #1
 8023896:	4620      	mov	r0, r4
 8023898:	f7f1 ff3a 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802389c:	f8df b118 	ldr.w	fp, [pc, #280]	; 80239b8 <mbedtls_ssl_handshake_server_step+0x1f04>
 80238a0:	f7fe b93d 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
 80238a4:	4b3e      	ldr	r3, [pc, #248]	; (80239a0 <mbedtls_ssl_handshake_server_step+0x1eec>)
 80238a6:	9300      	str	r3, [sp, #0]
 80238a8:	f241 0337 	movw	r3, #4151	; 0x1037
 80238ac:	4a32      	ldr	r2, [pc, #200]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80238ae:	2101      	movs	r1, #1
 80238b0:	4620      	mov	r0, r4
 80238b2:	f7f1 ff2d 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 80238b6:	f8df b104 	ldr.w	fp, [pc, #260]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 80238ba:	f7fe b930 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate verify message" ) );
 80238be:	4b38      	ldr	r3, [pc, #224]	; (80239a0 <mbedtls_ssl_handshake_server_step+0x1eec>)
 80238c0:	9300      	str	r3, [sp, #0]
 80238c2:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80238c6:	4a2c      	ldr	r2, [pc, #176]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80238c8:	2101      	movs	r1, #1
 80238ca:	4620      	mov	r0, r4
 80238cc:	f7f1 ff20 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY );
 80238d0:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 80239bc <mbedtls_ssl_handshake_server_step+0x1f08>
 80238d4:	f7fe b923 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 80238d8:	9001      	str	r0, [sp, #4]
 80238da:	4b34      	ldr	r3, [pc, #208]	; (80239ac <mbedtls_ssl_handshake_server_step+0x1ef8>)
 80238dc:	9300      	str	r3, [sp, #0]
 80238de:	f241 034b 	movw	r3, #4171	; 0x104b
 80238e2:	4a25      	ldr	r2, [pc, #148]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 80238e4:	2101      	movs	r1, #1
 80238e6:	4620      	mov	r0, r4
 80238e8:	f7f1 ff44 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80238ec:	f7fe b917 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80238f0:	4620      	mov	r0, r4
 80238f2:	f001 ffc1 	bl	8025878 <mbedtls_ssl_parse_change_cipher_spec>
 80238f6:	4683      	mov	fp, r0
            break;
 80238f8:	f7fe b911 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ret = mbedtls_ssl_parse_finished( ssl );
 80238fc:	4620      	mov	r0, r4
 80238fe:	f002 f8b3 	bl	8025a68 <mbedtls_ssl_parse_finished>
 8023902:	4683      	mov	fp, r0
            break;
 8023904:	f7fe b90b 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
                ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 8023908:	4620      	mov	r0, r4
 802390a:	f001 ff79 	bl	8025800 <mbedtls_ssl_write_change_cipher_spec>
 802390e:	4683      	mov	fp, r0
            break;
 8023910:	f7fe b905 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            ret = mbedtls_ssl_write_finished( ssl );
 8023914:	4620      	mov	r0, r4
 8023916:	f002 f82d 	bl	8025974 <mbedtls_ssl_write_finished>
 802391a:	4683      	mov	fp, r0
            break;
 802391c:	f7fe b8ff 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 8023920:	4b23      	ldr	r3, [pc, #140]	; (80239b0 <mbedtls_ssl_handshake_server_step+0x1efc>)
 8023922:	9300      	str	r3, [sp, #0]
 8023924:	f241 130c 	movw	r3, #4364	; 0x110c
 8023928:	4a13      	ldr	r2, [pc, #76]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 802392a:	2102      	movs	r1, #2
 802392c:	4620      	mov	r0, r4
 802392e:	f7f1 feef 	bl	8015710 <mbedtls_debug_print_msg>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8023932:	230f      	movs	r3, #15
 8023934:	6063      	str	r3, [r4, #4]
            break;
 8023936:	f7fe b8f2 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            mbedtls_ssl_handshake_wrapup( ssl );
 802393a:	4620      	mov	r0, r4
 802393c:	f002 fc82 	bl	8026244 <mbedtls_ssl_handshake_wrapup>
            break;
 8023940:	f7fe b8ed 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 8023944:	f8cd a004 	str.w	sl, [sp, #4]
 8023948:	4b1a      	ldr	r3, [pc, #104]	; (80239b4 <mbedtls_ssl_handshake_server_step+0x1f00>)
 802394a:	9300      	str	r3, [sp, #0]
 802394c:	f241 1315 	movw	r3, #4373	; 0x1115
 8023950:	4a09      	ldr	r2, [pc, #36]	; (8023978 <mbedtls_ssl_handshake_server_step+0x1ec4>)
 8023952:	2101      	movs	r1, #1
 8023954:	4620      	mov	r0, r4
 8023956:	f7f1 fedb 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802395a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80239c0 <mbedtls_ssl_handshake_server_step+0x1f0c>
 802395e:	f7fe b8de 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8023962:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80239c0 <mbedtls_ssl_handshake_server_step+0x1f0c>
 8023966:	f7fe b8da 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 802396a:	f8df b054 	ldr.w	fp, [pc, #84]	; 80239c0 <mbedtls_ssl_handshake_server_step+0x1f0c>
 802396e:	f7fe b8d6 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 8023972:	bf00      	nop
 8023974:	08034f68 	.word	0x08034f68
 8023978:	080345cc 	.word	0x080345cc
 802397c:	ffff8400 	.word	0xffff8400
 8023980:	08034fa4 	.word	0x08034fa4
 8023984:	ffff8a00 	.word	0xffff8a00
 8023988:	08034130 	.word	0x08034130
 802398c:	08033edc 	.word	0x08033edc
 8023990:	08034fdc 	.word	0x08034fdc
 8023994:	08035098 	.word	0x08035098
 8023998:	08034ff8 	.word	0x08034ff8
 802399c:	08033d80 	.word	0x08033d80
 80239a0:	0803501c 	.word	0x0803501c
 80239a4:	0803503c 	.word	0x0803503c
 80239a8:	08035078 	.word	0x08035078
 80239ac:	0803425c 	.word	0x0803425c
 80239b0:	08034500 	.word	0x08034500
 80239b4:	08034510 	.word	0x08034510
 80239b8:	ffff9400 	.word	0xffff9400
 80239bc:	ffff8280 	.word	0xffff8280
 80239c0:	ffff8f00 	.word	0xffff8f00
 80239c4:	464e      	mov	r6, r9
    if( cur != NULL )
 80239c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	f43e ae9a 	beq.w	8022702 <mbedtls_ssl_handshake_server_step+0xc4e>
 80239ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80239d2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80239d6:	f7fe bed2 	b.w	802277e <mbedtls_ssl_handshake_server_step+0xcca>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "pick hash algorithm %d for signing", md_alg ) );
 80239da:	4d12      	ldr	r5, [pc, #72]	; (8023a24 <mbedtls_ssl_handshake_server_step+0x1f70>)
 80239dc:	2300      	movs	r3, #0
 80239de:	9301      	str	r3, [sp, #4]
 80239e0:	4b11      	ldr	r3, [pc, #68]	; (8023a28 <mbedtls_ssl_handshake_server_step+0x1f74>)
 80239e2:	9300      	str	r3, [sp, #0]
 80239e4:	f640 4342 	movw	r3, #3138	; 0xc42
 80239e8:	462a      	mov	r2, r5
 80239ea:	2103      	movs	r1, #3
 80239ec:	4620      	mov	r0, r4
 80239ee:	f7f1 fe8f 	bl	8015710 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80239f2:	4b0e      	ldr	r3, [pc, #56]	; (8023a2c <mbedtls_ssl_handshake_server_step+0x1f78>)
 80239f4:	9300      	str	r3, [sp, #0]
 80239f6:	f640 4364 	movw	r3, #3172	; 0xc64
 80239fa:	462a      	mov	r2, r5
 80239fc:	2101      	movs	r1, #1
 80239fe:	4620      	mov	r0, r4
 8023a00:	f7f1 fe86 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8023a04:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8023a34 <mbedtls_ssl_handshake_server_step+0x1f80>
 8023a08:	f7ff baad 	b.w	8022f66 <mbedtls_ssl_handshake_server_step+0x14b2>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_parse_parse_encrypted_pms_secret" ), ret );
 8023a0c:	9001      	str	r0, [sp, #4]
 8023a0e:	4b08      	ldr	r3, [pc, #32]	; (8023a30 <mbedtls_ssl_handshake_server_step+0x1f7c>)
 8023a10:	9300      	str	r3, [sp, #0]
 8023a12:	f640 7366 	movw	r3, #3942	; 0xf66
 8023a16:	4a03      	ldr	r2, [pc, #12]	; (8023a24 <mbedtls_ssl_handshake_server_step+0x1f70>)
 8023a18:	2101      	movs	r1, #1
 8023a1a:	4620      	mov	r0, r4
 8023a1c:	f7f1 feaa 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8023a20:	f7fe b87d 	b.w	8021b1e <mbedtls_ssl_handshake_server_step+0x6a>
 8023a24:	080345cc 	.word	0x080345cc
 8023a28:	08035128 	.word	0x08035128
 8023a2c:	08034130 	.word	0x08034130
 8023a30:	0803514c 	.word	0x0803514c
 8023a34:	ffff9400 	.word	0xffff9400

08023a38 <ssl_update_out_pointers>:
        ssl->out_iv  = ssl->out_hdr + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_hdr - 8;
 8023a38:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8023a3c:	f1a3 0208 	sub.w	r2, r3, #8
 8023a40:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
        ssl->out_len = ssl->out_hdr + 3;
 8023a44:	1cda      	adds	r2, r3, #3
 8023a46:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
        ssl->out_iv  = ssl->out_hdr + 5;
 8023a4a:	3305      	adds	r3, #5
 8023a4c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    }

    /* Adjust out_msg to make space for explicit IV, if used. */
    if( transform != NULL &&
 8023a50:	460a      	mov	r2, r1
 8023a52:	b131      	cbz	r1, 8023a62 <ssl_update_out_pointers+0x2a>
 8023a54:	68c1      	ldr	r1, [r0, #12]
 8023a56:	2901      	cmp	r1, #1
 8023a58:	dd03      	ble.n	8023a62 <ssl_update_out_pointers+0x2a>
        ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + transform->ivlen - transform->fixed_ivlen;
 8023a5a:	68d1      	ldr	r1, [r2, #12]
 8023a5c:	6912      	ldr	r2, [r2, #16]
 8023a5e:	1a8a      	subs	r2, r1, r2
 8023a60:	4413      	add	r3, r2
 8023a62:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;
}
 8023a66:	4770      	bx	lr

08023a68 <ssl_reset_in_out_pointers>:
/*
 * Setup an SSL context
 */

static void ssl_reset_in_out_pointers( mbedtls_ssl_context *ssl )
{
 8023a68:	b510      	push	{r4, lr}
 8023a6a:	4604      	mov	r4, r0
        ssl->in_hdr  = ssl->in_buf;
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    {
        ssl->out_hdr = ssl->out_buf + 8;
 8023a6c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8023a70:	3308      	adds	r3, #8
 8023a72:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        ssl->in_hdr  = ssl->in_buf  + 8;
 8023a76:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8023a78:	3308      	adds	r3, #8
 8023a7a:	6583      	str	r3, [r0, #88]	; 0x58
    }

    /* Derive other internal pointers. */
    ssl_update_out_pointers( ssl, NULL /* no transform enabled */ );
 8023a7c:	2100      	movs	r1, #0
 8023a7e:	f7ff ffdb 	bl	8023a38 <ssl_update_out_pointers>
        ssl->in_ctr = ssl->in_hdr - 8;
 8023a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023a84:	f1a3 0208 	sub.w	r2, r3, #8
 8023a88:	6562      	str	r2, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 8023a8a:	1cda      	adds	r2, r3, #3
 8023a8c:	65e2      	str	r2, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 8023a8e:	3305      	adds	r3, #5
 8023a90:	6623      	str	r3, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_iv;
 8023a92:	6663      	str	r3, [r4, #100]	; 0x64
    ssl_update_in_pointers ( ssl, NULL /* no transform enabled */ );
}
 8023a94:	bd10      	pop	{r4, pc}
	...

08023a98 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 8023a98:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8023a9a:	b193      	cbz	r3, 8023ac2 <ssl_set_timer+0x2a>
{
 8023a9c:	b530      	push	{r4, r5, lr}
 8023a9e:	b083      	sub	sp, #12
 8023aa0:	4604      	mov	r4, r0
 8023aa2:	460d      	mov	r5, r1
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 8023aa4:	9101      	str	r1, [sp, #4]
 8023aa6:	4b07      	ldr	r3, [pc, #28]	; (8023ac4 <ssl_set_timer+0x2c>)
 8023aa8:	9300      	str	r3, [sp, #0]
 8023aaa:	2351      	movs	r3, #81	; 0x51
 8023aac:	4a06      	ldr	r2, [pc, #24]	; (8023ac8 <ssl_set_timer+0x30>)
 8023aae:	2103      	movs	r1, #3
 8023ab0:	f7f1 fe2e 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8023ab4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8023ab6:	462a      	mov	r2, r5
 8023ab8:	08a9      	lsrs	r1, r5, #2
 8023aba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8023abc:	4798      	blx	r3
}
 8023abe:	b003      	add	sp, #12
 8023ac0:	bd30      	pop	{r4, r5, pc}
 8023ac2:	4770      	bx	lr
 8023ac4:	080351ac 	.word	0x080351ac
 8023ac8:	08035174 	.word	0x08035174

08023acc <ssl_calc_finished_tls_sha256>:
{
 8023acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ad0:	b0a8      	sub	sp, #160	; 0xa0
 8023ad2:	4604      	mov	r4, r0
 8023ad4:	460d      	mov	r5, r1
 8023ad6:	4617      	mov	r7, r2
    mbedtls_ssl_session *session = ssl->session_negotiate;
 8023ad8:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    if( !session )
 8023adc:	f1b8 0f00 	cmp.w	r8, #0
 8023ae0:	d058      	beq.n	8023b94 <ssl_calc_finished_tls_sha256+0xc8>
    mbedtls_sha256_init( &sha256 );
 8023ae2:	a80d      	add	r0, sp, #52	; 0x34
 8023ae4:	f7fa fd92 	bl	801e60c <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 8023ae8:	4e2c      	ldr	r6, [pc, #176]	; (8023b9c <ssl_calc_finished_tls_sha256+0xd0>)
 8023aea:	4b2d      	ldr	r3, [pc, #180]	; (8023ba0 <ssl_calc_finished_tls_sha256+0xd4>)
 8023aec:	9300      	str	r3, [sp, #0]
 8023aee:	f641 034f 	movw	r3, #6223	; 0x184f
 8023af2:	4632      	mov	r2, r6
 8023af4:	2102      	movs	r1, #2
 8023af6:	4620      	mov	r0, r4
 8023af8:	f7f1 fe0a 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8023afc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023afe:	f501 71de 	add.w	r1, r1, #444	; 0x1bc
 8023b02:	a80d      	add	r0, sp, #52	; 0x34
 8023b04:	f7fa fd8f 	bl	801e626 <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 8023b08:	2320      	movs	r3, #32
 8023b0a:	9302      	str	r3, [sp, #8]
 8023b0c:	ab0f      	add	r3, sp, #60	; 0x3c
 8023b0e:	9301      	str	r3, [sp, #4]
 8023b10:	4b24      	ldr	r3, [pc, #144]	; (8023ba4 <ssl_calc_finished_tls_sha256+0xd8>)
 8023b12:	9300      	str	r3, [sp, #0]
 8023b14:	f641 035a 	movw	r3, #6234	; 0x185a
 8023b18:	4632      	mov	r2, r6
 8023b1a:	2104      	movs	r1, #4
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	f7f1 fe5d 	bl	80157dc <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8023b22:	4e21      	ldr	r6, [pc, #132]	; (8023ba8 <ssl_calc_finished_tls_sha256+0xdc>)
 8023b24:	4a21      	ldr	r2, [pc, #132]	; (8023bac <ssl_calc_finished_tls_sha256+0xe0>)
 8023b26:	2f00      	cmp	r7, #0
 8023b28:	bf18      	it	ne
 8023b2a:	4616      	movne	r6, r2
    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8023b2c:	a905      	add	r1, sp, #20
 8023b2e:	a80d      	add	r0, sp, #52	; 0x34
 8023b30:	f7fb f983 	bl	801ee3a <mbedtls_sha256_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 8023b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023b36:	f04f 090c 	mov.w	r9, #12
 8023b3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8023b3e:	9501      	str	r5, [sp, #4]
 8023b40:	2720      	movs	r7, #32
 8023b42:	9700      	str	r7, [sp, #0]
 8023b44:	f8d3 a30c 	ldr.w	sl, [r3, #780]	; 0x30c
 8023b48:	ab05      	add	r3, sp, #20
 8023b4a:	4632      	mov	r2, r6
 8023b4c:	2130      	movs	r1, #48	; 0x30
 8023b4e:	f108 0034 	add.w	r0, r8, #52	; 0x34
 8023b52:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 8023b54:	4e11      	ldr	r6, [pc, #68]	; (8023b9c <ssl_calc_finished_tls_sha256+0xd0>)
 8023b56:	f8cd 9008 	str.w	r9, [sp, #8]
 8023b5a:	9501      	str	r5, [sp, #4]
 8023b5c:	4b14      	ldr	r3, [pc, #80]	; (8023bb0 <ssl_calc_finished_tls_sha256+0xe4>)
 8023b5e:	9300      	str	r3, [sp, #0]
 8023b60:	f641 0367 	movw	r3, #6247	; 0x1867
 8023b64:	4632      	mov	r2, r6
 8023b66:	2103      	movs	r1, #3
 8023b68:	4620      	mov	r0, r4
 8023b6a:	f7f1 fe37 	bl	80157dc <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 8023b6e:	a80d      	add	r0, sp, #52	; 0x34
 8023b70:	f7fa fd52 	bl	801e618 <mbedtls_sha256_free>
    mbedtls_platform_zeroize(  padbuf, sizeof(  padbuf ) );
 8023b74:	4639      	mov	r1, r7
 8023b76:	a805      	add	r0, sp, #20
 8023b78:	f7f7 f9e4 	bl	801af44 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 8023b7c:	4b0d      	ldr	r3, [pc, #52]	; (8023bb4 <ssl_calc_finished_tls_sha256+0xe8>)
 8023b7e:	9300      	str	r3, [sp, #0]
 8023b80:	f641 036d 	movw	r3, #6253	; 0x186d
 8023b84:	4632      	mov	r2, r6
 8023b86:	2102      	movs	r1, #2
 8023b88:	4620      	mov	r0, r4
 8023b8a:	f7f1 fdc1 	bl	8015710 <mbedtls_debug_print_msg>
}
 8023b8e:	b028      	add	sp, #160	; 0xa0
 8023b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        session = ssl->session;
 8023b94:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8023b98:	e7a3      	b.n	8023ae2 <ssl_calc_finished_tls_sha256+0x16>
 8023b9a:	bf00      	nop
 8023b9c:	08035174 	.word	0x08035174
 8023ba0:	080351e0 	.word	0x080351e0
 8023ba4:	08035200 	.word	0x08035200
 8023ba8:	080351c0 	.word	0x080351c0
 8023bac:	080351d0 	.word	0x080351d0
 8023bb0:	08035214 	.word	0x08035214
 8023bb4:	0803522c 	.word	0x0803522c

08023bb8 <ssl_calc_verify_tls_sha256>:
{
 8023bb8:	b570      	push	{r4, r5, r6, lr}
 8023bba:	b0a0      	sub	sp, #128	; 0x80
 8023bbc:	4604      	mov	r4, r0
 8023bbe:	460d      	mov	r5, r1
    mbedtls_sha256_init( &sha256 );
 8023bc0:	a805      	add	r0, sp, #20
 8023bc2:	f7fa fd23 	bl	801e60c <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 8023bc6:	4e17      	ldr	r6, [pc, #92]	; (8023c24 <ssl_calc_verify_tls_sha256+0x6c>)
 8023bc8:	4b17      	ldr	r3, [pc, #92]	; (8023c28 <ssl_calc_verify_tls_sha256+0x70>)
 8023bca:	9300      	str	r3, [sp, #0]
 8023bcc:	f240 43b5 	movw	r3, #1205	; 0x4b5
 8023bd0:	4632      	mov	r2, r6
 8023bd2:	2102      	movs	r1, #2
 8023bd4:	4620      	mov	r0, r4
 8023bd6:	f7f1 fd9b 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8023bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023bdc:	f501 71de 	add.w	r1, r1, #444	; 0x1bc
 8023be0:	a805      	add	r0, sp, #20
 8023be2:	f7fa fd20 	bl	801e626 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8023be6:	4629      	mov	r1, r5
 8023be8:	a805      	add	r0, sp, #20
 8023bea:	f7fb f926 	bl	801ee3a <mbedtls_sha256_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 8023bee:	2320      	movs	r3, #32
 8023bf0:	9302      	str	r3, [sp, #8]
 8023bf2:	9501      	str	r5, [sp, #4]
 8023bf4:	4b0d      	ldr	r3, [pc, #52]	; (8023c2c <ssl_calc_verify_tls_sha256+0x74>)
 8023bf6:	9300      	str	r3, [sp, #0]
 8023bf8:	f240 43ba 	movw	r3, #1210	; 0x4ba
 8023bfc:	4632      	mov	r2, r6
 8023bfe:	2103      	movs	r1, #3
 8023c00:	4620      	mov	r0, r4
 8023c02:	f7f1 fdeb 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8023c06:	4b0a      	ldr	r3, [pc, #40]	; (8023c30 <ssl_calc_verify_tls_sha256+0x78>)
 8023c08:	9300      	str	r3, [sp, #0]
 8023c0a:	f240 43bb 	movw	r3, #1211	; 0x4bb
 8023c0e:	4632      	mov	r2, r6
 8023c10:	2102      	movs	r1, #2
 8023c12:	4620      	mov	r0, r4
 8023c14:	f7f1 fd7c 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 8023c18:	a805      	add	r0, sp, #20
 8023c1a:	f7fa fcfd 	bl	801e618 <mbedtls_sha256_free>
}
 8023c1e:	b020      	add	sp, #128	; 0x80
 8023c20:	bd70      	pop	{r4, r5, r6, pc}
 8023c22:	bf00      	nop
 8023c24:	08035174 	.word	0x08035174
 8023c28:	08035240 	.word	0x08035240
 8023c2c:	08035258 	.word	0x08035258
 8023c30:	08035274 	.word	0x08035274

08023c34 <tls_prf_generic>:
{
 8023c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c38:	b0b7      	sub	sp, #220	; 0xdc
 8023c3a:	4604      	mov	r4, r0
 8023c3c:	9100      	str	r1, [sp, #0]
 8023c3e:	9201      	str	r2, [sp, #4]
 8023c40:	4698      	mov	r8, r3
 8023c42:	f8dd 9108 	ldr.w	r9, [sp, #264]	; 0x108
 8023c46:	9d43      	ldr	r5, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 8023c48:	a803      	add	r0, sp, #12
 8023c4a:	f7f5 f915 	bl	8018e78 <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 8023c4e:	4620      	mov	r0, r4
 8023c50:	f7f5 f8f0 	bl	8018e34 <mbedtls_md_info_from_type>
 8023c54:	2800      	cmp	r0, #0
 8023c56:	d077      	beq.n	8023d48 <tls_prf_generic+0x114>
 8023c58:	4682      	mov	sl, r0
    md_len = mbedtls_md_get_size( md_info );
 8023c5a:	f7f5 fa61 	bl	8019120 <mbedtls_md_get_size>
 8023c5e:	4607      	mov	r7, r0
 8023c60:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8023c62:	4640      	mov	r0, r8
 8023c64:	f7dc face 	bl	8000204 <strlen>
 8023c68:	4606      	mov	r6, r0
 8023c6a:	eb00 0b07 	add.w	fp, r0, r7
 8023c6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023c70:	445b      	add	r3, fp
 8023c72:	2b80      	cmp	r3, #128	; 0x80
 8023c74:	d86b      	bhi.n	8023d4e <tls_prf_generic+0x11a>
    memcpy( tmp + md_len, label, nb );
 8023c76:	ab16      	add	r3, sp, #88	; 0x58
 8023c78:	441f      	add	r7, r3
 8023c7a:	4602      	mov	r2, r0
 8023c7c:	4641      	mov	r1, r8
 8023c7e:	4638      	mov	r0, r7
 8023c80:	f006 fc5b 	bl	802a53a <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8023c84:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8023c86:	9940      	ldr	r1, [sp, #256]	; 0x100
 8023c88:	ab16      	add	r3, sp, #88	; 0x58
 8023c8a:	eb03 000b 	add.w	r0, r3, fp
 8023c8e:	f006 fc54 	bl	802a53a <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8023c92:	2201      	movs	r2, #1
 8023c94:	4651      	mov	r1, sl
 8023c96:	a803      	add	r0, sp, #12
 8023c98:	f7f5 f90c 	bl	8018eb4 <mbedtls_md_setup>
 8023c9c:	4680      	mov	r8, r0
 8023c9e:	b118      	cbz	r0, 8023ca8 <tls_prf_generic+0x74>
}
 8023ca0:	4640      	mov	r0, r8
 8023ca2:	b037      	add	sp, #220	; 0xdc
 8023ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nb += rlen;
 8023ca8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8023caa:	441e      	add	r6, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8023cac:	9a01      	ldr	r2, [sp, #4]
 8023cae:	9900      	ldr	r1, [sp, #0]
 8023cb0:	a803      	add	r0, sp, #12
 8023cb2:	f7f5 f95d 	bl	8018f70 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 8023cb6:	4632      	mov	r2, r6
 8023cb8:	4639      	mov	r1, r7
 8023cba:	a803      	add	r0, sp, #12
 8023cbc:	f7f5 f9c4 	bl	8019048 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8023cc0:	a916      	add	r1, sp, #88	; 0x58
 8023cc2:	a803      	add	r0, sp, #12
 8023cc4:	f7f5 f9d4 	bl	8019070 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 8023cc8:	2d00      	cmp	r5, #0
 8023cca:	d031      	beq.n	8023d30 <tls_prf_generic+0xfc>
 8023ccc:	2700      	movs	r7, #0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8023cce:	4426      	add	r6, r4
 8023cd0:	e001      	b.n	8023cd6 <tls_prf_generic+0xa2>
    for( i = 0; i < dlen; i += md_len )
 8023cd2:	42af      	cmp	r7, r5
 8023cd4:	d22c      	bcs.n	8023d30 <tls_prf_generic+0xfc>
        mbedtls_md_hmac_reset ( &md_ctx );
 8023cd6:	a803      	add	r0, sp, #12
 8023cd8:	f7f5 fa08 	bl	80190ec <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8023cdc:	4632      	mov	r2, r6
 8023cde:	a916      	add	r1, sp, #88	; 0x58
 8023ce0:	a803      	add	r0, sp, #12
 8023ce2:	f7f5 f9b1 	bl	8019048 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8023ce6:	a906      	add	r1, sp, #24
 8023ce8:	a803      	add	r0, sp, #12
 8023cea:	f7f5 f9c1 	bl	8019070 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 8023cee:	a803      	add	r0, sp, #12
 8023cf0:	f7f5 f9fc 	bl	80190ec <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8023cf4:	4622      	mov	r2, r4
 8023cf6:	a916      	add	r1, sp, #88	; 0x58
 8023cf8:	a803      	add	r0, sp, #12
 8023cfa:	f7f5 f9a5 	bl	8019048 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8023cfe:	a916      	add	r1, sp, #88	; 0x58
 8023d00:	a803      	add	r0, sp, #12
 8023d02:	f7f5 f9b5 	bl	8019070 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8023d06:	463b      	mov	r3, r7
 8023d08:	4427      	add	r7, r4
 8023d0a:	42af      	cmp	r7, r5
 8023d0c:	bf86      	itte	hi
 8023d0e:	fbb5 f0f4 	udivhi	r0, r5, r4
 8023d12:	fb04 5010 	mlshi	r0, r4, r0, r5
 8023d16:	4620      	movls	r0, r4
        for( j = 0; j < k; j++ )
 8023d18:	2800      	cmp	r0, #0
 8023d1a:	d0da      	beq.n	8023cd2 <tls_prf_generic+0x9e>
 8023d1c:	aa06      	add	r2, sp, #24
 8023d1e:	444b      	add	r3, r9
 8023d20:	4418      	add	r0, r3
            dstbuf[i + j]  = h_i[j];
 8023d22:	f812 1b01 	ldrb.w	r1, [r2], #1
 8023d26:	f803 1b01 	strb.w	r1, [r3], #1
        for( j = 0; j < k; j++ )
 8023d2a:	4283      	cmp	r3, r0
 8023d2c:	d1f9      	bne.n	8023d22 <tls_prf_generic+0xee>
 8023d2e:	e7d0      	b.n	8023cd2 <tls_prf_generic+0x9e>
    mbedtls_md_free( &md_ctx );
 8023d30:	a803      	add	r0, sp, #12
 8023d32:	f7f5 f8a6 	bl	8018e82 <mbedtls_md_free>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8023d36:	2180      	movs	r1, #128	; 0x80
 8023d38:	a816      	add	r0, sp, #88	; 0x58
 8023d3a:	f7f7 f903 	bl	801af44 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( h_i, sizeof( h_i ) );
 8023d3e:	2140      	movs	r1, #64	; 0x40
 8023d40:	a806      	add	r0, sp, #24
 8023d42:	f7f7 f8ff 	bl	801af44 <mbedtls_platform_zeroize>
    return( 0 );
 8023d46:	e7ab      	b.n	8023ca0 <tls_prf_generic+0x6c>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8023d48:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8023d54 <tls_prf_generic+0x120>
 8023d4c:	e7a8      	b.n	8023ca0 <tls_prf_generic+0x6c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8023d4e:	f8df 8008 	ldr.w	r8, [pc, #8]	; 8023d58 <tls_prf_generic+0x124>
 8023d52:	e7a5      	b.n	8023ca0 <tls_prf_generic+0x6c>
 8023d54:	ffff9400 	.word	0xffff9400
 8023d58:	ffff8f00 	.word	0xffff8f00

08023d5c <tls_prf_sha256>:
{
 8023d5c:	b510      	push	{r4, lr}
 8023d5e:	b084      	sub	sp, #16
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 8023d60:	9c08      	ldr	r4, [sp, #32]
 8023d62:	9403      	str	r4, [sp, #12]
 8023d64:	9c07      	ldr	r4, [sp, #28]
 8023d66:	9402      	str	r4, [sp, #8]
 8023d68:	9c06      	ldr	r4, [sp, #24]
 8023d6a:	9401      	str	r4, [sp, #4]
 8023d6c:	9300      	str	r3, [sp, #0]
 8023d6e:	4613      	mov	r3, r2
 8023d70:	460a      	mov	r2, r1
 8023d72:	4601      	mov	r1, r0
 8023d74:	2006      	movs	r0, #6
 8023d76:	f7ff ff5d 	bl	8023c34 <tls_prf_generic>
}
 8023d7a:	b004      	add	sp, #16
 8023d7c:	bd10      	pop	{r4, pc}

08023d7e <tls_prf_sha384>:
{
 8023d7e:	b510      	push	{r4, lr}
 8023d80:	b084      	sub	sp, #16
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 8023d82:	9c08      	ldr	r4, [sp, #32]
 8023d84:	9403      	str	r4, [sp, #12]
 8023d86:	9c07      	ldr	r4, [sp, #28]
 8023d88:	9402      	str	r4, [sp, #8]
 8023d8a:	9c06      	ldr	r4, [sp, #24]
 8023d8c:	9401      	str	r4, [sp, #4]
 8023d8e:	9300      	str	r3, [sp, #0]
 8023d90:	4613      	mov	r3, r2
 8023d92:	460a      	mov	r2, r1
 8023d94:	4601      	mov	r1, r0
 8023d96:	2007      	movs	r0, #7
 8023d98:	f7ff ff4c 	bl	8023c34 <tls_prf_generic>
}
 8023d9c:	b004      	add	sp, #16
 8023d9e:	bd10      	pop	{r4, pc}

08023da0 <ssl_calc_finished_tls_sha384>:
{
 8023da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023da4:	b0c6      	sub	sp, #280	; 0x118
 8023da6:	4604      	mov	r4, r0
 8023da8:	460d      	mov	r5, r1
 8023daa:	4616      	mov	r6, r2
    mbedtls_ssl_session *session = ssl->session_negotiate;
 8023dac:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    if( !session )
 8023db0:	f1b8 0f00 	cmp.w	r8, #0
 8023db4:	d058      	beq.n	8023e68 <ssl_calc_finished_tls_sha384+0xc8>
    mbedtls_sha512_init( &sha512 );
 8023db6:	a810      	add	r0, sp, #64	; 0x40
 8023db8:	f7fb f905 	bl	801efc6 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 8023dbc:	4f2c      	ldr	r7, [pc, #176]	; (8023e70 <ssl_calc_finished_tls_sha384+0xd0>)
 8023dbe:	4b2d      	ldr	r3, [pc, #180]	; (8023e74 <ssl_calc_finished_tls_sha384+0xd4>)
 8023dc0:	9300      	str	r3, [sp, #0]
 8023dc2:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8023dc6:	463a      	mov	r2, r7
 8023dc8:	2102      	movs	r1, #2
 8023dca:	4620      	mov	r0, r4
 8023dcc:	f7f1 fca0 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8023dd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023dd2:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8023dd6:	a810      	add	r0, sp, #64	; 0x40
 8023dd8:	f7fb f902 	bl	801efe0 <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 8023ddc:	2340      	movs	r3, #64	; 0x40
 8023dde:	9302      	str	r3, [sp, #8]
 8023de0:	ab14      	add	r3, sp, #80	; 0x50
 8023de2:	9301      	str	r3, [sp, #4]
 8023de4:	4b24      	ldr	r3, [pc, #144]	; (8023e78 <ssl_calc_finished_tls_sha384+0xd8>)
 8023de6:	9300      	str	r3, [sp, #0]
 8023de8:	f641 038b 	movw	r3, #6283	; 0x188b
 8023dec:	463a      	mov	r2, r7
 8023dee:	2104      	movs	r1, #4
 8023df0:	4620      	mov	r0, r4
 8023df2:	f7f1 fcf3 	bl	80157dc <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 8023df6:	4f21      	ldr	r7, [pc, #132]	; (8023e7c <ssl_calc_finished_tls_sha384+0xdc>)
 8023df8:	4a21      	ldr	r2, [pc, #132]	; (8023e80 <ssl_calc_finished_tls_sha384+0xe0>)
 8023dfa:	2e00      	cmp	r6, #0
 8023dfc:	bf18      	it	ne
 8023dfe:	4617      	movne	r7, r2
    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8023e00:	a904      	add	r1, sp, #16
 8023e02:	a810      	add	r0, sp, #64	; 0x40
 8023e04:	f7fb fefc 	bl	801fc00 <mbedtls_sha512_finish_ret>
    ssl->handshake->tls_prf( session->master, 48, sender,
 8023e08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023e0a:	f04f 090c 	mov.w	r9, #12
 8023e0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8023e12:	9501      	str	r5, [sp, #4]
 8023e14:	2630      	movs	r6, #48	; 0x30
 8023e16:	9600      	str	r6, [sp, #0]
 8023e18:	f8d3 a30c 	ldr.w	sl, [r3, #780]	; 0x30c
 8023e1c:	ab04      	add	r3, sp, #16
 8023e1e:	463a      	mov	r2, r7
 8023e20:	4631      	mov	r1, r6
 8023e22:	f108 0034 	add.w	r0, r8, #52	; 0x34
 8023e26:	47d0      	blx	sl
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 8023e28:	4f11      	ldr	r7, [pc, #68]	; (8023e70 <ssl_calc_finished_tls_sha384+0xd0>)
 8023e2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8023e2e:	9501      	str	r5, [sp, #4]
 8023e30:	4b14      	ldr	r3, [pc, #80]	; (8023e84 <ssl_calc_finished_tls_sha384+0xe4>)
 8023e32:	9300      	str	r3, [sp, #0]
 8023e34:	f641 0398 	movw	r3, #6296	; 0x1898
 8023e38:	463a      	mov	r2, r7
 8023e3a:	2103      	movs	r1, #3
 8023e3c:	4620      	mov	r0, r4
 8023e3e:	f7f1 fccd 	bl	80157dc <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 8023e42:	a810      	add	r0, sp, #64	; 0x40
 8023e44:	f7fb f8c5 	bl	801efd2 <mbedtls_sha512_free>
    mbedtls_platform_zeroize(  padbuf, sizeof( padbuf ) );
 8023e48:	4631      	mov	r1, r6
 8023e4a:	a804      	add	r0, sp, #16
 8023e4c:	f7f7 f87a 	bl	801af44 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 8023e50:	4b0d      	ldr	r3, [pc, #52]	; (8023e88 <ssl_calc_finished_tls_sha384+0xe8>)
 8023e52:	9300      	str	r3, [sp, #0]
 8023e54:	f641 039e 	movw	r3, #6302	; 0x189e
 8023e58:	463a      	mov	r2, r7
 8023e5a:	2102      	movs	r1, #2
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	f7f1 fc57 	bl	8015710 <mbedtls_debug_print_msg>
}
 8023e62:	b046      	add	sp, #280	; 0x118
 8023e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        session = ssl->session;
 8023e68:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8023e6c:	e7a3      	b.n	8023db6 <ssl_calc_finished_tls_sha384+0x16>
 8023e6e:	bf00      	nop
 8023e70:	08035174 	.word	0x08035174
 8023e74:	08035284 	.word	0x08035284
 8023e78:	080352a4 	.word	0x080352a4
 8023e7c:	080351c0 	.word	0x080351c0
 8023e80:	080351d0 	.word	0x080351d0
 8023e84:	08035214 	.word	0x08035214
 8023e88:	0803522c 	.word	0x0803522c

08023e8c <ssl_calc_verify_tls_sha384>:
{
 8023e8c:	b570      	push	{r4, r5, r6, lr}
 8023e8e:	b0ba      	sub	sp, #232	; 0xe8
 8023e90:	4604      	mov	r4, r0
 8023e92:	460d      	mov	r5, r1
    mbedtls_sha512_init( &sha512 );
 8023e94:	a804      	add	r0, sp, #16
 8023e96:	f7fb f896 	bl	801efc6 <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 8023e9a:	4e17      	ldr	r6, [pc, #92]	; (8023ef8 <ssl_calc_verify_tls_sha384+0x6c>)
 8023e9c:	4b17      	ldr	r3, [pc, #92]	; (8023efc <ssl_calc_verify_tls_sha384+0x70>)
 8023e9e:	9300      	str	r3, [sp, #0]
 8023ea0:	f240 43ca 	movw	r3, #1226	; 0x4ca
 8023ea4:	4632      	mov	r2, r6
 8023ea6:	2102      	movs	r1, #2
 8023ea8:	4620      	mov	r0, r4
 8023eaa:	f7f1 fc31 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8023eae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023eb0:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8023eb4:	a804      	add	r0, sp, #16
 8023eb6:	f7fb f893 	bl	801efe0 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 8023eba:	4629      	mov	r1, r5
 8023ebc:	a804      	add	r0, sp, #16
 8023ebe:	f7fb fe9f 	bl	801fc00 <mbedtls_sha512_finish_ret>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 8023ec2:	2330      	movs	r3, #48	; 0x30
 8023ec4:	9302      	str	r3, [sp, #8]
 8023ec6:	9501      	str	r5, [sp, #4]
 8023ec8:	4b0d      	ldr	r3, [pc, #52]	; (8023f00 <ssl_calc_verify_tls_sha384+0x74>)
 8023eca:	9300      	str	r3, [sp, #0]
 8023ecc:	f240 43cf 	movw	r3, #1231	; 0x4cf
 8023ed0:	4632      	mov	r2, r6
 8023ed2:	2103      	movs	r1, #3
 8023ed4:	4620      	mov	r0, r4
 8023ed6:	f7f1 fc81 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 8023eda:	4b0a      	ldr	r3, [pc, #40]	; (8023f04 <ssl_calc_verify_tls_sha384+0x78>)
 8023edc:	9300      	str	r3, [sp, #0]
 8023ede:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 8023ee2:	4632      	mov	r2, r6
 8023ee4:	2102      	movs	r1, #2
 8023ee6:	4620      	mov	r0, r4
 8023ee8:	f7f1 fc12 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 8023eec:	a804      	add	r0, sp, #16
 8023eee:	f7fb f870 	bl	801efd2 <mbedtls_sha512_free>
}
 8023ef2:	b03a      	add	sp, #232	; 0xe8
 8023ef4:	bd70      	pop	{r4, r5, r6, pc}
 8023ef6:	bf00      	nop
 8023ef8:	08035174 	.word	0x08035174
 8023efc:	080352bc 	.word	0x080352bc
 8023f00:	08035258 	.word	0x08035258
 8023f04:	08035274 	.word	0x08035274

08023f08 <ssl_update_checksum_sha256>:
{
 8023f08:	b508      	push	{r3, lr}
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8023f0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023f0c:	f500 70de 	add.w	r0, r0, #444	; 0x1bc
 8023f10:	f7fa ff4a 	bl	801eda8 <mbedtls_sha256_update_ret>
}
 8023f14:	bd08      	pop	{r3, pc}

08023f16 <ssl_update_checksum_sha384>:
{
 8023f16:	b508      	push	{r3, lr}
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8023f18:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023f1a:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8023f1e:	f7fb fe1b 	bl	801fb58 <mbedtls_sha512_update_ret>
}
 8023f22:	bd08      	pop	{r3, pc}

08023f24 <ssl_update_checksum_start>:
{
 8023f24:	b570      	push	{r4, r5, r6, lr}
 8023f26:	4604      	mov	r4, r0
 8023f28:	460d      	mov	r5, r1
 8023f2a:	4616      	mov	r6, r2
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8023f2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8023f2e:	f500 70de 	add.w	r0, r0, #444	; 0x1bc
 8023f32:	f7fa ff39 	bl	801eda8 <mbedtls_sha256_update_ret>
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8023f36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8023f38:	4632      	mov	r2, r6
 8023f3a:	4629      	mov	r1, r5
 8023f3c:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8023f40:	f7fb fe0a 	bl	801fb58 <mbedtls_sha512_update_ret>
}
 8023f44:	bd70      	pop	{r4, r5, r6, pc}
	...

08023f48 <mbedtls_ssl_derive_keys>:
{
 8023f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f4c:	b0d9      	sub	sp, #356	; 0x164
 8023f4e:	4604      	mov	r4, r0
    mbedtls_ssl_session *session = ssl->session_negotiate;
 8023f50:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 8023f54:	6c05      	ldr	r5, [r0, #64]	; 0x40
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8023f56:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 8023f5a:	4bac      	ldr	r3, [pc, #688]	; (802420c <mbedtls_ssl_derive_keys+0x2c4>)
 8023f5c:	9300      	str	r3, [sp, #0]
 8023f5e:	f44f 731d 	mov.w	r3, #628	; 0x274
 8023f62:	4aab      	ldr	r2, [pc, #684]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8023f64:	2102      	movs	r1, #2
 8023f66:	f7f1 fbd3 	bl	8015710 <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8023f6a:	682b      	ldr	r3, [r5, #0]
 8023f6c:	7a18      	ldrb	r0, [r3, #8]
 8023f6e:	f7f0 ff21 	bl	8014db4 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8023f72:	b1a0      	cbz	r0, 8023f9e <mbedtls_ssl_derive_keys+0x56>
 8023f74:	4606      	mov	r6, r0
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8023f76:	682b      	ldr	r3, [r5, #0]
 8023f78:	7a58      	ldrb	r0, [r3, #9]
 8023f7a:	f7f4 ff5b 	bl	8018e34 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8023f7e:	9006      	str	r0, [sp, #24]
 8023f80:	b1d8      	cbz	r0, 8023fba <mbedtls_ssl_derive_keys+0x72>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8023f82:	68e3      	ldr	r3, [r4, #12]
 8023f84:	2b03      	cmp	r3, #3
 8023f86:	d026      	beq.n	8023fd6 <mbedtls_ssl_derive_keys+0x8e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8023f88:	4ba2      	ldr	r3, [pc, #648]	; (8024214 <mbedtls_ssl_derive_keys+0x2cc>)
 8023f8a:	9300      	str	r3, [sp, #0]
 8023f8c:	f240 23b1 	movw	r3, #689	; 0x2b1
 8023f90:	4a9f      	ldr	r2, [pc, #636]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8023f92:	2101      	movs	r1, #1
 8023f94:	4620      	mov	r0, r4
 8023f96:	f7f1 fbbb 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8023f9a:	4f9f      	ldr	r7, [pc, #636]	; (8024218 <mbedtls_ssl_derive_keys+0x2d0>)
 8023f9c:	e131      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 8023f9e:	682b      	ldr	r3, [r5, #0]
 8023fa0:	7a1b      	ldrb	r3, [r3, #8]
 8023fa2:	9301      	str	r3, [sp, #4]
 8023fa4:	4b9d      	ldr	r3, [pc, #628]	; (802421c <mbedtls_ssl_derive_keys+0x2d4>)
 8023fa6:	9300      	str	r3, [sp, #0]
 8023fa8:	f240 2379 	movw	r3, #633	; 0x279
 8023fac:	4a98      	ldr	r2, [pc, #608]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8023fae:	2101      	movs	r1, #1
 8023fb0:	4620      	mov	r0, r4
 8023fb2:	f7f1 fbad 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8023fb6:	4f9a      	ldr	r7, [pc, #616]	; (8024220 <mbedtls_ssl_derive_keys+0x2d8>)
 8023fb8:	e123      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 8023fba:	682b      	ldr	r3, [r5, #0]
 8023fbc:	7a5b      	ldrb	r3, [r3, #9]
 8023fbe:	9301      	str	r3, [sp, #4]
 8023fc0:	4b98      	ldr	r3, [pc, #608]	; (8024224 <mbedtls_ssl_derive_keys+0x2dc>)
 8023fc2:	9300      	str	r3, [sp, #0]
 8023fc4:	f240 2381 	movw	r3, #641	; 0x281
 8023fc8:	4a91      	ldr	r2, [pc, #580]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8023fca:	2101      	movs	r1, #1
 8023fcc:	4620      	mov	r0, r4
 8023fce:	f7f1 fb9f 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8023fd2:	4f93      	ldr	r7, [pc, #588]	; (8024220 <mbedtls_ssl_derive_keys+0x2d8>)
 8023fd4:	e115      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8023fd6:	682b      	ldr	r3, [r5, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8023fd8:	7a5b      	ldrb	r3, [r3, #9]
 8023fda:	2b07      	cmp	r3, #7
 8023fdc:	d033      	beq.n	8024046 <mbedtls_ssl_derive_keys+0xfe>
        handshake->tls_prf = tls_prf_sha256;
 8023fde:	4b92      	ldr	r3, [pc, #584]	; (8024228 <mbedtls_ssl_derive_keys+0x2e0>)
 8023fe0:	f8c8 330c 	str.w	r3, [r8, #780]	; 0x30c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8023fe4:	4b91      	ldr	r3, [pc, #580]	; (802422c <mbedtls_ssl_derive_keys+0x2e4>)
 8023fe6:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8023fea:	4b91      	ldr	r3, [pc, #580]	; (8024230 <mbedtls_ssl_derive_keys+0x2e8>)
 8023fec:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    if( handshake->resume == 0 )
 8023ff0:	f8d8 3384 	ldr.w	r3, [r8, #900]	; 0x384
 8023ff4:	2b00      	cmp	r3, #0
 8023ff6:	d13b      	bne.n	8024070 <mbedtls_ssl_derive_keys+0x128>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 8023ff8:	f508 7a55 	add.w	sl, r8, #852	; 0x354
 8023ffc:	f8d8 3310 	ldr.w	r3, [r8, #784]	; 0x310
 8024000:	9302      	str	r3, [sp, #8]
 8024002:	f8cd a004 	str.w	sl, [sp, #4]
 8024006:	4b8b      	ldr	r3, [pc, #556]	; (8024234 <mbedtls_ssl_derive_keys+0x2ec>)
 8024008:	9300      	str	r3, [sp, #0]
 802400a:	f240 23c1 	movw	r3, #705	; 0x2c1
 802400e:	4a80      	ldr	r2, [pc, #512]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8024010:	2103      	movs	r1, #3
 8024012:	4620      	mov	r0, r4
 8024014:	f7f1 fbe2 	bl	80157dc <mbedtls_debug_print_buf>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8024018:	f8d8 1310 	ldr.w	r1, [r8, #784]	; 0x310
 802401c:	2330      	movs	r3, #48	; 0x30
 802401e:	9302      	str	r3, [sp, #8]
                                  session->master, 48 );
 8024020:	f109 0334 	add.w	r3, r9, #52	; 0x34
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8024024:	9301      	str	r3, [sp, #4]
 8024026:	2340      	movs	r3, #64	; 0x40
 8024028:	9300      	str	r3, [sp, #0]
 802402a:	f8d8 730c 	ldr.w	r7, [r8, #780]	; 0x30c
 802402e:	f508 7345 	add.w	r3, r8, #788	; 0x314
 8024032:	4a81      	ldr	r2, [pc, #516]	; (8024238 <mbedtls_ssl_derive_keys+0x2f0>)
 8024034:	4650      	mov	r0, sl
 8024036:	47b8      	blx	r7
        if( ret != 0 )
 8024038:	4607      	mov	r7, r0
 802403a:	b970      	cbnz	r0, 802405a <mbedtls_ssl_derive_keys+0x112>
        mbedtls_platform_zeroize( handshake->premaster,
 802403c:	2130      	movs	r1, #48	; 0x30
 802403e:	4650      	mov	r0, sl
 8024040:	f7f6 ff80 	bl	801af44 <mbedtls_platform_zeroize>
 8024044:	e01d      	b.n	8024082 <mbedtls_ssl_derive_keys+0x13a>
        handshake->tls_prf = tls_prf_sha384;
 8024046:	4b7d      	ldr	r3, [pc, #500]	; (802423c <mbedtls_ssl_derive_keys+0x2f4>)
 8024048:	f8c8 330c 	str.w	r3, [r8, #780]	; 0x30c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 802404c:	4b7c      	ldr	r3, [pc, #496]	; (8024240 <mbedtls_ssl_derive_keys+0x2f8>)
 802404e:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8024052:	4b7c      	ldr	r3, [pc, #496]	; (8024244 <mbedtls_ssl_derive_keys+0x2fc>)
 8024054:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
 8024058:	e7ca      	b.n	8023ff0 <mbedtls_ssl_derive_keys+0xa8>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 802405a:	9001      	str	r0, [sp, #4]
 802405c:	4b7a      	ldr	r3, [pc, #488]	; (8024248 <mbedtls_ssl_derive_keys+0x300>)
 802405e:	9300      	str	r3, [sp, #0]
 8024060:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8024064:	4a6a      	ldr	r2, [pc, #424]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 8024066:	2101      	movs	r1, #1
 8024068:	4620      	mov	r0, r4
 802406a:	f7f1 fb83 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 802406e:	e0c8      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 8024070:	4b76      	ldr	r3, [pc, #472]	; (802424c <mbedtls_ssl_derive_keys+0x304>)
 8024072:	9300      	str	r3, [sp, #0]
 8024074:	f44f 733f 	mov.w	r3, #764	; 0x2fc
 8024078:	4a65      	ldr	r2, [pc, #404]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 802407a:	2103      	movs	r1, #3
 802407c:	4620      	mov	r0, r4
 802407e:	f7f1 fb47 	bl	8015710 <mbedtls_debug_print_msg>
    memcpy( tmp, handshake->randbytes, 64 );
 8024082:	f508 7745 	add.w	r7, r8, #788	; 0x314
 8024086:	f50d 7e90 	add.w	lr, sp, #288	; 0x120
 802408a:	f508 7a55 	add.w	sl, r8, #852	; 0x354
 802408e:	46f4      	mov	ip, lr
 8024090:	6838      	ldr	r0, [r7, #0]
 8024092:	6879      	ldr	r1, [r7, #4]
 8024094:	68ba      	ldr	r2, [r7, #8]
 8024096:	68fb      	ldr	r3, [r7, #12]
 8024098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802409c:	3710      	adds	r7, #16
 802409e:	46e6      	mov	lr, ip
 80240a0:	4557      	cmp	r7, sl
 80240a2:	d1f4      	bne.n	802408e <mbedtls_ssl_derive_keys+0x146>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80240a4:	f508 7a45 	add.w	sl, r8, #788	; 0x314
 80240a8:	af50      	add	r7, sp, #320	; 0x140
 80240aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80240ac:	f8c8 0314 	str.w	r0, [r8, #788]	; 0x314
 80240b0:	f8c8 1318 	str.w	r1, [r8, #792]	; 0x318
 80240b4:	f8c8 231c 	str.w	r2, [r8, #796]	; 0x31c
 80240b8:	f8c8 3320 	str.w	r3, [r8, #800]	; 0x320
 80240bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80240be:	f8c8 0324 	str.w	r0, [r8, #804]	; 0x324
 80240c2:	f8c8 1328 	str.w	r1, [r8, #808]	; 0x328
 80240c6:	f8c8 232c 	str.w	r2, [r8, #812]	; 0x32c
 80240ca:	f8c8 3330 	str.w	r3, [r8, #816]	; 0x330
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80240ce:	af48      	add	r7, sp, #288	; 0x120
 80240d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80240d2:	f8c8 0334 	str.w	r0, [r8, #820]	; 0x334
 80240d6:	f8c8 1338 	str.w	r1, [r8, #824]	; 0x338
 80240da:	f8c8 233c 	str.w	r2, [r8, #828]	; 0x33c
 80240de:	f8c8 3340 	str.w	r3, [r8, #832]	; 0x340
 80240e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80240e4:	f8c8 0344 	str.w	r0, [r8, #836]	; 0x344
 80240e8:	f8c8 1348 	str.w	r1, [r8, #840]	; 0x348
 80240ec:	f8c8 234c 	str.w	r2, [r8, #844]	; 0x34c
 80240f0:	f8c8 3350 	str.w	r3, [r8, #848]	; 0x350
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 80240f4:	2140      	movs	r1, #64	; 0x40
 80240f6:	a848      	add	r0, sp, #288	; 0x120
 80240f8:	f7f6 ff24 	bl	801af44 <mbedtls_platform_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80240fc:	f109 0b34 	add.w	fp, r9, #52	; 0x34
 8024100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024104:	9302      	str	r3, [sp, #8]
 8024106:	ab08      	add	r3, sp, #32
 8024108:	9301      	str	r3, [sp, #4]
 802410a:	2340      	movs	r3, #64	; 0x40
 802410c:	9300      	str	r3, [sp, #0]
 802410e:	f8d8 730c 	ldr.w	r7, [r8, #780]	; 0x30c
 8024112:	4653      	mov	r3, sl
 8024114:	4a4e      	ldr	r2, [pc, #312]	; (8024250 <mbedtls_ssl_derive_keys+0x308>)
 8024116:	2130      	movs	r1, #48	; 0x30
 8024118:	4658      	mov	r0, fp
 802411a:	47b8      	blx	r7
    if( ret != 0 )
 802411c:	4607      	mov	r7, r0
 802411e:	2800      	cmp	r0, #0
 8024120:	d165      	bne.n	80241ee <mbedtls_ssl_derive_keys+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 8024122:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8024126:	f7fb ff03 	bl	801ff30 <mbedtls_ssl_get_ciphersuite_name>
 802412a:	4f39      	ldr	r7, [pc, #228]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 802412c:	9001      	str	r0, [sp, #4]
 802412e:	4b49      	ldr	r3, [pc, #292]	; (8024254 <mbedtls_ssl_derive_keys+0x30c>)
 8024130:	9300      	str	r3, [sp, #0]
 8024132:	f240 331a 	movw	r3, #794	; 0x31a
 8024136:	463a      	mov	r2, r7
 8024138:	2103      	movs	r1, #3
 802413a:	4620      	mov	r0, r4
 802413c:	f7f1 fae8 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 8024140:	2330      	movs	r3, #48	; 0x30
 8024142:	9302      	str	r3, [sp, #8]
 8024144:	f8cd b004 	str.w	fp, [sp, #4]
 8024148:	4b3b      	ldr	r3, [pc, #236]	; (8024238 <mbedtls_ssl_derive_keys+0x2f0>)
 802414a:	9300      	str	r3, [sp, #0]
 802414c:	f44f 7347 	mov.w	r3, #796	; 0x31c
 8024150:	463a      	mov	r2, r7
 8024152:	2103      	movs	r1, #3
 8024154:	4620      	mov	r0, r4
 8024156:	f7f1 fb41 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 802415a:	f04f 0840 	mov.w	r8, #64	; 0x40
 802415e:	f8cd 8008 	str.w	r8, [sp, #8]
 8024162:	f8cd a004 	str.w	sl, [sp, #4]
 8024166:	4b3c      	ldr	r3, [pc, #240]	; (8024258 <mbedtls_ssl_derive_keys+0x310>)
 8024168:	9300      	str	r3, [sp, #0]
 802416a:	f240 331d 	movw	r3, #797	; 0x31d
 802416e:	463a      	mov	r2, r7
 8024170:	2104      	movs	r1, #4
 8024172:	4620      	mov	r0, r4
 8024174:	f7f1 fb32 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 8024178:	f44f 7380 	mov.w	r3, #256	; 0x100
 802417c:	9302      	str	r3, [sp, #8]
 802417e:	ab08      	add	r3, sp, #32
 8024180:	9301      	str	r3, [sp, #4]
 8024182:	4b36      	ldr	r3, [pc, #216]	; (802425c <mbedtls_ssl_derive_keys+0x314>)
 8024184:	9300      	str	r3, [sp, #0]
 8024186:	f240 331e 	movw	r3, #798	; 0x31e
 802418a:	463a      	mov	r2, r7
 802418c:	2104      	movs	r1, #4
 802418e:	4620      	mov	r0, r4
 8024190:	f7f1 fb24 	bl	80157dc <mbedtls_debug_print_buf>
    mbedtls_platform_zeroize( handshake->randbytes,
 8024194:	4641      	mov	r1, r8
 8024196:	4650      	mov	r0, sl
 8024198:	f7f6 fed4 	bl	801af44 <mbedtls_platform_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 802419c:	6873      	ldr	r3, [r6, #4]
 802419e:	08db      	lsrs	r3, r3, #3
 80241a0:	606b      	str	r3, [r5, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 80241a2:	7873      	ldrb	r3, [r6, #1]
 80241a4:	2b06      	cmp	r3, #6
 80241a6:	d05d      	beq.n	8024264 <mbedtls_ssl_derive_keys+0x31c>
 80241a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80241ac:	2b08      	cmp	r3, #8
 80241ae:	d059      	beq.n	8024264 <mbedtls_ssl_derive_keys+0x31c>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80241b0:	2201      	movs	r2, #1
 80241b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80241b6:	4641      	mov	r1, r8
 80241b8:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80241bc:	f7f4 fe7a 	bl	8018eb4 <mbedtls_md_setup>
 80241c0:	4607      	mov	r7, r0
 80241c2:	b948      	cbnz	r0, 80241d8 <mbedtls_ssl_derive_keys+0x290>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 80241c4:	2201      	movs	r2, #1
 80241c6:	4641      	mov	r1, r8
 80241c8:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80241cc:	f7f4 fe72 	bl	8018eb4 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80241d0:	4607      	mov	r7, r0
 80241d2:	2800      	cmp	r0, #0
 80241d4:	f000 80d2 	beq.w	802437c <mbedtls_ssl_derive_keys+0x434>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 80241d8:	9701      	str	r7, [sp, #4]
 80241da:	4b21      	ldr	r3, [pc, #132]	; (8024260 <mbedtls_ssl_derive_keys+0x318>)
 80241dc:	9300      	str	r3, [sp, #0]
 80241de:	f240 334b 	movw	r3, #843	; 0x34b
 80241e2:	4a0b      	ldr	r2, [pc, #44]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 80241e4:	2101      	movs	r1, #1
 80241e6:	4620      	mov	r0, r4
 80241e8:	f7f1 fac4 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 80241ec:	e009      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 80241ee:	9001      	str	r0, [sp, #4]
 80241f0:	4b15      	ldr	r3, [pc, #84]	; (8024248 <mbedtls_ssl_derive_keys+0x300>)
 80241f2:	9300      	str	r3, [sp, #0]
 80241f4:	f240 3316 	movw	r3, #790	; 0x316
 80241f8:	4a05      	ldr	r2, [pc, #20]	; (8024210 <mbedtls_ssl_derive_keys+0x2c8>)
 80241fa:	2101      	movs	r1, #1
 80241fc:	4620      	mov	r0, r4
 80241fe:	f7f1 fab9 	bl	8015774 <mbedtls_debug_print_ret>
}
 8024202:	4638      	mov	r0, r7
 8024204:	b059      	add	sp, #356	; 0x164
 8024206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802420a:	bf00      	nop
 802420c:	080352d4 	.word	0x080352d4
 8024210:	08035174 	.word	0x08035174
 8024214:	08034130 	.word	0x08034130
 8024218:	ffff9400 	.word	0xffff9400
 802421c:	080352e4 	.word	0x080352e4
 8024220:	ffff8f00 	.word	0xffff8f00
 8024224:	08035304 	.word	0x08035304
 8024228:	08023d5d 	.word	0x08023d5d
 802422c:	08023bb9 	.word	0x08023bb9
 8024230:	08023acd 	.word	0x08023acd
 8024234:	08035328 	.word	0x08035328
 8024238:	0803533c 	.word	0x0803533c
 802423c:	08023d7f 	.word	0x08023d7f
 8024240:	08023e8d 	.word	0x08023e8d
 8024244:	08023da1 	.word	0x08023da1
 8024248:	0803534c 	.word	0x0803534c
 802424c:	08035350 	.word	0x08035350
 8024250:	08035370 	.word	0x08035370
 8024254:	08035380 	.word	0x08035380
 8024258:	08035394 	.word	0x08035394
 802425c:	080353a4 	.word	0x080353a4
 8024260:	080353b0 	.word	0x080353b0
        transform->maclen = 0;
 8024264:	2300      	movs	r3, #0
 8024266:	616b      	str	r3, [r5, #20]
        transform->ivlen = 12;
 8024268:	230c      	movs	r3, #12
 802426a:	60eb      	str	r3, [r5, #12]
        if( cipher_info->mode == MBEDTLS_MODE_CHACHAPOLY )
 802426c:	7873      	ldrb	r3, [r6, #1]
            transform->fixed_ivlen = 4;
 802426e:	2b0a      	cmp	r3, #10
 8024270:	bf0c      	ite	eq
 8024272:	230c      	moveq	r3, #12
 8024274:	2304      	movne	r3, #4
 8024276:	612b      	str	r3, [r5, #16]
        taglen = transform->ciphersuite_info->flags &
 8024278:	682a      	ldr	r2, [r5, #0]
                  MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 802427a:	7f12      	ldrb	r2, [r2, #28]
 802427c:	f012 0f02 	tst.w	r2, #2
 8024280:	bf14      	ite	ne
 8024282:	2208      	movne	r2, #8
 8024284:	2210      	moveq	r2, #16
        explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 8024286:	f1c3 030c 	rsb	r3, r3, #12
        transform->minlen = explicit_ivlen + taglen;
 802428a:	4413      	add	r3, r2
 802428c:	60ab      	str	r3, [r5, #8]
        mac_key_len = 0;
 802428e:	2700      	movs	r7, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 8024290:	696b      	ldr	r3, [r5, #20]
 8024292:	9304      	str	r3, [sp, #16]
 8024294:	68eb      	ldr	r3, [r5, #12]
 8024296:	9303      	str	r3, [sp, #12]
 8024298:	68ab      	ldr	r3, [r5, #8]
 802429a:	9302      	str	r3, [sp, #8]
 802429c:	686b      	ldr	r3, [r5, #4]
 802429e:	9301      	str	r3, [sp, #4]
 80242a0:	4b7c      	ldr	r3, [pc, #496]	; (8024494 <mbedtls_ssl_derive_keys+0x54c>)
 80242a2:	9300      	str	r3, [sp, #0]
 80242a4:	f240 3397 	movw	r3, #919	; 0x397
 80242a8:	4a7b      	ldr	r2, [pc, #492]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 80242aa:	2103      	movs	r1, #3
 80242ac:	4620      	mov	r0, r4
 80242ae:	f7f1 fa2f 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80242b2:	6823      	ldr	r3, [r4, #0]
 80242b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80242b8:	f013 0f01 	tst.w	r3, #1
 80242bc:	f040 8082 	bne.w	80243c4 <mbedtls_ssl_derive_keys+0x47c>
        key1 = keyblk + mac_key_len * 2;
 80242c0:	ab08      	add	r3, sp, #32
 80242c2:	eb03 0847 	add.w	r8, r3, r7, lsl #1
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80242c6:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80242ca:	eb0a 0947 	add.w	r9, sl, r7, lsl #1
 80242ce:	4499      	add	r9, r3
        mac_dec = keyblk + mac_key_len;
 80242d0:	443b      	add	r3, r7
 80242d2:	9307      	str	r3, [sp, #28]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80242d4:	f8d5 b010 	ldr.w	fp, [r5, #16]
                            transform->fixed_ivlen : transform->ivlen;
 80242d8:	f1bb 0f00 	cmp.w	fp, #0
 80242dc:	d101      	bne.n	80242e2 <mbedtls_ssl_derive_keys+0x39a>
 80242de:	f8d5 b00c 	ldr.w	fp, [r5, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80242e2:	465a      	mov	r2, fp
 80242e4:	eb09 010a 	add.w	r1, r9, sl
 80242e8:	f105 0018 	add.w	r0, r5, #24
 80242ec:	f006 f925 	bl	802a53a <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 80242f0:	eb0a 010b 	add.w	r1, sl, fp
 80242f4:	465a      	mov	r2, fp
 80242f6:	4449      	add	r1, r9
 80242f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80242fc:	f006 f91d 	bl	802a53a <memcpy>
        mac_enc = keyblk;
 8024300:	ab08      	add	r3, sp, #32
 8024302:	9306      	str	r3, [sp, #24]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8024304:	68e3      	ldr	r3, [r4, #12]
 8024306:	2b00      	cmp	r3, #0
 8024308:	f340 808c 	ble.w	8024424 <mbedtls_ssl_derive_keys+0x4dc>
        if( mac_key_len != 0 )
 802430c:	2f00      	cmp	r7, #0
 802430e:	d17c      	bne.n	802440a <mbedtls_ssl_derive_keys+0x4c2>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8024310:	f105 0a50 	add.w	sl, r5, #80	; 0x50
 8024314:	4631      	mov	r1, r6
 8024316:	4650      	mov	r0, sl
 8024318:	f7f0 fd8c 	bl	8014e34 <mbedtls_cipher_setup>
 802431c:	4607      	mov	r7, r0
 802431e:	2800      	cmp	r0, #0
 8024320:	f040 808b 	bne.w	802443a <mbedtls_ssl_derive_keys+0x4f2>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8024324:	3588      	adds	r5, #136	; 0x88
 8024326:	4631      	mov	r1, r6
 8024328:	4628      	mov	r0, r5
 802432a:	f7f0 fd83 	bl	8014e34 <mbedtls_cipher_setup>
 802432e:	4607      	mov	r7, r0
 8024330:	2800      	cmp	r0, #0
 8024332:	f040 808d 	bne.w	8024450 <mbedtls_ssl_derive_keys+0x508>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8024336:	2301      	movs	r3, #1
 8024338:	6872      	ldr	r2, [r6, #4]
 802433a:	4641      	mov	r1, r8
 802433c:	4650      	mov	r0, sl
 802433e:	f7f0 fd91 	bl	8014e64 <mbedtls_cipher_setkey>
 8024342:	4607      	mov	r7, r0
 8024344:	2800      	cmp	r0, #0
 8024346:	f040 808e 	bne.w	8024466 <mbedtls_ssl_derive_keys+0x51e>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 802434a:	2300      	movs	r3, #0
 802434c:	6872      	ldr	r2, [r6, #4]
 802434e:	4649      	mov	r1, r9
 8024350:	4628      	mov	r0, r5
 8024352:	f7f0 fd87 	bl	8014e64 <mbedtls_cipher_setkey>
 8024356:	4607      	mov	r7, r0
 8024358:	2800      	cmp	r0, #0
 802435a:	f040 808f 	bne.w	802447c <mbedtls_ssl_derive_keys+0x534>
    mbedtls_platform_zeroize( keyblk, sizeof( keyblk ) );
 802435e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024362:	a808      	add	r0, sp, #32
 8024364:	f7f6 fdee 	bl	801af44 <mbedtls_platform_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 8024368:	4b4c      	ldr	r3, [pc, #304]	; (802449c <mbedtls_ssl_derive_keys+0x554>)
 802436a:	9300      	str	r3, [sp, #0]
 802436c:	f240 435c 	movw	r3, #1116	; 0x45c
 8024370:	4a49      	ldr	r2, [pc, #292]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 8024372:	2102      	movs	r1, #2
 8024374:	4620      	mov	r0, r4
 8024376:	f7f1 f9cb 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 802437a:	e742      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        mac_key_len = mbedtls_md_get_size( md_info );
 802437c:	9806      	ldr	r0, [sp, #24]
 802437e:	f7f4 fecf 	bl	8019120 <mbedtls_md_get_size>
 8024382:	4607      	mov	r7, r0
        transform->maclen = mac_key_len;
 8024384:	6168      	str	r0, [r5, #20]
        transform->ivlen = cipher_info->iv_size;
 8024386:	68f2      	ldr	r2, [r6, #12]
 8024388:	60ea      	str	r2, [r5, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 802438a:	7873      	ldrb	r3, [r6, #1]
 802438c:	2b07      	cmp	r3, #7
 802438e:	d00c      	beq.n	80243aa <mbedtls_ssl_derive_keys+0x462>
                                  + cipher_info->block_size
 8024390:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 8024392:	fbb0 f0f3 	udiv	r0, r0, r3
 8024396:	fb03 3000 	mla	r0, r3, r0, r3
                transform->minlen = transform->maclen
 802439a:	60a8      	str	r0, [r5, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 802439c:	68e3      	ldr	r3, [r4, #12]
 802439e:	3b02      	subs	r3, #2
 80243a0:	2b01      	cmp	r3, #1
 80243a2:	d804      	bhi.n	80243ae <mbedtls_ssl_derive_keys+0x466>
                transform->minlen += transform->ivlen;
 80243a4:	4410      	add	r0, r2
 80243a6:	60a8      	str	r0, [r5, #8]
 80243a8:	e772      	b.n	8024290 <mbedtls_ssl_derive_keys+0x348>
            transform->minlen = transform->maclen;
 80243aa:	60a8      	str	r0, [r5, #8]
 80243ac:	e770      	b.n	8024290 <mbedtls_ssl_derive_keys+0x348>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80243ae:	4b3c      	ldr	r3, [pc, #240]	; (80244a0 <mbedtls_ssl_derive_keys+0x558>)
 80243b0:	9300      	str	r3, [sp, #0]
 80243b2:	f240 3391 	movw	r3, #913	; 0x391
 80243b6:	4a38      	ldr	r2, [pc, #224]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 80243b8:	2101      	movs	r1, #1
 80243ba:	4620      	mov	r0, r4
 80243bc:	f7f1 f9a8 	bl	8015710 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80243c0:	4f38      	ldr	r7, [pc, #224]	; (80244a4 <mbedtls_ssl_derive_keys+0x55c>)
 80243c2:	e71e      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        key1 = keyblk + mac_key_len * 2 + transform->keylen;
 80243c4:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80243c8:	eb0a 0847 	add.w	r8, sl, r7, lsl #1
 80243cc:	ab08      	add	r3, sp, #32
 80243ce:	4498      	add	r8, r3
        key2 = keyblk + mac_key_len * 2;
 80243d0:	eb03 0947 	add.w	r9, r3, r7, lsl #1
        mac_enc = keyblk + mac_key_len;
 80243d4:	443b      	add	r3, r7
 80243d6:	9306      	str	r3, [sp, #24]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80243d8:	f8d5 b010 	ldr.w	fp, [r5, #16]
                            transform->fixed_ivlen : transform->ivlen;
 80243dc:	f1bb 0f00 	cmp.w	fp, #0
 80243e0:	d101      	bne.n	80243e6 <mbedtls_ssl_derive_keys+0x49e>
 80243e2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
        memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );
 80243e6:	465a      	mov	r2, fp
 80243e8:	eb08 010a 	add.w	r1, r8, sl
 80243ec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80243f0:	f006 f8a3 	bl	802a53a <memcpy>
        memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,
 80243f4:	eb0a 010b 	add.w	r1, sl, fp
 80243f8:	465a      	mov	r2, fp
 80243fa:	4441      	add	r1, r8
 80243fc:	f105 0018 	add.w	r0, r5, #24
 8024400:	f006 f89b 	bl	802a53a <memcpy>
        mac_dec = keyblk;
 8024404:	ab08      	add	r3, sp, #32
 8024406:	9307      	str	r3, [sp, #28]
 8024408:	e77c      	b.n	8024304 <mbedtls_ssl_derive_keys+0x3bc>
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 802440a:	463a      	mov	r2, r7
 802440c:	9906      	ldr	r1, [sp, #24]
 802440e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8024412:	f7f4 fdad 	bl	8018f70 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8024416:	463a      	mov	r2, r7
 8024418:	9907      	ldr	r1, [sp, #28]
 802441a:	f105 0044 	add.w	r0, r5, #68	; 0x44
 802441e:	f7f4 fda7 	bl	8018f70 <mbedtls_md_hmac_starts>
 8024422:	e775      	b.n	8024310 <mbedtls_ssl_derive_keys+0x3c8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8024424:	4b1e      	ldr	r3, [pc, #120]	; (80244a0 <mbedtls_ssl_derive_keys+0x558>)
 8024426:	9300      	str	r3, [sp, #0]
 8024428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802442c:	4a1a      	ldr	r2, [pc, #104]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 802442e:	2101      	movs	r1, #1
 8024430:	4620      	mov	r0, r4
 8024432:	f7f1 f96d 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024436:	4f1b      	ldr	r7, [pc, #108]	; (80244a4 <mbedtls_ssl_derive_keys+0x55c>)
 8024438:	e6e3      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 802443a:	9001      	str	r0, [sp, #4]
 802443c:	4b1a      	ldr	r3, [pc, #104]	; (80244a8 <mbedtls_ssl_derive_keys+0x560>)
 802443e:	9300      	str	r3, [sp, #0]
 8024440:	f240 430c 	movw	r3, #1036	; 0x40c
 8024444:	4a14      	ldr	r2, [pc, #80]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 8024446:	2101      	movs	r1, #1
 8024448:	4620      	mov	r0, r4
 802444a:	f7f1 f993 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802444e:	e6d8      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 8024450:	9001      	str	r0, [sp, #4]
 8024452:	4b15      	ldr	r3, [pc, #84]	; (80244a8 <mbedtls_ssl_derive_keys+0x560>)
 8024454:	9300      	str	r3, [sp, #0]
 8024456:	f240 4313 	movw	r3, #1043	; 0x413
 802445a:	4a0f      	ldr	r2, [pc, #60]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 802445c:	2101      	movs	r1, #1
 802445e:	4620      	mov	r0, r4
 8024460:	f7f1 f988 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8024464:	e6cd      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 8024466:	9001      	str	r0, [sp, #4]
 8024468:	4b10      	ldr	r3, [pc, #64]	; (80244ac <mbedtls_ssl_derive_keys+0x564>)
 802446a:	9300      	str	r3, [sp, #0]
 802446c:	f240 431b 	movw	r3, #1051	; 0x41b
 8024470:	4a09      	ldr	r2, [pc, #36]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 8024472:	2101      	movs	r1, #1
 8024474:	4620      	mov	r0, r4
 8024476:	f7f1 f97d 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802447a:	e6c2      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 802447c:	9001      	str	r0, [sp, #4]
 802447e:	4b0b      	ldr	r3, [pc, #44]	; (80244ac <mbedtls_ssl_derive_keys+0x564>)
 8024480:	9300      	str	r3, [sp, #0]
 8024482:	f240 4323 	movw	r3, #1059	; 0x423
 8024486:	4a04      	ldr	r2, [pc, #16]	; (8024498 <mbedtls_ssl_derive_keys+0x550>)
 8024488:	2101      	movs	r1, #1
 802448a:	4620      	mov	r0, r4
 802448c:	f7f1 f972 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8024490:	e6b7      	b.n	8024202 <mbedtls_ssl_derive_keys+0x2ba>
 8024492:	bf00      	nop
 8024494:	080353c4 	.word	0x080353c4
 8024498:	08035174 	.word	0x08035174
 802449c:	08035424 	.word	0x08035424
 80244a0:	08034130 	.word	0x08034130
 80244a4:	ffff9400 	.word	0xffff9400
 80244a8:	080353f4 	.word	0x080353f4
 80244ac:	0803540c 	.word	0x0803540c

080244b0 <mbedtls_ssl_fetch_input>:
{
 80244b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244b4:	b084      	sub	sp, #16
 80244b6:	4604      	mov	r4, r0
 80244b8:	460f      	mov	r7, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 80244ba:	4b5e      	ldr	r3, [pc, #376]	; (8024634 <mbedtls_ssl_fetch_input+0x184>)
 80244bc:	9300      	str	r3, [sp, #0]
 80244be:	f640 13e8 	movw	r3, #2536	; 0x9e8
 80244c2:	4a5d      	ldr	r2, [pc, #372]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 80244c4:	2102      	movs	r1, #2
 80244c6:	f7f1 f923 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80244ca:	6963      	ldr	r3, [r4, #20]
 80244cc:	b1f3      	cbz	r3, 802450c <mbedtls_ssl_fetch_input+0x5c>
    if( nb_want > MBEDTLS_SSL_IN_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80244ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80244d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80244d2:	1a9b      	subs	r3, r3, r2
 80244d4:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80244d8:	332d      	adds	r3, #45	; 0x2d
 80244da:	42bb      	cmp	r3, r7
 80244dc:	d324      	bcc.n	8024528 <mbedtls_ssl_fetch_input+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 80244de:	9702      	str	r7, [sp, #8]
 80244e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80244e2:	9301      	str	r3, [sp, #4]
 80244e4:	4b55      	ldr	r3, [pc, #340]	; (802463c <mbedtls_ssl_fetch_input+0x18c>)
 80244e6:	9300      	str	r3, [sp, #0]
 80244e8:	f640 2388 	movw	r3, #2696	; 0xa88
 80244ec:	4a52      	ldr	r2, [pc, #328]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 80244ee:	2102      	movs	r1, #2
 80244f0:	4620      	mov	r0, r4
 80244f2:	f7f1 f90d 	bl	8015710 <mbedtls_debug_print_msg>
        while( ssl->in_left < nb_want )
 80244f6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80244f8:	42bd      	cmp	r5, r7
 80244fa:	f080 808b 	bcs.w	8024614 <mbedtls_ssl_fetch_input+0x164>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 80244fe:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8024638 <mbedtls_ssl_fetch_input+0x188>
 8024502:	f8df a138 	ldr.w	sl, [pc, #312]	; 802463c <mbedtls_ssl_fetch_input+0x18c>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 8024506:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8024654 <mbedtls_ssl_fetch_input+0x1a4>
 802450a:	e062      	b.n	80245d2 <mbedtls_ssl_fetch_input+0x122>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 802450c:	69a3      	ldr	r3, [r4, #24]
 802450e:	2b00      	cmp	r3, #0
 8024510:	d1dd      	bne.n	80244ce <mbedtls_ssl_fetch_input+0x1e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 8024512:	4b4b      	ldr	r3, [pc, #300]	; (8024640 <mbedtls_ssl_fetch_input+0x190>)
 8024514:	9300      	str	r3, [sp, #0]
 8024516:	f640 13ec 	movw	r3, #2540	; 0x9ec
 802451a:	4a47      	ldr	r2, [pc, #284]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 802451c:	2101      	movs	r1, #1
 802451e:	4620      	mov	r0, r4
 8024520:	f7f1 f8f6 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8024524:	4d47      	ldr	r5, [pc, #284]	; (8024644 <mbedtls_ssl_fetch_input+0x194>)
 8024526:	e07f      	b.n	8024628 <mbedtls_ssl_fetch_input+0x178>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 8024528:	4b47      	ldr	r3, [pc, #284]	; (8024648 <mbedtls_ssl_fetch_input+0x198>)
 802452a:	9300      	str	r3, [sp, #0]
 802452c:	f640 13f3 	movw	r3, #2547	; 0x9f3
 8024530:	4a41      	ldr	r2, [pc, #260]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 8024532:	2101      	movs	r1, #1
 8024534:	4620      	mov	r0, r4
 8024536:	f7f1 f8eb 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802453a:	4d42      	ldr	r5, [pc, #264]	; (8024644 <mbedtls_ssl_fetch_input+0x194>)
 802453c:	e074      	b.n	8024628 <mbedtls_ssl_fetch_input+0x178>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 802453e:	4e3e      	ldr	r6, [pc, #248]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 8024540:	4b42      	ldr	r3, [pc, #264]	; (802464c <mbedtls_ssl_fetch_input+0x19c>)
 8024542:	9300      	str	r3, [sp, #0]
 8024544:	235f      	movs	r3, #95	; 0x5f
 8024546:	4632      	mov	r2, r6
 8024548:	2103      	movs	r1, #3
 802454a:	4620      	mov	r0, r4
 802454c:	f7f1 f8e0 	bl	8015710 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8024550:	9702      	str	r7, [sp, #8]
 8024552:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8024554:	9301      	str	r3, [sp, #4]
 8024556:	4b39      	ldr	r3, [pc, #228]	; (802463c <mbedtls_ssl_fetch_input+0x18c>)
 8024558:	9300      	str	r3, [sp, #0]
 802455a:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 802455e:	4632      	mov	r2, r6
 8024560:	2102      	movs	r1, #2
 8024562:	4620      	mov	r0, r4
 8024564:	f7f1 f8d4 	bl	8015710 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 8024568:	4d39      	ldr	r5, [pc, #228]	; (8024650 <mbedtls_ssl_fetch_input+0x1a0>)
 802456a:	9501      	str	r5, [sp, #4]
 802456c:	4b39      	ldr	r3, [pc, #228]	; (8024654 <mbedtls_ssl_fetch_input+0x1a4>)
 802456e:	9300      	str	r3, [sp, #0]
 8024570:	f640 23a2 	movw	r3, #2722	; 0xaa2
 8024574:	4632      	mov	r2, r6
 8024576:	2102      	movs	r1, #2
 8024578:	4620      	mov	r0, r4
 802457a:	f7f1 f8fb 	bl	8015774 <mbedtls_debug_print_ret>
            if( ret == 0 )
 802457e:	e053      	b.n	8024628 <mbedtls_ssl_fetch_input+0x178>
                    ret = ssl->f_recv( ssl->p_bio,
 8024580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024582:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8024584:	6963      	ldr	r3, [r4, #20]
 8024586:	4632      	mov	r2, r6
 8024588:	4401      	add	r1, r0
 802458a:	69e0      	ldr	r0, [r4, #28]
 802458c:	4798      	blx	r3
 802458e:	4605      	mov	r5, r0
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 8024590:	9702      	str	r7, [sp, #8]
 8024592:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8024594:	9301      	str	r3, [sp, #4]
 8024596:	f8cd a000 	str.w	sl, [sp]
 802459a:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 802459e:	4642      	mov	r2, r8
 80245a0:	2102      	movs	r1, #2
 80245a2:	4620      	mov	r0, r4
 80245a4:	f7f1 f8b4 	bl	8015710 <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 80245a8:	9501      	str	r5, [sp, #4]
 80245aa:	f8cd 9000 	str.w	r9, [sp]
 80245ae:	f640 23a2 	movw	r3, #2722	; 0xaa2
 80245b2:	4642      	mov	r2, r8
 80245b4:	2102      	movs	r1, #2
 80245b6:	4620      	mov	r0, r4
 80245b8:	f7f1 f8dc 	bl	8015774 <mbedtls_debug_print_ret>
            if( ret == 0 )
 80245bc:	2d00      	cmp	r5, #0
 80245be:	d037      	beq.n	8024630 <mbedtls_ssl_fetch_input+0x180>
            if( ret < 0 )
 80245c0:	2d00      	cmp	r5, #0
 80245c2:	db31      	blt.n	8024628 <mbedtls_ssl_fetch_input+0x178>
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80245c4:	42b5      	cmp	r5, r6
 80245c6:	d818      	bhi.n	80245fa <mbedtls_ssl_fetch_input+0x14a>
            ssl->in_left += ret;
 80245c8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80245ca:	441d      	add	r5, r3
 80245cc:	6765      	str	r5, [r4, #116]	; 0x74
        while( ssl->in_left < nb_want )
 80245ce:	42bd      	cmp	r5, r7
 80245d0:	d220      	bcs.n	8024614 <mbedtls_ssl_fetch_input+0x164>
    if( ssl->f_get_timer == NULL )
 80245d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80245d4:	b11b      	cbz	r3, 80245de <mbedtls_ssl_fetch_input+0x12e>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80245d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80245d8:	4798      	blx	r3
 80245da:	2802      	cmp	r0, #2
 80245dc:	d0af      	beq.n	802453e <mbedtls_ssl_fetch_input+0x8e>
            len = nb_want - ssl->in_left;
 80245de:	1b7e      	subs	r6, r7, r5
                if( ssl->f_recv_timeout != NULL )
 80245e0:	69a5      	ldr	r5, [r4, #24]
 80245e2:	2d00      	cmp	r5, #0
 80245e4:	d0cc      	beq.n	8024580 <mbedtls_ssl_fetch_input+0xd0>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 80245e6:	6823      	ldr	r3, [r4, #0]
 80245e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80245ea:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80245ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80245ee:	4632      	mov	r2, r6
 80245f0:	4401      	add	r1, r0
 80245f2:	69e0      	ldr	r0, [r4, #28]
 80245f4:	47a8      	blx	r5
 80245f6:	4605      	mov	r5, r0
 80245f8:	e7ca      	b.n	8024590 <mbedtls_ssl_fetch_input+0xe0>
                MBEDTLS_SSL_DEBUG_MSG( 1,
 80245fa:	9602      	str	r6, [sp, #8]
 80245fc:	9501      	str	r5, [sp, #4]
 80245fe:	4b16      	ldr	r3, [pc, #88]	; (8024658 <mbedtls_ssl_fetch_input+0x1a8>)
 8024600:	9300      	str	r3, [sp, #0]
 8024602:	f640 23ac 	movw	r3, #2732	; 0xaac
 8024606:	4a0c      	ldr	r2, [pc, #48]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 8024608:	2101      	movs	r1, #1
 802460a:	4620      	mov	r0, r4
 802460c:	f7f1 f880 	bl	8015710 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024610:	4d12      	ldr	r5, [pc, #72]	; (802465c <mbedtls_ssl_fetch_input+0x1ac>)
 8024612:	e009      	b.n	8024628 <mbedtls_ssl_fetch_input+0x178>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 8024614:	4b12      	ldr	r3, [pc, #72]	; (8024660 <mbedtls_ssl_fetch_input+0x1b0>)
 8024616:	9300      	str	r3, [sp, #0]
 8024618:	f640 23b6 	movw	r3, #2742	; 0xab6
 802461c:	4a06      	ldr	r2, [pc, #24]	; (8024638 <mbedtls_ssl_fetch_input+0x188>)
 802461e:	2102      	movs	r1, #2
 8024620:	4620      	mov	r0, r4
 8024622:	f7f1 f875 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 8024626:	2500      	movs	r5, #0
}
 8024628:	4628      	mov	r0, r5
 802462a:	b004      	add	sp, #16
 802462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8024630:	4d0c      	ldr	r5, [pc, #48]	; (8024664 <mbedtls_ssl_fetch_input+0x1b4>)
 8024632:	e7f9      	b.n	8024628 <mbedtls_ssl_fetch_input+0x178>
 8024634:	08035434 	.word	0x08035434
 8024638:	08035174 	.word	0x08035174
 802463c:	080354a0 	.word	0x080354a0
 8024640:	08035444 	.word	0x08035444
 8024644:	ffff8f00 	.word	0xffff8f00
 8024648:	08035480 	.word	0x08035480
 802464c:	080354bc 	.word	0x080354bc
 8024650:	ffff9800 	.word	0xffff9800
 8024654:	080354cc 	.word	0x080354cc
 8024658:	080354e4 	.word	0x080354e4
 802465c:	ffff9400 	.word	0xffff9400
 8024660:	0803551c 	.word	0x0803551c
 8024664:	ffff8d80 	.word	0xffff8d80

08024668 <mbedtls_ssl_flush_output>:
{
 8024668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802466c:	b084      	sub	sp, #16
 802466e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 8024670:	4b3b      	ldr	r3, [pc, #236]	; (8024760 <mbedtls_ssl_flush_output+0xf8>)
 8024672:	9300      	str	r3, [sp, #0]
 8024674:	f640 23c3 	movw	r3, #2755	; 0xac3
 8024678:	4a3a      	ldr	r2, [pc, #232]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 802467a:	2102      	movs	r1, #2
 802467c:	f7f1 f848 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 8024680:	6923      	ldr	r3, [r4, #16]
 8024682:	2b00      	cmp	r3, #0
 8024684:	d049      	beq.n	802471a <mbedtls_ssl_flush_output+0xb2>
    if( ssl->out_left == 0 )
 8024686:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 802468a:	2d00      	cmp	r5, #0
 802468c:	d050      	beq.n	8024730 <mbedtls_ssl_flush_output+0xc8>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 802468e:	4f35      	ldr	r7, [pc, #212]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 8024690:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8024780 <mbedtls_ssl_flush_output+0x118>
 8024694:	2602      	movs	r6, #2
 8024696:	9502      	str	r5, [sp, #8]
 8024698:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 802469c:	3305      	adds	r3, #5
 802469e:	9301      	str	r3, [sp, #4]
 80246a0:	f8cd 8000 	str.w	r8, [sp]
 80246a4:	f640 23d5 	movw	r3, #2773	; 0xad5
 80246a8:	463a      	mov	r2, r7
 80246aa:	4631      	mov	r1, r6
 80246ac:	4620      	mov	r0, r4
 80246ae:	f7f1 f82f 	bl	8015710 <mbedtls_debug_print_msg>
        buf = ssl->out_hdr - ssl->out_left;
 80246b2:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80246b6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80246ba:	6923      	ldr	r3, [r4, #16]
 80246bc:	1a89      	subs	r1, r1, r2
 80246be:	69e0      	ldr	r0, [r4, #28]
 80246c0:	4798      	blx	r3
 80246c2:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 80246c4:	9001      	str	r0, [sp, #4]
 80246c6:	4b28      	ldr	r3, [pc, #160]	; (8024768 <mbedtls_ssl_flush_output+0x100>)
 80246c8:	9300      	str	r3, [sp, #0]
 80246ca:	f640 23db 	movw	r3, #2779	; 0xadb
 80246ce:	463a      	mov	r2, r7
 80246d0:	4631      	mov	r1, r6
 80246d2:	4620      	mov	r0, r4
 80246d4:	f7f1 f84e 	bl	8015774 <mbedtls_debug_print_ret>
        if( ret <= 0 )
 80246d8:	2d00      	cmp	r5, #0
 80246da:	dd1a      	ble.n	8024712 <mbedtls_ssl_flush_output+0xaa>
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80246dc:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80246e0:	42a8      	cmp	r0, r5
 80246e2:	d330      	bcc.n	8024746 <mbedtls_ssl_flush_output+0xde>
        ssl->out_left -= ret;
 80246e4:	1b45      	subs	r5, r0, r5
 80246e6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    while( ssl->out_left > 0 )
 80246ea:	2d00      	cmp	r5, #0
 80246ec:	d1d3      	bne.n	8024696 <mbedtls_ssl_flush_output+0x2e>
        ssl->out_hdr = ssl->out_buf + 8;
 80246ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80246f2:	3308      	adds	r3, #8
 80246f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl_update_out_pointers( ssl, ssl->transform_out );
 80246f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80246fa:	4620      	mov	r0, r4
 80246fc:	f7ff f99c 	bl	8023a38 <ssl_update_out_pointers>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8024700:	4b1a      	ldr	r3, [pc, #104]	; (802476c <mbedtls_ssl_flush_output+0x104>)
 8024702:	9300      	str	r3, [sp, #0]
 8024704:	f640 23f7 	movw	r3, #2807	; 0xaf7
 8024708:	4a16      	ldr	r2, [pc, #88]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 802470a:	2102      	movs	r1, #2
 802470c:	4620      	mov	r0, r4
 802470e:	f7f0 ffff 	bl	8015710 <mbedtls_debug_print_msg>
}
 8024712:	4628      	mov	r0, r5
 8024714:	b004      	add	sp, #16
 8024716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 802471a:	4b15      	ldr	r3, [pc, #84]	; (8024770 <mbedtls_ssl_flush_output+0x108>)
 802471c:	9300      	str	r3, [sp, #0]
 802471e:	f640 23c7 	movw	r3, #2759	; 0xac7
 8024722:	4a10      	ldr	r2, [pc, #64]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 8024724:	2101      	movs	r1, #1
 8024726:	4620      	mov	r0, r4
 8024728:	f7f0 fff2 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802472c:	4d11      	ldr	r5, [pc, #68]	; (8024774 <mbedtls_ssl_flush_output+0x10c>)
 802472e:	e7f0      	b.n	8024712 <mbedtls_ssl_flush_output+0xaa>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 8024730:	4b0e      	ldr	r3, [pc, #56]	; (802476c <mbedtls_ssl_flush_output+0x104>)
 8024732:	9300      	str	r3, [sp, #0]
 8024734:	f640 23cf 	movw	r3, #2767	; 0xacf
 8024738:	4a0a      	ldr	r2, [pc, #40]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 802473a:	2102      	movs	r1, #2
 802473c:	4620      	mov	r0, r4
 802473e:	f7f0 ffe7 	bl	8015710 <mbedtls_debug_print_msg>
        return( 0 );
 8024742:	2500      	movs	r5, #0
 8024744:	e7e5      	b.n	8024712 <mbedtls_ssl_flush_output+0xaa>
            MBEDTLS_SSL_DEBUG_MSG( 1,
 8024746:	9002      	str	r0, [sp, #8]
 8024748:	9501      	str	r5, [sp, #4]
 802474a:	4b0b      	ldr	r3, [pc, #44]	; (8024778 <mbedtls_ssl_flush_output+0x110>)
 802474c:	9300      	str	r3, [sp, #0]
 802474e:	f640 23e2 	movw	r3, #2786	; 0xae2
 8024752:	4a04      	ldr	r2, [pc, #16]	; (8024764 <mbedtls_ssl_flush_output+0xfc>)
 8024754:	2101      	movs	r1, #1
 8024756:	4620      	mov	r0, r4
 8024758:	f7f0 ffda 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802475c:	4d07      	ldr	r5, [pc, #28]	; (802477c <mbedtls_ssl_flush_output+0x114>)
 802475e:	e7d8      	b.n	8024712 <mbedtls_ssl_flush_output+0xaa>
 8024760:	0803552c 	.word	0x0803552c
 8024764:	08035174 	.word	0x08035174
 8024768:	08035570 	.word	0x08035570
 802476c:	0803553c 	.word	0x0803553c
 8024770:	08035444 	.word	0x08035444
 8024774:	ffff8f00 	.word	0xffff8f00
 8024778:	0803557c 	.word	0x0803557c
 802477c:	ffff9400 	.word	0xffff9400
 8024780:	0803554c 	.word	0x0803554c

08024784 <mbedtls_ssl_write_record>:
{
 8024784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024788:	b091      	sub	sp, #68	; 0x44
 802478a:	4604      	mov	r4, r0
 802478c:	460e      	mov	r6, r1
    size_t len = ssl->out_msglen;
 802478e:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 8024792:	4b9a      	ldr	r3, [pc, #616]	; (80249fc <mbedtls_ssl_write_record+0x278>)
 8024794:	9300      	str	r3, [sp, #0]
 8024796:	f640 530f 	movw	r3, #3343	; 0xd0f
 802479a:	4a99      	ldr	r2, [pc, #612]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 802479c:	2102      	movs	r1, #2
 802479e:	f7f0 ffb7 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80247a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80247a6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80247aa:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80247ac:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80247ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80247b2:	68a1      	ldr	r1, [r4, #8]
 80247b4:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 80247b6:	709a      	strb	r2, [r3, #2]
        memcpy( ssl->out_ctr, ssl->cur_out_ctr, 8 );
 80247b8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80247bc:	4623      	mov	r3, r4
 80247be:	f853 1fa8 	ldr.w	r1, [r3, #168]!
 80247c2:	685b      	ldr	r3, [r3, #4]
 80247c4:	6011      	str	r1, [r2, #0]
 80247c6:	6053      	str	r3, [r2, #4]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80247c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80247cc:	0a2a      	lsrs	r2, r5, #8
 80247ce:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80247d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80247d4:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 80247d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80247d8:	2b00      	cmp	r3, #0
 80247da:	f000 814c 	beq.w	8024a76 <mbedtls_ssl_write_record+0x2f2>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 80247de:	4b89      	ldr	r3, [pc, #548]	; (8024a04 <mbedtls_ssl_write_record+0x280>)
 80247e0:	9300      	str	r3, [sp, #0]
 80247e2:	f240 53a5 	movw	r3, #1445	; 0x5a5
 80247e6:	4a86      	ldr	r2, [pc, #536]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80247e8:	2102      	movs	r1, #2
 80247ea:	4620      	mov	r0, r4
 80247ec:	f7f0 ff90 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 80247f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80247f2:	b32b      	cbz	r3, 8024840 <mbedtls_ssl_write_record+0xbc>
 80247f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80247f6:	b31b      	cbz	r3, 8024840 <mbedtls_ssl_write_record+0xbc>
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode(
    const mbedtls_cipher_context_t *ctx )
{
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, MBEDTLS_MODE_NONE );
    if( ctx->cipher_info == NULL )
 80247f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80247fa:	2b00      	cmp	r3, #0
 80247fc:	f000 81a2 	beq.w	8024b44 <mbedtls_ssl_write_record+0x3c0>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8024800:	785d      	ldrb	r5, [r3, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 8024802:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8024806:	9302      	str	r3, [sp, #8]
 8024808:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 802480c:	9301      	str	r3, [sp, #4]
 802480e:	4b7e      	ldr	r3, [pc, #504]	; (8024a08 <mbedtls_ssl_write_record+0x284>)
 8024810:	9300      	str	r3, [sp, #0]
 8024812:	f240 53af 	movw	r3, #1455	; 0x5af
 8024816:	4a7a      	ldr	r2, [pc, #488]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 8024818:	2104      	movs	r1, #4
 802481a:	4620      	mov	r0, r4
 802481c:	f7f0 ffde 	bl	80157dc <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_GCM ||
 8024820:	2d06      	cmp	r5, #6
 8024822:	d018      	beq.n	8024856 <mbedtls_ssl_write_record+0xd2>
 8024824:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8024828:	2d08      	cmp	r5, #8
 802482a:	d014      	beq.n	8024856 <mbedtls_ssl_write_record+0xd2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 802482c:	4b77      	ldr	r3, [pc, #476]	; (8024a0c <mbedtls_ssl_write_record+0x288>)
 802482e:	9300      	str	r3, [sp, #0]
 8024830:	f240 63ea 	movw	r3, #1770	; 0x6ea
 8024834:	4a72      	ldr	r2, [pc, #456]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 8024836:	2101      	movs	r1, #1
 8024838:	4620      	mov	r0, r4
 802483a:	f7f0 ff69 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802483e:	e008      	b.n	8024852 <mbedtls_ssl_write_record+0xce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8024840:	4b72      	ldr	r3, [pc, #456]	; (8024a0c <mbedtls_ssl_write_record+0x288>)
 8024842:	9300      	str	r3, [sp, #0]
 8024844:	f240 53a9 	movw	r3, #1449	; 0x5a9
 8024848:	4a6d      	ldr	r2, [pc, #436]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 802484a:	2101      	movs	r1, #1
 802484c:	4620      	mov	r0, r4
 802484e:	f7f0 ff5f 	bl	8015710 <mbedtls_debug_print_msg>
        unsigned char taglen = transform->ciphersuite_info->flags &
 8024852:	4d6f      	ldr	r5, [pc, #444]	; (8024a10 <mbedtls_ssl_write_record+0x28c>)
 8024854:	e03d      	b.n	80248d2 <mbedtls_ssl_write_record+0x14e>
        mbedtls_ssl_transform *transform = ssl->transform_out;
 8024856:	6ba5      	ldr	r5, [r4, #56]	; 0x38
        unsigned char taglen = transform->ciphersuite_info->flags &
 8024858:	682b      	ldr	r3, [r5, #0]
 802485a:	7f1b      	ldrb	r3, [r3, #28]
 802485c:	f013 0f02 	tst.w	r3, #2
 8024860:	bf14      	ite	ne
 8024862:	f04f 0808 	movne.w	r8, #8
 8024866:	f04f 0810 	moveq.w	r8, #16
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 802486a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 802486e:	692f      	ldr	r7, [r5, #16]
        memcpy( add_data, ssl->out_ctr, 8 );
 8024870:	aa0c      	add	r2, sp, #48	; 0x30
 8024872:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8024876:	4613      	mov	r3, r2
 8024878:	6808      	ldr	r0, [r1, #0]
 802487a:	6849      	ldr	r1, [r1, #4]
 802487c:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 802487e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8024882:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8024886:	68e3      	ldr	r3, [r4, #12]
        ver[0] = (unsigned char) major;
 8024888:	68a1      	ldr	r1, [r4, #8]
 802488a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
        ver[1] = (unsigned char) minor;
 802488e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8024892:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8024896:	0a19      	lsrs	r1, r3, #8
 8024898:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
        add_data[12] = ssl->out_msglen & 0xFF;
 802489c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 80248a0:	230d      	movs	r3, #13
 80248a2:	9302      	str	r3, [sp, #8]
 80248a4:	9201      	str	r2, [sp, #4]
 80248a6:	4b5b      	ldr	r3, [pc, #364]	; (8024a14 <mbedtls_ssl_write_record+0x290>)
 80248a8:	9300      	str	r3, [sp, #0]
 80248aa:	f240 6326 	movw	r3, #1574	; 0x626
 80248ae:	4a54      	ldr	r2, [pc, #336]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80248b0:	2104      	movs	r1, #4
 80248b2:	4620      	mov	r0, r4
 80248b4:	f7f0 ff92 	bl	80157dc <mbedtls_debug_print_buf>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80248b8:	68eb      	ldr	r3, [r5, #12]
 80248ba:	2b0c      	cmp	r3, #12
 80248bc:	d014      	beq.n	80248e8 <mbedtls_ssl_write_record+0x164>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80248be:	4b53      	ldr	r3, [pc, #332]	; (8024a0c <mbedtls_ssl_write_record+0x288>)
 80248c0:	9300      	str	r3, [sp, #0]
 80248c2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80248c6:	4a4e      	ldr	r2, [pc, #312]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80248c8:	2101      	movs	r1, #1
 80248ca:	4620      	mov	r0, r4
 80248cc:	f7f0 ff20 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80248d0:	4d4f      	ldr	r5, [pc, #316]	; (8024a10 <mbedtls_ssl_write_record+0x28c>)
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 80248d2:	9501      	str	r5, [sp, #4]
 80248d4:	4b50      	ldr	r3, [pc, #320]	; (8024a18 <mbedtls_ssl_write_record+0x294>)
 80248d6:	9300      	str	r3, [sp, #0]
 80248d8:	f44f 6354 	mov.w	r3, #3392	; 0xd40
 80248dc:	4a48      	ldr	r2, [pc, #288]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80248de:	2101      	movs	r1, #1
 80248e0:	4620      	mov	r0, r4
 80248e2:	f7f0 ff47 	bl	8015774 <mbedtls_debug_print_ret>
                return( ret );
 80248e6:	e129      	b.n	8024b3c <mbedtls_ssl_write_record+0x3b8>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80248e8:	692b      	ldr	r3, [r5, #16]
 80248ea:	2b04      	cmp	r3, #4
 80248ec:	d06c      	beq.n	80249c8 <mbedtls_ssl_write_record+0x244>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 80248ee:	2b0c      	cmp	r3, #12
 80248f0:	d1e5      	bne.n	80248be <mbedtls_ssl_write_record+0x13a>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 80248f2:	ab09      	add	r3, sp, #36	; 0x24
 80248f4:	462a      	mov	r2, r5
 80248f6:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80248fa:	6851      	ldr	r1, [r2, #4]
 80248fc:	6892      	ldr	r2, [r2, #8]
 80248fe:	c307      	stmia	r3!, {r0, r1, r2}
                iv[i+4] ^= ssl->out_ctr[i];
 8024900:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8024904:	a90a      	add	r1, sp, #40	; 0x28
 8024906:	1e5a      	subs	r2, r3, #1
 8024908:	f103 0c07 	add.w	ip, r3, #7
 802490c:	780b      	ldrb	r3, [r1, #0]
 802490e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8024912:	4043      	eors	r3, r0
 8024914:	f801 3b01 	strb.w	r3, [r1], #1
            for( i = 0; i < 8; i++ )
 8024918:	4562      	cmp	r2, ip
 802491a:	d1f7      	bne.n	802490c <mbedtls_ssl_write_record+0x188>
        size_t explicit_ivlen = transform->ivlen - transform->fixed_ivlen;
 802491c:	eba9 0707 	sub.w	r7, r9, r7
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (internal)",
 8024920:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8024a00 <mbedtls_ssl_write_record+0x27c>
 8024924:	68eb      	ldr	r3, [r5, #12]
 8024926:	9302      	str	r3, [sp, #8]
 8024928:	ab09      	add	r3, sp, #36	; 0x24
 802492a:	9301      	str	r3, [sp, #4]
 802492c:	4b3b      	ldr	r3, [pc, #236]	; (8024a1c <mbedtls_ssl_write_record+0x298>)
 802492e:	9300      	str	r3, [sp, #0]
 8024930:	f240 6344 	movw	r3, #1604	; 0x644
 8024934:	464a      	mov	r2, r9
 8024936:	2104      	movs	r1, #4
 8024938:	4620      	mov	r0, r4
 802493a:	f7f0 ff4f 	bl	80157dc <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used (transmitted)",
 802493e:	9702      	str	r7, [sp, #8]
 8024940:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8024944:	9301      	str	r3, [sp, #4]
 8024946:	4b36      	ldr	r3, [pc, #216]	; (8024a20 <mbedtls_ssl_write_record+0x29c>)
 8024948:	9300      	str	r3, [sp, #0]
 802494a:	f240 6346 	movw	r3, #1606	; 0x646
 802494e:	464a      	mov	r2, r9
 8024950:	2104      	movs	r1, #4
 8024952:	4620      	mov	r0, r4
 8024954:	f7f0 ff42 	bl	80157dc <mbedtls_debug_print_buf>
        enc_msg = ssl->out_msg;
 8024958:	f8d4 b098 	ldr.w	fp, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
 802495c:	f8d4 a0a0 	ldr.w	sl, [r4, #160]	; 0xa0
        ssl->out_msglen += explicit_ivlen;
 8024960:	4457      	add	r7, sl
 8024962:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 8024966:	9701      	str	r7, [sp, #4]
 8024968:	4b2e      	ldr	r3, [pc, #184]	; (8024a24 <mbedtls_ssl_write_record+0x2a0>)
 802496a:	9300      	str	r3, [sp, #0]
 802496c:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8024970:	464a      	mov	r2, r9
 8024972:	2103      	movs	r1, #3
 8024974:	4620      	mov	r0, r4
 8024976:	f7f0 fecb 	bl	8015710 <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &transform->cipher_ctx_enc,
 802497a:	eb0b 090a 	add.w	r9, fp, sl
 802497e:	68ea      	ldr	r2, [r5, #12]
 8024980:	f8cd 8018 	str.w	r8, [sp, #24]
 8024984:	f8cd 9014 	str.w	r9, [sp, #20]
 8024988:	ab08      	add	r3, sp, #32
 802498a:	9304      	str	r3, [sp, #16]
 802498c:	f8cd b00c 	str.w	fp, [sp, #12]
 8024990:	f8cd a008 	str.w	sl, [sp, #8]
 8024994:	f8cd b004 	str.w	fp, [sp, #4]
 8024998:	230d      	movs	r3, #13
 802499a:	9300      	str	r3, [sp, #0]
 802499c:	ab0c      	add	r3, sp, #48	; 0x30
 802499e:	a909      	add	r1, sp, #36	; 0x24
 80249a0:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80249a4:	f7f0 fb0a 	bl	8014fbc <mbedtls_cipher_auth_encrypt>
 80249a8:	4605      	mov	r5, r0
 80249aa:	b9e0      	cbnz	r0, 80249e6 <mbedtls_ssl_write_record+0x262>
        if( olen != enc_msglen )
 80249ac:	9b08      	ldr	r3, [sp, #32]
 80249ae:	459a      	cmp	sl, r3
 80249b0:	d03c      	beq.n	8024a2c <mbedtls_ssl_write_record+0x2a8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80249b2:	4b16      	ldr	r3, [pc, #88]	; (8024a0c <mbedtls_ssl_write_record+0x288>)
 80249b4:	9300      	str	r3, [sp, #0]
 80249b6:	f240 6364 	movw	r3, #1636	; 0x664
 80249ba:	4a11      	ldr	r2, [pc, #68]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80249bc:	2101      	movs	r1, #1
 80249be:	4620      	mov	r0, r4
 80249c0:	f7f0 fea6 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80249c4:	4d12      	ldr	r5, [pc, #72]	; (8024a10 <mbedtls_ssl_write_record+0x28c>)
 80249c6:	e784      	b.n	80248d2 <mbedtls_ssl_write_record+0x14e>
            memcpy( iv, transform->iv_enc, transform->fixed_ivlen );
 80249c8:	69ab      	ldr	r3, [r5, #24]
 80249ca:	9309      	str	r3, [sp, #36]	; 0x24
            memcpy( iv + transform->fixed_ivlen, ssl->out_ctr, 8 );
 80249cc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80249d0:	aa0a      	add	r2, sp, #40	; 0x28
 80249d2:	6818      	ldr	r0, [r3, #0]
 80249d4:	6859      	ldr	r1, [r3, #4]
 80249d6:	c203      	stmia	r2!, {r0, r1}
            memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 80249d8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80249dc:	6819      	ldr	r1, [r3, #0]
 80249de:	685b      	ldr	r3, [r3, #4]
 80249e0:	6011      	str	r1, [r2, #0]
 80249e2:	6053      	str	r3, [r2, #4]
 80249e4:	e79a      	b.n	802491c <mbedtls_ssl_write_record+0x198>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 80249e6:	9001      	str	r0, [sp, #4]
 80249e8:	4b0f      	ldr	r3, [pc, #60]	; (8024a28 <mbedtls_ssl_write_record+0x2a4>)
 80249ea:	9300      	str	r3, [sp, #0]
 80249ec:	f240 635e 	movw	r3, #1630	; 0x65e
 80249f0:	4a03      	ldr	r2, [pc, #12]	; (8024a00 <mbedtls_ssl_write_record+0x27c>)
 80249f2:	2101      	movs	r1, #1
 80249f4:	4620      	mov	r0, r4
 80249f6:	f7f0 febd 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 80249fa:	e76a      	b.n	80248d2 <mbedtls_ssl_write_record+0x14e>
 80249fc:	080355b4 	.word	0x080355b4
 8024a00:	08035174 	.word	0x08035174
 8024a04:	080355c4 	.word	0x080355c4
 8024a08:	080355d4 	.word	0x080355d4
 8024a0c:	08034130 	.word	0x08034130
 8024a10:	ffff9400 	.word	0xffff9400
 8024a14:	080355f4 	.word	0x080355f4
 8024a18:	080356b8 	.word	0x080356b8
 8024a1c:	08035610 	.word	0x08035610
 8024a20:	08035624 	.word	0x08035624
 8024a24:	0803563c 	.word	0x0803563c
 8024a28:	08035678 	.word	0x08035678
        ssl->out_msglen += taglen;
 8024a2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8024a30:	4443      	add	r3, r8
 8024a32:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 8024a36:	4d4b      	ldr	r5, [pc, #300]	; (8024b64 <mbedtls_ssl_write_record+0x3e0>)
 8024a38:	f8cd 8008 	str.w	r8, [sp, #8]
 8024a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8024a40:	4b49      	ldr	r3, [pc, #292]	; (8024b68 <mbedtls_ssl_write_record+0x3e4>)
 8024a42:	9300      	str	r3, [sp, #0]
 8024a44:	f240 636b 	movw	r3, #1643	; 0x66b
 8024a48:	462a      	mov	r2, r5
 8024a4a:	2104      	movs	r1, #4
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	f7f0 fec5 	bl	80157dc <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 8024a52:	4b46      	ldr	r3, [pc, #280]	; (8024b6c <mbedtls_ssl_write_record+0x3e8>)
 8024a54:	9300      	str	r3, [sp, #0]
 8024a56:	f240 63f5 	movw	r3, #1781	; 0x6f5
 8024a5a:	462a      	mov	r2, r5
 8024a5c:	2102      	movs	r1, #2
 8024a5e:	4620      	mov	r0, r4
 8024a60:	f7f0 fe56 	bl	8015710 <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 8024a64:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8024a68:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8024a6c:	0a2a      	lsrs	r2, r5, #8
 8024a6e:	701a      	strb	r2, [r3, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 8024a70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8024a74:	705d      	strb	r5, [r3, #1]
        protected_record_size = len + mbedtls_ssl_hdr_len( ssl );
 8024a76:	1d6f      	adds	r7, r5, #5
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 8024a78:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8024a7c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8024b64 <mbedtls_ssl_write_record+0x3e0>
 8024a80:	9504      	str	r5, [sp, #16]
 8024a82:	789a      	ldrb	r2, [r3, #2]
 8024a84:	9203      	str	r2, [sp, #12]
 8024a86:	785a      	ldrb	r2, [r3, #1]
 8024a88:	9202      	str	r2, [sp, #8]
 8024a8a:	781b      	ldrb	r3, [r3, #0]
 8024a8c:	9301      	str	r3, [sp, #4]
 8024a8e:	4b38      	ldr	r3, [pc, #224]	; (8024b70 <mbedtls_ssl_write_record+0x3ec>)
 8024a90:	9300      	str	r3, [sp, #0]
 8024a92:	f640 535c 	movw	r3, #3420	; 0xd5c
 8024a96:	4642      	mov	r2, r8
 8024a98:	2103      	movs	r1, #3
 8024a9a:	4620      	mov	r0, r4
 8024a9c:	f7f0 fe38 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 8024aa0:	9702      	str	r7, [sp, #8]
 8024aa2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8024aa6:	9301      	str	r3, [sp, #4]
 8024aa8:	4b32      	ldr	r3, [pc, #200]	; (8024b74 <mbedtls_ssl_write_record+0x3f0>)
 8024aaa:	9300      	str	r3, [sp, #0]
 8024aac:	f640 5361 	movw	r3, #3425	; 0xd61
 8024ab0:	4642      	mov	r2, r8
 8024ab2:	2104      	movs	r1, #4
 8024ab4:	4620      	mov	r0, r4
 8024ab6:	f7f0 fe91 	bl	80157dc <mbedtls_debug_print_buf>
        ssl->out_left += protected_record_size;
 8024aba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8024abe:	443b      	add	r3, r7
 8024ac0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        ssl->out_hdr  += protected_record_size;
 8024ac4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8024ac8:	443b      	add	r3, r7
 8024aca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl_update_out_pointers( ssl, ssl->transform_out );
 8024ace:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024ad0:	4620      	mov	r0, r4
 8024ad2:	f7fe ffb1 	bl	8023a38 <ssl_update_out_pointers>
    return( 0 );
 8024ad6:	f104 02af 	add.w	r2, r4, #175	; 0xaf
 8024ada:	f104 01a7 	add.w	r1, r4, #167	; 0xa7
            if( ++ssl->cur_out_ctr[i - 1] != 0 )
 8024ade:	7813      	ldrb	r3, [r2, #0]
 8024ae0:	3301      	adds	r3, #1
 8024ae2:	b2db      	uxtb	r3, r3
 8024ae4:	f802 3901 	strb.w	r3, [r2], #-1
 8024ae8:	b9e3      	cbnz	r3, 8024b24 <mbedtls_ssl_write_record+0x3a0>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8024aea:	428a      	cmp	r2, r1
 8024aec:	d1f7      	bne.n	8024ade <mbedtls_ssl_write_record+0x35a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 8024aee:	4b22      	ldr	r3, [pc, #136]	; (8024b78 <mbedtls_ssl_write_record+0x3f4>)
 8024af0:	9300      	str	r3, [sp, #0]
 8024af2:	f640 536f 	movw	r3, #3439	; 0xd6f
 8024af6:	4a1b      	ldr	r2, [pc, #108]	; (8024b64 <mbedtls_ssl_write_record+0x3e0>)
 8024af8:	2101      	movs	r1, #1
 8024afa:	4620      	mov	r0, r4
 8024afc:	f7f0 fe08 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8024b00:	4d1e      	ldr	r5, [pc, #120]	; (8024b7c <mbedtls_ssl_write_record+0x3f8>)
 8024b02:	e01b      	b.n	8024b3c <mbedtls_ssl_write_record+0x3b8>
        ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8024b04:	4620      	mov	r0, r4
 8024b06:	f7ff fdaf 	bl	8024668 <mbedtls_ssl_flush_output>
    if( ( flush == SSL_FORCE_FLUSH ) &&
 8024b0a:	4605      	mov	r5, r0
 8024b0c:	b160      	cbz	r0, 8024b28 <mbedtls_ssl_write_record+0x3a4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 8024b0e:	9001      	str	r0, [sp, #4]
 8024b10:	4b1b      	ldr	r3, [pc, #108]	; (8024b80 <mbedtls_ssl_write_record+0x3fc>)
 8024b12:	9300      	str	r3, [sp, #0]
 8024b14:	f44f 6359 	mov.w	r3, #3472	; 0xd90
 8024b18:	4a12      	ldr	r2, [pc, #72]	; (8024b64 <mbedtls_ssl_write_record+0x3e0>)
 8024b1a:	2101      	movs	r1, #1
 8024b1c:	4620      	mov	r0, r4
 8024b1e:	f7f0 fe29 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8024b22:	e00b      	b.n	8024b3c <mbedtls_ssl_write_record+0x3b8>
    if( ( flush == SSL_FORCE_FLUSH ) &&
 8024b24:	2e01      	cmp	r6, #1
 8024b26:	d0ed      	beq.n	8024b04 <mbedtls_ssl_write_record+0x380>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 8024b28:	4b16      	ldr	r3, [pc, #88]	; (8024b84 <mbedtls_ssl_write_record+0x400>)
 8024b2a:	9300      	str	r3, [sp, #0]
 8024b2c:	f640 5394 	movw	r3, #3476	; 0xd94
 8024b30:	4a0c      	ldr	r2, [pc, #48]	; (8024b64 <mbedtls_ssl_write_record+0x3e0>)
 8024b32:	2102      	movs	r1, #2
 8024b34:	4620      	mov	r0, r4
 8024b36:	f7f0 fdeb 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 8024b3a:	2500      	movs	r5, #0
}
 8024b3c:	4628      	mov	r0, r5
 8024b3e:	b011      	add	sp, #68	; 0x44
 8024b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 8024b44:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8024b48:	9302      	str	r3, [sp, #8]
 8024b4a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024b4e:	9301      	str	r3, [sp, #4]
 8024b50:	4b0d      	ldr	r3, [pc, #52]	; (8024b88 <mbedtls_ssl_write_record+0x404>)
 8024b52:	9300      	str	r3, [sp, #0]
 8024b54:	f240 53af 	movw	r3, #1455	; 0x5af
 8024b58:	4a02      	ldr	r2, [pc, #8]	; (8024b64 <mbedtls_ssl_write_record+0x3e0>)
 8024b5a:	2104      	movs	r1, #4
 8024b5c:	4620      	mov	r0, r4
 8024b5e:	f7f0 fe3d 	bl	80157dc <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_GCM ||
 8024b62:	e663      	b.n	802482c <mbedtls_ssl_write_record+0xa8>
 8024b64:	08035174 	.word	0x08035174
 8024b68:	08035694 	.word	0x08035694
 8024b6c:	080356a8 	.word	0x080356a8
 8024b70:	080356c8 	.word	0x080356c8
 8024b74:	08035704 	.word	0x08035704
 8024b78:	08035750 	.word	0x08035750
 8024b7c:	ffff9480 	.word	0xffff9480
 8024b80:	08035724 	.word	0x08035724
 8024b84:	08035740 	.word	0x08035740
 8024b88:	080355d4 	.word	0x080355d4

08024b8c <mbedtls_ssl_write_handshake_msg>:
{
 8024b8c:	b570      	push	{r4, r5, r6, lr}
 8024b8e:	b084      	sub	sp, #16
 8024b90:	4604      	mov	r4, r0
    const size_t hs_len = ssl->out_msglen - 4;
 8024b92:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    const unsigned char hs_type = ssl->out_msg[0];
 8024b96:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8024b9a:	781e      	ldrb	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write handshake message" ) );
 8024b9c:	4b43      	ldr	r3, [pc, #268]	; (8024cac <mbedtls_ssl_write_handshake_msg+0x120>)
 8024b9e:	9300      	str	r3, [sp, #0]
 8024ba0:	f44f 6347 	mov.w	r3, #3184	; 0xc70
 8024ba4:	4a42      	ldr	r2, [pc, #264]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024ba6:	2102      	movs	r1, #2
 8024ba8:	f7f0 fdb2 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->out_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE          &&
 8024bac:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8024bb0:	2b16      	cmp	r3, #22
 8024bb2:	d029      	beq.n	8024c08 <mbedtls_ssl_write_handshake_msg+0x7c>
 8024bb4:	2b14      	cmp	r3, #20
 8024bb6:	d11c      	bne.n	8024bf2 <mbedtls_ssl_write_handshake_msg+0x66>
            hs_type          == MBEDTLS_SSL_HS_HELLO_REQUEST ) &&
 8024bb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8024bba:	2a00      	cmp	r2, #0
 8024bbc:	d038      	beq.n	8024c30 <mbedtls_ssl_write_handshake_msg+0xa4>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 8024bbe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8024bc2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024bc6:	d83e      	bhi.n	8024c46 <mbedtls_ssl_write_handshake_msg+0xba>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8024bc8:	2b16      	cmp	r3, #22
 8024bca:	d04b      	beq.n	8024c64 <mbedtls_ssl_write_handshake_msg+0xd8>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 8024bcc:	2101      	movs	r1, #1
 8024bce:	4620      	mov	r0, r4
 8024bd0:	f7ff fdd8 	bl	8024784 <mbedtls_ssl_write_record>
 8024bd4:	4605      	mov	r5, r0
 8024bd6:	2800      	cmp	r0, #0
 8024bd8:	d15c      	bne.n	8024c94 <mbedtls_ssl_write_handshake_msg+0x108>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write handshake message" ) );
 8024bda:	4b36      	ldr	r3, [pc, #216]	; (8024cb4 <mbedtls_ssl_write_handshake_msg+0x128>)
 8024bdc:	9300      	str	r3, [sp, #0]
 8024bde:	f640 43f8 	movw	r3, #3320	; 0xcf8
 8024be2:	4a33      	ldr	r2, [pc, #204]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024be4:	2102      	movs	r1, #2
 8024be6:	4620      	mov	r0, r4
 8024be8:	f7f0 fd92 	bl	8015710 <mbedtls_debug_print_msg>
}
 8024bec:	4628      	mov	r0, r5
 8024bee:	b004      	add	sp, #16
 8024bf0:	bd70      	pop	{r4, r5, r6, pc}
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8024bf2:	4b31      	ldr	r3, [pc, #196]	; (8024cb8 <mbedtls_ssl_write_handshake_msg+0x12c>)
 8024bf4:	9300      	str	r3, [sp, #0]
 8024bf6:	f640 437f 	movw	r3, #3199	; 0xc7f
 8024bfa:	4a2d      	ldr	r2, [pc, #180]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024bfc:	2101      	movs	r1, #1
 8024bfe:	4620      	mov	r0, r4
 8024c00:	f7f0 fd86 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024c04:	4d2d      	ldr	r5, [pc, #180]	; (8024cbc <mbedtls_ssl_write_handshake_msg+0x130>)
 8024c06:	e7f1      	b.n	8024bec <mbedtls_ssl_write_handshake_msg+0x60>
    if( ! ( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 8024c08:	2e00      	cmp	r6, #0
 8024c0a:	d1d5      	bne.n	8024bb8 <mbedtls_ssl_write_handshake_msg+0x2c>
    if( ssl->out_msglen > MBEDTLS_SSL_OUT_CONTENT_LEN )
 8024c0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8024c10:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8024c14:	d817      	bhi.n	8024c46 <mbedtls_ssl_write_handshake_msg+0xba>
    const size_t hs_len = ssl->out_msglen - 4;
 8024c16:	3d04      	subs	r5, #4
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 8024c18:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c1c:	0c2a      	lsrs	r2, r5, #16
 8024c1e:	705a      	strb	r2, [r3, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 8024c20:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c24:	0a2a      	lsrs	r2, r5, #8
 8024c26:	709a      	strb	r2, [r3, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 8024c28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c2c:	70dd      	strb	r5, [r3, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8024c2e:	e7cd      	b.n	8024bcc <mbedtls_ssl_write_handshake_msg+0x40>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8024c30:	4b21      	ldr	r3, [pc, #132]	; (8024cb8 <mbedtls_ssl_write_handshake_msg+0x12c>)
 8024c32:	9300      	str	r3, [sp, #0]
 8024c34:	f640 438a 	movw	r3, #3210	; 0xc8a
 8024c38:	4a1d      	ldr	r2, [pc, #116]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024c3a:	2101      	movs	r1, #1
 8024c3c:	4620      	mov	r0, r4
 8024c3e:	f7f0 fd67 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024c42:	4d1e      	ldr	r5, [pc, #120]	; (8024cbc <mbedtls_ssl_write_handshake_msg+0x130>)
 8024c44:	e7d2      	b.n	8024bec <mbedtls_ssl_write_handshake_msg+0x60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record too large: "
 8024c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8024c4a:	9302      	str	r3, [sp, #8]
 8024c4c:	9201      	str	r2, [sp, #4]
 8024c4e:	4b1c      	ldr	r3, [pc, #112]	; (8024cc0 <mbedtls_ssl_write_handshake_msg+0x134>)
 8024c50:	9300      	str	r3, [sp, #0]
 8024c52:	f640 43a2 	movw	r3, #3234	; 0xca2
 8024c56:	4a16      	ldr	r2, [pc, #88]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024c58:	2101      	movs	r1, #1
 8024c5a:	4620      	mov	r0, r4
 8024c5c:	f7f0 fd58 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024c60:	4d16      	ldr	r5, [pc, #88]	; (8024cbc <mbedtls_ssl_write_handshake_msg+0x130>)
 8024c62:	e7c3      	b.n	8024bec <mbedtls_ssl_write_handshake_msg+0x60>
    const size_t hs_len = ssl->out_msglen - 4;
 8024c64:	3d04      	subs	r5, #4
        ssl->out_msg[1] = (unsigned char)( hs_len >> 16 );
 8024c66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c6a:	0c2a      	lsrs	r2, r5, #16
 8024c6c:	705a      	strb	r2, [r3, #1]
        ssl->out_msg[2] = (unsigned char)( hs_len >>  8 );
 8024c6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c72:	0a2a      	lsrs	r2, r5, #8
 8024c74:	709a      	strb	r2, [r3, #2]
        ssl->out_msg[3] = (unsigned char)( hs_len       );
 8024c76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024c7a:	70dd      	strb	r5, [r3, #3]
        if( hs_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8024c7c:	2e00      	cmp	r6, #0
 8024c7e:	d0a5      	beq.n	8024bcc <mbedtls_ssl_write_handshake_msg+0x40>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, ssl->out_msglen );
 8024c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024c82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8024c86:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8024c8a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8024c8e:	4620      	mov	r0, r4
 8024c90:	4798      	blx	r3
 8024c92:	e79b      	b.n	8024bcc <mbedtls_ssl_write_handshake_msg+0x40>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_write_record", ret );
 8024c94:	9001      	str	r0, [sp, #4]
 8024c96:	4b0b      	ldr	r3, [pc, #44]	; (8024cc4 <mbedtls_ssl_write_handshake_msg+0x138>)
 8024c98:	9300      	str	r3, [sp, #0]
 8024c9a:	f640 43f3 	movw	r3, #3315	; 0xcf3
 8024c9e:	4a04      	ldr	r2, [pc, #16]	; (8024cb0 <mbedtls_ssl_write_handshake_msg+0x124>)
 8024ca0:	2101      	movs	r1, #1
 8024ca2:	4620      	mov	r0, r4
 8024ca4:	f7f0 fd66 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8024ca8:	e7a0      	b.n	8024bec <mbedtls_ssl_write_handshake_msg+0x60>
 8024caa:	bf00      	nop
 8024cac:	08035774 	.word	0x08035774
 8024cb0:	08035174 	.word	0x08035174
 8024cb4:	080357b8 	.word	0x080357b8
 8024cb8:	08034130 	.word	0x08034130
 8024cbc:	ffff9400 	.word	0xffff9400
 8024cc0:	08035790 	.word	0x08035790
 8024cc4:	08035984 	.word	0x08035984

08024cc8 <mbedtls_ssl_prepare_handshake_record>:
{
 8024cc8:	b510      	push	{r4, lr}
 8024cca:	b084      	sub	sp, #16
 8024ccc:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8024cce:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8024cd0:	2903      	cmp	r1, #3
 8024cd2:	d91e      	bls.n	8024d12 <mbedtls_ssl_prepare_handshake_record+0x4a>
    return( ( ssl->in_msg[1] << 16 ) |
 8024cd4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8024cd6:	7850      	ldrb	r0, [r2, #1]
            ( ssl->in_msg[2] << 8  ) |
 8024cd8:	7893      	ldrb	r3, [r2, #2]
 8024cda:	021b      	lsls	r3, r3, #8
    return( ( ssl->in_msg[1] << 16 ) |
 8024cdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
              ssl->in_msg[3] );
 8024ce0:	78d0      	ldrb	r0, [r2, #3]
            ( ssl->in_msg[2] << 8  ) |
 8024ce2:	4303      	orrs	r3, r0
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + ssl_get_hs_total_len( ssl );
 8024ce4:	3304      	adds	r3, #4
 8024ce6:	67a3      	str	r3, [r4, #120]	; 0x78
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 8024ce8:	9303      	str	r3, [sp, #12]
 8024cea:	7813      	ldrb	r3, [r2, #0]
 8024cec:	9302      	str	r3, [sp, #8]
 8024cee:	9101      	str	r1, [sp, #4]
 8024cf0:	4b13      	ldr	r3, [pc, #76]	; (8024d40 <mbedtls_ssl_prepare_handshake_record+0x78>)
 8024cf2:	9300      	str	r3, [sp, #0]
 8024cf4:	f640 6328 	movw	r3, #3624	; 0xe28
 8024cf8:	4a12      	ldr	r2, [pc, #72]	; (8024d44 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 8024cfa:	2103      	movs	r1, #3
 8024cfc:	4620      	mov	r0, r4
 8024cfe:	f7f0 fd07 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 8024d02:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8024d04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8024d06:	429a      	cmp	r2, r3
    return( 0 );
 8024d08:	bf28      	it	cs
 8024d0a:	2000      	movcs	r0, #0
    if( ssl->in_msglen < ssl->in_hslen )
 8024d0c:	d30c      	bcc.n	8024d28 <mbedtls_ssl_prepare_handshake_record+0x60>
}
 8024d0e:	b004      	add	sp, #16
 8024d10:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 8024d12:	9101      	str	r1, [sp, #4]
 8024d14:	4b0c      	ldr	r3, [pc, #48]	; (8024d48 <mbedtls_ssl_prepare_handshake_record+0x80>)
 8024d16:	9300      	str	r3, [sp, #0]
 8024d18:	f640 6321 	movw	r3, #3617	; 0xe21
 8024d1c:	4a09      	ldr	r2, [pc, #36]	; (8024d44 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 8024d1e:	2101      	movs	r1, #1
 8024d20:	f7f0 fcf6 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8024d24:	4809      	ldr	r0, [pc, #36]	; (8024d4c <mbedtls_ssl_prepare_handshake_record+0x84>)
 8024d26:	e7f2      	b.n	8024d0e <mbedtls_ssl_prepare_handshake_record+0x46>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 8024d28:	4b09      	ldr	r3, [pc, #36]	; (8024d50 <mbedtls_ssl_prepare_handshake_record+0x88>)
 8024d2a:	9300      	str	r3, [sp, #0]
 8024d2c:	f640 6372 	movw	r3, #3698	; 0xe72
 8024d30:	4a04      	ldr	r2, [pc, #16]	; (8024d44 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 8024d32:	2101      	movs	r1, #1
 8024d34:	4620      	mov	r0, r4
 8024d36:	f7f0 fceb 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8024d3a:	4806      	ldr	r0, [pc, #24]	; (8024d54 <mbedtls_ssl_prepare_handshake_record+0x8c>)
 8024d3c:	e7e7      	b.n	8024d0e <mbedtls_ssl_prepare_handshake_record+0x46>
 8024d3e:	bf00      	nop
 8024d40:	080357f4 	.word	0x080357f4
 8024d44:	08035174 	.word	0x08035174
 8024d48:	080357d4 	.word	0x080357d4
 8024d4c:	ffff8e00 	.word	0xffff8e00
 8024d50:	0803582c 	.word	0x0803582c
 8024d54:	ffff8f80 	.word	0xffff8f80

08024d58 <mbedtls_ssl_update_handshake_status>:
{
 8024d58:	b508      	push	{r3, lr}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 8024d5a:	6843      	ldr	r3, [r0, #4]
 8024d5c:	2b10      	cmp	r3, #16
 8024d5e:	d006      	beq.n	8024d6e <mbedtls_ssl_update_handshake_status+0x16>
    mbedtls_ssl_handshake_params * const hs = ssl->handshake;
 8024d60:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER && hs != NULL )
 8024d62:	b123      	cbz	r3, 8024d6e <mbedtls_ssl_update_handshake_status+0x16>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8024d64:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8024d68:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8024d6a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8024d6c:	4798      	blx	r3
}
 8024d6e:	bd08      	pop	{r3, pc}

08024d70 <mbedtls_ssl_handle_message_type>:
{
 8024d70:	b510      	push	{r4, lr}
 8024d72:	b084      	sub	sp, #16
 8024d74:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8024d76:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8024d78:	2b16      	cmp	r3, #22
 8024d7a:	d01d      	beq.n	8024db8 <mbedtls_ssl_handle_message_type+0x48>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 8024d7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8024d7e:	2b14      	cmp	r3, #20
 8024d80:	d01f      	beq.n	8024dc2 <mbedtls_ssl_handle_message_type+0x52>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8024d82:	2b15      	cmp	r3, #21
 8024d84:	d173      	bne.n	8024e6e <mbedtls_ssl_handle_message_type+0xfe>
        if( ssl->in_msglen != 2 )
 8024d86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8024d88:	2b02      	cmp	r3, #2
 8024d8a:	d13d      	bne.n	8024e08 <mbedtls_ssl_handle_message_type+0x98>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 8024d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024d8e:	785a      	ldrb	r2, [r3, #1]
 8024d90:	9202      	str	r2, [sp, #8]
 8024d92:	781b      	ldrb	r3, [r3, #0]
 8024d94:	9301      	str	r3, [sp, #4]
 8024d96:	4b38      	ldr	r3, [pc, #224]	; (8024e78 <mbedtls_ssl_handle_message_type+0x108>)
 8024d98:	9300      	str	r3, [sp, #0]
 8024d9a:	f241 4331 	movw	r3, #5169	; 0x1431
 8024d9e:	4a37      	ldr	r2, [pc, #220]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024da0:	2102      	movs	r1, #2
 8024da2:	4620      	mov	r0, r4
 8024da4:	f7f0 fcb4 	bl	8015710 <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8024da8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024daa:	7813      	ldrb	r3, [r2, #0]
 8024dac:	2b02      	cmp	r3, #2
 8024dae:	d037      	beq.n	8024e20 <mbedtls_ssl_handle_message_type+0xb0>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8024db0:	2b01      	cmp	r3, #1
 8024db2:	d042      	beq.n	8024e3a <mbedtls_ssl_handle_message_type+0xca>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8024db4:	4832      	ldr	r0, [pc, #200]	; (8024e80 <mbedtls_ssl_handle_message_type+0x110>)
 8024db6:	e00d      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8024db8:	f7ff ff86 	bl	8024cc8 <mbedtls_ssl_prepare_handshake_record>
 8024dbc:	2800      	cmp	r0, #0
 8024dbe:	d0dd      	beq.n	8024d7c <mbedtls_ssl_handle_message_type+0xc>
 8024dc0:	e008      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
        if( ssl->in_msglen != 1 )
 8024dc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8024dc4:	2b01      	cmp	r3, #1
 8024dc6:	d107      	bne.n	8024dd8 <mbedtls_ssl_handle_message_type+0x68>
        if( ssl->in_msg[0] != 1 )
 8024dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024dca:	781b      	ldrb	r3, [r3, #0]
 8024dcc:	2b01      	cmp	r3, #1
    return( 0 );
 8024dce:	bf08      	it	eq
 8024dd0:	2000      	moveq	r0, #0
        if( ssl->in_msg[0] != 1 )
 8024dd2:	d10d      	bne.n	8024df0 <mbedtls_ssl_handle_message_type+0x80>
}
 8024dd4:	b004      	add	sp, #16
 8024dd6:	bd10      	pop	{r4, pc}
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, len: %d",
 8024dd8:	9301      	str	r3, [sp, #4]
 8024dda:	4b2a      	ldr	r3, [pc, #168]	; (8024e84 <mbedtls_ssl_handle_message_type+0x114>)
 8024ddc:	9300      	str	r3, [sp, #0]
 8024dde:	f241 4308 	movw	r3, #5128	; 0x1408
 8024de2:	4a26      	ldr	r2, [pc, #152]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024de4:	2101      	movs	r1, #1
 8024de6:	4620      	mov	r0, r4
 8024de8:	f7f0 fc92 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8024dec:	4826      	ldr	r0, [pc, #152]	; (8024e88 <mbedtls_ssl_handle_message_type+0x118>)
 8024dee:	e7f1      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid CCS message, content: %02x",
 8024df0:	9301      	str	r3, [sp, #4]
 8024df2:	4b26      	ldr	r3, [pc, #152]	; (8024e8c <mbedtls_ssl_handle_message_type+0x11c>)
 8024df4:	9300      	str	r3, [sp, #0]
 8024df6:	f241 430f 	movw	r3, #5135	; 0x140f
 8024dfa:	4a20      	ldr	r2, [pc, #128]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024dfc:	2101      	movs	r1, #1
 8024dfe:	4620      	mov	r0, r4
 8024e00:	f7f0 fc86 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8024e04:	4820      	ldr	r0, [pc, #128]	; (8024e88 <mbedtls_ssl_handle_message_type+0x118>)
 8024e06:	e7e5      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
 8024e08:	9301      	str	r3, [sp, #4]
 8024e0a:	4b21      	ldr	r3, [pc, #132]	; (8024e90 <mbedtls_ssl_handle_message_type+0x120>)
 8024e0c:	9300      	str	r3, [sp, #0]
 8024e0e:	f241 432c 	movw	r3, #5164	; 0x142c
 8024e12:	4a1a      	ldr	r2, [pc, #104]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024e14:	2101      	movs	r1, #1
 8024e16:	4620      	mov	r0, r4
 8024e18:	f7f0 fc7a 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8024e1c:	481a      	ldr	r0, [pc, #104]	; (8024e88 <mbedtls_ssl_handle_message_type+0x118>)
 8024e1e:	e7d9      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 8024e20:	7853      	ldrb	r3, [r2, #1]
 8024e22:	9301      	str	r3, [sp, #4]
 8024e24:	4b1b      	ldr	r3, [pc, #108]	; (8024e94 <mbedtls_ssl_handle_message_type+0x124>)
 8024e26:	9300      	str	r3, [sp, #0]
 8024e28:	f241 4339 	movw	r3, #5177	; 0x1439
 8024e2c:	4a13      	ldr	r2, [pc, #76]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024e2e:	2101      	movs	r1, #1
 8024e30:	4620      	mov	r0, r4
 8024e32:	f7f0 fc6d 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8024e36:	4818      	ldr	r0, [pc, #96]	; (8024e98 <mbedtls_ssl_handle_message_type+0x128>)
 8024e38:	e7cc      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8024e3a:	7853      	ldrb	r3, [r2, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8024e3c:	b163      	cbz	r3, 8024e58 <mbedtls_ssl_handle_message_type+0xe8>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8024e3e:	2b64      	cmp	r3, #100	; 0x64
 8024e40:	d117      	bne.n	8024e72 <mbedtls_ssl_handle_message_type+0x102>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no renegotiation alert" ) );
 8024e42:	4b16      	ldr	r3, [pc, #88]	; (8024e9c <mbedtls_ssl_handle_message_type+0x12c>)
 8024e44:	9300      	str	r3, [sp, #0]
 8024e46:	f241 4349 	movw	r3, #5193	; 0x1449
 8024e4a:	4a0c      	ldr	r2, [pc, #48]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024e4c:	2102      	movs	r1, #2
 8024e4e:	4620      	mov	r0, r4
 8024e50:	f7f0 fc5e 	bl	8015710 <mbedtls_debug_print_msg>
            return( 0 );
 8024e54:	2000      	movs	r0, #0
 8024e56:	e7bd      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 8024e58:	4b11      	ldr	r3, [pc, #68]	; (8024ea0 <mbedtls_ssl_handle_message_type+0x130>)
 8024e5a:	9300      	str	r3, [sp, #0]
 8024e5c:	f241 4341 	movw	r3, #5185	; 0x1441
 8024e60:	4a06      	ldr	r2, [pc, #24]	; (8024e7c <mbedtls_ssl_handle_message_type+0x10c>)
 8024e62:	2102      	movs	r1, #2
 8024e64:	4620      	mov	r0, r4
 8024e66:	f7f0 fc53 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8024e6a:	480e      	ldr	r0, [pc, #56]	; (8024ea4 <mbedtls_ssl_handle_message_type+0x134>)
 8024e6c:	e7b2      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
    return( 0 );
 8024e6e:	2000      	movs	r0, #0
 8024e70:	e7b0      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8024e72:	4803      	ldr	r0, [pc, #12]	; (8024e80 <mbedtls_ssl_handle_message_type+0x110>)
 8024e74:	e7ae      	b.n	8024dd4 <mbedtls_ssl_handle_message_type+0x64>
 8024e76:	bf00      	nop
 8024e78:	080358bc 	.word	0x080358bc
 8024e7c:	08035174 	.word	0x08035174
 8024e80:	ffff9980 	.word	0xffff9980
 8024e84:	08035858 	.word	0x08035858
 8024e88:	ffff8e00 	.word	0xffff8e00
 8024e8c:	08035878 	.word	0x08035878
 8024e90:	0803589c 	.word	0x0803589c
 8024e94:	080358e0 	.word	0x080358e0
 8024e98:	ffff8880 	.word	0xffff8880
 8024e9c:	08035920 	.word	0x08035920
 8024ea0:	08035904 	.word	0x08035904
 8024ea4:	ffff8780 	.word	0xffff8780

08024ea8 <mbedtls_ssl_send_alert_message>:
{
 8024ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024eaa:	b085      	sub	sp, #20
    if( ssl == NULL || ssl->conf == NULL )
 8024eac:	2800      	cmp	r0, #0
 8024eae:	d042      	beq.n	8024f36 <mbedtls_ssl_send_alert_message+0x8e>
 8024eb0:	460f      	mov	r7, r1
 8024eb2:	4615      	mov	r5, r2
 8024eb4:	4604      	mov	r4, r0
 8024eb6:	6803      	ldr	r3, [r0, #0]
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	d03e      	beq.n	8024f3a <mbedtls_ssl_send_alert_message+0x92>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 8024ebc:	4e20      	ldr	r6, [pc, #128]	; (8024f40 <mbedtls_ssl_send_alert_message+0x98>)
 8024ebe:	4b21      	ldr	r3, [pc, #132]	; (8024f44 <mbedtls_ssl_send_alert_message+0x9c>)
 8024ec0:	9300      	str	r3, [sp, #0]
 8024ec2:	f241 4382 	movw	r3, #5250	; 0x1482
 8024ec6:	4632      	mov	r2, r6
 8024ec8:	2102      	movs	r1, #2
 8024eca:	f7f0 fc21 	bl	8015710 <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 8024ece:	9502      	str	r5, [sp, #8]
 8024ed0:	9701      	str	r7, [sp, #4]
 8024ed2:	4b1d      	ldr	r3, [pc, #116]	; (8024f48 <mbedtls_ssl_send_alert_message+0xa0>)
 8024ed4:	9300      	str	r3, [sp, #0]
 8024ed6:	f241 4383 	movw	r3, #5251	; 0x1483
 8024eda:	4632      	mov	r2, r6
 8024edc:	2103      	movs	r1, #3
 8024ede:	4620      	mov	r0, r4
 8024ee0:	f7f0 fc16 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8024ee4:	2315      	movs	r3, #21
 8024ee6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msglen = 2;
 8024eea:	2302      	movs	r3, #2
 8024eec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8024ef0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024ef4:	701f      	strb	r7, [r3, #0]
    ssl->out_msg[1] = message;
 8024ef6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8024efa:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 8024efc:	2101      	movs	r1, #1
 8024efe:	4620      	mov	r0, r4
 8024f00:	f7ff fc40 	bl	8024784 <mbedtls_ssl_write_record>
 8024f04:	4605      	mov	r5, r0
 8024f06:	b958      	cbnz	r0, 8024f20 <mbedtls_ssl_send_alert_message+0x78>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 8024f08:	4b10      	ldr	r3, [pc, #64]	; (8024f4c <mbedtls_ssl_send_alert_message+0xa4>)
 8024f0a:	9300      	str	r3, [sp, #0]
 8024f0c:	f241 438f 	movw	r3, #5263	; 0x148f
 8024f10:	4a0b      	ldr	r2, [pc, #44]	; (8024f40 <mbedtls_ssl_send_alert_message+0x98>)
 8024f12:	2102      	movs	r1, #2
 8024f14:	4620      	mov	r0, r4
 8024f16:	f7f0 fbfb 	bl	8015710 <mbedtls_debug_print_msg>
}
 8024f1a:	4628      	mov	r0, r5
 8024f1c:	b005      	add	sp, #20
 8024f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 8024f20:	9001      	str	r0, [sp, #4]
 8024f22:	4b0b      	ldr	r3, [pc, #44]	; (8024f50 <mbedtls_ssl_send_alert_message+0xa8>)
 8024f24:	9300      	str	r3, [sp, #0]
 8024f26:	f241 438c 	movw	r3, #5260	; 0x148c
 8024f2a:	4632      	mov	r2, r6
 8024f2c:	2101      	movs	r1, #1
 8024f2e:	4620      	mov	r0, r4
 8024f30:	f7f0 fc20 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8024f34:	e7f1      	b.n	8024f1a <mbedtls_ssl_send_alert_message+0x72>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8024f36:	4d07      	ldr	r5, [pc, #28]	; (8024f54 <mbedtls_ssl_send_alert_message+0xac>)
 8024f38:	e7ef      	b.n	8024f1a <mbedtls_ssl_send_alert_message+0x72>
 8024f3a:	4d06      	ldr	r5, [pc, #24]	; (8024f54 <mbedtls_ssl_send_alert_message+0xac>)
 8024f3c:	e7ed      	b.n	8024f1a <mbedtls_ssl_send_alert_message+0x72>
 8024f3e:	bf00      	nop
 8024f40:	08035174 	.word	0x08035174
 8024f44:	08035944 	.word	0x08035944
 8024f48:	0803595c 	.word	0x0803595c
 8024f4c:	08035998 	.word	0x08035998
 8024f50:	0803597c 	.word	0x0803597c
 8024f54:	ffff8f00 	.word	0xffff8f00

08024f58 <mbedtls_ssl_read_record>:
{
 8024f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f5c:	b093      	sub	sp, #76	; 0x4c
 8024f5e:	4604      	mov	r4, r0
 8024f60:	9108      	str	r1, [sp, #32]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 8024f62:	4bb4      	ldr	r3, [pc, #720]	; (8025234 <mbedtls_ssl_read_record+0x2dc>)
 8024f64:	9300      	str	r3, [sp, #0]
 8024f66:	f241 03d7 	movw	r3, #4311	; 0x10d7
 8024f6a:	4ab3      	ldr	r2, [pc, #716]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 8024f6c:	2102      	movs	r1, #2
 8024f6e:	f7f0 fbcf 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 8024f72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	f040 82fc 	bne.w	8025574 <mbedtls_ssl_read_record+0x61c>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 8024f7c:	4dae      	ldr	r5, [pc, #696]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 8024f7e:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 802526c <mbedtls_ssl_read_record+0x314>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 8024f82:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8025270 <mbedtls_ssl_read_record+0x318>
 8024f86:	e02c      	b.n	8024fe2 <mbedtls_ssl_read_record+0x8a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8024f88:	4bac      	ldr	r3, [pc, #688]	; (802523c <mbedtls_ssl_read_record+0x2e4>)
 8024f8a:	9300      	str	r3, [sp, #0]
 8024f8c:	f241 239b 	movw	r3, #4763	; 0x129b
 8024f90:	4aa9      	ldr	r2, [pc, #676]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 8024f92:	2101      	movs	r1, #1
 8024f94:	4620      	mov	r0, r4
 8024f96:	f7f0 fbbb 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8024f9a:	4fa9      	ldr	r7, [pc, #676]	; (8025240 <mbedtls_ssl_read_record+0x2e8>)
 8024f9c:	e300      	b.n	80255a0 <mbedtls_ssl_read_record+0x648>
            ssl->in_msglen -= ssl->in_hslen;
 8024f9e:	1a52      	subs	r2, r2, r1
 8024fa0:	6722      	str	r2, [r4, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8024fa2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8024fa4:	4401      	add	r1, r0
 8024fa6:	f005 fad6 	bl	802a556 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 8024faa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8024fac:	9302      	str	r3, [sp, #8]
 8024fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024fb0:	9301      	str	r3, [sp, #4]
 8024fb2:	4ba4      	ldr	r3, [pc, #656]	; (8025244 <mbedtls_ssl_read_record+0x2ec>)
 8024fb4:	9300      	str	r3, [sp, #0]
 8024fb6:	f241 23ba 	movw	r3, #4794	; 0x12ba
 8024fba:	462a      	mov	r2, r5
 8024fbc:	2104      	movs	r1, #4
 8024fbe:	4620      	mov	r0, r4
 8024fc0:	f7f0 fc0c 	bl	80157dc <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 8024fc4:	2300      	movs	r3, #0
 8024fc6:	67a3      	str	r3, [r4, #120]	; 0x78
            if( ssl_record_is_in_progress( ssl ) == 0 )
 8024fc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8024fca:	b1cb      	cbz	r3, 8025000 <mbedtls_ssl_read_record+0xa8>
            ret = mbedtls_ssl_handle_message_type( ssl );
 8024fcc:	4620      	mov	r0, r4
 8024fce:	f7ff fecf 	bl	8024d70 <mbedtls_ssl_handle_message_type>
 8024fd2:	4607      	mov	r7, r0
                 MBEDTLS_ERR_SSL_CONTINUE_PROCESSING == ret );
 8024fd4:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 8024fd8:	d003      	beq.n	8024fe2 <mbedtls_ssl_read_record+0x8a>
        } while( MBEDTLS_ERR_SSL_NON_FATAL           == ret  ||
 8024fda:	f510 4fcb 	cmn.w	r0, #25984	; 0x6580
 8024fde:	f040 828d 	bne.w	80254fc <mbedtls_ssl_read_record+0x5a4>
    if( ssl->in_hslen != 0 )
 8024fe2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8024fe4:	b141      	cbz	r1, 8024ff8 <mbedtls_ssl_read_record+0xa0>
        if( ssl->in_offt != NULL )
 8024fe6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8024fe8:	2b00      	cmp	r3, #0
 8024fea:	d1cd      	bne.n	8024f88 <mbedtls_ssl_read_record+0x30>
        if( ssl->in_hslen < ssl->in_msglen )
 8024fec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8024fee:	4291      	cmp	r1, r2
 8024ff0:	d3d5      	bcc.n	8024f9e <mbedtls_ssl_read_record+0x46>
            ssl->in_msglen = 0;
 8024ff2:	2300      	movs	r3, #0
 8024ff4:	6723      	str	r3, [r4, #112]	; 0x70
 8024ff6:	e7e5      	b.n	8024fc4 <mbedtls_ssl_read_record+0x6c>
    else if( ssl->in_offt != NULL )
 8024ff8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d1e4      	bne.n	8024fc8 <mbedtls_ssl_read_record+0x70>
        ssl->in_msglen = 0;
 8024ffe:	6723      	str	r3, [r4, #112]	; 0x70
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8025000:	2105      	movs	r1, #5
 8025002:	4620      	mov	r0, r4
 8025004:	f7ff fa54 	bl	80244b0 <mbedtls_ssl_fetch_input>
 8025008:	4607      	mov	r7, r0
 802500a:	2800      	cmp	r0, #0
 802500c:	f040 8098 	bne.w	8025140 <mbedtls_ssl_read_record+0x1e8>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 8025010:	2305      	movs	r3, #5
 8025012:	9302      	str	r3, [sp, #8]
 8025014:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025016:	9301      	str	r3, [sp, #4]
 8025018:	f8cd 9000 	str.w	r9, [sp]
 802501c:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8025020:	462a      	mov	r2, r5
 8025022:	2104      	movs	r1, #4
 8025024:	4620      	mov	r0, r4
 8025026:	f7f0 fbd9 	bl	80157dc <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 802502a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802502c:	7811      	ldrb	r1, [r2, #0]
 802502e:	66e1      	str	r1, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8025030:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8025032:	7806      	ldrb	r6, [r0, #0]
 8025034:	7843      	ldrb	r3, [r0, #1]
 8025036:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 802503a:	6723      	str	r3, [r4, #112]	; 0x70
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 802503c:	7856      	ldrb	r6, [r2, #1]
        *minor = ver[1];
 802503e:	7897      	ldrb	r7, [r2, #2]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 8025040:	9304      	str	r3, [sp, #16]
        *minor = ver[1];
 8025042:	9703      	str	r7, [sp, #12]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 8025044:	9602      	str	r6, [sp, #8]
 8025046:	9101      	str	r1, [sp, #4]
 8025048:	f8cd 8000 	str.w	r8, [sp]
 802504c:	f640 73d5 	movw	r3, #4053	; 0xfd5
 8025050:	462a      	mov	r2, r5
 8025052:	2103      	movs	r1, #3
 8025054:	4620      	mov	r0, r4
 8025056:	f7f0 fb5b 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 802505a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802505c:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 802505e:	2b03      	cmp	r3, #3
 8025060:	d87d      	bhi.n	802515e <mbedtls_ssl_read_record+0x206>
    if( major_ver != ssl->major_ver )
 8025062:	68a3      	ldr	r3, [r4, #8]
 8025064:	42b3      	cmp	r3, r6
 8025066:	f040 8089 	bne.w	802517c <mbedtls_ssl_read_record+0x224>
    if( minor_ver > ssl->conf->max_minor_ver )
 802506a:	6823      	ldr	r3, [r4, #0]
 802506c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8025070:	42bb      	cmp	r3, r7
 8025072:	f0c0 8098 	bcc.w	80251a6 <mbedtls_ssl_read_record+0x24e>
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
 8025076:	6f21      	ldr	r1, [r4, #112]	; 0x70
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 8025078:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802507a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 802507c:	1a9b      	subs	r3, r3, r2
 802507e:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8025082:	332d      	adds	r3, #45	; 0x2d
    if( ssl->in_msglen > MBEDTLS_SSL_IN_BUFFER_LEN
 8025084:	4299      	cmp	r1, r3
 8025086:	f200 8098 	bhi.w	80251ba <mbedtls_ssl_read_record+0x262>
    if( ssl->transform_in == NULL )
 802508a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802508c:	2b00      	cmp	r3, #0
 802508e:	f000 809e 	beq.w	80251ce <mbedtls_ssl_read_record+0x276>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8025092:	689b      	ldr	r3, [r3, #8]
 8025094:	4299      	cmp	r1, r3
 8025096:	f0c0 80a9 	bcc.w	80251ec <mbedtls_ssl_read_record+0x294>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 802509a:	68e2      	ldr	r2, [r4, #12]
 802509c:	2a00      	cmp	r2, #0
 802509e:	dd04      	ble.n	80250aa <mbedtls_ssl_read_record+0x152>
                             MBEDTLS_SSL_IN_CONTENT_LEN + 256 )
 80250a0:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80250a4:	4299      	cmp	r1, r3
 80250a6:	f200 80ab 	bhi.w	8025200 <mbedtls_ssl_read_record+0x2a8>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80250aa:	3105      	adds	r1, #5
 80250ac:	4620      	mov	r0, r4
 80250ae:	f7ff f9ff 	bl	80244b0 <mbedtls_ssl_fetch_input>
 80250b2:	4607      	mov	r7, r0
 80250b4:	2800      	cmp	r0, #0
 80250b6:	f040 80ad 	bne.w	8025214 <mbedtls_ssl_read_record+0x2bc>
        ssl->in_left = 0;
 80250ba:	2300      	movs	r3, #0
 80250bc:	6763      	str	r3, [r4, #116]	; 0x74
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 80250be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80250c0:	3305      	adds	r3, #5
 80250c2:	9302      	str	r3, [sp, #8]
 80250c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80250c6:	9301      	str	r3, [sp, #4]
 80250c8:	4b5f      	ldr	r3, [pc, #380]	; (8025248 <mbedtls_ssl_read_record+0x2f0>)
 80250ca:	9300      	str	r3, [sp, #0]
 80250cc:	f241 0388 	movw	r3, #4232	; 0x1088
 80250d0:	462a      	mov	r2, r5
 80250d2:	2104      	movs	r1, #4
 80250d4:	4620      	mov	r0, r4
 80250d6:	f7f0 fb81 	bl	80157dc <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 80250da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80250dc:	2b00      	cmp	r3, #0
 80250de:	f43f af75 	beq.w	8024fcc <mbedtls_ssl_read_record+0x74>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 80250e2:	4b5a      	ldr	r3, [pc, #360]	; (802524c <mbedtls_ssl_read_record+0x2f4>)
 80250e4:	9300      	str	r3, [sp, #0]
 80250e6:	f240 7302 	movw	r3, #1794	; 0x702
 80250ea:	462a      	mov	r2, r5
 80250ec:	2102      	movs	r1, #2
 80250ee:	4620      	mov	r0, r4
 80250f0:	f7f0 fb0e 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 80250f4:	6a23      	ldr	r3, [r4, #32]
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	f000 80bc 	beq.w	8025274 <mbedtls_ssl_read_record+0x31c>
 80250fc:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80250fe:	2f00      	cmp	r7, #0
 8025100:	f000 80b8 	beq.w	8025274 <mbedtls_ssl_read_record+0x31c>
    if( ctx->cipher_info == NULL )
 8025104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025108:	2b00      	cmp	r3, #0
 802510a:	f000 824d 	beq.w	80255a8 <mbedtls_ssl_read_record+0x650>
    return ctx->cipher_info->mode;
 802510e:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 8025110:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8025112:	68ba      	ldr	r2, [r7, #8]
 8025114:	4296      	cmp	r6, r2
 8025116:	f0c0 824c 	bcc.w	80255b2 <mbedtls_ssl_read_record+0x65a>
    if( mode == MBEDTLS_MODE_GCM ||
 802511a:	2b06      	cmp	r3, #6
 802511c:	f000 80b5 	beq.w	802528a <mbedtls_ssl_read_record+0x332>
 8025120:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8025124:	2b08      	cmp	r3, #8
 8025126:	f000 80b0 	beq.w	802528a <mbedtls_ssl_read_record+0x332>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 802512a:	4b44      	ldr	r3, [pc, #272]	; (802523c <mbedtls_ssl_read_record+0x2e4>)
 802512c:	9300      	str	r3, [sp, #0]
 802512e:	f640 036d 	movw	r3, #2157	; 0x86d
 8025132:	462a      	mov	r2, r5
 8025134:	2101      	movs	r1, #1
 8025136:	4620      	mov	r0, r4
 8025138:	f7f0 faea 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802513c:	4f40      	ldr	r7, [pc, #256]	; (8025240 <mbedtls_ssl_read_record+0x2e8>)
 802513e:	e0e6      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8025140:	9001      	str	r0, [sp, #4]
 8025142:	4b43      	ldr	r3, [pc, #268]	; (8025250 <mbedtls_ssl_read_record+0x2f8>)
 8025144:	9300      	str	r3, [sp, #0]
 8025146:	f241 336d 	movw	r3, #4973	; 0x136d
 802514a:	462a      	mov	r2, r5
 802514c:	2101      	movs	r1, #1
 802514e:	4620      	mov	r0, r4
 8025150:	f7f0 fb10 	bl	8015774 <mbedtls_debug_print_ret>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 8025154:	f517 4fcb 	cmn.w	r7, #25984	; 0x6580
 8025158:	f43f af43 	beq.w	8024fe2 <mbedtls_ssl_read_record+0x8a>
 802515c:	e018      	b.n	8025190 <mbedtls_ssl_read_record+0x238>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 802515e:	4b3d      	ldr	r3, [pc, #244]	; (8025254 <mbedtls_ssl_read_record+0x2fc>)
 8025160:	9300      	str	r3, [sp, #0]
 8025162:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8025166:	4a34      	ldr	r2, [pc, #208]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 8025168:	2101      	movs	r1, #1
 802516a:	4620      	mov	r0, r4
 802516c:	f7f0 fad0 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8025170:	220a      	movs	r2, #10
 8025172:	2102      	movs	r1, #2
 8025174:	4620      	mov	r0, r4
 8025176:	f7ff fe97 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 802517a:	e008      	b.n	802518e <mbedtls_ssl_read_record+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 802517c:	4b36      	ldr	r3, [pc, #216]	; (8025258 <mbedtls_ssl_read_record+0x300>)
 802517e:	9300      	str	r3, [sp, #0]
 8025180:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8025184:	4a2c      	ldr	r2, [pc, #176]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 8025186:	2101      	movs	r1, #1
 8025188:	4620      	mov	r0, r4
 802518a:	f7f0 fac1 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 802518e:	4f33      	ldr	r7, [pc, #204]	; (802525c <mbedtls_ssl_read_record+0x304>)
                        MBEDTLS_SSL_DEBUG_RET( 1, ( "ssl_get_next_record" ), ret );
 8025190:	9701      	str	r7, [sp, #4]
 8025192:	4b33      	ldr	r3, [pc, #204]	; (8025260 <mbedtls_ssl_read_record+0x308>)
 8025194:	9300      	str	r3, [sp, #0]
 8025196:	f241 03f8 	movw	r3, #4344	; 0x10f8
 802519a:	4a27      	ldr	r2, [pc, #156]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 802519c:	2101      	movs	r1, #1
 802519e:	4620      	mov	r0, r4
 80251a0:	f7f0 fae8 	bl	8015774 <mbedtls_debug_print_ret>
                        return( ret );
 80251a4:	e1fc      	b.n	80255a0 <mbedtls_ssl_read_record+0x648>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 80251a6:	4b2f      	ldr	r3, [pc, #188]	; (8025264 <mbedtls_ssl_read_record+0x30c>)
 80251a8:	9300      	str	r3, [sp, #0]
 80251aa:	f640 73f6 	movw	r3, #4086	; 0xff6
 80251ae:	4a22      	ldr	r2, [pc, #136]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 80251b0:	2101      	movs	r1, #1
 80251b2:	4620      	mov	r0, r4
 80251b4:	f7f0 faac 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80251b8:	e7e9      	b.n	802518e <mbedtls_ssl_read_record+0x236>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80251ba:	4b2b      	ldr	r3, [pc, #172]	; (8025268 <mbedtls_ssl_read_record+0x310>)
 80251bc:	9300      	str	r3, [sp, #0]
 80251be:	f640 73fe 	movw	r3, #4094	; 0xffe
 80251c2:	4a1d      	ldr	r2, [pc, #116]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 80251c4:	2101      	movs	r1, #1
 80251c6:	4620      	mov	r0, r4
 80251c8:	f7f0 faa2 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80251cc:	e7df      	b.n	802518e <mbedtls_ssl_read_record+0x236>
        if( ssl->in_msglen < 1 ||
 80251ce:	1e4b      	subs	r3, r1, #1
 80251d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80251d4:	f4ff af69 	bcc.w	80250aa <mbedtls_ssl_read_record+0x152>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80251d8:	4b23      	ldr	r3, [pc, #140]	; (8025268 <mbedtls_ssl_read_record+0x310>)
 80251da:	9300      	str	r3, [sp, #0]
 80251dc:	f241 035b 	movw	r3, #4187	; 0x105b
 80251e0:	4a15      	ldr	r2, [pc, #84]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 80251e2:	2101      	movs	r1, #1
 80251e4:	4620      	mov	r0, r4
 80251e6:	f7f0 fa93 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80251ea:	e7d0      	b.n	802518e <mbedtls_ssl_read_record+0x236>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80251ec:	4b1e      	ldr	r3, [pc, #120]	; (8025268 <mbedtls_ssl_read_record+0x310>)
 80251ee:	9300      	str	r3, [sp, #0]
 80251f0:	f241 0363 	movw	r3, #4195	; 0x1063
 80251f4:	4a10      	ldr	r2, [pc, #64]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 80251f6:	2101      	movs	r1, #1
 80251f8:	4620      	mov	r0, r4
 80251fa:	f7f0 fa89 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80251fe:	e7c6      	b.n	802518e <mbedtls_ssl_read_record+0x236>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 8025200:	4b19      	ldr	r3, [pc, #100]	; (8025268 <mbedtls_ssl_read_record+0x310>)
 8025202:	9300      	str	r3, [sp, #0]
 8025204:	f241 0378 	movw	r3, #4216	; 0x1078
 8025208:	4a0b      	ldr	r2, [pc, #44]	; (8025238 <mbedtls_ssl_read_record+0x2e0>)
 802520a:	2101      	movs	r1, #1
 802520c:	4620      	mov	r0, r4
 802520e:	f7f0 fa7f 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8025212:	e7bc      	b.n	802518e <mbedtls_ssl_read_record+0x236>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 8025214:	9701      	str	r7, [sp, #4]
 8025216:	4b0e      	ldr	r3, [pc, #56]	; (8025250 <mbedtls_ssl_read_record+0x2f8>)
 8025218:	9300      	str	r3, [sp, #0]
 802521a:	f241 33a1 	movw	r3, #5025	; 0x13a1
 802521e:	462a      	mov	r2, r5
 8025220:	2101      	movs	r1, #1
 8025222:	4620      	mov	r0, r4
 8025224:	f7f0 faa6 	bl	8015774 <mbedtls_debug_print_ret>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 8025228:	f517 4fcb 	cmn.w	r7, #25984	; 0x6580
 802522c:	f43f aed9 	beq.w	8024fe2 <mbedtls_ssl_read_record+0x8a>
 8025230:	e7ae      	b.n	8025190 <mbedtls_ssl_read_record+0x238>
 8025232:	bf00      	nop
 8025234:	080359b0 	.word	0x080359b0
 8025238:	08035174 	.word	0x08035174
 802523c:	08034130 	.word	0x08034130
 8025240:	ffff9400 	.word	0xffff9400
 8025244:	080359c0 	.word	0x080359c0
 8025248:	08035a84 	.word	0x08035a84
 802524c:	08035aa0 	.word	0x08035aa0
 8025250:	08034630 	.word	0x08034630
 8025254:	08035a2c 	.word	0x08035a2c
 8025258:	08035a40 	.word	0x08035a40
 802525c:	ffff8e00 	.word	0xffff8e00
 8025260:	08035bfc 	.word	0x08035bfc
 8025264:	08035a58 	.word	0x08035a58
 8025268:	08035a70 	.word	0x08035a70
 802526c:	080359dc 	.word	0x080359dc
 8025270:	080359f0 	.word	0x080359f0
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8025274:	4bac      	ldr	r3, [pc, #688]	; (8025528 <mbedtls_ssl_read_record+0x5d0>)
 8025276:	9300      	str	r3, [sp, #0]
 8025278:	f240 7306 	movw	r3, #1798	; 0x706
 802527c:	462a      	mov	r2, r5
 802527e:	2101      	movs	r1, #1
 8025280:	4620      	mov	r0, r4
 8025282:	f7f0 fa45 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8025286:	4fa9      	ldr	r7, [pc, #676]	; (802552c <mbedtls_ssl_read_record+0x5d4>)
 8025288:	e041      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
        unsigned char taglen = transform->ciphersuite_info->flags &
 802528a:	683b      	ldr	r3, [r7, #0]
 802528c:	7f1b      	ldrb	r3, [r3, #28]
 802528e:	f013 0f02 	tst.w	r3, #2
 8025292:	bf14      	ite	ne
 8025294:	2208      	movne	r2, #8
 8025296:	2210      	moveq	r2, #16
        size_t explicit_iv_len = transform->ivlen - transform->fixed_ivlen;
 8025298:	68f9      	ldr	r1, [r7, #12]
 802529a:	693b      	ldr	r3, [r7, #16]
 802529c:	1ac8      	subs	r0, r1, r3
        if( ssl->in_msglen < explicit_iv_len + taglen )
 802529e:	9209      	str	r2, [sp, #36]	; 0x24
 80252a0:	eb00 0c02 	add.w	ip, r0, r2
 80252a4:	4566      	cmp	r6, ip
 80252a6:	d344      	bcc.n	8025332 <mbedtls_ssl_read_record+0x3da>
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 80252a8:	441e      	add	r6, r3
 80252aa:	1a76      	subs	r6, r6, r1
 80252ac:	1ab6      	subs	r6, r6, r2
        dec_msg = ssl->in_msg;
 80252ae:	f8d4 a064 	ldr.w	sl, [r4, #100]	; 0x64
        ssl->in_msglen = dec_msglen;
 80252b2:	6726      	str	r6, [r4, #112]	; 0x70
        memcpy( add_data, ssl->in_ctr, 8 );
 80252b4:	aa0e      	add	r2, sp, #56	; 0x38
 80252b6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80252b8:	4613      	mov	r3, r2
 80252ba:	6808      	ldr	r0, [r1, #0]
 80252bc:	6849      	ldr	r1, [r1, #4]
 80252be:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 80252c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80252c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80252c6:	68e3      	ldr	r3, [r4, #12]
        ver[0] = (unsigned char) major;
 80252c8:	68a1      	ldr	r1, [r4, #8]
 80252ca:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
        ver[1] = (unsigned char) minor;
 80252ce:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 80252d2:	0a33      	lsrs	r3, r6, #8
 80252d4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
        add_data[12] = ssl->in_msglen & 0xFF;
 80252d8:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data for AEAD", add_data, 13 );
 80252dc:	230d      	movs	r3, #13
 80252de:	9302      	str	r3, [sp, #8]
 80252e0:	9201      	str	r2, [sp, #4]
 80252e2:	4b93      	ldr	r3, [pc, #588]	; (8025530 <mbedtls_ssl_read_record+0x5d8>)
 80252e4:	9300      	str	r3, [sp, #0]
 80252e6:	f240 7359 	movw	r3, #1881	; 0x759
 80252ea:	462a      	mov	r2, r5
 80252ec:	2104      	movs	r1, #4
 80252ee:	4620      	mov	r0, r4
 80252f0:	f7f0 fa74 	bl	80157dc <mbedtls_debug_print_buf>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	2b0c      	cmp	r3, #12
 80252f8:	d029      	beq.n	802534e <mbedtls_ssl_read_record+0x3f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 80252fa:	4b8b      	ldr	r3, [pc, #556]	; (8025528 <mbedtls_ssl_read_record+0x5d0>)
 80252fc:	9300      	str	r3, [sp, #0]
 80252fe:	f240 7372 	movw	r3, #1906	; 0x772
 8025302:	462a      	mov	r2, r5
 8025304:	2101      	movs	r1, #1
 8025306:	4620      	mov	r0, r4
 8025308:	f7f0 fa02 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 802530c:	4f87      	ldr	r7, [pc, #540]	; (802552c <mbedtls_ssl_read_record+0x5d4>)
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 802530e:	9701      	str	r7, [sp, #4]
 8025310:	4b88      	ldr	r3, [pc, #544]	; (8025534 <mbedtls_ssl_read_record+0x5dc>)
 8025312:	9300      	str	r3, [sp, #0]
 8025314:	f241 039f 	movw	r3, #4255	; 0x109f
 8025318:	462a      	mov	r2, r5
 802531a:	2101      	movs	r1, #1
 802531c:	4620      	mov	r0, r4
 802531e:	f7f0 fa29 	bl	8015774 <mbedtls_debug_print_ret>
                    if( ret == MBEDTLS_ERR_SSL_CONTINUE_PROCESSING )
 8025322:	f517 4fcb 	cmn.w	r7, #25984	; 0x6580
 8025326:	f43f ae5c 	beq.w	8024fe2 <mbedtls_ssl_read_record+0x8a>
                    if( ret != 0 )
 802532a:	2f00      	cmp	r7, #0
 802532c:	f43f ae4e 	beq.w	8024fcc <mbedtls_ssl_read_record+0x74>
 8025330:	e72e      	b.n	8025190 <mbedtls_ssl_read_record+0x238>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 8025332:	9203      	str	r2, [sp, #12]
 8025334:	9002      	str	r0, [sp, #8]
 8025336:	9601      	str	r6, [sp, #4]
 8025338:	4b7f      	ldr	r3, [pc, #508]	; (8025538 <mbedtls_ssl_read_record+0x5e0>)
 802533a:	9300      	str	r3, [sp, #0]
 802533c:	f240 7344 	movw	r3, #1860	; 0x744
 8025340:	462a      	mov	r2, r5
 8025342:	2101      	movs	r1, #1
 8025344:	4620      	mov	r0, r4
 8025346:	f7f0 f9e3 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 802534a:	4f7c      	ldr	r7, [pc, #496]	; (802553c <mbedtls_ssl_read_record+0x5e4>)
 802534c:	e7df      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
        if( transform->ivlen == 12 && transform->fixed_ivlen == 4 )
 802534e:	693b      	ldr	r3, [r7, #16]
 8025350:	2b04      	cmp	r3, #4
 8025352:	d066      	beq.n	8025422 <mbedtls_ssl_read_record+0x4ca>
        else if( transform->ivlen == 12 && transform->fixed_ivlen == 12 )
 8025354:	2b0c      	cmp	r3, #12
 8025356:	d1d0      	bne.n	80252fa <mbedtls_ssl_read_record+0x3a2>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 8025358:	ab0b      	add	r3, sp, #44	; 0x2c
 802535a:	463a      	mov	r2, r7
 802535c:	f852 0f28 	ldr.w	r0, [r2, #40]!
 8025360:	6851      	ldr	r1, [r2, #4]
 8025362:	6892      	ldr	r2, [r2, #8]
 8025364:	c307      	stmia	r3!, {r0, r1, r2}
                iv[i+4] ^= ssl->in_ctr[i];
 8025366:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8025368:	a90c      	add	r1, sp, #48	; 0x30
 802536a:	1e5a      	subs	r2, r3, #1
 802536c:	f103 0c07 	add.w	ip, r3, #7
 8025370:	780b      	ldrb	r3, [r1, #0]
 8025372:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8025376:	4043      	eors	r3, r0
 8025378:	f801 3b01 	strb.w	r3, [r1], #1
            for( i = 0; i < 8; i++ )
 802537c:	4594      	cmp	ip, r2
 802537e:	d1f7      	bne.n	8025370 <mbedtls_ssl_read_record+0x418>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", iv, transform->ivlen );
 8025380:	230c      	movs	r3, #12
 8025382:	9302      	str	r3, [sp, #8]
 8025384:	ab0b      	add	r3, sp, #44	; 0x2c
 8025386:	9301      	str	r3, [sp, #4]
 8025388:	4b6d      	ldr	r3, [pc, #436]	; (8025540 <mbedtls_ssl_read_record+0x5e8>)
 802538a:	9300      	str	r3, [sp, #0]
 802538c:	f240 7376 	movw	r3, #1910	; 0x776
 8025390:	462a      	mov	r2, r5
 8025392:	2104      	movs	r1, #4
 8025394:	4620      	mov	r0, r4
 8025396:	f7f0 fa21 	bl	80157dc <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 802539a:	eb0a 0b06 	add.w	fp, sl, r6
 802539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253a0:	9302      	str	r3, [sp, #8]
 80253a2:	f8cd b004 	str.w	fp, [sp, #4]
 80253a6:	4b67      	ldr	r3, [pc, #412]	; (8025544 <mbedtls_ssl_read_record+0x5ec>)
 80253a8:	9300      	str	r3, [sp, #0]
 80253aa:	f240 7377 	movw	r3, #1911	; 0x777
 80253ae:	462a      	mov	r2, r5
 80253b0:	2104      	movs	r1, #4
 80253b2:	4620      	mov	r0, r4
 80253b4:	f7f0 fa12 	bl	80157dc <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 80253b8:	68fa      	ldr	r2, [r7, #12]
 80253ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80253bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253be:	9306      	str	r3, [sp, #24]
 80253c0:	f8cd b014 	str.w	fp, [sp, #20]
 80253c4:	ab0a      	add	r3, sp, #40	; 0x28
 80253c6:	9304      	str	r3, [sp, #16]
 80253c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80253cc:	9602      	str	r6, [sp, #8]
 80253ce:	f8cd a004 	str.w	sl, [sp, #4]
 80253d2:	230d      	movs	r3, #13
 80253d4:	9300      	str	r3, [sp, #0]
 80253d6:	ab0e      	add	r3, sp, #56	; 0x38
 80253d8:	a90b      	add	r1, sp, #44	; 0x2c
 80253da:	3088      	adds	r0, #136	; 0x88
 80253dc:	f7ef fe2e 	bl	801503c <mbedtls_cipher_auth_decrypt>
 80253e0:	4607      	mov	r7, r0
 80253e2:	bb30      	cbnz	r0, 8025432 <mbedtls_ssl_read_record+0x4da>
        if( olen != dec_msglen )
 80253e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80253e6:	429e      	cmp	r6, r3
 80253e8:	d133      	bne.n	8025452 <mbedtls_ssl_read_record+0x4fa>
    if( ssl->in_msglen == 0 )
 80253ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80253ec:	2b00      	cmp	r3, #0
 80253ee:	d03b      	beq.n	8025468 <mbedtls_ssl_read_record+0x510>
        ssl->nb_zero = 0;
 80253f0:	2300      	movs	r3, #0
 80253f2:	67e3      	str	r3, [r4, #124]	; 0x7c
        unsigned char taglen = transform->ciphersuite_info->flags &
 80253f4:	2208      	movs	r2, #8
 80253f6:	b2d6      	uxtb	r6, r2
            if( ++ssl->in_ctr[i - 1] != 0 )
 80253f8:	1e51      	subs	r1, r2, #1
 80253fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80253fc:	5c43      	ldrb	r3, [r0, r1]
 80253fe:	3301      	adds	r3, #1
 8025400:	b2db      	uxtb	r3, r3
 8025402:	5443      	strb	r3, [r0, r1]
 8025404:	2b00      	cmp	r3, #0
 8025406:	d151      	bne.n	80254ac <mbedtls_ssl_read_record+0x554>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8025408:	3a01      	subs	r2, #1
 802540a:	d1f4      	bne.n	80253f6 <mbedtls_ssl_read_record+0x49e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 802540c:	4b4e      	ldr	r3, [pc, #312]	; (8025548 <mbedtls_ssl_read_record+0x5f0>)
 802540e:	9300      	str	r3, [sp, #0]
 8025410:	f640 1343 	movw	r3, #2371	; 0x943
 8025414:	462a      	mov	r2, r5
 8025416:	2101      	movs	r1, #1
 8025418:	4620      	mov	r0, r4
 802541a:	f7f0 f979 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 802541e:	4f4b      	ldr	r7, [pc, #300]	; (802554c <mbedtls_ssl_read_record+0x5f4>)
 8025420:	e775      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
            memcpy( iv, transform->iv_dec, transform->fixed_ivlen );
 8025422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025424:	930b      	str	r3, [sp, #44]	; 0x2c
            memcpy( iv + transform->fixed_ivlen, ssl->in_iv, 8 );
 8025426:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8025428:	ab0c      	add	r3, sp, #48	; 0x30
 802542a:	6810      	ldr	r0, [r2, #0]
 802542c:	6851      	ldr	r1, [r2, #4]
 802542e:	c303      	stmia	r3!, {r0, r1}
 8025430:	e7a6      	b.n	8025380 <mbedtls_ssl_read_record+0x428>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 8025432:	9001      	str	r0, [sp, #4]
 8025434:	4b46      	ldr	r3, [pc, #280]	; (8025550 <mbedtls_ssl_read_record+0x5f8>)
 8025436:	9300      	str	r3, [sp, #0]
 8025438:	f240 7383 	movw	r3, #1923	; 0x783
 802543c:	462a      	mov	r2, r5
 802543e:	2101      	movs	r1, #1
 8025440:	4620      	mov	r0, r4
 8025442:	f7f0 f997 	bl	8015774 <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 8025446:	f517 4fc6 	cmn.w	r7, #25344	; 0x6300
 802544a:	f47f af60 	bne.w	802530e <mbedtls_ssl_read_record+0x3b6>
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 802544e:	4f3b      	ldr	r7, [pc, #236]	; (802553c <mbedtls_ssl_read_record+0x5e4>)
 8025450:	e75d      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8025452:	4b35      	ldr	r3, [pc, #212]	; (8025528 <mbedtls_ssl_read_record+0x5d0>)
 8025454:	9300      	str	r3, [sp, #0]
 8025456:	f240 738e 	movw	r3, #1934	; 0x78e
 802545a:	462a      	mov	r2, r5
 802545c:	2101      	movs	r1, #1
 802545e:	4620      	mov	r0, r4
 8025460:	f7f0 f956 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8025464:	4f31      	ldr	r7, [pc, #196]	; (802552c <mbedtls_ssl_read_record+0x5d4>)
 8025466:	e752      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 8025468:	68e3      	ldr	r3, [r4, #12]
 802546a:	2b03      	cmp	r3, #3
 802546c:	d00f      	beq.n	802548e <mbedtls_ssl_read_record+0x536>
        ssl->nb_zero++;
 802546e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8025470:	3301      	adds	r3, #1
 8025472:	67e3      	str	r3, [r4, #124]	; 0x7c
        if( ssl->nb_zero > 3 )
 8025474:	2b03      	cmp	r3, #3
 8025476:	ddbd      	ble.n	80253f4 <mbedtls_ssl_read_record+0x49c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 8025478:	4b36      	ldr	r3, [pc, #216]	; (8025554 <mbedtls_ssl_read_record+0x5fc>)
 802547a:	9300      	str	r3, [sp, #0]
 802547c:	f640 132b 	movw	r3, #2347	; 0x92b
 8025480:	462a      	mov	r2, r5
 8025482:	2101      	movs	r1, #1
 8025484:	4620      	mov	r0, r4
 8025486:	f7f0 f943 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 802548a:	4f2c      	ldr	r7, [pc, #176]	; (802553c <mbedtls_ssl_read_record+0x5e4>)
 802548c:	e73f      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 802548e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8025490:	2b17      	cmp	r3, #23
 8025492:	d0ec      	beq.n	802546e <mbedtls_ssl_read_record+0x516>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
 8025494:	9301      	str	r3, [sp, #4]
 8025496:	4b30      	ldr	r3, [pc, #192]	; (8025558 <mbedtls_ssl_read_record+0x600>)
 8025498:	9300      	str	r3, [sp, #0]
 802549a:	f640 131e 	movw	r3, #2334	; 0x91e
 802549e:	462a      	mov	r2, r5
 80254a0:	2101      	movs	r1, #1
 80254a2:	4620      	mov	r0, r4
 80254a4:	f7f0 f934 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80254a8:	4f2c      	ldr	r7, [pc, #176]	; (802555c <mbedtls_ssl_read_record+0x604>)
 80254aa:	e730      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
        if( i == ssl_ep_len( ssl ) )
 80254ac:	2e00      	cmp	r6, #0
 80254ae:	d0ad      	beq.n	802540c <mbedtls_ssl_read_record+0x4b4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 80254b0:	4b2b      	ldr	r3, [pc, #172]	; (8025560 <mbedtls_ssl_read_record+0x608>)
 80254b2:	9300      	str	r3, [sp, #0]
 80254b4:	f640 1348 	movw	r3, #2376	; 0x948
 80254b8:	462a      	mov	r2, r5
 80254ba:	2102      	movs	r1, #2
 80254bc:	4620      	mov	r0, r4
 80254be:	f7f0 f927 	bl	8015710 <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 80254c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80254c4:	9302      	str	r3, [sp, #8]
 80254c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80254c8:	9301      	str	r3, [sp, #4]
 80254ca:	4b26      	ldr	r3, [pc, #152]	; (8025564 <mbedtls_ssl_read_record+0x60c>)
 80254cc:	9300      	str	r3, [sp, #0]
 80254ce:	f241 03a3 	movw	r3, #4259	; 0x10a3
 80254d2:	462a      	mov	r2, r5
 80254d4:	2104      	movs	r1, #4
 80254d6:	4620      	mov	r0, r4
 80254d8:	f7f0 f980 	bl	80157dc <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_IN_CONTENT_LEN )
 80254dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80254de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80254e2:	f67f ad73 	bls.w	8024fcc <mbedtls_ssl_read_record+0x74>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 80254e6:	4b20      	ldr	r3, [pc, #128]	; (8025568 <mbedtls_ssl_read_record+0x610>)
 80254e8:	9300      	str	r3, [sp, #0]
 80254ea:	f241 03a8 	movw	r3, #4264	; 0x10a8
 80254ee:	4a1f      	ldr	r2, [pc, #124]	; (802556c <mbedtls_ssl_read_record+0x614>)
 80254f0:	2101      	movs	r1, #1
 80254f2:	4620      	mov	r0, r4
 80254f4:	f7f0 f90c 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80254f8:	4f18      	ldr	r7, [pc, #96]	; (802555c <mbedtls_ssl_read_record+0x604>)
 80254fa:	e649      	b.n	8025190 <mbedtls_ssl_read_record+0x238>
        if( 0 != ret )
 80254fc:	b948      	cbnz	r0, 8025512 <mbedtls_ssl_read_record+0x5ba>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE &&
 80254fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8025500:	2b16      	cmp	r3, #22
 8025502:	d143      	bne.n	802558c <mbedtls_ssl_read_record+0x634>
 8025504:	9b08      	ldr	r3, [sp, #32]
 8025506:	2b01      	cmp	r3, #1
 8025508:	d140      	bne.n	802558c <mbedtls_ssl_read_record+0x634>
            mbedtls_ssl_update_handshake_status( ssl );
 802550a:	4620      	mov	r0, r4
 802550c:	f7ff fc24 	bl	8024d58 <mbedtls_ssl_update_handshake_status>
 8025510:	e03c      	b.n	802558c <mbedtls_ssl_read_record+0x634>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_handle_message_type" ), ret );
 8025512:	9001      	str	r0, [sp, #4]
 8025514:	4b16      	ldr	r3, [pc, #88]	; (8025570 <mbedtls_ssl_read_record+0x618>)
 8025516:	9300      	str	r3, [sp, #0]
 8025518:	f241 1311 	movw	r3, #4369	; 0x1111
 802551c:	4a13      	ldr	r2, [pc, #76]	; (802556c <mbedtls_ssl_read_record+0x614>)
 802551e:	2101      	movs	r1, #1
 8025520:	4620      	mov	r0, r4
 8025522:	f7f0 f927 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8025526:	e03b      	b.n	80255a0 <mbedtls_ssl_read_record+0x648>
 8025528:	08034130 	.word	0x08034130
 802552c:	ffff9400 	.word	0xffff9400
 8025530:	080355f4 	.word	0x080355f4
 8025534:	08035bec 	.word	0x08035bec
 8025538:	08035ad0 	.word	0x08035ad0
 802553c:	ffff8e80 	.word	0xffff8e80
 8025540:	08035b04 	.word	0x08035b04
 8025544:	08035b0c 	.word	0x08035b0c
 8025548:	08035b9c 	.word	0x08035b9c
 802554c:	ffff9480 	.word	0xffff9480
 8025550:	08035b18 	.word	0x08035b18
 8025554:	08035b5c 	.word	0x08035b5c
 8025558:	08035b34 	.word	0x08035b34
 802555c:	ffff8e00 	.word	0xffff8e00
 8025560:	08035bc0 	.word	0x08035bc0
 8025564:	08035bd0 	.word	0x08035bd0
 8025568:	08035a70 	.word	0x08035a70
 802556c:	08035174 	.word	0x08035174
 8025570:	08035c10 	.word	0x08035c10
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "reuse previously read message" ) );
 8025574:	4b15      	ldr	r3, [pc, #84]	; (80255cc <mbedtls_ssl_read_record+0x674>)
 8025576:	9300      	str	r3, [sp, #0]
 8025578:	f241 131d 	movw	r3, #4381	; 0x111d
 802557c:	4a14      	ldr	r2, [pc, #80]	; (80255d0 <mbedtls_ssl_read_record+0x678>)
 802557e:	2102      	movs	r1, #2
 8025580:	4620      	mov	r0, r4
 8025582:	f7f0 f8c5 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 8025586:	2300      	movs	r3, #0
 8025588:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 802558c:	4b11      	ldr	r3, [pc, #68]	; (80255d4 <mbedtls_ssl_read_record+0x67c>)
 802558e:	9300      	str	r3, [sp, #0]
 8025590:	f241 1321 	movw	r3, #4385	; 0x1121
 8025594:	4a0e      	ldr	r2, [pc, #56]	; (80255d0 <mbedtls_ssl_read_record+0x678>)
 8025596:	2102      	movs	r1, #2
 8025598:	4620      	mov	r0, r4
 802559a:	f7f0 f8b9 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 802559e:	2700      	movs	r7, #0
}
 80255a0:	4638      	mov	r0, r7
 80255a2:	b013      	add	sp, #76	; 0x4c
 80255a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->in_msglen < ssl->transform_in->minlen )
 80255a8:	6f26      	ldr	r6, [r4, #112]	; 0x70
 80255aa:	68ba      	ldr	r2, [r7, #8]
 80255ac:	4296      	cmp	r6, r2
 80255ae:	f4bf adbc 	bcs.w	802512a <mbedtls_ssl_read_record+0x1d2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 80255b2:	9202      	str	r2, [sp, #8]
 80255b4:	9601      	str	r6, [sp, #4]
 80255b6:	4b08      	ldr	r3, [pc, #32]	; (80255d8 <mbedtls_ssl_read_record+0x680>)
 80255b8:	9300      	str	r3, [sp, #0]
 80255ba:	f240 730e 	movw	r3, #1806	; 0x70e
 80255be:	462a      	mov	r2, r5
 80255c0:	2101      	movs	r1, #1
 80255c2:	4620      	mov	r0, r4
 80255c4:	f7f0 f8a4 	bl	8015710 <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80255c8:	4f04      	ldr	r7, [pc, #16]	; (80255dc <mbedtls_ssl_read_record+0x684>)
 80255ca:	e6a0      	b.n	802530e <mbedtls_ssl_read_record+0x3b6>
 80255cc:	08035c30 	.word	0x08035c30
 80255d0:	08035174 	.word	0x08035174
 80255d4:	08035c50 	.word	0x08035c50
 80255d8:	08035ab0 	.word	0x08035ab0
 80255dc:	ffff8e80 	.word	0xffff8e80

080255e0 <mbedtls_ssl_write_certificate>:
{
 80255e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255e4:	b084      	sub	sp, #16
 80255e6:	4605      	mov	r5, r0
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80255e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80255ea:	681c      	ldr	r4, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 80255ec:	4b7a      	ldr	r3, [pc, #488]	; (80257d8 <mbedtls_ssl_write_certificate+0x1f8>)
 80255ee:	9300      	str	r3, [sp, #0]
 80255f0:	f241 43d1 	movw	r3, #5329	; 0x14d1
 80255f4:	4a79      	ldr	r2, [pc, #484]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 80255f6:	2102      	movs	r1, #2
 80255f8:	f7f0 f88a 	bl	8015710 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80255fc:	7aa3      	ldrb	r3, [r4, #10]
 80255fe:	2b0b      	cmp	r3, #11
 8025600:	d806      	bhi.n	8025610 <mbedtls_ssl_write_certificate+0x30>
 8025602:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8025606:	fa22 f303 	lsr.w	r3, r2, r3
 802560a:	f013 0f01 	tst.w	r3, #1
 802560e:	d17d      	bne.n	802570c <mbedtls_ssl_write_certificate+0x12c>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8025610:	682a      	ldr	r2, [r5, #0]
 8025612:	f892 3070 	ldrb.w	r3, [r2, #112]	; 0x70
 8025616:	f013 0f01 	tst.w	r3, #1
 802561a:	f040 8095 	bne.w	8025748 <mbedtls_ssl_write_certificate+0x168>
        if( ssl->client_auth == 0 )
 802561e:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8025622:	2c00      	cmp	r4, #0
 8025624:	f000 8083 	beq.w	802572e <mbedtls_ssl_write_certificate+0x14e>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8025628:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802562a:	2b00      	cmp	r3, #0
 802562c:	f000 80a6 	beq.w	802577c <mbedtls_ssl_write_certificate+0x19c>
 8025630:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8025634:	2b00      	cmp	r3, #0
 8025636:	f000 80a1 	beq.w	802577c <mbedtls_ssl_write_certificate+0x19c>
    return( key_cert == NULL ? NULL : key_cert->cert );
 802563a:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 802563c:	9301      	str	r3, [sp, #4]
 802563e:	4b68      	ldr	r3, [pc, #416]	; (80257e0 <mbedtls_ssl_write_certificate+0x200>)
 8025640:	9300      	str	r3, [sp, #0]
 8025642:	f241 5305 	movw	r3, #5381	; 0x1505
 8025646:	4a65      	ldr	r2, [pc, #404]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 8025648:	2103      	movs	r1, #3
 802564a:	4628      	mov	r0, r5
 802564c:	f7f0 fa7c 	bl	8015b48 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8025650:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8025652:	2b00      	cmp	r3, #0
 8025654:	f000 8097 	beq.w	8025786 <mbedtls_ssl_write_certificate+0x1a6>
 8025658:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 802565c:	2b00      	cmp	r3, #0
 802565e:	f000 8092 	beq.w	8025786 <mbedtls_ssl_write_certificate+0x1a6>
    return( key_cert == NULL ? NULL : key_cert->cert );
 8025662:	681e      	ldr	r6, [r3, #0]
    while( crt != NULL )
 8025664:	2e00      	cmp	r6, #0
 8025666:	f000 80a8 	beq.w	80257ba <mbedtls_ssl_write_certificate+0x1da>
 802566a:	f04f 0807 	mov.w	r8, #7
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 802566e:	f641 77fd 	movw	r7, #8189	; 0x1ffd
        n = crt->raw.len;
 8025672:	6874      	ldr	r4, [r6, #4]
        if( n > MBEDTLS_SSL_OUT_CONTENT_LEN - 3 - i )
 8025674:	eba7 0208 	sub.w	r2, r7, r8
 8025678:	42a2      	cmp	r2, r4
 802567a:	f0c0 808c 	bcc.w	8025796 <mbedtls_ssl_write_certificate+0x1b6>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 802567e:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8025682:	0c21      	lsrs	r1, r4, #16
 8025684:	f802 1008 	strb.w	r1, [r2, r8]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 8025688:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 802568c:	4442      	add	r2, r8
 802568e:	0a21      	lsrs	r1, r4, #8
 8025690:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8025692:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8025696:	4442      	add	r2, r8
 8025698:	7094      	strb	r4, [r2, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 802569a:	f108 0803 	add.w	r8, r8, #3
 802569e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
 80256a2:	4622      	mov	r2, r4
 80256a4:	68b1      	ldr	r1, [r6, #8]
 80256a6:	4440      	add	r0, r8
 80256a8:	f004 ff47 	bl	802a53a <memcpy>
        i += n; crt = crt->next;
 80256ac:	44a0      	add	r8, r4
 80256ae:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
    while( crt != NULL )
 80256b2:	2e00      	cmp	r6, #0
 80256b4:	d1dd      	bne.n	8025672 <mbedtls_ssl_write_certificate+0x92>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 80256b6:	f1a8 0207 	sub.w	r2, r8, #7
 80256ba:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80256be:	0c10      	lsrs	r0, r2, #16
 80256c0:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 80256c2:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80256c6:	0a12      	lsrs	r2, r2, #8
 80256c8:	714a      	strb	r2, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80256ca:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 80256ce:	f1a8 0107 	sub.w	r1, r8, #7
 80256d2:	7191      	strb	r1, [r2, #6]
    ssl->out_msglen  = i;
 80256d4:	f8c5 80a0 	str.w	r8, [r5, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80256d8:	2316      	movs	r3, #22
 80256da:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 80256de:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80256e2:	220b      	movs	r2, #11
 80256e4:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 80256e6:	686b      	ldr	r3, [r5, #4]
 80256e8:	3301      	adds	r3, #1
 80256ea:	606b      	str	r3, [r5, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 80256ec:	4628      	mov	r0, r5
 80256ee:	f7ff fa4d 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 80256f2:	4604      	mov	r4, r0
 80256f4:	2800      	cmp	r0, #0
 80256f6:	d163      	bne.n	80257c0 <mbedtls_ssl_write_certificate+0x1e0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 80256f8:	4b3a      	ldr	r3, [pc, #232]	; (80257e4 <mbedtls_ssl_write_certificate+0x204>)
 80256fa:	9300      	str	r3, [sp, #0]
 80256fc:	f241 5339 	movw	r3, #5433	; 0x1539
 8025700:	4a36      	ldr	r2, [pc, #216]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 8025702:	2102      	movs	r1, #2
 8025704:	4628      	mov	r0, r5
 8025706:	f7f0 f803 	bl	8015710 <mbedtls_debug_print_msg>
    return( ret );
 802570a:	e00c      	b.n	8025726 <mbedtls_ssl_write_certificate+0x146>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 802570c:	4b36      	ldr	r3, [pc, #216]	; (80257e8 <mbedtls_ssl_write_certificate+0x208>)
 802570e:	9300      	str	r3, [sp, #0]
 8025710:	f241 43d8 	movw	r3, #5336	; 0x14d8
 8025714:	4a31      	ldr	r2, [pc, #196]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 8025716:	2102      	movs	r1, #2
 8025718:	4628      	mov	r0, r5
 802571a:	f7ef fff9 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 802571e:	686b      	ldr	r3, [r5, #4]
 8025720:	3301      	adds	r3, #1
 8025722:	606b      	str	r3, [r5, #4]
        return( 0 );
 8025724:	2400      	movs	r4, #0
}
 8025726:	4620      	mov	r0, r4
 8025728:	b004      	add	sp, #16
 802572a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 802572e:	4b2e      	ldr	r3, [pc, #184]	; (80257e8 <mbedtls_ssl_write_certificate+0x208>)
 8025730:	9300      	str	r3, [sp, #0]
 8025732:	f241 43e2 	movw	r3, #5346	; 0x14e2
 8025736:	4a29      	ldr	r2, [pc, #164]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 8025738:	2102      	movs	r1, #2
 802573a:	4628      	mov	r0, r5
 802573c:	f7ef ffe8 	bl	8015710 <mbedtls_debug_print_msg>
            ssl->state++;
 8025740:	686b      	ldr	r3, [r5, #4]
 8025742:	3301      	adds	r3, #1
 8025744:	606b      	str	r3, [r5, #4]
            return( 0 );
 8025746:	e7ee      	b.n	8025726 <mbedtls_ssl_write_certificate+0x146>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8025748:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802574a:	b133      	cbz	r3, 802575a <mbedtls_ssl_write_certificate+0x17a>
 802574c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8025750:	b11b      	cbz	r3, 802575a <mbedtls_ssl_write_certificate+0x17a>
        if( mbedtls_ssl_own_cert( ssl ) == NULL )
 8025752:	681b      	ldr	r3, [r3, #0]
 8025754:	b13b      	cbz	r3, 8025766 <mbedtls_ssl_write_certificate+0x186>
 8025756:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8025758:	e76a      	b.n	8025630 <mbedtls_ssl_write_certificate+0x50>
        key_cert = ssl->conf->key_cert;
 802575a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 802575c:	b11b      	cbz	r3, 8025766 <mbedtls_ssl_write_certificate+0x186>
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	2b00      	cmp	r3, #0
 8025762:	f47f af61 	bne.w	8025628 <mbedtls_ssl_write_certificate+0x48>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no certificate to send" ) );
 8025766:	4b21      	ldr	r3, [pc, #132]	; (80257ec <mbedtls_ssl_write_certificate+0x20c>)
 8025768:	9300      	str	r3, [sp, #0]
 802576a:	f241 43ff 	movw	r3, #5375	; 0x14ff
 802576e:	4a1b      	ldr	r2, [pc, #108]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 8025770:	2101      	movs	r1, #1
 8025772:	4628      	mov	r0, r5
 8025774:	f7ef ffcc 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED );
 8025778:	4c1d      	ldr	r4, [pc, #116]	; (80257f0 <mbedtls_ssl_write_certificate+0x210>)
 802577a:	e7d4      	b.n	8025726 <mbedtls_ssl_write_certificate+0x146>
        key_cert = ssl->conf->key_cert;
 802577c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 802577e:	2b00      	cmp	r3, #0
 8025780:	f47f af5b 	bne.w	802563a <mbedtls_ssl_write_certificate+0x5a>
 8025784:	e75a      	b.n	802563c <mbedtls_ssl_write_certificate+0x5c>
        key_cert = ssl->conf->key_cert;
 8025786:	682b      	ldr	r3, [r5, #0]
 8025788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    return( key_cert == NULL ? NULL : key_cert->cert );
 802578a:	2b00      	cmp	r3, #0
 802578c:	f47f af69 	bne.w	8025662 <mbedtls_ssl_write_certificate+0x82>
 8025790:	f04f 0807 	mov.w	r8, #7
 8025794:	e78f      	b.n	80256b6 <mbedtls_ssl_write_certificate+0xd6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 8025796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802579a:	9202      	str	r2, [sp, #8]
 802579c:	eb04 0308 	add.w	r3, r4, r8
 80257a0:	3303      	adds	r3, #3
 80257a2:	9301      	str	r3, [sp, #4]
 80257a4:	4b13      	ldr	r3, [pc, #76]	; (80257f4 <mbedtls_ssl_write_certificate+0x214>)
 80257a6:	9300      	str	r3, [sp, #0]
 80257a8:	f241 5318 	movw	r3, #5400	; 0x1518
 80257ac:	4a0b      	ldr	r2, [pc, #44]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 80257ae:	2101      	movs	r1, #1
 80257b0:	4628      	mov	r0, r5
 80257b2:	f7ef ffad 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 80257b6:	4c10      	ldr	r4, [pc, #64]	; (80257f8 <mbedtls_ssl_write_certificate+0x218>)
 80257b8:	e7b5      	b.n	8025726 <mbedtls_ssl_write_certificate+0x146>
    while( crt != NULL )
 80257ba:	f04f 0807 	mov.w	r8, #7
 80257be:	e77a      	b.n	80256b6 <mbedtls_ssl_write_certificate+0xd6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 80257c0:	9001      	str	r0, [sp, #4]
 80257c2:	4b0e      	ldr	r3, [pc, #56]	; (80257fc <mbedtls_ssl_write_certificate+0x21c>)
 80257c4:	9300      	str	r3, [sp, #0]
 80257c6:	f241 5335 	movw	r3, #5429	; 0x1535
 80257ca:	4a04      	ldr	r2, [pc, #16]	; (80257dc <mbedtls_ssl_write_certificate+0x1fc>)
 80257cc:	2101      	movs	r1, #1
 80257ce:	4628      	mov	r0, r5
 80257d0:	f7ef ffd0 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80257d4:	e7a7      	b.n	8025726 <mbedtls_ssl_write_certificate+0x146>
 80257d6:	bf00      	nop
 80257d8:	08035c60 	.word	0x08035c60
 80257dc:	08035174 	.word	0x08035174
 80257e0:	08035cb0 	.word	0x08035cb0
 80257e4:	08035ce0 	.word	0x08035ce0
 80257e8:	08035c78 	.word	0x08035c78
 80257ec:	08035c94 	.word	0x08035c94
 80257f0:	ffff8a80 	.word	0xffff8a80
 80257f4:	08035cc0 	.word	0x08035cc0
 80257f8:	ffff8b00 	.word	0xffff8b00
 80257fc:	08033d30 	.word	0x08033d30

08025800 <mbedtls_ssl_write_change_cipher_spec>:
{
 8025800:	b530      	push	{r4, r5, lr}
 8025802:	b083      	sub	sp, #12
 8025804:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 8025806:	4b18      	ldr	r3, [pc, #96]	; (8025868 <mbedtls_ssl_write_change_cipher_spec+0x68>)
 8025808:	9300      	str	r3, [sp, #0]
 802580a:	f241 63f7 	movw	r3, #5879	; 0x16f7
 802580e:	4a17      	ldr	r2, [pc, #92]	; (802586c <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 8025810:	2102      	movs	r1, #2
 8025812:	f7ef ff7d 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8025816:	2314      	movs	r3, #20
 8025818:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msglen  = 1;
 802581c:	2301      	movs	r3, #1
 802581e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 8025822:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8025826:	7013      	strb	r3, [r2, #0]
    ssl->state++;
 8025828:	6863      	ldr	r3, [r4, #4]
 802582a:	3301      	adds	r3, #1
 802582c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 802582e:	4620      	mov	r0, r4
 8025830:	f7ff f9ac 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 8025834:	4605      	mov	r5, r0
 8025836:	b958      	cbnz	r0, 8025850 <mbedtls_ssl_write_change_cipher_spec+0x50>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 8025838:	4b0d      	ldr	r3, [pc, #52]	; (8025870 <mbedtls_ssl_write_change_cipher_spec+0x70>)
 802583a:	9300      	str	r3, [sp, #0]
 802583c:	f241 7305 	movw	r3, #5893	; 0x1705
 8025840:	4a0a      	ldr	r2, [pc, #40]	; (802586c <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 8025842:	2102      	movs	r1, #2
 8025844:	4620      	mov	r0, r4
 8025846:	f7ef ff63 	bl	8015710 <mbedtls_debug_print_msg>
}
 802584a:	4628      	mov	r0, r5
 802584c:	b003      	add	sp, #12
 802584e:	bd30      	pop	{r4, r5, pc}
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 8025850:	9001      	str	r0, [sp, #4]
 8025852:	4b08      	ldr	r3, [pc, #32]	; (8025874 <mbedtls_ssl_write_change_cipher_spec+0x74>)
 8025854:	9300      	str	r3, [sp, #0]
 8025856:	f241 7301 	movw	r3, #5889	; 0x1701
 802585a:	4a04      	ldr	r2, [pc, #16]	; (802586c <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 802585c:	2101      	movs	r1, #1
 802585e:	4620      	mov	r0, r4
 8025860:	f7ef ff88 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8025864:	e7f1      	b.n	802584a <mbedtls_ssl_write_change_cipher_spec+0x4a>
 8025866:	bf00      	nop
 8025868:	08035cf8 	.word	0x08035cf8
 802586c:	08035174 	.word	0x08035174
 8025870:	08035d14 	.word	0x08035d14
 8025874:	08033d30 	.word	0x08033d30

08025878 <mbedtls_ssl_parse_change_cipher_spec>:
{
 8025878:	b530      	push	{r4, r5, lr}
 802587a:	b083      	sub	sp, #12
 802587c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 802587e:	4b2f      	ldr	r3, [pc, #188]	; (802593c <mbedtls_ssl_parse_change_cipher_spec+0xc4>)
 8025880:	9300      	str	r3, [sp, #0]
 8025882:	f241 730e 	movw	r3, #5902	; 0x170e
 8025886:	4a2e      	ldr	r2, [pc, #184]	; (8025940 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 8025888:	2102      	movs	r1, #2
 802588a:	f7ef ff41 	bl	8015710 <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 802588e:	2101      	movs	r1, #1
 8025890:	4620      	mov	r0, r4
 8025892:	f7ff fb61 	bl	8024f58 <mbedtls_ssl_read_record>
 8025896:	4605      	mov	r5, r0
 8025898:	2800      	cmp	r0, #0
 802589a:	d134      	bne.n	8025906 <mbedtls_ssl_parse_change_cipher_spec+0x8e>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 802589c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 802589e:	2b14      	cmp	r3, #20
 80258a0:	d13c      	bne.n	802591c <mbedtls_ssl_parse_change_cipher_spec+0xa4>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 80258a2:	4b28      	ldr	r3, [pc, #160]	; (8025944 <mbedtls_ssl_parse_change_cipher_spec+0xcc>)
 80258a4:	9300      	str	r3, [sp, #0]
 80258a6:	f241 7325 	movw	r3, #5925	; 0x1725
 80258aa:	4a25      	ldr	r2, [pc, #148]	; (8025940 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 80258ac:	2103      	movs	r1, #3
 80258ae:	4620      	mov	r0, r4
 80258b0:	f7ef ff2e 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 80258b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80258b6:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 80258b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80258ba:	6223      	str	r3, [r4, #32]
    memset( ssl->in_ctr, 0, 8 );
 80258bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80258be:	2200      	movs	r2, #0
 80258c0:	601a      	str	r2, [r3, #0]
 80258c2:	605a      	str	r2, [r3, #4]
    ssl_update_in_pointers( ssl, ssl->transform_negotiate );
 80258c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ssl->in_ctr = ssl->in_hdr - 8;
 80258c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80258c8:	f1a3 0108 	sub.w	r1, r3, #8
 80258cc:	6561      	str	r1, [r4, #84]	; 0x54
        ssl->in_len = ssl->in_hdr + 3;
 80258ce:	1cd9      	adds	r1, r3, #3
 80258d0:	65e1      	str	r1, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_hdr + 5;
 80258d2:	3305      	adds	r3, #5
 80258d4:	6623      	str	r3, [r4, #96]	; 0x60
    if( transform != NULL &&
 80258d6:	b132      	cbz	r2, 80258e6 <mbedtls_ssl_parse_change_cipher_spec+0x6e>
 80258d8:	68e1      	ldr	r1, [r4, #12]
 80258da:	2901      	cmp	r1, #1
 80258dc:	dd03      	ble.n	80258e6 <mbedtls_ssl_parse_change_cipher_spec+0x6e>
        ssl->in_msg = ssl->in_iv + transform->ivlen - transform->fixed_ivlen;
 80258de:	68d1      	ldr	r1, [r2, #12]
 80258e0:	6912      	ldr	r2, [r2, #16]
 80258e2:	1a8a      	subs	r2, r1, r2
 80258e4:	4413      	add	r3, r2
 80258e6:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->state++;
 80258e8:	6863      	ldr	r3, [r4, #4]
 80258ea:	3301      	adds	r3, #1
 80258ec:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 80258ee:	4b16      	ldr	r3, [pc, #88]	; (8025948 <mbedtls_ssl_parse_change_cipher_spec+0xd0>)
 80258f0:	9300      	str	r3, [sp, #0]
 80258f2:	f241 734e 	movw	r3, #5966	; 0x174e
 80258f6:	4a12      	ldr	r2, [pc, #72]	; (8025940 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 80258f8:	2102      	movs	r1, #2
 80258fa:	4620      	mov	r0, r4
 80258fc:	f7ef ff08 	bl	8015710 <mbedtls_debug_print_msg>
}
 8025900:	4628      	mov	r0, r5
 8025902:	b003      	add	sp, #12
 8025904:	bd30      	pop	{r4, r5, pc}
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8025906:	9001      	str	r0, [sp, #4]
 8025908:	4b10      	ldr	r3, [pc, #64]	; (802594c <mbedtls_ssl_parse_change_cipher_spec+0xd4>)
 802590a:	9300      	str	r3, [sp, #0]
 802590c:	f241 7312 	movw	r3, #5906	; 0x1712
 8025910:	4a0b      	ldr	r2, [pc, #44]	; (8025940 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 8025912:	2101      	movs	r1, #1
 8025914:	4620      	mov	r0, r4
 8025916:	f7ef ff2d 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 802591a:	e7f1      	b.n	8025900 <mbedtls_ssl_parse_change_cipher_spec+0x88>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 802591c:	4b0c      	ldr	r3, [pc, #48]	; (8025950 <mbedtls_ssl_parse_change_cipher_spec+0xd8>)
 802591e:	9300      	str	r3, [sp, #0]
 8025920:	f241 7318 	movw	r3, #5912	; 0x1718
 8025924:	4a06      	ldr	r2, [pc, #24]	; (8025940 <mbedtls_ssl_parse_change_cipher_spec+0xc8>)
 8025926:	2101      	movs	r1, #1
 8025928:	4620      	mov	r0, r4
 802592a:	f7ef fef1 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 802592e:	220a      	movs	r2, #10
 8025930:	2102      	movs	r1, #2
 8025932:	4620      	mov	r0, r4
 8025934:	f7ff fab8 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8025938:	4d06      	ldr	r5, [pc, #24]	; (8025954 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 802593a:	e7e1      	b.n	8025900 <mbedtls_ssl_parse_change_cipher_spec+0x88>
 802593c:	08035d30 	.word	0x08035d30
 8025940:	08035174 	.word	0x08035174
 8025944:	08035d6c 	.word	0x08035d6c
 8025948:	08035da0 	.word	0x08035da0
 802594c:	08033d80 	.word	0x08033d80
 8025950:	08035d4c 	.word	0x08035d4c
 8025954:	ffff8900 	.word	0xffff8900

08025958 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8025958:	7a4b      	ldrb	r3, [r1, #9]
 802595a:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 802595c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802595e:	bf0c      	ite	eq
 8025960:	4a02      	ldreq	r2, [pc, #8]	; (802596c <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 8025962:	4a03      	ldrne	r2, [pc, #12]	; (8025970 <mbedtls_ssl_optimize_checksum+0x18>)
 8025964:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
}
 8025968:	4770      	bx	lr
 802596a:	bf00      	nop
 802596c:	08023f17 	.word	0x08023f17
 8025970:	08023f09 	.word	0x08023f09

08025974 <mbedtls_ssl_write_finished>:
{
 8025974:	b530      	push	{r4, r5, lr}
 8025976:	b083      	sub	sp, #12
 8025978:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 802597a:	4b36      	ldr	r3, [pc, #216]	; (8025a54 <mbedtls_ssl_write_finished+0xe0>)
 802597c:	9300      	str	r3, [sp, #0]
 802597e:	f641 03fe 	movw	r3, #6398	; 0x18fe
 8025982:	4a35      	ldr	r2, [pc, #212]	; (8025a58 <mbedtls_ssl_write_finished+0xe4>)
 8025984:	2102      	movs	r1, #2
 8025986:	f7ef fec3 	bl	8015710 <mbedtls_debug_print_msg>
    ssl_update_out_pointers( ssl, ssl->transform_negotiate );
 802598a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802598c:	4620      	mov	r0, r4
 802598e:	f7fe f853 	bl	8023a38 <ssl_update_out_pointers>
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 8025992:	6823      	ldr	r3, [r4, #0]
 8025994:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8025998:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 802599c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802599e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 80259a2:	f002 0201 	and.w	r2, r2, #1
 80259a6:	3104      	adds	r1, #4
 80259a8:	4620      	mov	r0, r4
 80259aa:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80259ac:	68e3      	ldr	r3, [r4, #12]
 80259ae:	2b00      	cmp	r3, #0
    ssl->out_msglen  = 4 + hash_len;
 80259b0:	bf14      	ite	ne
 80259b2:	2310      	movne	r3, #16
 80259b4:	2328      	moveq	r3, #40	; 0x28
 80259b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80259ba:	2316      	movs	r3, #22
 80259bc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80259c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80259c4:	2214      	movs	r2, #20
 80259c6:	701a      	strb	r2, [r3, #0]
    if( ssl->handshake->resume != 0 )
 80259c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80259ca:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80259ce:	b17b      	cbz	r3, 80259f0 <mbedtls_ssl_write_finished+0x7c>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80259d0:	6823      	ldr	r3, [r4, #0]
 80259d2:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 80259d6:	f012 0f01 	tst.w	r2, #1
 80259da:	d106      	bne.n	80259ea <mbedtls_ssl_write_finished+0x76>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80259dc:	220f      	movs	r2, #15
 80259de:	6062      	str	r2, [r4, #4]
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
 80259e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80259e4:	f013 0f01 	tst.w	r3, #1
 80259e8:	d005      	beq.n	80259f6 <mbedtls_ssl_write_finished+0x82>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 80259ea:	230a      	movs	r3, #10
 80259ec:	6063      	str	r3, [r4, #4]
 80259ee:	e002      	b.n	80259f6 <mbedtls_ssl_write_finished+0x82>
        ssl->state++;
 80259f0:	6863      	ldr	r3, [r4, #4]
 80259f2:	3301      	adds	r3, #1
 80259f4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 80259f6:	4b19      	ldr	r3, [pc, #100]	; (8025a5c <mbedtls_ssl_write_finished+0xe8>)
 80259f8:	9300      	str	r3, [sp, #0]
 80259fa:	f641 132b 	movw	r3, #6443	; 0x192b
 80259fe:	4a16      	ldr	r2, [pc, #88]	; (8025a58 <mbedtls_ssl_write_finished+0xe4>)
 8025a00:	2103      	movs	r1, #3
 8025a02:	4620      	mov	r0, r4
 8025a04:	f7ef fe84 	bl	8015710 <mbedtls_debug_print_msg>
    memset( ssl->cur_out_ctr, 0, 8 );
 8025a08:	2300      	movs	r3, #0
 8025a0a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8025a0e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    ssl->transform_out = ssl->transform_negotiate;
 8025a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025a14:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 8025a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8025a18:	6263      	str	r3, [r4, #36]	; 0x24
    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
 8025a1a:	4620      	mov	r0, r4
 8025a1c:	f7ff f8b6 	bl	8024b8c <mbedtls_ssl_write_handshake_msg>
 8025a20:	4605      	mov	r5, r0
 8025a22:	b958      	cbnz	r0, 8025a3c <mbedtls_ssl_write_finished+0xc8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 8025a24:	4b0e      	ldr	r3, [pc, #56]	; (8025a60 <mbedtls_ssl_write_finished+0xec>)
 8025a26:	9300      	str	r3, [sp, #0]
 8025a28:	f641 136b 	movw	r3, #6507	; 0x196b
 8025a2c:	4a0a      	ldr	r2, [pc, #40]	; (8025a58 <mbedtls_ssl_write_finished+0xe4>)
 8025a2e:	2102      	movs	r1, #2
 8025a30:	4620      	mov	r0, r4
 8025a32:	f7ef fe6d 	bl	8015710 <mbedtls_debug_print_msg>
}
 8025a36:	4628      	mov	r0, r5
 8025a38:	b003      	add	sp, #12
 8025a3a:	bd30      	pop	{r4, r5, pc}
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
 8025a3c:	9001      	str	r0, [sp, #4]
 8025a3e:	4b09      	ldr	r3, [pc, #36]	; (8025a64 <mbedtls_ssl_write_finished+0xf0>)
 8025a40:	9300      	str	r3, [sp, #0]
 8025a42:	f641 135e 	movw	r3, #6494	; 0x195e
 8025a46:	4a04      	ldr	r2, [pc, #16]	; (8025a58 <mbedtls_ssl_write_finished+0xe4>)
 8025a48:	2101      	movs	r1, #1
 8025a4a:	4620      	mov	r0, r4
 8025a4c:	f7ef fe92 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8025a50:	e7f1      	b.n	8025a36 <mbedtls_ssl_write_finished+0xc2>
 8025a52:	bf00      	nop
 8025a54:	08035dbc 	.word	0x08035dbc
 8025a58:	08035174 	.word	0x08035174
 8025a5c:	08035dd0 	.word	0x08035dd0
 8025a60:	08035e04 	.word	0x08035e04
 8025a64:	08033d30 	.word	0x08033d30

08025a68 <mbedtls_ssl_parse_finished>:
{
 8025a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a6a:	b087      	sub	sp, #28
 8025a6c:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 8025a6e:	4b4d      	ldr	r3, [pc, #308]	; (8025ba4 <mbedtls_ssl_parse_finished+0x13c>)
 8025a70:	9300      	str	r3, [sp, #0]
 8025a72:	f641 137c 	movw	r3, #6524	; 0x197c
 8025a76:	4a4c      	ldr	r2, [pc, #304]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025a78:	2102      	movs	r1, #2
 8025a7a:	f7ef fe49 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 8025a7e:	682b      	ldr	r3, [r5, #0]
 8025a80:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8025a84:	43d2      	mvns	r2, r2
 8025a86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8025a88:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 8025a8c:	f002 0201 	and.w	r2, r2, #1
 8025a90:	a903      	add	r1, sp, #12
 8025a92:	4628      	mov	r0, r5
 8025a94:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8025a96:	2101      	movs	r1, #1
 8025a98:	4628      	mov	r0, r5
 8025a9a:	f7ff fa5d 	bl	8024f58 <mbedtls_ssl_read_record>
 8025a9e:	4606      	mov	r6, r0
 8025aa0:	2800      	cmp	r0, #0
 8025aa2:	d134      	bne.n	8025b0e <mbedtls_ssl_parse_finished+0xa6>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 8025aa4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8025aa6:	2b16      	cmp	r3, #22
 8025aa8:	d13c      	bne.n	8025b24 <mbedtls_ssl_parse_finished+0xbc>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 8025aaa:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8025aac:	783b      	ldrb	r3, [r7, #0]
 8025aae:	2b14      	cmp	r3, #20
 8025ab0:	d148      	bne.n	8025b44 <mbedtls_ssl_parse_finished+0xdc>
 8025ab2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8025ab4:	2b10      	cmp	r3, #16
 8025ab6:	d145      	bne.n	8025b44 <mbedtls_ssl_parse_finished+0xdc>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 8025ab8:	2300      	movs	r3, #0
 8025aba:	f88d 300b 	strb.w	r3, [sp, #11]

    for( i = 0; i < n; i++ )
 8025abe:	1d39      	adds	r1, r7, #4
 8025ac0:	ac03      	add	r4, sp, #12
 8025ac2:	3710      	adds	r7, #16
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 8025ac4:	f811 0b01 	ldrb.w	r0, [r1], #1
 8025ac8:	f814 2b01 	ldrb.w	r2, [r4], #1
        diff |= x ^ y;
 8025acc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8025ad0:	4042      	eors	r2, r0
 8025ad2:	4313      	orrs	r3, r2
 8025ad4:	f88d 300b 	strb.w	r3, [sp, #11]
    for( i = 0; i < n; i++ )
 8025ad8:	42b9      	cmp	r1, r7
 8025ada:	d1f3      	bne.n	8025ac4 <mbedtls_ssl_parse_finished+0x5c>
    }

    return( diff );
 8025adc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 8025ae0:	2b00      	cmp	r3, #0
 8025ae2:	d13f      	bne.n	8025b64 <mbedtls_ssl_parse_finished+0xfc>
    if( ssl->handshake->resume != 0 )
 8025ae4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8025ae6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d04a      	beq.n	8025b84 <mbedtls_ssl_parse_finished+0x11c>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8025aee:	682b      	ldr	r3, [r5, #0]
 8025af0:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8025af4:	f012 0f01 	tst.w	r2, #1
 8025af8:	d106      	bne.n	8025b08 <mbedtls_ssl_parse_finished+0xa0>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 8025afa:	220a      	movs	r2, #10
 8025afc:	606a      	str	r2, [r5, #4]
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
 8025afe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8025b02:	f013 0f01 	tst.w	r3, #1
 8025b06:	d040      	beq.n	8025b8a <mbedtls_ssl_parse_finished+0x122>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 8025b08:	230f      	movs	r3, #15
 8025b0a:	606b      	str	r3, [r5, #4]
 8025b0c:	e03d      	b.n	8025b8a <mbedtls_ssl_parse_finished+0x122>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8025b0e:	9001      	str	r0, [sp, #4]
 8025b10:	4b26      	ldr	r3, [pc, #152]	; (8025bac <mbedtls_ssl_parse_finished+0x144>)
 8025b12:	9300      	str	r3, [sp, #0]
 8025b14:	f641 1382 	movw	r3, #6530	; 0x1982
 8025b18:	4a23      	ldr	r2, [pc, #140]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025b1a:	2101      	movs	r1, #1
 8025b1c:	4628      	mov	r0, r5
 8025b1e:	f7ef fe29 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 8025b22:	e03b      	b.n	8025b9c <mbedtls_ssl_parse_finished+0x134>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8025b24:	4b22      	ldr	r3, [pc, #136]	; (8025bb0 <mbedtls_ssl_parse_finished+0x148>)
 8025b26:	9300      	str	r3, [sp, #0]
 8025b28:	f641 1388 	movw	r3, #6536	; 0x1988
 8025b2c:	4a1e      	ldr	r2, [pc, #120]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025b2e:	2101      	movs	r1, #1
 8025b30:	4628      	mov	r0, r5
 8025b32:	f7ef fded 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8025b36:	220a      	movs	r2, #10
 8025b38:	2102      	movs	r1, #2
 8025b3a:	4628      	mov	r0, r5
 8025b3c:	f7ff f9b4 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8025b40:	4e1c      	ldr	r6, [pc, #112]	; (8025bb4 <mbedtls_ssl_parse_finished+0x14c>)
 8025b42:	e02b      	b.n	8025b9c <mbedtls_ssl_parse_finished+0x134>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8025b44:	4b1a      	ldr	r3, [pc, #104]	; (8025bb0 <mbedtls_ssl_parse_finished+0x148>)
 8025b46:	9300      	str	r3, [sp, #0]
 8025b48:	f641 1399 	movw	r3, #6553	; 0x1999
 8025b4c:	4a16      	ldr	r2, [pc, #88]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025b4e:	2101      	movs	r1, #1
 8025b50:	4628      	mov	r0, r5
 8025b52:	f7ef fddd 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8025b56:	2232      	movs	r2, #50	; 0x32
 8025b58:	2102      	movs	r1, #2
 8025b5a:	4628      	mov	r0, r5
 8025b5c:	f7ff f9a4 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8025b60:	4e15      	ldr	r6, [pc, #84]	; (8025bb8 <mbedtls_ssl_parse_finished+0x150>)
 8025b62:	e01b      	b.n	8025b9c <mbedtls_ssl_parse_finished+0x134>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 8025b64:	4b12      	ldr	r3, [pc, #72]	; (8025bb0 <mbedtls_ssl_parse_finished+0x148>)
 8025b66:	9300      	str	r3, [sp, #0]
 8025b68:	f641 13a2 	movw	r3, #6562	; 0x19a2
 8025b6c:	4a0e      	ldr	r2, [pc, #56]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025b6e:	2101      	movs	r1, #1
 8025b70:	4628      	mov	r0, r5
 8025b72:	f7ef fdcd 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8025b76:	2232      	movs	r2, #50	; 0x32
 8025b78:	2102      	movs	r1, #2
 8025b7a:	4628      	mov	r0, r5
 8025b7c:	f7ff f994 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 8025b80:	4e0d      	ldr	r6, [pc, #52]	; (8025bb8 <mbedtls_ssl_parse_finished+0x150>)
 8025b82:	e00b      	b.n	8025b9c <mbedtls_ssl_parse_finished+0x134>
        ssl->state++;
 8025b84:	686b      	ldr	r3, [r5, #4]
 8025b86:	3301      	adds	r3, #1
 8025b88:	606b      	str	r3, [r5, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 8025b8a:	4b0c      	ldr	r3, [pc, #48]	; (8025bbc <mbedtls_ssl_parse_finished+0x154>)
 8025b8c:	9300      	str	r3, [sp, #0]
 8025b8e:	f44f 53ce 	mov.w	r3, #6592	; 0x19c0
 8025b92:	4a05      	ldr	r2, [pc, #20]	; (8025ba8 <mbedtls_ssl_parse_finished+0x140>)
 8025b94:	2102      	movs	r1, #2
 8025b96:	4628      	mov	r0, r5
 8025b98:	f7ef fdba 	bl	8015710 <mbedtls_debug_print_msg>
}
 8025b9c:	4630      	mov	r0, r6
 8025b9e:	b007      	add	sp, #28
 8025ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ba2:	bf00      	nop
 8025ba4:	08035e18 	.word	0x08035e18
 8025ba8:	08035174 	.word	0x08035174
 8025bac:	08033d80 	.word	0x08033d80
 8025bb0:	08035e2c 	.word	0x08035e2c
 8025bb4:	ffff8900 	.word	0xffff8900
 8025bb8:	ffff8180 	.word	0xffff8180
 8025bbc:	08035e44 	.word	0x08035e44

08025bc0 <mbedtls_ssl_session_init>:
{
 8025bc0:	b508      	push	{r3, lr}
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 8025bc2:	2270      	movs	r2, #112	; 0x70
 8025bc4:	2100      	movs	r1, #0
 8025bc6:	f004 fce0 	bl	802a58a <memset>
}
 8025bca:	bd08      	pop	{r3, pc}

08025bcc <mbedtls_ssl_init>:
{
 8025bcc:	b508      	push	{r3, lr}
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 8025bce:	22bc      	movs	r2, #188	; 0xbc
 8025bd0:	2100      	movs	r1, #0
 8025bd2:	f004 fcda 	bl	802a58a <memset>
}
 8025bd6:	bd08      	pop	{r3, pc}

08025bd8 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 8025bd8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8025bdc:	f361 0383 	bfi	r3, r1, #2, #2
 8025be0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 8025be4:	4770      	bx	lr

08025be6 <mbedtls_ssl_conf_rng>:
    conf->f_rng      = f_rng;
 8025be6:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 8025be8:	61c2      	str	r2, [r0, #28]
}
 8025bea:	4770      	bx	lr

08025bec <mbedtls_ssl_conf_dbg>:
    conf->f_dbg      = f_dbg;
 8025bec:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 8025bee:	6142      	str	r2, [r0, #20]
}
 8025bf0:	4770      	bx	lr

08025bf2 <mbedtls_ssl_set_bio>:
    ssl->p_bio          = p_bio;
 8025bf2:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 8025bf4:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
 8025bf6:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 8025bf8:	9b00      	ldr	r3, [sp, #0]
 8025bfa:	6183      	str	r3, [r0, #24]
}
 8025bfc:	4770      	bx	lr

08025bfe <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 8025bfe:	6641      	str	r1, [r0, #100]	; 0x64
}
 8025c00:	4770      	bx	lr
	...

08025c04 <mbedtls_ssl_conf_own_cert>:
{
 8025c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c06:	4605      	mov	r5, r0
 8025c08:	460f      	mov	r7, r1
 8025c0a:	4616      	mov	r6, r2
    new_cert = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8025c0c:	210c      	movs	r1, #12
 8025c0e:	2001      	movs	r0, #1
 8025c10:	f003 f93c 	bl	8028e8c <mbedtls_calloc>
    if( new_cert == NULL )
 8025c14:	b180      	cbz	r0, 8025c38 <mbedtls_ssl_conf_own_cert+0x34>
 8025c16:	4604      	mov	r4, r0
    new_cert->cert = cert;
 8025c18:	6007      	str	r7, [r0, #0]
    new_cert->key  = key;
 8025c1a:	6046      	str	r6, [r0, #4]
    new_cert->next = NULL;
 8025c1c:	2300      	movs	r3, #0
 8025c1e:	6083      	str	r3, [r0, #8]
    if( *head == NULL )
 8025c20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8025c22:	b133      	cbz	r3, 8025c32 <mbedtls_ssl_conf_own_cert+0x2e>
        while( cur->next != NULL )
 8025c24:	461a      	mov	r2, r3
 8025c26:	689b      	ldr	r3, [r3, #8]
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	d1fb      	bne.n	8025c24 <mbedtls_ssl_conf_own_cert+0x20>
        cur->next = new_cert;
 8025c2c:	6094      	str	r4, [r2, #8]
    return( 0 );
 8025c2e:	2000      	movs	r0, #0
}
 8025c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *head = new_cert;
 8025c32:	63a8      	str	r0, [r5, #56]	; 0x38
    return( 0 );
 8025c34:	2000      	movs	r0, #0
 8025c36:	e7fb      	b.n	8025c30 <mbedtls_ssl_conf_own_cert+0x2c>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8025c38:	4800      	ldr	r0, [pc, #0]	; (8025c3c <mbedtls_ssl_conf_own_cert+0x38>)
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 8025c3a:	e7f9      	b.n	8025c30 <mbedtls_ssl_conf_own_cert+0x2c>
 8025c3c:	ffff8100 	.word	0xffff8100

08025c40 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_chain   = ca_chain;
 8025c40:	63c1      	str	r1, [r0, #60]	; 0x3c
    conf->ca_crl     = ca_crl;
 8025c42:	6402      	str	r2, [r0, #64]	; 0x40
}
 8025c44:	4770      	bx	lr

08025c46 <mbedtls_ssl_conf_dh_param_bin>:
{
 8025c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c48:	4604      	mov	r4, r0
 8025c4a:	461d      	mov	r5, r3
    if( ( ret = mbedtls_mpi_read_binary( &conf->dhm_P, dhm_P, P_len ) ) != 0 ||
 8025c4c:	f100 074c 	add.w	r7, r0, #76	; 0x4c
 8025c50:	4638      	mov	r0, r7
 8025c52:	f7ec fe46 	bl	80128e2 <mbedtls_mpi_read_binary>
 8025c56:	4606      	mov	r6, r0
 8025c58:	b938      	cbnz	r0, 8025c6a <mbedtls_ssl_conf_dh_param_bin+0x24>
        ( ret = mbedtls_mpi_read_binary( &conf->dhm_G, dhm_G, G_len ) ) != 0 )
 8025c5a:	9a06      	ldr	r2, [sp, #24]
 8025c5c:	4629      	mov	r1, r5
 8025c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025c62:	f7ec fe3e 	bl	80128e2 <mbedtls_mpi_read_binary>
    if( ( ret = mbedtls_mpi_read_binary( &conf->dhm_P, dhm_P, P_len ) ) != 0 ||
 8025c66:	4606      	mov	r6, r0
 8025c68:	b130      	cbz	r0, 8025c78 <mbedtls_ssl_conf_dh_param_bin+0x32>
        mbedtls_mpi_free( &conf->dhm_P );
 8025c6a:	4638      	mov	r0, r7
 8025c6c:	f7ec fce3 	bl	8012636 <mbedtls_mpi_free>
        mbedtls_mpi_free( &conf->dhm_G );
 8025c70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025c74:	f7ec fcdf 	bl	8012636 <mbedtls_mpi_free>
}
 8025c78:	4630      	mov	r0, r6
 8025c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025c7c <mbedtls_ssl_set_hostname>:
{
 8025c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c7e:	4604      	mov	r4, r0
    if( hostname != NULL )
 8025c80:	b341      	cbz	r1, 8025cd4 <mbedtls_ssl_set_hostname+0x58>
 8025c82:	460f      	mov	r7, r1
        hostname_len = strlen( hostname );
 8025c84:	4608      	mov	r0, r1
 8025c86:	f7da fabd 	bl	8000204 <strlen>
 8025c8a:	4605      	mov	r5, r0
        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 8025c8c:	28ff      	cmp	r0, #255	; 0xff
 8025c8e:	d81d      	bhi.n	8025ccc <mbedtls_ssl_set_hostname+0x50>
    if( ssl->hostname != NULL )
 8025c90:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
 8025c94:	b156      	cbz	r6, 8025cac <mbedtls_ssl_set_hostname+0x30>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8025c96:	4630      	mov	r0, r6
 8025c98:	f7da fab4 	bl	8000204 <strlen>
 8025c9c:	4601      	mov	r1, r0
 8025c9e:	4630      	mov	r0, r6
 8025ca0:	f7f5 f950 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 8025ca4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8025ca8:	f003 f8fe 	bl	8028ea8 <mbedtls_free>
        ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 8025cac:	1c69      	adds	r1, r5, #1
 8025cae:	2001      	movs	r0, #1
 8025cb0:	f003 f8ec 	bl	8028e8c <mbedtls_calloc>
 8025cb4:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
        if( ssl->hostname == NULL )
 8025cb8:	b150      	cbz	r0, 8025cd0 <mbedtls_ssl_set_hostname+0x54>
        memcpy( ssl->hostname, hostname, hostname_len );
 8025cba:	462a      	mov	r2, r5
 8025cbc:	4639      	mov	r1, r7
 8025cbe:	f004 fc3c 	bl	802a53a <memcpy>
        ssl->hostname[hostname_len] = '\0';
 8025cc2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8025cc6:	2000      	movs	r0, #0
 8025cc8:	5558      	strb	r0, [r3, r5]
}
 8025cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8025ccc:	480a      	ldr	r0, [pc, #40]	; (8025cf8 <mbedtls_ssl_set_hostname+0x7c>)
 8025cce:	e7fc      	b.n	8025cca <mbedtls_ssl_set_hostname+0x4e>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8025cd0:	480a      	ldr	r0, [pc, #40]	; (8025cfc <mbedtls_ssl_set_hostname+0x80>)
 8025cd2:	e7fa      	b.n	8025cca <mbedtls_ssl_set_hostname+0x4e>
    if( ssl->hostname != NULL )
 8025cd4:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
 8025cd8:	b155      	cbz	r5, 8025cf0 <mbedtls_ssl_set_hostname+0x74>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 8025cda:	4628      	mov	r0, r5
 8025cdc:	f7da fa92 	bl	8000204 <strlen>
 8025ce0:	4601      	mov	r1, r0
 8025ce2:	4628      	mov	r0, r5
 8025ce4:	f7f5 f92e 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 8025ce8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8025cec:	f003 f8dc 	bl	8028ea8 <mbedtls_free>
        ssl->hostname = NULL;
 8025cf0:	2000      	movs	r0, #0
 8025cf2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8025cf6:	e7e8      	b.n	8025cca <mbedtls_ssl_set_hostname+0x4e>
 8025cf8:	ffff8f00 	.word	0xffff8f00
 8025cfc:	ffff8100 	.word	0xffff8100

08025d00 <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 8025d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8025d02:	b10b      	cbz	r3, 8025d08 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );
 8025d04:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8025d06:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 8025d08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8025d0a:	b10b      	cbz	r3, 8025d10 <mbedtls_ssl_get_verify_result+0x10>
        return( ssl->session_negotiate->verify_result );
 8025d0c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8025d0e:	4770      	bx	lr
    return( 0xFFFFFFFF );
 8025d10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8025d14:	4770      	bx	lr
	...

08025d18 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 8025d18:	b1a8      	cbz	r0, 8025d46 <mbedtls_ssl_handshake_step+0x2e>
{
 8025d1a:	b510      	push	{r4, lr}
 8025d1c:	4604      	mov	r4, r0
    if( ssl == NULL || ssl->conf == NULL )
 8025d1e:	6803      	ldr	r3, [r0, #0]
 8025d20:	b19b      	cbz	r3, 8025d4a <mbedtls_ssl_handshake_step+0x32>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8025d22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8025d26:	f013 0f01 	tst.w	r3, #1
 8025d2a:	d003      	beq.n	8025d34 <mbedtls_ssl_handshake_step+0x1c>
        ret = mbedtls_ssl_handshake_server_step( ssl );
 8025d2c:	4620      	mov	r0, r4
 8025d2e:	f7fb fec1 	bl	8021ab4 <mbedtls_ssl_handshake_server_step>
 8025d32:	e007      	b.n	8025d44 <mbedtls_ssl_handshake_step+0x2c>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 8025d34:	f7fa f932 	bl	801ff9c <mbedtls_ssl_handshake_client_step>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
 8025d38:	6823      	ldr	r3, [r4, #0]
 8025d3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8025d3e:	f013 0f01 	tst.w	r3, #1
 8025d42:	d1f3      	bne.n	8025d2c <mbedtls_ssl_handshake_step+0x14>
}
 8025d44:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8025d46:	4802      	ldr	r0, [pc, #8]	; (8025d50 <mbedtls_ssl_handshake_step+0x38>)
}
 8025d48:	4770      	bx	lr
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8025d4a:	4801      	ldr	r0, [pc, #4]	; (8025d50 <mbedtls_ssl_handshake_step+0x38>)
 8025d4c:	e7fa      	b.n	8025d44 <mbedtls_ssl_handshake_step+0x2c>
 8025d4e:	bf00      	nop
 8025d50:	ffff8f00 	.word	0xffff8f00

08025d54 <mbedtls_ssl_handshake>:
{
 8025d54:	b530      	push	{r4, r5, lr}
 8025d56:	b083      	sub	sp, #12
    if( ssl == NULL || ssl->conf == NULL )
 8025d58:	b308      	cbz	r0, 8025d9e <mbedtls_ssl_handshake+0x4a>
 8025d5a:	4604      	mov	r4, r0
 8025d5c:	6803      	ldr	r3, [r0, #0]
 8025d5e:	b303      	cbz	r3, 8025da2 <mbedtls_ssl_handshake+0x4e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 8025d60:	4b11      	ldr	r3, [pc, #68]	; (8025da8 <mbedtls_ssl_handshake+0x54>)
 8025d62:	9300      	str	r3, [sp, #0]
 8025d64:	f641 7394 	movw	r3, #8084	; 0x1f94
 8025d68:	4a10      	ldr	r2, [pc, #64]	; (8025dac <mbedtls_ssl_handshake+0x58>)
 8025d6a:	2102      	movs	r1, #2
 8025d6c:	f7ef fcd0 	bl	8015710 <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8025d70:	6863      	ldr	r3, [r4, #4]
 8025d72:	2b10      	cmp	r3, #16
 8025d74:	d006      	beq.n	8025d84 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 8025d76:	4620      	mov	r0, r4
 8025d78:	f7ff ffce 	bl	8025d18 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 8025d7c:	4605      	mov	r5, r0
 8025d7e:	2800      	cmp	r0, #0
 8025d80:	d0f6      	beq.n	8025d70 <mbedtls_ssl_handshake+0x1c>
 8025d82:	e000      	b.n	8025d86 <mbedtls_ssl_handshake+0x32>
 8025d84:	2500      	movs	r5, #0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 8025d86:	4b0a      	ldr	r3, [pc, #40]	; (8025db0 <mbedtls_ssl_handshake+0x5c>)
 8025d88:	9300      	str	r3, [sp, #0]
 8025d8a:	f641 739e 	movw	r3, #8094	; 0x1f9e
 8025d8e:	4a07      	ldr	r2, [pc, #28]	; (8025dac <mbedtls_ssl_handshake+0x58>)
 8025d90:	2102      	movs	r1, #2
 8025d92:	4620      	mov	r0, r4
 8025d94:	f7ef fcbc 	bl	8015710 <mbedtls_debug_print_msg>
}
 8025d98:	4628      	mov	r0, r5
 8025d9a:	b003      	add	sp, #12
 8025d9c:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8025d9e:	4d05      	ldr	r5, [pc, #20]	; (8025db4 <mbedtls_ssl_handshake+0x60>)
 8025da0:	e7fa      	b.n	8025d98 <mbedtls_ssl_handshake+0x44>
 8025da2:	4d04      	ldr	r5, [pc, #16]	; (8025db4 <mbedtls_ssl_handshake+0x60>)
 8025da4:	e7f8      	b.n	8025d98 <mbedtls_ssl_handshake+0x44>
 8025da6:	bf00      	nop
 8025da8:	08035e58 	.word	0x08035e58
 8025dac:	08035174 	.word	0x08035174
 8025db0:	08035e68 	.word	0x08035e68
 8025db4:	ffff8f00 	.word	0xffff8f00

08025db8 <mbedtls_ssl_read>:
{
 8025db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dbc:	b083      	sub	sp, #12
    if( ssl == NULL || ssl->conf == NULL )
 8025dbe:	2800      	cmp	r0, #0
 8025dc0:	f000 8111 	beq.w	8025fe6 <mbedtls_ssl_read+0x22e>
 8025dc4:	4689      	mov	r9, r1
 8025dc6:	4690      	mov	r8, r2
 8025dc8:	4604      	mov	r4, r0
 8025dca:	6803      	ldr	r3, [r0, #0]
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	f000 810d 	beq.w	8025fec <mbedtls_ssl_read+0x234>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 8025dd2:	4b88      	ldr	r3, [pc, #544]	; (8025ff4 <mbedtls_ssl_read+0x23c>)
 8025dd4:	9300      	str	r3, [sp, #0]
 8025dd6:	f242 034e 	movw	r3, #8270	; 0x204e
 8025dda:	4a87      	ldr	r2, [pc, #540]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025ddc:	2102      	movs	r1, #2
 8025dde:	f7ef fc97 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8025de2:	6863      	ldr	r3, [r4, #4]
 8025de4:	2b10      	cmp	r3, #16
 8025de6:	d107      	bne.n	8025df8 <mbedtls_ssl_read+0x40>
    while( ssl->in_offt == NULL )
 8025de8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8025dea:	2900      	cmp	r1, #0
 8025dec:	f040 80dc 	bne.w	8025fa8 <mbedtls_ssl_read+0x1f0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 8025df0:	4f81      	ldr	r7, [pc, #516]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025df2:	4e82      	ldr	r6, [pc, #520]	; (8025ffc <mbedtls_ssl_read+0x244>)
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 8025df4:	4d82      	ldr	r5, [pc, #520]	; (8026000 <mbedtls_ssl_read+0x248>)
 8025df6:	e03d      	b.n	8025e74 <mbedtls_ssl_read+0xbc>
        ret = mbedtls_ssl_handshake( ssl );
 8025df8:	4620      	mov	r0, r4
 8025dfa:	f7ff ffab 	bl	8025d54 <mbedtls_ssl_handshake>
 8025dfe:	4682      	mov	sl, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 8025e00:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 8025e04:	d0f0      	beq.n	8025de8 <mbedtls_ssl_read+0x30>
 8025e06:	2800      	cmp	r0, #0
 8025e08:	d0ee      	beq.n	8025de8 <mbedtls_ssl_read+0x30>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 8025e0a:	9001      	str	r0, [sp, #4]
 8025e0c:	4b7d      	ldr	r3, [pc, #500]	; (8026004 <mbedtls_ssl_read+0x24c>)
 8025e0e:	9300      	str	r3, [sp, #0]
 8025e10:	f242 037b 	movw	r3, #8315	; 0x207b
 8025e14:	4a78      	ldr	r2, [pc, #480]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025e16:	2101      	movs	r1, #1
 8025e18:	4620      	mov	r0, r4
 8025e1a:	f7ef fcab 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8025e1e:	e08a      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 8025e20:	6823      	ldr	r3, [r4, #0]
 8025e22:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8025e24:	4620      	mov	r0, r4
 8025e26:	f7fd fe37 	bl	8023a98 <ssl_set_timer>
 8025e2a:	e02a      	b.n	8025e82 <mbedtls_ssl_read+0xca>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 8025e2c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 8025e30:	d102      	bne.n	8025e38 <mbedtls_ssl_read+0x80>
                return( 0 );
 8025e32:	f04f 0a00 	mov.w	sl, #0
 8025e36:	e07e      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8025e38:	9001      	str	r0, [sp, #4]
 8025e3a:	4b73      	ldr	r3, [pc, #460]	; (8026008 <mbedtls_ssl_read+0x250>)
 8025e3c:	9300      	str	r3, [sp, #0]
 8025e3e:	f242 038f 	movw	r3, #8335	; 0x208f
 8025e42:	4a6d      	ldr	r2, [pc, #436]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025e44:	2101      	movs	r1, #1
 8025e46:	4620      	mov	r0, r4
 8025e48:	f7ef fc94 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8025e4c:	e073      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8025e4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8025e50:	2b16      	cmp	r3, #22
 8025e52:	d039      	beq.n	8025ec8 <mbedtls_ssl_read+0x110>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8025e54:	2b15      	cmp	r3, #21
 8025e56:	f000 808a 	beq.w	8025f6e <mbedtls_ssl_read+0x1b6>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8025e5a:	2b17      	cmp	r3, #23
 8025e5c:	f040 8093 	bne.w	8025f86 <mbedtls_ssl_read+0x1ce>
        ssl->in_offt = ssl->in_msg;
 8025e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025e62:	66a3      	str	r3, [r4, #104]	; 0x68
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 8025e64:	6863      	ldr	r3, [r4, #4]
 8025e66:	2b10      	cmp	r3, #16
 8025e68:	f000 8099 	beq.w	8025f9e <mbedtls_ssl_read+0x1e6>
    while( ssl->in_offt == NULL )
 8025e6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8025e6e:	2900      	cmp	r1, #0
 8025e70:	f040 809a 	bne.w	8025fa8 <mbedtls_ssl_read+0x1f0>
        if( ssl->f_get_timer != NULL &&
 8025e74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8025e76:	b123      	cbz	r3, 8025e82 <mbedtls_ssl_read+0xca>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 8025e78:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8025e7a:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 8025e7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025e80:	d0ce      	beq.n	8025e20 <mbedtls_ssl_read+0x68>
        if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8025e82:	2101      	movs	r1, #1
 8025e84:	4620      	mov	r0, r4
 8025e86:	f7ff f867 	bl	8024f58 <mbedtls_ssl_read_record>
 8025e8a:	4682      	mov	sl, r0
 8025e8c:	2800      	cmp	r0, #0
 8025e8e:	d1cd      	bne.n	8025e2c <mbedtls_ssl_read+0x74>
        if( ssl->in_msglen  == 0 &&
 8025e90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	d1db      	bne.n	8025e4e <mbedtls_ssl_read+0x96>
 8025e96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8025e98:	2b17      	cmp	r3, #23
 8025e9a:	d1d8      	bne.n	8025e4e <mbedtls_ssl_read+0x96>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8025e9c:	2101      	movs	r1, #1
 8025e9e:	4620      	mov	r0, r4
 8025ea0:	f7ff f85a 	bl	8024f58 <mbedtls_ssl_read_record>
 8025ea4:	4683      	mov	fp, r0
 8025ea6:	2800      	cmp	r0, #0
 8025ea8:	d0d1      	beq.n	8025e4e <mbedtls_ssl_read+0x96>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 8025eaa:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 8025eae:	d042      	beq.n	8025f36 <mbedtls_ssl_read+0x17e>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 8025eb0:	9001      	str	r0, [sp, #4]
 8025eb2:	4b55      	ldr	r3, [pc, #340]	; (8026008 <mbedtls_ssl_read+0x250>)
 8025eb4:	9300      	str	r3, [sp, #0]
 8025eb6:	f242 039e 	movw	r3, #8350	; 0x209e
 8025eba:	4a4f      	ldr	r2, [pc, #316]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025ebc:	2101      	movs	r1, #1
 8025ebe:	4620      	mov	r0, r4
 8025ec0:	f7ef fc58 	bl	8015774 <mbedtls_debug_print_ret>
            if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 8025ec4:	46da      	mov	sl, fp
                return( ret );
 8025ec6:	e036      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 8025ec8:	9600      	str	r6, [sp, #0]
 8025eca:	f242 03a5 	movw	r3, #8357	; 0x20a5
 8025ece:	463a      	mov	r2, r7
 8025ed0:	2101      	movs	r1, #1
 8025ed2:	4620      	mov	r0, r4
 8025ed4:	f7ef fc1c 	bl	8015710 <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 8025ed8:	6823      	ldr	r3, [r4, #0]
 8025eda:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8025ede:	f013 0f01 	tst.w	r3, #1
 8025ee2:	d111      	bne.n	8025f08 <mbedtls_ssl_read+0x150>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 8025ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 8025ee6:	781b      	ldrb	r3, [r3, #0]
 8025ee8:	b913      	cbnz	r3, 8025ef0 <mbedtls_ssl_read+0x138>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 8025eea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8025eec:	2b04      	cmp	r3, #4
 8025eee:	d00f      	beq.n	8025f10 <mbedtls_ssl_read+0x158>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 8025ef0:	4b46      	ldr	r3, [pc, #280]	; (802600c <mbedtls_ssl_read+0x254>)
 8025ef2:	9300      	str	r3, [sp, #0]
 8025ef4:	f242 03b2 	movw	r3, #8370	; 0x20b2
 8025ef8:	4a3f      	ldr	r2, [pc, #252]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025efa:	2101      	movs	r1, #1
 8025efc:	4620      	mov	r0, r4
 8025efe:	f7ef fc07 	bl	8015710 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8025f02:	f8df a120 	ldr.w	sl, [pc, #288]	; 8026024 <mbedtls_ssl_read+0x26c>
 8025f06:	e016      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
                ssl->in_msg[0] != MBEDTLS_SSL_HS_CLIENT_HELLO )
 8025f08:	6e63      	ldr	r3, [r4, #100]	; 0x64
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
 8025f0a:	781b      	ldrb	r3, [r3, #0]
 8025f0c:	2b01      	cmp	r3, #1
 8025f0e:	d116      	bne.n	8025f3e <mbedtls_ssl_read+0x186>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 8025f10:	9500      	str	r5, [sp, #0]
 8025f12:	f242 03f2 	movw	r3, #8434	; 0x20f2
 8025f16:	463a      	mov	r2, r7
 8025f18:	2103      	movs	r1, #3
 8025f1a:	4620      	mov	r0, r4
 8025f1c:	f7ef fbf8 	bl	8015710 <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8025f20:	68e3      	ldr	r3, [r4, #12]
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	dd17      	ble.n	8025f56 <mbedtls_ssl_read+0x19e>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 8025f26:	2264      	movs	r2, #100	; 0x64
 8025f28:	2101      	movs	r1, #1
 8025f2a:	4620      	mov	r0, r4
 8025f2c:	f7fe ffbc 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
 8025f30:	4682      	mov	sl, r0
 8025f32:	2800      	cmp	r0, #0
 8025f34:	d09a      	beq.n	8025e6c <mbedtls_ssl_read+0xb4>
}
 8025f36:	4650      	mov	r0, sl
 8025f38:	b003      	add	sp, #12
 8025f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not ClientHello)" ) );
 8025f3e:	4b34      	ldr	r3, [pc, #208]	; (8026010 <mbedtls_ssl_read+0x258>)
 8025f40:	9300      	str	r3, [sp, #0]
 8025f42:	f242 03c3 	movw	r3, #8387	; 0x20c3
 8025f46:	4a2c      	ldr	r2, [pc, #176]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025f48:	2101      	movs	r1, #1
 8025f4a:	4620      	mov	r0, r4
 8025f4c:	f7ef fbe0 	bl	8015710 <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8025f50:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8026024 <mbedtls_ssl_read+0x26c>
 8025f54:	e7ef      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 8025f56:	4b2f      	ldr	r3, [pc, #188]	; (8026014 <mbedtls_ssl_read+0x25c>)
 8025f58:	9300      	str	r3, [sp, #0]
 8025f5a:	f242 130e 	movw	r3, #8462	; 0x210e
 8025f5e:	4a26      	ldr	r2, [pc, #152]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025f60:	2101      	movs	r1, #1
 8025f62:	4620      	mov	r0, r4
 8025f64:	f7ef fbd4 	bl	8015710 <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8025f68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8026028 <mbedtls_ssl_read+0x270>
 8025f6c:	e7e3      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 8025f6e:	4b2a      	ldr	r3, [pc, #168]	; (8026018 <mbedtls_ssl_read+0x260>)
 8025f70:	9300      	str	r3, [sp, #0]
 8025f72:	f242 1339 	movw	r3, #8505	; 0x2139
 8025f76:	4a20      	ldr	r2, [pc, #128]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025f78:	2102      	movs	r1, #2
 8025f7a:	4620      	mov	r0, r4
 8025f7c:	f7ef fbc8 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 8025f80:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 802602c <mbedtls_ssl_read+0x274>
 8025f84:	e7d7      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 8025f86:	4b25      	ldr	r3, [pc, #148]	; (802601c <mbedtls_ssl_read+0x264>)
 8025f88:	9300      	str	r3, [sp, #0]
 8025f8a:	f242 133f 	movw	r3, #8511	; 0x213f
 8025f8e:	4a1a      	ldr	r2, [pc, #104]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025f90:	2101      	movs	r1, #1
 8025f92:	4620      	mov	r0, r4
 8025f94:	f7ef fbbc 	bl	8015710 <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 8025f98:	f8df a088 	ldr.w	sl, [pc, #136]	; 8026024 <mbedtls_ssl_read+0x26c>
 8025f9c:	e7cb      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
            ssl_set_timer( ssl, 0 );
 8025f9e:	2100      	movs	r1, #0
 8025fa0:	4620      	mov	r0, r4
 8025fa2:	f7fd fd79 	bl	8023a98 <ssl_set_timer>
 8025fa6:	e761      	b.n	8025e6c <mbedtls_ssl_read+0xb4>
    n = ( len < ssl->in_msglen )
 8025fa8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8025faa:	4646      	mov	r6, r8
 8025fac:	4590      	cmp	r8, r2
 8025fae:	bf28      	it	cs
 8025fb0:	4616      	movcs	r6, r2
    memcpy( buf, ssl->in_offt, n );
 8025fb2:	4632      	mov	r2, r6
 8025fb4:	4648      	mov	r0, r9
 8025fb6:	f004 fac0 	bl	802a53a <memcpy>
    ssl->in_msglen -= n;
 8025fba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8025fbc:	1b9b      	subs	r3, r3, r6
 8025fbe:	6723      	str	r3, [r4, #112]	; 0x70
    if( ssl->in_msglen == 0 )
 8025fc0:	b96b      	cbnz	r3, 8025fde <mbedtls_ssl_read+0x226>
        ssl->in_offt = NULL;
 8025fc2:	66a3      	str	r3, [r4, #104]	; 0x68
        ssl->keep_current_message = 0;
 8025fc4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 8025fc8:	4b15      	ldr	r3, [pc, #84]	; (8026020 <mbedtls_ssl_read+0x268>)
 8025fca:	9300      	str	r3, [sp, #0]
 8025fcc:	f242 136e 	movw	r3, #8558	; 0x216e
 8025fd0:	4a09      	ldr	r2, [pc, #36]	; (8025ff8 <mbedtls_ssl_read+0x240>)
 8025fd2:	2102      	movs	r1, #2
 8025fd4:	4620      	mov	r0, r4
 8025fd6:	f7ef fb9b 	bl	8015710 <mbedtls_debug_print_msg>
    return( (int) n );
 8025fda:	46b2      	mov	sl, r6
 8025fdc:	e7ab      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
        ssl->in_offt += n;
 8025fde:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8025fe0:	4433      	add	r3, r6
 8025fe2:	66a3      	str	r3, [r4, #104]	; 0x68
 8025fe4:	e7f0      	b.n	8025fc8 <mbedtls_ssl_read+0x210>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8025fe6:	f8df a048 	ldr.w	sl, [pc, #72]	; 8026030 <mbedtls_ssl_read+0x278>
 8025fea:	e7a4      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
 8025fec:	f8df a040 	ldr.w	sl, [pc, #64]	; 8026030 <mbedtls_ssl_read+0x278>
 8025ff0:	e7a1      	b.n	8025f36 <mbedtls_ssl_read+0x17e>
 8025ff2:	bf00      	nop
 8025ff4:	08035e78 	.word	0x08035e78
 8025ff8:	08035174 	.word	0x08035174
 8025ffc:	08035e98 	.word	0x08035e98
 8026000:	08035f04 	.word	0x08035f04
 8026004:	08035e80 	.word	0x08035e80
 8026008:	08033d80 	.word	0x08033d80
 802600c:	08035eb4 	.word	0x08035eb4
 8026010:	08035edc 	.word	0x08035edc
 8026014:	08034130 	.word	0x08034130
 8026018:	08035f2c 	.word	0x08035f2c
 802601c:	08035f54 	.word	0x08035f54
 8026020:	08035f74 	.word	0x08035f74
 8026024:	ffff8900 	.word	0xffff8900
 8026028:	ffff9400 	.word	0xffff9400
 802602c:	ffff9700 	.word	0xffff9700
 8026030:	ffff8f00 	.word	0xffff8f00

08026034 <mbedtls_ssl_write>:
{
 8026034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026036:	b083      	sub	sp, #12
 8026038:	4604      	mov	r4, r0
 802603a:	460f      	mov	r7, r1
 802603c:	4615      	mov	r5, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 802603e:	4b33      	ldr	r3, [pc, #204]	; (802610c <mbedtls_ssl_write+0xd8>)
 8026040:	9300      	str	r3, [sp, #0]
 8026042:	f242 13ea 	movw	r3, #8682	; 0x21ea
 8026046:	4a32      	ldr	r2, [pc, #200]	; (8026110 <mbedtls_ssl_write+0xdc>)
 8026048:	2102      	movs	r1, #2
 802604a:	f7ef fb61 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 802604e:	2c00      	cmp	r4, #0
 8026050:	d057      	beq.n	8026102 <mbedtls_ssl_write+0xce>
 8026052:	6823      	ldr	r3, [r4, #0]
 8026054:	2b00      	cmp	r3, #0
 8026056:	d056      	beq.n	8026106 <mbedtls_ssl_write+0xd2>
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 8026058:	6863      	ldr	r3, [r4, #4]
 802605a:	2b10      	cmp	r3, #16
 802605c:	d004      	beq.n	8026068 <mbedtls_ssl_write+0x34>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 802605e:	4620      	mov	r0, r4
 8026060:	f7ff fe78 	bl	8025d54 <mbedtls_ssl_handshake>
 8026064:	4606      	mov	r6, r0
 8026066:	b9c8      	cbnz	r0, 802609c <mbedtls_ssl_write+0x68>
    if( len > max_len )
 8026068:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 802606c:	bf28      	it	cs
 802606e:	f44f 5500 	movcs.w	r5, #8192	; 0x2000
    if( ssl->out_left != 0 )
 8026072:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8026076:	b33b      	cbz	r3, 80260c8 <mbedtls_ssl_write+0x94>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8026078:	4620      	mov	r0, r4
 802607a:	f7fe faf5 	bl	8024668 <mbedtls_ssl_flush_output>
 802607e:	4606      	mov	r6, r0
 8026080:	b9b8      	cbnz	r0, 80260b2 <mbedtls_ssl_write+0x7e>
    return( (int) len );
 8026082:	462e      	mov	r6, r5
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 8026084:	4b23      	ldr	r3, [pc, #140]	; (8026114 <mbedtls_ssl_write+0xe0>)
 8026086:	9300      	str	r3, [sp, #0]
 8026088:	f242 2306 	movw	r3, #8710	; 0x2206
 802608c:	4a20      	ldr	r2, [pc, #128]	; (8026110 <mbedtls_ssl_write+0xdc>)
 802608e:	2102      	movs	r1, #2
 8026090:	4620      	mov	r0, r4
 8026092:	f7ef fb3d 	bl	8015710 <mbedtls_debug_print_msg>
}
 8026096:	4630      	mov	r0, r6
 8026098:	b003      	add	sp, #12
 802609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 802609c:	9001      	str	r0, [sp, #4]
 802609e:	4b1e      	ldr	r3, [pc, #120]	; (8026118 <mbedtls_ssl_write+0xe4>)
 80260a0:	9300      	str	r3, [sp, #0]
 80260a2:	f242 13fb 	movw	r3, #8699	; 0x21fb
 80260a6:	4a1a      	ldr	r2, [pc, #104]	; (8026110 <mbedtls_ssl_write+0xdc>)
 80260a8:	2101      	movs	r1, #1
 80260aa:	4620      	mov	r0, r4
 80260ac:	f7ef fb62 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 80260b0:	e7f1      	b.n	8026096 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 80260b2:	9001      	str	r0, [sp, #4]
 80260b4:	4b19      	ldr	r3, [pc, #100]	; (802611c <mbedtls_ssl_write+0xe8>)
 80260b6:	9300      	str	r3, [sp, #0]
 80260b8:	f242 13a4 	movw	r3, #8612	; 0x21a4
 80260bc:	4a14      	ldr	r2, [pc, #80]	; (8026110 <mbedtls_ssl_write+0xdc>)
 80260be:	2101      	movs	r1, #1
 80260c0:	4620      	mov	r0, r4
 80260c2:	f7ef fb57 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 80260c6:	e7dd      	b.n	8026084 <mbedtls_ssl_write+0x50>
        ssl->out_msglen  = len;
 80260c8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80260cc:	2317      	movs	r3, #23
 80260ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 80260d2:	462a      	mov	r2, r5
 80260d4:	4639      	mov	r1, r7
 80260d6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80260da:	f004 fa2e 	bl	802a53a <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl, SSL_FORCE_FLUSH ) ) != 0 )
 80260de:	2101      	movs	r1, #1
 80260e0:	4620      	mov	r0, r4
 80260e2:	f7fe fb4f 	bl	8024784 <mbedtls_ssl_write_record>
 80260e6:	4606      	mov	r6, r0
 80260e8:	2800      	cmp	r0, #0
 80260ea:	d0ca      	beq.n	8026082 <mbedtls_ssl_write+0x4e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 80260ec:	9001      	str	r0, [sp, #4]
 80260ee:	4b0c      	ldr	r3, [pc, #48]	; (8026120 <mbedtls_ssl_write+0xec>)
 80260f0:	9300      	str	r3, [sp, #0]
 80260f2:	f242 13b5 	movw	r3, #8629	; 0x21b5
 80260f6:	4a06      	ldr	r2, [pc, #24]	; (8026110 <mbedtls_ssl_write+0xdc>)
 80260f8:	2101      	movs	r1, #1
 80260fa:	4620      	mov	r0, r4
 80260fc:	f7ef fb3a 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 8026100:	e7c0      	b.n	8026084 <mbedtls_ssl_write+0x50>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8026102:	4e08      	ldr	r6, [pc, #32]	; (8026124 <mbedtls_ssl_write+0xf0>)
 8026104:	e7c7      	b.n	8026096 <mbedtls_ssl_write+0x62>
 8026106:	4e07      	ldr	r6, [pc, #28]	; (8026124 <mbedtls_ssl_write+0xf0>)
 8026108:	e7c5      	b.n	8026096 <mbedtls_ssl_write+0x62>
 802610a:	bf00      	nop
 802610c:	08035f7c 	.word	0x08035f7c
 8026110:	08035174 	.word	0x08035174
 8026114:	08035f88 	.word	0x08035f88
 8026118:	08035e80 	.word	0x08035e80
 802611c:	08035724 	.word	0x08035724
 8026120:	0803597c 	.word	0x0803597c
 8026124:	ffff8f00 	.word	0xffff8f00

08026128 <mbedtls_ssl_close_notify>:
{
 8026128:	b530      	push	{r4, r5, lr}
 802612a:	b083      	sub	sp, #12
    if( ssl == NULL || ssl->conf == NULL )
 802612c:	2800      	cmp	r0, #0
 802612e:	d036      	beq.n	802619e <mbedtls_ssl_close_notify+0x76>
 8026130:	4604      	mov	r4, r0
 8026132:	6803      	ldr	r3, [r0, #0]
 8026134:	2b00      	cmp	r3, #0
 8026136:	d034      	beq.n	80261a2 <mbedtls_ssl_close_notify+0x7a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 8026138:	4b1b      	ldr	r3, [pc, #108]	; (80261a8 <mbedtls_ssl_close_notify+0x80>)
 802613a:	9300      	str	r3, [sp, #0]
 802613c:	f242 2315 	movw	r3, #8725	; 0x2215
 8026140:	4a1a      	ldr	r2, [pc, #104]	; (80261ac <mbedtls_ssl_close_notify+0x84>)
 8026142:	2102      	movs	r1, #2
 8026144:	f7ef fae4 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 8026148:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 802614c:	b97b      	cbnz	r3, 802616e <mbedtls_ssl_close_notify+0x46>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 802614e:	6863      	ldr	r3, [r4, #4]
 8026150:	2b10      	cmp	r3, #16
 8026152:	d011      	beq.n	8026178 <mbedtls_ssl_close_notify+0x50>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 8026154:	4b16      	ldr	r3, [pc, #88]	; (80261b0 <mbedtls_ssl_close_notify+0x88>)
 8026156:	9300      	str	r3, [sp, #0]
 8026158:	f242 2325 	movw	r3, #8741	; 0x2225
 802615c:	4a13      	ldr	r2, [pc, #76]	; (80261ac <mbedtls_ssl_close_notify+0x84>)
 802615e:	2102      	movs	r1, #2
 8026160:	4620      	mov	r0, r4
 8026162:	f7ef fad5 	bl	8015710 <mbedtls_debug_print_msg>
    return( 0 );
 8026166:	2500      	movs	r5, #0
}
 8026168:	4628      	mov	r0, r5
 802616a:	b003      	add	sp, #12
 802616c:	bd30      	pop	{r4, r5, pc}
        return( mbedtls_ssl_flush_output( ssl ) );
 802616e:	4620      	mov	r0, r4
 8026170:	f7fe fa7a 	bl	8024668 <mbedtls_ssl_flush_output>
 8026174:	4605      	mov	r5, r0
 8026176:	e7f7      	b.n	8026168 <mbedtls_ssl_close_notify+0x40>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 8026178:	2200      	movs	r2, #0
 802617a:	2101      	movs	r1, #1
 802617c:	4620      	mov	r0, r4
 802617e:	f7fe fe93 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
 8026182:	4605      	mov	r5, r0
 8026184:	2800      	cmp	r0, #0
 8026186:	d0e5      	beq.n	8026154 <mbedtls_ssl_close_notify+0x2c>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 8026188:	9001      	str	r0, [sp, #4]
 802618a:	4b0a      	ldr	r3, [pc, #40]	; (80261b4 <mbedtls_ssl_close_notify+0x8c>)
 802618c:	9300      	str	r3, [sp, #0]
 802618e:	f242 2320 	movw	r3, #8736	; 0x2220
 8026192:	4a06      	ldr	r2, [pc, #24]	; (80261ac <mbedtls_ssl_close_notify+0x84>)
 8026194:	2101      	movs	r1, #1
 8026196:	4620      	mov	r0, r4
 8026198:	f7ef faec 	bl	8015774 <mbedtls_debug_print_ret>
            return( ret );
 802619c:	e7e4      	b.n	8026168 <mbedtls_ssl_close_notify+0x40>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 802619e:	4d06      	ldr	r5, [pc, #24]	; (80261b8 <mbedtls_ssl_close_notify+0x90>)
 80261a0:	e7e2      	b.n	8026168 <mbedtls_ssl_close_notify+0x40>
 80261a2:	4d05      	ldr	r5, [pc, #20]	; (80261b8 <mbedtls_ssl_close_notify+0x90>)
 80261a4:	e7e0      	b.n	8026168 <mbedtls_ssl_close_notify+0x40>
 80261a6:	bf00      	nop
 80261a8:	08035f94 	.word	0x08035f94
 80261ac:	08035174 	.word	0x08035174
 80261b0:	08035fcc 	.word	0x08035fcc
 80261b4:	08035fac 	.word	0x08035fac
 80261b8:	ffff8f00 	.word	0xffff8f00

080261bc <mbedtls_ssl_transform_free>:
    if( transform == NULL )
 80261bc:	b1a8      	cbz	r0, 80261ea <mbedtls_ssl_transform_free+0x2e>
{
 80261be:	b510      	push	{r4, lr}
 80261c0:	4604      	mov	r4, r0
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 80261c2:	3050      	adds	r0, #80	; 0x50
 80261c4:	f7ee fe26 	bl	8014e14 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 80261c8:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80261cc:	f7ee fe22 	bl	8014e14 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 80261d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80261d4:	f7f2 fe55 	bl	8018e82 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 80261d8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80261dc:	f7f2 fe51 	bl	8018e82 <mbedtls_md_free>
    mbedtls_platform_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80261e0:	21c0      	movs	r1, #192	; 0xc0
 80261e2:	4620      	mov	r0, r4
 80261e4:	f7f4 feae 	bl	801af44 <mbedtls_platform_zeroize>
}
 80261e8:	bd10      	pop	{r4, pc}
 80261ea:	4770      	bx	lr

080261ec <mbedtls_ssl_handshake_free>:
{
 80261ec:	b510      	push	{r4, lr}
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80261ee:	6b04      	ldr	r4, [r0, #48]	; 0x30
    if( handshake == NULL )
 80261f0:	b1bc      	cbz	r4, 8026222 <mbedtls_ssl_handshake_free+0x36>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 80261f2:	f504 70de 	add.w	r0, r4, #444	; 0x1bc
 80261f6:	f7f8 fa0f 	bl	801e618 <mbedtls_sha256_free>
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 80261fa:	f504 700a 	add.w	r0, r4, #552	; 0x228
 80261fe:	f7f8 fee8 	bl	801efd2 <mbedtls_sha512_free>
    mbedtls_dhm_free( &handshake->dhm_ctx );
 8026202:	1d20      	adds	r0, r4, #4
 8026204:	f7ef fd9e 	bl	8015d44 <mbedtls_dhm_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 8026208:	f104 0080 	add.w	r0, r4, #128	; 0x80
 802620c:	f7ef fe3e 	bl	8015e8c <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
 8026210:	f8d4 01b4 	ldr.w	r0, [r4, #436]	; 0x1b4
 8026214:	f002 fe48 	bl	8028ea8 <mbedtls_free>
    mbedtls_platform_zeroize( handshake,
 8026218:	f44f 7166 	mov.w	r1, #920	; 0x398
 802621c:	4620      	mov	r0, r4
 802621e:	f7f4 fe91 	bl	801af44 <mbedtls_platform_zeroize>
}
 8026222:	bd10      	pop	{r4, pc}

08026224 <mbedtls_ssl_session_free>:
    if( session == NULL )
 8026224:	b168      	cbz	r0, 8026242 <mbedtls_ssl_session_free+0x1e>
{
 8026226:	b510      	push	{r4, lr}
 8026228:	4604      	mov	r4, r0
    if( session->peer_cert != NULL )
 802622a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802622c:	b120      	cbz	r0, 8026238 <mbedtls_ssl_session_free+0x14>
        mbedtls_x509_crt_free( session->peer_cert );
 802622e:	f002 f8a4 	bl	802837a <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 8026232:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8026234:	f002 fe38 	bl	8028ea8 <mbedtls_free>
    mbedtls_platform_zeroize( session, sizeof( mbedtls_ssl_session ) );
 8026238:	2170      	movs	r1, #112	; 0x70
 802623a:	4620      	mov	r0, r4
 802623c:	f7f4 fe82 	bl	801af44 <mbedtls_platform_zeroize>
}
 8026240:	bd10      	pop	{r4, pc}
 8026242:	4770      	bx	lr

08026244 <mbedtls_ssl_handshake_wrapup>:
{
 8026244:	b530      	push	{r4, r5, lr}
 8026246:	b083      	sub	sp, #12
 8026248:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 802624a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802624c:	f8d3 5384 	ldr.w	r5, [r3, #900]	; 0x384
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 8026250:	4b2d      	ldr	r3, [pc, #180]	; (8026308 <mbedtls_ssl_handshake_wrapup+0xc4>)
 8026252:	9300      	str	r3, [sp, #0]
 8026254:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 8026258:	4a2c      	ldr	r2, [pc, #176]	; (802630c <mbedtls_ssl_handshake_wrapup+0xc8>)
 802625a:	2103      	movs	r1, #3
 802625c:	f7ef fa58 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->session )
 8026260:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026262:	b120      	cbz	r0, 802626e <mbedtls_ssl_handshake_wrapup+0x2a>
        mbedtls_ssl_session_free( ssl->session );
 8026264:	f7ff ffde 	bl	8026224 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8026268:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802626a:	f002 fe1d 	bl	8028ea8 <mbedtls_free>
    ssl->session = ssl->session_negotiate;
 802626e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8026270:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 8026272:	2300      	movs	r3, #0
 8026274:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ssl->conf->f_set_cache != NULL &&
 8026276:	6822      	ldr	r2, [r4, #0]
 8026278:	6a53      	ldr	r3, [r2, #36]	; 0x24
 802627a:	b133      	cbz	r3, 802628a <mbedtls_ssl_handshake_wrapup+0x46>
 802627c:	6908      	ldr	r0, [r1, #16]
 802627e:	b120      	cbz	r0, 802628a <mbedtls_ssl_handshake_wrapup+0x46>
        ssl->session->id_len != 0 &&
 8026280:	b91d      	cbnz	r5, 802628a <mbedtls_ssl_handshake_wrapup+0x46>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 8026282:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8026284:	4798      	blx	r3
 8026286:	2800      	cmp	r0, #0
 8026288:	d133      	bne.n	80262f2 <mbedtls_ssl_handshake_wrapup+0xae>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 802628a:	4b21      	ldr	r3, [pc, #132]	; (8026310 <mbedtls_ssl_handshake_wrapup+0xcc>)
 802628c:	9300      	str	r3, [sp, #0]
 802628e:	f641 03a5 	movw	r3, #6309	; 0x18a5
 8026292:	4a1e      	ldr	r2, [pc, #120]	; (802630c <mbedtls_ssl_handshake_wrapup+0xc8>)
 8026294:	2103      	movs	r1, #3
 8026296:	4620      	mov	r0, r4
 8026298:	f7ef fa3a 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl );
 802629c:	4620      	mov	r0, r4
 802629e:	f7ff ffa5 	bl	80261ec <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 80262a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80262a4:	f002 fe00 	bl	8028ea8 <mbedtls_free>
    ssl->handshake = NULL;
 80262a8:	2300      	movs	r3, #0
 80262aa:	6323      	str	r3, [r4, #48]	; 0x30
    if( ssl->transform )
 80262ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80262ae:	b120      	cbz	r0, 80262ba <mbedtls_ssl_handshake_wrapup+0x76>
        mbedtls_ssl_transform_free( ssl->transform );
 80262b0:	f7ff ff84 	bl	80261bc <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80262b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80262b6:	f002 fdf7 	bl	8028ea8 <mbedtls_free>
    ssl->transform = ssl->transform_negotiate;
 80262ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80262bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80262be:	2300      	movs	r3, #0
 80262c0:	6423      	str	r3, [r4, #64]	; 0x40
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 80262c2:	4d12      	ldr	r5, [pc, #72]	; (802630c <mbedtls_ssl_handshake_wrapup+0xc8>)
 80262c4:	4b13      	ldr	r3, [pc, #76]	; (8026314 <mbedtls_ssl_handshake_wrapup+0xd0>)
 80262c6:	9300      	str	r3, [sp, #0]
 80262c8:	f641 03b9 	movw	r3, #6329	; 0x18b9
 80262cc:	462a      	mov	r2, r5
 80262ce:	2103      	movs	r1, #3
 80262d0:	4620      	mov	r0, r4
 80262d2:	f7ef fa1d 	bl	8015710 <mbedtls_debug_print_msg>
    ssl->state++;
 80262d6:	6863      	ldr	r3, [r4, #4]
 80262d8:	3301      	adds	r3, #1
 80262da:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 80262dc:	4b0e      	ldr	r3, [pc, #56]	; (8026318 <mbedtls_ssl_handshake_wrapup+0xd4>)
 80262de:	9300      	str	r3, [sp, #0]
 80262e0:	f641 03f7 	movw	r3, #6391	; 0x18f7
 80262e4:	462a      	mov	r2, r5
 80262e6:	2103      	movs	r1, #3
 80262e8:	4620      	mov	r0, r4
 80262ea:	f7ef fa11 	bl	8015710 <mbedtls_debug_print_msg>
}
 80262ee:	b003      	add	sp, #12
 80262f0:	bd30      	pop	{r4, r5, pc}
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 80262f2:	4b0a      	ldr	r3, [pc, #40]	; (802631c <mbedtls_ssl_handshake_wrapup+0xd8>)
 80262f4:	9300      	str	r3, [sp, #0]
 80262f6:	f641 03e3 	movw	r3, #6371	; 0x18e3
 80262fa:	4a04      	ldr	r2, [pc, #16]	; (802630c <mbedtls_ssl_handshake_wrapup+0xc8>)
 80262fc:	2101      	movs	r1, #1
 80262fe:	4620      	mov	r0, r4
 8026300:	f7ef fa06 	bl	8015710 <mbedtls_debug_print_msg>
 8026304:	e7c1      	b.n	802628a <mbedtls_ssl_handshake_wrapup+0x46>
 8026306:	bf00      	nop
 8026308:	08035fe4 	.word	0x08035fe4
 802630c:	08035174 	.word	0x08035174
 8026310:	08036014 	.word	0x08036014
 8026314:	08036034 	.word	0x08036034
 8026318:	08036054 	.word	0x08036054
 802631c:	08035ff8 	.word	0x08035ff8

08026320 <ssl_handshake_init>:
{
 8026320:	b530      	push	{r4, r5, lr}
 8026322:	b083      	sub	sp, #12
 8026324:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 8026326:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8026328:	b108      	cbz	r0, 802632e <ssl_handshake_init+0xe>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 802632a:	f7ff ff47 	bl	80261bc <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 802632e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026330:	b108      	cbz	r0, 8026336 <ssl_handshake_init+0x16>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 8026332:	f7ff ff77 	bl	8026224 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 8026336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8026338:	b113      	cbz	r3, 8026340 <ssl_handshake_init+0x20>
        mbedtls_ssl_handshake_free( ssl );
 802633a:	4620      	mov	r0, r4
 802633c:	f7ff ff56 	bl	80261ec <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 8026340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026342:	2b00      	cmp	r3, #0
 8026344:	d04c      	beq.n	80263e0 <ssl_handshake_init+0xc0>
    if( ssl->session_negotiate == NULL )
 8026346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026348:	2b00      	cmp	r3, #0
 802634a:	d04f      	beq.n	80263ec <ssl_handshake_init+0xcc>
    if( ssl->handshake == NULL )
 802634c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802634e:	2b00      	cmp	r3, #0
 8026350:	d052      	beq.n	80263f8 <ssl_handshake_init+0xd8>
    if( ssl->handshake == NULL ||
 8026352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026354:	2b00      	cmp	r3, #0
 8026356:	d057      	beq.n	8026408 <ssl_handshake_init+0xe8>
        ssl->session_negotiate == NULL )
 8026358:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        ssl->transform_negotiate == NULL ||
 802635a:	2800      	cmp	r0, #0
 802635c:	d054      	beq.n	8026408 <ssl_handshake_init+0xe8>
    mbedtls_ssl_session_init( ssl->session_negotiate );
 802635e:	f7ff fc2f 	bl	8025bc0 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 8026362:	6c25      	ldr	r5, [r4, #64]	; 0x40
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 8026364:	22c0      	movs	r2, #192	; 0xc0
 8026366:	2100      	movs	r1, #0
 8026368:	4628      	mov	r0, r5
 802636a:	f004 f90e 	bl	802a58a <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 802636e:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8026372:	f7ee fd49 	bl	8014e08 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 8026376:	f105 0088 	add.w	r0, r5, #136	; 0x88
 802637a:	f7ee fd45 	bl	8014e08 <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 802637e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8026382:	f7f2 fd79 	bl	8018e78 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 8026386:	f105 0044 	add.w	r0, r5, #68	; 0x44
 802638a:	f7f2 fd75 	bl	8018e78 <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 802638e:	6b24      	ldr	r4, [r4, #48]	; 0x30
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 8026390:	f44f 7266 	mov.w	r2, #920	; 0x398
 8026394:	2100      	movs	r1, #0
 8026396:	4620      	mov	r0, r4
 8026398:	f004 f8f7 	bl	802a58a <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 802639c:	f504 75de 	add.w	r5, r4, #444	; 0x1bc
 80263a0:	4628      	mov	r0, r5
 80263a2:	f7f8 f933 	bl	801e60c <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80263a6:	2100      	movs	r1, #0
 80263a8:	4628      	mov	r0, r5
 80263aa:	f7f8 f941 	bl	801e630 <mbedtls_sha256_starts_ret>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80263ae:	f504 750a 	add.w	r5, r4, #552	; 0x228
 80263b2:	4628      	mov	r0, r5
 80263b4:	f7f8 fe07 	bl	801efc6 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 80263b8:	2101      	movs	r1, #1
 80263ba:	4628      	mov	r0, r5
 80263bc:	f7f8 fe18 	bl	801eff0 <mbedtls_sha512_starts_ret>
    handshake->update_checksum = ssl_update_checksum_start;
 80263c0:	4b1d      	ldr	r3, [pc, #116]	; (8026438 <ssl_handshake_init+0x118>)
 80263c2:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
    set->rsa   = md_alg;
 80263c6:	2500      	movs	r5, #0
 80263c8:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 80263ca:	7065      	strb	r5, [r4, #1]
    mbedtls_dhm_init( &handshake->dhm_ctx );
 80263cc:	1d20      	adds	r0, r4, #4
 80263ce:	f7ef fcb3 	bl	8015d38 <mbedtls_dhm_init>
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 80263d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80263d6:	f7ef fd2b 	bl	8015e30 <mbedtls_ecdh_init>
    return( 0 );
 80263da:	4628      	mov	r0, r5
}
 80263dc:	b003      	add	sp, #12
 80263de:	bd30      	pop	{r4, r5, pc}
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 80263e0:	21c0      	movs	r1, #192	; 0xc0
 80263e2:	2001      	movs	r0, #1
 80263e4:	f002 fd52 	bl	8028e8c <mbedtls_calloc>
 80263e8:	6420      	str	r0, [r4, #64]	; 0x40
 80263ea:	e7ac      	b.n	8026346 <ssl_handshake_init+0x26>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 80263ec:	2170      	movs	r1, #112	; 0x70
 80263ee:	2001      	movs	r0, #1
 80263f0:	f002 fd4c 	bl	8028e8c <mbedtls_calloc>
 80263f4:	62e0      	str	r0, [r4, #44]	; 0x2c
 80263f6:	e7a9      	b.n	802634c <ssl_handshake_init+0x2c>
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 80263f8:	f44f 7166 	mov.w	r1, #920	; 0x398
 80263fc:	2001      	movs	r0, #1
 80263fe:	f002 fd45 	bl	8028e8c <mbedtls_calloc>
 8026402:	6320      	str	r0, [r4, #48]	; 0x30
    if( ssl->handshake == NULL ||
 8026404:	2800      	cmp	r0, #0
 8026406:	d1a4      	bne.n	8026352 <ssl_handshake_init+0x32>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 8026408:	4b0c      	ldr	r3, [pc, #48]	; (802643c <ssl_handshake_init+0x11c>)
 802640a:	9300      	str	r3, [sp, #0]
 802640c:	f641 232b 	movw	r3, #6699	; 0x1a2b
 8026410:	4a0b      	ldr	r2, [pc, #44]	; (8026440 <ssl_handshake_init+0x120>)
 8026412:	2101      	movs	r1, #1
 8026414:	4620      	mov	r0, r4
 8026416:	f7ef f97b 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 802641a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802641c:	f002 fd44 	bl	8028ea8 <mbedtls_free>
        mbedtls_free( ssl->transform_negotiate );
 8026420:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8026422:	f002 fd41 	bl	8028ea8 <mbedtls_free>
        mbedtls_free( ssl->session_negotiate );
 8026426:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026428:	f002 fd3e 	bl	8028ea8 <mbedtls_free>
        ssl->handshake = NULL;
 802642c:	2300      	movs	r3, #0
 802642e:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 8026430:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 8026432:	62e3      	str	r3, [r4, #44]	; 0x2c
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8026434:	4803      	ldr	r0, [pc, #12]	; (8026444 <ssl_handshake_init+0x124>)
 8026436:	e7d1      	b.n	80263dc <ssl_handshake_init+0xbc>
 8026438:	08023f25 	.word	0x08023f25
 802643c:	08036068 	.word	0x08036068
 8026440:	08035174 	.word	0x08035174
 8026444:	ffff8100 	.word	0xffff8100

08026448 <mbedtls_ssl_setup>:
{
 8026448:	b530      	push	{r4, r5, lr}
 802644a:	b083      	sub	sp, #12
 802644c:	4604      	mov	r4, r0
    ssl->conf = conf;
 802644e:	6001      	str	r1, [r0, #0]
    ssl->out_buf = NULL;
 8026450:	2300      	movs	r3, #0
 8026452:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    ssl->in_buf = mbedtls_calloc( 1, MBEDTLS_SSL_IN_BUFFER_LEN );
 8026456:	f242 012d 	movw	r1, #8237	; 0x202d
 802645a:	2001      	movs	r0, #1
 802645c:	f002 fd16 	bl	8028e8c <mbedtls_calloc>
 8026460:	6520      	str	r0, [r4, #80]	; 0x50
    if( ssl->in_buf == NULL )
 8026462:	b370      	cbz	r0, 80264c2 <mbedtls_ssl_setup+0x7a>
    ssl->out_buf = mbedtls_calloc( 1, MBEDTLS_SSL_OUT_BUFFER_LEN );
 8026464:	f242 012d 	movw	r1, #8237	; 0x202d
 8026468:	2001      	movs	r0, #1
 802646a:	f002 fd0f 	bl	8028e8c <mbedtls_calloc>
 802646e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if( ssl->out_buf == NULL )
 8026472:	2800      	cmp	r0, #0
 8026474:	d033      	beq.n	80264de <mbedtls_ssl_setup+0x96>
    ssl_reset_in_out_pointers( ssl );
 8026476:	4620      	mov	r0, r4
 8026478:	f7fd faf6 	bl	8023a68 <ssl_reset_in_out_pointers>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 802647c:	4620      	mov	r0, r4
 802647e:	f7ff ff4f 	bl	8026320 <ssl_handshake_init>
 8026482:	4605      	mov	r5, r0
 8026484:	b1d0      	cbz	r0, 80264bc <mbedtls_ssl_setup+0x74>
    mbedtls_free( ssl->in_buf );
 8026486:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8026488:	f002 fd0e 	bl	8028ea8 <mbedtls_free>
    mbedtls_free( ssl->out_buf );
 802648c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8026490:	f002 fd0a 	bl	8028ea8 <mbedtls_free>
    ssl->conf = NULL;
 8026494:	2300      	movs	r3, #0
 8026496:	6023      	str	r3, [r4, #0]
    ssl->in_buf = NULL;
 8026498:	6523      	str	r3, [r4, #80]	; 0x50
    ssl->out_buf = NULL;
 802649a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ssl->in_hdr = NULL;
 802649e:	65a3      	str	r3, [r4, #88]	; 0x58
    ssl->in_ctr = NULL;
 80264a0:	6563      	str	r3, [r4, #84]	; 0x54
    ssl->in_len = NULL;
 80264a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    ssl->in_iv = NULL;
 80264a4:	6623      	str	r3, [r4, #96]	; 0x60
    ssl->in_msg = NULL;
 80264a6:	6663      	str	r3, [r4, #100]	; 0x64
    ssl->out_hdr = NULL;
 80264a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    ssl->out_ctr = NULL;
 80264ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->out_len = NULL;
 80264b0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ssl->out_iv = NULL;
 80264b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    ssl->out_msg = NULL;
 80264b8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
}
 80264bc:	4628      	mov	r0, r5
 80264be:	b003      	add	sp, #12
 80264c0:	bd30      	pop	{r4, r5, pc}
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_IN_BUFFER_LEN) );
 80264c2:	f242 032d 	movw	r3, #8237	; 0x202d
 80264c6:	9301      	str	r3, [sp, #4]
 80264c8:	4b0c      	ldr	r3, [pc, #48]	; (80264fc <mbedtls_ssl_setup+0xb4>)
 80264ca:	9300      	str	r3, [sp, #0]
 80264cc:	f641 23e5 	movw	r3, #6885	; 0x1ae5
 80264d0:	4a0b      	ldr	r2, [pc, #44]	; (8026500 <mbedtls_ssl_setup+0xb8>)
 80264d2:	2101      	movs	r1, #1
 80264d4:	4620      	mov	r0, r4
 80264d6:	f7ef f91b 	bl	8015710 <mbedtls_debug_print_msg>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 80264da:	4d0a      	ldr	r5, [pc, #40]	; (8026504 <mbedtls_ssl_setup+0xbc>)
        goto error;
 80264dc:	e7d3      	b.n	8026486 <mbedtls_ssl_setup+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", MBEDTLS_SSL_OUT_BUFFER_LEN) );
 80264de:	f242 032d 	movw	r3, #8237	; 0x202d
 80264e2:	9301      	str	r3, [sp, #4]
 80264e4:	4b05      	ldr	r3, [pc, #20]	; (80264fc <mbedtls_ssl_setup+0xb4>)
 80264e6:	9300      	str	r3, [sp, #0]
 80264e8:	f641 23ed 	movw	r3, #6893	; 0x1aed
 80264ec:	4a04      	ldr	r2, [pc, #16]	; (8026500 <mbedtls_ssl_setup+0xb8>)
 80264ee:	2101      	movs	r1, #1
 80264f0:	4620      	mov	r0, r4
 80264f2:	f7ef f90d 	bl	8015710 <mbedtls_debug_print_msg>
        ret = MBEDTLS_ERR_SSL_ALLOC_FAILED;
 80264f6:	4d03      	ldr	r5, [pc, #12]	; (8026504 <mbedtls_ssl_setup+0xbc>)
        goto error;
 80264f8:	e7c5      	b.n	8026486 <mbedtls_ssl_setup+0x3e>
 80264fa:	bf00      	nop
 80264fc:	0803608c 	.word	0x0803608c
 8026500:	08035174 	.word	0x08035174
 8026504:	ffff8100 	.word	0xffff8100

08026508 <mbedtls_ssl_session_reset>:
{
 8026508:	b570      	push	{r4, r5, r6, lr}
 802650a:	4604      	mov	r4, r0
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 802650c:	2500      	movs	r5, #0
 802650e:	6045      	str	r5, [r0, #4]
    ssl_set_timer( ssl, 0 );
 8026510:	4629      	mov	r1, r5
 8026512:	f7fd fac1 	bl	8023a98 <ssl_set_timer>
    ssl->secure_renegotiation = MBEDTLS_SSL_LEGACY_RENEGOTIATION;
 8026516:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
    ssl->in_offt = NULL;
 802651a:	66a5      	str	r5, [r4, #104]	; 0x68
    ssl_reset_in_out_pointers( ssl );
 802651c:	4620      	mov	r0, r4
 802651e:	f7fd faa3 	bl	8023a68 <ssl_reset_in_out_pointers>
    ssl->in_msgtype = 0;
 8026522:	66e5      	str	r5, [r4, #108]	; 0x6c
    ssl->in_msglen = 0;
 8026524:	6725      	str	r5, [r4, #112]	; 0x70
    ssl->in_hslen = 0;
 8026526:	67a5      	str	r5, [r4, #120]	; 0x78
    ssl->nb_zero = 0;
 8026528:	67e5      	str	r5, [r4, #124]	; 0x7c
    ssl->keep_current_message = 0;
 802652a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    ssl->out_msgtype = 0;
 802652e:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    ssl->out_msglen = 0;
 8026532:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ssl->out_left = 0;
 8026536:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    memset( ssl->cur_out_ctr, 0, sizeof( ssl->cur_out_ctr ) );
 802653a:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 802653e:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
    ssl->transform_in = NULL;
 8026542:	6365      	str	r5, [r4, #52]	; 0x34
    ssl->transform_out = NULL;
 8026544:	63a5      	str	r5, [r4, #56]	; 0x38
    ssl->session_in = NULL;
 8026546:	6225      	str	r5, [r4, #32]
    ssl->session_out = NULL;
 8026548:	6265      	str	r5, [r4, #36]	; 0x24
    memset( ssl->out_buf, 0, MBEDTLS_SSL_OUT_BUFFER_LEN );
 802654a:	f242 062d 	movw	r6, #8237	; 0x202d
 802654e:	4632      	mov	r2, r6
 8026550:	4629      	mov	r1, r5
 8026552:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8026556:	f004 f818 	bl	802a58a <memset>
        ssl->in_left = 0;
 802655a:	6765      	str	r5, [r4, #116]	; 0x74
        memset( ssl->in_buf, 0, MBEDTLS_SSL_IN_BUFFER_LEN );
 802655c:	4632      	mov	r2, r6
 802655e:	4629      	mov	r1, r5
 8026560:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8026562:	f004 f812 	bl	802a58a <memset>
    if( ssl->transform )
 8026566:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8026568:	b128      	cbz	r0, 8026576 <mbedtls_ssl_session_reset+0x6e>
        mbedtls_ssl_transform_free( ssl->transform );
 802656a:	f7ff fe27 	bl	80261bc <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 802656e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8026570:	f002 fc9a 	bl	8028ea8 <mbedtls_free>
        ssl->transform = NULL;
 8026574:	63e5      	str	r5, [r4, #60]	; 0x3c
    if( ssl->session )
 8026576:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026578:	b130      	cbz	r0, 8026588 <mbedtls_ssl_session_reset+0x80>
        mbedtls_ssl_session_free( ssl->session );
 802657a:	f7ff fe53 	bl	8026224 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 802657e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026580:	f002 fc92 	bl	8028ea8 <mbedtls_free>
        ssl->session = NULL;
 8026584:	2300      	movs	r3, #0
 8026586:	62a3      	str	r3, [r4, #40]	; 0x28
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 8026588:	4620      	mov	r0, r4
 802658a:	f7ff fec9 	bl	8026320 <ssl_handshake_init>
}
 802658e:	bd70      	pop	{r4, r5, r6, pc}

08026590 <mbedtls_ssl_free>:
    if( ssl == NULL )
 8026590:	2800      	cmp	r0, #0
 8026592:	d05d      	beq.n	8026650 <mbedtls_ssl_free+0xc0>
{
 8026594:	b530      	push	{r4, r5, lr}
 8026596:	b083      	sub	sp, #12
 8026598:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 802659a:	4b2e      	ldr	r3, [pc, #184]	; (8026654 <mbedtls_ssl_free+0xc4>)
 802659c:	9300      	str	r3, [sp, #0]
 802659e:	f242 23e6 	movw	r3, #8934	; 0x22e6
 80265a2:	4a2d      	ldr	r2, [pc, #180]	; (8026658 <mbedtls_ssl_free+0xc8>)
 80265a4:	2102      	movs	r1, #2
 80265a6:	f7ef f8b3 	bl	8015710 <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 80265aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80265ae:	b138      	cbz	r0, 80265c0 <mbedtls_ssl_free+0x30>
        mbedtls_platform_zeroize( ssl->out_buf, MBEDTLS_SSL_OUT_BUFFER_LEN );
 80265b0:	f242 012d 	movw	r1, #8237	; 0x202d
 80265b4:	f7f4 fcc6 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->out_buf );
 80265b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80265bc:	f002 fc74 	bl	8028ea8 <mbedtls_free>
    if( ssl->in_buf != NULL )
 80265c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80265c2:	b130      	cbz	r0, 80265d2 <mbedtls_ssl_free+0x42>
        mbedtls_platform_zeroize( ssl->in_buf, MBEDTLS_SSL_IN_BUFFER_LEN );
 80265c4:	f242 012d 	movw	r1, #8237	; 0x202d
 80265c8:	f7f4 fcbc 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->in_buf );
 80265cc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80265ce:	f002 fc6b 	bl	8028ea8 <mbedtls_free>
    if( ssl->transform )
 80265d2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80265d4:	b120      	cbz	r0, 80265e0 <mbedtls_ssl_free+0x50>
        mbedtls_ssl_transform_free( ssl->transform );
 80265d6:	f7ff fdf1 	bl	80261bc <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80265da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80265dc:	f002 fc64 	bl	8028ea8 <mbedtls_free>
    if( ssl->handshake )
 80265e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80265e2:	b18b      	cbz	r3, 8026608 <mbedtls_ssl_free+0x78>
        mbedtls_ssl_handshake_free( ssl );
 80265e4:	4620      	mov	r0, r4
 80265e6:	f7ff fe01 	bl	80261ec <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80265ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80265ec:	f7ff fde6 	bl	80261bc <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80265f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80265f2:	f7ff fe17 	bl	8026224 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 80265f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80265f8:	f002 fc56 	bl	8028ea8 <mbedtls_free>
        mbedtls_free( ssl->transform_negotiate );
 80265fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80265fe:	f002 fc53 	bl	8028ea8 <mbedtls_free>
        mbedtls_free( ssl->session_negotiate );
 8026602:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026604:	f002 fc50 	bl	8028ea8 <mbedtls_free>
    if( ssl->session )
 8026608:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802660a:	b120      	cbz	r0, 8026616 <mbedtls_ssl_free+0x86>
        mbedtls_ssl_session_free( ssl->session );
 802660c:	f7ff fe0a 	bl	8026224 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 8026610:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026612:	f002 fc49 	bl	8028ea8 <mbedtls_free>
    if( ssl->hostname != NULL )
 8026616:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 802661a:	b155      	cbz	r5, 8026632 <mbedtls_ssl_free+0xa2>
        mbedtls_platform_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 802661c:	4628      	mov	r0, r5
 802661e:	f7d9 fdf1 	bl	8000204 <strlen>
 8026622:	4601      	mov	r1, r0
 8026624:	4628      	mov	r0, r5
 8026626:	f7f4 fc8d 	bl	801af44 <mbedtls_platform_zeroize>
        mbedtls_free( ssl->hostname );
 802662a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 802662e:	f002 fc3b 	bl	8028ea8 <mbedtls_free>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 8026632:	4b0a      	ldr	r3, [pc, #40]	; (802665c <mbedtls_ssl_free+0xcc>)
 8026634:	9300      	str	r3, [sp, #0]
 8026636:	f242 3327 	movw	r3, #8999	; 0x2327
 802663a:	4a07      	ldr	r2, [pc, #28]	; (8026658 <mbedtls_ssl_free+0xc8>)
 802663c:	2102      	movs	r1, #2
 802663e:	4620      	mov	r0, r4
 8026640:	f7ef f866 	bl	8015710 <mbedtls_debug_print_msg>
    mbedtls_platform_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 8026644:	21bc      	movs	r1, #188	; 0xbc
 8026646:	4620      	mov	r0, r4
 8026648:	f7f4 fc7c 	bl	801af44 <mbedtls_platform_zeroize>
}
 802664c:	b003      	add	sp, #12
 802664e:	bd30      	pop	{r4, r5, pc}
 8026650:	4770      	bx	lr
 8026652:	bf00      	nop
 8026654:	080360a4 	.word	0x080360a4
 8026658:	08035174 	.word	0x08035174
 802665c:	080360ac 	.word	0x080360ac

08026660 <mbedtls_ssl_config_init>:
{
 8026660:	b508      	push	{r3, lr}
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 8026662:	2274      	movs	r2, #116	; 0x74
 8026664:	2100      	movs	r1, #0
 8026666:	f003 ff90 	bl	802a58a <memset>
}
 802666a:	bd08      	pop	{r3, pc}

0802666c <mbedtls_ssl_config_defaults>:
{
 802666c:	b570      	push	{r4, r5, r6, lr}
 802666e:	b0c4      	sub	sp, #272	; 0x110
 8026670:	4604      	mov	r4, r0
 8026672:	461d      	mov	r5, r3
    conf->endpoint   = endpoint;
 8026674:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 8026678:	f361 0000 	bfi	r0, r1, #0, #1
    conf->transport = transport;
 802667c:	f362 0041 	bfi	r0, r2, #1, #1
 8026680:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 8026684:	bb01      	cbnz	r1, 80266c8 <mbedtls_ssl_config_defaults+0x5c>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 8026686:	b2c3      	uxtb	r3, r0
 8026688:	2202      	movs	r2, #2
 802668a:	f362 0383 	bfi	r3, r2, #2, #2
    conf->cert_req_ca_list = MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED;
 802668e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026692:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    switch( preset )
 8026696:	2d02      	cmp	r5, #2
 8026698:	d133      	bne.n	8026702 <mbedtls_ssl_config_defaults+0x96>
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 802669a:	2303      	movs	r3, #3
 802669c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 80266a0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80266a4:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80266a8:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 80266ac:	4b22      	ldr	r3, [pc, #136]	; (8026738 <mbedtls_ssl_config_defaults+0xcc>)
 80266ae:	60e3      	str	r3, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 80266b0:	60a3      	str	r3, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 80266b2:	6063      	str	r3, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 80266b4:	6023      	str	r3, [r4, #0]
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80266b6:	4b21      	ldr	r3, [pc, #132]	; (802673c <mbedtls_ssl_config_defaults+0xd0>)
 80266b8:	6363      	str	r3, [r4, #52]	; 0x34
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80266ba:	4b21      	ldr	r3, [pc, #132]	; (8026740 <mbedtls_ssl_config_defaults+0xd4>)
 80266bc:	6463      	str	r3, [r4, #68]	; 0x44
            conf->curve_list = ssl_preset_suiteb_curves;
 80266be:	4b21      	ldr	r3, [pc, #132]	; (8026744 <mbedtls_ssl_config_defaults+0xd8>)
 80266c0:	64a3      	str	r3, [r4, #72]	; 0x48
    return( 0 );
 80266c2:	2000      	movs	r0, #0
}
 80266c4:	b044      	add	sp, #272	; 0x110
 80266c6:	bd70      	pop	{r4, r5, r6, pc}
    conf->cert_req_ca_list = MBEDTLS_SSL_CERT_REQ_CA_LIST_ENABLED;
 80266c8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80266cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80266d0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if( endpoint == MBEDTLS_SSL_IS_SERVER )
 80266d4:	2901      	cmp	r1, #1
 80266d6:	d1de      	bne.n	8026696 <mbedtls_ssl_config_defaults+0x2a>
                const unsigned char dhm_p[] =
 80266d8:	f44f 7680 	mov.w	r6, #256	; 0x100
 80266dc:	4632      	mov	r2, r6
 80266de:	491a      	ldr	r1, [pc, #104]	; (8026748 <mbedtls_ssl_config_defaults+0xdc>)
 80266e0:	a804      	add	r0, sp, #16
 80266e2:	f003 ff2a 	bl	802a53a <memcpy>
                const unsigned char dhm_g[] =
 80266e6:	2302      	movs	r3, #2
 80266e8:	f88d 300c 	strb.w	r3, [sp, #12]
                if ( ( ret = mbedtls_ssl_conf_dh_param_bin( conf,
 80266ec:	2301      	movs	r3, #1
 80266ee:	9300      	str	r3, [sp, #0]
 80266f0:	ab03      	add	r3, sp, #12
 80266f2:	4632      	mov	r2, r6
 80266f4:	a904      	add	r1, sp, #16
 80266f6:	4620      	mov	r0, r4
 80266f8:	f7ff faa5 	bl	8025c46 <mbedtls_ssl_conf_dh_param_bin>
 80266fc:	2800      	cmp	r0, #0
 80266fe:	d0ca      	beq.n	8026696 <mbedtls_ssl_config_defaults+0x2a>
 8026700:	e7e0      	b.n	80266c4 <mbedtls_ssl_config_defaults+0x58>
            conf->min_major_ver = ( MBEDTLS_SSL_MIN_MAJOR_VERSION >
 8026702:	2303      	movs	r3, #3
 8026704:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
            conf->min_minor_ver = ( MBEDTLS_SSL_MIN_MINOR_VERSION >
 8026708:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 802670c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 8026710:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
                                   mbedtls_ssl_list_ciphersuites();
 8026714:	f7f9 fbe2 	bl	801fedc <mbedtls_ssl_list_ciphersuites>
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 8026718:	60e0      	str	r0, [r4, #12]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 802671a:	60a0      	str	r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
 802671c:	6060      	str	r0, [r4, #4]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 802671e:	6020      	str	r0, [r4, #0]
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 8026720:	4b0a      	ldr	r3, [pc, #40]	; (802674c <mbedtls_ssl_config_defaults+0xe0>)
 8026722:	6363      	str	r3, [r4, #52]	; 0x34
            conf->sig_hashes = ssl_preset_default_hashes;
 8026724:	4b0a      	ldr	r3, [pc, #40]	; (8026750 <mbedtls_ssl_config_defaults+0xe4>)
 8026726:	6463      	str	r3, [r4, #68]	; 0x44
            conf->curve_list = mbedtls_ecp_grp_id_list();
 8026728:	f7f0 fbf0 	bl	8016f0c <mbedtls_ecp_grp_id_list>
 802672c:	64a0      	str	r0, [r4, #72]	; 0x48
            conf->dhm_min_bitlen = 1024;
 802672e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026732:	66a3      	str	r3, [r4, #104]	; 0x68
    return( 0 );
 8026734:	2000      	movs	r0, #0
 8026736:	e7c5      	b.n	80266c4 <mbedtls_ssl_config_defaults+0x58>
 8026738:	20000030 	.word	0x20000030
 802673c:	08036584 	.word	0x08036584
 8026740:	20000040 	.word	0x20000040
 8026744:	2000003c 	.word	0x2000003c
 8026748:	0802ba00 	.word	0x0802ba00
 802674c:	08036574 	.word	0x08036574
 8026750:	2000001c 	.word	0x2000001c

08026754 <mbedtls_ssl_config_free>:
{
 8026754:	b538      	push	{r3, r4, r5, lr}
 8026756:	4604      	mov	r4, r0
    mbedtls_mpi_free( &conf->dhm_P );
 8026758:	304c      	adds	r0, #76	; 0x4c
 802675a:	f7eb ff6c 	bl	8012636 <mbedtls_mpi_free>
    mbedtls_mpi_free( &conf->dhm_G );
 802675e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026762:	f7eb ff68 	bl	8012636 <mbedtls_mpi_free>
    ssl_key_cert_free( conf->key_cert );
 8026766:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    while( cur != NULL )
 8026768:	b12d      	cbz	r5, 8026776 <mbedtls_ssl_config_free+0x22>
        next = cur->next;
 802676a:	4628      	mov	r0, r5
 802676c:	68ad      	ldr	r5, [r5, #8]
        mbedtls_free( cur );
 802676e:	f002 fb9b 	bl	8028ea8 <mbedtls_free>
    while( cur != NULL )
 8026772:	2d00      	cmp	r5, #0
 8026774:	d1f9      	bne.n	802676a <mbedtls_ssl_config_free+0x16>
    mbedtls_platform_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 8026776:	2174      	movs	r1, #116	; 0x74
 8026778:	4620      	mov	r0, r4
 802677a:	f7f4 fbe3 	bl	801af44 <mbedtls_platform_zeroize>
}
 802677e:	bd38      	pop	{r3, r4, r5, pc}

08026780 <mbedtls_ssl_sig_from_pk>:
{
 8026780:	b510      	push	{r4, lr}
 8026782:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 8026784:	2101      	movs	r1, #1
 8026786:	f7f3 fcb5 	bl	801a0f4 <mbedtls_pk_can_do>
 802678a:	b108      	cbz	r0, 8026790 <mbedtls_ssl_sig_from_pk+0x10>
        return( MBEDTLS_SSL_SIG_RSA );
 802678c:	2001      	movs	r0, #1
}
 802678e:	bd10      	pop	{r4, pc}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 8026790:	2104      	movs	r1, #4
 8026792:	4620      	mov	r0, r4
 8026794:	f7f3 fcae 	bl	801a0f4 <mbedtls_pk_can_do>
        return( MBEDTLS_SSL_SIG_ECDSA );
 8026798:	2800      	cmp	r0, #0
 802679a:	bf0c      	ite	eq
 802679c:	2000      	moveq	r0, #0
 802679e:	2003      	movne	r0, #3
 80267a0:	e7f5      	b.n	802678e <mbedtls_ssl_sig_from_pk+0xe>

080267a2 <mbedtls_ssl_sig_from_pk_alg>:
    switch( type ) {
 80267a2:	2802      	cmp	r0, #2
 80267a4:	d006      	beq.n	80267b4 <mbedtls_ssl_sig_from_pk_alg+0x12>
 80267a6:	2804      	cmp	r0, #4
 80267a8:	d006      	beq.n	80267b8 <mbedtls_ssl_sig_from_pk_alg+0x16>
            return( MBEDTLS_SSL_SIG_ANON );
 80267aa:	2801      	cmp	r0, #1
 80267ac:	bf14      	ite	ne
 80267ae:	2000      	movne	r0, #0
 80267b0:	2001      	moveq	r0, #1
 80267b2:	4770      	bx	lr
    switch( type ) {
 80267b4:	2003      	movs	r0, #3
 80267b6:	4770      	bx	lr
 80267b8:	2003      	movs	r0, #3
}
 80267ba:	4770      	bx	lr

080267bc <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
 80267bc:	2801      	cmp	r0, #1
 80267be:	d003      	beq.n	80267c8 <mbedtls_ssl_pk_alg_from_sig+0xc>
 80267c0:	2803      	cmp	r0, #3
 80267c2:	bf14      	ite	ne
 80267c4:	2000      	movne	r0, #0
 80267c6:	2004      	moveq	r0, #4
}
 80267c8:	4770      	bx	lr

080267ca <mbedtls_ssl_sig_hash_set_find>:
    switch( sig_alg )
 80267ca:	2901      	cmp	r1, #1
 80267cc:	d003      	beq.n	80267d6 <mbedtls_ssl_sig_hash_set_find+0xc>
 80267ce:	2904      	cmp	r1, #4
 80267d0:	d003      	beq.n	80267da <mbedtls_ssl_sig_hash_set_find+0x10>
 80267d2:	2000      	movs	r0, #0
 80267d4:	4770      	bx	lr
            return( set->rsa );
 80267d6:	7800      	ldrb	r0, [r0, #0]
 80267d8:	4770      	bx	lr
            return( set->ecdsa );
 80267da:	7840      	ldrb	r0, [r0, #1]
}
 80267dc:	4770      	bx	lr

080267de <mbedtls_ssl_sig_hash_set_add>:
    switch( sig_alg )
 80267de:	2901      	cmp	r1, #1
 80267e0:	d002      	beq.n	80267e8 <mbedtls_ssl_sig_hash_set_add+0xa>
 80267e2:	2904      	cmp	r1, #4
 80267e4:	d004      	beq.n	80267f0 <mbedtls_ssl_sig_hash_set_add+0x12>
 80267e6:	4770      	bx	lr
            if( set->rsa == MBEDTLS_MD_NONE )
 80267e8:	7803      	ldrb	r3, [r0, #0]
 80267ea:	b923      	cbnz	r3, 80267f6 <mbedtls_ssl_sig_hash_set_add+0x18>
                set->rsa = md_alg;
 80267ec:	7002      	strb	r2, [r0, #0]
 80267ee:	4770      	bx	lr
            if( set->ecdsa == MBEDTLS_MD_NONE )
 80267f0:	7843      	ldrb	r3, [r0, #1]
 80267f2:	b903      	cbnz	r3, 80267f6 <mbedtls_ssl_sig_hash_set_add+0x18>
                set->ecdsa = md_alg;
 80267f4:	7042      	strb	r2, [r0, #1]
}
 80267f6:	4770      	bx	lr

080267f8 <mbedtls_ssl_sig_hash_set_const_hash>:
    set->rsa   = md_alg;
 80267f8:	7001      	strb	r1, [r0, #0]
    set->ecdsa = md_alg;
 80267fa:	7041      	strb	r1, [r0, #1]
}
 80267fc:	4770      	bx	lr

080267fe <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
 80267fe:	3801      	subs	r0, #1
 8026800:	2805      	cmp	r0, #5
 8026802:	d80e      	bhi.n	8026822 <mbedtls_ssl_md_alg_from_hash+0x24>
 8026804:	e8df f000 	tbb	[pc, r0]
 8026808:	0705030f 	.word	0x0705030f
 802680c:	0b09      	.short	0x0b09
            return( MBEDTLS_MD_SHA512 );
 802680e:	2004      	movs	r0, #4
 8026810:	4770      	bx	lr
            return( MBEDTLS_MD_SHA224 );
 8026812:	2005      	movs	r0, #5
 8026814:	4770      	bx	lr
            return( MBEDTLS_MD_SHA256 );
 8026816:	2006      	movs	r0, #6
 8026818:	4770      	bx	lr
            return( MBEDTLS_MD_SHA384 );
 802681a:	2007      	movs	r0, #7
 802681c:	4770      	bx	lr
            return( MBEDTLS_MD_SHA512 );
 802681e:	2008      	movs	r0, #8
 8026820:	4770      	bx	lr
            return( MBEDTLS_MD_NONE );
 8026822:	2000      	movs	r0, #0
 8026824:	4770      	bx	lr
            return( MBEDTLS_MD_MD5 );
 8026826:	2003      	movs	r0, #3
}
 8026828:	4770      	bx	lr

0802682a <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 802682a:	3803      	subs	r0, #3
 802682c:	2805      	cmp	r0, #5
 802682e:	d80e      	bhi.n	802684e <mbedtls_ssl_hash_from_md_alg+0x24>
 8026830:	e8df f000 	tbb	[pc, r0]
 8026834:	0705030f 	.word	0x0705030f
 8026838:	0b09      	.short	0x0b09
            return( MBEDTLS_SSL_HASH_SHA512 );
 802683a:	2002      	movs	r0, #2
 802683c:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA224 );
 802683e:	2003      	movs	r0, #3
 8026840:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA256 );
 8026842:	2004      	movs	r0, #4
 8026844:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA384 );
 8026846:	2005      	movs	r0, #5
 8026848:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_SHA512 );
 802684a:	2006      	movs	r0, #6
 802684c:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_NONE );
 802684e:	2000      	movs	r0, #0
 8026850:	4770      	bx	lr
            return( MBEDTLS_SSL_HASH_MD5 );
 8026852:	2001      	movs	r0, #1
}
 8026854:	4770      	bx	lr

08026856 <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
 8026856:	6803      	ldr	r3, [r0, #0]
 8026858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802685a:	b152      	cbz	r2, 8026872 <mbedtls_ssl_check_curve+0x1c>
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 802685c:	7813      	ldrb	r3, [r2, #0]
 802685e:	b15b      	cbz	r3, 8026878 <mbedtls_ssl_check_curve+0x22>
        if( *gid == grp_id )
 8026860:	4299      	cmp	r1, r3
 8026862:	d00c      	beq.n	802687e <mbedtls_ssl_check_curve+0x28>
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 8026864:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8026868:	2b00      	cmp	r3, #0
 802686a:	d1f9      	bne.n	8026860 <mbedtls_ssl_check_curve+0xa>
    return( -1 );
 802686c:	f04f 30ff 	mov.w	r0, #4294967295
 8026870:	4770      	bx	lr
        return( -1 );
 8026872:	f04f 30ff 	mov.w	r0, #4294967295
 8026876:	4770      	bx	lr
    return( -1 );
 8026878:	f04f 30ff 	mov.w	r0, #4294967295
 802687c:	4770      	bx	lr
            return( 0 );
 802687e:	2000      	movs	r0, #0
}
 8026880:	4770      	bx	lr
	...

08026884 <mbedtls_ssl_parse_certificate>:
{
 8026884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026888:	b087      	sub	sp, #28
 802688a:	4604      	mov	r4, r0
    const mbedtls_ssl_ciphersuite_t * const ciphersuite_info =
 802688c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 802688e:	681e      	ldr	r6, [r3, #0]
    const int authmode = ssl->conf->authmode;
 8026890:	6803      	ldr	r3, [r0, #0]
 8026892:	f893 5070 	ldrb.w	r5, [r3, #112]	; 0x70
 8026896:	f3c5 0581 	ubfx	r5, r5, #2, #2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 802689a:	4bb5      	ldr	r3, [pc, #724]	; (8026b70 <mbedtls_ssl_parse_certificate+0x2ec>)
 802689c:	9300      	str	r3, [sp, #0]
 802689e:	f241 6317 	movw	r3, #5655	; 0x1617
 80268a2:	4ab4      	ldr	r2, [pc, #720]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 80268a4:	2102      	movs	r1, #2
 80268a6:	f7ee ff33 	bl	8015710 <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80268aa:	7ab3      	ldrb	r3, [r6, #10]
 80268ac:	2b0b      	cmp	r3, #11
 80268ae:	d805      	bhi.n	80268bc <mbedtls_ssl_parse_certificate+0x38>
 80268b0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80268b4:	40da      	lsrs	r2, r3
 80268b6:	f012 0f01 	tst.w	r2, #1
 80268ba:	d150      	bne.n	802695e <mbedtls_ssl_parse_certificate+0xda>
    const int authmode = ssl->conf->authmode;
 80268bc:	46a8      	mov	r8, r5
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
 80268be:	6822      	ldr	r2, [r4, #0]
 80268c0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 80268c4:	f012 0f01 	tst.w	r2, #1
 80268c8:	d003      	beq.n	80268d2 <mbedtls_ssl_parse_certificate+0x4e>
 80268ca:	2b07      	cmp	r3, #7
 80268cc:	d059      	beq.n	8026982 <mbedtls_ssl_parse_certificate+0xfe>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER &&
 80268ce:	2d00      	cmp	r5, #0
 80268d0:	d066      	beq.n	80269a0 <mbedtls_ssl_parse_certificate+0x11c>
    if( ( ret = mbedtls_ssl_read_record( ssl, 1 ) ) != 0 )
 80268d2:	2101      	movs	r1, #1
 80268d4:	4620      	mov	r0, r4
 80268d6:	f7fe fb3f 	bl	8024f58 <mbedtls_ssl_read_record>
 80268da:	4681      	mov	r9, r0
 80268dc:	2800      	cmp	r0, #0
 80268de:	d16f      	bne.n	80269c0 <mbedtls_ssl_parse_certificate+0x13c>
    if( ssl->conf->endpoint  == MBEDTLS_SSL_IS_SERVER &&
 80268e0:	6823      	ldr	r3, [r4, #0]
 80268e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80268e6:	f013 0f01 	tst.w	r3, #1
 80268ea:	d004      	beq.n	80268f6 <mbedtls_ssl_parse_certificate+0x72>
 80268ec:	68e3      	ldr	r3, [r4, #12]
 80268ee:	b113      	cbz	r3, 80268f6 <mbedtls_ssl_parse_certificate+0x72>
        if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&
 80268f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80268f2:	2b07      	cmp	r3, #7
 80268f4:	d070      	beq.n	80269d8 <mbedtls_ssl_parse_certificate+0x154>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80268f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80268f8:	2b16      	cmp	r3, #22
 80268fa:	d170      	bne.n	80269de <mbedtls_ssl_parse_certificate+0x15a>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80268fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80268fe:	7813      	ldrb	r3, [r2, #0]
 8026900:	2b0b      	cmp	r3, #11
 8026902:	f040 8081 	bne.w	8026a08 <mbedtls_ssl_parse_certificate+0x184>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 8026906:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8026908:	2909      	cmp	r1, #9
 802690a:	d97d      	bls.n	8026a08 <mbedtls_ssl_parse_certificate+0x184>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 802690c:	7950      	ldrb	r0, [r2, #5]
 802690e:	7993      	ldrb	r3, [r2, #6]
 8026910:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    if( ssl->in_msg[i] != 0 ||
 8026914:	7912      	ldrb	r2, [r2, #4]
 8026916:	2a00      	cmp	r2, #0
 8026918:	f040 809c 	bne.w	8026a54 <mbedtls_ssl_parse_certificate+0x1d0>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 802691c:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 802691e:	4299      	cmp	r1, r3
 8026920:	f040 8098 	bne.w	8026a54 <mbedtls_ssl_parse_certificate+0x1d0>
    if( ssl->session_negotiate->peer_cert != NULL )
 8026924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026926:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8026928:	b128      	cbz	r0, 8026936 <mbedtls_ssl_parse_certificate+0xb2>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 802692a:	f001 fd26 	bl	802837a <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 802692e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026930:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8026932:	f002 fab9 	bl	8028ea8 <mbedtls_free>
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 8026936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026938:	f44f 719a 	mov.w	r1, #308	; 0x134
 802693c:	2001      	movs	r0, #1
 802693e:	f002 faa5 	bl	8028e8c <mbedtls_calloc>
 8026942:	6670      	str	r0, [r6, #100]	; 0x64
 8026944:	2800      	cmp	r0, #0
 8026946:	f000 8096 	beq.w	8026a76 <mbedtls_ssl_parse_certificate+0x1f2>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 802694a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802694c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 802694e:	f001 fd0d 	bl	802836c <mbedtls_x509_crt_init>
    i += 3;
 8026952:	2607      	movs	r6, #7
        switch( ret )
 8026954:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8026b94 <mbedtls_ssl_parse_certificate+0x310>
 8026958:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8026b98 <mbedtls_ssl_parse_certificate+0x314>
    while( i < ssl->in_hslen )
 802695c:	e0d4      	b.n	8026b08 <mbedtls_ssl_parse_certificate+0x284>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 802695e:	4b86      	ldr	r3, [pc, #536]	; (8026b78 <mbedtls_ssl_parse_certificate+0x2f4>)
 8026960:	9300      	str	r3, [sp, #0]
 8026962:	f241 631e 	movw	r3, #5662	; 0x161e
 8026966:	4a83      	ldr	r2, [pc, #524]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026968:	2102      	movs	r1, #2
 802696a:	4620      	mov	r0, r4
 802696c:	f7ee fed0 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 8026970:	6863      	ldr	r3, [r4, #4]
 8026972:	3301      	adds	r3, #1
 8026974:	6063      	str	r3, [r4, #4]
        return( 0 );
 8026976:	f04f 0800 	mov.w	r8, #0
}
 802697a:	4640      	mov	r0, r8
 802697c:	b007      	add	sp, #28
 802697e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 8026982:	4b7d      	ldr	r3, [pc, #500]	; (8026b78 <mbedtls_ssl_parse_certificate+0x2f4>)
 8026984:	9300      	str	r3, [sp, #0]
 8026986:	f241 6327 	movw	r3, #5671	; 0x1627
 802698a:	4a7a      	ldr	r2, [pc, #488]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 802698c:	2102      	movs	r1, #2
 802698e:	4620      	mov	r0, r4
 8026990:	f7ee febe 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 8026994:	6863      	ldr	r3, [r4, #4]
 8026996:	3301      	adds	r3, #1
 8026998:	6063      	str	r3, [r4, #4]
        return( 0 );
 802699a:	f04f 0800 	mov.w	r8, #0
 802699e:	e7ec      	b.n	802697a <mbedtls_ssl_parse_certificate+0xf6>
        ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_SKIP_VERIFY;
 80269a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80269a2:	2280      	movs	r2, #128	; 0x80
 80269a4:	669a      	str	r2, [r3, #104]	; 0x68
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 80269a6:	4b74      	ldr	r3, [pc, #464]	; (8026b78 <mbedtls_ssl_parse_certificate+0x2f4>)
 80269a8:	9300      	str	r3, [sp, #0]
 80269aa:	f241 6330 	movw	r3, #5680	; 0x1630
 80269ae:	4a71      	ldr	r2, [pc, #452]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 80269b0:	2102      	movs	r1, #2
 80269b2:	4620      	mov	r0, r4
 80269b4:	f7ee feac 	bl	8015710 <mbedtls_debug_print_msg>
        ssl->state++;
 80269b8:	6863      	ldr	r3, [r4, #4]
 80269ba:	3301      	adds	r3, #1
 80269bc:	6063      	str	r3, [r4, #4]
        return( 0 );
 80269be:	e7dc      	b.n	802697a <mbedtls_ssl_parse_certificate+0xf6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 80269c0:	9001      	str	r0, [sp, #4]
 80269c2:	4b6e      	ldr	r3, [pc, #440]	; (8026b7c <mbedtls_ssl_parse_certificate+0x2f8>)
 80269c4:	9300      	str	r3, [sp, #0]
 80269c6:	f241 6343 	movw	r3, #5699	; 0x1643
 80269ca:	4a6a      	ldr	r2, [pc, #424]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 80269cc:	2101      	movs	r1, #1
 80269ce:	4620      	mov	r0, r4
 80269d0:	f7ee fed0 	bl	8015774 <mbedtls_debug_print_ret>
        return( ret );
 80269d4:	46c8      	mov	r8, r9
 80269d6:	e7d0      	b.n	802697a <mbedtls_ssl_parse_certificate+0xf6>
        if( ssl->in_hslen   == 3 + mbedtls_ssl_hs_hdr_len( ssl ) &&
 80269d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80269da:	2b16      	cmp	r3, #22
 80269dc:	d010      	beq.n	8026a00 <mbedtls_ssl_parse_certificate+0x17c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 80269de:	4b68      	ldr	r3, [pc, #416]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 80269e0:	9300      	str	r3, [sp, #0]
 80269e2:	f241 5379 	movw	r3, #5497	; 0x1579
 80269e6:	4a63      	ldr	r2, [pc, #396]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 80269e8:	2101      	movs	r1, #1
 80269ea:	4620      	mov	r0, r4
 80269ec:	f7ee fe90 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 80269f0:	220a      	movs	r2, #10
 80269f2:	2102      	movs	r1, #2
 80269f4:	4620      	mov	r0, r4
 80269f6:	f7fe fa57 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80269fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8026b9c <mbedtls_ssl_parse_certificate+0x318>
 80269fe:	e108      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&
 8026a00:	6e60      	ldr	r0, [r4, #100]	; 0x64
            ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE    &&
 8026a02:	7803      	ldrb	r3, [r0, #0]
 8026a04:	2b0b      	cmp	r3, #11
 8026a06:	d010      	beq.n	8026a2a <mbedtls_ssl_parse_certificate+0x1a6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8026a08:	4b5d      	ldr	r3, [pc, #372]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 8026a0a:	9300      	str	r3, [sp, #0]
 8026a0c:	f241 5382 	movw	r3, #5506	; 0x1582
 8026a10:	4a58      	ldr	r2, [pc, #352]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026a12:	2101      	movs	r1, #1
 8026a14:	4620      	mov	r0, r4
 8026a16:	f7ee fe7b 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026a1a:	2232      	movs	r2, #50	; 0x32
 8026a1c:	2102      	movs	r1, #2
 8026a1e:	4620      	mov	r0, r4
 8026a20:	f7fe fa42 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8026a24:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8026ba0 <mbedtls_ssl_parse_certificate+0x31c>
 8026a28:	e0f3      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ), "\0\0\0", 3 ) == 0 )
 8026a2a:	2203      	movs	r2, #3
 8026a2c:	4955      	ldr	r1, [pc, #340]	; (8026b84 <mbedtls_ssl_parse_certificate+0x300>)
 8026a2e:	3004      	adds	r0, #4
 8026a30:	f003 fd75 	bl	802a51e <memcmp>
            ssl->in_msg[0]  == MBEDTLS_SSL_HS_CERTIFICATE   &&
 8026a34:	b108      	cbz	r0, 8026a3a <mbedtls_ssl_parse_certificate+0x1b6>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 8026a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026a38:	e765      	b.n	8026906 <mbedtls_ssl_parse_certificate+0x82>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLSv1 client has no certificate" ) );
 8026a3a:	4b53      	ldr	r3, [pc, #332]	; (8026b88 <mbedtls_ssl_parse_certificate+0x304>)
 8026a3c:	9300      	str	r3, [sp, #0]
 8026a3e:	f241 536a 	movw	r3, #5482	; 0x156a
 8026a42:	4a4c      	ldr	r2, [pc, #304]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026a44:	2101      	movs	r1, #1
 8026a46:	4620      	mov	r0, r4
 8026a48:	f7ee fe62 	bl	8015710 <mbedtls_debug_print_msg>
            ssl->session_negotiate->verify_result = MBEDTLS_X509_BADCERT_MISSING;
 8026a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026a4e:	2240      	movs	r2, #64	; 0x40
 8026a50:	669a      	str	r2, [r3, #104]	; 0x68
            return( MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE );
 8026a52:	e0d9      	b.n	8026c08 <mbedtls_ssl_parse_certificate+0x384>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8026a54:	4b4a      	ldr	r3, [pc, #296]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 8026a56:	9300      	str	r3, [sp, #0]
 8026a58:	f241 5392 	movw	r3, #5522	; 0x1592
 8026a5c:	4a45      	ldr	r2, [pc, #276]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026a5e:	2101      	movs	r1, #1
 8026a60:	4620      	mov	r0, r4
 8026a62:	f7ee fe55 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026a66:	2232      	movs	r2, #50	; 0x32
 8026a68:	2102      	movs	r1, #2
 8026a6a:	4620      	mov	r0, r4
 8026a6c:	f7fe fa1c 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8026a70:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8026ba0 <mbedtls_ssl_parse_certificate+0x31c>
 8026a74:	e0cd      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 8026a76:	f44f 739a 	mov.w	r3, #308	; 0x134
 8026a7a:	9301      	str	r3, [sp, #4]
 8026a7c:	4b43      	ldr	r3, [pc, #268]	; (8026b8c <mbedtls_ssl_parse_certificate+0x308>)
 8026a7e:	9300      	str	r3, [sp, #0]
 8026a80:	f241 53a2 	movw	r3, #5538	; 0x15a2
 8026a84:	4a3b      	ldr	r2, [pc, #236]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026a86:	2101      	movs	r1, #1
 8026a88:	4620      	mov	r0, r4
 8026a8a:	f7ee fe41 	bl	8015710 <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026a8e:	2250      	movs	r2, #80	; 0x50
 8026a90:	2102      	movs	r1, #2
 8026a92:	4620      	mov	r0, r4
 8026a94:	f7fe fa08 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8026a98:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8026ba4 <mbedtls_ssl_parse_certificate+0x320>
 8026a9c:	e0b9      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8026a9e:	4b38      	ldr	r3, [pc, #224]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 8026aa0:	9300      	str	r3, [sp, #0]
 8026aa2:	f241 53b0 	movw	r3, #5552	; 0x15b0
 8026aa6:	4a33      	ldr	r2, [pc, #204]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026aa8:	2101      	movs	r1, #1
 8026aaa:	4620      	mov	r0, r4
 8026aac:	f7ee fe30 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026ab0:	2232      	movs	r2, #50	; 0x32
 8026ab2:	2102      	movs	r1, #2
 8026ab4:	4620      	mov	r0, r4
 8026ab6:	f7fe f9f7 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8026aba:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8026ba0 <mbedtls_ssl_parse_certificate+0x31c>
 8026abe:	e0a8      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8026ac0:	4b2f      	ldr	r3, [pc, #188]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 8026ac2:	9300      	str	r3, [sp, #0]
 8026ac4:	f241 53b7 	movw	r3, #5559	; 0x15b7
 8026ac8:	4a2a      	ldr	r2, [pc, #168]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026aca:	2101      	movs	r1, #1
 8026acc:	4620      	mov	r0, r4
 8026ace:	f7ee fe1f 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026ad2:	2232      	movs	r2, #50	; 0x32
 8026ad4:	2102      	movs	r1, #2
 8026ad6:	4620      	mov	r0, r4
 8026ad8:	f7fe f9e6 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8026adc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8026ba0 <mbedtls_ssl_parse_certificate+0x31c>
 8026ae0:	e097      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 8026ae2:	4b27      	ldr	r3, [pc, #156]	; (8026b80 <mbedtls_ssl_parse_certificate+0x2fc>)
 8026ae4:	9300      	str	r3, [sp, #0]
 8026ae6:	f241 53c3 	movw	r3, #5571	; 0x15c3
 8026aea:	4a22      	ldr	r2, [pc, #136]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026aec:	2101      	movs	r1, #1
 8026aee:	4620      	mov	r0, r4
 8026af0:	f7ee fe0e 	bl	8015710 <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026af4:	2232      	movs	r2, #50	; 0x32
 8026af6:	2102      	movs	r1, #2
 8026af8:	4620      	mov	r0, r4
 8026afa:	f7fe f9d5 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 8026afe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8026ba0 <mbedtls_ssl_parse_certificate+0x31c>
 8026b02:	e086      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
        switch( ret )
 8026b04:	4550      	cmp	r0, sl
 8026b06:	d151      	bne.n	8026bac <mbedtls_ssl_parse_certificate+0x328>
    while( i < ssl->in_hslen )
 8026b08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8026b0a:	429e      	cmp	r6, r3
 8026b0c:	d26c      	bcs.n	8026be8 <mbedtls_ssl_parse_certificate+0x364>
        if ( i + 3 > ssl->in_hslen ) {
 8026b0e:	1cf1      	adds	r1, r6, #3
 8026b10:	4299      	cmp	r1, r3
 8026b12:	d8c4      	bhi.n	8026a9e <mbedtls_ssl_parse_certificate+0x21a>
        if( ssl->in_msg[i] != 0 )
 8026b14:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8026b16:	5d82      	ldrb	r2, [r0, r6]
 8026b18:	2a00      	cmp	r2, #0
 8026b1a:	d1d1      	bne.n	8026ac0 <mbedtls_ssl_parse_certificate+0x23c>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8026b1c:	4406      	add	r6, r0
 8026b1e:	7877      	ldrb	r7, [r6, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 8026b20:	78b2      	ldrb	r2, [r6, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 8026b22:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 8026b26:	2a7f      	cmp	r2, #127	; 0x7f
 8026b28:	d9db      	bls.n	8026ae2 <mbedtls_ssl_parse_certificate+0x25e>
 8026b2a:	188e      	adds	r6, r1, r2
 8026b2c:	42b3      	cmp	r3, r6
 8026b2e:	d3d8      	bcc.n	8026ae2 <mbedtls_ssl_parse_certificate+0x25e>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8026b30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026b32:	4401      	add	r1, r0
 8026b34:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8026b36:	f001 fc8d 	bl	8028454 <mbedtls_x509_crt_parse_der>
 8026b3a:	4607      	mov	r7, r0
        switch( ret )
 8026b3c:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 8026b40:	f000 8112 	beq.w	8026d68 <mbedtls_ssl_parse_certificate+0x4e4>
 8026b44:	4558      	cmp	r0, fp
 8026b46:	da2f      	bge.n	8026ba8 <mbedtls_ssl_parse_certificate+0x324>
 8026b48:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 8026b4c:	d1da      	bne.n	8026b04 <mbedtls_ssl_parse_certificate+0x280>
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 8026b4e:	2250      	movs	r2, #80	; 0x50
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 8026b50:	2102      	movs	r1, #2
 8026b52:	4620      	mov	r0, r4
 8026b54:	f7fe f9a8 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 8026b58:	9701      	str	r7, [sp, #4]
 8026b5a:	4b0d      	ldr	r3, [pc, #52]	; (8026b90 <mbedtls_ssl_parse_certificate+0x30c>)
 8026b5c:	9300      	str	r3, [sp, #0]
 8026b5e:	f241 53df 	movw	r3, #5599	; 0x15df
 8026b62:	4a04      	ldr	r2, [pc, #16]	; (8026b74 <mbedtls_ssl_parse_certificate+0x2f0>)
 8026b64:	2101      	movs	r1, #1
 8026b66:	4620      	mov	r0, r4
 8026b68:	f7ee fe04 	bl	8015774 <mbedtls_debug_print_ret>
 8026b6c:	46b8      	mov	r8, r7
 8026b6e:	e050      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
 8026b70:	080360b4 	.word	0x080360b4
 8026b74:	08035174 	.word	0x08035174
 8026b78:	080360cc 	.word	0x080360cc
 8026b7c:	08033d80 	.word	0x08033d80
 8026b80:	08036108 	.word	0x08036108
 8026b84:	0802bb00 	.word	0x0802bb00
 8026b88:	080360e8 	.word	0x080360e8
 8026b8c:	0803608c 	.word	0x0803608c
 8026b90:	08036120 	.word	0x08036120
 8026b94:	ffffda81 	.word	0xffffda81
 8026b98:	ffffd9d2 	.word	0xffffd9d2
 8026b9c:	ffff8900 	.word	0xffff8900
 8026ba0:	ffff8600 	.word	0xffff8600
 8026ba4:	ffff8100 	.word	0xffff8100
        switch( ret )
 8026ba8:	2800      	cmp	r0, #0
 8026baa:	d0ad      	beq.n	8026b08 <mbedtls_ssl_parse_certificate+0x284>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 8026bac:	222a      	movs	r2, #42	; 0x2a
 8026bae:	2102      	movs	r1, #2
 8026bb0:	4620      	mov	r0, r4
 8026bb2:	f7fe f979 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 8026bb6:	9701      	str	r7, [sp, #4]
 8026bb8:	4b6c      	ldr	r3, [pc, #432]	; (8026d6c <mbedtls_ssl_parse_certificate+0x4e8>)
 8026bba:	9300      	str	r3, [sp, #0]
 8026bbc:	f241 53df 	movw	r3, #5599	; 0x15df
 8026bc0:	4a6b      	ldr	r2, [pc, #428]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026bc2:	2101      	movs	r1, #1
 8026bc4:	4620      	mov	r0, r4
 8026bc6:	f7ee fdd5 	bl	8015774 <mbedtls_debug_print_ret>
    if( ( ret = ssl_parse_certificate_chain( ssl ) ) != 0 )
 8026bca:	b9d7      	cbnz	r7, 8026c02 <mbedtls_ssl_parse_certificate+0x37e>
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 8026bcc:	bb3d      	cbnz	r5, 8026c1e <mbedtls_ssl_parse_certificate+0x39a>
    ssl->state++;
 8026bce:	6863      	ldr	r3, [r4, #4]
 8026bd0:	3301      	adds	r3, #1
 8026bd2:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 8026bd4:	4b67      	ldr	r3, [pc, #412]	; (8026d74 <mbedtls_ssl_parse_certificate+0x4f0>)
 8026bd6:	9300      	str	r3, [sp, #0]
 8026bd8:	f241 63e7 	movw	r3, #5863	; 0x16e7
 8026bdc:	4a64      	ldr	r2, [pc, #400]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026bde:	2102      	movs	r1, #2
 8026be0:	4620      	mov	r0, r4
 8026be2:	f7ee fd95 	bl	8015710 <mbedtls_debug_print_msg>
    return( ret );
 8026be6:	e6c8      	b.n	802697a <mbedtls_ssl_parse_certificate+0xf6>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 8026be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8026bec:	9301      	str	r3, [sp, #4]
 8026bee:	4b62      	ldr	r3, [pc, #392]	; (8026d78 <mbedtls_ssl_parse_certificate+0x4f4>)
 8026bf0:	9300      	str	r3, [sp, #0]
 8026bf2:	f241 53e6 	movw	r3, #5606	; 0x15e6
 8026bf6:	4a5e      	ldr	r2, [pc, #376]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026bf8:	2103      	movs	r1, #3
 8026bfa:	4620      	mov	r0, r4
 8026bfc:	f7ee ffa4 	bl	8015b48 <mbedtls_debug_print_crt>
    return( 0 );
 8026c00:	e7e4      	b.n	8026bcc <mbedtls_ssl_parse_certificate+0x348>
        if( ret == MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE &&
 8026c02:	f517 4fe9 	cmn.w	r7, #29824	; 0x7480
 8026c06:	d108      	bne.n	8026c1a <mbedtls_ssl_parse_certificate+0x396>
            ret = 0;
 8026c08:	4b5c      	ldr	r3, [pc, #368]	; (8026d7c <mbedtls_ssl_parse_certificate+0x4f8>)
 8026c0a:	2d01      	cmp	r5, #1
 8026c0c:	bf0c      	ite	eq
 8026c0e:	46c8      	moveq	r8, r9
 8026c10:	4698      	movne	r8, r3
        ssl->state++;
 8026c12:	6863      	ldr	r3, [r4, #4]
 8026c14:	3301      	adds	r3, #1
 8026c16:	6063      	str	r3, [r4, #4]
        return( ret );
 8026c18:	e6af      	b.n	802697a <mbedtls_ssl_parse_certificate+0xf6>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 8026c1a:	46b8      	mov	r8, r7
 8026c1c:	e7f9      	b.n	8026c12 <mbedtls_ssl_parse_certificate+0x38e>
            ca_chain = ssl->conf->ca_chain;
 8026c1e:	6821      	ldr	r1, [r4, #0]
 8026c20:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
                                ssl->session_negotiate->peer_cert,
 8026c22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
        ret = mbedtls_x509_crt_verify_restartable(
 8026c24:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8026c28:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8026c2a:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8026c2c:	f04f 0c00 	mov.w	ip, #0
 8026c30:	f8cd c010 	str.w	ip, [sp, #16]
 8026c34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8026c36:	9303      	str	r3, [sp, #12]
 8026c38:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8026c3a:	9102      	str	r1, [sp, #8]
 8026c3c:	3668      	adds	r6, #104	; 0x68
 8026c3e:	9601      	str	r6, [sp, #4]
 8026c40:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8026c44:	9100      	str	r1, [sp, #0]
 8026c46:	4673      	mov	r3, lr
 8026c48:	4639      	mov	r1, r7
 8026c4a:	f001 f97d 	bl	8027f48 <mbedtls_x509_crt_verify_restartable>
        if( ret != 0 )
 8026c4e:	4606      	mov	r6, r0
 8026c50:	bb38      	cbnz	r0, 8026ca2 <mbedtls_ssl_parse_certificate+0x41e>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 8026c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026c54:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 8026c58:	2102      	movs	r1, #2
 8026c5a:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
 8026c5e:	f7f3 fa49 	bl	801a0f4 <mbedtls_pk_can_do>
 8026c62:	bb48      	cbnz	r0, 8026cb8 <mbedtls_ssl_parse_certificate+0x434>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 8026c64:	2d01      	cmp	r5, #1
 8026c66:	d042      	beq.n	8026cee <mbedtls_ssl_parse_certificate+0x46a>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8026c68:	2f00      	cmp	r7, #0
 8026c6a:	d048      	beq.n	8026cfe <mbedtls_ssl_parse_certificate+0x47a>
        if( ret != 0 )
 8026c6c:	2e00      	cmp	r6, #0
 8026c6e:	d06f      	beq.n	8026d50 <mbedtls_ssl_parse_certificate+0x4cc>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 8026c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026c74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8026c78:	d14e      	bne.n	8026d18 <mbedtls_ssl_parse_certificate+0x494>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 8026c7a:	f013 0f04 	tst.w	r3, #4
 8026c7e:	d15f      	bne.n	8026d40 <mbedtls_ssl_parse_certificate+0x4bc>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 8026c80:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8026c84:	bf18      	it	ne
 8026c86:	222b      	movne	r2, #43	; 0x2b
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 8026c88:	d147      	bne.n	8026d1a <mbedtls_ssl_parse_certificate+0x496>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 8026c8a:	f013 0f01 	tst.w	r3, #1
 8026c8e:	d159      	bne.n	8026d44 <mbedtls_ssl_parse_certificate+0x4c0>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 8026c90:	f013 0f02 	tst.w	r3, #2
 8026c94:	d158      	bne.n	8026d48 <mbedtls_ssl_parse_certificate+0x4c4>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 8026c96:	f013 0f08 	tst.w	r3, #8
 8026c9a:	bf14      	ite	ne
 8026c9c:	2230      	movne	r2, #48	; 0x30
 8026c9e:	222e      	moveq	r2, #46	; 0x2e
 8026ca0:	e03b      	b.n	8026d1a <mbedtls_ssl_parse_certificate+0x496>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 8026ca2:	9001      	str	r0, [sp, #4]
 8026ca4:	4b36      	ldr	r3, [pc, #216]	; (8026d80 <mbedtls_ssl_parse_certificate+0x4fc>)
 8026ca6:	9300      	str	r3, [sp, #0]
 8026ca8:	f241 637d 	movw	r3, #5757	; 0x167d
 8026cac:	4a30      	ldr	r2, [pc, #192]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026cae:	2101      	movs	r1, #1
 8026cb0:	4620      	mov	r0, r4
 8026cb2:	f7ee fd5f 	bl	8015774 <mbedtls_debug_print_ret>
 8026cb6:	e7cc      	b.n	8026c52 <mbedtls_ssl_parse_certificate+0x3ce>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 8026cb8:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
 8026cbc:	7819      	ldrb	r1, [r3, #0]
 8026cbe:	4620      	mov	r0, r4
 8026cc0:	f7ff fdc9 	bl	8026856 <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 8026cc4:	2800      	cmp	r0, #0
 8026cc6:	d0cd      	beq.n	8026c64 <mbedtls_ssl_parse_certificate+0x3e0>
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8026cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8026cca:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8026ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026cd0:	6693      	str	r3, [r2, #104]	; 0x68
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
 8026cd2:	4b2c      	ldr	r3, [pc, #176]	; (8026d84 <mbedtls_ssl_parse_certificate+0x500>)
 8026cd4:	9300      	str	r3, [sp, #0]
 8026cd6:	f241 6393 	movw	r3, #5779	; 0x1693
 8026cda:	4a25      	ldr	r2, [pc, #148]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026cdc:	2101      	movs	r1, #1
 8026cde:	4620      	mov	r0, r4
 8026ce0:	f7ee fd16 	bl	8015710 <mbedtls_debug_print_msg>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 8026ce4:	4b28      	ldr	r3, [pc, #160]	; (8026d88 <mbedtls_ssl_parse_certificate+0x504>)
 8026ce6:	2e00      	cmp	r6, #0
 8026ce8:	bf08      	it	eq
 8026cea:	461e      	moveq	r6, r3
 8026cec:	e7ba      	b.n	8026c64 <mbedtls_ssl_parse_certificate+0x3e0>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 8026cee:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 8026cf2:	d02b      	beq.n	8026d4c <mbedtls_ssl_parse_certificate+0x4c8>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 8026cf4:	f516 4ff4 	cmn.w	r6, #31232	; 0x7a00
 8026cf8:	d1b8      	bne.n	8026c6c <mbedtls_ssl_parse_certificate+0x3e8>
 8026cfa:	46c8      	mov	r8, r9
 8026cfc:	e012      	b.n	8026d24 <mbedtls_ssl_parse_certificate+0x4a0>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 8026cfe:	2d02      	cmp	r5, #2
 8026d00:	d1b4      	bne.n	8026c6c <mbedtls_ssl_parse_certificate+0x3e8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 8026d02:	4b22      	ldr	r3, [pc, #136]	; (8026d8c <mbedtls_ssl_parse_certificate+0x508>)
 8026d04:	9300      	str	r3, [sp, #0]
 8026d06:	f241 63b3 	movw	r3, #5811	; 0x16b3
 8026d0a:	4a19      	ldr	r2, [pc, #100]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026d0c:	2101      	movs	r1, #1
 8026d0e:	4620      	mov	r0, r4
 8026d10:	f7ee fcfe 	bl	8015710 <mbedtls_debug_print_msg>
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 8026d14:	4e1e      	ldr	r6, [pc, #120]	; (8026d90 <mbedtls_ssl_parse_certificate+0x50c>)
 8026d16:	e7ab      	b.n	8026c70 <mbedtls_ssl_parse_certificate+0x3ec>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 8026d18:	2231      	movs	r2, #49	; 0x31
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026d1a:	2102      	movs	r1, #2
 8026d1c:	4620      	mov	r0, r4
 8026d1e:	f7fe f8c3 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
 8026d22:	46b0      	mov	r8, r6
        if( ssl->session_negotiate->verify_result != 0 )
 8026d24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026d28:	b1a3      	cbz	r3, 8026d54 <mbedtls_ssl_parse_certificate+0x4d0>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 8026d2a:	9301      	str	r3, [sp, #4]
 8026d2c:	4b19      	ldr	r3, [pc, #100]	; (8026d94 <mbedtls_ssl_parse_certificate+0x510>)
 8026d2e:	9300      	str	r3, [sp, #0]
 8026d30:	f241 63db 	movw	r3, #5851	; 0x16db
 8026d34:	4a0e      	ldr	r2, [pc, #56]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026d36:	2103      	movs	r1, #3
 8026d38:	4620      	mov	r0, r4
 8026d3a:	f7ee fce9 	bl	8015710 <mbedtls_debug_print_msg>
 8026d3e:	e746      	b.n	8026bce <mbedtls_ssl_parse_certificate+0x34a>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 8026d40:	222a      	movs	r2, #42	; 0x2a
 8026d42:	e7ea      	b.n	8026d1a <mbedtls_ssl_parse_certificate+0x496>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 8026d44:	222d      	movs	r2, #45	; 0x2d
 8026d46:	e7e8      	b.n	8026d1a <mbedtls_ssl_parse_certificate+0x496>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 8026d48:	222c      	movs	r2, #44	; 0x2c
 8026d4a:	e7e6      	b.n	8026d1a <mbedtls_ssl_parse_certificate+0x496>
 8026d4c:	46c8      	mov	r8, r9
 8026d4e:	e7e9      	b.n	8026d24 <mbedtls_ssl_parse_certificate+0x4a0>
 8026d50:	46b0      	mov	r8, r6
 8026d52:	e7e7      	b.n	8026d24 <mbedtls_ssl_parse_certificate+0x4a0>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 8026d54:	4b10      	ldr	r3, [pc, #64]	; (8026d98 <mbedtls_ssl_parse_certificate+0x514>)
 8026d56:	9300      	str	r3, [sp, #0]
 8026d58:	f44f 53b7 	mov.w	r3, #5856	; 0x16e0
 8026d5c:	4a04      	ldr	r2, [pc, #16]	; (8026d70 <mbedtls_ssl_parse_certificate+0x4ec>)
 8026d5e:	2103      	movs	r1, #3
 8026d60:	4620      	mov	r0, r4
 8026d62:	f7ee fcd5 	bl	8015710 <mbedtls_debug_print_msg>
 8026d66:	e732      	b.n	8026bce <mbedtls_ssl_parse_certificate+0x34a>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 8026d68:	222b      	movs	r2, #43	; 0x2b
 8026d6a:	e6f1      	b.n	8026b50 <mbedtls_ssl_parse_certificate+0x2cc>
 8026d6c:	08036120 	.word	0x08036120
 8026d70:	08035174 	.word	0x08035174
 8026d74:	080361e0 	.word	0x080361e0
 8026d78:	0803613c 	.word	0x0803613c
 8026d7c:	ffff8b80 	.word	0xffff8b80
 8026d80:	08036150 	.word	0x08036150
 8026d84:	08036164 	.word	0x08036164
 8026d88:	ffff8600 	.word	0xffff8600
 8026d8c:	08036184 	.word	0x08036184
 8026d90:	ffff8980 	.word	0xffff8980
 8026d94:	08036194 	.word	0x08036194
 8026d98:	080361b8 	.word	0x080361b8

08026d9c <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
 8026d9c:	6803      	ldr	r3, [r0, #0]
 8026d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8026da0:	b152      	cbz	r2, 8026db8 <mbedtls_ssl_check_sig_hash+0x1c>
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 8026da2:	6813      	ldr	r3, [r2, #0]
 8026da4:	b15b      	cbz	r3, 8026dbe <mbedtls_ssl_check_sig_hash+0x22>
        if( *cur == (int) md )
 8026da6:	4299      	cmp	r1, r3
 8026da8:	d00c      	beq.n	8026dc4 <mbedtls_ssl_check_sig_hash+0x28>
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 8026daa:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d1f9      	bne.n	8026da6 <mbedtls_ssl_check_sig_hash+0xa>
    return( -1 );
 8026db2:	f04f 30ff 	mov.w	r0, #4294967295
 8026db6:	4770      	bx	lr
        return( -1 );
 8026db8:	f04f 30ff 	mov.w	r0, #4294967295
 8026dbc:	4770      	bx	lr
    return( -1 );
 8026dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8026dc2:	4770      	bx	lr
            return( 0 );
 8026dc4:	2000      	movs	r0, #0
}
 8026dc6:	4770      	bx	lr

08026dc8 <mbedtls_ssl_check_cert_usage>:
}
 8026dc8:	2000      	movs	r0, #0
 8026dca:	4770      	bx	lr

08026dcc <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 8026dcc:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 8026dce:	7059      	strb	r1, [r3, #1]
}
 8026dd0:	4770      	bx	lr

08026dd2 <mbedtls_ssl_read_version>:
        *major = ver[0];
 8026dd2:	781a      	ldrb	r2, [r3, #0]
 8026dd4:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 8026dd6:	785b      	ldrb	r3, [r3, #1]
 8026dd8:	600b      	str	r3, [r1, #0]
    }
}
 8026dda:	4770      	bx	lr

08026ddc <mbedtls_ssl_set_calc_verify_md>:

int mbedtls_ssl_set_calc_verify_md( mbedtls_ssl_context *ssl, int md )
{
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8026ddc:	68c3      	ldr	r3, [r0, #12]
 8026dde:	2b03      	cmp	r3, #3
 8026de0:	d10f      	bne.n	8026e02 <mbedtls_ssl_set_calc_verify_md+0x26>
        return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;

    switch( md )
 8026de2:	2904      	cmp	r1, #4
 8026de4:	d007      	beq.n	8026df6 <mbedtls_ssl_set_calc_verify_md+0x1a>
 8026de6:	2905      	cmp	r1, #5
 8026de8:	d10d      	bne.n	8026e06 <mbedtls_ssl_set_calc_verify_md+0x2a>
            break;
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SHA512_C)
        case MBEDTLS_SSL_HASH_SHA384:
            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8026dea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8026dec:	4a07      	ldr	r2, [pc, #28]	; (8026e0c <mbedtls_ssl_set_calc_verify_md+0x30>)
 8026dee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#endif
        default:
            return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
    }

    return 0;
 8026df2:	2000      	movs	r0, #0
            break;
 8026df4:	4770      	bx	lr
            ssl->handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8026df6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8026df8:	4a05      	ldr	r2, [pc, #20]	; (8026e10 <mbedtls_ssl_set_calc_verify_md+0x34>)
 8026dfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return 0;
 8026dfe:	2000      	movs	r0, #0
            break;
 8026e00:	4770      	bx	lr
        return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
 8026e02:	4804      	ldr	r0, [pc, #16]	; (8026e14 <mbedtls_ssl_set_calc_verify_md+0x38>)
 8026e04:	4770      	bx	lr
    switch( md )
 8026e06:	4803      	ldr	r0, [pc, #12]	; (8026e14 <mbedtls_ssl_set_calc_verify_md+0x38>)
    (void) ssl;
    (void) md;

    return MBEDTLS_ERR_SSL_INVALID_VERIFY_HASH;
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 8026e08:	4770      	bx	lr
 8026e0a:	bf00      	nop
 8026e0c:	08023e8d 	.word	0x08023e8d
 8026e10:	08023bb9 	.word	0x08023bb9
 8026e14:	ffff9a00 	.word	0xffff9a00

08026e18 <mbedtls_ssl_get_key_exchange_md_tls1_2>:
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
int mbedtls_ssl_get_key_exchange_md_tls1_2( mbedtls_ssl_context *ssl,
                                            unsigned char *hash, size_t *hashlen,
                                            unsigned char *data, size_t data_len,
                                            mbedtls_md_type_t md_alg )
{
 8026e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026e1c:	b086      	sub	sp, #24
 8026e1e:	4604      	mov	r4, r0
 8026e20:	4688      	mov	r8, r1
 8026e22:	4616      	mov	r6, r2
 8026e24:	461f      	mov	r7, r3
    int ret = 0;
    mbedtls_md_context_t ctx;
    const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8026e26:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8026e2a:	f7f2 f803 	bl	8018e34 <mbedtls_md_info_from_type>
 8026e2e:	4605      	mov	r5, r0
    *hashlen = mbedtls_md_get_size( md_info );
 8026e30:	f7f2 f976 	bl	8019120 <mbedtls_md_get_size>
 8026e34:	6030      	str	r0, [r6, #0]

    mbedtls_md_init( &ctx );
 8026e36:	a803      	add	r0, sp, #12
 8026e38:	f7f2 f81e 	bl	8018e78 <mbedtls_md_init>
     *     opaque client_random[32];
     *     opaque server_random[32];
     *     ServerDHParams params;
     * };
     */
    if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
 8026e3c:	2200      	movs	r2, #0
 8026e3e:	4629      	mov	r1, r5
 8026e40:	a803      	add	r0, sp, #12
 8026e42:	f7f2 f837 	bl	8018eb4 <mbedtls_md_setup>
 8026e46:	bb10      	cbnz	r0, 8026e8e <mbedtls_ssl_get_key_exchange_md_tls1_2+0x76>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_starts( &ctx ) ) != 0 )
 8026e48:	a803      	add	r0, sp, #12
 8026e4a:	f7f2 f857 	bl	8018efc <mbedtls_md_starts>
 8026e4e:	4605      	mov	r5, r0
 8026e50:	2800      	cmp	r0, #0
 8026e52:	d133      	bne.n	8026ebc <mbedtls_ssl_get_key_exchange_md_tls1_2+0xa4>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 ) ) != 0 )
 8026e54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8026e56:	2240      	movs	r2, #64	; 0x40
 8026e58:	f501 7145 	add.w	r1, r1, #788	; 0x314
 8026e5c:	a803      	add	r0, sp, #12
 8026e5e:	f7f2 f85b 	bl	8018f18 <mbedtls_md_update>
 8026e62:	4605      	mov	r5, r0
 8026e64:	2800      	cmp	r0, #0
 8026e66:	d134      	bne.n	8026ed2 <mbedtls_ssl_get_key_exchange_md_tls1_2+0xba>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_update( &ctx, data, data_len ) ) != 0 )
 8026e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e6a:	4639      	mov	r1, r7
 8026e6c:	a803      	add	r0, sp, #12
 8026e6e:	f7f2 f853 	bl	8018f18 <mbedtls_md_update>
 8026e72:	4605      	mov	r5, r0
 8026e74:	2800      	cmp	r0, #0
 8026e76:	d137      	bne.n	8026ee8 <mbedtls_ssl_get_key_exchange_md_tls1_2+0xd0>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
        goto exit;
    }
    if( ( ret = mbedtls_md_finish( &ctx, hash ) ) != 0 )
 8026e78:	4641      	mov	r1, r8
 8026e7a:	a803      	add	r0, sp, #12
 8026e7c:	f7f2 f85c 	bl	8018f38 <mbedtls_md_finish>
 8026e80:	4605      	mov	r5, r0
 8026e82:	2800      	cmp	r0, #0
 8026e84:	d13b      	bne.n	8026efe <mbedtls_ssl_get_key_exchange_md_tls1_2+0xe6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
        goto exit;
    }

exit:
    mbedtls_md_free( &ctx );
 8026e86:	a803      	add	r0, sp, #12
 8026e88:	f7f1 fffb 	bl	8018e82 <mbedtls_md_free>

    if( ret != 0 )
 8026e8c:	e012      	b.n	8026eb4 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x9c>
 8026e8e:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 8026e90:	9001      	str	r0, [sp, #4]
 8026e92:	4b20      	ldr	r3, [pc, #128]	; (8026f14 <mbedtls_ssl_get_key_exchange_md_tls1_2+0xfc>)
 8026e94:	9300      	str	r3, [sp, #0]
 8026e96:	f242 6317 	movw	r3, #9751	; 0x2617
 8026e9a:	4a1f      	ldr	r2, [pc, #124]	; (8026f18 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x100>)
 8026e9c:	2101      	movs	r1, #1
 8026e9e:	4620      	mov	r0, r4
 8026ea0:	f7ee fc68 	bl	8015774 <mbedtls_debug_print_ret>
    mbedtls_md_free( &ctx );
 8026ea4:	a803      	add	r0, sp, #12
 8026ea6:	f7f1 ffec 	bl	8018e82 <mbedtls_md_free>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 8026eaa:	2250      	movs	r2, #80	; 0x50
 8026eac:	2102      	movs	r1, #2
 8026eae:	4620      	mov	r0, r4
 8026eb0:	f7fd fffa 	bl	8024ea8 <mbedtls_ssl_send_alert_message>
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );

    return( ret );
}
 8026eb4:	4628      	mov	r0, r5
 8026eb6:	b006      	add	sp, #24
 8026eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_starts", ret );
 8026ebc:	9001      	str	r0, [sp, #4]
 8026ebe:	4b17      	ldr	r3, [pc, #92]	; (8026f1c <mbedtls_ssl_get_key_exchange_md_tls1_2+0x104>)
 8026ec0:	9300      	str	r3, [sp, #0]
 8026ec2:	f242 631c 	movw	r3, #9756	; 0x261c
 8026ec6:	4a14      	ldr	r2, [pc, #80]	; (8026f18 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x100>)
 8026ec8:	2101      	movs	r1, #1
 8026eca:	4620      	mov	r0, r4
 8026ecc:	f7ee fc52 	bl	8015774 <mbedtls_debug_print_ret>
        goto exit;
 8026ed0:	e7e8      	b.n	8026ea4 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x8c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
 8026ed2:	9001      	str	r0, [sp, #4]
 8026ed4:	4b12      	ldr	r3, [pc, #72]	; (8026f20 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x108>)
 8026ed6:	9300      	str	r3, [sp, #0]
 8026ed8:	f242 6321 	movw	r3, #9761	; 0x2621
 8026edc:	4a0e      	ldr	r2, [pc, #56]	; (8026f18 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x100>)
 8026ede:	2101      	movs	r1, #1
 8026ee0:	4620      	mov	r0, r4
 8026ee2:	f7ee fc47 	bl	8015774 <mbedtls_debug_print_ret>
        goto exit;
 8026ee6:	e7dd      	b.n	8026ea4 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x8c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_update", ret );
 8026ee8:	9001      	str	r0, [sp, #4]
 8026eea:	4b0d      	ldr	r3, [pc, #52]	; (8026f20 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x108>)
 8026eec:	9300      	str	r3, [sp, #0]
 8026eee:	f242 6326 	movw	r3, #9766	; 0x2626
 8026ef2:	4a09      	ldr	r2, [pc, #36]	; (8026f18 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x100>)
 8026ef4:	2101      	movs	r1, #1
 8026ef6:	4620      	mov	r0, r4
 8026ef8:	f7ee fc3c 	bl	8015774 <mbedtls_debug_print_ret>
        goto exit;
 8026efc:	e7d2      	b.n	8026ea4 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x8c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_finish", ret );
 8026efe:	9001      	str	r0, [sp, #4]
 8026f00:	4b08      	ldr	r3, [pc, #32]	; (8026f24 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x10c>)
 8026f02:	9300      	str	r3, [sp, #0]
 8026f04:	f242 632b 	movw	r3, #9771	; 0x262b
 8026f08:	4a03      	ldr	r2, [pc, #12]	; (8026f18 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x100>)
 8026f0a:	2101      	movs	r1, #1
 8026f0c:	4620      	mov	r0, r4
 8026f0e:	f7ee fc31 	bl	8015774 <mbedtls_debug_print_ret>
        goto exit;
 8026f12:	e7c7      	b.n	8026ea4 <mbedtls_ssl_get_key_exchange_md_tls1_2+0x8c>
 8026f14:	080353b0 	.word	0x080353b0
 8026f18:	08035174 	.word	0x08035174
 8026f1c:	080361f8 	.word	0x080361f8
 8026f20:	0803620c 	.word	0x0803620c
 8026f24:	08036220 	.word	0x08036220

08026f28 <x509_parse_int>:
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 8026f28:	b410      	push	{r4}
    *res = 0;
 8026f2a:	2300      	movs	r3, #0
 8026f2c:	6013      	str	r3, [r2, #0]

    for( ; n > 0; --n )
 8026f2e:	460c      	mov	r4, r1
 8026f30:	b1b9      	cbz	r1, 8026f62 <x509_parse_int+0x3a>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8026f32:	6803      	ldr	r3, [r0, #0]
 8026f34:	781b      	ldrb	r3, [r3, #0]
 8026f36:	3b30      	subs	r3, #48	; 0x30
 8026f38:	b2db      	uxtb	r3, r3
 8026f3a:	2b09      	cmp	r3, #9
 8026f3c:	d813      	bhi.n	8026f66 <x509_parse_int+0x3e>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8026f3e:	6813      	ldr	r3, [r2, #0]
 8026f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8026f44:	005b      	lsls	r3, r3, #1
 8026f46:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8026f48:	6803      	ldr	r3, [r0, #0]
 8026f4a:	1c59      	adds	r1, r3, #1
 8026f4c:	6001      	str	r1, [r0, #0]
 8026f4e:	781b      	ldrb	r3, [r3, #0]
 8026f50:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8026f54:	6813      	ldr	r3, [r2, #0]
 8026f56:	440b      	add	r3, r1
 8026f58:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 8026f5a:	3c01      	subs	r4, #1
 8026f5c:	d1e9      	bne.n	8026f32 <x509_parse_int+0xa>
    }

    return( 0 );
 8026f5e:	2000      	movs	r0, #0
 8026f60:	e002      	b.n	8026f68 <x509_parse_int+0x40>
 8026f62:	2000      	movs	r0, #0
 8026f64:	e000      	b.n	8026f68 <x509_parse_int+0x40>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8026f66:	4802      	ldr	r0, [pc, #8]	; (8026f70 <x509_parse_int+0x48>)
}
 8026f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026f6c:	4770      	bx	lr
 8026f6e:	bf00      	nop
 8026f70:	ffffdc00 	.word	0xffffdc00

08026f74 <mbedtls_x509_get_serial>:
{
 8026f74:	b538      	push	{r3, r4, r5, lr}
 8026f76:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 8026f78:	6803      	ldr	r3, [r0, #0]
 8026f7a:	1aca      	subs	r2, r1, r3
 8026f7c:	2a00      	cmp	r2, #0
 8026f7e:	dd17      	ble.n	8026fb0 <mbedtls_x509_get_serial+0x3c>
 8026f80:	4604      	mov	r4, r0
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8026f82:	781a      	ldrb	r2, [r3, #0]
 8026f84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8026f88:	2a02      	cmp	r2, #2
 8026f8a:	d113      	bne.n	8026fb4 <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
 8026f8c:	1c5a      	adds	r2, r3, #1
 8026f8e:	6002      	str	r2, [r0, #0]
 8026f90:	781b      	ldrb	r3, [r3, #0]
 8026f92:	462a      	mov	r2, r5
 8026f94:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8026f98:	f7ea fef6 	bl	8011d88 <mbedtls_asn1_get_len>
 8026f9c:	b928      	cbnz	r0, 8026faa <mbedtls_x509_get_serial+0x36>
    serial->p = *p;
 8026f9e:	6823      	ldr	r3, [r4, #0]
 8026fa0:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 8026fa2:	686a      	ldr	r2, [r5, #4]
 8026fa4:	4413      	add	r3, r2
 8026fa6:	6023      	str	r3, [r4, #0]
}
 8026fa8:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 8026faa:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 8026fae:	e7fb      	b.n	8026fa8 <mbedtls_x509_get_serial+0x34>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8026fb0:	4801      	ldr	r0, [pc, #4]	; (8026fb8 <mbedtls_x509_get_serial+0x44>)
 8026fb2:	e7f9      	b.n	8026fa8 <mbedtls_x509_get_serial+0x34>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 8026fb4:	4801      	ldr	r0, [pc, #4]	; (8026fbc <mbedtls_x509_get_serial+0x48>)
 8026fb6:	e7f7      	b.n	8026fa8 <mbedtls_x509_get_serial+0x34>
 8026fb8:	ffffdd20 	.word	0xffffdd20
 8026fbc:	ffffdd1e 	.word	0xffffdd1e

08026fc0 <mbedtls_x509_get_alg>:
{
 8026fc0:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8026fc2:	f7eb f83a 	bl	801203a <mbedtls_asn1_get_alg>
 8026fc6:	b900      	cbnz	r0, 8026fca <mbedtls_x509_get_alg+0xa>
}
 8026fc8:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 8026fca:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 8026fce:	e7fb      	b.n	8026fc8 <mbedtls_x509_get_alg+0x8>

08026fd0 <mbedtls_x509_get_name>:
{
 8026fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fd4:	b083      	sub	sp, #12
 8026fd6:	4605      	mov	r5, r0
 8026fd8:	4688      	mov	r8, r1
 8026fda:	4614      	mov	r4, r2
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8026fdc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80270f4 <mbedtls_x509_get_name+0x124>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8026fe0:	2331      	movs	r3, #49	; 0x31
 8026fe2:	aa01      	add	r2, sp, #4
 8026fe4:	4641      	mov	r1, r8
 8026fe6:	4628      	mov	r0, r5
 8026fe8:	f7ea ff33 	bl	8011e52 <mbedtls_asn1_get_tag>
 8026fec:	4682      	mov	sl, r0
 8026fee:	b920      	cbnz	r0, 8026ffa <mbedtls_x509_get_name+0x2a>
        end_set  = *p + set_len;
 8026ff0:	682e      	ldr	r6, [r5, #0]
 8026ff2:	9b01      	ldr	r3, [sp, #4]
 8026ff4:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8026ff6:	2730      	movs	r7, #48	; 0x30
 8026ff8:	e012      	b.n	8027020 <mbedtls_x509_get_name+0x50>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8026ffa:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 8026ffe:	e069      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8027000:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8027004:	2800      	cmp	r0, #0
 8027006:	d165      	bne.n	80270d4 <mbedtls_x509_get_name+0x104>
            if( *p == end_set )
 8027008:	682b      	ldr	r3, [r5, #0]
 802700a:	42b3      	cmp	r3, r6
 802700c:	d04c      	beq.n	80270a8 <mbedtls_x509_get_name+0xd8>
            cur->next_merged = 1;
 802700e:	2001      	movs	r0, #1
 8027010:	7720      	strb	r0, [r4, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8027012:	2120      	movs	r1, #32
 8027014:	f001 ff3a 	bl	8028e8c <mbedtls_calloc>
 8027018:	61a0      	str	r0, [r4, #24]
            if( cur->next == NULL )
 802701a:	2800      	cmp	r0, #0
 802701c:	d051      	beq.n	80270c2 <mbedtls_x509_get_name+0xf2>
            cur = cur->next;
 802701e:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8027020:	463b      	mov	r3, r7
 8027022:	466a      	mov	r2, sp
 8027024:	4631      	mov	r1, r6
 8027026:	4628      	mov	r0, r5
 8027028:	f7ea ff13 	bl	8011e52 <mbedtls_asn1_get_tag>
 802702c:	2800      	cmp	r0, #0
 802702e:	d1e7      	bne.n	8027000 <mbedtls_x509_get_name+0x30>
    end = *p + len;
 8027030:	682a      	ldr	r2, [r5, #0]
 8027032:	9b00      	ldr	r3, [sp, #0]
 8027034:	eb02 0b03 	add.w	fp, r2, r3
    if( ( end - *p ) < 1 )
 8027038:	2b00      	cmp	r3, #0
 802703a:	dd46      	ble.n	80270ca <mbedtls_x509_get_name+0xfa>
    oid->tag = **p;
 802703c:	7813      	ldrb	r3, [r2, #0]
 802703e:	4622      	mov	r2, r4
 8027040:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8027044:	2306      	movs	r3, #6
 8027046:	4659      	mov	r1, fp
 8027048:	4628      	mov	r0, r5
 802704a:	f7ea ff02 	bl	8011e52 <mbedtls_asn1_get_tag>
 802704e:	bb28      	cbnz	r0, 802709c <mbedtls_x509_get_name+0xcc>
    oid->p = *p;
 8027050:	682a      	ldr	r2, [r5, #0]
 8027052:	60a2      	str	r2, [r4, #8]
    *p += oid->len;
 8027054:	6861      	ldr	r1, [r4, #4]
 8027056:	1853      	adds	r3, r2, r1
 8027058:	602b      	str	r3, [r5, #0]
    if( ( end - *p ) < 1 )
 802705a:	ebab 0003 	sub.w	r0, fp, r3
 802705e:	2800      	cmp	r0, #0
 8027060:	dd35      	ble.n	80270ce <mbedtls_x509_get_name+0xfe>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8027062:	5c50      	ldrb	r0, [r2, r1]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8027064:	281e      	cmp	r0, #30
 8027066:	d834      	bhi.n	80270d2 <mbedtls_x509_get_name+0x102>
 8027068:	fa29 f000 	lsr.w	r0, r9, r0
 802706c:	f010 0f01 	tst.w	r0, #1
 8027070:	d033      	beq.n	80270da <mbedtls_x509_get_name+0x10a>
    val->tag = *(*p)++;
 8027072:	3301      	adds	r3, #1
 8027074:	602b      	str	r3, [r5, #0]
 8027076:	5c53      	ldrb	r3, [r2, r1]
 8027078:	60e3      	str	r3, [r4, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 802707a:	f104 0210 	add.w	r2, r4, #16
 802707e:	4659      	mov	r1, fp
 8027080:	4628      	mov	r0, r5
 8027082:	f7ea fe81 	bl	8011d88 <mbedtls_asn1_get_len>
 8027086:	b960      	cbnz	r0, 80270a2 <mbedtls_x509_get_name+0xd2>
    val->p = *p;
 8027088:	682b      	ldr	r3, [r5, #0]
 802708a:	6163      	str	r3, [r4, #20]
    *p += val->len;
 802708c:	6922      	ldr	r2, [r4, #16]
 802708e:	4413      	add	r3, r2
 8027090:	602b      	str	r3, [r5, #0]
    if( *p != end )
 8027092:	459b      	cmp	fp, r3
 8027094:	d123      	bne.n	80270de <mbedtls_x509_get_name+0x10e>
    cur->next = NULL;
 8027096:	2300      	movs	r3, #0
 8027098:	61a3      	str	r3, [r4, #24]
    return( 0 );
 802709a:	e7b5      	b.n	8027008 <mbedtls_x509_get_name+0x38>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 802709c:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80270a0:	e7b0      	b.n	8027004 <mbedtls_x509_get_name+0x34>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80270a2:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80270a6:	e7ad      	b.n	8027004 <mbedtls_x509_get_name+0x34>
        if( *p == end )
 80270a8:	45b0      	cmp	r8, r6
 80270aa:	d00c      	beq.n	80270c6 <mbedtls_x509_get_name+0xf6>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80270ac:	2120      	movs	r1, #32
 80270ae:	2001      	movs	r0, #1
 80270b0:	f001 feec 	bl	8028e8c <mbedtls_calloc>
 80270b4:	61a0      	str	r0, [r4, #24]
        if( cur->next == NULL )
 80270b6:	b108      	cbz	r0, 80270bc <mbedtls_x509_get_name+0xec>
        cur = cur->next;
 80270b8:	4604      	mov	r4, r0
 80270ba:	e791      	b.n	8026fe0 <mbedtls_x509_get_name+0x10>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80270bc:	f5a0 5022 	sub.w	r0, r0, #10368	; 0x2880
 80270c0:	e008      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80270c2:	4808      	ldr	r0, [pc, #32]	; (80270e4 <mbedtls_x509_get_name+0x114>)
 80270c4:	e006      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
            return( 0 );
 80270c6:	4650      	mov	r0, sl
 80270c8:	e004      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80270ca:	4807      	ldr	r0, [pc, #28]	; (80270e8 <mbedtls_x509_get_name+0x118>)
 80270cc:	e002      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80270ce:	4806      	ldr	r0, [pc, #24]	; (80270e8 <mbedtls_x509_get_name+0x118>)
 80270d0:	e000      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80270d2:	4806      	ldr	r0, [pc, #24]	; (80270ec <mbedtls_x509_get_name+0x11c>)
}
 80270d4:	b003      	add	sp, #12
 80270d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80270da:	4804      	ldr	r0, [pc, #16]	; (80270ec <mbedtls_x509_get_name+0x11c>)
 80270dc:	e7fa      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 80270de:	4804      	ldr	r0, [pc, #16]	; (80270f0 <mbedtls_x509_get_name+0x120>)
 80270e0:	e7f8      	b.n	80270d4 <mbedtls_x509_get_name+0x104>
 80270e2:	bf00      	nop
 80270e4:	ffffd780 	.word	0xffffd780
 80270e8:	ffffdc20 	.word	0xffffdc20
 80270ec:	ffffdc1e 	.word	0xffffdc1e
 80270f0:	ffffdc1a 	.word	0xffffdc1a
 80270f4:	50581008 	.word	0x50581008

080270f8 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80270f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270fa:	b083      	sub	sp, #12
 80270fc:	4615      	mov	r5, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80270fe:	6803      	ldr	r3, [r0, #0]
 8027100:	1aca      	subs	r2, r1, r3
 8027102:	2a00      	cmp	r2, #0
 8027104:	f340 80bf 	ble.w	8027286 <mbedtls_x509_get_time+0x18e>
 8027108:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 802710a:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 802710c:	2a17      	cmp	r2, #23
 802710e:	d00f      	beq.n	8027130 <mbedtls_x509_get_time+0x38>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 8027110:	2a18      	cmp	r2, #24
 8027112:	f040 80ba 	bne.w	802728a <mbedtls_x509_get_time+0x192>
        year_len = 4;
 8027116:	2604      	movs	r6, #4
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8027118:	3301      	adds	r3, #1
 802711a:	6023      	str	r3, [r4, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 802711c:	aa01      	add	r2, sp, #4
 802711e:	4620      	mov	r0, r4
 8027120:	f7ea fe32 	bl	8011d88 <mbedtls_asn1_get_len>

    if( ret != 0 )
 8027124:	b130      	cbz	r0, 8027134 <mbedtls_x509_get_time+0x3c>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8027126:	f5a0 5310 	sub.w	r3, r0, #9216	; 0x2400

    return x509_parse_time( p, len, year_len, tm );
}
 802712a:	4618      	mov	r0, r3
 802712c:	b003      	add	sp, #12
 802712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 8027130:	2602      	movs	r6, #2
 8027132:	e7f1      	b.n	8027118 <mbedtls_x509_get_time+0x20>
    return x509_parse_time( p, len, year_len, tm );
 8027134:	9f01      	ldr	r7, [sp, #4]
    if ( len < yearlen + 8 )
 8027136:	f106 0308 	add.w	r3, r6, #8
 802713a:	429f      	cmp	r7, r3
 802713c:	f0c0 80a7 	bcc.w	802728e <mbedtls_x509_get_time+0x196>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 8027140:	462a      	mov	r2, r5
 8027142:	4631      	mov	r1, r6
 8027144:	4620      	mov	r0, r4
 8027146:	f7ff feef 	bl	8026f28 <x509_parse_int>
 802714a:	4603      	mov	r3, r0
 802714c:	2800      	cmp	r0, #0
 802714e:	d1ec      	bne.n	802712a <mbedtls_x509_get_time+0x32>
    if ( 2 == yearlen )
 8027150:	2e02      	cmp	r6, #2
 8027152:	d050      	beq.n	80271f6 <mbedtls_x509_get_time+0xfe>
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8027154:	1d2a      	adds	r2, r5, #4
 8027156:	2102      	movs	r1, #2
 8027158:	4620      	mov	r0, r4
 802715a:	f7ff fee5 	bl	8026f28 <x509_parse_int>
 802715e:	4603      	mov	r3, r0
 8027160:	2800      	cmp	r0, #0
 8027162:	d1e2      	bne.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8027164:	f105 0208 	add.w	r2, r5, #8
 8027168:	2102      	movs	r1, #2
 802716a:	4620      	mov	r0, r4
 802716c:	f7ff fedc 	bl	8026f28 <x509_parse_int>
 8027170:	4603      	mov	r3, r0
 8027172:	2800      	cmp	r0, #0
 8027174:	d1d9      	bne.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8027176:	f105 020c 	add.w	r2, r5, #12
 802717a:	2102      	movs	r1, #2
 802717c:	4620      	mov	r0, r4
 802717e:	f7ff fed3 	bl	8026f28 <x509_parse_int>
 8027182:	4603      	mov	r3, r0
 8027184:	2800      	cmp	r0, #0
 8027186:	d1d0      	bne.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 8027188:	f105 0210 	add.w	r2, r5, #16
 802718c:	2102      	movs	r1, #2
 802718e:	4620      	mov	r0, r4
 8027190:	f7ff feca 	bl	8026f28 <x509_parse_int>
 8027194:	4603      	mov	r3, r0
 8027196:	2800      	cmp	r0, #0
 8027198:	d1c7      	bne.n	802712a <mbedtls_x509_get_time+0x32>
    len -= yearlen + 8;
 802719a:	1bbe      	subs	r6, r7, r6
 802719c:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 80271a0:	2b01      	cmp	r3, #1
 80271a2:	d976      	bls.n	8027292 <mbedtls_x509_get_time+0x19a>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 80271a4:	f105 0214 	add.w	r2, r5, #20
 80271a8:	2102      	movs	r1, #2
 80271aa:	4620      	mov	r0, r4
 80271ac:	f7ff febc 	bl	8026f28 <x509_parse_int>
 80271b0:	4603      	mov	r3, r0
 80271b2:	2800      	cmp	r0, #0
 80271b4:	d1b9      	bne.n	802712a <mbedtls_x509_get_time+0x32>
        len -= 2;
 80271b6:	f1a6 020a 	sub.w	r2, r6, #10
    if ( 1 == len && 'Z' == **p )
 80271ba:	2e0b      	cmp	r6, #11
 80271bc:	d025      	beq.n	802720a <mbedtls_x509_get_time+0x112>
    if ( 0 != len )
 80271be:	2a00      	cmp	r2, #0
 80271c0:	d169      	bne.n	8027296 <mbedtls_x509_get_time+0x19e>
    CHECK_RANGE( 0, 9999, t->year );
 80271c2:	6829      	ldr	r1, [r5, #0]
 80271c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80271c8:	4291      	cmp	r1, r2
 80271ca:	d850      	bhi.n	802726e <mbedtls_x509_get_time+0x176>
    CHECK_RANGE( 0, 23,   t->hour );
 80271cc:	68ea      	ldr	r2, [r5, #12]
 80271ce:	2a17      	cmp	r2, #23
 80271d0:	d84f      	bhi.n	8027272 <mbedtls_x509_get_time+0x17a>
    CHECK_RANGE( 0, 59,   t->min  );
 80271d2:	692a      	ldr	r2, [r5, #16]
 80271d4:	2a3b      	cmp	r2, #59	; 0x3b
 80271d6:	d84e      	bhi.n	8027276 <mbedtls_x509_get_time+0x17e>
    CHECK_RANGE( 0, 59,   t->sec  );
 80271d8:	696a      	ldr	r2, [r5, #20]
 80271da:	2a3b      	cmp	r2, #59	; 0x3b
 80271dc:	d84d      	bhi.n	802727a <mbedtls_x509_get_time+0x182>
    switch( t->mon )
 80271de:	686a      	ldr	r2, [r5, #4]
 80271e0:	3a01      	subs	r2, #1
 80271e2:	2a0b      	cmp	r2, #11
 80271e4:	d84b      	bhi.n	802727e <mbedtls_x509_get_time+0x186>
 80271e6:	e8df f002 	tbb	[pc, r2]
 80271ea:	1b37      	.short	0x1b37
 80271ec:	19371937 	.word	0x19371937
 80271f0:	37193737 	.word	0x37193737
 80271f4:	3719      	.short	0x3719
        if ( tm->year < 50 )
 80271f6:	682b      	ldr	r3, [r5, #0]
 80271f8:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80271fa:	bfdc      	itt	le
 80271fc:	3364      	addle	r3, #100	; 0x64
 80271fe:	602b      	strle	r3, [r5, #0]
        tm->year += 1900;
 8027200:	682b      	ldr	r3, [r5, #0]
 8027202:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8027206:	602b      	str	r3, [r5, #0]
 8027208:	e7a4      	b.n	8027154 <mbedtls_x509_get_time+0x5c>
    if ( 1 == len && 'Z' == **p )
 802720a:	6822      	ldr	r2, [r4, #0]
 802720c:	7811      	ldrb	r1, [r2, #0]
 802720e:	295a      	cmp	r1, #90	; 0x5a
 8027210:	d001      	beq.n	8027216 <mbedtls_x509_get_time+0x11e>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8027212:	4b22      	ldr	r3, [pc, #136]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027214:	e789      	b.n	802712a <mbedtls_x509_get_time+0x32>
        (*p)++;
 8027216:	3201      	adds	r2, #1
 8027218:	6022      	str	r2, [r4, #0]
    if ( 0 != len )
 802721a:	e7d2      	b.n	80271c2 <mbedtls_x509_get_time+0xca>
    switch( t->mon )
 802721c:	211e      	movs	r1, #30
 802721e:	e01c      	b.n	802725a <mbedtls_x509_get_time+0x162>
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8027220:	f011 0f03 	tst.w	r1, #3
 8027224:	d109      	bne.n	802723a <mbedtls_x509_get_time+0x142>
 8027226:	481e      	ldr	r0, [pc, #120]	; (80272a0 <mbedtls_x509_get_time+0x1a8>)
 8027228:	fb80 2001 	smull	r2, r0, r0, r1
 802722c:	17ca      	asrs	r2, r1, #31
 802722e:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 8027232:	2064      	movs	r0, #100	; 0x64
 8027234:	fb00 1212 	mls	r2, r0, r2, r1
 8027238:	b9ba      	cbnz	r2, 802726a <mbedtls_x509_get_time+0x172>
                !( t->year % 400 ) )
 802723a:	4819      	ldr	r0, [pc, #100]	; (80272a0 <mbedtls_x509_get_time+0x1a8>)
 802723c:	fb80 2001 	smull	r2, r0, r0, r1
 8027240:	17ca      	asrs	r2, r1, #31
 8027242:	ebc2 12e0 	rsb	r2, r2, r0, asr #7
 8027246:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802724a:	fb00 1112 	mls	r1, r0, r2, r1
                month_len = 28;
 802724e:	2900      	cmp	r1, #0
 8027250:	bf0c      	ite	eq
 8027252:	211d      	moveq	r1, #29
 8027254:	211c      	movne	r1, #28
 8027256:	e000      	b.n	802725a <mbedtls_x509_get_time+0x162>
            month_len = 31;
 8027258:	211f      	movs	r1, #31
    CHECK_RANGE( 1, month_len, t->day );
 802725a:	68aa      	ldr	r2, [r5, #8]
 802725c:	2a00      	cmp	r2, #0
 802725e:	dd10      	ble.n	8027282 <mbedtls_x509_get_time+0x18a>
 8027260:	480e      	ldr	r0, [pc, #56]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027262:	428a      	cmp	r2, r1
 8027264:	bfc8      	it	gt
 8027266:	4603      	movgt	r3, r0
 8027268:	e75f      	b.n	802712a <mbedtls_x509_get_time+0x32>
                month_len = 29;
 802726a:	211d      	movs	r1, #29
 802726c:	e7f5      	b.n	802725a <mbedtls_x509_get_time+0x162>
    CHECK_RANGE( 0, 9999, t->year );
 802726e:	4b0b      	ldr	r3, [pc, #44]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027270:	e75b      	b.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK_RANGE( 0, 23,   t->hour );
 8027272:	4b0a      	ldr	r3, [pc, #40]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027274:	e759      	b.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK_RANGE( 0, 59,   t->min  );
 8027276:	4b09      	ldr	r3, [pc, #36]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027278:	e757      	b.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK_RANGE( 0, 59,   t->sec  );
 802727a:	4b08      	ldr	r3, [pc, #32]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 802727c:	e755      	b.n	802712a <mbedtls_x509_get_time+0x32>
    switch( t->mon )
 802727e:	4b07      	ldr	r3, [pc, #28]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027280:	e753      	b.n	802712a <mbedtls_x509_get_time+0x32>
    CHECK_RANGE( 1, month_len, t->day );
 8027282:	4b06      	ldr	r3, [pc, #24]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027284:	e751      	b.n	802712a <mbedtls_x509_get_time+0x32>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 8027286:	4b07      	ldr	r3, [pc, #28]	; (80272a4 <mbedtls_x509_get_time+0x1ac>)
 8027288:	e74f      	b.n	802712a <mbedtls_x509_get_time+0x32>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 802728a:	4b07      	ldr	r3, [pc, #28]	; (80272a8 <mbedtls_x509_get_time+0x1b0>)
 802728c:	e74d      	b.n	802712a <mbedtls_x509_get_time+0x32>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 802728e:	4b03      	ldr	r3, [pc, #12]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027290:	e74b      	b.n	802712a <mbedtls_x509_get_time+0x32>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8027292:	4b02      	ldr	r3, [pc, #8]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027294:	e749      	b.n	802712a <mbedtls_x509_get_time+0x32>
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8027296:	4b01      	ldr	r3, [pc, #4]	; (802729c <mbedtls_x509_get_time+0x1a4>)
 8027298:	e747      	b.n	802712a <mbedtls_x509_get_time+0x32>
 802729a:	bf00      	nop
 802729c:	ffffdc00 	.word	0xffffdc00
 80272a0:	51eb851f 	.word	0x51eb851f
 80272a4:	ffffdba0 	.word	0xffffdba0
 80272a8:	ffffdb9e 	.word	0xffffdb9e

080272ac <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80272ac:	b570      	push	{r4, r5, r6, lr}
 80272ae:	b082      	sub	sp, #8
 80272b0:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80272b2:	6803      	ldr	r3, [r0, #0]
 80272b4:	1aca      	subs	r2, r1, r3
 80272b6:	2a00      	cmp	r2, #0
 80272b8:	dd11      	ble.n	80272de <mbedtls_x509_get_sig+0x32>
 80272ba:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 80272bc:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80272be:	aa01      	add	r2, sp, #4
 80272c0:	f7ea fe5a 	bl	8011f78 <mbedtls_asn1_get_bitstring_null>
 80272c4:	b940      	cbnz	r0, 80272d8 <mbedtls_x509_get_sig+0x2c>
    tag_type = **p;
 80272c6:	602e      	str	r6, [r5, #0]
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
    sig->len = len;
 80272c8:	9a01      	ldr	r2, [sp, #4]
 80272ca:	606a      	str	r2, [r5, #4]
    sig->p = *p;
 80272cc:	6823      	ldr	r3, [r4, #0]
 80272ce:	60ab      	str	r3, [r5, #8]

    *p += len;
 80272d0:	4413      	add	r3, r2
 80272d2:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80272d4:	b002      	add	sp, #8
 80272d6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 80272d8:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 80272dc:	e7fa      	b.n	80272d4 <mbedtls_x509_get_sig+0x28>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 80272de:	4801      	ldr	r0, [pc, #4]	; (80272e4 <mbedtls_x509_get_sig+0x38>)
 80272e0:	e7f8      	b.n	80272d4 <mbedtls_x509_get_sig+0x28>
 80272e2:	bf00      	nop
 80272e4:	ffffdb20 	.word	0xffffdb20

080272e8 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80272e8:	b510      	push	{r4, lr}
 80272ea:	460c      	mov	r4, r1
 80272ec:	4611      	mov	r1, r2
 80272ee:	461a      	mov	r2, r3
    int ret;

    if( *sig_opts != NULL )
 80272f0:	9b02      	ldr	r3, [sp, #8]
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	b97b      	cbnz	r3, 8027316 <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80272f6:	f7f2 fd9f 	bl	8019e38 <mbedtls_oid_get_sig_alg>
 80272fa:	b948      	cbnz	r0, 8027310 <mbedtls_x509_get_sig_alg+0x28>
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80272fc:	6823      	ldr	r3, [r4, #0]
 80272fe:	2b05      	cmp	r3, #5
 8027300:	d000      	beq.n	8027304 <mbedtls_x509_get_sig_alg+0x1c>
 8027302:	b953      	cbnz	r3, 802731a <mbedtls_x509_get_sig_alg+0x32>
 8027304:	6862      	ldr	r2, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8027306:	4b06      	ldr	r3, [pc, #24]	; (8027320 <mbedtls_x509_get_sig_alg+0x38>)
 8027308:	2a00      	cmp	r2, #0
 802730a:	bf18      	it	ne
 802730c:	4618      	movne	r0, r3
    }

    return( 0 );
}
 802730e:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8027310:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8027314:	e7fb      	b.n	802730e <mbedtls_x509_get_sig_alg+0x26>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8027316:	4803      	ldr	r0, [pc, #12]	; (8027324 <mbedtls_x509_get_sig_alg+0x3c>)
 8027318:	e7f9      	b.n	802730e <mbedtls_x509_get_sig_alg+0x26>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 802731a:	4801      	ldr	r0, [pc, #4]	; (8027320 <mbedtls_x509_get_sig_alg+0x38>)
 802731c:	e7f7      	b.n	802730e <mbedtls_x509_get_sig_alg+0x26>
 802731e:	bf00      	nop
 8027320:	ffffdd00 	.word	0xffffdd00
 8027324:	ffffd800 	.word	0xffffd800

08027328 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                          mbedtls_x509_buf *ext, int tag )
{
 8027328:	b570      	push	{r4, r5, r6, lr}
 802732a:	b082      	sub	sp, #8
 802732c:	4606      	mov	r6, r0
 802732e:	4614      	mov	r4, r2
    size_t len;

    /* Extension structure use EXPLICIT tagging. That is, the actual
     * `Extensions` structure is wrapped by a tag-length pair using
     * the respective context-specific tag. */
    ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8027330:	f043 05a0 	orr.w	r5, r3, #160	; 0xa0
 8027334:	462b      	mov	r3, r5
 8027336:	3204      	adds	r2, #4
 8027338:	f7ea fd8b 	bl	8011e52 <mbedtls_asn1_get_tag>
              MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag );
    if( ret != 0 )
 802733c:	b118      	cbz	r0, 8027346 <mbedtls_x509_get_ext+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802733e:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8027342:	b002      	add	sp, #8
 8027344:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag;
 8027346:	6025      	str	r5, [r4, #0]
    ext->p   = *p;
 8027348:	6833      	ldr	r3, [r6, #0]
 802734a:	60a3      	str	r3, [r4, #8]
    end      = *p + ext->len;
 802734c:	6864      	ldr	r4, [r4, #4]
 802734e:	441c      	add	r4, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8027350:	2330      	movs	r3, #48	; 0x30
 8027352:	aa01      	add	r2, sp, #4
 8027354:	4621      	mov	r1, r4
 8027356:	4630      	mov	r0, r6
 8027358:	f7ea fd7b 	bl	8011e52 <mbedtls_asn1_get_tag>
 802735c:	b938      	cbnz	r0, 802736e <mbedtls_x509_get_ext+0x46>
    if( end != *p + len )
 802735e:	6833      	ldr	r3, [r6, #0]
 8027360:	9a01      	ldr	r2, [sp, #4]
 8027362:	4413      	add	r3, r2
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8027364:	4a03      	ldr	r2, [pc, #12]	; (8027374 <mbedtls_x509_get_ext+0x4c>)
 8027366:	429c      	cmp	r4, r3
 8027368:	bf18      	it	ne
 802736a:	4610      	movne	r0, r2
 802736c:	e7e9      	b.n	8027342 <mbedtls_x509_get_ext+0x1a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802736e:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8027372:	e7e6      	b.n	8027342 <mbedtls_x509_get_ext+0x1a>
 8027374:	ffffda9a 	.word	0xffffda9a

08027378 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8027378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802737c:	b0c3      	sub	sp, #268	; 0x10c
 802737e:	4605      	mov	r5, r0
 8027380:	468b      	mov	fp, r1
 8027382:	4617      	mov	r7, r2
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8027384:	2100      	movs	r1, #0
 8027386:	9141      	str	r1, [sp, #260]	; 0x104
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8027388:	f44f 7280 	mov.w	r2, #256	; 0x100
 802738c:	a801      	add	r0, sp, #4
 802738e:	f003 f8fc 	bl	802a58a <memset>

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 8027392:	2f00      	cmp	r7, #0
 8027394:	d066      	beq.n	8027464 <mbedtls_x509_dn_gets+0xec>
    name = dn;
 8027396:	463c      	mov	r4, r7
    n = size;
 8027398:	465e      	mov	r6, fp
    unsigned char c, merge = 0;
 802739a:	2100      	movs	r1, #0
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
 802739c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8027494 <mbedtls_x509_dn_gets+0x11c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80273a0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8027498 <mbedtls_x509_dn_gets+0x120>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 80273a4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 802749c <mbedtls_x509_dn_gets+0x124>
 80273a8:	e030      	b.n	802740c <mbedtls_x509_dn_gets+0x94>
            name = name->next;
 80273aa:	69a4      	ldr	r4, [r4, #24]
            continue;
 80273ac:	e02d      	b.n	802740a <mbedtls_x509_dn_gets+0x92>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80273ae:	4652      	mov	r2, sl
 80273b0:	4631      	mov	r1, r6
 80273b2:	4628      	mov	r0, r5
 80273b4:	f003 fd96 	bl	802aee4 <sniprintf>
 80273b8:	e048      	b.n	802744c <mbedtls_x509_dn_gets+0xd4>
                 s[i] = '?';
 80273ba:	233f      	movs	r3, #63	; 0x3f
 80273bc:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < name->val.len; i++ )
 80273c0:	3201      	adds	r2, #1
 80273c2:	6923      	ldr	r3, [r4, #16]
 80273c4:	4293      	cmp	r3, r2
 80273c6:	d910      	bls.n	80273ea <mbedtls_x509_dn_gets+0x72>
            if( i >= sizeof( s ) - 1 )
 80273c8:	2aff      	cmp	r2, #255	; 0xff
 80273ca:	d00e      	beq.n	80273ea <mbedtls_x509_dn_gets+0x72>
            c = name->val.p[i];
 80273cc:	6963      	ldr	r3, [r4, #20]
 80273ce:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80273d0:	2b1f      	cmp	r3, #31
 80273d2:	d9f2      	bls.n	80273ba <mbedtls_x509_dn_gets+0x42>
 80273d4:	2b7f      	cmp	r3, #127	; 0x7f
 80273d6:	d006      	beq.n	80273e6 <mbedtls_x509_dn_gets+0x6e>
 80273d8:	f103 007f 	add.w	r0, r3, #127	; 0x7f
 80273dc:	b2c0      	uxtb	r0, r0
                 s[i] = '?';
 80273de:	281e      	cmp	r0, #30
 80273e0:	bf98      	it	ls
 80273e2:	233f      	movls	r3, #63	; 0x3f
 80273e4:	e7ea      	b.n	80273bc <mbedtls_x509_dn_gets+0x44>
 80273e6:	233f      	movs	r3, #63	; 0x3f
 80273e8:	e7e8      	b.n	80273bc <mbedtls_x509_dn_gets+0x44>
        s[i] = '\0';
 80273ea:	ab01      	add	r3, sp, #4
 80273ec:	2100      	movs	r1, #0
 80273ee:	5499      	strb	r1, [r3, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80273f0:	4642      	mov	r2, r8
 80273f2:	4631      	mov	r1, r6
 80273f4:	4628      	mov	r0, r5
 80273f6:	f003 fd75 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80273fa:	2800      	cmp	r0, #0
 80273fc:	db40      	blt.n	8027480 <mbedtls_x509_dn_gets+0x108>
 80273fe:	42b0      	cmp	r0, r6
 8027400:	d240      	bcs.n	8027484 <mbedtls_x509_dn_gets+0x10c>
 8027402:	1a36      	subs	r6, r6, r0
 8027404:	4405      	add	r5, r0

        merge = name->next_merged;
 8027406:	7f21      	ldrb	r1, [r4, #28]
        name = name->next;
 8027408:	69a4      	ldr	r4, [r4, #24]
    while( name != NULL )
 802740a:	b364      	cbz	r4, 8027466 <mbedtls_x509_dn_gets+0xee>
        if( !name->oid.p )
 802740c:	68a3      	ldr	r3, [r4, #8]
 802740e:	2b00      	cmp	r3, #0
 8027410:	d0cb      	beq.n	80273aa <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 8027412:	42a7      	cmp	r7, r4
 8027414:	d00e      	beq.n	8027434 <mbedtls_x509_dn_gets+0xbc>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8027416:	4a1c      	ldr	r2, [pc, #112]	; (8027488 <mbedtls_x509_dn_gets+0x110>)
 8027418:	4b1c      	ldr	r3, [pc, #112]	; (802748c <mbedtls_x509_dn_gets+0x114>)
 802741a:	2900      	cmp	r1, #0
 802741c:	bf08      	it	eq
 802741e:	461a      	moveq	r2, r3
 8027420:	4631      	mov	r1, r6
 8027422:	4628      	mov	r0, r5
 8027424:	f003 fd5e 	bl	802aee4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8027428:	2800      	cmp	r0, #0
 802742a:	db21      	blt.n	8027470 <mbedtls_x509_dn_gets+0xf8>
 802742c:	42b0      	cmp	r0, r6
 802742e:	d221      	bcs.n	8027474 <mbedtls_x509_dn_gets+0xfc>
 8027430:	1a36      	subs	r6, r6, r0
 8027432:	4405      	add	r5, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8027434:	a941      	add	r1, sp, #260	; 0x104
 8027436:	4620      	mov	r0, r4
 8027438:	f7f2 fc86 	bl	8019d48 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 802743c:	2800      	cmp	r0, #0
 802743e:	d1b6      	bne.n	80273ae <mbedtls_x509_dn_gets+0x36>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 8027440:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027442:	464a      	mov	r2, r9
 8027444:	4631      	mov	r1, r6
 8027446:	4628      	mov	r0, r5
 8027448:	f003 fd4c 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802744c:	2800      	cmp	r0, #0
 802744e:	db13      	blt.n	8027478 <mbedtls_x509_dn_gets+0x100>
 8027450:	42b0      	cmp	r0, r6
 8027452:	d213      	bcs.n	802747c <mbedtls_x509_dn_gets+0x104>
 8027454:	1a36      	subs	r6, r6, r0
 8027456:	4405      	add	r5, r0
        for( i = 0; i < name->val.len; i++ )
 8027458:	6922      	ldr	r2, [r4, #16]
 802745a:	2a00      	cmp	r2, #0
 802745c:	d0c5      	beq.n	80273ea <mbedtls_x509_dn_gets+0x72>
 802745e:	a901      	add	r1, sp, #4
 8027460:	2200      	movs	r2, #0
 8027462:	e7b3      	b.n	80273cc <mbedtls_x509_dn_gets+0x54>
    n = size;
 8027464:	465e      	mov	r6, fp
    }

    return( (int) ( size - n ) );
 8027466:	ebab 0006 	sub.w	r0, fp, r6
}
 802746a:	b043      	add	sp, #268	; 0x10c
 802746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 8027470:	4807      	ldr	r0, [pc, #28]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 8027472:	e7fa      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
 8027474:	4806      	ldr	r0, [pc, #24]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 8027476:	e7f8      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027478:	4805      	ldr	r0, [pc, #20]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 802747a:	e7f6      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
 802747c:	4804      	ldr	r0, [pc, #16]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 802747e:	e7f4      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027480:	4803      	ldr	r0, [pc, #12]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 8027482:	e7f2      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
 8027484:	4802      	ldr	r0, [pc, #8]	; (8027490 <mbedtls_x509_dn_gets+0x118>)
 8027486:	e7f0      	b.n	802746a <mbedtls_x509_dn_gets+0xf2>
 8027488:	08036234 	.word	0x08036234
 802748c:	08036238 	.word	0x08036238
 8027490:	ffffd680 	.word	0xffffd680
 8027494:	080349bc 	.word	0x080349bc
 8027498:	08036240 	.word	0x08036240
 802749c:	0803623c 	.word	0x0803623c

080274a0 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 80274a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274a4:	b085      	sub	sp, #20
 80274a6:	4606      	mov	r6, r0
 80274a8:	9103      	str	r1, [sp, #12]
 80274aa:	4690      	mov	r8, r2
    char *p;

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
 80274ac:	6857      	ldr	r7, [r2, #4]
        ? serial->len  : 28;
 80274ae:	2f20      	cmp	r7, #32
 80274b0:	d802      	bhi.n	80274b8 <mbedtls_x509_serial_gets+0x18>

    for( i = 0; i < nr; i++ )
 80274b2:	b917      	cbnz	r7, 80274ba <mbedtls_x509_serial_gets+0x1a>
    n = size;
 80274b4:	9d03      	ldr	r5, [sp, #12]
 80274b6:	e03a      	b.n	802752e <mbedtls_x509_serial_gets+0x8e>
        ? serial->len  : 28;
 80274b8:	271c      	movs	r7, #28
 80274ba:	9d03      	ldr	r5, [sp, #12]
 80274bc:	2400      	movs	r4, #0
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80274be:	f8df a090 	ldr.w	sl, [pc, #144]	; 8027550 <mbedtls_x509_serial_gets+0xb0>
 80274c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8027554 <mbedtls_x509_serial_gets+0xb4>
 80274c6:	f8df b090 	ldr.w	fp, [pc, #144]	; 8027558 <mbedtls_x509_serial_gets+0xb8>
 80274ca:	e017      	b.n	80274fc <mbedtls_x509_serial_gets+0x5c>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 80274cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 80274d0:	5d1b      	ldrb	r3, [r3, r4]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 80274d2:	1e7a      	subs	r2, r7, #1
        ret = mbedtls_snprintf( p, n, "%02X%s",
 80274d4:	42a2      	cmp	r2, r4
 80274d6:	bf8c      	ite	hi
 80274d8:	464a      	movhi	r2, r9
 80274da:	465a      	movls	r2, fp
 80274dc:	9200      	str	r2, [sp, #0]
 80274de:	4652      	mov	r2, sl
 80274e0:	4629      	mov	r1, r5
 80274e2:	4630      	mov	r0, r6
 80274e4:	f003 fcfe 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80274e8:	2800      	cmp	r0, #0
 80274ea:	db25      	blt.n	8027538 <mbedtls_x509_serial_gets+0x98>
 80274ec:	42a8      	cmp	r0, r5
 80274ee:	d225      	bcs.n	802753c <mbedtls_x509_serial_gets+0x9c>
 80274f0:	1a2d      	subs	r5, r5, r0
 80274f2:	4406      	add	r6, r0
    for( i = 0; i < nr; i++ )
 80274f4:	1c63      	adds	r3, r4, #1
 80274f6:	42bb      	cmp	r3, r7
 80274f8:	d20b      	bcs.n	8027512 <mbedtls_x509_serial_gets+0x72>
 80274fa:	3401      	adds	r4, #1
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 80274fc:	2c00      	cmp	r4, #0
 80274fe:	d1e5      	bne.n	80274cc <mbedtls_x509_serial_gets+0x2c>
 8027500:	2f01      	cmp	r7, #1
 8027502:	d9e3      	bls.n	80274cc <mbedtls_x509_serial_gets+0x2c>
 8027504:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027508:	781b      	ldrb	r3, [r3, #0]
 802750a:	2b00      	cmp	r3, #0
 802750c:	d0f5      	beq.n	80274fa <mbedtls_x509_serial_gets+0x5a>
        ret = mbedtls_snprintf( p, n, "%02X%s",
 802750e:	464a      	mov	r2, r9
 8027510:	e7e4      	b.n	80274dc <mbedtls_x509_serial_gets+0x3c>
    }

    if( nr != serial->len )
 8027512:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8027516:	42bb      	cmp	r3, r7
 8027518:	d009      	beq.n	802752e <mbedtls_x509_serial_gets+0x8e>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 802751a:	4a0b      	ldr	r2, [pc, #44]	; (8027548 <mbedtls_x509_serial_gets+0xa8>)
 802751c:	4629      	mov	r1, r5
 802751e:	4630      	mov	r0, r6
 8027520:	f003 fce0 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027524:	2800      	cmp	r0, #0
 8027526:	db0b      	blt.n	8027540 <mbedtls_x509_serial_gets+0xa0>
 8027528:	42a8      	cmp	r0, r5
 802752a:	d20b      	bcs.n	8027544 <mbedtls_x509_serial_gets+0xa4>
 802752c:	1a2d      	subs	r5, r5, r0
    }

    return( (int) ( size - n ) );
 802752e:	9b03      	ldr	r3, [sp, #12]
 8027530:	1b58      	subs	r0, r3, r5
}
 8027532:	b005      	add	sp, #20
 8027534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027538:	4804      	ldr	r0, [pc, #16]	; (802754c <mbedtls_x509_serial_gets+0xac>)
 802753a:	e7fa      	b.n	8027532 <mbedtls_x509_serial_gets+0x92>
 802753c:	4803      	ldr	r0, [pc, #12]	; (802754c <mbedtls_x509_serial_gets+0xac>)
 802753e:	e7f8      	b.n	8027532 <mbedtls_x509_serial_gets+0x92>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027540:	4802      	ldr	r0, [pc, #8]	; (802754c <mbedtls_x509_serial_gets+0xac>)
 8027542:	e7f6      	b.n	8027532 <mbedtls_x509_serial_gets+0x92>
 8027544:	4801      	ldr	r0, [pc, #4]	; (802754c <mbedtls_x509_serial_gets+0xac>)
 8027546:	e7f4      	b.n	8027532 <mbedtls_x509_serial_gets+0x92>
 8027548:	08036250 	.word	0x08036250
 802754c:	ffffd680 	.word	0xffffd680
 8027550:	08036248 	.word	0x08036248
 8027554:	08036244 	.word	0x08036244
 8027558:	08032204 	.word	0x08032204

0802755c <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 802755c:	b530      	push	{r4, r5, lr}
 802755e:	b083      	sub	sp, #12
 8027560:	4605      	mov	r5, r0
 8027562:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8027564:	2300      	movs	r3, #0
 8027566:	9301      	str	r3, [sp, #4]

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8027568:	a901      	add	r1, sp, #4
 802756a:	4610      	mov	r0, r2
 802756c:	f7f2 fc58 	bl	8019e20 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 8027570:	b160      	cbz	r0, 802758c <mbedtls_x509_sig_alg_gets+0x30>
        ret = mbedtls_snprintf( p, n, "???"  );
 8027572:	4a0b      	ldr	r2, [pc, #44]	; (80275a0 <mbedtls_x509_sig_alg_gets+0x44>)
 8027574:	4621      	mov	r1, r4
 8027576:	4628      	mov	r0, r5
 8027578:	f003 fcb4 	bl	802aee4 <sniprintf>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
    MBEDTLS_X509_SAFE_SNPRINTF;
 802757c:	2800      	cmp	r0, #0
 802757e:	db0c      	blt.n	802759a <mbedtls_x509_sig_alg_gets+0x3e>
 8027580:	4b08      	ldr	r3, [pc, #32]	; (80275a4 <mbedtls_x509_sig_alg_gets+0x48>)
 8027582:	42a0      	cmp	r0, r4
 8027584:	bf28      	it	cs
 8027586:	4618      	movcs	r0, r3
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 8027588:	b003      	add	sp, #12
 802758a:	bd30      	pop	{r4, r5, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 802758c:	9b01      	ldr	r3, [sp, #4]
 802758e:	4a06      	ldr	r2, [pc, #24]	; (80275a8 <mbedtls_x509_sig_alg_gets+0x4c>)
 8027590:	4621      	mov	r1, r4
 8027592:	4628      	mov	r0, r5
 8027594:	f003 fca6 	bl	802aee4 <sniprintf>
 8027598:	e7f0      	b.n	802757c <mbedtls_x509_sig_alg_gets+0x20>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802759a:	4802      	ldr	r0, [pc, #8]	; (80275a4 <mbedtls_x509_sig_alg_gets+0x48>)
 802759c:	e7f4      	b.n	8027588 <mbedtls_x509_sig_alg_gets+0x2c>
 802759e:	bf00      	nop
 80275a0:	08036258 	.word	0x08036258
 80275a4:	ffffd680 	.word	0xffffd680
 80275a8:	080349bc 	.word	0x080349bc

080275ac <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80275ac:	b510      	push	{r4, lr}
 80275ae:	460c      	mov	r4, r1
 80275b0:	4613      	mov	r3, r2
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80275b2:	4a06      	ldr	r2, [pc, #24]	; (80275cc <mbedtls_x509_key_size_helper+0x20>)
 80275b4:	f003 fc96 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80275b8:	2800      	cmp	r0, #0
 80275ba:	db05      	blt.n	80275c8 <mbedtls_x509_key_size_helper+0x1c>
 80275bc:	4904      	ldr	r1, [pc, #16]	; (80275d0 <mbedtls_x509_key_size_helper+0x24>)
 80275be:	42a0      	cmp	r0, r4
 80275c0:	bf2c      	ite	cs
 80275c2:	4608      	movcs	r0, r1
 80275c4:	2000      	movcc	r0, #0

    return( 0 );
}
 80275c6:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
 80275c8:	4801      	ldr	r0, [pc, #4]	; (80275d0 <mbedtls_x509_key_size_helper+0x24>)
 80275ca:	e7fc      	b.n	80275c6 <mbedtls_x509_key_size_helper+0x1a>
 80275cc:	0803625c 	.word	0x0803625c
 80275d0:	ffffd680 	.word	0xffffd680

080275d4 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
    ((void) to);
    return( 0 );
}
 80275d4:	2000      	movs	r0, #0
 80275d6:	4770      	bx	lr

080275d8 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80275d8:	2000      	movs	r0, #0
 80275da:	4770      	bx	lr

080275dc <x509_memcasecmp>:
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 80275dc:	b1f2      	cbz	r2, 802761c <x509_memcasecmp+0x40>
{
 80275de:	b430      	push	{r4, r5}
 80275e0:	4615      	mov	r5, r2
 80275e2:	1e42      	subs	r2, r0, #1
 80275e4:	1e4c      	subs	r4, r1, #1
 80275e6:	3d01      	subs	r5, #1
 80275e8:	4405      	add	r5, r0
 80275ea:	e001      	b.n	80275f0 <x509_memcasecmp+0x14>
    for( i = 0; i < len; i++ )
 80275ec:	42aa      	cmp	r2, r5
 80275ee:	d012      	beq.n	8027616 <x509_memcasecmp+0x3a>
    {
        diff = n1[i] ^ n2[i];
 80275f0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80275f4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80275f8:	ea83 0001 	eor.w	r0, r3, r1

        if( diff == 0 )
 80275fc:	428b      	cmp	r3, r1
 80275fe:	d0f5      	beq.n	80275ec <x509_memcasecmp+0x10>
            continue;

        if( diff == 32 &&
 8027600:	2820      	cmp	r0, #32
 8027602:	d10d      	bne.n	8027620 <x509_memcasecmp+0x44>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 8027604:	f023 0320 	bic.w	r3, r3, #32
 8027608:	3b41      	subs	r3, #65	; 0x41
 802760a:	b2db      	uxtb	r3, r3
 802760c:	2b19      	cmp	r3, #25
 802760e:	d9ed      	bls.n	80275ec <x509_memcasecmp+0x10>
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 8027610:	f04f 30ff 	mov.w	r0, #4294967295
 8027614:	e000      	b.n	8027618 <x509_memcasecmp+0x3c>
    }

    return( 0 );
 8027616:	2000      	movs	r0, #0
}
 8027618:	bc30      	pop	{r4, r5}
 802761a:	4770      	bx	lr
    return( 0 );
 802761c:	2000      	movs	r0, #0
}
 802761e:	4770      	bx	lr
        return( -1 );
 8027620:	f04f 30ff 	mov.w	r0, #4294967295
 8027624:	e7f8      	b.n	8027618 <x509_memcasecmp+0x3c>

08027626 <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8027626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027628:	4605      	mov	r5, r0
 802762a:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 802762c:	e019      	b.n	8027662 <x509_name_cmp+0x3c>
        a->len == b->len &&
 802762e:	6922      	ldr	r2, [r4, #16]
    if( a->tag == b->tag &&
 8027630:	692b      	ldr	r3, [r5, #16]
 8027632:	4293      	cmp	r3, r2
 8027634:	d128      	bne.n	8027688 <x509_name_cmp+0x62>
        memcmp( a->p, b->p, b->len ) == 0 )
 8027636:	6961      	ldr	r1, [r4, #20]
 8027638:	6968      	ldr	r0, [r5, #20]
 802763a:	f002 ff70 	bl	802a51e <memcmp>
        a->len == b->len &&
 802763e:	bb18      	cbnz	r0, 8027688 <x509_name_cmp+0x62>
 8027640:	e009      	b.n	8027656 <x509_name_cmp+0x30>
        a->len == b->len &&
 8027642:	6922      	ldr	r2, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027644:	692b      	ldr	r3, [r5, #16]
 8027646:	4293      	cmp	r3, r2
 8027648:	d13d      	bne.n	80276c6 <x509_name_cmp+0xa0>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 802764a:	6961      	ldr	r1, [r4, #20]
 802764c:	6968      	ldr	r0, [r5, #20]
 802764e:	f7ff ffc5 	bl	80275dc <x509_memcasecmp>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 8027652:	2800      	cmp	r0, #0
 8027654:	d13a      	bne.n	80276cc <x509_name_cmp+0xa6>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8027656:	7f2a      	ldrb	r2, [r5, #28]
 8027658:	7f23      	ldrb	r3, [r4, #28]
 802765a:	429a      	cmp	r2, r3
 802765c:	d139      	bne.n	80276d2 <x509_name_cmp+0xac>
            return( -1 );

        a = a->next;
 802765e:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8027660:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
 8027662:	b1e5      	cbz	r5, 802769e <x509_name_cmp+0x78>
        if( a == NULL || b == NULL )
 8027664:	b304      	cbz	r4, 80276a8 <x509_name_cmp+0x82>
        if( a->oid.tag != b->oid.tag ||
 8027666:	682a      	ldr	r2, [r5, #0]
 8027668:	6823      	ldr	r3, [r4, #0]
 802766a:	429a      	cmp	r2, r3
 802766c:	d11f      	bne.n	80276ae <x509_name_cmp+0x88>
            a->oid.len != b->oid.len ||
 802766e:	6862      	ldr	r2, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
 8027670:	686b      	ldr	r3, [r5, #4]
 8027672:	4293      	cmp	r3, r2
 8027674:	d11e      	bne.n	80276b4 <x509_name_cmp+0x8e>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8027676:	68a1      	ldr	r1, [r4, #8]
 8027678:	68a8      	ldr	r0, [r5, #8]
 802767a:	f002 ff50 	bl	802a51e <memcmp>
            a->oid.len != b->oid.len ||
 802767e:	b9e0      	cbnz	r0, 80276ba <x509_name_cmp+0x94>
    if( a->tag == b->tag &&
 8027680:	68ee      	ldr	r6, [r5, #12]
 8027682:	68e7      	ldr	r7, [r4, #12]
 8027684:	42be      	cmp	r6, r7
 8027686:	d0d2      	beq.n	802762e <x509_name_cmp+0x8>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027688:	2e0c      	cmp	r6, #12
 802768a:	d001      	beq.n	8027690 <x509_name_cmp+0x6a>
 802768c:	2e13      	cmp	r6, #19
 802768e:	d117      	bne.n	80276c0 <x509_name_cmp+0x9a>
 8027690:	2f0c      	cmp	r7, #12
 8027692:	d0d6      	beq.n	8027642 <x509_name_cmp+0x1c>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8027694:	2f13      	cmp	r7, #19
 8027696:	d0d4      	beq.n	8027642 <x509_name_cmp+0x1c>
            return( -1 );
 8027698:	f04f 30ff 	mov.w	r0, #4294967295
 802769c:	e003      	b.n	80276a6 <x509_name_cmp+0x80>
    while( a != NULL || b != NULL )
 802769e:	1e20      	subs	r0, r4, #0
 80276a0:	bf18      	it	ne
 80276a2:	2001      	movne	r0, #1
 80276a4:	4240      	negs	r0, r0
    }

    /* a == NULL == b */
    return( 0 );
}
 80276a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return( -1 );
 80276a8:	f04f 30ff 	mov.w	r0, #4294967295
 80276ac:	e7fb      	b.n	80276a6 <x509_name_cmp+0x80>
            return( -1 );
 80276ae:	f04f 30ff 	mov.w	r0, #4294967295
 80276b2:	e7f8      	b.n	80276a6 <x509_name_cmp+0x80>
 80276b4:	f04f 30ff 	mov.w	r0, #4294967295
 80276b8:	e7f5      	b.n	80276a6 <x509_name_cmp+0x80>
 80276ba:	f04f 30ff 	mov.w	r0, #4294967295
 80276be:	e7f2      	b.n	80276a6 <x509_name_cmp+0x80>
            return( -1 );
 80276c0:	f04f 30ff 	mov.w	r0, #4294967295
 80276c4:	e7ef      	b.n	80276a6 <x509_name_cmp+0x80>
 80276c6:	f04f 30ff 	mov.w	r0, #4294967295
 80276ca:	e7ec      	b.n	80276a6 <x509_name_cmp+0x80>
 80276cc:	f04f 30ff 	mov.w	r0, #4294967295
 80276d0:	e7e9      	b.n	80276a6 <x509_name_cmp+0x80>
            return( -1 );
 80276d2:	f04f 30ff 	mov.w	r0, #4294967295
 80276d6:	e7e6      	b.n	80276a6 <x509_name_cmp+0x80>

080276d8 <x509_profile_check_key>:
{
 80276d8:	b538      	push	{r3, r4, r5, lr}
 80276da:	4605      	mov	r5, r0
 80276dc:	460c      	mov	r4, r1
    const mbedtls_pk_type_t pk_alg = mbedtls_pk_get_type( pk );
 80276de:	4608      	mov	r0, r1
 80276e0:	f7f2 fe3e 	bl	801a360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80276e4:	2801      	cmp	r0, #1
 80276e6:	d008      	beq.n	80276fa <x509_profile_check_key+0x22>
 80276e8:	2806      	cmp	r0, #6
 80276ea:	d006      	beq.n	80276fa <x509_profile_check_key+0x22>
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 80276ec:	1e83      	subs	r3, r0, #2
 80276ee:	b2db      	uxtb	r3, r3
 80276f0:	2b02      	cmp	r3, #2
 80276f2:	d90c      	bls.n	802770e <x509_profile_check_key+0x36>
    return( -1 );
 80276f4:	f04f 30ff 	mov.w	r0, #4294967295
 80276f8:	e016      	b.n	8027728 <x509_profile_check_key+0x50>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80276fa:	4620      	mov	r0, r4
 80276fc:	f7f2 fdaa 	bl	801a254 <mbedtls_pk_get_bitlen>
 8027700:	68eb      	ldr	r3, [r5, #12]
 8027702:	4298      	cmp	r0, r3
 8027704:	f04f 30ff 	mov.w	r0, #4294967295
 8027708:	bf28      	it	cs
 802770a:	2000      	movcs	r0, #0
 802770c:	e00c      	b.n	8027728 <x509_profile_check_key+0x50>
        const mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 802770e:	6863      	ldr	r3, [r4, #4]
 8027710:	781b      	ldrb	r3, [r3, #0]
        if( gid == MBEDTLS_ECP_DP_NONE )
 8027712:	b153      	cbz	r3, 802772a <x509_profile_check_key+0x52>
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 8027714:	3b01      	subs	r3, #1
 8027716:	2201      	movs	r2, #1
 8027718:	fa02 f303 	lsl.w	r3, r2, r3
 802771c:	68aa      	ldr	r2, [r5, #8]
 802771e:	4213      	tst	r3, r2
 8027720:	bf0c      	ite	eq
 8027722:	f04f 30ff 	moveq.w	r0, #4294967295
 8027726:	2000      	movne	r0, #0
}
 8027728:	bd38      	pop	{r3, r4, r5, pc}
            return( -1 );
 802772a:	f04f 30ff 	mov.w	r0, #4294967295
 802772e:	e7fb      	b.n	8027728 <x509_profile_check_key+0x50>

08027730 <x509_crt_check_cn>:
/*
 * Check for CN match
 */
static int x509_crt_check_cn( const mbedtls_x509_buf *name,
                              const char *cn, size_t cn_len )
{
 8027730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027732:	4606      	mov	r6, r0
 8027734:	460c      	mov	r4, r1
    /* try exact match */
    if( name->len == cn_len &&
 8027736:	6845      	ldr	r5, [r0, #4]
 8027738:	4295      	cmp	r5, r2
 802773a:	d01b      	beq.n	8027774 <x509_crt_check_cn+0x44>
    size_t cn_idx = 0, cn_len = strlen( cn );
 802773c:	4620      	mov	r0, r4
 802773e:	f7d8 fd61 	bl	8000204 <strlen>
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8027742:	2d02      	cmp	r5, #2
 8027744:	d92b      	bls.n	802779e <x509_crt_check_cn+0x6e>
 8027746:	68b6      	ldr	r6, [r6, #8]
 8027748:	7833      	ldrb	r3, [r6, #0]
 802774a:	2b2a      	cmp	r3, #42	; 0x2a
 802774c:	d12a      	bne.n	80277a4 <x509_crt_check_cn+0x74>
 802774e:	7873      	ldrb	r3, [r6, #1]
 8027750:	2b2e      	cmp	r3, #46	; 0x2e
 8027752:	d12a      	bne.n	80277aa <x509_crt_check_cn+0x7a>
    for( i = 0; i < cn_len; ++i )
 8027754:	b360      	cbz	r0, 80277b0 <x509_crt_check_cn+0x80>
 8027756:	1e63      	subs	r3, r4, #1
 8027758:	eb03 0c00 	add.w	ip, r3, r0
 802775c:	f1c4 0701 	rsb	r7, r4, #1
 8027760:	18f9      	adds	r1, r7, r3
        if( cn[i] == '.' )
 8027762:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8027766:	2a2e      	cmp	r2, #46	; 0x2e
 8027768:	d00b      	beq.n	8027782 <x509_crt_check_cn+0x52>
    for( i = 0; i < cn_len; ++i )
 802776a:	4563      	cmp	r3, ip
 802776c:	d1f8      	bne.n	8027760 <x509_crt_check_cn+0x30>
        return( -1 );
 802776e:	f04f 30ff 	mov.w	r0, #4294967295
 8027772:	e013      	b.n	802779c <x509_crt_check_cn+0x6c>
        x509_memcasecmp( cn, name->p, cn_len ) == 0 )
 8027774:	6881      	ldr	r1, [r0, #8]
 8027776:	4620      	mov	r0, r4
 8027778:	f7ff ff30 	bl	80275dc <x509_memcasecmp>
    if( name->len == cn_len &&
 802777c:	2800      	cmp	r0, #0
 802777e:	d1dd      	bne.n	802773c <x509_crt_check_cn+0xc>
 8027780:	e00c      	b.n	802779c <x509_crt_check_cn+0x6c>
    if( cn_idx == 0 )
 8027782:	b1c1      	cbz	r1, 80277b6 <x509_crt_check_cn+0x86>
    if( cn_len - cn_idx == name->len - 1 &&
 8027784:	1e6a      	subs	r2, r5, #1
 8027786:	1a40      	subs	r0, r0, r1
 8027788:	4290      	cmp	r0, r2
 802778a:	d117      	bne.n	80277bc <x509_crt_check_cn+0x8c>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 802778c:	4421      	add	r1, r4
 802778e:	1c70      	adds	r0, r6, #1
 8027790:	f7ff ff24 	bl	80275dc <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 8027794:	3800      	subs	r0, #0
 8027796:	bf18      	it	ne
 8027798:	2001      	movne	r0, #1
 802779a:	4240      	negs	r0, r0
    {
        return( 0 );
    }

    return( -1 );
}
 802779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return( -1 );
 802779e:	f04f 30ff 	mov.w	r0, #4294967295
 80277a2:	e7fb      	b.n	802779c <x509_crt_check_cn+0x6c>
 80277a4:	f04f 30ff 	mov.w	r0, #4294967295
 80277a8:	e7f8      	b.n	802779c <x509_crt_check_cn+0x6c>
 80277aa:	f04f 30ff 	mov.w	r0, #4294967295
 80277ae:	e7f5      	b.n	802779c <x509_crt_check_cn+0x6c>
        return( -1 );
 80277b0:	f04f 30ff 	mov.w	r0, #4294967295
 80277b4:	e7f2      	b.n	802779c <x509_crt_check_cn+0x6c>
 80277b6:	f04f 30ff 	mov.w	r0, #4294967295
 80277ba:	e7ef      	b.n	802779c <x509_crt_check_cn+0x6c>
    return( -1 );
 80277bc:	f04f 30ff 	mov.w	r0, #4294967295
 80277c0:	e7ec      	b.n	802779c <x509_crt_check_cn+0x6c>
	...

080277c4 <mbedtls_x509_crt_info>:
{
 80277c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277c8:	b08d      	sub	sp, #52	; 0x34
 80277ca:	4605      	mov	r5, r0
 80277cc:	4688      	mov	r8, r1
    if( NULL == crt )
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	f000 8139 	beq.w	8027a46 <mbedtls_x509_crt_info+0x282>
 80277d4:	4617      	mov	r7, r2
 80277d6:	461e      	mov	r6, r3
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 80277d8:	699b      	ldr	r3, [r3, #24]
 80277da:	9300      	str	r3, [sp, #0]
 80277dc:	4613      	mov	r3, r2
 80277de:	4ac4      	ldr	r2, [pc, #784]	; (8027af0 <mbedtls_x509_crt_info+0x32c>)
 80277e0:	f003 fb80 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80277e4:	2800      	cmp	r0, #0
 80277e6:	f2c0 832c 	blt.w	8027e42 <mbedtls_x509_crt_info+0x67e>
 80277ea:	4540      	cmp	r0, r8
 80277ec:	f080 832b 	bcs.w	8027e46 <mbedtls_x509_crt_info+0x682>
 80277f0:	eba8 0400 	sub.w	r4, r8, r0
 80277f4:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 80277f6:	463b      	mov	r3, r7
 80277f8:	4abe      	ldr	r2, [pc, #760]	; (8027af4 <mbedtls_x509_crt_info+0x330>)
 80277fa:	4621      	mov	r1, r4
 80277fc:	4628      	mov	r0, r5
 80277fe:	f003 fb71 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027802:	2800      	cmp	r0, #0
 8027804:	f2c0 8321 	blt.w	8027e4a <mbedtls_x509_crt_info+0x686>
 8027808:	4284      	cmp	r4, r0
 802780a:	f240 8320 	bls.w	8027e4e <mbedtls_x509_crt_info+0x68a>
 802780e:	1a24      	subs	r4, r4, r0
 8027810:	4405      	add	r5, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8027812:	f106 021c 	add.w	r2, r6, #28
 8027816:	4621      	mov	r1, r4
 8027818:	4628      	mov	r0, r5
 802781a:	f7ff fe41 	bl	80274a0 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802781e:	2800      	cmp	r0, #0
 8027820:	f2c0 8317 	blt.w	8027e52 <mbedtls_x509_crt_info+0x68e>
 8027824:	4284      	cmp	r4, r0
 8027826:	f240 8316 	bls.w	8027e56 <mbedtls_x509_crt_info+0x692>
 802782a:	1a24      	subs	r4, r4, r0
 802782c:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 802782e:	463b      	mov	r3, r7
 8027830:	4ab1      	ldr	r2, [pc, #708]	; (8027af8 <mbedtls_x509_crt_info+0x334>)
 8027832:	4621      	mov	r1, r4
 8027834:	4628      	mov	r0, r5
 8027836:	f003 fb55 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802783a:	2800      	cmp	r0, #0
 802783c:	f2c0 830d 	blt.w	8027e5a <mbedtls_x509_crt_info+0x696>
 8027840:	4284      	cmp	r4, r0
 8027842:	f240 830c 	bls.w	8027e5e <mbedtls_x509_crt_info+0x69a>
 8027846:	1a24      	subs	r4, r4, r0
 8027848:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 802784a:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 802784e:	4621      	mov	r1, r4
 8027850:	4628      	mov	r0, r5
 8027852:	f7ff fd91 	bl	8027378 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027856:	2800      	cmp	r0, #0
 8027858:	f2c0 8303 	blt.w	8027e62 <mbedtls_x509_crt_info+0x69e>
 802785c:	4284      	cmp	r4, r0
 802785e:	f240 8331 	bls.w	8027ec4 <mbedtls_x509_crt_info+0x700>
 8027862:	1a24      	subs	r4, r4, r0
 8027864:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8027866:	463b      	mov	r3, r7
 8027868:	4aa4      	ldr	r2, [pc, #656]	; (8027afc <mbedtls_x509_crt_info+0x338>)
 802786a:	4621      	mov	r1, r4
 802786c:	4628      	mov	r0, r5
 802786e:	f003 fb39 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027872:	2800      	cmp	r0, #0
 8027874:	f2c0 8328 	blt.w	8027ec8 <mbedtls_x509_crt_info+0x704>
 8027878:	4284      	cmp	r4, r0
 802787a:	f240 8327 	bls.w	8027ecc <mbedtls_x509_crt_info+0x708>
 802787e:	1a24      	subs	r4, r4, r0
 8027880:	4405      	add	r5, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8027882:	f106 026c 	add.w	r2, r6, #108	; 0x6c
 8027886:	4621      	mov	r1, r4
 8027888:	4628      	mov	r0, r5
 802788a:	f7ff fd75 	bl	8027378 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802788e:	2800      	cmp	r0, #0
 8027890:	f2c0 831e 	blt.w	8027ed0 <mbedtls_x509_crt_info+0x70c>
 8027894:	4284      	cmp	r4, r0
 8027896:	f240 831d 	bls.w	8027ed4 <mbedtls_x509_crt_info+0x710>
 802789a:	1a24      	subs	r4, r4, r0
 802789c:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 802789e:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
 80278a2:	9305      	str	r3, [sp, #20]
 80278a4:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 80278a8:	9304      	str	r3, [sp, #16]
 80278aa:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 80278ae:	9303      	str	r3, [sp, #12]
 80278b0:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 80278b4:	9302      	str	r3, [sp, #8]
 80278b6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80278ba:	9301      	str	r3, [sp, #4]
 80278bc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80278c0:	9300      	str	r3, [sp, #0]
 80278c2:	463b      	mov	r3, r7
 80278c4:	4a8e      	ldr	r2, [pc, #568]	; (8027b00 <mbedtls_x509_crt_info+0x33c>)
 80278c6:	4621      	mov	r1, r4
 80278c8:	4628      	mov	r0, r5
 80278ca:	f003 fb0b 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80278ce:	2800      	cmp	r0, #0
 80278d0:	f2c0 8302 	blt.w	8027ed8 <mbedtls_x509_crt_info+0x714>
 80278d4:	4284      	cmp	r4, r0
 80278d6:	f240 8301 	bls.w	8027edc <mbedtls_x509_crt_info+0x718>
 80278da:	1a24      	subs	r4, r4, r0
 80278dc:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80278de:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
 80278e2:	9305      	str	r3, [sp, #20]
 80278e4:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
 80278e8:	9304      	str	r3, [sp, #16]
 80278ea:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 80278ee:	9303      	str	r3, [sp, #12]
 80278f0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80278f4:	9302      	str	r3, [sp, #8]
 80278f6:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 80278fa:	9301      	str	r3, [sp, #4]
 80278fc:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8027900:	9300      	str	r3, [sp, #0]
 8027902:	463b      	mov	r3, r7
 8027904:	4a7f      	ldr	r2, [pc, #508]	; (8027b04 <mbedtls_x509_crt_info+0x340>)
 8027906:	4621      	mov	r1, r4
 8027908:	4628      	mov	r0, r5
 802790a:	f003 faeb 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802790e:	2800      	cmp	r0, #0
 8027910:	f2c0 82e6 	blt.w	8027ee0 <mbedtls_x509_crt_info+0x71c>
 8027914:	4284      	cmp	r4, r0
 8027916:	f240 82e5 	bls.w	8027ee4 <mbedtls_x509_crt_info+0x720>
 802791a:	1a24      	subs	r4, r4, r0
 802791c:	4405      	add	r5, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 802791e:	463b      	mov	r3, r7
 8027920:	4a79      	ldr	r2, [pc, #484]	; (8027b08 <mbedtls_x509_crt_info+0x344>)
 8027922:	4621      	mov	r1, r4
 8027924:	4628      	mov	r0, r5
 8027926:	f003 fadd 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802792a:	2800      	cmp	r0, #0
 802792c:	f2c0 82dc 	blt.w	8027ee8 <mbedtls_x509_crt_info+0x724>
 8027930:	4284      	cmp	r4, r0
 8027932:	f240 82db 	bls.w	8027eec <mbedtls_x509_crt_info+0x728>
 8027936:	1a24      	subs	r4, r4, r0
 8027938:	4405      	add	r5, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 802793a:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
 802793e:	9301      	str	r3, [sp, #4]
 8027940:	f896 3128 	ldrb.w	r3, [r6, #296]	; 0x128
 8027944:	9300      	str	r3, [sp, #0]
 8027946:	f896 3129 	ldrb.w	r3, [r6, #297]	; 0x129
 802794a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 802794e:	4621      	mov	r1, r4
 8027950:	4628      	mov	r0, r5
 8027952:	f7ff fe03 	bl	802755c <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027956:	f1b0 0900 	subs.w	r9, r0, #0
 802795a:	f2c0 82c9 	blt.w	8027ef0 <mbedtls_x509_crt_info+0x72c>
 802795e:	454c      	cmp	r4, r9
 8027960:	f240 82c8 	bls.w	8027ef4 <mbedtls_x509_crt_info+0x730>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8027964:	f106 0abc 	add.w	sl, r6, #188	; 0xbc
 8027968:	4650      	mov	r0, sl
 802796a:	f7f2 fced 	bl	801a348 <mbedtls_pk_get_name>
 802796e:	4602      	mov	r2, r0
 8027970:	2112      	movs	r1, #18
 8027972:	a807      	add	r0, sp, #28
 8027974:	f7ff fe1a 	bl	80275ac <mbedtls_x509_key_size_helper>
 8027978:	2800      	cmp	r0, #0
 802797a:	d16e      	bne.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802797c:	eba4 0409 	sub.w	r4, r4, r9
 8027980:	444d      	add	r5, r9
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8027982:	4650      	mov	r0, sl
 8027984:	f7f2 fc66 	bl	801a254 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 8027988:	9001      	str	r0, [sp, #4]
 802798a:	ab07      	add	r3, sp, #28
 802798c:	9300      	str	r3, [sp, #0]
 802798e:	463b      	mov	r3, r7
 8027990:	4a5e      	ldr	r2, [pc, #376]	; (8027b0c <mbedtls_x509_crt_info+0x348>)
 8027992:	4621      	mov	r1, r4
 8027994:	4628      	mov	r0, r5
 8027996:	f003 faa5 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802799a:	2800      	cmp	r0, #0
 802799c:	f2c0 82ac 	blt.w	8027ef8 <mbedtls_x509_crt_info+0x734>
 80279a0:	4284      	cmp	r4, r0
 80279a2:	f240 82ab 	bls.w	8027efc <mbedtls_x509_crt_info+0x738>
 80279a6:	1a24      	subs	r4, r4, r0
 80279a8:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80279aa:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80279ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80279b2:	d019      	beq.n	80279e8 <mbedtls_x509_crt_info+0x224>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 80279b4:	f8d6 10fc 	ldr.w	r1, [r6, #252]	; 0xfc
 80279b8:	4b55      	ldr	r3, [pc, #340]	; (8027b10 <mbedtls_x509_crt_info+0x34c>)
 80279ba:	4a56      	ldr	r2, [pc, #344]	; (8027b14 <mbedtls_x509_crt_info+0x350>)
 80279bc:	2900      	cmp	r1, #0
 80279be:	bf08      	it	eq
 80279c0:	4613      	moveq	r3, r2
 80279c2:	9300      	str	r3, [sp, #0]
 80279c4:	463b      	mov	r3, r7
 80279c6:	4a54      	ldr	r2, [pc, #336]	; (8027b18 <mbedtls_x509_crt_info+0x354>)
 80279c8:	4621      	mov	r1, r4
 80279ca:	4628      	mov	r0, r5
 80279cc:	f003 fa8a 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80279d0:	2800      	cmp	r0, #0
 80279d2:	f2c0 8295 	blt.w	8027f00 <mbedtls_x509_crt_info+0x73c>
 80279d6:	4284      	cmp	r4, r0
 80279d8:	f240 8294 	bls.w	8027f04 <mbedtls_x509_crt_info+0x740>
 80279dc:	1a24      	subs	r4, r4, r0
 80279de:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 80279e0:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80279e4:	2b00      	cmp	r3, #0
 80279e6:	dc3b      	bgt.n	8027a60 <mbedtls_x509_crt_info+0x29c>
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80279e8:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80279ec:	f013 0f20 	tst.w	r3, #32
 80279f0:	d145      	bne.n	8027a7e <mbedtls_x509_crt_info+0x2ba>
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80279f2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 80279f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80279fa:	f040 80a1 	bne.w	8027b40 <mbedtls_x509_crt_info+0x37c>
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 80279fe:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8027a02:	f013 0f04 	tst.w	r3, #4
 8027a06:	f040 813e 	bne.w	8027c86 <mbedtls_x509_crt_info+0x4c2>
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8027a0a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
 8027a0e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8027a12:	f000 8208 	beq.w	8027e26 <mbedtls_x509_crt_info+0x662>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8027a16:	463b      	mov	r3, r7
 8027a18:	4a40      	ldr	r2, [pc, #256]	; (8027b1c <mbedtls_x509_crt_info+0x358>)
 8027a1a:	4621      	mov	r1, r4
 8027a1c:	4628      	mov	r0, r5
 8027a1e:	f003 fa61 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027a22:	2800      	cmp	r0, #0
 8027a24:	f2c0 8280 	blt.w	8027f28 <mbedtls_x509_crt_info+0x764>
 8027a28:	42a0      	cmp	r0, r4
 8027a2a:	f080 827f 	bcs.w	8027f2c <mbedtls_x509_crt_info+0x768>
 8027a2e:	1a24      	subs	r4, r4, r0
 8027a30:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8027a32:	f506 7684 	add.w	r6, r6, #264	; 0x108
    const char *sep = "";
 8027a36:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8027b34 <mbedtls_x509_crt_info+0x370>
            desc = "???";
 8027a3a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8027b38 <mbedtls_x509_crt_info+0x374>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8027a3e:	4f38      	ldr	r7, [pc, #224]	; (8027b20 <mbedtls_x509_crt_info+0x35c>)
        sep = ", ";
 8027a40:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8027b3c <mbedtls_x509_crt_info+0x378>
 8027a44:	e1e6      	b.n	8027e14 <mbedtls_x509_crt_info+0x650>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8027a46:	4a37      	ldr	r2, [pc, #220]	; (8027b24 <mbedtls_x509_crt_info+0x360>)
 8027a48:	f003 fa4c 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027a4c:	2800      	cmp	r0, #0
 8027a4e:	f2c0 81f6 	blt.w	8027e3e <mbedtls_x509_crt_info+0x67a>
 8027a52:	4b35      	ldr	r3, [pc, #212]	; (8027b28 <mbedtls_x509_crt_info+0x364>)
 8027a54:	4540      	cmp	r0, r8
 8027a56:	bf28      	it	cs
 8027a58:	4618      	movcs	r0, r3
}
 8027a5a:	b00d      	add	sp, #52	; 0x34
 8027a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8027a60:	3b01      	subs	r3, #1
 8027a62:	4a32      	ldr	r2, [pc, #200]	; (8027b2c <mbedtls_x509_crt_info+0x368>)
 8027a64:	4621      	mov	r1, r4
 8027a66:	4628      	mov	r0, r5
 8027a68:	f003 fa3c 	bl	802aee4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8027a6c:	2800      	cmp	r0, #0
 8027a6e:	f2c0 824b 	blt.w	8027f08 <mbedtls_x509_crt_info+0x744>
 8027a72:	4284      	cmp	r4, r0
 8027a74:	f240 824a 	bls.w	8027f0c <mbedtls_x509_crt_info+0x748>
 8027a78:	1a24      	subs	r4, r4, r0
 8027a7a:	4405      	add	r5, r0
 8027a7c:	e7b4      	b.n	80279e8 <mbedtls_x509_crt_info+0x224>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8027a7e:	463b      	mov	r3, r7
 8027a80:	4a2b      	ldr	r2, [pc, #172]	; (8027b30 <mbedtls_x509_crt_info+0x36c>)
 8027a82:	4621      	mov	r1, r4
 8027a84:	4628      	mov	r0, r5
 8027a86:	f003 fa2d 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027a8a:	2800      	cmp	r0, #0
 8027a8c:	f2c0 8240 	blt.w	8027f10 <mbedtls_x509_crt_info+0x74c>
 8027a90:	42a0      	cmp	r0, r4
 8027a92:	f080 823f 	bcs.w	8027f14 <mbedtls_x509_crt_info+0x750>
 8027a96:	1a24      	subs	r4, r4, r0
 8027a98:	4405      	add	r5, r0
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8027a9a:	f106 02e8 	add.w	r2, r6, #232	; 0xe8
        if( cur->buf.len + sep_len >= n )
 8027a9e:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8027aa2:	429c      	cmp	r4, r3
 8027aa4:	d904      	bls.n	8027ab0 <mbedtls_x509_crt_info+0x2ec>
        n -= cur->buf.len + sep_len;
 8027aa6:	1ae4      	subs	r4, r4, r3
            *p++ = sep[i];
 8027aa8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8027aac:	2020      	movs	r0, #32
 8027aae:	e016      	b.n	8027ade <mbedtls_x509_crt_info+0x31a>
            *p = '\0';
 8027ab0:	2300      	movs	r3, #0
 8027ab2:	702b      	strb	r3, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8027ab4:	481c      	ldr	r0, [pc, #112]	; (8027b28 <mbedtls_x509_crt_info+0x364>)
 8027ab6:	e7d0      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
            *p++ = cur->buf.p[i];
 8027ab8:	6891      	ldr	r1, [r2, #8]
 8027aba:	5cc9      	ldrb	r1, [r1, r3]
 8027abc:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
 8027ac0:	3301      	adds	r3, #1
 8027ac2:	6851      	ldr	r1, [r2, #4]
 8027ac4:	428b      	cmp	r3, r1
 8027ac6:	d3f7      	bcc.n	8027ab8 <mbedtls_x509_crt_info+0x2f4>
        cur = cur->next;
 8027ac8:	68d2      	ldr	r2, [r2, #12]
    while( cur != NULL )
 8027aca:	b16a      	cbz	r2, 8027ae8 <mbedtls_x509_crt_info+0x324>
        if( cur->buf.len + sep_len >= n )
 8027acc:	6853      	ldr	r3, [r2, #4]
 8027ace:	3302      	adds	r3, #2
 8027ad0:	429c      	cmp	r4, r3
 8027ad2:	d9ed      	bls.n	8027ab0 <mbedtls_x509_crt_info+0x2ec>
        n -= cur->buf.len + sep_len;
 8027ad4:	1ae4      	subs	r4, r4, r3
            *p++ = sep[i];
 8027ad6:	f885 c000 	strb.w	ip, [r5]
 8027ada:	7068      	strb	r0, [r5, #1]
        for( i = 0; i < sep_len; i++ )
 8027adc:	3502      	adds	r5, #2
        for( i = 0; i < cur->buf.len; i++ )
 8027ade:	6853      	ldr	r3, [r2, #4]
 8027ae0:	2b00      	cmp	r3, #0
 8027ae2:	d0f1      	beq.n	8027ac8 <mbedtls_x509_crt_info+0x304>
 8027ae4:	2300      	movs	r3, #0
 8027ae6:	e7e7      	b.n	8027ab8 <mbedtls_x509_crt_info+0x2f4>
    *p = '\0';
 8027ae8:	2300      	movs	r3, #0
 8027aea:	702b      	strb	r3, [r5, #0]
    return( 0 );
 8027aec:	e781      	b.n	80279f2 <mbedtls_x509_crt_info+0x22e>
 8027aee:	bf00      	nop
 8027af0:	08036298 	.word	0x08036298
 8027af4:	080362b4 	.word	0x080362b4
 8027af8:	080362cc 	.word	0x080362cc
 8027afc:	080362e4 	.word	0x080362e4
 8027b00:	080362fc 	.word	0x080362fc
 8027b04:	08036334 	.word	0x08036334
 8027b08:	0803636c 	.word	0x0803636c
 8027b0c:	08036384 	.word	0x08036384
 8027b10:	08036268 	.word	0x08036268
 8027b14:	08036270 	.word	0x08036270
 8027b18:	08036398 	.word	0x08036398
 8027b1c:	08036524 	.word	0x08036524
 8027b20:	08031bb8 	.word	0x08031bb8
 8027b24:	08036278 	.word	0x08036278
 8027b28:	ffffd680 	.word	0xffffd680
 8027b2c:	080363b8 	.word	0x080363b8
 8027b30:	080363cc 	.word	0x080363cc
 8027b34:	08032204 	.word	0x08032204
 8027b38:	08036258 	.word	0x08036258
 8027b3c:	08036238 	.word	0x08036238
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8027b40:	463b      	mov	r3, r7
 8027b42:	4ac9      	ldr	r2, [pc, #804]	; (8027e68 <mbedtls_x509_crt_info+0x6a4>)
 8027b44:	4621      	mov	r1, r4
 8027b46:	4628      	mov	r0, r5
 8027b48:	f003 f9cc 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027b4c:	2800      	cmp	r0, #0
 8027b4e:	f2c0 81e3 	blt.w	8027f18 <mbedtls_x509_crt_info+0x754>
 8027b52:	42a0      	cmp	r0, r4
 8027b54:	f080 81e2 	bcs.w	8027f1c <mbedtls_x509_crt_info+0x758>
 8027b58:	1a24      	subs	r4, r4, r0
 8027b5a:	4405      	add	r5, r0
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8027b5c:	f896 9118 	ldrb.w	r9, [r6, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8027b60:	f996 3118 	ldrsb.w	r3, [r6, #280]	; 0x118
 8027b64:	2b00      	cmp	r3, #0
 8027b66:	db24      	blt.n	8027bb2 <mbedtls_x509_crt_info+0x3ee>
    const char *sep = "";
 8027b68:	4bc0      	ldr	r3, [pc, #768]	; (8027e6c <mbedtls_x509_crt_info+0x6a8>)
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8027b6a:	f019 0f40 	tst.w	r9, #64	; 0x40
 8027b6e:	d130      	bne.n	8027bd2 <mbedtls_x509_crt_info+0x40e>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8027b70:	f019 0f20 	tst.w	r9, #32
 8027b74:	d13c      	bne.n	8027bf0 <mbedtls_x509_crt_info+0x42c>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8027b76:	f019 0f10 	tst.w	r9, #16
 8027b7a:	d148      	bne.n	8027c0e <mbedtls_x509_crt_info+0x44a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8027b7c:	f019 0f08 	tst.w	r9, #8
 8027b80:	d154      	bne.n	8027c2c <mbedtls_x509_crt_info+0x468>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8027b82:	f019 0f04 	tst.w	r9, #4
 8027b86:	d160      	bne.n	8027c4a <mbedtls_x509_crt_info+0x486>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8027b88:	f019 0f02 	tst.w	r9, #2
 8027b8c:	d16c      	bne.n	8027c68 <mbedtls_x509_crt_info+0x4a4>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8027b8e:	f019 0f01 	tst.w	r9, #1
 8027b92:	f43f af34 	beq.w	80279fe <mbedtls_x509_crt_info+0x23a>
 8027b96:	4ab6      	ldr	r2, [pc, #728]	; (8027e70 <mbedtls_x509_crt_info+0x6ac>)
 8027b98:	4621      	mov	r1, r4
 8027b9a:	4628      	mov	r0, r5
 8027b9c:	f003 f9a2 	bl	802aee4 <sniprintf>
 8027ba0:	2800      	cmp	r0, #0
 8027ba2:	f2c0 81cd 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027ba6:	4284      	cmp	r4, r0
 8027ba8:	f240 81ca 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027bac:	1a24      	subs	r4, r4, r0
 8027bae:	4405      	add	r5, r0
 8027bb0:	e725      	b.n	80279fe <mbedtls_x509_crt_info+0x23a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8027bb2:	4bae      	ldr	r3, [pc, #696]	; (8027e6c <mbedtls_x509_crt_info+0x6a8>)
 8027bb4:	4aaf      	ldr	r2, [pc, #700]	; (8027e74 <mbedtls_x509_crt_info+0x6b0>)
 8027bb6:	4621      	mov	r1, r4
 8027bb8:	4628      	mov	r0, r5
 8027bba:	f003 f993 	bl	802aee4 <sniprintf>
 8027bbe:	2800      	cmp	r0, #0
 8027bc0:	f2c0 81be 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027bc4:	4284      	cmp	r4, r0
 8027bc6:	f240 81bb 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027bca:	1a24      	subs	r4, r4, r0
 8027bcc:	4405      	add	r5, r0
 8027bce:	4baa      	ldr	r3, [pc, #680]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027bd0:	e7cb      	b.n	8027b6a <mbedtls_x509_crt_info+0x3a6>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8027bd2:	4aaa      	ldr	r2, [pc, #680]	; (8027e7c <mbedtls_x509_crt_info+0x6b8>)
 8027bd4:	4621      	mov	r1, r4
 8027bd6:	4628      	mov	r0, r5
 8027bd8:	f003 f984 	bl	802aee4 <sniprintf>
 8027bdc:	2800      	cmp	r0, #0
 8027bde:	f2c0 81af 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027be2:	4284      	cmp	r4, r0
 8027be4:	f240 81ac 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027be8:	1a24      	subs	r4, r4, r0
 8027bea:	4405      	add	r5, r0
 8027bec:	4ba2      	ldr	r3, [pc, #648]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027bee:	e7bf      	b.n	8027b70 <mbedtls_x509_crt_info+0x3ac>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8027bf0:	4aa3      	ldr	r2, [pc, #652]	; (8027e80 <mbedtls_x509_crt_info+0x6bc>)
 8027bf2:	4621      	mov	r1, r4
 8027bf4:	4628      	mov	r0, r5
 8027bf6:	f003 f975 	bl	802aee4 <sniprintf>
 8027bfa:	2800      	cmp	r0, #0
 8027bfc:	f2c0 81a0 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c00:	4284      	cmp	r4, r0
 8027c02:	f240 819d 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c06:	1a24      	subs	r4, r4, r0
 8027c08:	4405      	add	r5, r0
 8027c0a:	4b9b      	ldr	r3, [pc, #620]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027c0c:	e7b3      	b.n	8027b76 <mbedtls_x509_crt_info+0x3b2>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8027c0e:	4a9d      	ldr	r2, [pc, #628]	; (8027e84 <mbedtls_x509_crt_info+0x6c0>)
 8027c10:	4621      	mov	r1, r4
 8027c12:	4628      	mov	r0, r5
 8027c14:	f003 f966 	bl	802aee4 <sniprintf>
 8027c18:	2800      	cmp	r0, #0
 8027c1a:	f2c0 8191 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c1e:	4284      	cmp	r4, r0
 8027c20:	f240 818e 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c24:	1a24      	subs	r4, r4, r0
 8027c26:	4405      	add	r5, r0
 8027c28:	4b93      	ldr	r3, [pc, #588]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027c2a:	e7a7      	b.n	8027b7c <mbedtls_x509_crt_info+0x3b8>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8027c2c:	4a96      	ldr	r2, [pc, #600]	; (8027e88 <mbedtls_x509_crt_info+0x6c4>)
 8027c2e:	4621      	mov	r1, r4
 8027c30:	4628      	mov	r0, r5
 8027c32:	f003 f957 	bl	802aee4 <sniprintf>
 8027c36:	2800      	cmp	r0, #0
 8027c38:	f2c0 8182 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c3c:	4284      	cmp	r4, r0
 8027c3e:	f240 817f 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c42:	1a24      	subs	r4, r4, r0
 8027c44:	4405      	add	r5, r0
 8027c46:	4b8c      	ldr	r3, [pc, #560]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027c48:	e79b      	b.n	8027b82 <mbedtls_x509_crt_info+0x3be>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8027c4a:	4a90      	ldr	r2, [pc, #576]	; (8027e8c <mbedtls_x509_crt_info+0x6c8>)
 8027c4c:	4621      	mov	r1, r4
 8027c4e:	4628      	mov	r0, r5
 8027c50:	f003 f948 	bl	802aee4 <sniprintf>
 8027c54:	2800      	cmp	r0, #0
 8027c56:	f2c0 8173 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c5a:	4284      	cmp	r4, r0
 8027c5c:	f240 8170 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c60:	1a24      	subs	r4, r4, r0
 8027c62:	4405      	add	r5, r0
 8027c64:	4b84      	ldr	r3, [pc, #528]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027c66:	e78f      	b.n	8027b88 <mbedtls_x509_crt_info+0x3c4>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8027c68:	4a89      	ldr	r2, [pc, #548]	; (8027e90 <mbedtls_x509_crt_info+0x6cc>)
 8027c6a:	4621      	mov	r1, r4
 8027c6c:	4628      	mov	r0, r5
 8027c6e:	f003 f939 	bl	802aee4 <sniprintf>
 8027c72:	2800      	cmp	r0, #0
 8027c74:	f2c0 8164 	blt.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c78:	4284      	cmp	r4, r0
 8027c7a:	f240 8161 	bls.w	8027f40 <mbedtls_x509_crt_info+0x77c>
 8027c7e:	1a24      	subs	r4, r4, r0
 8027c80:	4405      	add	r5, r0
 8027c82:	4b7d      	ldr	r3, [pc, #500]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027c84:	e783      	b.n	8027b8e <mbedtls_x509_crt_info+0x3ca>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8027c86:	463b      	mov	r3, r7
 8027c88:	4a82      	ldr	r2, [pc, #520]	; (8027e94 <mbedtls_x509_crt_info+0x6d0>)
 8027c8a:	4621      	mov	r1, r4
 8027c8c:	4628      	mov	r0, r5
 8027c8e:	f003 f929 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027c92:	2800      	cmp	r0, #0
 8027c94:	f2c0 8144 	blt.w	8027f20 <mbedtls_x509_crt_info+0x75c>
 8027c98:	42a0      	cmp	r0, r4
 8027c9a:	f080 8143 	bcs.w	8027f24 <mbedtls_x509_crt_info+0x760>
 8027c9e:	1a24      	subs	r4, r4, r0
 8027ca0:	4405      	add	r5, r0
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8027ca2:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8027ca6:	f019 0f80 	tst.w	r9, #128	; 0x80
 8027caa:	d127      	bne.n	8027cfc <mbedtls_x509_crt_info+0x538>
    const char *sep = "";
 8027cac:	4b6f      	ldr	r3, [pc, #444]	; (8027e6c <mbedtls_x509_crt_info+0x6a8>)
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8027cae:	f019 0f40 	tst.w	r9, #64	; 0x40
 8027cb2:	d133      	bne.n	8027d1c <mbedtls_x509_crt_info+0x558>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8027cb4:	f019 0f20 	tst.w	r9, #32
 8027cb8:	d13f      	bne.n	8027d3a <mbedtls_x509_crt_info+0x576>
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8027cba:	f019 0f10 	tst.w	r9, #16
 8027cbe:	d14b      	bne.n	8027d58 <mbedtls_x509_crt_info+0x594>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8027cc0:	f019 0f08 	tst.w	r9, #8
 8027cc4:	d157      	bne.n	8027d76 <mbedtls_x509_crt_info+0x5b2>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8027cc6:	f019 0f04 	tst.w	r9, #4
 8027cca:	d163      	bne.n	8027d94 <mbedtls_x509_crt_info+0x5d0>
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8027ccc:	f019 0f02 	tst.w	r9, #2
 8027cd0:	d16f      	bne.n	8027db2 <mbedtls_x509_crt_info+0x5ee>
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8027cd2:	f019 0f01 	tst.w	r9, #1
 8027cd6:	d17b      	bne.n	8027dd0 <mbedtls_x509_crt_info+0x60c>
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8027cd8:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8027cdc:	f43f ae95 	beq.w	8027a0a <mbedtls_x509_crt_info+0x246>
 8027ce0:	4a6d      	ldr	r2, [pc, #436]	; (8027e98 <mbedtls_x509_crt_info+0x6d4>)
 8027ce2:	4621      	mov	r1, r4
 8027ce4:	4628      	mov	r0, r5
 8027ce6:	f003 f8fd 	bl	802aee4 <sniprintf>
 8027cea:	2800      	cmp	r0, #0
 8027cec:	f2c0 8126 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027cf0:	4284      	cmp	r4, r0
 8027cf2:	f240 8123 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027cf6:	1a24      	subs	r4, r4, r0
 8027cf8:	4405      	add	r5, r0
 8027cfa:	e686      	b.n	8027a0a <mbedtls_x509_crt_info+0x246>
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8027cfc:	4b5b      	ldr	r3, [pc, #364]	; (8027e6c <mbedtls_x509_crt_info+0x6a8>)
 8027cfe:	4a67      	ldr	r2, [pc, #412]	; (8027e9c <mbedtls_x509_crt_info+0x6d8>)
 8027d00:	4621      	mov	r1, r4
 8027d02:	4628      	mov	r0, r5
 8027d04:	f003 f8ee 	bl	802aee4 <sniprintf>
 8027d08:	2800      	cmp	r0, #0
 8027d0a:	f2c0 8117 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d0e:	4284      	cmp	r4, r0
 8027d10:	f240 8114 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d14:	1a24      	subs	r4, r4, r0
 8027d16:	4405      	add	r5, r0
 8027d18:	4b57      	ldr	r3, [pc, #348]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027d1a:	e7c8      	b.n	8027cae <mbedtls_x509_crt_info+0x4ea>
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8027d1c:	4a60      	ldr	r2, [pc, #384]	; (8027ea0 <mbedtls_x509_crt_info+0x6dc>)
 8027d1e:	4621      	mov	r1, r4
 8027d20:	4628      	mov	r0, r5
 8027d22:	f003 f8df 	bl	802aee4 <sniprintf>
 8027d26:	2800      	cmp	r0, #0
 8027d28:	f2c0 8108 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d2c:	4284      	cmp	r4, r0
 8027d2e:	f240 8105 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d32:	1a24      	subs	r4, r4, r0
 8027d34:	4405      	add	r5, r0
 8027d36:	4b50      	ldr	r3, [pc, #320]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027d38:	e7bc      	b.n	8027cb4 <mbedtls_x509_crt_info+0x4f0>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8027d3a:	4a5a      	ldr	r2, [pc, #360]	; (8027ea4 <mbedtls_x509_crt_info+0x6e0>)
 8027d3c:	4621      	mov	r1, r4
 8027d3e:	4628      	mov	r0, r5
 8027d40:	f003 f8d0 	bl	802aee4 <sniprintf>
 8027d44:	2800      	cmp	r0, #0
 8027d46:	f2c0 80f9 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d4a:	4284      	cmp	r4, r0
 8027d4c:	f240 80f6 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d50:	1a24      	subs	r4, r4, r0
 8027d52:	4405      	add	r5, r0
 8027d54:	4b48      	ldr	r3, [pc, #288]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027d56:	e7b0      	b.n	8027cba <mbedtls_x509_crt_info+0x4f6>
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8027d58:	4a53      	ldr	r2, [pc, #332]	; (8027ea8 <mbedtls_x509_crt_info+0x6e4>)
 8027d5a:	4621      	mov	r1, r4
 8027d5c:	4628      	mov	r0, r5
 8027d5e:	f003 f8c1 	bl	802aee4 <sniprintf>
 8027d62:	2800      	cmp	r0, #0
 8027d64:	f2c0 80ea 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d68:	4284      	cmp	r4, r0
 8027d6a:	f240 80e7 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d6e:	1a24      	subs	r4, r4, r0
 8027d70:	4405      	add	r5, r0
 8027d72:	4b41      	ldr	r3, [pc, #260]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027d74:	e7a4      	b.n	8027cc0 <mbedtls_x509_crt_info+0x4fc>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8027d76:	4a4d      	ldr	r2, [pc, #308]	; (8027eac <mbedtls_x509_crt_info+0x6e8>)
 8027d78:	4621      	mov	r1, r4
 8027d7a:	4628      	mov	r0, r5
 8027d7c:	f003 f8b2 	bl	802aee4 <sniprintf>
 8027d80:	2800      	cmp	r0, #0
 8027d82:	f2c0 80db 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d86:	4284      	cmp	r4, r0
 8027d88:	f240 80d8 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027d8c:	1a24      	subs	r4, r4, r0
 8027d8e:	4405      	add	r5, r0
 8027d90:	4b39      	ldr	r3, [pc, #228]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027d92:	e798      	b.n	8027cc6 <mbedtls_x509_crt_info+0x502>
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8027d94:	4a46      	ldr	r2, [pc, #280]	; (8027eb0 <mbedtls_x509_crt_info+0x6ec>)
 8027d96:	4621      	mov	r1, r4
 8027d98:	4628      	mov	r0, r5
 8027d9a:	f003 f8a3 	bl	802aee4 <sniprintf>
 8027d9e:	2800      	cmp	r0, #0
 8027da0:	f2c0 80cc 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027da4:	4284      	cmp	r4, r0
 8027da6:	f240 80c9 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027daa:	1a24      	subs	r4, r4, r0
 8027dac:	4405      	add	r5, r0
 8027dae:	4b32      	ldr	r3, [pc, #200]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027db0:	e78c      	b.n	8027ccc <mbedtls_x509_crt_info+0x508>
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8027db2:	4a40      	ldr	r2, [pc, #256]	; (8027eb4 <mbedtls_x509_crt_info+0x6f0>)
 8027db4:	4621      	mov	r1, r4
 8027db6:	4628      	mov	r0, r5
 8027db8:	f003 f894 	bl	802aee4 <sniprintf>
 8027dbc:	2800      	cmp	r0, #0
 8027dbe:	f2c0 80bd 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027dc2:	4284      	cmp	r4, r0
 8027dc4:	f240 80ba 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027dc8:	1a24      	subs	r4, r4, r0
 8027dca:	4405      	add	r5, r0
 8027dcc:	4b2a      	ldr	r3, [pc, #168]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027dce:	e780      	b.n	8027cd2 <mbedtls_x509_crt_info+0x50e>
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8027dd0:	4a39      	ldr	r2, [pc, #228]	; (8027eb8 <mbedtls_x509_crt_info+0x6f4>)
 8027dd2:	4621      	mov	r1, r4
 8027dd4:	4628      	mov	r0, r5
 8027dd6:	f003 f885 	bl	802aee4 <sniprintf>
 8027dda:	2800      	cmp	r0, #0
 8027ddc:	f2c0 80ae 	blt.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027de0:	4284      	cmp	r4, r0
 8027de2:	f240 80ab 	bls.w	8027f3c <mbedtls_x509_crt_info+0x778>
 8027de6:	1a24      	subs	r4, r4, r0
 8027de8:	4405      	add	r5, r0
 8027dea:	4b23      	ldr	r3, [pc, #140]	; (8027e78 <mbedtls_x509_crt_info+0x6b4>)
 8027dec:	e774      	b.n	8027cd8 <mbedtls_x509_crt_info+0x514>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8027dee:	9b06      	ldr	r3, [sp, #24]
 8027df0:	9300      	str	r3, [sp, #0]
 8027df2:	465b      	mov	r3, fp
 8027df4:	463a      	mov	r2, r7
 8027df6:	4621      	mov	r1, r4
 8027df8:	4628      	mov	r0, r5
 8027dfa:	f003 f873 	bl	802aee4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027dfe:	2800      	cmp	r0, #0
 8027e00:	f2c0 809a 	blt.w	8027f38 <mbedtls_x509_crt_info+0x774>
 8027e04:	4284      	cmp	r4, r0
 8027e06:	f240 8097 	bls.w	8027f38 <mbedtls_x509_crt_info+0x774>
 8027e0a:	1a24      	subs	r4, r4, r0
 8027e0c:	4405      	add	r5, r0
        cur = cur->next;
 8027e0e:	68f6      	ldr	r6, [r6, #12]
        sep = ", ";
 8027e10:	46cb      	mov	fp, r9
    while( cur != NULL )
 8027e12:	b146      	cbz	r6, 8027e26 <mbedtls_x509_crt_info+0x662>
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8027e14:	a906      	add	r1, sp, #24
 8027e16:	4630      	mov	r0, r6
 8027e18:	f7f1 ffde 	bl	8019dd8 <mbedtls_oid_get_extended_key_usage>
 8027e1c:	2800      	cmp	r0, #0
 8027e1e:	d0e6      	beq.n	8027dee <mbedtls_x509_crt_info+0x62a>
            desc = "???";
 8027e20:	f8cd a018 	str.w	sl, [sp, #24]
 8027e24:	e7e3      	b.n	8027dee <mbedtls_x509_crt_info+0x62a>
    ret = mbedtls_snprintf( p, n, "\n" );
 8027e26:	4a25      	ldr	r2, [pc, #148]	; (8027ebc <mbedtls_x509_crt_info+0x6f8>)
 8027e28:	4621      	mov	r1, r4
 8027e2a:	4628      	mov	r0, r5
 8027e2c:	f003 f85a 	bl	802aee4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e30:	2800      	cmp	r0, #0
 8027e32:	db7d      	blt.n	8027f30 <mbedtls_x509_crt_info+0x76c>
 8027e34:	42a0      	cmp	r0, r4
 8027e36:	d27d      	bcs.n	8027f34 <mbedtls_x509_crt_info+0x770>
    return( (int) ( size - n ) );
 8027e38:	1b00      	subs	r0, r0, r4
 8027e3a:	4440      	add	r0, r8
 8027e3c:	e60d      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027e3e:	4820      	ldr	r0, [pc, #128]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e40:	e60b      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e42:	481f      	ldr	r0, [pc, #124]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e44:	e609      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027e46:	481e      	ldr	r0, [pc, #120]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e48:	e607      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e4a:	481d      	ldr	r0, [pc, #116]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e4c:	e605      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027e4e:	481c      	ldr	r0, [pc, #112]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e50:	e603      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e52:	481b      	ldr	r0, [pc, #108]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e54:	e601      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027e56:	481a      	ldr	r0, [pc, #104]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e58:	e5ff      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e5a:	4819      	ldr	r0, [pc, #100]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e5c:	e5fd      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027e5e:	4818      	ldr	r0, [pc, #96]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e60:	e5fb      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027e62:	4817      	ldr	r0, [pc, #92]	; (8027ec0 <mbedtls_x509_crt_info+0x6fc>)
 8027e64:	e5f9      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027e66:	bf00      	nop
 8027e68:	080363e4 	.word	0x080363e4
 8027e6c:	08032204 	.word	0x08032204
 8027e70:	0803645c 	.word	0x0803645c
 8027e74:	080363fc 	.word	0x080363fc
 8027e78:	08036238 	.word	0x08036238
 8027e7c:	0803640c 	.word	0x0803640c
 8027e80:	0803641c 	.word	0x0803641c
 8027e84:	08036424 	.word	0x08036424
 8027e88:	08036438 	.word	0x08036438
 8027e8c:	08036444 	.word	0x08036444
 8027e90:	08036450 	.word	0x08036450
 8027e94:	08036470 	.word	0x08036470
 8027e98:	08036514 	.word	0x08036514
 8027e9c:	08036488 	.word	0x08036488
 8027ea0:	0803649c 	.word	0x0803649c
 8027ea4:	080364b0 	.word	0x080364b0
 8027ea8:	080364c4 	.word	0x080364c4
 8027eac:	080364d8 	.word	0x080364d8
 8027eb0:	080364e8 	.word	0x080364e8
 8027eb4:	080364f8 	.word	0x080364f8
 8027eb8:	08036504 	.word	0x08036504
 8027ebc:	080322d4 	.word	0x080322d4
 8027ec0:	ffffd680 	.word	0xffffd680
 8027ec4:	481f      	ldr	r0, [pc, #124]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ec6:	e5c8      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ec8:	481e      	ldr	r0, [pc, #120]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027eca:	e5c6      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027ecc:	481d      	ldr	r0, [pc, #116]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ece:	e5c4      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ed0:	481c      	ldr	r0, [pc, #112]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ed2:	e5c2      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027ed4:	481b      	ldr	r0, [pc, #108]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ed6:	e5c0      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ed8:	481a      	ldr	r0, [pc, #104]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027eda:	e5be      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027edc:	4819      	ldr	r0, [pc, #100]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ede:	e5bc      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ee0:	4818      	ldr	r0, [pc, #96]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ee2:	e5ba      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027ee4:	4817      	ldr	r0, [pc, #92]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ee6:	e5b8      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ee8:	4816      	ldr	r0, [pc, #88]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027eea:	e5b6      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027eec:	4815      	ldr	r0, [pc, #84]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027eee:	e5b4      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ef0:	4814      	ldr	r0, [pc, #80]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ef2:	e5b2      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027ef4:	4813      	ldr	r0, [pc, #76]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027ef6:	e5b0      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027ef8:	4812      	ldr	r0, [pc, #72]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027efa:	e5ae      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027efc:	4811      	ldr	r0, [pc, #68]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027efe:	e5ac      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f00:	4810      	ldr	r0, [pc, #64]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f02:	e5aa      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f04:	480f      	ldr	r0, [pc, #60]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f06:	e5a8      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8027f08:	480e      	ldr	r0, [pc, #56]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f0a:	e5a6      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f0c:	480d      	ldr	r0, [pc, #52]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f0e:	e5a4      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f10:	480c      	ldr	r0, [pc, #48]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f12:	e5a2      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f14:	480b      	ldr	r0, [pc, #44]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f16:	e5a0      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f18:	480a      	ldr	r0, [pc, #40]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f1a:	e59e      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f1c:	4809      	ldr	r0, [pc, #36]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f1e:	e59c      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f20:	4808      	ldr	r0, [pc, #32]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f22:	e59a      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f24:	4807      	ldr	r0, [pc, #28]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f26:	e598      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f28:	4806      	ldr	r0, [pc, #24]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f2a:	e596      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f2c:	4805      	ldr	r0, [pc, #20]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f2e:	e594      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8027f30:	4804      	ldr	r0, [pc, #16]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f32:	e592      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f34:	4803      	ldr	r0, [pc, #12]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f36:	e590      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f38:	4802      	ldr	r0, [pc, #8]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f3a:	e58e      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f3c:	4801      	ldr	r0, [pc, #4]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f3e:	e58c      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8027f40:	4800      	ldr	r0, [pc, #0]	; (8027f44 <mbedtls_x509_crt_info+0x780>)
 8027f42:	e58a      	b.n	8027a5a <mbedtls_x509_crt_info+0x296>
 8027f44:	ffffd680 	.word	0xffffd680

08027f48 <mbedtls_x509_crt_verify_restartable>:
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy,
                     mbedtls_x509_crt_restart_ctx *rs_ctx )
{
 8027f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f4c:	b0b9      	sub	sp, #228	; 0xe4
 8027f4e:	4683      	mov	fp, r0
 8027f50:	9105      	str	r1, [sp, #20]
 8027f52:	461f      	mov	r7, r3
 8027f54:	9d42      	ldr	r5, [sp, #264]	; 0x108
    int ret;
    mbedtls_pk_type_t pk_type;
    mbedtls_x509_crt_verify_chain ver_chain;
    uint32_t ee_flags;

    *flags = 0;
 8027f56:	2300      	movs	r3, #0
 8027f58:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8027f5a:	6013      	str	r3, [r2, #0]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 8027f5c:	f10d 0a8c 	add.w	sl, sp, #140	; 0x8c
 8027f60:	a837      	add	r0, sp, #220	; 0xdc
    *flags = 0;
 8027f62:	4653      	mov	r3, sl
        ver_chain->items[i].crt = NULL;
 8027f64:	2100      	movs	r1, #0
        ver_chain->items[i].flags = (uint32_t) -1;
 8027f66:	f04f 32ff 	mov.w	r2, #4294967295
        ver_chain->items[i].crt = NULL;
 8027f6a:	6019      	str	r1, [r3, #0]
        ver_chain->items[i].flags = (uint32_t) -1;
 8027f6c:	605a      	str	r2, [r3, #4]
    for( i = 0; i < MBEDTLS_X509_MAX_VERIFY_CHAIN_SIZE; i++ )
 8027f6e:	3308      	adds	r3, #8
 8027f70:	4283      	cmp	r3, r0
 8027f72:	d1fa      	bne.n	8027f6a <mbedtls_x509_crt_verify_restartable+0x22>
    ee_flags = 0;
    x509_crt_verify_chain_reset( &ver_chain );

    if( profile == NULL )
 8027f74:	2f00      	cmp	r7, #0
 8027f76:	f000 81c0 	beq.w	80282fa <mbedtls_x509_crt_verify_restartable+0x3b2>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    /* check name if requested */
    if( cn != NULL )
 8027f7a:	2d00      	cmp	r5, #0
 8027f7c:	d03d      	beq.n	8027ffa <mbedtls_x509_crt_verify_restartable+0xb2>
    size_t cn_len = strlen( cn );
 8027f7e:	4628      	mov	r0, r5
 8027f80:	f7d8 f940 	bl	8000204 <strlen>
 8027f84:	4606      	mov	r6, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8027f86:	f8db 30f8 	ldr.w	r3, [fp, #248]	; 0xf8
 8027f8a:	f013 0f20 	tst.w	r3, #32
 8027f8e:	d013      	beq.n	8027fb8 <mbedtls_x509_crt_verify_restartable+0x70>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 8027f90:	f10b 04e8 	add.w	r4, fp, #232	; 0xe8
            if( x509_crt_check_cn( &cur->buf, cn, cn_len ) == 0 )
 8027f94:	4632      	mov	r2, r6
 8027f96:	4629      	mov	r1, r5
 8027f98:	4620      	mov	r0, r4
 8027f9a:	f7ff fbc9 	bl	8027730 <x509_crt_check_cn>
 8027f9e:	b128      	cbz	r0, 8027fac <mbedtls_x509_crt_verify_restartable+0x64>
        for( cur = &crt->subject_alt_names; cur != NULL; cur = cur->next )
 8027fa0:	68e4      	ldr	r4, [r4, #12]
 8027fa2:	2c00      	cmp	r4, #0
 8027fa4:	d1f6      	bne.n	8027f94 <mbedtls_x509_crt_verify_restartable+0x4c>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8027fa6:	2304      	movs	r3, #4
 8027fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8027faa:	e028      	b.n	8027ffe <mbedtls_x509_crt_verify_restartable+0xb6>
 8027fac:	2c00      	cmp	r4, #0
 8027fae:	bf14      	ite	ne
 8027fb0:	2300      	movne	r3, #0
 8027fb2:	2304      	moveq	r3, #4
 8027fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8027fb6:	e022      	b.n	8027ffe <mbedtls_x509_crt_verify_restartable+0xb6>
        for( name = &crt->subject; name != NULL; name = name->next )
 8027fb8:	f10b 046c 	add.w	r4, fp, #108	; 0x6c
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027fbc:	f8df 83a8 	ldr.w	r8, [pc, #936]	; 8028368 <mbedtls_x509_crt_verify_restartable+0x420>
 8027fc0:	f04f 0903 	mov.w	r9, #3
 8027fc4:	e001      	b.n	8027fca <mbedtls_x509_crt_verify_restartable+0x82>
        for( name = &crt->subject; name != NULL; name = name->next )
 8027fc6:	69a4      	ldr	r4, [r4, #24]
 8027fc8:	b1a4      	cbz	r4, 8027ff4 <mbedtls_x509_crt_verify_restartable+0xac>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027fca:	6863      	ldr	r3, [r4, #4]
 8027fcc:	2b03      	cmp	r3, #3
 8027fce:	d1fa      	bne.n	8027fc6 <mbedtls_x509_crt_verify_restartable+0x7e>
 8027fd0:	464a      	mov	r2, r9
 8027fd2:	68a1      	ldr	r1, [r4, #8]
 8027fd4:	4640      	mov	r0, r8
 8027fd6:	f002 faa2 	bl	802a51e <memcmp>
 8027fda:	2800      	cmp	r0, #0
 8027fdc:	d1f3      	bne.n	8027fc6 <mbedtls_x509_crt_verify_restartable+0x7e>
                x509_crt_check_cn( &name->val, cn, cn_len ) == 0 )
 8027fde:	4632      	mov	r2, r6
 8027fe0:	4629      	mov	r1, r5
 8027fe2:	f104 000c 	add.w	r0, r4, #12
 8027fe6:	f7ff fba3 	bl	8027730 <x509_crt_check_cn>
            if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 &&
 8027fea:	2800      	cmp	r0, #0
 8027fec:	d1eb      	bne.n	8027fc6 <mbedtls_x509_crt_verify_restartable+0x7e>
    ee_flags = 0;
 8027fee:	2300      	movs	r3, #0
 8027ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8027ff2:	e004      	b.n	8027ffe <mbedtls_x509_crt_verify_restartable+0xb6>
            *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8027ff4:	2304      	movs	r3, #4
 8027ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8027ff8:	e001      	b.n	8027ffe <mbedtls_x509_crt_verify_restartable+0xb6>
    ee_flags = 0;
 8027ffa:	2300      	movs	r3, #0
 8027ffc:	930a      	str	r3, [sp, #40]	; 0x28
        x509_crt_verify_name( crt, cn, &ee_flags );

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8027ffe:	f10b 04bc 	add.w	r4, fp, #188	; 0xbc
 8028002:	4620      	mov	r0, r4
 8028004:	f7f2 f9ac 	bl	801a360 <mbedtls_pk_get_type>
    if( pk_alg == MBEDTLS_PK_NONE )
 8028008:	b130      	cbz	r0, 8028018 <mbedtls_x509_crt_verify_restartable+0xd0>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 802800a:	1e43      	subs	r3, r0, #1
 802800c:	2201      	movs	r2, #1
 802800e:	fa02 f303 	lsl.w	r3, r2, r3
 8028012:	687a      	ldr	r2, [r7, #4]

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
 8028014:	4213      	tst	r3, r2
 8028016:	d103      	bne.n	8028020 <mbedtls_x509_crt_verify_restartable+0xd8>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8028018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802801a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802801e:	930a      	str	r3, [sp, #40]	; 0x28

    if( x509_profile_check_key( profile, &crt->pk ) != 0 )
 8028020:	4621      	mov	r1, r4
 8028022:	4638      	mov	r0, r7
 8028024:	f7ff fb58 	bl	80276d8 <x509_profile_check_key>
 8028028:	b118      	cbz	r0, 8028032 <mbedtls_x509_crt_verify_restartable+0xea>
        ee_flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 802802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802802c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028030:	930a      	str	r3, [sp, #40]	; 0x28
    ver_chain->len = 0;
 8028032:	2300      	movs	r3, #0
 8028034:	9307      	str	r3, [sp, #28]
    self_cnt = 0;
 8028036:	9306      	str	r3, [sp, #24]
 8028038:	461d      	mov	r5, r3
 802803a:	46d0      	mov	r8, sl
 802803c:	465c      	mov	r4, fp
 802803e:	46b9      	mov	r9, r7
 8028040:	e0c1      	b.n	80281c6 <mbedtls_x509_crt_verify_restartable+0x27e>
            *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8028042:	f8da 3004 	ldr.w	r3, [sl, #4]
 8028046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802804a:	f8ca 3004 	str.w	r3, [sl, #4]
 802804e:	e0e7      	b.n	8028220 <mbedtls_x509_crt_verify_restartable+0x2d8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8028050:	f8da 3004 	ldr.w	r3, [sl, #4]
 8028054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8028058:	f8ca 3004 	str.w	r3, [sl, #4]
 802805c:	e0ee      	b.n	802823c <mbedtls_x509_crt_verify_restartable+0x2f4>
    if( x509_name_cmp( &crt->issuer, &crt->subject ) != 0 )
 802805e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8028062:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8028066:	f7ff fade 	bl	8027626 <x509_name_cmp>
 802806a:	b938      	cbnz	r0, 802807c <mbedtls_x509_crt_verify_restartable+0x134>
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 802806c:	9b05      	ldr	r3, [sp, #20]
 802806e:	461e      	mov	r6, r3
 8028070:	2b00      	cmp	r3, #0
 8028072:	f000 80e8 	beq.w	8028246 <mbedtls_x509_crt_verify_restartable+0x2fe>
        if( crt->raw.len == cur->raw.len &&
 8028076:	6867      	ldr	r7, [r4, #4]
    for( cur = trust_ca; cur != NULL; cur = cur->next )
 8028078:	9e05      	ldr	r6, [sp, #20]
 802807a:	e004      	b.n	8028086 <mbedtls_x509_crt_verify_restartable+0x13e>
 802807c:	9e05      	ldr	r6, [sp, #20]
 802807e:	e0e2      	b.n	8028246 <mbedtls_x509_crt_verify_restartable+0x2fe>
 8028080:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8028084:	b1ae      	cbz	r6, 80280b2 <mbedtls_x509_crt_verify_restartable+0x16a>
        if( crt->raw.len == cur->raw.len &&
 8028086:	6873      	ldr	r3, [r6, #4]
 8028088:	429f      	cmp	r7, r3
 802808a:	d1f9      	bne.n	8028080 <mbedtls_x509_crt_verify_restartable+0x138>
            memcmp( crt->raw.p, cur->raw.p, crt->raw.len ) == 0 )
 802808c:	463a      	mov	r2, r7
 802808e:	68b1      	ldr	r1, [r6, #8]
 8028090:	68a0      	ldr	r0, [r4, #8]
 8028092:	f002 fa44 	bl	802a51e <memcmp>
        if( crt->raw.len == cur->raw.len &&
 8028096:	2800      	cmp	r0, #0
 8028098:	d1f2      	bne.n	8028080 <mbedtls_x509_crt_verify_restartable+0x138>
 802809a:	46d9      	mov	r9, fp

    if( ret != 0 )
        goto exit;

    /* Merge end-entity flags */
    ver_chain.items[0].flags |= ee_flags;
 802809c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802809e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80280a0:	4313      	orrs	r3, r2
 80280a2:	9324      	str	r3, [sp, #144]	; 0x90
    for( i = ver_chain->len; i != 0; --i )
 80280a4:	ab23      	add	r3, sp, #140	; 0x8c
 80280a6:	eb03 04c9 	add.w	r4, r3, r9, lsl #3
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 80280aa:	464d      	mov	r5, r9
 80280ac:	9e43      	ldr	r6, [sp, #268]	; 0x10c
 80280ae:	9f44      	ldr	r7, [sp, #272]	; 0x110
 80280b0:	e10f      	b.n	80282d2 <mbedtls_x509_crt_verify_restartable+0x38a>
 80280b2:	9e05      	ldr	r6, [sp, #20]
 80280b4:	e0c7      	b.n	8028246 <mbedtls_x509_crt_verify_restartable+0x2fe>
        if( top && ! signature_is_good )
 80280b6:	2800      	cmp	r0, #0
 80280b8:	d057      	beq.n	802816a <mbedtls_x509_crt_verify_restartable+0x222>
 80280ba:	e003      	b.n	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
            if( fallback_parent == NULL )
 80280bc:	f1b9 0f00 	cmp.w	r9, #0
 80280c0:	f000 80ca 	beq.w	8028258 <mbedtls_x509_crt_verify_restartable+0x310>
    for( parent = candidates; parent != NULL; parent = parent->next )
 80280c4:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80280c8:	2e00      	cmp	r6, #0
 80280ca:	f000 811e 	beq.w	802830a <mbedtls_x509_crt_verify_restartable+0x3c2>
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80280ce:	f106 016c 	add.w	r1, r6, #108	; 0x6c
 80280d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80280d4:	f7ff faa7 	bl	8027626 <x509_name_cmp>
 80280d8:	2800      	cmp	r0, #0
 80280da:	d1f3      	bne.n	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
    if( top && parent->version < 3 )
 80280dc:	b117      	cbz	r7, 80280e4 <mbedtls_x509_crt_verify_restartable+0x19c>
 80280de:	69b3      	ldr	r3, [r6, #24]
 80280e0:	2b02      	cmp	r3, #2
 80280e2:	dd03      	ble.n	80280ec <mbedtls_x509_crt_verify_restartable+0x1a4>
        if( x509_crt_check_parent( child, parent, top ) != 0 )
 80280e4:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	d0eb      	beq.n	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
        if( parent->max_pathlen > 0 &&
 80280ec:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 80280f0:	2b00      	cmp	r3, #0
 80280f2:	dd04      	ble.n	80280fe <mbedtls_x509_crt_verify_restartable+0x1b6>
            (size_t) parent->max_pathlen < 1 + path_cnt - self_cnt )
 80280f4:	9a06      	ldr	r2, [sp, #24]
 80280f6:	ebaa 0202 	sub.w	r2, sl, r2
        if( parent->max_pathlen > 0 &&
 80280fa:	4293      	cmp	r3, r2
 80280fc:	d3e2      	bcc.n	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
    md_info = mbedtls_md_info_from_type( child->sig_md );
 80280fe:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8028102:	f7f0 fe97 	bl	8018e34 <mbedtls_md_info_from_type>
 8028106:	900e      	str	r0, [sp, #56]	; 0x38
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8028108:	ab13      	add	r3, sp, #76	; 0x4c
 802810a:	6922      	ldr	r2, [r4, #16]
 802810c:	6961      	ldr	r1, [r4, #20]
 802810e:	f7f0 ff21 	bl	8018f54 <mbedtls_md>
 8028112:	2800      	cmp	r0, #0
 8028114:	f040 8117 	bne.w	8028346 <mbedtls_x509_crt_verify_restartable+0x3fe>
    if( ! mbedtls_pk_can_do( &parent->pk, child->sig_pk ) )
 8028118:	f106 05bc 	add.w	r5, r6, #188	; 0xbc
 802811c:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8028120:	4628      	mov	r0, r5
 8028122:	f7f1 ffe7 	bl	801a0f4 <mbedtls_pk_can_do>
 8028126:	2800      	cmp	r0, #0
 8028128:	f000 8112 	beq.w	8028350 <mbedtls_x509_crt_verify_restartable+0x408>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 802812c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8028130:	930f      	str	r3, [sp, #60]	; 0x3c
 8028132:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
 8028136:	9210      	str	r2, [sp, #64]	; 0x40
 8028138:	f894 b128 	ldrb.w	fp, [r4, #296]	; 0x128
                child->sig_md, hash, mbedtls_md_get_size( md_info ),
 802813c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802813e:	f7f0 ffef 	bl	8019120 <mbedtls_md_get_size>
    return( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8028142:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8028146:	9303      	str	r3, [sp, #12]
 8028148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 802814c:	9302      	str	r3, [sp, #8]
 802814e:	9001      	str	r0, [sp, #4]
 8028150:	ab13      	add	r3, sp, #76	; 0x4c
 8028152:	9300      	str	r3, [sp, #0]
 8028154:	465b      	mov	r3, fp
 8028156:	462a      	mov	r2, r5
 8028158:	9910      	ldr	r1, [sp, #64]	; 0x40
 802815a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802815c:	f7f2 f886 	bl	801a26c <mbedtls_pk_verify_ext>
        signature_is_good = ret == 0;
 8028160:	fab0 f580 	clz	r5, r0
 8028164:	096d      	lsrs	r5, r5, #5
        if( top && ! signature_is_good )
 8028166:	2f00      	cmp	r7, #0
 8028168:	d1a5      	bne.n	80280b6 <mbedtls_x509_crt_verify_restartable+0x16e>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 802816a:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 802816e:	f7ff fa31 	bl	80275d4 <mbedtls_x509_time_is_past>
 8028172:	2800      	cmp	r0, #0
 8028174:	d1a2      	bne.n	80280bc <mbedtls_x509_crt_verify_restartable+0x174>
            mbedtls_x509_time_is_future( &parent->valid_from ) )
 8028176:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 802817a:	f7ff fa2d 	bl	80275d8 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &parent->valid_to ) ||
 802817e:	2800      	cmp	r0, #0
 8028180:	d19c      	bne.n	80280bc <mbedtls_x509_crt_verify_restartable+0x174>
 8028182:	46d3      	mov	fp, sl
 8028184:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028188:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        if( ver_chain->len != 1 &&
 802818c:	f1bb 0f01 	cmp.w	fp, #1
 8028190:	f040 8085 	bne.w	802829e <mbedtls_x509_crt_verify_restartable+0x356>
        if( ! signature_is_good )
 8028194:	b92d      	cbnz	r5, 80281a2 <mbedtls_x509_crt_verify_restartable+0x25a>
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8028196:	f8da 3004 	ldr.w	r3, [sl, #4]
 802819a:	f043 0308 	orr.w	r3, r3, #8
 802819e:	f8ca 3004 	str.w	r3, [sl, #4]
        if( x509_profile_check_key( profile, &parent->pk ) != 0 )
 80281a2:	f106 01bc 	add.w	r1, r6, #188	; 0xbc
 80281a6:	4648      	mov	r0, r9
 80281a8:	f7ff fa96 	bl	80276d8 <x509_profile_check_key>
 80281ac:	b128      	cbz	r0, 80281ba <mbedtls_x509_crt_verify_restartable+0x272>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80281ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80281b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80281b6:	f8ca 3004 	str.w	r3, [sl, #4]
 80281ba:	f108 0808 	add.w	r8, r8, #8
        ver_chain->len++;
 80281be:	f8cd b01c 	str.w	fp, [sp, #28]
 80281c2:	463d      	mov	r5, r7
 80281c4:	4634      	mov	r4, r6
        cur->crt = child;
 80281c6:	46c2      	mov	sl, r8
 80281c8:	f8c8 4000 	str.w	r4, [r8]
        cur->flags = 0;
 80281cc:	2300      	movs	r3, #0
 80281ce:	f8c8 3004 	str.w	r3, [r8, #4]
        ver_chain->len++;
 80281d2:	9b07      	ldr	r3, [sp, #28]
 80281d4:	f103 0b01 	add.w	fp, r3, #1
        if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80281d8:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80281dc:	f7ff f9fa 	bl	80275d4 <mbedtls_x509_time_is_past>
 80281e0:	b110      	cbz	r0, 80281e8 <mbedtls_x509_crt_verify_restartable+0x2a0>
            *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80281e2:	2301      	movs	r3, #1
 80281e4:	f8c8 3004 	str.w	r3, [r8, #4]
        if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80281e8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80281ec:	f7ff f9f4 	bl	80275d8 <mbedtls_x509_time_is_future>
 80281f0:	b128      	cbz	r0, 80281fe <mbedtls_x509_crt_verify_restartable+0x2b6>
            *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80281f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80281f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80281fa:	f8ca 3004 	str.w	r3, [sl, #4]
        if( child_is_trusted )
 80281fe:	2d00      	cmp	r5, #0
 8028200:	f040 8081 	bne.w	8028306 <mbedtls_x509_crt_verify_restartable+0x3be>
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8028204:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
    if( md_alg == MBEDTLS_MD_NONE )
 8028208:	2b00      	cmp	r3, #0
 802820a:	f43f af1a 	beq.w	8028042 <mbedtls_x509_crt_verify_restartable+0xfa>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802820e:	3b01      	subs	r3, #1
 8028210:	2201      	movs	r2, #1
 8028212:	fa02 f303 	lsl.w	r3, r2, r3
 8028216:	f8d9 2000 	ldr.w	r2, [r9]
        if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 802821a:	4213      	tst	r3, r2
 802821c:	f43f af11 	beq.w	8028042 <mbedtls_x509_crt_verify_restartable+0xfa>
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 8028220:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
    if( pk_alg == MBEDTLS_PK_NONE )
 8028224:	2b00      	cmp	r3, #0
 8028226:	f43f af13 	beq.w	8028050 <mbedtls_x509_crt_verify_restartable+0x108>
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 802822a:	3b01      	subs	r3, #1
 802822c:	2201      	movs	r2, #1
 802822e:	fa02 f303 	lsl.w	r3, r2, r3
 8028232:	f8d9 2004 	ldr.w	r2, [r9, #4]
        if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
 8028236:	4213      	tst	r3, r2
 8028238:	f43f af0a 	beq.w	8028050 <mbedtls_x509_crt_verify_restartable+0x108>
        if( ver_chain->len == 1 &&
 802823c:	f1bb 0f01 	cmp.w	fp, #1
 8028240:	f43f af0d 	beq.w	802805e <mbedtls_x509_crt_verify_restartable+0x116>
 8028244:	9e05      	ldr	r6, [sp, #20]
            if( fallback_parent == NULL )
 8028246:	2701      	movs	r7, #1
    for( parent = candidates; parent != NULL; parent = parent->next )
 8028248:	9509      	str	r5, [sp, #36]	; 0x24
 802824a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 802824e:	46da      	mov	sl, fp
 8028250:	46c3      	mov	fp, r8
 8028252:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8028256:	e061      	b.n	802831c <mbedtls_x509_crt_verify_restartable+0x3d4>
            if( fallback_parent == NULL )
 8028258:	950b      	str	r5, [sp, #44]	; 0x2c
 802825a:	46b1      	mov	r9, r6
 802825c:	e732      	b.n	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
 802825e:	46d1      	mov	r9, sl
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8028260:	aa38      	add	r2, sp, #224	; 0xe0
 8028262:	9b07      	ldr	r3, [sp, #28]
 8028264:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8028268:	f853 2c50 	ldr.w	r2, [r3, #-80]
 802826c:	f042 0208 	orr.w	r2, r2, #8
 8028270:	f843 2c50 	str.w	r2, [r3, #-80]
    ver_chain.items[0].flags |= ee_flags;
 8028274:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028278:	4313      	orrs	r3, r2
 802827a:	9324      	str	r3, [sp, #144]	; 0x90
    for( i = ver_chain->len; i != 0; --i )
 802827c:	f1b9 0f00 	cmp.w	r9, #0
 8028280:	f47f af10 	bne.w	80280a4 <mbedtls_x509_crt_verify_restartable+0x15c>
#endif

    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8028284:	2300      	movs	r3, #0
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 8028286:	2b00      	cmp	r3, #0
 8028288:	d138      	bne.n	80282fc <mbedtls_x509_crt_verify_restartable+0x3b4>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 802828a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 802828c:	6811      	ldr	r1, [r2, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 802828e:	4a33      	ldr	r2, [pc, #204]	; (802835c <mbedtls_x509_crt_verify_restartable+0x414>)
 8028290:	2900      	cmp	r1, #0
 8028292:	bf18      	it	ne
 8028294:	4613      	movne	r3, r2

    return( 0 );
}
 8028296:	4618      	mov	r0, r3
 8028298:	b039      	add	sp, #228	; 0xe4
 802829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 802829e:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80282a2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80282a6:	f7ff f9be 	bl	8027626 <x509_name_cmp>
        if( ver_chain->len != 1 &&
 80282aa:	b910      	cbnz	r0, 80282b2 <mbedtls_x509_crt_verify_restartable+0x36a>
            self_cnt++;
 80282ac:	9b06      	ldr	r3, [sp, #24]
 80282ae:	3301      	adds	r3, #1
 80282b0:	9306      	str	r3, [sp, #24]
        if( ! parent_is_trusted &&
 80282b2:	2f00      	cmp	r7, #0
 80282b4:	f47f af6e 	bne.w	8028194 <mbedtls_x509_crt_verify_restartable+0x24c>
 80282b8:	f1bb 0f08 	cmp.w	fp, #8
 80282bc:	f67f af6a 	bls.w	8028194 <mbedtls_x509_crt_verify_restartable+0x24c>
            return( MBEDTLS_ERR_X509_FATAL_ERROR );
 80282c0:	4b27      	ldr	r3, [pc, #156]	; (8028360 <mbedtls_x509_crt_verify_restartable+0x418>)
 80282c2:	e01b      	b.n	80282fc <mbedtls_x509_crt_verify_restartable+0x3b4>
        *flags |= cur_flags;
 80282c4:	6833      	ldr	r3, [r6, #0]
 80282c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80282c8:	4313      	orrs	r3, r2
 80282ca:	6033      	str	r3, [r6, #0]
    for( i = ver_chain->len; i != 0; --i )
 80282cc:	3c08      	subs	r4, #8
 80282ce:	2d00      	cmp	r5, #0
 80282d0:	d0d8      	beq.n	8028284 <mbedtls_x509_crt_verify_restartable+0x33c>
        cur = &ver_chain->items[i-1];
 80282d2:	3d01      	subs	r5, #1
        cur_flags = cur->flags;
 80282d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80282d8:	9313      	str	r3, [sp, #76]	; 0x4c
        if( NULL != f_vrfy )
 80282da:	2f00      	cmp	r7, #0
 80282dc:	d0f2      	beq.n	80282c4 <mbedtls_x509_crt_verify_restartable+0x37c>
            if( ( ret = f_vrfy( p_vrfy, cur->crt, (int) i-1, &cur_flags ) ) != 0 )
 80282de:	ab13      	add	r3, sp, #76	; 0x4c
 80282e0:	462a      	mov	r2, r5
 80282e2:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80282e6:	9845      	ldr	r0, [sp, #276]	; 0x114
 80282e8:	47b8      	blx	r7
 80282ea:	4603      	mov	r3, r0
 80282ec:	2800      	cmp	r0, #0
 80282ee:	d0e9      	beq.n	80282c4 <mbedtls_x509_crt_verify_restartable+0x37c>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80282f0:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80282f4:	d1c7      	bne.n	8028286 <mbedtls_x509_crt_verify_restartable+0x33e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80282f6:	4b1a      	ldr	r3, [pc, #104]	; (8028360 <mbedtls_x509_crt_verify_restartable+0x418>)
 80282f8:	e000      	b.n	80282fc <mbedtls_x509_crt_verify_restartable+0x3b4>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80282fa:	4b1a      	ldr	r3, [pc, #104]	; (8028364 <mbedtls_x509_crt_verify_restartable+0x41c>)
        *flags = (uint32_t) -1;
 80282fc:	f04f 32ff 	mov.w	r2, #4294967295
 8028300:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8028302:	600a      	str	r2, [r1, #0]
        return( ret );
 8028304:	e7c7      	b.n	8028296 <mbedtls_x509_crt_verify_restartable+0x34e>
 8028306:	46d9      	mov	r9, fp
 8028308:	e7b4      	b.n	8028274 <mbedtls_x509_crt_verify_restartable+0x32c>
 802830a:	46c3      	mov	fp, r8
        if( *parent != NULL || *parent_is_trusted == 0 )
 802830c:	f1b9 0f00 	cmp.w	r9, #0
 8028310:	d110      	bne.n	8028334 <mbedtls_x509_crt_verify_restartable+0x3ec>
 8028312:	2f00      	cmp	r7, #0
 8028314:	d0a3      	beq.n	802825e <mbedtls_x509_crt_verify_restartable+0x316>
        search_list = *parent_is_trusted ? trust_ca : child->next;
 8028316:	f8d4 6130 	ldr.w	r6, [r4, #304]	; 0x130
        *parent_is_trusted = 0;
 802831a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    for( parent = candidates; parent != NULL; parent = parent->next )
 802831c:	2e00      	cmp	r6, #0
 802831e:	d0f8      	beq.n	8028312 <mbedtls_x509_crt_verify_restartable+0x3ca>
 8028320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028322:	930b      	str	r3, [sp, #44]	; 0x2c
 8028324:	f04f 0900 	mov.w	r9, #0
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8028328:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 802832c:	9311      	str	r3, [sp, #68]	; 0x44
        signature_is_good = ret == 0;
 802832e:	9708      	str	r7, [sp, #32]
 8028330:	46d8      	mov	r8, fp
 8028332:	e6cc      	b.n	80280ce <mbedtls_x509_crt_verify_restartable+0x186>
 8028334:	464b      	mov	r3, r9
 8028336:	46d3      	mov	fp, sl
 8028338:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802833c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8028340:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028342:	461e      	mov	r6, r3
 8028344:	e722      	b.n	802818c <mbedtls_x509_crt_verify_restartable+0x244>
        if( top && ! signature_is_good )
 8028346:	2f00      	cmp	r7, #0
 8028348:	f47f aebc 	bne.w	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
        signature_is_good = ret == 0;
 802834c:	9d08      	ldr	r5, [sp, #32]
 802834e:	e70c      	b.n	802816a <mbedtls_x509_crt_verify_restartable+0x222>
        if( top && ! signature_is_good )
 8028350:	2f00      	cmp	r7, #0
 8028352:	f47f aeb7 	bne.w	80280c4 <mbedtls_x509_crt_verify_restartable+0x17c>
        signature_is_good = ret == 0;
 8028356:	9d08      	ldr	r5, [sp, #32]
 8028358:	e707      	b.n	802816a <mbedtls_x509_crt_verify_restartable+0x222>
 802835a:	bf00      	nop
 802835c:	ffffd900 	.word	0xffffd900
 8028360:	ffffd000 	.word	0xffffd000
 8028364:	ffffd800 	.word	0xffffd800
 8028368:	08031e68 	.word	0x08031e68

0802836c <mbedtls_x509_crt_init>:

/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
 802836c:	b508      	push	{r3, lr}
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 802836e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8028372:	2100      	movs	r1, #0
 8028374:	f002 f909 	bl	802a58a <memset>
}
 8028378:	bd08      	pop	{r3, pc}

0802837a <mbedtls_x509_crt_free>:
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 802837a:	2800      	cmp	r0, #0
 802837c:	d069      	beq.n	8028452 <mbedtls_x509_crt_free+0xd8>
{
 802837e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028382:	4680      	mov	r8, r0
    mbedtls_x509_crt *cert_cur = crt;
 8028384:	4607      	mov	r7, r0
        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8028386:	2620      	movs	r6, #32
        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_platform_zeroize( seq_prv,
 8028388:	2510      	movs	r5, #16
 802838a:	e003      	b.n	8028394 <mbedtls_x509_crt_free+0x1a>
        {
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
            mbedtls_free( cert_cur->raw.p );
        }

        cert_cur = cert_cur->next;
 802838c:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8028390:	2f00      	cmp	r7, #0
 8028392:	d052      	beq.n	802843a <mbedtls_x509_crt_free+0xc0>
        mbedtls_pk_free( &cert_cur->pk );
 8028394:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8028398:	f7f1 fe6c 	bl	801a074 <mbedtls_pk_free>
        name_cur = cert_cur->issuer.next;
 802839c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
        while( name_cur != NULL )
 802839e:	b154      	cbz	r4, 80283b6 <mbedtls_x509_crt_free+0x3c>
            name_cur = name_cur->next;
 80283a0:	46a1      	mov	r9, r4
 80283a2:	69a4      	ldr	r4, [r4, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80283a4:	4631      	mov	r1, r6
 80283a6:	4648      	mov	r0, r9
 80283a8:	f7f2 fdcc 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 80283ac:	4648      	mov	r0, r9
 80283ae:	f000 fd7b 	bl	8028ea8 <mbedtls_free>
        while( name_cur != NULL )
 80283b2:	2c00      	cmp	r4, #0
 80283b4:	d1f4      	bne.n	80283a0 <mbedtls_x509_crt_free+0x26>
        name_cur = cert_cur->subject.next;
 80283b6:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
        while( name_cur != NULL )
 80283ba:	b154      	cbz	r4, 80283d2 <mbedtls_x509_crt_free+0x58>
            name_cur = name_cur->next;
 80283bc:	46a1      	mov	r9, r4
 80283be:	69a4      	ldr	r4, [r4, #24]
            mbedtls_platform_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80283c0:	4631      	mov	r1, r6
 80283c2:	4648      	mov	r0, r9
 80283c4:	f7f2 fdbe 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( name_prv );
 80283c8:	4648      	mov	r0, r9
 80283ca:	f000 fd6d 	bl	8028ea8 <mbedtls_free>
        while( name_cur != NULL )
 80283ce:	2c00      	cmp	r4, #0
 80283d0:	d1f4      	bne.n	80283bc <mbedtls_x509_crt_free+0x42>
        seq_cur = cert_cur->ext_key_usage.next;
 80283d2:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
        while( seq_cur != NULL )
 80283d6:	b154      	cbz	r4, 80283ee <mbedtls_x509_crt_free+0x74>
            seq_cur = seq_cur->next;
 80283d8:	46a1      	mov	r9, r4
 80283da:	68e4      	ldr	r4, [r4, #12]
            mbedtls_platform_zeroize( seq_prv,
 80283dc:	4629      	mov	r1, r5
 80283de:	4648      	mov	r0, r9
 80283e0:	f7f2 fdb0 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 80283e4:	4648      	mov	r0, r9
 80283e6:	f000 fd5f 	bl	8028ea8 <mbedtls_free>
        while( seq_cur != NULL )
 80283ea:	2c00      	cmp	r4, #0
 80283ec:	d1f4      	bne.n	80283d8 <mbedtls_x509_crt_free+0x5e>
        seq_cur = cert_cur->subject_alt_names.next;
 80283ee:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
        while( seq_cur != NULL )
 80283f2:	b154      	cbz	r4, 802840a <mbedtls_x509_crt_free+0x90>
            seq_cur = seq_cur->next;
 80283f4:	46a1      	mov	r9, r4
 80283f6:	68e4      	ldr	r4, [r4, #12]
            mbedtls_platform_zeroize( seq_prv,
 80283f8:	4629      	mov	r1, r5
 80283fa:	4648      	mov	r0, r9
 80283fc:	f7f2 fda2 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( seq_prv );
 8028400:	4648      	mov	r0, r9
 8028402:	f000 fd51 	bl	8028ea8 <mbedtls_free>
        while( seq_cur != NULL )
 8028406:	2c00      	cmp	r4, #0
 8028408:	d1f4      	bne.n	80283f4 <mbedtls_x509_crt_free+0x7a>
        if( cert_cur->raw.p != NULL )
 802840a:	68b8      	ldr	r0, [r7, #8]
 802840c:	2800      	cmp	r0, #0
 802840e:	d0bd      	beq.n	802838c <mbedtls_x509_crt_free+0x12>
            mbedtls_platform_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8028410:	6879      	ldr	r1, [r7, #4]
 8028412:	f7f2 fd97 	bl	801af44 <mbedtls_platform_zeroize>
            mbedtls_free( cert_cur->raw.p );
 8028416:	68b8      	ldr	r0, [r7, #8]
 8028418:	f000 fd46 	bl	8028ea8 <mbedtls_free>
 802841c:	e7b6      	b.n	802838c <mbedtls_x509_crt_free+0x12>

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 802841e:	462c      	mov	r4, r5

        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
        if( cert_prv != crt )
            mbedtls_free( cert_prv );
    }
    while( cert_cur != NULL );
 8028420:	b1ac      	cbz	r4, 802844e <mbedtls_x509_crt_free+0xd4>
        cert_cur = cert_cur->next;
 8028422:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8028426:	4631      	mov	r1, r6
 8028428:	4620      	mov	r0, r4
 802842a:	f7f2 fd8b 	bl	801af44 <mbedtls_platform_zeroize>
        if( cert_prv != crt )
 802842e:	4544      	cmp	r4, r8
 8028430:	d0f5      	beq.n	802841e <mbedtls_x509_crt_free+0xa4>
            mbedtls_free( cert_prv );
 8028432:	4620      	mov	r0, r4
 8028434:	f000 fd38 	bl	8028ea8 <mbedtls_free>
 8028438:	e7f1      	b.n	802841e <mbedtls_x509_crt_free+0xa4>
        cert_cur = cert_cur->next;
 802843a:	f8d8 4130 	ldr.w	r4, [r8, #304]	; 0x130
        mbedtls_platform_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802843e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8028442:	4640      	mov	r0, r8
 8028444:	f7f2 fd7e 	bl	801af44 <mbedtls_platform_zeroize>
 8028448:	f44f 769a 	mov.w	r6, #308	; 0x134
 802844c:	e7e8      	b.n	8028420 <mbedtls_x509_crt_free+0xa6>
}
 802844e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028452:	4770      	bx	lr

08028454 <mbedtls_x509_crt_parse_der>:
{
 8028454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028458:	b09b      	sub	sp, #108	; 0x6c
    if( crt == NULL || buf == NULL )
 802845a:	2800      	cmp	r0, #0
 802845c:	f000 837e 	beq.w	8028b5c <mbedtls_x509_crt_parse_der+0x708>
 8028460:	460f      	mov	r7, r1
 8028462:	4616      	mov	r6, r2
 8028464:	4680      	mov	r8, r0
 8028466:	2900      	cmp	r1, #0
 8028468:	f000 837b 	beq.w	8028b62 <mbedtls_x509_crt_parse_der+0x70e>
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 802846c:	4604      	mov	r4, r0
 802846e:	2500      	movs	r5, #0
 8028470:	e000      	b.n	8028474 <mbedtls_x509_crt_parse_der+0x20>
        crt = crt->next;
 8028472:	461c      	mov	r4, r3
    while( crt->version != 0 && crt->next != NULL )
 8028474:	69a3      	ldr	r3, [r4, #24]
 8028476:	2b00      	cmp	r3, #0
 8028478:	f000 83a0 	beq.w	8028bbc <mbedtls_x509_crt_parse_der+0x768>
 802847c:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8028480:	4625      	mov	r5, r4
 8028482:	2b00      	cmp	r3, #0
 8028484:	d1f5      	bne.n	8028472 <mbedtls_x509_crt_parse_der+0x1e>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 8028486:	f44f 719a 	mov.w	r1, #308	; 0x134
 802848a:	2001      	movs	r0, #1
 802848c:	f000 fcfe 	bl	8028e8c <mbedtls_calloc>
 8028490:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 8028494:	2800      	cmp	r0, #0
 8028496:	f000 8367 	beq.w	8028b68 <mbedtls_x509_crt_parse_der+0x714>
        mbedtls_x509_crt_init( crt->next );
 802849a:	f7ff ff67 	bl	802836c <mbedtls_x509_crt_init>
        crt = crt->next;
 802849e:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80284a2:	2300      	movs	r3, #0
 80284a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80284a6:	930c      	str	r3, [sp, #48]	; 0x30
 80284a8:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80284aa:	930e      	str	r3, [sp, #56]	; 0x38
 80284ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80284ae:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80284b0:	9311      	str	r3, [sp, #68]	; 0x44
 80284b2:	9312      	str	r3, [sp, #72]	; 0x48
 80284b4:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 80284b6:	2a00      	cmp	r2, #0
 80284b8:	f000 8359 	beq.w	8028b6e <mbedtls_x509_crt_parse_der+0x71a>
        crt = crt->next;
 80284bc:	4614      	mov	r4, r2
 80284be:	e387      	b.n	8028bd0 <mbedtls_x509_crt_parse_der+0x77c>
        mbedtls_x509_crt_free( crt );
 80284c0:	4620      	mov	r0, r4
 80284c2:	f7ff ff5a 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80284c6:	f8df 97b0 	ldr.w	r9, [pc, #1968]	; 8028c78 <mbedtls_x509_crt_parse_der+0x824>
 80284ca:	e0f1      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 80284cc:	4620      	mov	r0, r4
 80284ce:	f7ff ff54 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 80284d2:	f8df 97a8 	ldr.w	r9, [pc, #1960]	; 8028c7c <mbedtls_x509_crt_parse_der+0x828>
 80284d6:	e0eb      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 80284d8:	4620      	mov	r0, r4
 80284da:	f7ff ff4e 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80284de:	f5a9 5906 	sub.w	r9, r9, #8576	; 0x2180
 80284e2:	e00c      	b.n	80284fe <mbedtls_x509_crt_parse_der+0xaa>
            *ver = 0;
 80284e4:	2300      	movs	r3, #0
 80284e6:	61a3      	str	r3, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80284e8:	f104 021c 	add.w	r2, r4, #28
 80284ec:	4639      	mov	r1, r7
 80284ee:	a806      	add	r0, sp, #24
 80284f0:	f7fe fd40 	bl	8026f74 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80284f4:	4681      	mov	r9, r0
 80284f6:	b1f0      	cbz	r0, 8028536 <mbedtls_x509_crt_parse_der+0xe2>
        mbedtls_x509_crt_free( crt );
 80284f8:	4620      	mov	r0, r4
 80284fa:	f7ff ff3e 	bl	802837a <mbedtls_x509_crt_free>
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80284fe:	f1b9 0f00 	cmp.w	r9, #0
 8028502:	f040 80d5 	bne.w	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
}
 8028506:	4648      	mov	r0, r9
 8028508:	b01b      	add	sp, #108	; 0x6c
 802850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    end = *p + len;
 802850e:	9a06      	ldr	r2, [sp, #24]
 8028510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028512:	eb02 0a03 	add.w	sl, r2, r3
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8028516:	f104 0218 	add.w	r2, r4, #24
 802851a:	4651      	mov	r1, sl
 802851c:	a806      	add	r0, sp, #24
 802851e:	f7e9 fcc5 	bl	8011eac <mbedtls_asn1_get_int>
 8028522:	b928      	cbnz	r0, 8028530 <mbedtls_x509_crt_parse_der+0xdc>
    if( *p != end )
 8028524:	9b06      	ldr	r3, [sp, #24]
 8028526:	459a      	cmp	sl, r3
 8028528:	d0de      	beq.n	80284e8 <mbedtls_x509_crt_parse_der+0x94>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 802852a:	f8df 9754 	ldr.w	r9, [pc, #1876]	; 8028c80 <mbedtls_x509_crt_parse_der+0x82c>
 802852e:	e7e3      	b.n	80284f8 <mbedtls_x509_crt_parse_der+0xa4>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8028530:	f5a0 5908 	sub.w	r9, r0, #8704	; 0x2200
 8028534:	e393      	b.n	8028c5e <mbedtls_x509_crt_parse_der+0x80a>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 8028536:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 802853a:	ab0b      	add	r3, sp, #44	; 0x2c
 802853c:	4652      	mov	r2, sl
 802853e:	4639      	mov	r1, r7
 8028540:	a806      	add	r0, sp, #24
 8028542:	f7fe fd3d 	bl	8026fc0 <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8028546:	4681      	mov	r9, r0
 8028548:	2800      	cmp	r0, #0
 802854a:	d1d5      	bne.n	80284f8 <mbedtls_x509_crt_parse_der+0xa4>
    if( crt->version < 0 || crt->version > 2 )
 802854c:	69a3      	ldr	r3, [r4, #24]
 802854e:	2b02      	cmp	r3, #2
 8028550:	f200 80a5 	bhi.w	802869e <mbedtls_x509_crt_parse_der+0x24a>
    crt->version++;
 8028554:	3301      	adds	r3, #1
 8028556:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8028558:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 802855c:	9300      	str	r3, [sp, #0]
 802855e:	f204 1329 	addw	r3, r4, #297	; 0x129
 8028562:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8028566:	a90b      	add	r1, sp, #44	; 0x2c
 8028568:	4650      	mov	r0, sl
 802856a:	f7fe febd 	bl	80272e8 <mbedtls_x509_get_sig_alg>
 802856e:	4681      	mov	r9, r0
 8028570:	2800      	cmp	r0, #0
 8028572:	f040 809a 	bne.w	80286aa <mbedtls_x509_crt_parse_der+0x256>
    crt->issuer_raw.p = p;
 8028576:	9b06      	ldr	r3, [sp, #24]
 8028578:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802857a:	2330      	movs	r3, #48	; 0x30
 802857c:	aa05      	add	r2, sp, #20
 802857e:	4639      	mov	r1, r7
 8028580:	a806      	add	r0, sp, #24
 8028582:	f7e9 fc66 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028586:	4681      	mov	r9, r0
 8028588:	2800      	cmp	r0, #0
 802858a:	f040 809c 	bne.w	80286c6 <mbedtls_x509_crt_parse_der+0x272>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802858e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8028592:	9906      	ldr	r1, [sp, #24]
 8028594:	9b05      	ldr	r3, [sp, #20]
 8028596:	4419      	add	r1, r3
 8028598:	a806      	add	r0, sp, #24
 802859a:	f7fe fd19 	bl	8026fd0 <mbedtls_x509_get_name>
 802859e:	4681      	mov	r9, r0
 80285a0:	2800      	cmp	r0, #0
 80285a2:	f040 8096 	bne.w	80286d2 <mbedtls_x509_crt_parse_der+0x27e>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80285a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80285a8:	9b06      	ldr	r3, [sp, #24]
 80285aa:	1a9b      	subs	r3, r3, r2
 80285ac:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80285ae:	2330      	movs	r3, #48	; 0x30
 80285b0:	aa17      	add	r2, sp, #92	; 0x5c
 80285b2:	4639      	mov	r1, r7
 80285b4:	a806      	add	r0, sp, #24
 80285b6:	f7e9 fc4c 	bl	8011e52 <mbedtls_asn1_get_tag>
 80285ba:	2800      	cmp	r0, #0
 80285bc:	f000 808d 	beq.w	80286da <mbedtls_x509_crt_parse_der+0x286>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80285c0:	f5b0 5910 	subs.w	r9, r0, #9216	; 0x2400
 80285c4:	f040 8095 	bne.w	80286f2 <mbedtls_x509_crt_parse_der+0x29e>
    crt->subject_raw.p = p;
 80285c8:	9b06      	ldr	r3, [sp, #24]
 80285ca:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80285cc:	2330      	movs	r3, #48	; 0x30
 80285ce:	aa05      	add	r2, sp, #20
 80285d0:	4639      	mov	r1, r7
 80285d2:	a806      	add	r0, sp, #24
 80285d4:	f7e9 fc3d 	bl	8011e52 <mbedtls_asn1_get_tag>
 80285d8:	4681      	mov	r9, r0
 80285da:	2800      	cmp	r0, #0
 80285dc:	f040 809d 	bne.w	802871a <mbedtls_x509_crt_parse_der+0x2c6>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80285e0:	9b05      	ldr	r3, [sp, #20]
 80285e2:	b153      	cbz	r3, 80285fa <mbedtls_x509_crt_parse_der+0x1a6>
 80285e4:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80285e8:	9906      	ldr	r1, [sp, #24]
 80285ea:	4419      	add	r1, r3
 80285ec:	a806      	add	r0, sp, #24
 80285ee:	f7fe fcef 	bl	8026fd0 <mbedtls_x509_get_name>
 80285f2:	4681      	mov	r9, r0
 80285f4:	2800      	cmp	r0, #0
 80285f6:	f040 8096 	bne.w	8028726 <mbedtls_x509_crt_parse_der+0x2d2>
    crt->subject_raw.len = p - crt->subject_raw.p;
 80285fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80285fc:	9b06      	ldr	r3, [sp, #24]
 80285fe:	1a9b      	subs	r3, r3, r2
 8028600:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8028602:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8028606:	4639      	mov	r1, r7
 8028608:	a806      	add	r0, sp, #24
 802860a:	f7f2 fb35 	bl	801ac78 <mbedtls_pk_parse_subpubkey>
 802860e:	4681      	mov	r9, r0
 8028610:	2800      	cmp	r0, #0
 8028612:	f040 808c 	bne.w	802872e <mbedtls_x509_crt_parse_der+0x2da>
    if( crt->version == 2 || crt->version == 3 )
 8028616:	69a3      	ldr	r3, [r4, #24]
 8028618:	3b02      	subs	r3, #2
 802861a:	2b01      	cmp	r3, #1
 802861c:	f240 808b 	bls.w	8028736 <mbedtls_x509_crt_parse_der+0x2e2>
    if( crt->version == 3 )
 8028620:	69a3      	ldr	r3, [r4, #24]
 8028622:	2b03      	cmp	r3, #3
 8028624:	f000 80ce 	beq.w	80287c4 <mbedtls_x509_crt_parse_der+0x370>
    if( p != end )
 8028628:	9b06      	ldr	r3, [sp, #24]
 802862a:	429f      	cmp	r7, r3
 802862c:	f040 8282 	bne.w	8028b34 <mbedtls_x509_crt_parse_der+0x6e0>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8028630:	ab0e      	add	r3, sp, #56	; 0x38
 8028632:	aa11      	add	r2, sp, #68	; 0x44
 8028634:	4631      	mov	r1, r6
 8028636:	a806      	add	r0, sp, #24
 8028638:	f7fe fcc2 	bl	8026fc0 <mbedtls_x509_get_alg>
 802863c:	4681      	mov	r9, r0
 802863e:	2800      	cmp	r0, #0
 8028640:	f040 827e 	bne.w	8028b40 <mbedtls_x509_crt_parse_der+0x6ec>
    if( crt->sig_oid.len != sig_oid2.len ||
 8028644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8028646:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028648:	429a      	cmp	r2, r3
 802864a:	f040 827d 	bne.w	8028b48 <mbedtls_x509_crt_parse_der+0x6f4>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 802864e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028650:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8028652:	f001 ff64 	bl	802a51e <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 8028656:	2800      	cmp	r0, #0
 8028658:	f040 8276 	bne.w	8028b48 <mbedtls_x509_crt_parse_der+0x6f4>
        sig_params1.len != sig_params2.len ||
 802865c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 802865e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028660:	429a      	cmp	r2, r3
 8028662:	f040 8271 	bne.w	8028b48 <mbedtls_x509_crt_parse_der+0x6f4>
        sig_params1.len != sig_params2.len ||
 8028666:	b132      	cbz	r2, 8028676 <mbedtls_x509_crt_parse_der+0x222>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8028668:	9910      	ldr	r1, [sp, #64]	; 0x40
 802866a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802866c:	f001 ff57 	bl	802a51e <memcmp>
        ( sig_params1.len != 0 &&
 8028670:	2800      	cmp	r0, #0
 8028672:	f040 8269 	bne.w	8028b48 <mbedtls_x509_crt_parse_der+0x6f4>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8028676:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 802867a:	4631      	mov	r1, r6
 802867c:	a806      	add	r0, sp, #24
 802867e:	f7fe fe15 	bl	80272ac <mbedtls_x509_get_sig>
 8028682:	4681      	mov	r9, r0
 8028684:	2800      	cmp	r0, #0
 8028686:	f040 8265 	bne.w	8028b54 <mbedtls_x509_crt_parse_der+0x700>
    if( p != end )
 802868a:	9b06      	ldr	r3, [sp, #24]
 802868c:	429e      	cmp	r6, r3
 802868e:	f43f af3a 	beq.w	8028506 <mbedtls_x509_crt_parse_der+0xb2>
        mbedtls_x509_crt_free( crt );
 8028692:	4620      	mov	r0, r4
 8028694:	f7ff fe71 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8028698:	f8df 95e0 	ldr.w	r9, [pc, #1504]	; 8028c7c <mbedtls_x509_crt_parse_der+0x828>
 802869c:	e008      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 802869e:	4620      	mov	r0, r4
 80286a0:	f7ff fe6b 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80286a4:	f8df 95dc 	ldr.w	r9, [pc, #1500]	; 8028c84 <mbedtls_x509_crt_parse_der+0x830>
 80286a8:	e002      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 80286aa:	4620      	mov	r0, r4
 80286ac:	f7ff fe65 	bl	802837a <mbedtls_x509_crt_free>
        if( prev )
 80286b0:	b115      	cbz	r5, 80286b8 <mbedtls_x509_crt_parse_der+0x264>
            prev->next = NULL;
 80286b2:	2300      	movs	r3, #0
 80286b4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
        if( crt != chain )
 80286b8:	45a0      	cmp	r8, r4
 80286ba:	f43f af24 	beq.w	8028506 <mbedtls_x509_crt_parse_der+0xb2>
            mbedtls_free( crt );
 80286be:	4620      	mov	r0, r4
 80286c0:	f000 fbf2 	bl	8028ea8 <mbedtls_free>
 80286c4:	e71f      	b.n	8028506 <mbedtls_x509_crt_parse_der+0xb2>
        mbedtls_x509_crt_free( crt );
 80286c6:	4620      	mov	r0, r4
 80286c8:	f7ff fe57 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80286cc:	f5a9 5906 	sub.w	r9, r9, #8576	; 0x2180
 80286d0:	e715      	b.n	80284fe <mbedtls_x509_crt_parse_der+0xaa>
        mbedtls_x509_crt_free( crt );
 80286d2:	4620      	mov	r0, r4
 80286d4:	f7ff fe51 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 80286d8:	e7ea      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
    end = *p + len;
 80286da:	9a06      	ldr	r2, [sp, #24]
 80286dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80286de:	eb02 0a03 	add.w	sl, r2, r3
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80286e2:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80286e6:	4651      	mov	r1, sl
 80286e8:	a806      	add	r0, sp, #24
 80286ea:	f7fe fd05 	bl	80270f8 <mbedtls_x509_get_time>
 80286ee:	4681      	mov	r9, r0
 80286f0:	b118      	cbz	r0, 80286fa <mbedtls_x509_crt_parse_der+0x2a6>
        mbedtls_x509_crt_free( crt );
 80286f2:	4620      	mov	r0, r4
 80286f4:	f7ff fe41 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 80286f8:	e7da      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80286fa:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80286fe:	4651      	mov	r1, sl
 8028700:	a806      	add	r0, sp, #24
 8028702:	f7fe fcf9 	bl	80270f8 <mbedtls_x509_get_time>
 8028706:	4681      	mov	r9, r0
 8028708:	2800      	cmp	r0, #0
 802870a:	d1f2      	bne.n	80286f2 <mbedtls_x509_crt_parse_der+0x29e>
    if( *p != end )
 802870c:	9b06      	ldr	r3, [sp, #24]
 802870e:	459a      	cmp	sl, r3
 8028710:	f43f af5a 	beq.w	80285c8 <mbedtls_x509_crt_parse_der+0x174>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 8028714:	f8df 9570 	ldr.w	r9, [pc, #1392]	; 8028c88 <mbedtls_x509_crt_parse_der+0x834>
 8028718:	e7eb      	b.n	80286f2 <mbedtls_x509_crt_parse_der+0x29e>
        mbedtls_x509_crt_free( crt );
 802871a:	4620      	mov	r0, r4
 802871c:	f7ff fe2d 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8028720:	f5a9 5906 	sub.w	r9, r9, #8576	; 0x2180
 8028724:	e6eb      	b.n	80284fe <mbedtls_x509_crt_parse_der+0xaa>
        mbedtls_x509_crt_free( crt );
 8028726:	4620      	mov	r0, r4
 8028728:	f7ff fe27 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 802872c:	e7c0      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 802872e:	4620      	mov	r0, r4
 8028730:	f7ff fe23 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 8028734:	e7bc      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
    if( *p == end )
 8028736:	9b06      	ldr	r3, [sp, #24]
 8028738:	429f      	cmp	r7, r3
 802873a:	d020      	beq.n	802877e <mbedtls_x509_crt_parse_der+0x32a>
    uid->tag = **p;
 802873c:	781b      	ldrb	r3, [r3, #0]
 802873e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8028742:	23a1      	movs	r3, #161	; 0xa1
 8028744:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
 8028748:	4639      	mov	r1, r7
 802874a:	a806      	add	r0, sp, #24
 802874c:	f7e9 fb81 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028750:	b148      	cbz	r0, 8028766 <mbedtls_x509_crt_parse_der+0x312>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8028752:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8028756:	d00d      	beq.n	8028774 <mbedtls_x509_crt_parse_der+0x320>
        if( ret != 0 )
 8028758:	f5b0 5906 	subs.w	r9, r0, #8576	; 0x2180
 802875c:	d00a      	beq.n	8028774 <mbedtls_x509_crt_parse_der+0x320>
            mbedtls_x509_crt_free( crt );
 802875e:	4620      	mov	r0, r4
 8028760:	f7ff fe0b 	bl	802837a <mbedtls_x509_crt_free>
            return( ret );
 8028764:	e7a4      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
    uid->p = *p;
 8028766:	9b06      	ldr	r3, [sp, #24]
 8028768:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    *p += uid->len;
 802876c:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 8028770:	4413      	add	r3, r2
 8028772:	9306      	str	r3, [sp, #24]
    if( crt->version == 2 || crt->version == 3 )
 8028774:	69a3      	ldr	r3, [r4, #24]
 8028776:	3b02      	subs	r3, #2
 8028778:	2b01      	cmp	r3, #1
 802877a:	f63f af51 	bhi.w	8028620 <mbedtls_x509_crt_parse_der+0x1cc>
    if( *p == end )
 802877e:	9b06      	ldr	r3, [sp, #24]
 8028780:	429f      	cmp	r7, r3
 8028782:	f43f af4d 	beq.w	8028620 <mbedtls_x509_crt_parse_der+0x1cc>
    uid->tag = **p;
 8028786:	781b      	ldrb	r3, [r3, #0]
 8028788:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802878c:	23a2      	movs	r3, #162	; 0xa2
 802878e:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 8028792:	4639      	mov	r1, r7
 8028794:	a806      	add	r0, sp, #24
 8028796:	f7e9 fb5c 	bl	8011e52 <mbedtls_asn1_get_tag>
 802879a:	b158      	cbz	r0, 80287b4 <mbedtls_x509_crt_parse_der+0x360>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802879c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80287a0:	f43f af3e 	beq.w	8028620 <mbedtls_x509_crt_parse_der+0x1cc>
        if( ret != 0 )
 80287a4:	f5b0 5906 	subs.w	r9, r0, #8576	; 0x2180
 80287a8:	f43f af3a 	beq.w	8028620 <mbedtls_x509_crt_parse_der+0x1cc>
            mbedtls_x509_crt_free( crt );
 80287ac:	4620      	mov	r0, r4
 80287ae:	f7ff fde4 	bl	802837a <mbedtls_x509_crt_free>
            return( ret );
 80287b2:	e77d      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
    uid->p = *p;
 80287b4:	9b06      	ldr	r3, [sp, #24]
 80287b6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    *p += uid->len;
 80287ba:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 80287be:	4413      	add	r3, r2
 80287c0:	9306      	str	r3, [sp, #24]
    return( 0 );
 80287c2:	e72d      	b.n	8028620 <mbedtls_x509_crt_parse_der+0x1cc>
    if( *p == end )
 80287c4:	9b06      	ldr	r3, [sp, #24]
 80287c6:	429f      	cmp	r7, r3
 80287c8:	f43f af2e 	beq.w	8028628 <mbedtls_x509_crt_parse_der+0x1d4>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80287cc:	2303      	movs	r3, #3
 80287ce:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80287d2:	4639      	mov	r1, r7
 80287d4:	a806      	add	r0, sp, #24
 80287d6:	f7fe fda7 	bl	8027328 <mbedtls_x509_get_ext>
 80287da:	4681      	mov	r9, r0
 80287dc:	2800      	cmp	r0, #0
 80287de:	f040 8156 	bne.w	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
    end = crt->v3_ext.p + crt->v3_ext.len;
 80287e2:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80287e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80287ea:	18d3      	adds	r3, r2, r3
 80287ec:	461a      	mov	r2, r3
 80287ee:	9303      	str	r3, [sp, #12]
    while( *p < end )
 80287f0:	9b06      	ldr	r3, [sp, #24]
 80287f2:	429a      	cmp	r2, r3
 80287f4:	f240 8197 	bls.w	8028b26 <mbedtls_x509_crt_parse_der+0x6d2>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80287f8:	f04f 0b00 	mov.w	fp, #0
        buf->tag = tag;
 80287fc:	9502      	str	r5, [sp, #8]
 80287fe:	e0f8      	b.n	80289f2 <mbedtls_x509_crt_parse_der+0x59e>
 8028800:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028802:	f5a0 5914 	sub.w	r9, r0, #9472	; 0x2500
        if( ret != 0 )
 8028806:	f1b9 0f00 	cmp.w	r9, #0
 802880a:	f43f af0d 	beq.w	8028628 <mbedtls_x509_crt_parse_der+0x1d4>
 802880e:	e13e      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028810:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028812:	f5a0 5914 	sub.w	r9, r0, #9472	; 0x2500
 8028816:	e7f6      	b.n	8028806 <mbedtls_x509_crt_parse_der+0x3b2>
 8028818:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802881a:	f5a0 5914 	sub.w	r9, r0, #9472	; 0x2500
 802881e:	e7f2      	b.n	8028806 <mbedtls_x509_crt_parse_der+0x3b2>
 8028820:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028822:	f5a0 5914 	sub.w	r9, r0, #9472	; 0x2500
 8028826:	e7ee      	b.n	8028806 <mbedtls_x509_crt_parse_der+0x3b2>
        if( ( crt->ext_types & ext_type ) != 0 )
 8028828:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 802882c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802882e:	421a      	tst	r2, r3
 8028830:	f040 821e 	bne.w	8028c70 <mbedtls_x509_crt_parse_der+0x81c>
        crt->ext_types |= ext_type;
 8028834:	431a      	orrs	r2, r3
 8028836:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
        switch( ext_type )
 802883a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802883e:	d047      	beq.n	80288d0 <mbedtls_x509_crt_parse_der+0x47c>
 8028840:	dd1d      	ble.n	802887e <mbedtls_x509_crt_parse_der+0x42a>
 8028842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028846:	f000 80b5 	beq.w	80289b4 <mbedtls_x509_crt_parse_der+0x560>
 802884a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802884e:	d13b      	bne.n	80288c8 <mbedtls_x509_crt_parse_der+0x474>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8028850:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8028854:	f88d b060 	strb.w	fp, [sp, #96]	; 0x60
 8028858:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802885c:	aa17      	add	r2, sp, #92	; 0x5c
 802885e:	4629      	mov	r1, r5
 8028860:	a806      	add	r0, sp, #24
 8028862:	f7e9 fb63 	bl	8011f2c <mbedtls_asn1_get_bitstring>
 8028866:	2800      	cmp	r0, #0
 8028868:	f040 8155 	bne.w	8028b16 <mbedtls_x509_crt_parse_der+0x6c2>
    if( bs.len != 1 )
 802886c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802886e:	2b01      	cmp	r3, #1
 8028870:	f040 81a0 	bne.w	8028bb4 <mbedtls_x509_crt_parse_der+0x760>
    *ns_cert_type = *bs.p;
 8028874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028876:	781b      	ldrb	r3, [r3, #0]
 8028878:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    return( 0 );
 802887c:	e0b4      	b.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
        switch( ext_type )
 802887e:	2b04      	cmp	r3, #4
 8028880:	d06f      	beq.n	8028962 <mbedtls_x509_crt_parse_der+0x50e>
 8028882:	2b20      	cmp	r3, #32
 8028884:	d11c      	bne.n	80288c0 <mbedtls_x509_crt_parse_der+0x46c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028886:	2330      	movs	r3, #48	; 0x30
 8028888:	aa0a      	add	r2, sp, #40	; 0x28
 802888a:	4629      	mov	r1, r5
 802888c:	a806      	add	r0, sp, #24
 802888e:	f7e9 fae0 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028892:	2800      	cmp	r0, #0
 8028894:	f040 80a3 	bne.w	80289de <mbedtls_x509_crt_parse_der+0x58a>
    if( *p + len != end )
 8028898:	9b06      	ldr	r3, [sp, #24]
 802889a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802889c:	441a      	add	r2, r3
 802889e:	4295      	cmp	r5, r2
 80288a0:	f040 8170 	bne.w	8028b84 <mbedtls_x509_crt_parse_der+0x730>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80288a4:	f104 09e8 	add.w	r9, r4, #232	; 0xe8
    while( *p < end )
 80288a8:	429d      	cmp	r5, r3
 80288aa:	f200 810b 	bhi.w	8028ac4 <mbedtls_x509_crt_parse_der+0x670>
    cur->next = NULL;
 80288ae:	f8c9 b00c 	str.w	fp, [r9, #12]
    if( *p != end )
 80288b2:	429d      	cmp	r5, r3
 80288b4:	f000 8098 	beq.w	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 80288b8:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80288ba:	f8df 93d0 	ldr.w	r9, [pc, #976]	; 8028c8c <mbedtls_x509_crt_parse_der+0x838>
 80288be:	e0e6      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 80288c0:	9d02      	ldr	r5, [sp, #8]
        switch( ext_type )
 80288c2:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8028c90 <mbedtls_x509_crt_parse_der+0x83c>
 80288c6:	e0e2      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 80288c8:	9d02      	ldr	r5, [sp, #8]
 80288ca:	f8df 93c4 	ldr.w	r9, [pc, #964]	; 8028c90 <mbedtls_x509_crt_parse_der+0x83c>
 80288ce:	e0de      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
    *ca_istrue = 0; /* DEFAULT FALSE */
 80288d0:	f8c4 b0fc 	str.w	fp, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80288d4:	f8c4 b100 	str.w	fp, [r4, #256]	; 0x100
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80288d8:	2330      	movs	r3, #48	; 0x30
 80288da:	aa17      	add	r2, sp, #92	; 0x5c
 80288dc:	4629      	mov	r1, r5
 80288de:	a806      	add	r0, sp, #24
 80288e0:	f7e9 fab7 	bl	8011e52 <mbedtls_asn1_get_tag>
 80288e4:	b988      	cbnz	r0, 802890a <mbedtls_x509_crt_parse_der+0x4b6>
    if( *p == end )
 80288e6:	9b06      	ldr	r3, [sp, #24]
 80288e8:	429d      	cmp	r5, r3
 80288ea:	d07d      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80288ec:	f104 09fc 	add.w	r9, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 80288f0:	464a      	mov	r2, r9
 80288f2:	4629      	mov	r1, r5
 80288f4:	a806      	add	r0, sp, #24
 80288f6:	f7e9 fabf 	bl	8011e78 <mbedtls_asn1_get_bool>
 80288fa:	4603      	mov	r3, r0
 80288fc:	b1d0      	cbz	r0, 8028934 <mbedtls_x509_crt_parse_der+0x4e0>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80288fe:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8028902:	d009      	beq.n	8028918 <mbedtls_x509_crt_parse_der+0x4c4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028904:	f5a3 5314 	sub.w	r3, r3, #9472	; 0x2500
 8028908:	e001      	b.n	802890e <mbedtls_x509_crt_parse_der+0x4ba>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802890a:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 802890e:	2b00      	cmp	r3, #0
 8028910:	d06a      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 8028912:	9d02      	ldr	r5, [sp, #8]
 8028914:	4699      	mov	r9, r3
 8028916:	e0ba      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8028918:	464a      	mov	r2, r9
 802891a:	4629      	mov	r1, r5
 802891c:	a806      	add	r0, sp, #24
 802891e:	f7e9 fac5 	bl	8011eac <mbedtls_asn1_get_int>
        if( ret != 0 )
 8028922:	4603      	mov	r3, r0
 8028924:	2800      	cmp	r0, #0
 8028926:	d1ed      	bne.n	8028904 <mbedtls_x509_crt_parse_der+0x4b0>
        if( *ca_istrue != 0 )
 8028928:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 802892c:	b113      	cbz	r3, 8028934 <mbedtls_x509_crt_parse_der+0x4e0>
            *ca_istrue = 1;
 802892e:	2301      	movs	r3, #1
 8028930:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 8028934:	9b06      	ldr	r3, [sp, #24]
 8028936:	429d      	cmp	r5, r3
 8028938:	d056      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 802893a:	f504 7280 	add.w	r2, r4, #256	; 0x100
 802893e:	4629      	mov	r1, r5
 8028940:	a806      	add	r0, sp, #24
 8028942:	f7e9 fab3 	bl	8011eac <mbedtls_asn1_get_int>
 8028946:	b948      	cbnz	r0, 802895c <mbedtls_x509_crt_parse_der+0x508>
    if( *p != end )
 8028948:	9b06      	ldr	r3, [sp, #24]
 802894a:	429d      	cmp	r5, r3
 802894c:	f040 812e 	bne.w	8028bac <mbedtls_x509_crt_parse_der+0x758>
    (*max_pathlen)++;
 8028950:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8028954:	3301      	adds	r3, #1
 8028956:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
 802895a:	e045      	b.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802895c:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
 8028960:	e7d5      	b.n	802890e <mbedtls_x509_crt_parse_der+0x4ba>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8028962:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
 8028966:	f88d b060 	strb.w	fp, [sp, #96]	; 0x60
 802896a:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802896e:	aa17      	add	r2, sp, #92	; 0x5c
 8028970:	4629      	mov	r1, r5
 8028972:	a806      	add	r0, sp, #24
 8028974:	f7e9 fada 	bl	8011f2c <mbedtls_asn1_get_bitstring>
 8028978:	b9b0      	cbnz	r0, 80289a8 <mbedtls_x509_crt_parse_der+0x554>
    if( bs.len < 1 )
 802897a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802897c:	2800      	cmp	r0, #0
 802897e:	f000 80fd 	beq.w	8028b7c <mbedtls_x509_crt_parse_der+0x728>
    *key_usage = 0;
 8028982:	f8c4 b104 	str.w	fp, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8028986:	9d19      	ldr	r5, [sp, #100]	; 0x64
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8028988:	465b      	mov	r3, fp
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 802898a:	5cea      	ldrb	r2, [r5, r3]
 802898c:	00d9      	lsls	r1, r3, #3
 802898e:	fa02 f101 	lsl.w	r1, r2, r1
 8028992:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8028996:	430a      	orrs	r2, r1
 8028998:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802899c:	3301      	adds	r3, #1
 802899e:	4298      	cmp	r0, r3
 80289a0:	d022      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 80289a2:	2b04      	cmp	r3, #4
 80289a4:	d1f1      	bne.n	802898a <mbedtls_x509_crt_parse_der+0x536>
 80289a6:	e01f      	b.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
            if( ( ret = x509_get_key_usage( p, end_ext_octet,
 80289a8:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
 80289ac:	d01c      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 80289ae:	9d02      	ldr	r5, [sp, #8]
 80289b0:	4699      	mov	r9, r3
 80289b2:	e06c      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80289b4:	2306      	movs	r3, #6
 80289b6:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80289ba:	4629      	mov	r1, r5
 80289bc:	a806      	add	r0, sp, #24
 80289be:	f7e9 faf6 	bl	8011fae <mbedtls_asn1_get_sequence_of>
 80289c2:	b930      	cbnz	r0, 80289d2 <mbedtls_x509_crt_parse_der+0x57e>
    if( ext_key_usage->buf.p == NULL )
 80289c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80289c8:	b973      	cbnz	r3, 80289e8 <mbedtls_x509_crt_parse_der+0x594>
 80289ca:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80289cc:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8028c94 <mbedtls_x509_crt_parse_der+0x840>
        if( ret != 0 )
 80289d0:	e05d      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
            if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
 80289d2:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
 80289d6:	d007      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 80289d8:	9d02      	ldr	r5, [sp, #8]
 80289da:	4699      	mov	r9, r3
 80289dc:	e057      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80289de:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80289e2:	2b00      	cmp	r3, #0
 80289e4:	f040 8094 	bne.w	8028b10 <mbedtls_x509_crt_parse_der+0x6bc>
    while( *p < end )
 80289e8:	9b06      	ldr	r3, [sp, #24]
 80289ea:	9a03      	ldr	r2, [sp, #12]
 80289ec:	429a      	cmp	r2, r3
 80289ee:	f240 8099 	bls.w	8028b24 <mbedtls_x509_crt_parse_der+0x6d0>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80289f2:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 80289f6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 80289fa:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 80289fe:	f8cd b020 	str.w	fp, [sp, #32]
        int ext_type = 0;
 8028a02:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028a06:	2330      	movs	r3, #48	; 0x30
 8028a08:	aa07      	add	r2, sp, #28
 8028a0a:	9903      	ldr	r1, [sp, #12]
 8028a0c:	a806      	add	r0, sp, #24
 8028a0e:	f7e9 fa20 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028a12:	2800      	cmp	r0, #0
 8028a14:	f47f aef4 	bne.w	8028800 <mbedtls_x509_crt_parse_der+0x3ac>
        end_ext_data = *p + len;
 8028a18:	9a06      	ldr	r2, [sp, #24]
 8028a1a:	9b07      	ldr	r3, [sp, #28]
 8028a1c:	eb02 0a03 	add.w	sl, r2, r3
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &extn_oid.len,
 8028a20:	2306      	movs	r3, #6
 8028a22:	aa15      	add	r2, sp, #84	; 0x54
 8028a24:	4651      	mov	r1, sl
 8028a26:	a806      	add	r0, sp, #24
 8028a28:	f7e9 fa13 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028a2c:	2800      	cmp	r0, #0
 8028a2e:	f47f aeef 	bne.w	8028810 <mbedtls_x509_crt_parse_der+0x3bc>
        extn_oid.tag = MBEDTLS_ASN1_OID;
 8028a32:	2306      	movs	r3, #6
 8028a34:	9314      	str	r3, [sp, #80]	; 0x50
        extn_oid.p = *p;
 8028a36:	9b06      	ldr	r3, [sp, #24]
 8028a38:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8028a3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8028a3c:	4413      	add	r3, r2
 8028a3e:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8028a40:	aa08      	add	r2, sp, #32
 8028a42:	4651      	mov	r1, sl
 8028a44:	a806      	add	r0, sp, #24
 8028a46:	f7e9 fa17 	bl	8011e78 <mbedtls_asn1_get_bool>
 8028a4a:	b118      	cbz	r0, 8028a54 <mbedtls_x509_crt_parse_der+0x600>
 8028a4c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8028a50:	f47f aee2 	bne.w	8028818 <mbedtls_x509_crt_parse_der+0x3c4>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8028a54:	2304      	movs	r3, #4
 8028a56:	aa07      	add	r2, sp, #28
 8028a58:	4651      	mov	r1, sl
 8028a5a:	a806      	add	r0, sp, #24
 8028a5c:	f7e9 f9f9 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028a60:	2800      	cmp	r0, #0
 8028a62:	f47f aedd 	bne.w	8028820 <mbedtls_x509_crt_parse_der+0x3cc>
        end_ext_octet = *p + len;
 8028a66:	9d06      	ldr	r5, [sp, #24]
 8028a68:	9b07      	ldr	r3, [sp, #28]
 8028a6a:	441d      	add	r5, r3
        if( end_ext_octet != end_ext_data )
 8028a6c:	45aa      	cmp	sl, r5
 8028a6e:	f040 80fb 	bne.w	8028c68 <mbedtls_x509_crt_parse_der+0x814>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8028a72:	a909      	add	r1, sp, #36	; 0x24
 8028a74:	a814      	add	r0, sp, #80	; 0x50
 8028a76:	f7f1 f98b 	bl	8019d90 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 8028a7a:	2800      	cmp	r0, #0
 8028a7c:	f43f aed4 	beq.w	8028828 <mbedtls_x509_crt_parse_der+0x3d4>
            *p = end_ext_octet;
 8028a80:	9506      	str	r5, [sp, #24]
            if( is_critical )
 8028a82:	9b08      	ldr	r3, [sp, #32]
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d0af      	beq.n	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 8028a88:	9d02      	ldr	r5, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028a8a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8028c98 <mbedtls_x509_crt_parse_der+0x844>
            mbedtls_x509_crt_free( crt );
 8028a8e:	4620      	mov	r0, r4
 8028a90:	f7ff fc73 	bl	802837a <mbedtls_x509_crt_free>
            return( ret );
 8028a94:	e60c      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8028a96:	f5a0 5314 	sub.w	r3, r0, #9472	; 0x2500
 8028a9a:	e7a2      	b.n	80289e2 <mbedtls_x509_crt_parse_der+0x58e>
            *p += tag_len;
 8028a9c:	9b06      	ldr	r3, [sp, #24]
 8028a9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028aa0:	4413      	add	r3, r2
 8028aa2:	9306      	str	r3, [sp, #24]
            continue;
 8028aa4:	e00a      	b.n	8028abc <mbedtls_x509_crt_parse_der+0x668>
        buf->tag = tag;
 8028aa6:	2382      	movs	r3, #130	; 0x82
 8028aa8:	f8c9 3000 	str.w	r3, [r9]
        buf->p = *p;
 8028aac:	9b06      	ldr	r3, [sp, #24]
 8028aae:	f8c9 3008 	str.w	r3, [r9, #8]
        buf->len = tag_len;
 8028ab2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8028ab4:	f8c9 2004 	str.w	r2, [r9, #4]
        *p += buf->len;
 8028ab8:	4413      	add	r3, r2
 8028aba:	9306      	str	r3, [sp, #24]
    while( *p < end )
 8028abc:	9b06      	ldr	r3, [sp, #24]
 8028abe:	429d      	cmp	r5, r3
 8028ac0:	f67f aef5 	bls.w	80288ae <mbedtls_x509_crt_parse_der+0x45a>
        if( ( end - *p ) < 1 )
 8028ac4:	1aea      	subs	r2, r5, r3
 8028ac6:	2a00      	cmp	r2, #0
 8028ac8:	dd60      	ble.n	8028b8c <mbedtls_x509_crt_parse_der+0x738>
        tag = **p;
 8028aca:	f813 ab01 	ldrb.w	sl, [r3], #1
        (*p)++;
 8028ace:	9306      	str	r3, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8028ad0:	aa17      	add	r2, sp, #92	; 0x5c
 8028ad2:	4629      	mov	r1, r5
 8028ad4:	a806      	add	r0, sp, #24
 8028ad6:	f7e9 f957 	bl	8011d88 <mbedtls_asn1_get_len>
 8028ada:	2800      	cmp	r0, #0
 8028adc:	d1db      	bne.n	8028a96 <mbedtls_x509_crt_parse_der+0x642>
        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8028ade:	f00a 03c0 	and.w	r3, sl, #192	; 0xc0
 8028ae2:	2b80      	cmp	r3, #128	; 0x80
 8028ae4:	d156      	bne.n	8028b94 <mbedtls_x509_crt_parse_der+0x740>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8028ae6:	f1ba 0f82 	cmp.w	sl, #130	; 0x82
 8028aea:	d1d7      	bne.n	8028a9c <mbedtls_x509_crt_parse_der+0x648>
        if( cur->buf.p != NULL )
 8028aec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8028af0:	2b00      	cmp	r3, #0
 8028af2:	d0d8      	beq.n	8028aa6 <mbedtls_x509_crt_parse_der+0x652>
            if( cur->next != NULL )
 8028af4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8028af8:	2b00      	cmp	r3, #0
 8028afa:	d14f      	bne.n	8028b9c <mbedtls_x509_crt_parse_der+0x748>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8028afc:	2110      	movs	r1, #16
 8028afe:	2001      	movs	r0, #1
 8028b00:	f000 f9c4 	bl	8028e8c <mbedtls_calloc>
 8028b04:	f8c9 000c 	str.w	r0, [r9, #12]
            if( cur->next == NULL )
 8028b08:	2800      	cmp	r0, #0
 8028b0a:	d04b      	beq.n	8028ba4 <mbedtls_x509_crt_parse_der+0x750>
            cur = cur->next;
 8028b0c:	4681      	mov	r9, r0
 8028b0e:	e7ca      	b.n	8028aa6 <mbedtls_x509_crt_parse_der+0x652>
 8028b10:	9d02      	ldr	r5, [sp, #8]
 8028b12:	4699      	mov	r9, r3
 8028b14:	e7bb      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8028b16:	f5b0 5314 	subs.w	r3, r0, #9472	; 0x2500
 8028b1a:	f43f af65 	beq.w	80289e8 <mbedtls_x509_crt_parse_der+0x594>
 8028b1e:	9d02      	ldr	r5, [sp, #8]
 8028b20:	4699      	mov	r9, r3
 8028b22:	e7b4      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028b24:	9d02      	ldr	r5, [sp, #8]
    if( *p != end )
 8028b26:	9a03      	ldr	r2, [sp, #12]
 8028b28:	429a      	cmp	r2, r3
 8028b2a:	f43f ad7d 	beq.w	8028628 <mbedtls_x509_crt_parse_der+0x1d4>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028b2e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8028c8c <mbedtls_x509_crt_parse_der+0x838>
        if( ret != 0 )
 8028b32:	e7ac      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
        mbedtls_x509_crt_free( crt );
 8028b34:	4620      	mov	r0, r4
 8028b36:	f7ff fc20 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8028b3a:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8028c7c <mbedtls_x509_crt_parse_der+0x828>
 8028b3e:	e5b7      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 8028b40:	4620      	mov	r0, r4
 8028b42:	f7ff fc1a 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 8028b46:	e5b3      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 8028b48:	4620      	mov	r0, r4
 8028b4a:	f7ff fc16 	bl	802837a <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8028b4e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8028c9c <mbedtls_x509_crt_parse_der+0x848>
 8028b52:	e5ad      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        mbedtls_x509_crt_free( crt );
 8028b54:	4620      	mov	r0, r4
 8028b56:	f7ff fc10 	bl	802837a <mbedtls_x509_crt_free>
        return( ret );
 8028b5a:	e5a9      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8028b5c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8028ca0 <mbedtls_x509_crt_parse_der+0x84c>
 8028b60:	e4d1      	b.n	8028506 <mbedtls_x509_crt_parse_der+0xb2>
 8028b62:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8028ca0 <mbedtls_x509_crt_parse_der+0x84c>
 8028b66:	e4ce      	b.n	8028506 <mbedtls_x509_crt_parse_der+0xb2>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8028b68:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8028ca4 <mbedtls_x509_crt_parse_der+0x850>
 8028b6c:	e4cb      	b.n	8028506 <mbedtls_x509_crt_parse_der+0xb2>
        crt = crt->next;
 8028b6e:	4614      	mov	r4, r2
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8028b70:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8028ca0 <mbedtls_x509_crt_parse_der+0x84c>
 8028b74:	e59c      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8028b76:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8028ca4 <mbedtls_x509_crt_parse_der+0x850>
 8028b7a:	e599      	b.n	80286b0 <mbedtls_x509_crt_parse_der+0x25c>
 8028b7c:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028b7e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8028c94 <mbedtls_x509_crt_parse_der+0x840>
 8028b82:	e784      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028b84:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028b86:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8028c8c <mbedtls_x509_crt_parse_der+0x838>
 8028b8a:	e780      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028b8c:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028b8e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8028ca8 <mbedtls_x509_crt_parse_der+0x854>
 8028b92:	e77c      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028b94:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028b96:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8028c98 <mbedtls_x509_crt_parse_der+0x844>
 8028b9a:	e778      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028b9c:	9d02      	ldr	r5, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8028b9e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8028cac <mbedtls_x509_crt_parse_der+0x858>
 8028ba2:	e774      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028ba4:	9d02      	ldr	r5, [sp, #8]
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028ba6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8028cb0 <mbedtls_x509_crt_parse_der+0x85c>
 8028baa:	e770      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028bac:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028bae:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8028c8c <mbedtls_x509_crt_parse_der+0x838>
 8028bb2:	e76c      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028bb4:	9d02      	ldr	r5, [sp, #8]
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028bb6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8028c94 <mbedtls_x509_crt_parse_der+0x840>
 8028bba:	e768      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 8028bbc:	2300      	movs	r3, #0
 8028bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8028bc0:	930c      	str	r3, [sp, #48]	; 0x30
 8028bc2:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 8028bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8028bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8028bc8:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 8028bca:	9311      	str	r3, [sp, #68]	; 0x44
 8028bcc:	9312      	str	r3, [sp, #72]	; 0x48
 8028bce:	9313      	str	r3, [sp, #76]	; 0x4c
    p = (unsigned char*) buf;
 8028bd0:	9706      	str	r7, [sp, #24]
    len = buflen;
 8028bd2:	9605      	str	r6, [sp, #20]
    end = p + len;
 8028bd4:	443e      	add	r6, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8028bd6:	2330      	movs	r3, #48	; 0x30
 8028bd8:	aa05      	add	r2, sp, #20
 8028bda:	4631      	mov	r1, r6
 8028bdc:	a806      	add	r0, sp, #24
 8028bde:	f7e9 f938 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028be2:	2800      	cmp	r0, #0
 8028be4:	f47f ac6c 	bne.w	80284c0 <mbedtls_x509_crt_parse_der+0x6c>
    if( len > (size_t) ( end - p ) )
 8028be8:	9b06      	ldr	r3, [sp, #24]
 8028bea:	9905      	ldr	r1, [sp, #20]
 8028bec:	1af6      	subs	r6, r6, r3
 8028bee:	428e      	cmp	r6, r1
 8028bf0:	f4ff ac6c 	bcc.w	80284cc <mbedtls_x509_crt_parse_der+0x78>
    crt_end = p + len;
 8028bf4:	4419      	add	r1, r3
    crt->raw.len = crt_end - buf;
 8028bf6:	1bc9      	subs	r1, r1, r7
 8028bf8:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8028bfa:	2001      	movs	r0, #1
 8028bfc:	f000 f946 	bl	8028e8c <mbedtls_calloc>
 8028c00:	9006      	str	r0, [sp, #24]
 8028c02:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8028c04:	2800      	cmp	r0, #0
 8028c06:	d0b6      	beq.n	8028b76 <mbedtls_x509_crt_parse_der+0x722>
    memcpy( p, buf, crt->raw.len );
 8028c08:	6862      	ldr	r2, [r4, #4]
 8028c0a:	4639      	mov	r1, r7
 8028c0c:	f001 fc95 	bl	802a53a <memcpy>
    p += crt->raw.len - len;
 8028c10:	9e06      	ldr	r6, [sp, #24]
 8028c12:	6862      	ldr	r2, [r4, #4]
 8028c14:	9b05      	ldr	r3, [sp, #20]
 8028c16:	1ad3      	subs	r3, r2, r3
 8028c18:	4433      	add	r3, r6
 8028c1a:	9306      	str	r3, [sp, #24]
    end = crt_end = p + len;
 8028c1c:	4416      	add	r6, r2
    crt->tbs.p = p;
 8028c1e:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8028c20:	2330      	movs	r3, #48	; 0x30
 8028c22:	aa05      	add	r2, sp, #20
 8028c24:	4631      	mov	r1, r6
 8028c26:	a806      	add	r0, sp, #24
 8028c28:	f7e9 f913 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028c2c:	4681      	mov	r9, r0
 8028c2e:	2800      	cmp	r0, #0
 8028c30:	f47f ac52 	bne.w	80284d8 <mbedtls_x509_crt_parse_der+0x84>
    end = p + len;
 8028c34:	9f06      	ldr	r7, [sp, #24]
 8028c36:	9b05      	ldr	r3, [sp, #20]
 8028c38:	441f      	add	r7, r3
    crt->tbs.len = end - crt->tbs.p;
 8028c3a:	6963      	ldr	r3, [r4, #20]
 8028c3c:	1afb      	subs	r3, r7, r3
 8028c3e:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8028c40:	23a0      	movs	r3, #160	; 0xa0
 8028c42:	aa17      	add	r2, sp, #92	; 0x5c
 8028c44:	4639      	mov	r1, r7
 8028c46:	a806      	add	r0, sp, #24
 8028c48:	f7e9 f903 	bl	8011e52 <mbedtls_asn1_get_tag>
 8028c4c:	2800      	cmp	r0, #0
 8028c4e:	f43f ac5e 	beq.w	802850e <mbedtls_x509_crt_parse_der+0xba>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8028c52:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8028c56:	f43f ac45 	beq.w	80284e4 <mbedtls_x509_crt_parse_der+0x90>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8028c5a:	f5a0 5906 	sub.w	r9, r0, #8576	; 0x2180
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8028c5e:	f1b9 0f00 	cmp.w	r9, #0
 8028c62:	f47f ac49 	bne.w	80284f8 <mbedtls_x509_crt_parse_der+0xa4>
 8028c66:	e43f      	b.n	80284e8 <mbedtls_x509_crt_parse_der+0x94>
 8028c68:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8028c6a:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8028c8c <mbedtls_x509_crt_parse_der+0x838>
 8028c6e:	e70e      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028c70:	9d02      	ldr	r5, [sp, #8]
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8028c72:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8028cac <mbedtls_x509_crt_parse_der+0x858>
 8028c76:	e70a      	b.n	8028a8e <mbedtls_x509_crt_parse_der+0x63a>
 8028c78:	ffffde80 	.word	0xffffde80
 8028c7c:	ffffde1a 	.word	0xffffde1a
 8028c80:	ffffdd9a 	.word	0xffffdd9a
 8028c84:	ffffda80 	.word	0xffffda80
 8028c88:	ffffdb9a 	.word	0xffffdb9a
 8028c8c:	ffffda9a 	.word	0xffffda9a
 8028c90:	ffffdf80 	.word	0xffffdf80
 8028c94:	ffffda9c 	.word	0xffffda9c
 8028c98:	ffffda9e 	.word	0xffffda9e
 8028c9c:	ffffd980 	.word	0xffffd980
 8028ca0:	ffffd800 	.word	0xffffd800
 8028ca4:	ffffd780 	.word	0xffffd780
 8028ca8:	ffffdaa0 	.word	0xffffdaa0
 8028cac:	ffffdb00 	.word	0xffffdb00
 8028cb0:	ffffda96 	.word	0xffffda96

08028cb4 <mbedtls_x509_crt_parse>:
{
 8028cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cb8:	b08b      	sub	sp, #44	; 0x2c
    if( chain == NULL || buf == NULL )
 8028cba:	2800      	cmp	r0, #0
 8028cbc:	d06b      	beq.n	8028d96 <mbedtls_x509_crt_parse+0xe2>
 8028cbe:	460c      	mov	r4, r1
 8028cc0:	4615      	mov	r5, r2
 8028cc2:	4681      	mov	r9, r0
 8028cc4:	2900      	cmp	r1, #0
 8028cc6:	d068      	beq.n	8028d9a <mbedtls_x509_crt_parse+0xe6>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8028cc8:	b392      	cbz	r2, 8028d30 <mbedtls_x509_crt_parse+0x7c>
 8028cca:	188b      	adds	r3, r1, r2
 8028ccc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8028cd0:	bb73      	cbnz	r3, 8028d30 <mbedtls_x509_crt_parse+0x7c>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8028cd2:	4935      	ldr	r1, [pc, #212]	; (8028da8 <mbedtls_x509_crt_parse+0xf4>)
 8028cd4:	4620      	mov	r0, r4
 8028cd6:	f002 f9ae 	bl	802b036 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8028cda:	b348      	cbz	r0, 8028d30 <mbedtls_x509_crt_parse+0x7c>
        while( buflen > 1 )
 8028cdc:	2d01      	cmp	r5, #1
 8028cde:	d960      	bls.n	8028da2 <mbedtls_x509_crt_parse+0xee>
    int success = 0, first_error = 0, total_failed = 0;
 8028ce0:	f04f 0800 	mov.w	r8, #0
 8028ce4:	4646      	mov	r6, r8
 8028ce6:	f8cd 8014 	str.w	r8, [sp, #20]
            ret = mbedtls_pem_read_buffer( &pem,
 8028cea:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8028db4 <mbedtls_x509_crt_parse+0x100>
 8028cee:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8028da8 <mbedtls_x509_crt_parse+0xf4>
            mbedtls_pem_init( &pem );
 8028cf2:	a807      	add	r0, sp, #28
 8028cf4:	f7f1 f910 	bl	8019f18 <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8028cf8:	ab06      	add	r3, sp, #24
 8028cfa:	9302      	str	r3, [sp, #8]
 8028cfc:	2300      	movs	r3, #0
 8028cfe:	9301      	str	r3, [sp, #4]
 8028d00:	9300      	str	r3, [sp, #0]
 8028d02:	4623      	mov	r3, r4
 8028d04:	465a      	mov	r2, fp
 8028d06:	4651      	mov	r1, sl
 8028d08:	a807      	add	r0, sp, #28
 8028d0a:	f7f1 f90b 	bl	8019f24 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 8028d0e:	4607      	mov	r7, r0
 8028d10:	b1c0      	cbz	r0, 8028d44 <mbedtls_x509_crt_parse+0x90>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8028d12:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8028d16:	d03c      	beq.n	8028d92 <mbedtls_x509_crt_parse+0xde>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8028d18:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8028d1c:	d122      	bne.n	8028d64 <mbedtls_x509_crt_parse+0xb0>
    if( success )
 8028d1e:	9b05      	ldr	r3, [sp, #20]
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	d13c      	bne.n	8028d9e <mbedtls_x509_crt_parse+0xea>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 8028d24:	f5a3 531e 	sub.w	r3, r3, #10112	; 0x2780
 8028d28:	2e00      	cmp	r6, #0
 8028d2a:	bf08      	it	eq
 8028d2c:	461e      	moveq	r6, r3
 8028d2e:	e005      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8028d30:	462a      	mov	r2, r5
 8028d32:	4621      	mov	r1, r4
 8028d34:	4648      	mov	r0, r9
 8028d36:	f7ff fb8d 	bl	8028454 <mbedtls_x509_crt_parse_der>
 8028d3a:	4606      	mov	r6, r0
}
 8028d3c:	4630      	mov	r0, r6
 8028d3e:	b00b      	add	sp, #44	; 0x2c
 8028d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buflen -= use_len;
 8028d44:	9b06      	ldr	r3, [sp, #24]
 8028d46:	1aed      	subs	r5, r5, r3
                buf += use_len;
 8028d48:	441c      	add	r4, r3
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8028d4a:	9a08      	ldr	r2, [sp, #32]
 8028d4c:	9907      	ldr	r1, [sp, #28]
 8028d4e:	4648      	mov	r0, r9
 8028d50:	f7ff fb80 	bl	8028454 <mbedtls_x509_crt_parse_der>
 8028d54:	4607      	mov	r7, r0
            mbedtls_pem_free( &pem );
 8028d56:	a807      	add	r0, sp, #28
 8028d58:	f7f1 f976 	bl	801a048 <mbedtls_pem_free>
            if( ret != 0 )
 8028d5c:	b987      	cbnz	r7, 8028d80 <mbedtls_x509_crt_parse+0xcc>
            success = 1;
 8028d5e:	2301      	movs	r3, #1
 8028d60:	9305      	str	r3, [sp, #20]
 8028d62:	e00a      	b.n	8028d7a <mbedtls_x509_crt_parse+0xc6>
                mbedtls_pem_free( &pem );
 8028d64:	a807      	add	r0, sp, #28
 8028d66:	f7f1 f96f 	bl	801a048 <mbedtls_pem_free>
                buflen -= use_len;
 8028d6a:	9b06      	ldr	r3, [sp, #24]
 8028d6c:	1aed      	subs	r5, r5, r3
                buf += use_len;
 8028d6e:	441c      	add	r4, r3
                    first_error = ret;
 8028d70:	2e00      	cmp	r6, #0
 8028d72:	bf08      	it	eq
 8028d74:	463e      	moveq	r6, r7
                total_failed++;
 8028d76:	f108 0801 	add.w	r8, r8, #1
        while( buflen > 1 )
 8028d7a:	2d01      	cmp	r5, #1
 8028d7c:	d8b9      	bhi.n	8028cf2 <mbedtls_x509_crt_parse+0x3e>
 8028d7e:	e7ce      	b.n	8028d1e <mbedtls_x509_crt_parse+0x6a>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8028d80:	f517 5f22 	cmn.w	r7, #10368	; 0x2880
 8028d84:	d005      	beq.n	8028d92 <mbedtls_x509_crt_parse+0xde>
                    first_error = ret;
 8028d86:	2e00      	cmp	r6, #0
 8028d88:	bf08      	it	eq
 8028d8a:	463e      	moveq	r6, r7
                total_failed++;
 8028d8c:	f108 0801 	add.w	r8, r8, #1
                continue;
 8028d90:	e7f3      	b.n	8028d7a <mbedtls_x509_crt_parse+0xc6>
 8028d92:	463e      	mov	r6, r7
 8028d94:	e7d2      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8028d96:	4e05      	ldr	r6, [pc, #20]	; (8028dac <mbedtls_x509_crt_parse+0xf8>)
 8028d98:	e7d0      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
 8028d9a:	4e04      	ldr	r6, [pc, #16]	; (8028dac <mbedtls_x509_crt_parse+0xf8>)
 8028d9c:	e7ce      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
 8028d9e:	4646      	mov	r6, r8
 8028da0:	e7cc      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 8028da2:	4e03      	ldr	r6, [pc, #12]	; (8028db0 <mbedtls_x509_crt_parse+0xfc>)
 8028da4:	e7ca      	b.n	8028d3c <mbedtls_x509_crt_parse+0x88>
 8028da6:	bf00      	nop
 8028da8:	0803653c 	.word	0x0803653c
 8028dac:	ffffd800 	.word	0xffffd800
 8028db0:	ffffd880 	.word	0xffffd880
 8028db4:	08036558 	.word	0x08036558

08028db8 <my_debug>:
{
	vPortFree(ptr);
}
#endif

static void my_debug(void *ctx, int level, const char *file, int line, const char *str) {
 8028db8:	b510      	push	{r4, lr}
 8028dba:	b082      	sub	sp, #8
 8028dbc:	4604      	mov	r4, r0
	((void) level);
	mbedtls_fprintf((FILE*) ctx, "%s:%04d: %s", file, line, str);
 8028dbe:	9904      	ldr	r1, [sp, #16]
 8028dc0:	9100      	str	r1, [sp, #0]
 8028dc2:	4904      	ldr	r1, [pc, #16]	; (8028dd4 <my_debug+0x1c>)
 8028dc4:	f001 fb52 	bl	802a46c <fiprintf>
	fflush((FILE*) ctx);
 8028dc8:	4620      	mov	r0, r4
 8028dca:	f001 fa67 	bl	802a29c <fflush>
}
 8028dce:	b002      	add	sp, #8
 8028dd0:	bd10      	pop	{r4, pc}
 8028dd2:	bf00      	nop
 8028dd4:	08036594 	.word	0x08036594

08028dd8 <net_read>:

	return 0;
}

//receive data
int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8028dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028dda:	460e      	mov	r6, r1
 8028ddc:	4614      	mov	r4, r2
	int received = 0;
	int error = 0;
	int complete = 0;

	//set timeout
	if (timeout_ms != 0) {
 8028dde:	b96b      	cbnz	r3, 8028dfc <net_read+0x24>
int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8028de0:	2500      	movs	r5, #0
		mbedtls_ssl_conf_read_timeout(&conf, timeout_ms);
	}

	//read until received length is bigger than variable len
	do {
		ret = mbedtls_ssl_read(&ssl, buffer, len);
 8028de2:	4f0c      	ldr	r7, [pc, #48]	; (8028e14 <net_read+0x3c>)
 8028de4:	4622      	mov	r2, r4
 8028de6:	4631      	mov	r1, r6
 8028de8:	4638      	mov	r0, r7
 8028dea:	f7fc ffe5 	bl	8025db8 <mbedtls_ssl_read>
		if (ret > 0) {
 8028dee:	2800      	cmp	r0, #0
 8028df0:	dd09      	ble.n	8028e06 <net_read+0x2e>
			received += ret;
 8028df2:	4405      	add	r5, r0
		} else if (ret != MBEDTLS_ERR_SSL_WANT_READ) {
			error = 1;
		}
		if (received >= len) {
 8028df4:	42ac      	cmp	r4, r5
 8028df6:	dcf5      	bgt.n	8028de4 <net_read+0xc>
			complete = 1;
		}
	} while (!error && !complete);

	return received;
}
 8028df8:	4628      	mov	r0, r5
 8028dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028dfc:	4619      	mov	r1, r3
		mbedtls_ssl_conf_read_timeout(&conf, timeout_ms);
 8028dfe:	4806      	ldr	r0, [pc, #24]	; (8028e18 <net_read+0x40>)
 8028e00:	f7fc fefd 	bl	8025bfe <mbedtls_ssl_conf_read_timeout>
 8028e04:	e7ec      	b.n	8028de0 <net_read+0x8>
		if (received >= len) {
 8028e06:	42a5      	cmp	r5, r4
 8028e08:	daf6      	bge.n	8028df8 <net_read+0x20>
	} while (!error && !complete);
 8028e0a:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8028e0e:	d0e9      	beq.n	8028de4 <net_read+0xc>
 8028e10:	e7f2      	b.n	8028df8 <net_read+0x20>
 8028e12:	bf00      	nop
 8028e14:	200148e0 	.word	0x200148e0
 8028e18:	2001468c 	.word	0x2001468c

08028e1c <net_write>:

//send data
int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8028e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;
	int written;

	//check all bytes are written
	for (written = 0; written < len; written += ret) {
 8028e20:	f1b2 0800 	subs.w	r8, r2, #0
 8028e24:	bfd8      	it	le
 8028e26:	2000      	movle	r0, #0
 8028e28:	dd16      	ble.n	8028e58 <net_write+0x3c>
 8028e2a:	4689      	mov	r9, r1
 8028e2c:	2700      	movs	r7, #0
		while ((ret = mbedtls_ssl_write(&ssl, buffer + written, len - written)) <= 0) {
 8028e2e:	4e0c      	ldr	r6, [pc, #48]	; (8028e60 <net_write+0x44>)
 8028e30:	e002      	b.n	8028e38 <net_write+0x1c>
	for (written = 0; written < len; written += ret) {
 8028e32:	4407      	add	r7, r0
 8028e34:	45b8      	cmp	r8, r7
 8028e36:	dd11      	ble.n	8028e5c <net_write+0x40>
		while ((ret = mbedtls_ssl_write(&ssl, buffer + written, len - written)) <= 0) {
 8028e38:	eba8 0507 	sub.w	r5, r8, r7
 8028e3c:	eb09 0407 	add.w	r4, r9, r7
 8028e40:	462a      	mov	r2, r5
 8028e42:	4621      	mov	r1, r4
 8028e44:	4630      	mov	r0, r6
 8028e46:	f7fd f8f5 	bl	8026034 <mbedtls_ssl_write>
 8028e4a:	2800      	cmp	r0, #0
 8028e4c:	dcf1      	bgt.n	8028e32 <net_write+0x16>
			if (ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE) {
 8028e4e:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8028e52:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8028e56:	d0f3      	beq.n	8028e40 <net_write+0x24>
			}
		}
	}

	return written;
}
 8028e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (written = 0; written < len; written += ret) {
 8028e5c:	4638      	mov	r0, r7
 8028e5e:	e7fb      	b.n	8028e58 <net_write+0x3c>
 8028e60:	200148e0 	.word	0x200148e0

08028e64 <net_disconnect>:

//disconnect ssl
void net_disconnect(Network *n) {
 8028e64:	b510      	push	{r4, lr}
	int ret;

	do {
		ret = mbedtls_ssl_close_notify(&ssl);
 8028e66:	4c07      	ldr	r4, [pc, #28]	; (8028e84 <net_disconnect+0x20>)
 8028e68:	4620      	mov	r0, r4
 8028e6a:	f7fd f95d 	bl	8026128 <mbedtls_ssl_close_notify>
	} while (ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 8028e6e:	f510 4fd1 	cmn.w	r0, #26752	; 0x6880
 8028e72:	d0f9      	beq.n	8028e68 <net_disconnect+0x4>

	mbedtls_ssl_session_reset(&ssl);
 8028e74:	4803      	ldr	r0, [pc, #12]	; (8028e84 <net_disconnect+0x20>)
 8028e76:	f7fd fb47 	bl	8026508 <mbedtls_ssl_session_reset>
	mbedtls_net_free(&server_fd);
 8028e7a:	4803      	ldr	r0, [pc, #12]	; (8028e88 <net_disconnect+0x24>)
 8028e7c:	f001 f81a 	bl	8029eb4 <mbedtls_net_free>
}
 8028e80:	bd10      	pop	{r4, pc}
 8028e82:	bf00      	nop
 8028e84:	200148e0 	.word	0x200148e0
 8028e88:	20014834 	.word	0x20014834

08028e8c <mbedtls_calloc>:
{
 8028e8c:	b538      	push	{r3, r4, r5, lr}
	const size_t poolSize = n * size;
 8028e8e:	fb01 f400 	mul.w	r4, r1, r0
	void *p = pvPortMalloc(poolSize);
 8028e92:	4620      	mov	r0, r4
 8028e94:	f7da fe3c 	bl	8003b10 <pvPortMalloc>
	if (p != NULL)
 8028e98:	4605      	mov	r5, r0
 8028e9a:	b118      	cbz	r0, 8028ea4 <mbedtls_calloc+0x18>
		memset(p, 0, poolSize);
 8028e9c:	4622      	mov	r2, r4
 8028e9e:	2100      	movs	r1, #0
 8028ea0:	f001 fb73 	bl	802a58a <memset>
}
 8028ea4:	4628      	mov	r0, r5
 8028ea6:	bd38      	pop	{r3, r4, r5, pc}

08028ea8 <mbedtls_free>:
{
 8028ea8:	b508      	push	{r3, lr}
	vPortFree(ptr);
 8028eaa:	f7da fec9 	bl	8003c40 <vPortFree>
}
 8028eae:	bd08      	pop	{r3, pc}

08028eb0 <net_init>:
int net_init(Network *n, char *host) {
 8028eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028eb4:	b082      	sub	sp, #8
 8028eb6:	4604      	mov	r4, r0
 8028eb8:	460e      	mov	r6, r1
	mbedtls_debug_set_threshold(DEBUG_LEVEL);
 8028eba:	2001      	movs	r0, #1
 8028ebc:	f7ec fc22 	bl	8015704 <mbedtls_debug_set_threshold>
	mbedtls_ssl_init(&ssl);
 8028ec0:	485c      	ldr	r0, [pc, #368]	; (8029034 <net_init+0x184>)
 8028ec2:	f7fc fe83 	bl	8025bcc <mbedtls_ssl_init>
	mbedtls_ssl_config_init(&conf);
 8028ec6:	485c      	ldr	r0, [pc, #368]	; (8029038 <net_init+0x188>)
 8028ec8:	f7fd fbca 	bl	8026660 <mbedtls_ssl_config_init>
	mbedtls_x509_crt_init(&cacert);
 8028ecc:	485b      	ldr	r0, [pc, #364]	; (802903c <net_init+0x18c>)
 8028ece:	f7ff fa4d 	bl	802836c <mbedtls_x509_crt_init>
	mbedtls_x509_crt_init(&cli_cert);
 8028ed2:	485b      	ldr	r0, [pc, #364]	; (8029040 <net_init+0x190>)
 8028ed4:	f7ff fa4a 	bl	802836c <mbedtls_x509_crt_init>
	mbedtls_pk_init(&cli_key);
 8028ed8:	485a      	ldr	r0, [pc, #360]	; (8029044 <net_init+0x194>)
 8028eda:	f7f1 f8c7 	bl	801a06c <mbedtls_pk_init>
	mbedtls_ctr_drbg_init(&ctr_drbg);
 8028ede:	4d5a      	ldr	r5, [pc, #360]	; (8029048 <net_init+0x198>)
 8028ee0:	4628      	mov	r0, r5
 8028ee2:	f7ec fb04 	bl	80154ee <mbedtls_ctr_drbg_init>
	mbedtls_entropy_init(&entropy);
 8028ee6:	4f59      	ldr	r7, [pc, #356]	; (802904c <net_init+0x19c>)
 8028ee8:	4638      	mov	r0, r7
 8028eea:	f7ef fb57 	bl	801859c <mbedtls_entropy_init>
	if ((ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, (const unsigned char*) pers,
 8028eee:	4b58      	ldr	r3, [pc, #352]	; (8029050 <net_init+0x1a0>)
 8028ef0:	f8d3 8000 	ldr.w	r8, [r3]
 8028ef4:	4640      	mov	r0, r8
 8028ef6:	f7d7 f985 	bl	8000204 <strlen>
 8028efa:	9000      	str	r0, [sp, #0]
 8028efc:	4643      	mov	r3, r8
 8028efe:	463a      	mov	r2, r7
 8028f00:	4954      	ldr	r1, [pc, #336]	; (8029054 <net_init+0x1a4>)
 8028f02:	4628      	mov	r0, r5
 8028f04:	f7ec fb79 	bl	80155fa <mbedtls_ctr_drbg_seed>
 8028f08:	2800      	cmp	r0, #0
 8028f0a:	f040 808f 	bne.w	802902c <net_init+0x17c>
 8028f0e:	4607      	mov	r7, r0
	ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char*) mbedtls_aws_root_certificate, mbedtls_aws_root_certificate_len);
 8028f10:	f240 628b 	movw	r2, #1675	; 0x68b
 8028f14:	4950      	ldr	r1, [pc, #320]	; (8029058 <net_init+0x1a8>)
 8028f16:	4849      	ldr	r0, [pc, #292]	; (802903c <net_init+0x18c>)
 8028f18:	f7ff fecc 	bl	8028cb4 <mbedtls_x509_crt_parse>
	if (ret < 0) {
 8028f1c:	2800      	cmp	r0, #0
 8028f1e:	db5b      	blt.n	8028fd8 <net_init+0x128>
	ret = mbedtls_x509_crt_parse(&cli_cert, (const unsigned char *) mbedtls_client_certificate, mbedtls_client_certificate_len);
 8028f20:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8028f24:	494d      	ldr	r1, [pc, #308]	; (802905c <net_init+0x1ac>)
 8028f26:	4846      	ldr	r0, [pc, #280]	; (8029040 <net_init+0x190>)
 8028f28:	f7ff fec4 	bl	8028cb4 <mbedtls_x509_crt_parse>
	if (ret < 0) {
 8028f2c:	2800      	cmp	r0, #0
 8028f2e:	db59      	blt.n	8028fe4 <net_init+0x134>
	ret = mbedtls_pk_parse_key(&cli_key, (const unsigned char *)mbedtls_client_key, mbedtls_client_key_len , (unsigned char const *)"", 0);
 8028f30:	2300      	movs	r3, #0
 8028f32:	9300      	str	r3, [sp, #0]
 8028f34:	4b4a      	ldr	r3, [pc, #296]	; (8029060 <net_init+0x1b0>)
 8028f36:	f240 62ab 	movw	r2, #1707	; 0x6ab
 8028f3a:	494a      	ldr	r1, [pc, #296]	; (8029064 <net_init+0x1b4>)
 8028f3c:	4841      	ldr	r0, [pc, #260]	; (8029044 <net_init+0x194>)
 8028f3e:	f7f1 ff15 	bl	801ad6c <mbedtls_pk_parse_key>
	if (ret < 0) {
 8028f42:	2800      	cmp	r0, #0
 8028f44:	db54      	blt.n	8028ff0 <net_init+0x140>
	ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 8028f46:	2300      	movs	r3, #0
 8028f48:	461a      	mov	r2, r3
 8028f4a:	4619      	mov	r1, r3
 8028f4c:	483a      	ldr	r0, [pc, #232]	; (8029038 <net_init+0x188>)
 8028f4e:	f7fd fb8d 	bl	802666c <mbedtls_ssl_config_defaults>
	if (ret < 0) {
 8028f52:	2800      	cmp	r0, #0
 8028f54:	db52      	blt.n	8028ffc <net_init+0x14c>
	mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8028f56:	4d38      	ldr	r5, [pc, #224]	; (8029038 <net_init+0x188>)
 8028f58:	2101      	movs	r1, #1
 8028f5a:	4628      	mov	r0, r5
 8028f5c:	f7fc fe3c 	bl	8025bd8 <mbedtls_ssl_conf_authmode>
	mbedtls_ssl_conf_ca_chain(&conf, &cacert, NULL);
 8028f60:	2200      	movs	r2, #0
 8028f62:	4936      	ldr	r1, [pc, #216]	; (802903c <net_init+0x18c>)
 8028f64:	4628      	mov	r0, r5
 8028f66:	f7fc fe6b 	bl	8025c40 <mbedtls_ssl_conf_ca_chain>
	mbedtls_ssl_conf_rng(&conf, mbedtls_ctr_drbg_random, &ctr_drbg);
 8028f6a:	4a37      	ldr	r2, [pc, #220]	; (8029048 <net_init+0x198>)
 8028f6c:	493e      	ldr	r1, [pc, #248]	; (8029068 <net_init+0x1b8>)
 8028f6e:	4628      	mov	r0, r5
 8028f70:	f7fc fe39 	bl	8025be6 <mbedtls_ssl_conf_rng>
	mbedtls_ssl_conf_dbg(&conf, my_debug, stdout);
 8028f74:	4b3d      	ldr	r3, [pc, #244]	; (802906c <net_init+0x1bc>)
 8028f76:	681b      	ldr	r3, [r3, #0]
 8028f78:	689a      	ldr	r2, [r3, #8]
 8028f7a:	493d      	ldr	r1, [pc, #244]	; (8029070 <net_init+0x1c0>)
 8028f7c:	4628      	mov	r0, r5
 8028f7e:	f7fc fe35 	bl	8025bec <mbedtls_ssl_conf_dbg>
	ret = mbedtls_ssl_conf_own_cert(&conf, &cli_cert, &cli_key);
 8028f82:	4a30      	ldr	r2, [pc, #192]	; (8029044 <net_init+0x194>)
 8028f84:	492e      	ldr	r1, [pc, #184]	; (8029040 <net_init+0x190>)
 8028f86:	4628      	mov	r0, r5
 8028f88:	f7fc fe3c 	bl	8025c04 <mbedtls_ssl_conf_own_cert>
	if (ret < 0) {
 8028f8c:	2800      	cmp	r0, #0
 8028f8e:	db3b      	blt.n	8029008 <net_init+0x158>
	mbedtls_ssl_conf_read_timeout(&conf, 1000);
 8028f90:	4d29      	ldr	r5, [pc, #164]	; (8029038 <net_init+0x188>)
 8028f92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8028f96:	4628      	mov	r0, r5
 8028f98:	f7fc fe31 	bl	8025bfe <mbedtls_ssl_conf_read_timeout>
	ret = mbedtls_ssl_setup(&ssl, &conf);
 8028f9c:	4629      	mov	r1, r5
 8028f9e:	4825      	ldr	r0, [pc, #148]	; (8029034 <net_init+0x184>)
 8028fa0:	f7fd fa52 	bl	8026448 <mbedtls_ssl_setup>
	if (ret < 0) {
 8028fa4:	2800      	cmp	r0, #0
 8028fa6:	db35      	blt.n	8029014 <net_init+0x164>
	ret = mbedtls_ssl_set_hostname(&ssl, host);
 8028fa8:	4631      	mov	r1, r6
 8028faa:	4822      	ldr	r0, [pc, #136]	; (8029034 <net_init+0x184>)
 8028fac:	f7fc fe66 	bl	8025c7c <mbedtls_ssl_set_hostname>
	if (ret < 0) {
 8028fb0:	2800      	cmp	r0, #0
 8028fb2:	db35      	blt.n	8029020 <net_init+0x170>
	mbedtls_ssl_set_bio(&ssl, &server_fd, mbedtls_net_send, mbedtls_net_recv, NULL);
 8028fb4:	2300      	movs	r3, #0
 8028fb6:	9300      	str	r3, [sp, #0]
 8028fb8:	4b2e      	ldr	r3, [pc, #184]	; (8029074 <net_init+0x1c4>)
 8028fba:	4a2f      	ldr	r2, [pc, #188]	; (8029078 <net_init+0x1c8>)
 8028fbc:	492f      	ldr	r1, [pc, #188]	; (802907c <net_init+0x1cc>)
 8028fbe:	481d      	ldr	r0, [pc, #116]	; (8029034 <net_init+0x184>)
 8028fc0:	f7fc fe17 	bl	8025bf2 <mbedtls_ssl_set_bio>
	n->mqttread = net_read; //receive function
 8028fc4:	4b2e      	ldr	r3, [pc, #184]	; (8029080 <net_init+0x1d0>)
 8028fc6:	6023      	str	r3, [r4, #0]
	n->mqttwrite = net_write; //send function
 8028fc8:	4b2e      	ldr	r3, [pc, #184]	; (8029084 <net_init+0x1d4>)
 8028fca:	6063      	str	r3, [r4, #4]
	n->disconnect = net_disconnect; //disconnection function
 8028fcc:	4b2e      	ldr	r3, [pc, #184]	; (8029088 <net_init+0x1d8>)
 8028fce:	60a3      	str	r3, [r4, #8]
}
 8028fd0:	4638      	mov	r0, r7
 8028fd2:	b002      	add	sp, #8
 8028fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("mbedtls_x509_crt_parse failed.\n");
 8028fd8:	482c      	ldr	r0, [pc, #176]	; (802908c <net_init+0x1dc>)
 8028fda:	f001 fefd 	bl	802add8 <puts>
		return -1;
 8028fde:	f04f 37ff 	mov.w	r7, #4294967295
 8028fe2:	e7f5      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_x509_crt_parse failed.\n");
 8028fe4:	4829      	ldr	r0, [pc, #164]	; (802908c <net_init+0x1dc>)
 8028fe6:	f001 fef7 	bl	802add8 <puts>
		return -1;
 8028fea:	f04f 37ff 	mov.w	r7, #4294967295
 8028fee:	e7ef      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_pk_parse_key failed.\n");
 8028ff0:	4827      	ldr	r0, [pc, #156]	; (8029090 <net_init+0x1e0>)
 8028ff2:	f001 fef1 	bl	802add8 <puts>
		return -1;
 8028ff6:	f04f 37ff 	mov.w	r7, #4294967295
 8028ffa:	e7e9      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_ssl_config_defaults failed.\n");
 8028ffc:	4825      	ldr	r0, [pc, #148]	; (8029094 <net_init+0x1e4>)
 8028ffe:	f001 feeb 	bl	802add8 <puts>
		return -1;
 8029002:	f04f 37ff 	mov.w	r7, #4294967295
 8029006:	e7e3      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_ssl_conf_own_cert failed.\n");
 8029008:	4823      	ldr	r0, [pc, #140]	; (8029098 <net_init+0x1e8>)
 802900a:	f001 fee5 	bl	802add8 <puts>
		return -1;
 802900e:	f04f 37ff 	mov.w	r7, #4294967295
 8029012:	e7dd      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_ssl_setup failed.\n");
 8029014:	4821      	ldr	r0, [pc, #132]	; (802909c <net_init+0x1ec>)
 8029016:	f001 fedf 	bl	802add8 <puts>
		return -1;
 802901a:	f04f 37ff 	mov.w	r7, #4294967295
 802901e:	e7d7      	b.n	8028fd0 <net_init+0x120>
		printf("mbedtls_ssl_set_hostname failed.\n");
 8029020:	481f      	ldr	r0, [pc, #124]	; (80290a0 <net_init+0x1f0>)
 8029022:	f001 fed9 	bl	802add8 <puts>
		return -1;
 8029026:	f04f 37ff 	mov.w	r7, #4294967295
 802902a:	e7d1      	b.n	8028fd0 <net_init+0x120>
		return -1;
 802902c:	f04f 37ff 	mov.w	r7, #4294967295
 8029030:	e7ce      	b.n	8028fd0 <net_init+0x120>
 8029032:	bf00      	nop
 8029034:	200148e0 	.word	0x200148e0
 8029038:	2001468c 	.word	0x2001468c
 802903c:	20014700 	.word	0x20014700
 8029040:	20014adc 	.word	0x20014adc
 8029044:	200148d4 	.word	0x200148d4
 8029048:	2001499c 	.word	0x2001499c
 802904c:	20014838 	.word	0x20014838
 8029050:	2000004c 	.word	0x2000004c
 8029054:	08018601 	.word	0x08018601
 8029058:	0803670c 	.word	0x0803670c
 802905c:	08036d98 	.word	0x08036d98
 8029060:	08032204 	.word	0x08032204
 8029064:	08037278 	.word	0x08037278
 8029068:	080156f1 	.word	0x080156f1
 802906c:	20000054 	.word	0x20000054
 8029070:	08028db9 	.word	0x08028db9
 8029074:	08029e0d 	.word	0x08029e0d
 8029078:	08029e61 	.word	0x08029e61
 802907c:	20014834 	.word	0x20014834
 8029080:	08028dd9 	.word	0x08028dd9
 8029084:	08028e1d 	.word	0x08028e1d
 8029088:	08028e65 	.word	0x08028e65
 802908c:	080365a0 	.word	0x080365a0
 8029090:	080365c0 	.word	0x080365c0
 8029094:	080365e0 	.word	0x080365e0
 8029098:	08036604 	.word	0x08036604
 802909c:	08036628 	.word	0x08036628
 80290a0:	08036644 	.word	0x08036644

080290a4 <net_connect>:
int net_connect(Network *n, char *host, char* port) {
 80290a4:	b538      	push	{r3, r4, r5, lr}
	ret = mbedtls_net_connect(&server_fd, host, port, MBEDTLS_NET_PROTO_TCP);
 80290a6:	2300      	movs	r3, #0
 80290a8:	4816      	ldr	r0, [pc, #88]	; (8029104 <net_connect+0x60>)
 80290aa:	f000 fe69 	bl	8029d80 <mbedtls_net_connect>
	if (ret < 0) {
 80290ae:	2800      	cmp	r0, #0
 80290b0:	db14      	blt.n	80290dc <net_connect+0x38>
	while ((ret = mbedtls_ssl_handshake(&ssl)) != 0) {
 80290b2:	4d15      	ldr	r5, [pc, #84]	; (8029108 <net_connect+0x64>)
 80290b4:	4628      	mov	r0, r5
 80290b6:	f7fc fe4d 	bl	8025d54 <mbedtls_ssl_handshake>
 80290ba:	4604      	mov	r4, r0
 80290bc:	b1a0      	cbz	r0, 80290e8 <net_connect+0x44>
		if (ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE) {
 80290be:	f024 0380 	bic.w	r3, r4, #128	; 0x80
 80290c2:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 80290c6:	d0f5      	beq.n	80290b4 <net_connect+0x10>
			if(ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED)
 80290c8:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
				printf("mbedtls_ssl_handshake certificate verification failed.\n");
 80290cc:	bf0c      	ite	eq
 80290ce:	480f      	ldreq	r0, [pc, #60]	; (802910c <net_connect+0x68>)
				printf("mbedtls_ssl_handshake failed.\n");
 80290d0:	480f      	ldrne	r0, [pc, #60]	; (8029110 <net_connect+0x6c>)
 80290d2:	f001 fe81 	bl	802add8 <puts>
			return -1;
 80290d6:	f04f 34ff 	mov.w	r4, #4294967295
 80290da:	e00a      	b.n	80290f2 <net_connect+0x4e>
		printf("mbedtls_net_connect failed.\n");
 80290dc:	480d      	ldr	r0, [pc, #52]	; (8029114 <net_connect+0x70>)
 80290de:	f001 fe7b 	bl	802add8 <puts>
		return -1;
 80290e2:	f04f 34ff 	mov.w	r4, #4294967295
 80290e6:	e004      	b.n	80290f2 <net_connect+0x4e>
	ret = mbedtls_ssl_get_verify_result(&ssl);
 80290e8:	4807      	ldr	r0, [pc, #28]	; (8029108 <net_connect+0x64>)
 80290ea:	f7fc fe09 	bl	8025d00 <mbedtls_ssl_get_verify_result>
	if (ret < 0) {
 80290ee:	2800      	cmp	r0, #0
 80290f0:	db01      	blt.n	80290f6 <net_connect+0x52>
}
 80290f2:	4620      	mov	r0, r4
 80290f4:	bd38      	pop	{r3, r4, r5, pc}
		printf("mbedtls_ssl_get_verify_result failed.\n");
 80290f6:	4808      	ldr	r0, [pc, #32]	; (8029118 <net_connect+0x74>)
 80290f8:	f001 fe6e 	bl	802add8 <puts>
		return -1;
 80290fc:	f04f 34ff 	mov.w	r4, #4294967295
 8029100:	e7f7      	b.n	80290f2 <net_connect+0x4e>
 8029102:	bf00      	nop
 8029104:	20014834 	.word	0x20014834
 8029108:	200148e0 	.word	0x200148e0
 802910c:	08036684 	.word	0x08036684
 8029110:	080366bc 	.word	0x080366bc
 8029114:	08036668 	.word	0x08036668
 8029118:	080366dc 	.word	0x080366dc

0802911c <net_clear>:

//clear resources
void net_clear() {
 802911c:	b508      	push	{r3, lr}
	mbedtls_net_free(&server_fd);
 802911e:	480c      	ldr	r0, [pc, #48]	; (8029150 <net_clear+0x34>)
 8029120:	f000 fec8 	bl	8029eb4 <mbedtls_net_free>
	mbedtls_x509_crt_free(&cacert);
 8029124:	480b      	ldr	r0, [pc, #44]	; (8029154 <net_clear+0x38>)
 8029126:	f7ff f928 	bl	802837a <mbedtls_x509_crt_free>
	mbedtls_x509_crt_free(&cli_cert);
 802912a:	480b      	ldr	r0, [pc, #44]	; (8029158 <net_clear+0x3c>)
 802912c:	f7ff f925 	bl	802837a <mbedtls_x509_crt_free>
	mbedtls_pk_free(&cli_key);
 8029130:	480a      	ldr	r0, [pc, #40]	; (802915c <net_clear+0x40>)
 8029132:	f7f0 ff9f 	bl	801a074 <mbedtls_pk_free>
	mbedtls_ssl_free(&ssl);
 8029136:	480a      	ldr	r0, [pc, #40]	; (8029160 <net_clear+0x44>)
 8029138:	f7fd fa2a 	bl	8026590 <mbedtls_ssl_free>
	mbedtls_ssl_config_free(&conf);
 802913c:	4809      	ldr	r0, [pc, #36]	; (8029164 <net_clear+0x48>)
 802913e:	f7fd fb09 	bl	8026754 <mbedtls_ssl_config_free>
	mbedtls_ctr_drbg_free(&ctr_drbg);
 8029142:	4809      	ldr	r0, [pc, #36]	; (8029168 <net_clear+0x4c>)
 8029144:	f7ec f9da 	bl	80154fc <mbedtls_ctr_drbg_free>
	mbedtls_entropy_free(&entropy);
 8029148:	4808      	ldr	r0, [pc, #32]	; (802916c <net_clear+0x50>)
 802914a:	f7ef fa4b 	bl	80185e4 <mbedtls_entropy_free>

#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
	mbedtls_memory_buffer_alloc_free();
#endif
}
 802914e:	bd08      	pop	{r3, pc}
 8029150:	20014834 	.word	0x20014834
 8029154:	20014700 	.word	0x20014700
 8029158:	20014adc 	.word	0x20014adc
 802915c:	200148d4 	.word	0x200148d4
 8029160:	200148e0 	.word	0x200148e0
 8029164:	2001468c 	.word	0x2001468c
 8029168:	2001499c 	.word	0x2001499c
 802916c:	20014838 	.word	0x20014838

08029170 <TimerIsExpired>:

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
	long left = timer->end_time - MilliTimer;
 8029170:	6840      	ldr	r0, [r0, #4]
 8029172:	4b02      	ldr	r3, [pc, #8]	; (802917c <TimerIsExpired+0xc>)
 8029174:	681b      	ldr	r3, [r3, #0]
 8029176:	1ac0      	subs	r0, r0, r3
	return (left < 0);
}
 8029178:	0fc0      	lsrs	r0, r0, #31
 802917a:	4770      	bx	lr
 802917c:	200148dc 	.word	0x200148dc

08029180 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
	timer->end_time = MilliTimer + timeout;
 8029180:	4b02      	ldr	r3, [pc, #8]	; (802918c <TimerCountdownMS+0xc>)
 8029182:	681b      	ldr	r3, [r3, #0]
 8029184:	440b      	add	r3, r1
 8029186:	6043      	str	r3, [r0, #4]
}
 8029188:	4770      	bx	lr
 802918a:	bf00      	nop
 802918c:	200148dc 	.word	0x200148dc

08029190 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
	timer->end_time = MilliTimer + (timeout * 1000);
 8029190:	4b03      	ldr	r3, [pc, #12]	; (80291a0 <TimerCountdown+0x10>)
 8029192:	681b      	ldr	r3, [r3, #0]
 8029194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029198:	fb02 3101 	mla	r1, r2, r1, r3
 802919c:	6041      	str	r1, [r0, #4]
}
 802919e:	4770      	bx	lr
 80291a0:	200148dc 	.word	0x200148dc

080291a4 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
	long left = timer->end_time - MilliTimer;
 80291a4:	6840      	ldr	r0, [r0, #4]
 80291a6:	4b03      	ldr	r3, [pc, #12]	; (80291b4 <TimerLeftMS+0x10>)
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
}
 80291ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80291b0:	4770      	bx	lr
 80291b2:	bf00      	nop
 80291b4:	200148dc 	.word	0x200148dc

080291b8 <TimerInit>:

void TimerInit(Timer *timer) {
	timer->end_time = 0;
 80291b8:	2300      	movs	r3, #0
 80291ba:	6043      	str	r3, [r0, #4]
}
 80291bc:	4770      	bx	lr
	...

080291c0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80291c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291c4:	b087      	sub	sp, #28
 80291c6:	9005      	str	r0, [sp, #20]
        bufferoffset = 0;
 80291c8:	2300      	movs	r3, #0
 80291ca:	9304      	str	r3, [sp, #16]
 80291cc:	9303      	str	r3, [sp, #12]
 80291ce:	9301      	str	r3, [sp, #4]
 80291d0:	e07c      	b.n	80292cc <ethernetif_input+0x10c>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80291d2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80291d4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80291d8:	9d04      	ldr	r5, [sp, #16]
 80291da:	4628      	mov	r0, r5
 80291dc:	f7de fe3e 	bl	8007e5c <pbuf_alloc>
  if (p != NULL)
 80291e0:	4607      	mov	r7, r0
 80291e2:	9002      	str	r0, [sp, #8]
 80291e4:	2800      	cmp	r0, #0
 80291e6:	d048      	beq.n	802927a <ethernetif_input+0xba>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80291e8:	46a2      	mov	sl, r4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80291ea:	4b3d      	ldr	r3, [pc, #244]	; (80292e0 <ethernetif_input+0x120>)
 80291ec:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80291f0:	f240 5bf4 	movw	fp, #1524	; 0x5f4
 80291f4:	e00c      	b.n	8029210 <ethernetif_input+0x50>
 80291f6:	4629      	mov	r1, r5
 80291f8:	4625      	mov	r5, r4
      byteslefttocopy = q->len;
 80291fa:	461c      	mov	r4, r3
      payloadoffset = 0;
 80291fc:	2600      	movs	r6, #0
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80291fe:	6878      	ldr	r0, [r7, #4]
 8029200:	4622      	mov	r2, r4
 8029202:	4451      	add	r1, sl
 8029204:	4430      	add	r0, r6
 8029206:	f001 f998 	bl	802a53a <memcpy>
    for(q = p; q != NULL; q = q->next)
 802920a:	683f      	ldr	r7, [r7, #0]
 802920c:	2f00      	cmp	r7, #0
 802920e:	d034      	beq.n	802927a <ethernetif_input+0xba>
      byteslefttocopy = q->len;
 8029210:	897b      	ldrh	r3, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8029212:	195c      	adds	r4, r3, r5
 8029214:	455c      	cmp	r4, fp
 8029216:	d9ee      	bls.n	80291f6 <ethernetif_input+0x36>
      payloadoffset = 0;
 8029218:	2600      	movs	r6, #0
 802921a:	4651      	mov	r1, sl
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 802921c:	ebab 0905 	sub.w	r9, fp, r5
 8029220:	6878      	ldr	r0, [r7, #4]
 8029222:	464a      	mov	r2, r9
 8029224:	4429      	add	r1, r5
 8029226:	4430      	add	r0, r6
 8029228:	f001 f987 	bl	802a53a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 802922c:	f8d8 800c 	ldr.w	r8, [r8, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8029230:	f8d8 1008 	ldr.w	r1, [r8, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8029234:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8029238:	444e      	add	r6, r9
        bufferoffset = 0;
 802923a:	9d01      	ldr	r5, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 802923c:	455c      	cmp	r4, fp
 802923e:	d8ed      	bhi.n	802921c <ethernetif_input+0x5c>
 8029240:	468a      	mov	sl, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8029242:	4625      	mov	r5, r4
        bufferoffset = 0;
 8029244:	9903      	ldr	r1, [sp, #12]
 8029246:	e7da      	b.n	80291fe <ethernetif_input+0x3e>
    {
      do
      {   
        LOCK_TCPIP_CORE();
        p = low_level_input( netif );
        if   (p != NULL)
 8029248:	9802      	ldr	r0, [sp, #8]
 802924a:	2800      	cmp	r0, #0
 802924c:	d03b      	beq.n	80292c6 <ethernetif_input+0x106>
        {
          if (netif->input( p, netif) != ERR_OK )
 802924e:	9905      	ldr	r1, [sp, #20]
 8029250:	690b      	ldr	r3, [r1, #16]
 8029252:	4798      	blx	r3
 8029254:	2800      	cmp	r0, #0
 8029256:	d132      	bne.n	80292be <ethernetif_input+0xfe>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8029258:	4822      	ldr	r0, [pc, #136]	; (80292e4 <ethernetif_input+0x124>)
 802925a:	f7e6 fef4 	bl	8010046 <sys_mutex_unlock>
        LOCK_TCPIP_CORE();
 802925e:	4821      	ldr	r0, [pc, #132]	; (80292e4 <ethernetif_input+0x124>)
 8029260:	f7e6 feea 	bl	8010038 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8029264:	481e      	ldr	r0, [pc, #120]	; (80292e0 <ethernetif_input+0x120>)
 8029266:	f7d7 fc07 	bl	8000a78 <HAL_ETH_GetReceivedFrame_IT>
 802926a:	2800      	cmp	r0, #0
 802926c:	d12b      	bne.n	80292c6 <ethernetif_input+0x106>
  len = heth.RxFrameInfos.length;
 802926e:	4b1c      	ldr	r3, [pc, #112]	; (80292e0 <ethernetif_input+0x120>)
 8029270:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  if (len > 0)
 8029272:	2900      	cmp	r1, #0
 8029274:	d1ad      	bne.n	80291d2 <ethernetif_input+0x12>
  struct pbuf *p = NULL;
 8029276:	9b04      	ldr	r3, [sp, #16]
 8029278:	9302      	str	r3, [sp, #8]
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 802927a:	4a19      	ldr	r2, [pc, #100]	; (80292e0 <ethernetif_input+0x120>)
 802927c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 802927e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029280:	b152      	cbz	r2, 8029298 <ethernetif_input+0xd8>
 8029282:	2100      	movs	r1, #0
 8029284:	4816      	ldr	r0, [pc, #88]	; (80292e0 <ethernetif_input+0x120>)
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8029286:	681a      	ldr	r2, [r3, #0]
 8029288:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 802928c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 802928e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8029290:	3101      	adds	r1, #1
 8029292:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8029294:	4291      	cmp	r1, r2
 8029296:	d3f6      	bcc.n	8029286 <ethernetif_input+0xc6>
    heth.RxFrameInfos.SegCount =0;  
 8029298:	4b11      	ldr	r3, [pc, #68]	; (80292e0 <ethernetif_input+0x120>)
 802929a:	2200      	movs	r2, #0
 802929c:	639a      	str	r2, [r3, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	f241 0214 	movw	r2, #4116	; 0x1014
 80292a4:	589a      	ldr	r2, [r3, r2]
 80292a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80292aa:	d0cd      	beq.n	8029248 <ethernetif_input+0x88>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80292ac:	f241 0214 	movw	r2, #4116	; 0x1014
 80292b0:	2180      	movs	r1, #128	; 0x80
 80292b2:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 80292b4:	f241 0208 	movw	r2, #4104	; 0x1008
 80292b8:	2100      	movs	r1, #0
 80292ba:	5099      	str	r1, [r3, r2]
 80292bc:	e7c4      	b.n	8029248 <ethernetif_input+0x88>
            pbuf_free(p);
 80292be:	9802      	ldr	r0, [sp, #8]
 80292c0:	f7de fd5c 	bl	8007d7c <pbuf_free>
 80292c4:	e7c8      	b.n	8029258 <ethernetif_input+0x98>
        UNLOCK_TCPIP_CORE();
 80292c6:	4807      	ldr	r0, [pc, #28]	; (80292e4 <ethernetif_input+0x124>)
 80292c8:	f7e6 febd 	bl	8010046 <sys_mutex_unlock>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80292cc:	4d06      	ldr	r5, [pc, #24]	; (80292e8 <ethernetif_input+0x128>)
 80292ce:	f04f 34ff 	mov.w	r4, #4294967295
 80292d2:	4621      	mov	r1, r4
 80292d4:	6828      	ldr	r0, [r5, #0]
 80292d6:	f7d8 fdf3 	bl	8001ec0 <osSemaphoreWait>
 80292da:	2800      	cmp	r0, #0
 80292dc:	d1f9      	bne.n	80292d2 <ethernetif_input+0x112>
 80292de:	e7be      	b.n	802925e <ethernetif_input+0x9e>
 80292e0:	200164e0 	.word	0x200164e0
 80292e4:	20010d94 	.word	0x20010d94
 80292e8:	200108e8 	.word	0x200108e8

080292ec <low_level_output>:
{
 80292ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292f0:	b083      	sub	sp, #12
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80292f2:	4b32      	ldr	r3, [pc, #200]	; (80293bc <low_level_output+0xd0>)
 80292f4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80292f6:	68a3      	ldr	r3, [r4, #8]
 80292f8:	9300      	str	r3, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 80292fa:	2900      	cmp	r1, #0
 80292fc:	d03e      	beq.n	802937c <low_level_output+0x90>
 80292fe:	468b      	mov	fp, r1
  bufferoffset = 0;
 8029300:	2600      	movs	r6, #0
  uint32_t framelength = 0;
 8029302:	46b2      	mov	sl, r6
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8029304:	f240 59f4 	movw	r9, #1524	; 0x5f4
        bufferoffset = 0;
 8029308:	9601      	str	r6, [sp, #4]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 802930a:	6823      	ldr	r3, [r4, #0]
 802930c:	2b00      	cmp	r3, #0
 802930e:	db3d      	blt.n	802938c <low_level_output+0xa0>
      byteslefttocopy = q->len;
 8029310:	f8bb 300a 	ldrh.w	r3, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8029314:	199f      	adds	r7, r3, r6
 8029316:	454f      	cmp	r7, r9
 8029318:	d92a      	bls.n	8029370 <low_level_output+0x84>
      payloadoffset = 0;
 802931a:	f04f 0800 	mov.w	r8, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 802931e:	eba9 0506 	sub.w	r5, r9, r6
 8029322:	f8db 1004 	ldr.w	r1, [fp, #4]
 8029326:	462a      	mov	r2, r5
 8029328:	4441      	add	r1, r8
 802932a:	9b00      	ldr	r3, [sp, #0]
 802932c:	4433      	add	r3, r6
 802932e:	4618      	mov	r0, r3
 8029330:	f001 f903 	bl	802a53a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8029334:	68e4      	ldr	r4, [r4, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8029336:	6823      	ldr	r3, [r4, #0]
 8029338:	2b00      	cmp	r3, #0
 802933a:	db2a      	blt.n	8029392 <low_level_output+0xa6>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 802933c:	68a3      	ldr	r3, [r4, #8]
 802933e:	9300      	str	r3, [sp, #0]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8029340:	f2a7 57f4 	subw	r7, r7, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8029344:	44a8      	add	r8, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8029346:	44aa      	add	sl, r5
        bufferoffset = 0;
 8029348:	9e01      	ldr	r6, [sp, #4]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 802934a:	454f      	cmp	r7, r9
 802934c:	d8e7      	bhi.n	802931e <low_level_output+0x32>
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 802934e:	463e      	mov	r6, r7
        bufferoffset = 0;
 8029350:	2000      	movs	r0, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8029352:	f8db 1004 	ldr.w	r1, [fp, #4]
 8029356:	463a      	mov	r2, r7
 8029358:	4441      	add	r1, r8
 802935a:	9b00      	ldr	r3, [sp, #0]
 802935c:	4418      	add	r0, r3
 802935e:	f001 f8ec 	bl	802a53a <memcpy>
      framelength = framelength + byteslefttocopy;
 8029362:	44ba      	add	sl, r7
  for(q = p; q != NULL; q = q->next)
 8029364:	f8db b000 	ldr.w	fp, [fp]
 8029368:	f1bb 0f00 	cmp.w	fp, #0
 802936c:	d1cd      	bne.n	802930a <low_level_output+0x1e>
 802936e:	e007      	b.n	8029380 <low_level_output+0x94>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8029370:	4630      	mov	r0, r6
 8029372:	463e      	mov	r6, r7
      byteslefttocopy = q->len;
 8029374:	461f      	mov	r7, r3
      payloadoffset = 0;
 8029376:	f04f 0800 	mov.w	r8, #0
 802937a:	e7ea      	b.n	8029352 <low_level_output+0x66>
  uint32_t framelength = 0;
 802937c:	f04f 0a00 	mov.w	sl, #0
  HAL_ETH_TransmitFrame(&heth, framelength);
 8029380:	4651      	mov	r1, sl
 8029382:	480e      	ldr	r0, [pc, #56]	; (80293bc <low_level_output+0xd0>)
 8029384:	f7d7 fae6 	bl	8000954 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8029388:	2000      	movs	r0, #0
 802938a:	e004      	b.n	8029396 <low_level_output+0xaa>
        errval = ERR_USE;
 802938c:	f06f 0007 	mvn.w	r0, #7
 8029390:	e001      	b.n	8029396 <low_level_output+0xaa>
          errval = ERR_USE;
 8029392:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8029396:	4b09      	ldr	r3, [pc, #36]	; (80293bc <low_level_output+0xd0>)
 8029398:	681b      	ldr	r3, [r3, #0]
 802939a:	f241 0214 	movw	r2, #4116	; 0x1014
 802939e:	589a      	ldr	r2, [r3, r2]
 80293a0:	f012 0f20 	tst.w	r2, #32
 80293a4:	d007      	beq.n	80293b6 <low_level_output+0xca>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80293a6:	f241 0214 	movw	r2, #4116	; 0x1014
 80293aa:	2120      	movs	r1, #32
 80293ac:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 80293ae:	f241 0204 	movw	r2, #4100	; 0x1004
 80293b2:	2100      	movs	r1, #0
 80293b4:	5099      	str	r1, [r3, r2]
}
 80293b6:	b003      	add	sp, #12
 80293b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293bc:	200164e0 	.word	0x200164e0

080293c0 <HAL_ETH_MspInit>:
{
 80293c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80293c2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80293c4:	2300      	movs	r3, #0
 80293c6:	9307      	str	r3, [sp, #28]
 80293c8:	9308      	str	r3, [sp, #32]
 80293ca:	9309      	str	r3, [sp, #36]	; 0x24
 80293cc:	930a      	str	r3, [sp, #40]	; 0x28
 80293ce:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80293d0:	6802      	ldr	r2, [r0, #0]
 80293d2:	4b42      	ldr	r3, [pc, #264]	; (80294dc <HAL_ETH_MspInit+0x11c>)
 80293d4:	429a      	cmp	r2, r3
 80293d6:	d001      	beq.n	80293dc <HAL_ETH_MspInit+0x1c>
}
 80293d8:	b00d      	add	sp, #52	; 0x34
 80293da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80293dc:	2400      	movs	r4, #0
 80293de:	9400      	str	r4, [sp, #0]
 80293e0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80293e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80293e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80293ea:	631a      	str	r2, [r3, #48]	; 0x30
 80293ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80293ee:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80293f2:	9200      	str	r2, [sp, #0]
 80293f4:	9a00      	ldr	r2, [sp, #0]
 80293f6:	9401      	str	r4, [sp, #4]
 80293f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80293fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80293fe:	631a      	str	r2, [r3, #48]	; 0x30
 8029400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029402:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8029406:	9201      	str	r2, [sp, #4]
 8029408:	9a01      	ldr	r2, [sp, #4]
 802940a:	9402      	str	r4, [sp, #8]
 802940c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802940e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8029412:	631a      	str	r2, [r3, #48]	; 0x30
 8029414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029416:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802941a:	9202      	str	r2, [sp, #8]
 802941c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802941e:	9403      	str	r4, [sp, #12]
 8029420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029422:	f042 0204 	orr.w	r2, r2, #4
 8029426:	631a      	str	r2, [r3, #48]	; 0x30
 8029428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802942a:	f002 0204 	and.w	r2, r2, #4
 802942e:	9203      	str	r2, [sp, #12]
 8029430:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029432:	9404      	str	r4, [sp, #16]
 8029434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029436:	f042 0201 	orr.w	r2, r2, #1
 802943a:	631a      	str	r2, [r3, #48]	; 0x30
 802943c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802943e:	f002 0201 	and.w	r2, r2, #1
 8029442:	9204      	str	r2, [sp, #16]
 8029444:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8029446:	9405      	str	r4, [sp, #20]
 8029448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802944a:	f042 0202 	orr.w	r2, r2, #2
 802944e:	631a      	str	r2, [r3, #48]	; 0x30
 8029450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029452:	f002 0202 	and.w	r2, r2, #2
 8029456:	9205      	str	r2, [sp, #20]
 8029458:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802945a:	9406      	str	r4, [sp, #24]
 802945c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802945e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029462:	631a      	str	r2, [r3, #48]	; 0x30
 8029464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802946a:	9306      	str	r3, [sp, #24]
 802946c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 802946e:	2332      	movs	r3, #50	; 0x32
 8029470:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029472:	2702      	movs	r7, #2
 8029474:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029476:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029478:	2603      	movs	r6, #3
 802947a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802947c:	250b      	movs	r5, #11
 802947e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8029480:	a907      	add	r1, sp, #28
 8029482:	4817      	ldr	r0, [pc, #92]	; (80294e0 <HAL_ETH_MspInit+0x120>)
 8029484:	f7d7 fe4e 	bl	8001124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8029488:	2386      	movs	r3, #134	; 0x86
 802948a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802948c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802948e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029490:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8029492:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029494:	a907      	add	r1, sp, #28
 8029496:	4813      	ldr	r0, [pc, #76]	; (80294e4 <HAL_ETH_MspInit+0x124>)
 8029498:	f7d7 fe44 	bl	8001124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 802949c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80294a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80294a2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80294a4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80294a6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80294a8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80294aa:	a907      	add	r1, sp, #28
 80294ac:	480e      	ldr	r0, [pc, #56]	; (80294e8 <HAL_ETH_MspInit+0x128>)
 80294ae:	f7d7 fe39 	bl	8001124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80294b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80294b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80294b8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80294ba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80294bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80294be:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80294c0:	a907      	add	r1, sp, #28
 80294c2:	480a      	ldr	r0, [pc, #40]	; (80294ec <HAL_ETH_MspInit+0x12c>)
 80294c4:	f7d7 fe2e 	bl	8001124 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80294c8:	4622      	mov	r2, r4
 80294ca:	2105      	movs	r1, #5
 80294cc:	203d      	movs	r0, #61	; 0x3d
 80294ce:	f7d7 f8c5 	bl	800065c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80294d2:	203d      	movs	r0, #61	; 0x3d
 80294d4:	f7d7 f8f4 	bl	80006c0 <HAL_NVIC_EnableIRQ>
}
 80294d8:	e77e      	b.n	80293d8 <HAL_ETH_MspInit+0x18>
 80294da:	bf00      	nop
 80294dc:	40028000 	.word	0x40028000
 80294e0:	40020800 	.word	0x40020800
 80294e4:	40020000 	.word	0x40020000
 80294e8:	40020400 	.word	0x40020400
 80294ec:	40021800 	.word	0x40021800

080294f0 <HAL_ETH_RxCpltCallback>:
{
 80294f0:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 80294f2:	4b02      	ldr	r3, [pc, #8]	; (80294fc <HAL_ETH_RxCpltCallback+0xc>)
 80294f4:	6818      	ldr	r0, [r3, #0]
 80294f6:	f7d8 fd0d 	bl	8001f14 <osSemaphoreRelease>
}
 80294fa:	bd08      	pop	{r3, pc}
 80294fc:	200108e8 	.word	0x200108e8

08029500 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8029500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029504:	b08c      	sub	sp, #48	; 0x30
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8029506:	4604      	mov	r4, r0
 8029508:	2800      	cmp	r0, #0
 802950a:	f000 808d 	beq.w	8029628 <ethernetif_init+0x128>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 802950e:	2373      	movs	r3, #115	; 0x73
 8029510:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8029514:	2374      	movs	r3, #116	; 0x74
 8029516:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 802951a:	4b47      	ldr	r3, [pc, #284]	; (8029638 <ethernetif_init+0x138>)
 802951c:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 802951e:	4b47      	ldr	r3, [pc, #284]	; (802963c <ethernetif_init+0x13c>)
 8029520:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8029522:	2300      	movs	r3, #0
 8029524:	9300      	str	r3, [sp, #0]
  heth.Instance = ETH;
 8029526:	4846      	ldr	r0, [pc, #280]	; (8029640 <ethernetif_init+0x140>)
 8029528:	4a46      	ldr	r2, [pc, #280]	; (8029644 <ethernetif_init+0x144>)
 802952a:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 802952c:	2201      	movs	r2, #1
 802952e:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8029530:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8029532:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[1] = 0x80;
 8029536:	2180      	movs	r1, #128	; 0x80
 8029538:	f88d 1005 	strb.w	r1, [sp, #5]
  MACAddr[2] = 0xE1;
 802953c:	21e1      	movs	r1, #225	; 0xe1
 802953e:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x00;
 8029542:	f88d 3007 	strb.w	r3, [sp, #7]
  MACAddr[4] = 0x00;
 8029546:	f88d 3008 	strb.w	r3, [sp, #8]
  MACAddr[5] = 0x00;
 802954a:	f88d 3009 	strb.w	r3, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 802954e:	a901      	add	r1, sp, #4
 8029550:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8029552:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8029554:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8029556:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802955a:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 802955c:	f7d7 fb98 	bl	8000c90 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8029560:	b928      	cbnz	r0, 802956e <ethernetif_init+0x6e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8029562:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8029566:	f043 0304 	orr.w	r3, r3, #4
 802956a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 802956e:	4f34      	ldr	r7, [pc, #208]	; (8029640 <ethernetif_init+0x140>)
 8029570:	2304      	movs	r3, #4
 8029572:	4a35      	ldr	r2, [pc, #212]	; (8029648 <ethernetif_init+0x148>)
 8029574:	4935      	ldr	r1, [pc, #212]	; (802964c <ethernetif_init+0x14c>)
 8029576:	4638      	mov	r0, r7
 8029578:	f7d7 f976 	bl	8000868 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 802957c:	2304      	movs	r3, #4
 802957e:	4a34      	ldr	r2, [pc, #208]	; (8029650 <ethernetif_init+0x150>)
 8029580:	4934      	ldr	r1, [pc, #208]	; (8029654 <ethernetif_init+0x154>)
 8029582:	4638      	mov	r0, r7
 8029584:	f7d7 f9ad 	bl	80008e2 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8029588:	2306      	movs	r3, #6
 802958a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 802958e:	697b      	ldr	r3, [r7, #20]
 8029590:	781a      	ldrb	r2, [r3, #0]
 8029592:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8029596:	785a      	ldrb	r2, [r3, #1]
 8029598:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 802959c:	789a      	ldrb	r2, [r3, #2]
 802959e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80295a2:	78da      	ldrb	r2, [r3, #3]
 80295a4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80295a8:	791a      	ldrb	r2, [r3, #4]
 80295aa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80295ae:	795b      	ldrb	r3, [r3, #5]
 80295b0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->mtu = 1500;
 80295b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80295b8:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80295ba:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80295be:	f043 030a 	orr.w	r3, r3, #10
 80295c2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  osSemaphoreDef(SEM);
 80295c6:	f04f 0800 	mov.w	r8, #0
 80295ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80295ce:	f8cd 8010 	str.w	r8, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80295d2:	2101      	movs	r1, #1
 80295d4:	a803      	add	r0, sp, #12
 80295d6:	f7d8 fc4f 	bl	8001e78 <osSemaphoreCreate>
 80295da:	4b1f      	ldr	r3, [pc, #124]	; (8029658 <ethernetif_init+0x158>)
 80295dc:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80295de:	ad05      	add	r5, sp, #20
 80295e0:	4e1e      	ldr	r6, [pc, #120]	; (802965c <ethernetif_init+0x15c>)
 80295e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80295e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80295e6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80295ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80295ee:	4621      	mov	r1, r4
 80295f0:	a805      	add	r0, sp, #20
 80295f2:	f7d8 fbae 	bl	8001d52 <osThreadCreate>
  HAL_ETH_Start(&heth);
 80295f6:	4638      	mov	r0, r7
 80295f8:	f7d7 fc74 	bl	8000ee4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80295fc:	466a      	mov	r2, sp
 80295fe:	211d      	movs	r1, #29
 8029600:	4638      	mov	r0, r7
 8029602:	f7d7 fad2 	bl	8000baa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8029606:	9a00      	ldr	r2, [sp, #0]
 8029608:	f042 020b 	orr.w	r2, r2, #11
 802960c:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 802960e:	211d      	movs	r1, #29
 8029610:	4638      	mov	r0, r7
 8029612:	f7d7 fb04 	bl	8000c1e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8029616:	466a      	mov	r2, sp
 8029618:	211d      	movs	r1, #29
 802961a:	4638      	mov	r0, r7
 802961c:	f7d7 fac5 	bl	8000baa <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8029620:	4640      	mov	r0, r8
 8029622:	b00c      	add	sp, #48	; 0x30
 8029624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8029628:	4b0d      	ldr	r3, [pc, #52]	; (8029660 <ethernetif_init+0x160>)
 802962a:	f240 2235 	movw	r2, #565	; 0x235
 802962e:	490d      	ldr	r1, [pc, #52]	; (8029664 <ethernetif_init+0x164>)
 8029630:	480d      	ldr	r0, [pc, #52]	; (8029668 <ethernetif_init+0x168>)
 8029632:	f001 fb4b 	bl	802accc <iprintf>
 8029636:	e76a      	b.n	802950e <ethernetif_init+0xe>
 8029638:	0800ec0d 	.word	0x0800ec0d
 802963c:	080292ed 	.word	0x080292ed
 8029640:	200164e0 	.word	0x200164e0
 8029644:	40028000 	.word	0x40028000
 8029648:	20016528 	.word	0x20016528
 802964c:	20014c10 	.word	0x20014c10
 8029650:	20014c90 	.word	0x20014c90
 8029654:	20016460 	.word	0x20016460
 8029658:	200108e8 	.word	0x200108e8
 802965c:	0802bb04 	.word	0x0802bb04
 8029660:	0803792c 	.word	0x0803792c
 8029664:	0802e8a8 	.word	0x0802e8a8
 8029668:	0802bc48 	.word	0x0802bc48

0802966c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 802966c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 802966e:	f7d6 ffc9 	bl	8000604 <HAL_GetTick>
}
 8029672:	bd08      	pop	{r3, pc}

08029674 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8029674:	b570      	push	{r4, r5, r6, lr}
 8029676:	b082      	sub	sp, #8
 8029678:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 802967a:	2300      	movs	r3, #0
 802967c:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
  
  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 802967e:	4e11      	ldr	r6, [pc, #68]	; (80296c4 <ethernetif_set_link+0x50>)
 8029680:	2501      	movs	r5, #1
 8029682:	e006      	b.n	8029692 <ethernetif_set_link+0x1e>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */ 
      netif_set_link_up(link_arg->netif);        
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8029684:	f012 0f04 	tst.w	r2, #4
 8029688:	d000      	beq.n	802968c <ethernetif_set_link+0x18>
 802968a:	b1c3      	cbz	r3, 80296be <ethernetif_set_link+0x4a>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }
    
    /* Suspend thread for 200 ms */
    osDelay(200);
 802968c:	20c8      	movs	r0, #200	; 0xc8
 802968e:	f7d8 fb8c 	bl	8001daa <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8029692:	aa01      	add	r2, sp, #4
 8029694:	4629      	mov	r1, r5
 8029696:	4630      	mov	r0, r6
 8029698:	f7d7 fa87 	bl	8000baa <HAL_ETH_ReadPHYRegister>
    regvalue &= PHY_LINKED_STATUS;
 802969c:	9b01      	ldr	r3, [sp, #4]
 802969e:	f003 0304 	and.w	r3, r3, #4
 80296a2:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80296a4:	6820      	ldr	r0, [r4, #0]
 80296a6:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 80296aa:	f012 0f04 	tst.w	r2, #4
 80296ae:	d1e9      	bne.n	8029684 <ethernetif_set_link+0x10>
 80296b0:	b113      	cbz	r3, 80296b8 <ethernetif_set_link+0x44>
      netif_set_link_up(link_arg->netif);        
 80296b2:	f7de fa19 	bl	8007ae8 <netif_set_link_up>
 80296b6:	e7e9      	b.n	802968c <ethernetif_set_link+0x18>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80296b8:	f012 0f04 	tst.w	r2, #4
 80296bc:	d0e6      	beq.n	802968c <ethernetif_set_link+0x18>
      netif_set_link_down(link_arg->netif);
 80296be:	f7de fa3b 	bl	8007b38 <netif_set_link_down>
 80296c2:	e7e3      	b.n	802968c <ethernetif_set_link+0x18>
 80296c4:	200164e0 	.word	0x200164e0

080296c8 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 80296c8:	4770      	bx	lr
	...

080296cc <ethernetif_update_config>:
{
 80296cc:	b570      	push	{r4, r5, r6, lr}
 80296ce:	b082      	sub	sp, #8
 80296d0:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 80296d2:	2300      	movs	r3, #0
 80296d4:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 80296d6:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 80296d8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80296dc:	f013 0f04 	tst.w	r3, #4
 80296e0:	d04c      	beq.n	802977c <ethernetif_update_config+0xb0>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80296e2:	4b28      	ldr	r3, [pc, #160]	; (8029784 <ethernetif_update_config+0xb8>)
 80296e4:	685b      	ldr	r3, [r3, #4]
 80296e6:	2b00      	cmp	r3, #0
 80296e8:	d031      	beq.n	802974e <ethernetif_update_config+0x82>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80296ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80296ee:	2100      	movs	r1, #0
 80296f0:	4824      	ldr	r0, [pc, #144]	; (8029784 <ethernetif_update_config+0xb8>)
 80296f2:	f7d7 fa94 	bl	8000c1e <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80296f6:	f7d6 ff85 	bl	8000604 <HAL_GetTick>
 80296fa:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80296fc:	4e21      	ldr	r6, [pc, #132]	; (8029784 <ethernetif_update_config+0xb8>)
 80296fe:	2501      	movs	r5, #1
 8029700:	466a      	mov	r2, sp
 8029702:	4629      	mov	r1, r5
 8029704:	4630      	mov	r0, r6
 8029706:	f7d7 fa50 	bl	8000baa <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 802970a:	f7d6 ff7b 	bl	8000604 <HAL_GetTick>
 802970e:	9b01      	ldr	r3, [sp, #4]
 8029710:	1ac3      	subs	r3, r0, r3
 8029712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8029716:	d81a      	bhi.n	802974e <ethernetif_update_config+0x82>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8029718:	9b00      	ldr	r3, [sp, #0]
 802971a:	f013 0f20 	tst.w	r3, #32
 802971e:	d0ef      	beq.n	8029700 <ethernetif_update_config+0x34>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8029720:	466a      	mov	r2, sp
 8029722:	211f      	movs	r1, #31
 8029724:	4817      	ldr	r0, [pc, #92]	; (8029784 <ethernetif_update_config+0xb8>)
 8029726:	f7d7 fa40 	bl	8000baa <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 802972a:	9b00      	ldr	r3, [sp, #0]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 802972c:	f013 0210 	ands.w	r2, r3, #16
 8029730:	bf18      	it	ne
 8029732:	f44f 6200 	movne.w	r2, #2048	; 0x800
 8029736:	4913      	ldr	r1, [pc, #76]	; (8029784 <ethernetif_update_config+0xb8>)
 8029738:	60ca      	str	r2, [r1, #12]
      if(regvalue & PHY_SPEED_STATUS)
 802973a:	f013 0f04 	tst.w	r3, #4
        heth.Init.Speed = ETH_SPEED_10M; 
 802973e:	bf19      	ittee	ne
 8029740:	460b      	movne	r3, r1
 8029742:	2200      	movne	r2, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8029744:	4b0f      	ldreq	r3, [pc, #60]	; (8029784 <ethernetif_update_config+0xb8>)
 8029746:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
 802974a:	609a      	str	r2, [r3, #8]
 802974c:	e009      	b.n	8029762 <ethernetif_update_config+0x96>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 802974e:	480d      	ldr	r0, [pc, #52]	; (8029784 <ethernetif_update_config+0xb8>)
 8029750:	68c2      	ldr	r2, [r0, #12]
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8029752:	6883      	ldr	r3, [r0, #8]
 8029754:	085b      	lsrs	r3, r3, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8029756:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 802975a:	b292      	uxth	r2, r2
 802975c:	2100      	movs	r1, #0
 802975e:	f7d7 fa5e 	bl	8000c1e <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8029762:	4d08      	ldr	r5, [pc, #32]	; (8029784 <ethernetif_update_config+0xb8>)
 8029764:	2100      	movs	r1, #0
 8029766:	4628      	mov	r0, r5
 8029768:	f7d7 fc44 	bl	8000ff4 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);   
 802976c:	4628      	mov	r0, r5
 802976e:	f7d7 fbb9 	bl	8000ee4 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8029772:	4620      	mov	r0, r4
 8029774:	f7ff ffa8 	bl	80296c8 <ethernetif_notify_conn_changed>
}
 8029778:	b002      	add	sp, #8
 802977a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_Stop(&heth);
 802977c:	4801      	ldr	r0, [pc, #4]	; (8029784 <ethernetif_update_config+0xb8>)
 802977e:	f7d7 fbf5 	bl	8000f6c <HAL_ETH_Stop>
 8029782:	e7f6      	b.n	8029772 <ethernetif_update_config+0xa6>
 8029784:	200164e0 	.word	0x200164e0

08029788 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8029788:	b500      	push	{lr}
 802978a:	b08f      	sub	sp, #60	; 0x3c
	/* USER CODE BEGIN StartDefaultTask */
	MX_LWIP_Init();
 802978c:	f000 f8fc 	bl	8029988 <MX_LWIP_Init>

	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8029790:	4c1d      	ldr	r4, [pc, #116]	; (8029808 <StartDefaultTask+0x80>)
		{
			osDelay(1000);
 8029792:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8029796:	e002      	b.n	802979e <StartDefaultTask+0x16>
 8029798:	4628      	mov	r0, r5
 802979a:	f7d8 fb06 	bl	8001daa <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 802979e:	6863      	ldr	r3, [r4, #4]
 80297a0:	2b00      	cmp	r3, #0
 80297a2:	d0f9      	beq.n	8029798 <StartDefaultTask+0x10>
 80297a4:	68a3      	ldr	r3, [r4, #8]
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	d0f6      	beq.n	8029798 <StartDefaultTask+0x10>
 80297aa:	68e3      	ldr	r3, [r4, #12]
 80297ac:	2b00      	cmp	r3, #0
 80297ae:	d0f3      	beq.n	8029798 <StartDefaultTask+0x10>
			continue;
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 80297b0:	4816      	ldr	r0, [pc, #88]	; (802980c <StartDefaultTask+0x84>)
 80297b2:	f001 fb11 	bl	802add8 <puts>
	}
	/*
	 * !!! Important
	 * I don't know but mqttClientPubTask failed without compiler optimization option
	 */
	osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, 1024); //subscribe task
 80297b6:	4c16      	ldr	r4, [pc, #88]	; (8029810 <StartDefaultTask+0x88>)
 80297b8:	ad07      	add	r5, sp, #28
 80297ba:	4626      	mov	r6, r4
 80297bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80297be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80297c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80297c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 80297c8:	2100      	movs	r1, #0
 80297ca:	a807      	add	r0, sp, #28
 80297cc:	f7d8 fac1 	bl	8001d52 <osThreadCreate>
 80297d0:	4b10      	ldr	r3, [pc, #64]	; (8029814 <StartDefaultTask+0x8c>)
 80297d2:	6018      	str	r0, [r3, #0]
	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, 1024); //publish task
 80297d4:	466d      	mov	r5, sp
 80297d6:	341c      	adds	r4, #28
 80297d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80297da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80297dc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80297e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 80297e4:	2100      	movs	r1, #0
 80297e6:	4668      	mov	r0, sp
 80297e8:	f7d8 fab3 	bl	8001d52 <osThreadCreate>
 80297ec:	4b0a      	ldr	r3, [pc, #40]	; (8029818 <StartDefaultTask+0x90>)
 80297ee:	6018      	str	r0, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 80297f0:	4e0a      	ldr	r6, [pc, #40]	; (802981c <StartDefaultTask+0x94>)
 80297f2:	2501      	movs	r5, #1
		osDelay(500);
 80297f4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 80297f8:	4629      	mov	r1, r5
 80297fa:	4630      	mov	r0, r6
 80297fc:	f7d7 fd94 	bl	8001328 <HAL_GPIO_TogglePin>
		osDelay(500);
 8029800:	4620      	mov	r0, r4
 8029802:	f7d8 fad2 	bl	8001daa <osDelay>
	for(;;)
 8029806:	e7f7      	b.n	80297f8 <StartDefaultTask+0x70>
 8029808:	20018980 	.word	0x20018980
 802980c:	08037974 	.word	0x08037974
 8029810:	0802bb20 	.word	0x0802bb20
 8029814:	20018974 	.word	0x20018974
 8029818:	20018570 	.word	0x20018570
 802981c:	40020400 	.word	0x40020400

08029820 <vApplicationStackOverflowHook>:
{
 8029820:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET); //turn on red led when detects stack overflow
 8029822:	2201      	movs	r2, #1
 8029824:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8029828:	4801      	ldr	r0, [pc, #4]	; (8029830 <vApplicationStackOverflowHook+0x10>)
 802982a:	f7d7 fd77 	bl	800131c <HAL_GPIO_WritePin>
}
 802982e:	bd08      	pop	{r3, pc}
 8029830:	40020400 	.word	0x40020400

08029834 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8029834:	4b03      	ldr	r3, [pc, #12]	; (8029844 <vApplicationGetIdleTaskMemory+0x10>)
 8029836:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8029838:	4b03      	ldr	r3, [pc, #12]	; (8029848 <vApplicationGetIdleTaskMemory+0x14>)
 802983a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 802983c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8029840:	6013      	str	r3, [r2, #0]
}                   
 8029842:	4770      	bx	lr
 8029844:	20010cec 	.word	0x20010cec
 8029848:	200108ec 	.word	0x200108ec

0802984c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 802984c:	b530      	push	{r4, r5, lr}
 802984e:	b089      	sub	sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8029850:	ac01      	add	r4, sp, #4
 8029852:	4d07      	ldr	r5, [pc, #28]	; (8029870 <MX_FREERTOS_Init+0x24>)
 8029854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8029856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8029858:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802985c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8029860:	2100      	movs	r1, #0
 8029862:	a801      	add	r0, sp, #4
 8029864:	f7d8 fa75 	bl	8001d52 <osThreadCreate>
 8029868:	4b02      	ldr	r3, [pc, #8]	; (8029874 <MX_FREERTOS_Init+0x28>)
 802986a:	6018      	str	r0, [r3, #0]
}
 802986c:	b009      	add	sp, #36	; 0x24
 802986e:	bd30      	pop	{r4, r5, pc}
 8029870:	0802bb58 	.word	0x0802bb58
 8029874:	20017cf8 	.word	0x20017cf8

08029878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8029878:	b530      	push	{r4, r5, lr}
 802987a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802987c:	2400      	movs	r4, #0
 802987e:	9405      	str	r4, [sp, #20]
 8029880:	9406      	str	r4, [sp, #24]
 8029882:	9407      	str	r4, [sp, #28]
 8029884:	9408      	str	r4, [sp, #32]
 8029886:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8029888:	9400      	str	r4, [sp, #0]
 802988a:	4b27      	ldr	r3, [pc, #156]	; (8029928 <MX_GPIO_Init+0xb0>)
 802988c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802988e:	f042 0204 	orr.w	r2, r2, #4
 8029892:	631a      	str	r2, [r3, #48]	; 0x30
 8029894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029896:	f002 0204 	and.w	r2, r2, #4
 802989a:	9200      	str	r2, [sp, #0]
 802989c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802989e:	9401      	str	r4, [sp, #4]
 80298a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80298a6:	631a      	str	r2, [r3, #48]	; 0x30
 80298a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80298ae:	9201      	str	r2, [sp, #4]
 80298b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80298b2:	9402      	str	r4, [sp, #8]
 80298b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298b6:	f042 0201 	orr.w	r2, r2, #1
 80298ba:	631a      	str	r2, [r3, #48]	; 0x30
 80298bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298be:	f002 0201 	and.w	r2, r2, #1
 80298c2:	9202      	str	r2, [sp, #8]
 80298c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80298c6:	9403      	str	r4, [sp, #12]
 80298c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298ca:	f042 0202 	orr.w	r2, r2, #2
 80298ce:	631a      	str	r2, [r3, #48]	; 0x30
 80298d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298d2:	f002 0202 	and.w	r2, r2, #2
 80298d6:	9203      	str	r2, [sp, #12]
 80298d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80298da:	9404      	str	r4, [sp, #16]
 80298dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80298de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80298e2:	631a      	str	r2, [r3, #48]	; 0x30
 80298e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80298e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80298ea:	9304      	str	r3, [sp, #16]
 80298ec:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80298ee:	4d0f      	ldr	r5, [pc, #60]	; (802992c <MX_GPIO_Init+0xb4>)
 80298f0:	4622      	mov	r2, r4
 80298f2:	f244 0181 	movw	r1, #16513	; 0x4081
 80298f6:	4628      	mov	r0, r5
 80298f8:	f7d7 fd10 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80298fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029900:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8029902:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029904:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8029906:	a905      	add	r1, sp, #20
 8029908:	4809      	ldr	r0, [pc, #36]	; (8029930 <MX_GPIO_Init+0xb8>)
 802990a:	f7d7 fc0b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 802990e:	f244 0381 	movw	r3, #16513	; 0x4081
 8029912:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029914:	2301      	movs	r3, #1
 8029916:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029918:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802991a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802991c:	a905      	add	r1, sp, #20
 802991e:	4628      	mov	r0, r5
 8029920:	f7d7 fc00 	bl	8001124 <HAL_GPIO_Init>

}
 8029924:	b00b      	add	sp, #44	; 0x2c
 8029926:	bd30      	pop	{r4, r5, pc}
 8029928:	40023800 	.word	0x40023800
 802992c:	40020400 	.word	0x40020400
 8029930:	40020800 	.word	0x40020800

08029934 <mbedtls_hardware_poll>:
int mbedtls_hardware_poll( void *Data, unsigned char *Output, size_t Len, size_t *oLen )
{
  uint32_t index;
  uint32_t randomValue;
		
  for (index = 0; index < Len/4; index++)
 8029934:	2a03      	cmp	r2, #3
 8029936:	d923      	bls.n	8029980 <mbedtls_hardware_poll+0x4c>
{
 8029938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802993c:	b083      	sub	sp, #12
 802993e:	4688      	mov	r8, r1
 8029940:	461d      	mov	r5, r3
 8029942:	0896      	lsrs	r6, r2, #2
  for (index = 0; index < Len/4; index++)
 8029944:	2400      	movs	r4, #0
  {
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 8029946:	4f0f      	ldr	r7, [pc, #60]	; (8029984 <mbedtls_hardware_poll+0x50>)
    {
      *oLen += 4;
      memset(&(Output[index * 4]), (int)randomValue, 4);
 8029948:	f04f 0904 	mov.w	r9, #4
 802994c:	e004      	b.n	8029958 <mbedtls_hardware_poll+0x24>
    }
    else
    {
      Error_Handler();
 802994e:	f000 f913 	bl	8029b78 <Error_Handler>
  for (index = 0; index < Len/4; index++)
 8029952:	3401      	adds	r4, #1
 8029954:	42b4      	cmp	r4, r6
 8029956:	d20f      	bcs.n	8029978 <mbedtls_hardware_poll+0x44>
    if (HAL_RNG_GenerateRandomNumber(&hrng, &randomValue) == HAL_OK)
 8029958:	a901      	add	r1, sp, #4
 802995a:	4638      	mov	r0, r7
 802995c:	f7d8 f845 	bl	80019ea <HAL_RNG_GenerateRandomNumber>
 8029960:	2800      	cmp	r0, #0
 8029962:	d1f4      	bne.n	802994e <mbedtls_hardware_poll+0x1a>
      *oLen += 4;
 8029964:	682a      	ldr	r2, [r5, #0]
 8029966:	3204      	adds	r2, #4
 8029968:	602a      	str	r2, [r5, #0]
      memset(&(Output[index * 4]), (int)randomValue, 4);
 802996a:	464a      	mov	r2, r9
 802996c:	9901      	ldr	r1, [sp, #4]
 802996e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8029972:	f000 fe0a 	bl	802a58a <memset>
 8029976:	e7ec      	b.n	8029952 <mbedtls_hardware_poll+0x1e>
    }
  }
  
  return 0;
}
 8029978:	2000      	movs	r0, #0
 802997a:	b003      	add	sp, #12
 802997c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029980:	2000      	movs	r0, #0
 8029982:	4770      	bx	lr
 8029984:	200189c4 	.word	0x200189c4

08029988 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8029988:	b5f0      	push	{r4, r5, r6, r7, lr}
 802998a:	b08f      	sub	sp, #60	; 0x3c
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 802998c:	2100      	movs	r1, #0
 802998e:	4608      	mov	r0, r1
 8029990:	f7dc fe54 	bl	800663c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8029994:	4920      	ldr	r1, [pc, #128]	; (8029a18 <MX_LWIP_Init+0x90>)
 8029996:	2000      	movs	r0, #0
 8029998:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 802999a:	4a20      	ldr	r2, [pc, #128]	; (8029a1c <MX_LWIP_Init+0x94>)
 802999c:	6010      	str	r0, [r2, #0]
  gw.addr = 0;
 802999e:	4b20      	ldr	r3, [pc, #128]	; (8029a20 <MX_LWIP_Init+0x98>)
 80299a0:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80299a2:	4c20      	ldr	r4, [pc, #128]	; (8029a24 <MX_LWIP_Init+0x9c>)
 80299a4:	4d20      	ldr	r5, [pc, #128]	; (8029a28 <MX_LWIP_Init+0xa0>)
 80299a6:	9502      	str	r5, [sp, #8]
 80299a8:	4d20      	ldr	r5, [pc, #128]	; (8029a2c <MX_LWIP_Init+0xa4>)
 80299aa:	9501      	str	r5, [sp, #4]
 80299ac:	9000      	str	r0, [sp, #0]
 80299ae:	4620      	mov	r0, r4
 80299b0:	f7dd ffbc 	bl	800792c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80299b4:	4620      	mov	r0, r4
 80299b6:	f7de f853 	bl	8007a60 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80299ba:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80299be:	f013 0f04 	tst.w	r3, #4
 80299c2:	d024      	beq.n	8029a0e <MX_LWIP_Init+0x86>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80299c4:	4620      	mov	r0, r4
 80299c6:	f7de f851 	bl	8007a6c <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80299ca:	4e16      	ldr	r6, [pc, #88]	; (8029a24 <MX_LWIP_Init+0x9c>)
 80299cc:	4918      	ldr	r1, [pc, #96]	; (8029a30 <MX_LWIP_Init+0xa8>)
 80299ce:	4630      	mov	r0, r6
 80299d0:	f7de f8d0 	bl	8007b74 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80299d4:	2300      	movs	r3, #0
 80299d6:	930c      	str	r3, [sp, #48]	; 0x30
 80299d8:	930d      	str	r3, [sp, #52]	; 0x34
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80299da:	2101      	movs	r1, #1
 80299dc:	a80c      	add	r0, sp, #48	; 0x30
 80299de:	f7d8 fa4b 	bl	8001e78 <osSemaphoreCreate>
 80299e2:	4b14      	ldr	r3, [pc, #80]	; (8029a34 <MX_LWIP_Init+0xac>)
 80299e4:	6018      	str	r0, [r3, #0]

  link_arg.netif = &gnetif;
 80299e6:	4f14      	ldr	r7, [pc, #80]	; (8029a38 <MX_LWIP_Init+0xb0>)
 80299e8:	603e      	str	r6, [r7, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80299ea:	6078      	str	r0, [r7, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80299ec:	ac05      	add	r4, sp, #20
 80299ee:	4d13      	ldr	r5, [pc, #76]	; (8029a3c <MX_LWIP_Init+0xb4>)
 80299f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80299f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80299f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80299f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80299fc:	4639      	mov	r1, r7
 80299fe:	a805      	add	r0, sp, #20
 8029a00:	f7d8 f9a7 	bl	8001d52 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8029a04:	4630      	mov	r0, r6
 8029a06:	f7e4 fc0d 	bl	800e224 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8029a0a:	b00f      	add	sp, #60	; 0x3c
 8029a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8029a0e:	4805      	ldr	r0, [pc, #20]	; (8029a24 <MX_LWIP_Init+0x9c>)
 8029a10:	f7de f84a 	bl	8007aa8 <netif_set_down>
 8029a14:	e7d9      	b.n	80299ca <MX_LWIP_Init+0x42>
 8029a16:	bf00      	nop
 8029a18:	200189b8 	.word	0x200189b8
 8029a1c:	200189bc 	.word	0x200189bc
 8029a20:	200189c0 	.word	0x200189c0
 8029a24:	20018980 	.word	0x20018980
 8029a28:	0800659d 	.word	0x0800659d
 8029a2c:	08029501 	.word	0x08029501
 8029a30:	080296cd 	.word	0x080296cd
 8029a34:	20010d40 	.word	0x20010d40
 8029a38:	20018978 	.word	0x20018978
 8029a3c:	0802bb74 	.word	0x0802bb74

08029a40 <_write>:
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029a40:	1e10      	subs	r0, r2, #0
 8029a42:	dd1e      	ble.n	8029a82 <_write+0x42>
{
 8029a44:	b430      	push	{r4, r5}
 8029a46:	180d      	adds	r5, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8029a48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8029a4c:	e002      	b.n	8029a54 <_write+0x14>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8029a4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029a50:	428d      	cmp	r5, r1
 8029a52:	d014      	beq.n	8029a7e <_write+0x3e>
  {
    ITM_SendChar(*ptr++);
 8029a54:	3101      	adds	r1, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8029a56:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 8029a5a:	f014 0f01 	tst.w	r4, #1
 8029a5e:	d0f7      	beq.n	8029a50 <_write+0x10>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8029a60:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8029a64:	f014 0f01 	tst.w	r4, #1
 8029a68:	d0f2      	beq.n	8029a50 <_write+0x10>
 8029a6a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    while (ITM->PORT[0U].u32 == 0UL)
 8029a6e:	681c      	ldr	r4, [r3, #0]
 8029a70:	2c00      	cmp	r4, #0
 8029a72:	d1ec      	bne.n	8029a4e <_write+0xe>
      __NOP();
 8029a74:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8029a76:	681c      	ldr	r4, [r3, #0]
 8029a78:	2c00      	cmp	r4, #0
 8029a7a:	d0fb      	beq.n	8029a74 <_write+0x34>
 8029a7c:	e7e7      	b.n	8029a4e <_write+0xe>
  }
  return len;
}
 8029a7e:	bc30      	pop	{r4, r5}
 8029a80:	4770      	bx	lr
 8029a82:	4770      	bx	lr

08029a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8029a84:	b530      	push	{r4, r5, lr}
 8029a86:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8029a88:	2230      	movs	r2, #48	; 0x30
 8029a8a:	2100      	movs	r1, #0
 8029a8c:	a808      	add	r0, sp, #32
 8029a8e:	f000 fd7c 	bl	802a58a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8029a92:	2400      	movs	r4, #0
 8029a94:	9403      	str	r4, [sp, #12]
 8029a96:	9404      	str	r4, [sp, #16]
 8029a98:	9405      	str	r4, [sp, #20]
 8029a9a:	9406      	str	r4, [sp, #24]
 8029a9c:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8029a9e:	9401      	str	r4, [sp, #4]
 8029aa0:	4b1c      	ldr	r3, [pc, #112]	; (8029b14 <SystemClock_Config+0x90>)
 8029aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8029aa4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8029aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8029aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029ab0:	9301      	str	r3, [sp, #4]
 8029ab2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8029ab4:	9402      	str	r4, [sp, #8]
 8029ab6:	4b18      	ldr	r3, [pc, #96]	; (8029b18 <SystemClock_Config+0x94>)
 8029ab8:	681a      	ldr	r2, [r3, #0]
 8029aba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8029abe:	601a      	str	r2, [r3, #0]
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029ac6:	9302      	str	r3, [sp, #8]
 8029ac8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8029aca:	2301      	movs	r3, #1
 8029acc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8029ace:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8029ad2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8029ad4:	2502      	movs	r5, #2
 8029ad6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8029ad8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8029adc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8029ade:	2304      	movs	r3, #4
 8029ae0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8029ae2:	23a8      	movs	r3, #168	; 0xa8
 8029ae4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8029ae6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8029ae8:	2307      	movs	r3, #7
 8029aea:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8029aec:	a808      	add	r0, sp, #32
 8029aee:	f7d7 fc23 	bl	8001338 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8029af2:	230f      	movs	r3, #15
 8029af4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8029af6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8029af8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8029afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8029afe:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8029b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029b04:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8029b06:	2105      	movs	r1, #5
 8029b08:	a803      	add	r0, sp, #12
 8029b0a:	f7d7 fe71 	bl	80017f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8029b0e:	b015      	add	sp, #84	; 0x54
 8029b10:	bd30      	pop	{r4, r5, pc}
 8029b12:	bf00      	nop
 8029b14:	40023800 	.word	0x40023800
 8029b18:	40007000 	.word	0x40007000

08029b1c <main>:
{
 8029b1c:	b508      	push	{r3, lr}
  HAL_Init();
 8029b1e:	f7d6 fd4b 	bl	80005b8 <HAL_Init>
  SystemClock_Config();
 8029b22:	f7ff ffaf 	bl	8029a84 <SystemClock_Config>
  MX_GPIO_Init();
 8029b26:	f7ff fea7 	bl	8029878 <MX_GPIO_Init>
  MX_RNG_Init();
 8029b2a:	f000 f9d3 	bl	8029ed4 <MX_RNG_Init>
  printf("Don't remove this printf to prevent hard fault.\r\n");
 8029b2e:	4806      	ldr	r0, [pc, #24]	; (8029b48 <main+0x2c>)
 8029b30:	f001 f952 	bl	802add8 <puts>
  srand(time(NULL));
 8029b34:	2000      	movs	r0, #0
 8029b36:	f001 fb23 	bl	802b180 <time>
 8029b3a:	f001 f955 	bl	802ade8 <srand>
  MX_FREERTOS_Init(); 
 8029b3e:	f7ff fe85 	bl	802984c <MX_FREERTOS_Init>
  osKernelStart();
 8029b42:	f7d8 f8f7 	bl	8001d34 <osKernelStart>
  while (1)
 8029b46:	e7fe      	b.n	8029b46 <main+0x2a>
 8029b48:	08037990 	.word	0x08037990

08029b4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8029b4c:	6802      	ldr	r2, [r0, #0]
 8029b4e:	4b08      	ldr	r3, [pc, #32]	; (8029b70 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8029b50:	429a      	cmp	r2, r3
 8029b52:	d000      	beq.n	8029b56 <HAL_TIM_PeriodElapsedCallback+0xa>
 8029b54:	4770      	bx	lr
{
 8029b56:	b510      	push	{r4, lr}
 8029b58:	4604      	mov	r4, r0
    HAL_IncTick();
 8029b5a:	f7d6 fd47 	bl	80005ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8029b5e:	6822      	ldr	r2, [r4, #0]
 8029b60:	4b03      	ldr	r3, [pc, #12]	; (8029b70 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8029b62:	429a      	cmp	r2, r3
 8029b64:	d103      	bne.n	8029b6e <HAL_TIM_PeriodElapsedCallback+0x22>
      MilliTimer++;
 8029b66:	4a03      	ldr	r2, [pc, #12]	; (8029b74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8029b68:	6813      	ldr	r3, [r2, #0]
 8029b6a:	3301      	adds	r3, #1
 8029b6c:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8029b6e:	bd10      	pop	{r4, pc}
 8029b70:	40001000 	.word	0x40001000
 8029b74:	200148dc 	.word	0x200148dc

08029b78 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8029b78:	4770      	bx	lr
	...

08029b7c <MqttMessageArrived>:
	printf("MqttConnectBroker O.K.\n");
	return MQTT_SUCCESS;
}

void MqttMessageArrived(MessageData* msg)
{
 8029b7c:	b538      	push	{r3, r4, r5, lr}
 8029b7e:	4604      	mov	r4, r0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle pin when new message arrived
 8029b80:	2180      	movs	r1, #128	; 0x80
 8029b82:	480b      	ldr	r0, [pc, #44]	; (8029bb0 <MqttMessageArrived+0x34>)
 8029b84:	f7d7 fbd0 	bl	8001328 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 8029b88:	6824      	ldr	r4, [r4, #0]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 8029b8a:	4d0a      	ldr	r5, [pc, #40]	; (8029bb4 <MqttMessageArrived+0x38>)
 8029b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029b90:	2100      	movs	r1, #0
 8029b92:	4628      	mov	r0, r5
 8029b94:	f000 fcf9 	bl	802a58a <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 8029b98:	68e2      	ldr	r2, [r4, #12]
 8029b9a:	68a1      	ldr	r1, [r4, #8]
 8029b9c:	4628      	mov	r0, r5
 8029b9e:	f000 fccc 	bl	802a53a <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8029ba2:	462a      	mov	r2, r5
 8029ba4:	68e1      	ldr	r1, [r4, #12]
 8029ba6:	4804      	ldr	r0, [pc, #16]	; (8029bb8 <MqttMessageArrived+0x3c>)
 8029ba8:	f001 f890 	bl	802accc <iprintf>
}
 8029bac:	bd38      	pop	{r3, r4, r5, pc}
 8029bae:	bf00      	nop
 8029bb0:	40020400 	.word	0x40020400
 8029bb4:	20017d70 	.word	0x20017d70
 8029bb8:	080379c4 	.word	0x080379c4

08029bbc <MqttClientPubTask>:
{
 8029bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029bc0:	b085      	sub	sp, #20
	uint16_t br=0,brH=0;
 8029bc2:	2500      	movs	r5, #0
 8029bc4:	462c      	mov	r4, r5
		if(mqttClient.isconnected)
 8029bc6:	4f16      	ldr	r7, [pc, #88]	; (8029c20 <MqttClientPubTask+0x64>)
			sprintf((char*)str,"{\n\"Poruka\" : %d,\n\"Broj H\" : %d \n}",br,brH);
 8029bc8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8029c24 <MqttClientPubTask+0x68>
			MQTTPublish(&mqttClient, "dzidzi", &message); //publish a message to "test" topic
 8029bcc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8029c28 <MqttClientPubTask+0x6c>
 8029bd0:	e01c      	b.n	8029c0c <MqttClientPubTask+0x50>
			char *str=pvPortMalloc(40*sizeof(char));
 8029bd2:	2028      	movs	r0, #40	; 0x28
 8029bd4:	f7d9 ff9c 	bl	8003b10 <pvPortMalloc>
 8029bd8:	4606      	mov	r6, r0
			br++;
 8029bda:	3401      	adds	r4, #1
 8029bdc:	b2a4      	uxth	r4, r4
			sprintf((char*)str,"{\n\"Poruka\" : %d,\n\"Broj H\" : %d \n}",br,brH);
 8029bde:	462b      	mov	r3, r5
 8029be0:	4622      	mov	r2, r4
 8029be2:	4649      	mov	r1, r9
 8029be4:	f001 f9b2 	bl	802af4c <siprintf>
			message.payload = (void*)str;
 8029be8:	9602      	str	r6, [sp, #8]
			message.payloadlen = strlen(str);
 8029bea:	4630      	mov	r0, r6
 8029bec:	f7d6 fb0a 	bl	8000204 <strlen>
 8029bf0:	9003      	str	r0, [sp, #12]
			MQTTPublish(&mqttClient, "dzidzi", &message); //publish a message to "test" topic
 8029bf2:	466a      	mov	r2, sp
 8029bf4:	4641      	mov	r1, r8
 8029bf6:	4638      	mov	r0, r7
 8029bf8:	f7e6 fd8f 	bl	801071a <MQTTPublish>
			vPortFree((void*)str);
 8029bfc:	4630      	mov	r0, r6
 8029bfe:	f7da f81f 	bl	8003c40 <vPortFree>
 8029c02:	e006      	b.n	8029c12 <MqttClientPubTask+0x56>
		osDelay(10000);
 8029c04:	f242 7010 	movw	r0, #10000	; 0x2710
 8029c08:	f7d8 f8cf 	bl	8001daa <osDelay>
		if(mqttClient.isconnected)
 8029c0c:	6a3b      	ldr	r3, [r7, #32]
 8029c0e:	2b00      	cmp	r3, #0
 8029c10:	d1df      	bne.n	8029bd2 <MqttClientPubTask+0x16>
		if(br>=1000)
 8029c12:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8029c16:	d3f5      	bcc.n	8029c04 <MqttClientPubTask+0x48>
			brH++;
 8029c18:	3501      	adds	r5, #1
 8029c1a:	b2ad      	uxth	r5, r5
			br=0;
 8029c1c:	2400      	movs	r4, #0
 8029c1e:	e7f1      	b.n	8029c04 <MqttClientPubTask+0x48>
 8029c20:	20017cfc 	.word	0x20017cfc
 8029c24:	080379d8 	.word	0x080379d8
 8029c28:	080379fc 	.word	0x080379fc

08029c2c <MqttConnectBroker>:
{
 8029c2c:	b510      	push	{r4, lr}
 8029c2e:	b09a      	sub	sp, #104	; 0x68
	net_clear();
 8029c30:	f7ff fa74 	bl	802911c <net_clear>
	ret = net_init(&net, SERVER_ADDR);
 8029c34:	492b      	ldr	r1, [pc, #172]	; (8029ce4 <MqttConnectBroker+0xb8>)
 8029c36:	482c      	ldr	r0, [pc, #176]	; (8029ce8 <MqttConnectBroker+0xbc>)
 8029c38:	f7ff f93a 	bl	8028eb0 <net_init>
	if(ret != MQTT_SUCCESS)
 8029c3c:	2800      	cmp	r0, #0
 8029c3e:	d13d      	bne.n	8029cbc <MqttConnectBroker+0x90>
	ret = net_connect(&net, SERVER_ADDR, MQTT_PORT);
 8029c40:	4a2a      	ldr	r2, [pc, #168]	; (8029cec <MqttConnectBroker+0xc0>)
 8029c42:	4928      	ldr	r1, [pc, #160]	; (8029ce4 <MqttConnectBroker+0xb8>)
 8029c44:	4828      	ldr	r0, [pc, #160]	; (8029ce8 <MqttConnectBroker+0xbc>)
 8029c46:	f7ff fa2d 	bl	80290a4 <net_connect>
	if(ret != MQTT_SUCCESS)
 8029c4a:	2800      	cmp	r0, #0
 8029c4c:	d13c      	bne.n	8029cc8 <MqttConnectBroker+0x9c>
	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8029c4e:	4c28      	ldr	r4, [pc, #160]	; (8029cf0 <MqttConnectBroker+0xc4>)
 8029c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029c54:	9302      	str	r3, [sp, #8]
 8029c56:	4a27      	ldr	r2, [pc, #156]	; (8029cf4 <MqttConnectBroker+0xc8>)
 8029c58:	9201      	str	r2, [sp, #4]
 8029c5a:	9300      	str	r3, [sp, #0]
 8029c5c:	4b26      	ldr	r3, [pc, #152]	; (8029cf8 <MqttConnectBroker+0xcc>)
 8029c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029c62:	4921      	ldr	r1, [pc, #132]	; (8029ce8 <MqttConnectBroker+0xbc>)
 8029c64:	4620      	mov	r0, r4
 8029c66:	f7e6 fa48 	bl	80100fa <MQTTClientInit>
	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8029c6a:	2258      	movs	r2, #88	; 0x58
 8029c6c:	4923      	ldr	r1, [pc, #140]	; (8029cfc <MqttConnectBroker+0xd0>)
 8029c6e:	a804      	add	r0, sp, #16
 8029c70:	f000 fc63 	bl	802a53a <memcpy>
	data.willFlag = 0;
 8029c74:	2300      	movs	r3, #0
 8029c76:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	data.MQTTVersion = 3;
 8029c7a:	2303      	movs	r3, #3
 8029c7c:	f88d 3018 	strb.w	r3, [sp, #24]
	data.clientID.cstring = ""; //no client id required
 8029c80:	4b1f      	ldr	r3, [pc, #124]	; (8029d00 <MqttConnectBroker+0xd4>)
 8029c82:	9307      	str	r3, [sp, #28]
	data.username.cstring = ""; //no user name required
 8029c84:	9314      	str	r3, [sp, #80]	; 0x50
	data.password.cstring = ""; //no password required
 8029c86:	9317      	str	r3, [sp, #92]	; 0x5c
	data.keepAliveInterval = 60;
 8029c88:	233c      	movs	r3, #60	; 0x3c
 8029c8a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	data.cleansession = 1;
 8029c8e:	2301      	movs	r3, #1
 8029c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	ret = MQTTConnect(&mqttClient, &data);
 8029c94:	a904      	add	r1, sp, #16
 8029c96:	4620      	mov	r0, r4
 8029c98:	f7e6 fc92 	bl	80105c0 <MQTTConnect>
	if(ret != MQTT_SUCCESS)
 8029c9c:	4604      	mov	r4, r0
 8029c9e:	b9c8      	cbnz	r0, 8029cd4 <MqttConnectBroker+0xa8>
	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 8029ca0:	4b18      	ldr	r3, [pc, #96]	; (8029d04 <MqttConnectBroker+0xd8>)
 8029ca2:	2200      	movs	r2, #0
 8029ca4:	4918      	ldr	r1, [pc, #96]	; (8029d08 <MqttConnectBroker+0xdc>)
 8029ca6:	4812      	ldr	r0, [pc, #72]	; (8029cf0 <MqttConnectBroker+0xc4>)
 8029ca8:	f7e6 fd2f 	bl	801070a <MQTTSubscribe>
	if(ret != MQTT_SUCCESS)
 8029cac:	4604      	mov	r4, r0
 8029cae:	b9a8      	cbnz	r0, 8029cdc <MqttConnectBroker+0xb0>
	printf("MqttConnectBroker O.K.\n");
 8029cb0:	4816      	ldr	r0, [pc, #88]	; (8029d0c <MqttConnectBroker+0xe0>)
 8029cb2:	f001 f891 	bl	802add8 <puts>
}
 8029cb6:	4620      	mov	r0, r4
 8029cb8:	b01a      	add	sp, #104	; 0x68
 8029cba:	bd10      	pop	{r4, pc}
		printf("net_init failed.\n");
 8029cbc:	4814      	ldr	r0, [pc, #80]	; (8029d10 <MqttConnectBroker+0xe4>)
 8029cbe:	f001 f88b 	bl	802add8 <puts>
		return -1;
 8029cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8029cc6:	e7f6      	b.n	8029cb6 <MqttConnectBroker+0x8a>
		printf("net_connect failed.\n");
 8029cc8:	4812      	ldr	r0, [pc, #72]	; (8029d14 <MqttConnectBroker+0xe8>)
 8029cca:	f001 f885 	bl	802add8 <puts>
		return -1;
 8029cce:	f04f 34ff 	mov.w	r4, #4294967295
 8029cd2:	e7f0      	b.n	8029cb6 <MqttConnectBroker+0x8a>
		printf("MQTTConnect failed.\n");
 8029cd4:	4810      	ldr	r0, [pc, #64]	; (8029d18 <MqttConnectBroker+0xec>)
 8029cd6:	f001 f87f 	bl	802add8 <puts>
		return ret;
 8029cda:	e7ec      	b.n	8029cb6 <MqttConnectBroker+0x8a>
		printf("MQTTSubscribe failed.\n");
 8029cdc:	480f      	ldr	r0, [pc, #60]	; (8029d1c <MqttConnectBroker+0xf0>)
 8029cde:	f001 f87b 	bl	802add8 <puts>
		return ret;
 8029ce2:	e7e8      	b.n	8029cb6 <MqttConnectBroker+0x8a>
 8029ce4:	08037a04 	.word	0x08037a04
 8029ce8:	20017d64 	.word	0x20017d64
 8029cec:	08037a48 	.word	0x08037a48
 8029cf0:	20017cfc 	.word	0x20017cfc
 8029cf4:	20018574 	.word	0x20018574
 8029cf8:	20018170 	.word	0x20018170
 8029cfc:	0802bb90 	.word	0x0802bb90
 8029d00:	08032204 	.word	0x08032204
 8029d04:	08029b7d 	.word	0x08029b7d
 8029d08:	08037a64 	.word	0x08037a64
 8029d0c:	08037a84 	.word	0x08037a84
 8029d10:	08037a34 	.word	0x08037a34
 8029d14:	08036670 	.word	0x08036670
 8029d18:	08037a50 	.word	0x08037a50
 8029d1c:	08037a6c 	.word	0x08037a6c

08029d20 <MqttClientSubTask>:
{
 8029d20:	b508      	push	{r3, lr}
		if(!mqttClient.isconnected)
 8029d22:	4c0a      	ldr	r4, [pc, #40]	; (8029d4c <MqttClientSubTask+0x2c>)
			MQTTYield(&mqttClient, 1000);
 8029d24:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8029d28:	e003      	b.n	8029d32 <MqttClientSubTask+0x12>
 8029d2a:	4629      	mov	r1, r5
 8029d2c:	4620      	mov	r0, r4
 8029d2e:	f7e6 fbbe 	bl	80104ae <MQTTYield>
		if(!mqttClient.isconnected)
 8029d32:	6a23      	ldr	r3, [r4, #32]
 8029d34:	2b00      	cmp	r3, #0
 8029d36:	d1f8      	bne.n	8029d2a <MqttClientSubTask+0xa>
			MQTTDisconnect(&mqttClient);
 8029d38:	4620      	mov	r0, r4
 8029d3a:	f7e6 fd63 	bl	8010804 <MQTTDisconnect>
			MqttConnectBroker();
 8029d3e:	f7ff ff75 	bl	8029c2c <MqttConnectBroker>
			osDelay(1000);
 8029d42:	4628      	mov	r0, r5
 8029d44:	f7d8 f831 	bl	8001daa <osDelay>
 8029d48:	e7f3      	b.n	8029d32 <MqttClientSubTask+0x12>
 8029d4a:	bf00      	nop
 8029d4c:	20017cfc 	.word	0x20017cfc

08029d50 <net_would_block>:
 * and thus 'failed' with a negative return value.
 *
 * Note: on a blocking socket this function always returns 0!
 */
static int net_would_block( const mbedtls_net_context *ctx )
{
 8029d50:	b510      	push	{r4, lr}
    int err = errno;
 8029d52:	4b0a      	ldr	r3, [pc, #40]	; (8029d7c <net_would_block+0x2c>)
 8029d54:	681c      	ldr	r4, [r3, #0]

    /*
     * Never return 'WOULD BLOCK' on a non-blocking socket
     */
    if( fcntl( ctx->fd, F_GETFL, O_NONBLOCK ) != O_NONBLOCK )
 8029d56:	2201      	movs	r2, #1
 8029d58:	2103      	movs	r1, #3
 8029d5a:	6800      	ldr	r0, [r0, #0]
 8029d5c:	f7dc fb1c 	bl	8006398 <lwip_fcntl>
 8029d60:	2801      	cmp	r0, #1
 8029d62:	d003      	beq.n	8029d6c <net_would_block+0x1c>
    {
        errno = err;
 8029d64:	4b05      	ldr	r3, [pc, #20]	; (8029d7c <net_would_block+0x2c>)
 8029d66:	601c      	str	r4, [r3, #0]
        return( 0 );
 8029d68:	2000      	movs	r0, #0
        case EWOULDBLOCK:
#endif
            return( 1 );
    }
    return( 0 );
}
 8029d6a:	bd10      	pop	{r4, pc}
    switch( errno = err )
 8029d6c:	4b03      	ldr	r3, [pc, #12]	; (8029d7c <net_would_block+0x2c>)
 8029d6e:	601c      	str	r4, [r3, #0]
 8029d70:	2c0b      	cmp	r4, #11
 8029d72:	bf14      	ite	ne
 8029d74:	2000      	movne	r0, #0
 8029d76:	2001      	moveq	r0, #1
 8029d78:	e7f7      	b.n	8029d6a <net_would_block+0x1a>
 8029d7a:	bf00      	nop
 8029d7c:	20014684 	.word	0x20014684

08029d80 <mbedtls_net_connect>:
{
 8029d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029d84:	b08a      	sub	sp, #40	; 0x28
 8029d86:	4605      	mov	r5, r0
 8029d88:	460c      	mov	r4, r1
 8029d8a:	4616      	mov	r6, r2
 8029d8c:	461f      	mov	r7, r3
  memset( &hints, 0, sizeof( hints ) );
 8029d8e:	2220      	movs	r2, #32
 8029d90:	2100      	movs	r1, #0
 8029d92:	a802      	add	r0, sp, #8
 8029d94:	f000 fbf9 	bl	802a58a <memset>
  hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
 8029d98:	2f01      	cmp	r7, #1
 8029d9a:	d033      	beq.n	8029e04 <mbedtls_net_connect+0x84>
 8029d9c:	2301      	movs	r3, #1
 8029d9e:	9304      	str	r3, [sp, #16]
  hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;
 8029da0:	2306      	movs	r3, #6
 8029da2:	9305      	str	r3, [sp, #20]
  if( getaddrinfo( host, port, &hints, &addr_list ) != 0 )
 8029da4:	ab01      	add	r3, sp, #4
 8029da6:	aa02      	add	r2, sp, #8
 8029da8:	4631      	mov	r1, r6
 8029daa:	4620      	mov	r0, r4
 8029dac:	f7db fd08 	bl	80057c0 <lwip_getaddrinfo>
 8029db0:	bb28      	cbnz	r0, 8029dfe <mbedtls_net_connect+0x7e>
  for( cur = addr_list; cur != NULL; cur = cur->ai_next )
 8029db2:	9c01      	ldr	r4, [sp, #4]
 8029db4:	b1d4      	cbz	r4, 8029dec <mbedtls_net_connect+0x6c>
      ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
 8029db6:	f06f 0841 	mvn.w	r8, #65	; 0x41
    ret = MBEDTLS_ERR_NET_CONNECT_FAILED;
 8029dba:	f06f 0743 	mvn.w	r7, #67	; 0x43
 8029dbe:	e002      	b.n	8029dc6 <mbedtls_net_connect+0x46>
      ret = MBEDTLS_ERR_NET_SOCKET_FAILED;
 8029dc0:	4646      	mov	r6, r8
  for( cur = addr_list; cur != NULL; cur = cur->ai_next )
 8029dc2:	69e4      	ldr	r4, [r4, #28]
 8029dc4:	b1a4      	cbz	r4, 8029df0 <mbedtls_net_connect+0x70>
    ctx->fd = (int) socket( cur->ai_family, cur->ai_socktype,
 8029dc6:	68e2      	ldr	r2, [r4, #12]
 8029dc8:	68a1      	ldr	r1, [r4, #8]
 8029dca:	6860      	ldr	r0, [r4, #4]
 8029dcc:	f7dc fa5c 	bl	8006288 <lwip_socket>
 8029dd0:	6028      	str	r0, [r5, #0]
    if(ctx->fd < 0)
 8029dd2:	2800      	cmp	r0, #0
 8029dd4:	dbf4      	blt.n	8029dc0 <mbedtls_net_connect+0x40>
    if( connect( ctx->fd, cur->ai_addr, cur->ai_addrlen ) == 0 )
 8029dd6:	6922      	ldr	r2, [r4, #16]
 8029dd8:	6961      	ldr	r1, [r4, #20]
 8029dda:	f7dc f8bd 	bl	8005f58 <lwip_connect>
 8029dde:	4606      	mov	r6, r0
 8029de0:	b130      	cbz	r0, 8029df0 <mbedtls_net_connect+0x70>
    close( ctx->fd );
 8029de2:	6828      	ldr	r0, [r5, #0]
 8029de4:	f7dc f87c 	bl	8005ee0 <lwip_close>
    ret = MBEDTLS_ERR_NET_CONNECT_FAILED;
 8029de8:	463e      	mov	r6, r7
 8029dea:	e7ea      	b.n	8029dc2 <mbedtls_net_connect+0x42>
  ret = MBEDTLS_ERR_NET_UNKNOWN_HOST;
 8029dec:	f06f 0651 	mvn.w	r6, #81	; 0x51
  freeaddrinfo(addr_list);
 8029df0:	9801      	ldr	r0, [sp, #4]
 8029df2:	f7db fcd7 	bl	80057a4 <lwip_freeaddrinfo>
}
 8029df6:	4630      	mov	r0, r6
 8029df8:	b00a      	add	sp, #40	; 0x28
 8029dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return( MBEDTLS_ERR_NET_UNKNOWN_HOST );
 8029dfe:	f06f 0651 	mvn.w	r6, #81	; 0x51
 8029e02:	e7f8      	b.n	8029df6 <mbedtls_net_connect+0x76>
  hints.ai_socktype = proto == MBEDTLS_NET_PROTO_UDP ? SOCK_DGRAM : SOCK_STREAM;
 8029e04:	2302      	movs	r3, #2
 8029e06:	9304      	str	r3, [sp, #16]
  hints.ai_protocol = proto == MBEDTLS_NET_PROTO_UDP ? IPPROTO_UDP : IPPROTO_TCP;
 8029e08:	2311      	movs	r3, #17
 8029e0a:	e7ca      	b.n	8029da2 <mbedtls_net_connect+0x22>

08029e0c <mbedtls_net_recv>:

/*
 * Read at most 'len' characters
 */
int mbedtls_net_recv( void *ctx, unsigned char *buf, size_t len )
{
 8029e0c:	b510      	push	{r4, lr}
 8029e0e:	4604      	mov	r4, r0
    int ret;
    int fd = ((mbedtls_net_context *) ctx)->fd;
 8029e10:	6800      	ldr	r0, [r0, #0]

    if( fd < 0 )
 8029e12:	2800      	cmp	r0, #0
 8029e14:	db15      	blt.n	8029e42 <mbedtls_net_recv+0x36>
        return( MBEDTLS_ERR_NET_INVALID_CONTEXT );

    ret = (int) read( fd, buf, len );
 8029e16:	f7dc f961 	bl	80060dc <lwip_read>

    if( ret < 0 )
 8029e1a:	2800      	cmp	r0, #0
 8029e1c:	db00      	blt.n	8029e20 <mbedtls_net_recv+0x14>
/* USER CODE END 15 */
    return( MBEDTLS_ERR_NET_RECV_FAILED );
  }

  return( ret );
}
 8029e1e:	bd10      	pop	{r4, pc}
        if( net_would_block( ctx ) != 0 )
 8029e20:	4620      	mov	r0, r4
 8029e22:	f7ff ff95 	bl	8029d50 <net_would_block>
 8029e26:	b978      	cbnz	r0, 8029e48 <mbedtls_net_recv+0x3c>
        if( errno == EPIPE || errno == ECONNRESET )
 8029e28:	4b0b      	ldr	r3, [pc, #44]	; (8029e58 <mbedtls_net_recv+0x4c>)
 8029e2a:	681b      	ldr	r3, [r3, #0]
 8029e2c:	2b20      	cmp	r3, #32
 8029e2e:	d00d      	beq.n	8029e4c <mbedtls_net_recv+0x40>
 8029e30:	2b68      	cmp	r3, #104	; 0x68
 8029e32:	d00e      	beq.n	8029e52 <mbedtls_net_recv+0x46>
    return( MBEDTLS_ERR_NET_RECV_FAILED );
 8029e34:	2b04      	cmp	r3, #4
 8029e36:	f5a0 40d2 	sub.w	r0, r0, #26880	; 0x6900
 8029e3a:	bf18      	it	ne
 8029e3c:	f06f 004b 	mvnne.w	r0, #75	; 0x4b
 8029e40:	e7ed      	b.n	8029e1e <mbedtls_net_recv+0x12>
        return( MBEDTLS_ERR_NET_INVALID_CONTEXT );
 8029e42:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8029e46:	e7ea      	b.n	8029e1e <mbedtls_net_recv+0x12>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 8029e48:	4804      	ldr	r0, [pc, #16]	; (8029e5c <mbedtls_net_recv+0x50>)
 8029e4a:	e7e8      	b.n	8029e1e <mbedtls_net_recv+0x12>
            return( MBEDTLS_ERR_NET_CONN_RESET );
 8029e4c:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8029e50:	e7e5      	b.n	8029e1e <mbedtls_net_recv+0x12>
 8029e52:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8029e56:	e7e2      	b.n	8029e1e <mbedtls_net_recv+0x12>
 8029e58:	20014684 	.word	0x20014684
 8029e5c:	ffff9700 	.word	0xffff9700

08029e60 <mbedtls_net_send>:

/*
 * Write at most 'len' characters
 */
int mbedtls_net_send( void *ctx, const unsigned char *buf, size_t len )
{
 8029e60:	b510      	push	{r4, lr}
 8029e62:	4604      	mov	r4, r0
  int ret;
  int fd = ((mbedtls_net_context *) ctx)->fd;
 8029e64:	6800      	ldr	r0, [r0, #0]

  if( fd < 0 )
 8029e66:	2800      	cmp	r0, #0
 8029e68:	db15      	blt.n	8029e96 <mbedtls_net_send+0x36>
      return( MBEDTLS_ERR_NET_INVALID_CONTEXT );

  ret = (int) write( fd, buf, len );
 8029e6a:	f7dc fa51 	bl	8006310 <lwip_write>

  if( ret < 0 )
 8029e6e:	2800      	cmp	r0, #0
 8029e70:	db00      	blt.n	8029e74 <mbedtls_net_send+0x14>
/* USER CODE END 17 */
    return( MBEDTLS_ERR_NET_SEND_FAILED );
  }

  return( ret );
}
 8029e72:	bd10      	pop	{r4, pc}
    if( net_would_block( ctx ) != 0 )
 8029e74:	4620      	mov	r0, r4
 8029e76:	f7ff ff6b 	bl	8029d50 <net_would_block>
 8029e7a:	b978      	cbnz	r0, 8029e9c <mbedtls_net_send+0x3c>
    if( errno == EPIPE || errno == ECONNRESET )
 8029e7c:	4b0b      	ldr	r3, [pc, #44]	; (8029eac <mbedtls_net_send+0x4c>)
 8029e7e:	681b      	ldr	r3, [r3, #0]
 8029e80:	2b20      	cmp	r3, #32
 8029e82:	d00d      	beq.n	8029ea0 <mbedtls_net_send+0x40>
 8029e84:	2b68      	cmp	r3, #104	; 0x68
 8029e86:	d00e      	beq.n	8029ea6 <mbedtls_net_send+0x46>
    return( MBEDTLS_ERR_NET_SEND_FAILED );
 8029e88:	2b04      	cmp	r3, #4
 8029e8a:	f5a0 40d1 	sub.w	r0, r0, #26752	; 0x6880
 8029e8e:	bf18      	it	ne
 8029e90:	f06f 004d 	mvnne.w	r0, #77	; 0x4d
 8029e94:	e7ed      	b.n	8029e72 <mbedtls_net_send+0x12>
      return( MBEDTLS_ERR_NET_INVALID_CONTEXT );
 8029e96:	f06f 0044 	mvn.w	r0, #68	; 0x44
 8029e9a:	e7ea      	b.n	8029e72 <mbedtls_net_send+0x12>
        return( MBEDTLS_ERR_SSL_WANT_WRITE );
 8029e9c:	4804      	ldr	r0, [pc, #16]	; (8029eb0 <mbedtls_net_send+0x50>)
 8029e9e:	e7e8      	b.n	8029e72 <mbedtls_net_send+0x12>
        return( MBEDTLS_ERR_NET_CONN_RESET );
 8029ea0:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8029ea4:	e7e5      	b.n	8029e72 <mbedtls_net_send+0x12>
 8029ea6:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8029eaa:	e7e2      	b.n	8029e72 <mbedtls_net_send+0x12>
 8029eac:	20014684 	.word	0x20014684
 8029eb0:	ffff9780 	.word	0xffff9780

08029eb4 <mbedtls_net_free>:

/*
 * Gracefully close the connection
 */
void mbedtls_net_free( mbedtls_net_context *ctx )
{
 8029eb4:	b510      	push	{r4, lr}
 8029eb6:	4604      	mov	r4, r0
  if( ctx->fd == -1 )
 8029eb8:	6800      	ldr	r0, [r0, #0]
 8029eba:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029ebe:	d008      	beq.n	8029ed2 <mbedtls_net_free+0x1e>
    return;
/* USER CODE BEGIN 18 */

/* USER CODE END 18 */
  shutdown( ctx->fd, 2 );
 8029ec0:	2102      	movs	r1, #2
 8029ec2:	f7dc fa2b 	bl	800631c <lwip_shutdown>
  close( ctx->fd );
 8029ec6:	6820      	ldr	r0, [r4, #0]
 8029ec8:	f7dc f80a 	bl	8005ee0 <lwip_close>

  ctx->fd = -1;
 8029ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8029ed0:	6023      	str	r3, [r4, #0]
 }
 8029ed2:	bd10      	pop	{r4, pc}

08029ed4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8029ed4:	b508      	push	{r3, lr}

  hrng.Instance = RNG;
 8029ed6:	4805      	ldr	r0, [pc, #20]	; (8029eec <MX_RNG_Init+0x18>)
 8029ed8:	4b05      	ldr	r3, [pc, #20]	; (8029ef0 <MX_RNG_Init+0x1c>)
 8029eda:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8029edc:	f7d7 fd6e 	bl	80019bc <HAL_RNG_Init>
 8029ee0:	b900      	cbnz	r0, 8029ee4 <MX_RNG_Init+0x10>
  {
    Error_Handler();
  }

}
 8029ee2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8029ee4:	f7ff fe48 	bl	8029b78 <Error_Handler>
}
 8029ee8:	e7fb      	b.n	8029ee2 <MX_RNG_Init+0xe>
 8029eea:	bf00      	nop
 8029eec:	200189c4 	.word	0x200189c4
 8029ef0:	50060800 	.word	0x50060800

08029ef4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{

  if(rngHandle->Instance==RNG)
 8029ef4:	6802      	ldr	r2, [r0, #0]
 8029ef6:	4b09      	ldr	r3, [pc, #36]	; (8029f1c <HAL_RNG_MspInit+0x28>)
 8029ef8:	429a      	cmp	r2, r3
 8029efa:	d000      	beq.n	8029efe <HAL_RNG_MspInit+0xa>
 8029efc:	4770      	bx	lr
{
 8029efe:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8029f00:	2300      	movs	r3, #0
 8029f02:	9301      	str	r3, [sp, #4]
 8029f04:	4b06      	ldr	r3, [pc, #24]	; (8029f20 <HAL_RNG_MspInit+0x2c>)
 8029f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8029f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f14:	9301      	str	r3, [sp, #4]
 8029f16:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8029f18:	b002      	add	sp, #8
 8029f1a:	4770      	bx	lr
 8029f1c:	50060800 	.word	0x50060800
 8029f20:	40023800 	.word	0x40023800

08029f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029f24:	b500      	push	{lr}
 8029f26:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029f28:	2200      	movs	r2, #0
 8029f2a:	9200      	str	r2, [sp, #0]
 8029f2c:	4b0d      	ldr	r3, [pc, #52]	; (8029f64 <HAL_MspInit+0x40>)
 8029f2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8029f30:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8029f34:	6459      	str	r1, [r3, #68]	; 0x44
 8029f36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8029f38:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8029f3c:	9100      	str	r1, [sp, #0]
 8029f3e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8029f40:	9201      	str	r2, [sp, #4]
 8029f42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8029f44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8029f48:	6419      	str	r1, [r3, #64]	; 0x40
 8029f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8029f50:	9301      	str	r3, [sp, #4]
 8029f52:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8029f54:	210f      	movs	r1, #15
 8029f56:	f06f 0001 	mvn.w	r0, #1
 8029f5a:	f7d6 fb7f 	bl	800065c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029f5e:	b003      	add	sp, #12
 8029f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8029f64:	40023800 	.word	0x40023800

08029f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8029f68:	b510      	push	{r4, lr}
 8029f6a:	b088      	sub	sp, #32
 8029f6c:	4601      	mov	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8029f6e:	2200      	movs	r2, #0
 8029f70:	2036      	movs	r0, #54	; 0x36
 8029f72:	f7d6 fb73 	bl	800065c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8029f76:	2036      	movs	r0, #54	; 0x36
 8029f78:	f7d6 fba2 	bl	80006c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8029f7c:	2400      	movs	r4, #0
 8029f7e:	9401      	str	r4, [sp, #4]
 8029f80:	4b14      	ldr	r3, [pc, #80]	; (8029fd4 <HAL_InitTick+0x6c>)
 8029f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8029f84:	f042 0210 	orr.w	r2, r2, #16
 8029f88:	641a      	str	r2, [r3, #64]	; 0x40
 8029f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029f8c:	f003 0310 	and.w	r3, r3, #16
 8029f90:	9301      	str	r3, [sp, #4]
 8029f92:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8029f94:	a902      	add	r1, sp, #8
 8029f96:	a803      	add	r0, sp, #12
 8029f98:	f7d7 fcf2 	bl	8001980 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8029f9c:	f7d7 fce0 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8029fa0:	4603      	mov	r3, r0
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8029fa2:	480d      	ldr	r0, [pc, #52]	; (8029fd8 <HAL_InitTick+0x70>)
 8029fa4:	4a0d      	ldr	r2, [pc, #52]	; (8029fdc <HAL_InitTick+0x74>)
 8029fa6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8029fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8029fac:	60c2      	str	r2, [r0, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8029fae:	005b      	lsls	r3, r3, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8029fb0:	4a0b      	ldr	r2, [pc, #44]	; (8029fe0 <HAL_InitTick+0x78>)
 8029fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8029fb6:	0c9b      	lsrs	r3, r3, #18
 8029fb8:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8029fba:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8029fbc:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8029fbe:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8029fc0:	f7d7 fe9c 	bl	8001cfc <HAL_TIM_Base_Init>
 8029fc4:	b110      	cbz	r0, 8029fcc <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8029fc6:	2001      	movs	r0, #1
}
 8029fc8:	b008      	add	sp, #32
 8029fca:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8029fcc:	4802      	ldr	r0, [pc, #8]	; (8029fd8 <HAL_InitTick+0x70>)
 8029fce:	f7d7 fd3f 	bl	8001a50 <HAL_TIM_Base_Start_IT>
 8029fd2:	e7f9      	b.n	8029fc8 <HAL_InitTick+0x60>
 8029fd4:	40023800 	.word	0x40023800
 8029fd8:	200189d4 	.word	0x200189d4
 8029fdc:	40001000 	.word	0x40001000
 8029fe0:	431bde83 	.word	0x431bde83

08029fe4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8029fe4:	4770      	bx	lr

08029fe6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029fe6:	e7fe      	b.n	8029fe6 <HardFault_Handler>

08029fe8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029fe8:	e7fe      	b.n	8029fe8 <MemManage_Handler>

08029fea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029fea:	e7fe      	b.n	8029fea <BusFault_Handler>

08029fec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029fec:	e7fe      	b.n	8029fec <UsageFault_Handler>

08029fee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029fee:	4770      	bx	lr

08029ff0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8029ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8029ff2:	4802      	ldr	r0, [pc, #8]	; (8029ffc <TIM6_DAC_IRQHandler+0xc>)
 8029ff4:	f7d7 fd41 	bl	8001a7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8029ff8:	bd08      	pop	{r3, pc}
 8029ffa:	bf00      	nop
 8029ffc:	200189d4 	.word	0x200189d4

0802a000 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 802a000:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 802a002:	4802      	ldr	r0, [pc, #8]	; (802a00c <ETH_IRQHandler+0xc>)
 802a004:	f7d6 fd8b 	bl	8000b1e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 802a008:	bd08      	pop	{r3, pc}
 802a00a:	bf00      	nop
 802a00c:	200164e0 	.word	0x200164e0

0802a010 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 802a010:	2001      	movs	r0, #1
 802a012:	4770      	bx	lr

0802a014 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 802a014:	4b02      	ldr	r3, [pc, #8]	; (802a020 <_kill+0xc>)
 802a016:	2216      	movs	r2, #22
 802a018:	601a      	str	r2, [r3, #0]
	return -1;
}
 802a01a:	f04f 30ff 	mov.w	r0, #4294967295
 802a01e:	4770      	bx	lr
 802a020:	20014684 	.word	0x20014684

0802a024 <_exit>:
	errno = EINVAL;
 802a024:	4b01      	ldr	r3, [pc, #4]	; (802a02c <_exit+0x8>)
 802a026:	2216      	movs	r2, #22
 802a028:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 802a02a:	e7fe      	b.n	802a02a <_exit+0x6>
 802a02c:	20014684 	.word	0x20014684

0802a030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802a030:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a032:	1e16      	subs	r6, r2, #0
 802a034:	dd07      	ble.n	802a046 <_read+0x16>
 802a036:	460c      	mov	r4, r1
 802a038:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 802a03a:	f3af 8000 	nop.w
 802a03e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a042:	42a5      	cmp	r5, r4
 802a044:	d1f9      	bne.n	802a03a <_read+0xa>
	}

return len;
}
 802a046:	4630      	mov	r0, r6
 802a048:	bd70      	pop	{r4, r5, r6, pc}

0802a04a <_close>:
}

int _close(int file)
{
	return -1;
}
 802a04a:	f04f 30ff 	mov.w	r0, #4294967295
 802a04e:	4770      	bx	lr

0802a050 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 802a050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802a054:	604b      	str	r3, [r1, #4]
	return 0;
}
 802a056:	2000      	movs	r0, #0
 802a058:	4770      	bx	lr

0802a05a <_isatty>:

int _isatty(int file)
{
	return 1;
}
 802a05a:	2001      	movs	r0, #1
 802a05c:	4770      	bx	lr

0802a05e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 802a05e:	2000      	movs	r0, #0
 802a060:	4770      	bx	lr
	...

0802a064 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 802a064:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 802a066:	4a0b      	ldr	r2, [pc, #44]	; (802a094 <_sbrk+0x30>)
 802a068:	6812      	ldr	r2, [r2, #0]
 802a06a:	b142      	cbz	r2, 802a07e <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 802a06c:	4a09      	ldr	r2, [pc, #36]	; (802a094 <_sbrk+0x30>)
 802a06e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 802a070:	4403      	add	r3, r0
 802a072:	466a      	mov	r2, sp
 802a074:	4293      	cmp	r3, r2
 802a076:	d806      	bhi.n	802a086 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 802a078:	4a06      	ldr	r2, [pc, #24]	; (802a094 <_sbrk+0x30>)
 802a07a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 802a07c:	4770      	bx	lr
		heap_end = &end;
 802a07e:	4a05      	ldr	r2, [pc, #20]	; (802a094 <_sbrk+0x30>)
 802a080:	4905      	ldr	r1, [pc, #20]	; (802a098 <_sbrk+0x34>)
 802a082:	6011      	str	r1, [r2, #0]
 802a084:	e7f2      	b.n	802a06c <_sbrk+0x8>
		errno = ENOMEM;
 802a086:	4b05      	ldr	r3, [pc, #20]	; (802a09c <_sbrk+0x38>)
 802a088:	220c      	movs	r2, #12
 802a08a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 802a08c:	f04f 30ff 	mov.w	r0, #4294967295
 802a090:	4770      	bx	lr
 802a092:	bf00      	nop
 802a094:	20010d44 	.word	0x20010d44
 802a098:	20018a20 	.word	0x20018a20
 802a09c:	20014684 	.word	0x20014684

0802a0a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802a0a0:	4b05      	ldr	r3, [pc, #20]	; (802a0b8 <SystemInit+0x18>)
 802a0a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802a0a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 802a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802a0ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802a0b2:	609a      	str	r2, [r3, #8]
#endif
}
 802a0b4:	4770      	bx	lr
 802a0b6:	bf00      	nop
 802a0b8:	e000ed00 	.word	0xe000ed00

0802a0bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 802a0bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 802a0f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802a0c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802a0c2:	e003      	b.n	802a0cc <LoopCopyDataInit>

0802a0c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802a0c4:	4b0c      	ldr	r3, [pc, #48]	; (802a0f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802a0c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802a0c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802a0ca:	3104      	adds	r1, #4

0802a0cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802a0cc:	480b      	ldr	r0, [pc, #44]	; (802a0fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802a0ce:	4b0c      	ldr	r3, [pc, #48]	; (802a100 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802a0d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802a0d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802a0d4:	d3f6      	bcc.n	802a0c4 <CopyDataInit>
  ldr  r2, =_sbss
 802a0d6:	4a0b      	ldr	r2, [pc, #44]	; (802a104 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802a0d8:	e002      	b.n	802a0e0 <LoopFillZerobss>

0802a0da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802a0da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802a0dc:	f842 3b04 	str.w	r3, [r2], #4

0802a0e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 802a0e0:	4b09      	ldr	r3, [pc, #36]	; (802a108 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802a0e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802a0e4:	d3f9      	bcc.n	802a0da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802a0e6:	f7ff ffdb 	bl	802a0a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802a0ea:	f000 f9f1 	bl	802a4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802a0ee:	f7ff fd15 	bl	8029b1c <main>
  bx  lr    
 802a0f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 802a0f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 802a0f8:	08037d14 	.word	0x08037d14
  ldr  r0, =_sdata
 802a0fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 802a100:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 802a104:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 802a108:	20018a20 	.word	0x20018a20

0802a10c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802a10c:	e7fe      	b.n	802a10c <ADC_IRQHandler>

0802a10e <atoi>:
 802a10e:	220a      	movs	r2, #10
 802a110:	2100      	movs	r1, #0
 802a112:	f001 b82b 	b.w	802b16c <strtol>
	...

0802a118 <__sflush_r>:
 802a118:	898a      	ldrh	r2, [r1, #12]
 802a11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a11e:	4605      	mov	r5, r0
 802a120:	0710      	lsls	r0, r2, #28
 802a122:	460c      	mov	r4, r1
 802a124:	d458      	bmi.n	802a1d8 <__sflush_r+0xc0>
 802a126:	684b      	ldr	r3, [r1, #4]
 802a128:	2b00      	cmp	r3, #0
 802a12a:	dc05      	bgt.n	802a138 <__sflush_r+0x20>
 802a12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a12e:	2b00      	cmp	r3, #0
 802a130:	dc02      	bgt.n	802a138 <__sflush_r+0x20>
 802a132:	2000      	movs	r0, #0
 802a134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a13a:	2e00      	cmp	r6, #0
 802a13c:	d0f9      	beq.n	802a132 <__sflush_r+0x1a>
 802a13e:	2300      	movs	r3, #0
 802a140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a144:	682f      	ldr	r7, [r5, #0]
 802a146:	602b      	str	r3, [r5, #0]
 802a148:	d032      	beq.n	802a1b0 <__sflush_r+0x98>
 802a14a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a14c:	89a3      	ldrh	r3, [r4, #12]
 802a14e:	075a      	lsls	r2, r3, #29
 802a150:	d505      	bpl.n	802a15e <__sflush_r+0x46>
 802a152:	6863      	ldr	r3, [r4, #4]
 802a154:	1ac0      	subs	r0, r0, r3
 802a156:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a158:	b10b      	cbz	r3, 802a15e <__sflush_r+0x46>
 802a15a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a15c:	1ac0      	subs	r0, r0, r3
 802a15e:	2300      	movs	r3, #0
 802a160:	4602      	mov	r2, r0
 802a162:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a164:	6a21      	ldr	r1, [r4, #32]
 802a166:	4628      	mov	r0, r5
 802a168:	47b0      	blx	r6
 802a16a:	1c43      	adds	r3, r0, #1
 802a16c:	89a3      	ldrh	r3, [r4, #12]
 802a16e:	d106      	bne.n	802a17e <__sflush_r+0x66>
 802a170:	6829      	ldr	r1, [r5, #0]
 802a172:	291d      	cmp	r1, #29
 802a174:	d82c      	bhi.n	802a1d0 <__sflush_r+0xb8>
 802a176:	4a2a      	ldr	r2, [pc, #168]	; (802a220 <__sflush_r+0x108>)
 802a178:	40ca      	lsrs	r2, r1
 802a17a:	07d6      	lsls	r6, r2, #31
 802a17c:	d528      	bpl.n	802a1d0 <__sflush_r+0xb8>
 802a17e:	2200      	movs	r2, #0
 802a180:	6062      	str	r2, [r4, #4]
 802a182:	04d9      	lsls	r1, r3, #19
 802a184:	6922      	ldr	r2, [r4, #16]
 802a186:	6022      	str	r2, [r4, #0]
 802a188:	d504      	bpl.n	802a194 <__sflush_r+0x7c>
 802a18a:	1c42      	adds	r2, r0, #1
 802a18c:	d101      	bne.n	802a192 <__sflush_r+0x7a>
 802a18e:	682b      	ldr	r3, [r5, #0]
 802a190:	b903      	cbnz	r3, 802a194 <__sflush_r+0x7c>
 802a192:	6560      	str	r0, [r4, #84]	; 0x54
 802a194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a196:	602f      	str	r7, [r5, #0]
 802a198:	2900      	cmp	r1, #0
 802a19a:	d0ca      	beq.n	802a132 <__sflush_r+0x1a>
 802a19c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a1a0:	4299      	cmp	r1, r3
 802a1a2:	d002      	beq.n	802a1aa <__sflush_r+0x92>
 802a1a4:	4628      	mov	r0, r5
 802a1a6:	f000 f9f9 	bl	802a59c <_free_r>
 802a1aa:	2000      	movs	r0, #0
 802a1ac:	6360      	str	r0, [r4, #52]	; 0x34
 802a1ae:	e7c1      	b.n	802a134 <__sflush_r+0x1c>
 802a1b0:	6a21      	ldr	r1, [r4, #32]
 802a1b2:	2301      	movs	r3, #1
 802a1b4:	4628      	mov	r0, r5
 802a1b6:	47b0      	blx	r6
 802a1b8:	1c41      	adds	r1, r0, #1
 802a1ba:	d1c7      	bne.n	802a14c <__sflush_r+0x34>
 802a1bc:	682b      	ldr	r3, [r5, #0]
 802a1be:	2b00      	cmp	r3, #0
 802a1c0:	d0c4      	beq.n	802a14c <__sflush_r+0x34>
 802a1c2:	2b1d      	cmp	r3, #29
 802a1c4:	d001      	beq.n	802a1ca <__sflush_r+0xb2>
 802a1c6:	2b16      	cmp	r3, #22
 802a1c8:	d101      	bne.n	802a1ce <__sflush_r+0xb6>
 802a1ca:	602f      	str	r7, [r5, #0]
 802a1cc:	e7b1      	b.n	802a132 <__sflush_r+0x1a>
 802a1ce:	89a3      	ldrh	r3, [r4, #12]
 802a1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a1d4:	81a3      	strh	r3, [r4, #12]
 802a1d6:	e7ad      	b.n	802a134 <__sflush_r+0x1c>
 802a1d8:	690f      	ldr	r7, [r1, #16]
 802a1da:	2f00      	cmp	r7, #0
 802a1dc:	d0a9      	beq.n	802a132 <__sflush_r+0x1a>
 802a1de:	0793      	lsls	r3, r2, #30
 802a1e0:	680e      	ldr	r6, [r1, #0]
 802a1e2:	bf08      	it	eq
 802a1e4:	694b      	ldreq	r3, [r1, #20]
 802a1e6:	600f      	str	r7, [r1, #0]
 802a1e8:	bf18      	it	ne
 802a1ea:	2300      	movne	r3, #0
 802a1ec:	eba6 0807 	sub.w	r8, r6, r7
 802a1f0:	608b      	str	r3, [r1, #8]
 802a1f2:	f1b8 0f00 	cmp.w	r8, #0
 802a1f6:	dd9c      	ble.n	802a132 <__sflush_r+0x1a>
 802a1f8:	6a21      	ldr	r1, [r4, #32]
 802a1fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a1fc:	4643      	mov	r3, r8
 802a1fe:	463a      	mov	r2, r7
 802a200:	4628      	mov	r0, r5
 802a202:	47b0      	blx	r6
 802a204:	2800      	cmp	r0, #0
 802a206:	dc06      	bgt.n	802a216 <__sflush_r+0xfe>
 802a208:	89a3      	ldrh	r3, [r4, #12]
 802a20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a20e:	81a3      	strh	r3, [r4, #12]
 802a210:	f04f 30ff 	mov.w	r0, #4294967295
 802a214:	e78e      	b.n	802a134 <__sflush_r+0x1c>
 802a216:	4407      	add	r7, r0
 802a218:	eba8 0800 	sub.w	r8, r8, r0
 802a21c:	e7e9      	b.n	802a1f2 <__sflush_r+0xda>
 802a21e:	bf00      	nop
 802a220:	20400001 	.word	0x20400001

0802a224 <_fflush_r>:
 802a224:	b538      	push	{r3, r4, r5, lr}
 802a226:	690b      	ldr	r3, [r1, #16]
 802a228:	4605      	mov	r5, r0
 802a22a:	460c      	mov	r4, r1
 802a22c:	b913      	cbnz	r3, 802a234 <_fflush_r+0x10>
 802a22e:	2500      	movs	r5, #0
 802a230:	4628      	mov	r0, r5
 802a232:	bd38      	pop	{r3, r4, r5, pc}
 802a234:	b118      	cbz	r0, 802a23e <_fflush_r+0x1a>
 802a236:	6983      	ldr	r3, [r0, #24]
 802a238:	b90b      	cbnz	r3, 802a23e <_fflush_r+0x1a>
 802a23a:	f000 f899 	bl	802a370 <__sinit>
 802a23e:	4b14      	ldr	r3, [pc, #80]	; (802a290 <_fflush_r+0x6c>)
 802a240:	429c      	cmp	r4, r3
 802a242:	d11b      	bne.n	802a27c <_fflush_r+0x58>
 802a244:	686c      	ldr	r4, [r5, #4]
 802a246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a24a:	2b00      	cmp	r3, #0
 802a24c:	d0ef      	beq.n	802a22e <_fflush_r+0xa>
 802a24e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a250:	07d0      	lsls	r0, r2, #31
 802a252:	d404      	bmi.n	802a25e <_fflush_r+0x3a>
 802a254:	0599      	lsls	r1, r3, #22
 802a256:	d402      	bmi.n	802a25e <_fflush_r+0x3a>
 802a258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a25a:	f000 f95e 	bl	802a51a <__retarget_lock_acquire_recursive>
 802a25e:	4628      	mov	r0, r5
 802a260:	4621      	mov	r1, r4
 802a262:	f7ff ff59 	bl	802a118 <__sflush_r>
 802a266:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a268:	07da      	lsls	r2, r3, #31
 802a26a:	4605      	mov	r5, r0
 802a26c:	d4e0      	bmi.n	802a230 <_fflush_r+0xc>
 802a26e:	89a3      	ldrh	r3, [r4, #12]
 802a270:	059b      	lsls	r3, r3, #22
 802a272:	d4dd      	bmi.n	802a230 <_fflush_r+0xc>
 802a274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a276:	f000 f951 	bl	802a51c <__retarget_lock_release_recursive>
 802a27a:	e7d9      	b.n	802a230 <_fflush_r+0xc>
 802a27c:	4b05      	ldr	r3, [pc, #20]	; (802a294 <_fflush_r+0x70>)
 802a27e:	429c      	cmp	r4, r3
 802a280:	d101      	bne.n	802a286 <_fflush_r+0x62>
 802a282:	68ac      	ldr	r4, [r5, #8]
 802a284:	e7df      	b.n	802a246 <_fflush_r+0x22>
 802a286:	4b04      	ldr	r3, [pc, #16]	; (802a298 <_fflush_r+0x74>)
 802a288:	429c      	cmp	r4, r3
 802a28a:	bf08      	it	eq
 802a28c:	68ec      	ldreq	r4, [r5, #12]
 802a28e:	e7da      	b.n	802a246 <_fflush_r+0x22>
 802a290:	08037bd8 	.word	0x08037bd8
 802a294:	08037bf8 	.word	0x08037bf8
 802a298:	08037bb8 	.word	0x08037bb8

0802a29c <fflush>:
 802a29c:	4601      	mov	r1, r0
 802a29e:	b920      	cbnz	r0, 802a2aa <fflush+0xe>
 802a2a0:	4b04      	ldr	r3, [pc, #16]	; (802a2b4 <fflush+0x18>)
 802a2a2:	4905      	ldr	r1, [pc, #20]	; (802a2b8 <fflush+0x1c>)
 802a2a4:	6818      	ldr	r0, [r3, #0]
 802a2a6:	f000 b8f3 	b.w	802a490 <_fwalk_reent>
 802a2aa:	4b04      	ldr	r3, [pc, #16]	; (802a2bc <fflush+0x20>)
 802a2ac:	6818      	ldr	r0, [r3, #0]
 802a2ae:	f7ff bfb9 	b.w	802a224 <_fflush_r>
 802a2b2:	bf00      	nop
 802a2b4:	08037c18 	.word	0x08037c18
 802a2b8:	0802a225 	.word	0x0802a225
 802a2bc:	20000054 	.word	0x20000054

0802a2c0 <std>:
 802a2c0:	2300      	movs	r3, #0
 802a2c2:	b510      	push	{r4, lr}
 802a2c4:	4604      	mov	r4, r0
 802a2c6:	e9c0 3300 	strd	r3, r3, [r0]
 802a2ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a2ce:	6083      	str	r3, [r0, #8]
 802a2d0:	8181      	strh	r1, [r0, #12]
 802a2d2:	6643      	str	r3, [r0, #100]	; 0x64
 802a2d4:	81c2      	strh	r2, [r0, #14]
 802a2d6:	6183      	str	r3, [r0, #24]
 802a2d8:	4619      	mov	r1, r3
 802a2da:	2208      	movs	r2, #8
 802a2dc:	305c      	adds	r0, #92	; 0x5c
 802a2de:	f000 f954 	bl	802a58a <memset>
 802a2e2:	4b05      	ldr	r3, [pc, #20]	; (802a2f8 <std+0x38>)
 802a2e4:	6263      	str	r3, [r4, #36]	; 0x24
 802a2e6:	4b05      	ldr	r3, [pc, #20]	; (802a2fc <std+0x3c>)
 802a2e8:	62a3      	str	r3, [r4, #40]	; 0x28
 802a2ea:	4b05      	ldr	r3, [pc, #20]	; (802a300 <std+0x40>)
 802a2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a2ee:	4b05      	ldr	r3, [pc, #20]	; (802a304 <std+0x44>)
 802a2f0:	6224      	str	r4, [r4, #32]
 802a2f2:	6323      	str	r3, [r4, #48]	; 0x30
 802a2f4:	bd10      	pop	{r4, pc}
 802a2f6:	bf00      	nop
 802a2f8:	0802af8d 	.word	0x0802af8d
 802a2fc:	0802afaf 	.word	0x0802afaf
 802a300:	0802afe7 	.word	0x0802afe7
 802a304:	0802b00b 	.word	0x0802b00b

0802a308 <_cleanup_r>:
 802a308:	4901      	ldr	r1, [pc, #4]	; (802a310 <_cleanup_r+0x8>)
 802a30a:	f000 b8c1 	b.w	802a490 <_fwalk_reent>
 802a30e:	bf00      	nop
 802a310:	0802a225 	.word	0x0802a225

0802a314 <__sfmoreglue>:
 802a314:	b570      	push	{r4, r5, r6, lr}
 802a316:	1e4a      	subs	r2, r1, #1
 802a318:	2568      	movs	r5, #104	; 0x68
 802a31a:	4355      	muls	r5, r2
 802a31c:	460e      	mov	r6, r1
 802a31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a322:	f000 f98b 	bl	802a63c <_malloc_r>
 802a326:	4604      	mov	r4, r0
 802a328:	b140      	cbz	r0, 802a33c <__sfmoreglue+0x28>
 802a32a:	2100      	movs	r1, #0
 802a32c:	e9c0 1600 	strd	r1, r6, [r0]
 802a330:	300c      	adds	r0, #12
 802a332:	60a0      	str	r0, [r4, #8]
 802a334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a338:	f000 f927 	bl	802a58a <memset>
 802a33c:	4620      	mov	r0, r4
 802a33e:	bd70      	pop	{r4, r5, r6, pc}

0802a340 <__sfp_lock_acquire>:
 802a340:	4801      	ldr	r0, [pc, #4]	; (802a348 <__sfp_lock_acquire+0x8>)
 802a342:	f000 b8ea 	b.w	802a51a <__retarget_lock_acquire_recursive>
 802a346:	bf00      	nop
 802a348:	20018a1c 	.word	0x20018a1c

0802a34c <__sfp_lock_release>:
 802a34c:	4801      	ldr	r0, [pc, #4]	; (802a354 <__sfp_lock_release+0x8>)
 802a34e:	f000 b8e5 	b.w	802a51c <__retarget_lock_release_recursive>
 802a352:	bf00      	nop
 802a354:	20018a1c 	.word	0x20018a1c

0802a358 <__sinit_lock_acquire>:
 802a358:	4801      	ldr	r0, [pc, #4]	; (802a360 <__sinit_lock_acquire+0x8>)
 802a35a:	f000 b8de 	b.w	802a51a <__retarget_lock_acquire_recursive>
 802a35e:	bf00      	nop
 802a360:	20018a17 	.word	0x20018a17

0802a364 <__sinit_lock_release>:
 802a364:	4801      	ldr	r0, [pc, #4]	; (802a36c <__sinit_lock_release+0x8>)
 802a366:	f000 b8d9 	b.w	802a51c <__retarget_lock_release_recursive>
 802a36a:	bf00      	nop
 802a36c:	20018a17 	.word	0x20018a17

0802a370 <__sinit>:
 802a370:	b510      	push	{r4, lr}
 802a372:	4604      	mov	r4, r0
 802a374:	f7ff fff0 	bl	802a358 <__sinit_lock_acquire>
 802a378:	69a3      	ldr	r3, [r4, #24]
 802a37a:	b11b      	cbz	r3, 802a384 <__sinit+0x14>
 802a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a380:	f7ff bff0 	b.w	802a364 <__sinit_lock_release>
 802a384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a388:	6523      	str	r3, [r4, #80]	; 0x50
 802a38a:	4b13      	ldr	r3, [pc, #76]	; (802a3d8 <__sinit+0x68>)
 802a38c:	4a13      	ldr	r2, [pc, #76]	; (802a3dc <__sinit+0x6c>)
 802a38e:	681b      	ldr	r3, [r3, #0]
 802a390:	62a2      	str	r2, [r4, #40]	; 0x28
 802a392:	42a3      	cmp	r3, r4
 802a394:	bf04      	itt	eq
 802a396:	2301      	moveq	r3, #1
 802a398:	61a3      	streq	r3, [r4, #24]
 802a39a:	4620      	mov	r0, r4
 802a39c:	f000 f820 	bl	802a3e0 <__sfp>
 802a3a0:	6060      	str	r0, [r4, #4]
 802a3a2:	4620      	mov	r0, r4
 802a3a4:	f000 f81c 	bl	802a3e0 <__sfp>
 802a3a8:	60a0      	str	r0, [r4, #8]
 802a3aa:	4620      	mov	r0, r4
 802a3ac:	f000 f818 	bl	802a3e0 <__sfp>
 802a3b0:	2200      	movs	r2, #0
 802a3b2:	60e0      	str	r0, [r4, #12]
 802a3b4:	2104      	movs	r1, #4
 802a3b6:	6860      	ldr	r0, [r4, #4]
 802a3b8:	f7ff ff82 	bl	802a2c0 <std>
 802a3bc:	68a0      	ldr	r0, [r4, #8]
 802a3be:	2201      	movs	r2, #1
 802a3c0:	2109      	movs	r1, #9
 802a3c2:	f7ff ff7d 	bl	802a2c0 <std>
 802a3c6:	68e0      	ldr	r0, [r4, #12]
 802a3c8:	2202      	movs	r2, #2
 802a3ca:	2112      	movs	r1, #18
 802a3cc:	f7ff ff78 	bl	802a2c0 <std>
 802a3d0:	2301      	movs	r3, #1
 802a3d2:	61a3      	str	r3, [r4, #24]
 802a3d4:	e7d2      	b.n	802a37c <__sinit+0xc>
 802a3d6:	bf00      	nop
 802a3d8:	08037c18 	.word	0x08037c18
 802a3dc:	0802a309 	.word	0x0802a309

0802a3e0 <__sfp>:
 802a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3e2:	4607      	mov	r7, r0
 802a3e4:	f7ff ffac 	bl	802a340 <__sfp_lock_acquire>
 802a3e8:	4b1e      	ldr	r3, [pc, #120]	; (802a464 <__sfp+0x84>)
 802a3ea:	681e      	ldr	r6, [r3, #0]
 802a3ec:	69b3      	ldr	r3, [r6, #24]
 802a3ee:	b913      	cbnz	r3, 802a3f6 <__sfp+0x16>
 802a3f0:	4630      	mov	r0, r6
 802a3f2:	f7ff ffbd 	bl	802a370 <__sinit>
 802a3f6:	3648      	adds	r6, #72	; 0x48
 802a3f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a3fc:	3b01      	subs	r3, #1
 802a3fe:	d503      	bpl.n	802a408 <__sfp+0x28>
 802a400:	6833      	ldr	r3, [r6, #0]
 802a402:	b30b      	cbz	r3, 802a448 <__sfp+0x68>
 802a404:	6836      	ldr	r6, [r6, #0]
 802a406:	e7f7      	b.n	802a3f8 <__sfp+0x18>
 802a408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a40c:	b9d5      	cbnz	r5, 802a444 <__sfp+0x64>
 802a40e:	4b16      	ldr	r3, [pc, #88]	; (802a468 <__sfp+0x88>)
 802a410:	60e3      	str	r3, [r4, #12]
 802a412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a416:	6665      	str	r5, [r4, #100]	; 0x64
 802a418:	f000 f87e 	bl	802a518 <__retarget_lock_init_recursive>
 802a41c:	f7ff ff96 	bl	802a34c <__sfp_lock_release>
 802a420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a428:	6025      	str	r5, [r4, #0]
 802a42a:	61a5      	str	r5, [r4, #24]
 802a42c:	2208      	movs	r2, #8
 802a42e:	4629      	mov	r1, r5
 802a430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a434:	f000 f8a9 	bl	802a58a <memset>
 802a438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a43c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a440:	4620      	mov	r0, r4
 802a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a444:	3468      	adds	r4, #104	; 0x68
 802a446:	e7d9      	b.n	802a3fc <__sfp+0x1c>
 802a448:	2104      	movs	r1, #4
 802a44a:	4638      	mov	r0, r7
 802a44c:	f7ff ff62 	bl	802a314 <__sfmoreglue>
 802a450:	4604      	mov	r4, r0
 802a452:	6030      	str	r0, [r6, #0]
 802a454:	2800      	cmp	r0, #0
 802a456:	d1d5      	bne.n	802a404 <__sfp+0x24>
 802a458:	f7ff ff78 	bl	802a34c <__sfp_lock_release>
 802a45c:	230c      	movs	r3, #12
 802a45e:	603b      	str	r3, [r7, #0]
 802a460:	e7ee      	b.n	802a440 <__sfp+0x60>
 802a462:	bf00      	nop
 802a464:	08037c18 	.word	0x08037c18
 802a468:	ffff0001 	.word	0xffff0001

0802a46c <fiprintf>:
 802a46c:	b40e      	push	{r1, r2, r3}
 802a46e:	b503      	push	{r0, r1, lr}
 802a470:	4601      	mov	r1, r0
 802a472:	ab03      	add	r3, sp, #12
 802a474:	4805      	ldr	r0, [pc, #20]	; (802a48c <fiprintf+0x20>)
 802a476:	f853 2b04 	ldr.w	r2, [r3], #4
 802a47a:	6800      	ldr	r0, [r0, #0]
 802a47c:	9301      	str	r3, [sp, #4]
 802a47e:	f000 f961 	bl	802a744 <_vfiprintf_r>
 802a482:	b002      	add	sp, #8
 802a484:	f85d eb04 	ldr.w	lr, [sp], #4
 802a488:	b003      	add	sp, #12
 802a48a:	4770      	bx	lr
 802a48c:	20000054 	.word	0x20000054

0802a490 <_fwalk_reent>:
 802a490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a494:	4606      	mov	r6, r0
 802a496:	4688      	mov	r8, r1
 802a498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a49c:	2700      	movs	r7, #0
 802a49e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a4a2:	f1b9 0901 	subs.w	r9, r9, #1
 802a4a6:	d505      	bpl.n	802a4b4 <_fwalk_reent+0x24>
 802a4a8:	6824      	ldr	r4, [r4, #0]
 802a4aa:	2c00      	cmp	r4, #0
 802a4ac:	d1f7      	bne.n	802a49e <_fwalk_reent+0xe>
 802a4ae:	4638      	mov	r0, r7
 802a4b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a4b4:	89ab      	ldrh	r3, [r5, #12]
 802a4b6:	2b01      	cmp	r3, #1
 802a4b8:	d907      	bls.n	802a4ca <_fwalk_reent+0x3a>
 802a4ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a4be:	3301      	adds	r3, #1
 802a4c0:	d003      	beq.n	802a4ca <_fwalk_reent+0x3a>
 802a4c2:	4629      	mov	r1, r5
 802a4c4:	4630      	mov	r0, r6
 802a4c6:	47c0      	blx	r8
 802a4c8:	4307      	orrs	r7, r0
 802a4ca:	3568      	adds	r5, #104	; 0x68
 802a4cc:	e7e9      	b.n	802a4a2 <_fwalk_reent+0x12>
	...

0802a4d0 <__libc_init_array>:
 802a4d0:	b570      	push	{r4, r5, r6, lr}
 802a4d2:	4d0d      	ldr	r5, [pc, #52]	; (802a508 <__libc_init_array+0x38>)
 802a4d4:	4c0d      	ldr	r4, [pc, #52]	; (802a50c <__libc_init_array+0x3c>)
 802a4d6:	1b64      	subs	r4, r4, r5
 802a4d8:	10a4      	asrs	r4, r4, #2
 802a4da:	2600      	movs	r6, #0
 802a4dc:	42a6      	cmp	r6, r4
 802a4de:	d109      	bne.n	802a4f4 <__libc_init_array+0x24>
 802a4e0:	4d0b      	ldr	r5, [pc, #44]	; (802a510 <__libc_init_array+0x40>)
 802a4e2:	4c0c      	ldr	r4, [pc, #48]	; (802a514 <__libc_init_array+0x44>)
 802a4e4:	f001 fa54 	bl	802b990 <_init>
 802a4e8:	1b64      	subs	r4, r4, r5
 802a4ea:	10a4      	asrs	r4, r4, #2
 802a4ec:	2600      	movs	r6, #0
 802a4ee:	42a6      	cmp	r6, r4
 802a4f0:	d105      	bne.n	802a4fe <__libc_init_array+0x2e>
 802a4f2:	bd70      	pop	{r4, r5, r6, pc}
 802a4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 802a4f8:	4798      	blx	r3
 802a4fa:	3601      	adds	r6, #1
 802a4fc:	e7ee      	b.n	802a4dc <__libc_init_array+0xc>
 802a4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 802a502:	4798      	blx	r3
 802a504:	3601      	adds	r6, #1
 802a506:	e7f2      	b.n	802a4ee <__libc_init_array+0x1e>
 802a508:	08037d0c 	.word	0x08037d0c
 802a50c:	08037d0c 	.word	0x08037d0c
 802a510:	08037d0c 	.word	0x08037d0c
 802a514:	08037d10 	.word	0x08037d10

0802a518 <__retarget_lock_init_recursive>:
 802a518:	4770      	bx	lr

0802a51a <__retarget_lock_acquire_recursive>:
 802a51a:	4770      	bx	lr

0802a51c <__retarget_lock_release_recursive>:
 802a51c:	4770      	bx	lr

0802a51e <memcmp>:
 802a51e:	b530      	push	{r4, r5, lr}
 802a520:	3901      	subs	r1, #1
 802a522:	2400      	movs	r4, #0
 802a524:	42a2      	cmp	r2, r4
 802a526:	d101      	bne.n	802a52c <memcmp+0xe>
 802a528:	2000      	movs	r0, #0
 802a52a:	e005      	b.n	802a538 <memcmp+0x1a>
 802a52c:	5d03      	ldrb	r3, [r0, r4]
 802a52e:	3401      	adds	r4, #1
 802a530:	5d0d      	ldrb	r5, [r1, r4]
 802a532:	42ab      	cmp	r3, r5
 802a534:	d0f6      	beq.n	802a524 <memcmp+0x6>
 802a536:	1b58      	subs	r0, r3, r5
 802a538:	bd30      	pop	{r4, r5, pc}

0802a53a <memcpy>:
 802a53a:	440a      	add	r2, r1
 802a53c:	4291      	cmp	r1, r2
 802a53e:	f100 33ff 	add.w	r3, r0, #4294967295
 802a542:	d100      	bne.n	802a546 <memcpy+0xc>
 802a544:	4770      	bx	lr
 802a546:	b510      	push	{r4, lr}
 802a548:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a54c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a550:	4291      	cmp	r1, r2
 802a552:	d1f9      	bne.n	802a548 <memcpy+0xe>
 802a554:	bd10      	pop	{r4, pc}

0802a556 <memmove>:
 802a556:	4288      	cmp	r0, r1
 802a558:	b510      	push	{r4, lr}
 802a55a:	eb01 0402 	add.w	r4, r1, r2
 802a55e:	d902      	bls.n	802a566 <memmove+0x10>
 802a560:	4284      	cmp	r4, r0
 802a562:	4623      	mov	r3, r4
 802a564:	d807      	bhi.n	802a576 <memmove+0x20>
 802a566:	1e43      	subs	r3, r0, #1
 802a568:	42a1      	cmp	r1, r4
 802a56a:	d008      	beq.n	802a57e <memmove+0x28>
 802a56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a570:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a574:	e7f8      	b.n	802a568 <memmove+0x12>
 802a576:	4402      	add	r2, r0
 802a578:	4601      	mov	r1, r0
 802a57a:	428a      	cmp	r2, r1
 802a57c:	d100      	bne.n	802a580 <memmove+0x2a>
 802a57e:	bd10      	pop	{r4, pc}
 802a580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a584:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a588:	e7f7      	b.n	802a57a <memmove+0x24>

0802a58a <memset>:
 802a58a:	4402      	add	r2, r0
 802a58c:	4603      	mov	r3, r0
 802a58e:	4293      	cmp	r3, r2
 802a590:	d100      	bne.n	802a594 <memset+0xa>
 802a592:	4770      	bx	lr
 802a594:	f803 1b01 	strb.w	r1, [r3], #1
 802a598:	e7f9      	b.n	802a58e <memset+0x4>
	...

0802a59c <_free_r>:
 802a59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a59e:	2900      	cmp	r1, #0
 802a5a0:	d048      	beq.n	802a634 <_free_r+0x98>
 802a5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a5a6:	9001      	str	r0, [sp, #4]
 802a5a8:	2b00      	cmp	r3, #0
 802a5aa:	f1a1 0404 	sub.w	r4, r1, #4
 802a5ae:	bfb8      	it	lt
 802a5b0:	18e4      	addlt	r4, r4, r3
 802a5b2:	f000 ffcf 	bl	802b554 <__malloc_lock>
 802a5b6:	4a20      	ldr	r2, [pc, #128]	; (802a638 <_free_r+0x9c>)
 802a5b8:	9801      	ldr	r0, [sp, #4]
 802a5ba:	6813      	ldr	r3, [r2, #0]
 802a5bc:	4615      	mov	r5, r2
 802a5be:	b933      	cbnz	r3, 802a5ce <_free_r+0x32>
 802a5c0:	6063      	str	r3, [r4, #4]
 802a5c2:	6014      	str	r4, [r2, #0]
 802a5c4:	b003      	add	sp, #12
 802a5c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a5ca:	f000 bfc9 	b.w	802b560 <__malloc_unlock>
 802a5ce:	42a3      	cmp	r3, r4
 802a5d0:	d90b      	bls.n	802a5ea <_free_r+0x4e>
 802a5d2:	6821      	ldr	r1, [r4, #0]
 802a5d4:	1862      	adds	r2, r4, r1
 802a5d6:	4293      	cmp	r3, r2
 802a5d8:	bf04      	itt	eq
 802a5da:	681a      	ldreq	r2, [r3, #0]
 802a5dc:	685b      	ldreq	r3, [r3, #4]
 802a5de:	6063      	str	r3, [r4, #4]
 802a5e0:	bf04      	itt	eq
 802a5e2:	1852      	addeq	r2, r2, r1
 802a5e4:	6022      	streq	r2, [r4, #0]
 802a5e6:	602c      	str	r4, [r5, #0]
 802a5e8:	e7ec      	b.n	802a5c4 <_free_r+0x28>
 802a5ea:	461a      	mov	r2, r3
 802a5ec:	685b      	ldr	r3, [r3, #4]
 802a5ee:	b10b      	cbz	r3, 802a5f4 <_free_r+0x58>
 802a5f0:	42a3      	cmp	r3, r4
 802a5f2:	d9fa      	bls.n	802a5ea <_free_r+0x4e>
 802a5f4:	6811      	ldr	r1, [r2, #0]
 802a5f6:	1855      	adds	r5, r2, r1
 802a5f8:	42a5      	cmp	r5, r4
 802a5fa:	d10b      	bne.n	802a614 <_free_r+0x78>
 802a5fc:	6824      	ldr	r4, [r4, #0]
 802a5fe:	4421      	add	r1, r4
 802a600:	1854      	adds	r4, r2, r1
 802a602:	42a3      	cmp	r3, r4
 802a604:	6011      	str	r1, [r2, #0]
 802a606:	d1dd      	bne.n	802a5c4 <_free_r+0x28>
 802a608:	681c      	ldr	r4, [r3, #0]
 802a60a:	685b      	ldr	r3, [r3, #4]
 802a60c:	6053      	str	r3, [r2, #4]
 802a60e:	4421      	add	r1, r4
 802a610:	6011      	str	r1, [r2, #0]
 802a612:	e7d7      	b.n	802a5c4 <_free_r+0x28>
 802a614:	d902      	bls.n	802a61c <_free_r+0x80>
 802a616:	230c      	movs	r3, #12
 802a618:	6003      	str	r3, [r0, #0]
 802a61a:	e7d3      	b.n	802a5c4 <_free_r+0x28>
 802a61c:	6825      	ldr	r5, [r4, #0]
 802a61e:	1961      	adds	r1, r4, r5
 802a620:	428b      	cmp	r3, r1
 802a622:	bf04      	itt	eq
 802a624:	6819      	ldreq	r1, [r3, #0]
 802a626:	685b      	ldreq	r3, [r3, #4]
 802a628:	6063      	str	r3, [r4, #4]
 802a62a:	bf04      	itt	eq
 802a62c:	1949      	addeq	r1, r1, r5
 802a62e:	6021      	streq	r1, [r4, #0]
 802a630:	6054      	str	r4, [r2, #4]
 802a632:	e7c7      	b.n	802a5c4 <_free_r+0x28>
 802a634:	b003      	add	sp, #12
 802a636:	bd30      	pop	{r4, r5, pc}
 802a638:	20010d48 	.word	0x20010d48

0802a63c <_malloc_r>:
 802a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a63e:	1ccd      	adds	r5, r1, #3
 802a640:	f025 0503 	bic.w	r5, r5, #3
 802a644:	3508      	adds	r5, #8
 802a646:	2d0c      	cmp	r5, #12
 802a648:	bf38      	it	cc
 802a64a:	250c      	movcc	r5, #12
 802a64c:	2d00      	cmp	r5, #0
 802a64e:	4606      	mov	r6, r0
 802a650:	db01      	blt.n	802a656 <_malloc_r+0x1a>
 802a652:	42a9      	cmp	r1, r5
 802a654:	d903      	bls.n	802a65e <_malloc_r+0x22>
 802a656:	230c      	movs	r3, #12
 802a658:	6033      	str	r3, [r6, #0]
 802a65a:	2000      	movs	r0, #0
 802a65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a65e:	f000 ff79 	bl	802b554 <__malloc_lock>
 802a662:	4921      	ldr	r1, [pc, #132]	; (802a6e8 <_malloc_r+0xac>)
 802a664:	680a      	ldr	r2, [r1, #0]
 802a666:	4614      	mov	r4, r2
 802a668:	b99c      	cbnz	r4, 802a692 <_malloc_r+0x56>
 802a66a:	4f20      	ldr	r7, [pc, #128]	; (802a6ec <_malloc_r+0xb0>)
 802a66c:	683b      	ldr	r3, [r7, #0]
 802a66e:	b923      	cbnz	r3, 802a67a <_malloc_r+0x3e>
 802a670:	4621      	mov	r1, r4
 802a672:	4630      	mov	r0, r6
 802a674:	f000 fc26 	bl	802aec4 <_sbrk_r>
 802a678:	6038      	str	r0, [r7, #0]
 802a67a:	4629      	mov	r1, r5
 802a67c:	4630      	mov	r0, r6
 802a67e:	f000 fc21 	bl	802aec4 <_sbrk_r>
 802a682:	1c43      	adds	r3, r0, #1
 802a684:	d123      	bne.n	802a6ce <_malloc_r+0x92>
 802a686:	230c      	movs	r3, #12
 802a688:	6033      	str	r3, [r6, #0]
 802a68a:	4630      	mov	r0, r6
 802a68c:	f000 ff68 	bl	802b560 <__malloc_unlock>
 802a690:	e7e3      	b.n	802a65a <_malloc_r+0x1e>
 802a692:	6823      	ldr	r3, [r4, #0]
 802a694:	1b5b      	subs	r3, r3, r5
 802a696:	d417      	bmi.n	802a6c8 <_malloc_r+0x8c>
 802a698:	2b0b      	cmp	r3, #11
 802a69a:	d903      	bls.n	802a6a4 <_malloc_r+0x68>
 802a69c:	6023      	str	r3, [r4, #0]
 802a69e:	441c      	add	r4, r3
 802a6a0:	6025      	str	r5, [r4, #0]
 802a6a2:	e004      	b.n	802a6ae <_malloc_r+0x72>
 802a6a4:	6863      	ldr	r3, [r4, #4]
 802a6a6:	42a2      	cmp	r2, r4
 802a6a8:	bf0c      	ite	eq
 802a6aa:	600b      	streq	r3, [r1, #0]
 802a6ac:	6053      	strne	r3, [r2, #4]
 802a6ae:	4630      	mov	r0, r6
 802a6b0:	f000 ff56 	bl	802b560 <__malloc_unlock>
 802a6b4:	f104 000b 	add.w	r0, r4, #11
 802a6b8:	1d23      	adds	r3, r4, #4
 802a6ba:	f020 0007 	bic.w	r0, r0, #7
 802a6be:	1ac2      	subs	r2, r0, r3
 802a6c0:	d0cc      	beq.n	802a65c <_malloc_r+0x20>
 802a6c2:	1a1b      	subs	r3, r3, r0
 802a6c4:	50a3      	str	r3, [r4, r2]
 802a6c6:	e7c9      	b.n	802a65c <_malloc_r+0x20>
 802a6c8:	4622      	mov	r2, r4
 802a6ca:	6864      	ldr	r4, [r4, #4]
 802a6cc:	e7cc      	b.n	802a668 <_malloc_r+0x2c>
 802a6ce:	1cc4      	adds	r4, r0, #3
 802a6d0:	f024 0403 	bic.w	r4, r4, #3
 802a6d4:	42a0      	cmp	r0, r4
 802a6d6:	d0e3      	beq.n	802a6a0 <_malloc_r+0x64>
 802a6d8:	1a21      	subs	r1, r4, r0
 802a6da:	4630      	mov	r0, r6
 802a6dc:	f000 fbf2 	bl	802aec4 <_sbrk_r>
 802a6e0:	3001      	adds	r0, #1
 802a6e2:	d1dd      	bne.n	802a6a0 <_malloc_r+0x64>
 802a6e4:	e7cf      	b.n	802a686 <_malloc_r+0x4a>
 802a6e6:	bf00      	nop
 802a6e8:	20010d48 	.word	0x20010d48
 802a6ec:	20010d4c 	.word	0x20010d4c

0802a6f0 <__sfputc_r>:
 802a6f0:	6893      	ldr	r3, [r2, #8]
 802a6f2:	3b01      	subs	r3, #1
 802a6f4:	2b00      	cmp	r3, #0
 802a6f6:	b410      	push	{r4}
 802a6f8:	6093      	str	r3, [r2, #8]
 802a6fa:	da08      	bge.n	802a70e <__sfputc_r+0x1e>
 802a6fc:	6994      	ldr	r4, [r2, #24]
 802a6fe:	42a3      	cmp	r3, r4
 802a700:	db01      	blt.n	802a706 <__sfputc_r+0x16>
 802a702:	290a      	cmp	r1, #10
 802a704:	d103      	bne.n	802a70e <__sfputc_r+0x1e>
 802a706:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a70a:	f000 bd8d 	b.w	802b228 <__swbuf_r>
 802a70e:	6813      	ldr	r3, [r2, #0]
 802a710:	1c58      	adds	r0, r3, #1
 802a712:	6010      	str	r0, [r2, #0]
 802a714:	7019      	strb	r1, [r3, #0]
 802a716:	4608      	mov	r0, r1
 802a718:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a71c:	4770      	bx	lr

0802a71e <__sfputs_r>:
 802a71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a720:	4606      	mov	r6, r0
 802a722:	460f      	mov	r7, r1
 802a724:	4614      	mov	r4, r2
 802a726:	18d5      	adds	r5, r2, r3
 802a728:	42ac      	cmp	r4, r5
 802a72a:	d101      	bne.n	802a730 <__sfputs_r+0x12>
 802a72c:	2000      	movs	r0, #0
 802a72e:	e007      	b.n	802a740 <__sfputs_r+0x22>
 802a730:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a734:	463a      	mov	r2, r7
 802a736:	4630      	mov	r0, r6
 802a738:	f7ff ffda 	bl	802a6f0 <__sfputc_r>
 802a73c:	1c43      	adds	r3, r0, #1
 802a73e:	d1f3      	bne.n	802a728 <__sfputs_r+0xa>
 802a740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a744 <_vfiprintf_r>:
 802a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a748:	460d      	mov	r5, r1
 802a74a:	b09d      	sub	sp, #116	; 0x74
 802a74c:	4614      	mov	r4, r2
 802a74e:	4698      	mov	r8, r3
 802a750:	4606      	mov	r6, r0
 802a752:	b118      	cbz	r0, 802a75c <_vfiprintf_r+0x18>
 802a754:	6983      	ldr	r3, [r0, #24]
 802a756:	b90b      	cbnz	r3, 802a75c <_vfiprintf_r+0x18>
 802a758:	f7ff fe0a 	bl	802a370 <__sinit>
 802a75c:	4b89      	ldr	r3, [pc, #548]	; (802a984 <_vfiprintf_r+0x240>)
 802a75e:	429d      	cmp	r5, r3
 802a760:	d11b      	bne.n	802a79a <_vfiprintf_r+0x56>
 802a762:	6875      	ldr	r5, [r6, #4]
 802a764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a766:	07d9      	lsls	r1, r3, #31
 802a768:	d405      	bmi.n	802a776 <_vfiprintf_r+0x32>
 802a76a:	89ab      	ldrh	r3, [r5, #12]
 802a76c:	059a      	lsls	r2, r3, #22
 802a76e:	d402      	bmi.n	802a776 <_vfiprintf_r+0x32>
 802a770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a772:	f7ff fed2 	bl	802a51a <__retarget_lock_acquire_recursive>
 802a776:	89ab      	ldrh	r3, [r5, #12]
 802a778:	071b      	lsls	r3, r3, #28
 802a77a:	d501      	bpl.n	802a780 <_vfiprintf_r+0x3c>
 802a77c:	692b      	ldr	r3, [r5, #16]
 802a77e:	b9eb      	cbnz	r3, 802a7bc <_vfiprintf_r+0x78>
 802a780:	4629      	mov	r1, r5
 802a782:	4630      	mov	r0, r6
 802a784:	f000 fdb4 	bl	802b2f0 <__swsetup_r>
 802a788:	b1c0      	cbz	r0, 802a7bc <_vfiprintf_r+0x78>
 802a78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a78c:	07dc      	lsls	r4, r3, #31
 802a78e:	d50e      	bpl.n	802a7ae <_vfiprintf_r+0x6a>
 802a790:	f04f 30ff 	mov.w	r0, #4294967295
 802a794:	b01d      	add	sp, #116	; 0x74
 802a796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a79a:	4b7b      	ldr	r3, [pc, #492]	; (802a988 <_vfiprintf_r+0x244>)
 802a79c:	429d      	cmp	r5, r3
 802a79e:	d101      	bne.n	802a7a4 <_vfiprintf_r+0x60>
 802a7a0:	68b5      	ldr	r5, [r6, #8]
 802a7a2:	e7df      	b.n	802a764 <_vfiprintf_r+0x20>
 802a7a4:	4b79      	ldr	r3, [pc, #484]	; (802a98c <_vfiprintf_r+0x248>)
 802a7a6:	429d      	cmp	r5, r3
 802a7a8:	bf08      	it	eq
 802a7aa:	68f5      	ldreq	r5, [r6, #12]
 802a7ac:	e7da      	b.n	802a764 <_vfiprintf_r+0x20>
 802a7ae:	89ab      	ldrh	r3, [r5, #12]
 802a7b0:	0598      	lsls	r0, r3, #22
 802a7b2:	d4ed      	bmi.n	802a790 <_vfiprintf_r+0x4c>
 802a7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a7b6:	f7ff feb1 	bl	802a51c <__retarget_lock_release_recursive>
 802a7ba:	e7e9      	b.n	802a790 <_vfiprintf_r+0x4c>
 802a7bc:	2300      	movs	r3, #0
 802a7be:	9309      	str	r3, [sp, #36]	; 0x24
 802a7c0:	2320      	movs	r3, #32
 802a7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 802a7ca:	2330      	movs	r3, #48	; 0x30
 802a7cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a990 <_vfiprintf_r+0x24c>
 802a7d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a7d4:	f04f 0901 	mov.w	r9, #1
 802a7d8:	4623      	mov	r3, r4
 802a7da:	469a      	mov	sl, r3
 802a7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a7e0:	b10a      	cbz	r2, 802a7e6 <_vfiprintf_r+0xa2>
 802a7e2:	2a25      	cmp	r2, #37	; 0x25
 802a7e4:	d1f9      	bne.n	802a7da <_vfiprintf_r+0x96>
 802a7e6:	ebba 0b04 	subs.w	fp, sl, r4
 802a7ea:	d00b      	beq.n	802a804 <_vfiprintf_r+0xc0>
 802a7ec:	465b      	mov	r3, fp
 802a7ee:	4622      	mov	r2, r4
 802a7f0:	4629      	mov	r1, r5
 802a7f2:	4630      	mov	r0, r6
 802a7f4:	f7ff ff93 	bl	802a71e <__sfputs_r>
 802a7f8:	3001      	adds	r0, #1
 802a7fa:	f000 80aa 	beq.w	802a952 <_vfiprintf_r+0x20e>
 802a7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a800:	445a      	add	r2, fp
 802a802:	9209      	str	r2, [sp, #36]	; 0x24
 802a804:	f89a 3000 	ldrb.w	r3, [sl]
 802a808:	2b00      	cmp	r3, #0
 802a80a:	f000 80a2 	beq.w	802a952 <_vfiprintf_r+0x20e>
 802a80e:	2300      	movs	r3, #0
 802a810:	f04f 32ff 	mov.w	r2, #4294967295
 802a814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a818:	f10a 0a01 	add.w	sl, sl, #1
 802a81c:	9304      	str	r3, [sp, #16]
 802a81e:	9307      	str	r3, [sp, #28]
 802a820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a824:	931a      	str	r3, [sp, #104]	; 0x68
 802a826:	4654      	mov	r4, sl
 802a828:	2205      	movs	r2, #5
 802a82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a82e:	4858      	ldr	r0, [pc, #352]	; (802a990 <_vfiprintf_r+0x24c>)
 802a830:	f7d5 fcf6 	bl	8000220 <memchr>
 802a834:	9a04      	ldr	r2, [sp, #16]
 802a836:	b9d8      	cbnz	r0, 802a870 <_vfiprintf_r+0x12c>
 802a838:	06d1      	lsls	r1, r2, #27
 802a83a:	bf44      	itt	mi
 802a83c:	2320      	movmi	r3, #32
 802a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a842:	0713      	lsls	r3, r2, #28
 802a844:	bf44      	itt	mi
 802a846:	232b      	movmi	r3, #43	; 0x2b
 802a848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a84c:	f89a 3000 	ldrb.w	r3, [sl]
 802a850:	2b2a      	cmp	r3, #42	; 0x2a
 802a852:	d015      	beq.n	802a880 <_vfiprintf_r+0x13c>
 802a854:	9a07      	ldr	r2, [sp, #28]
 802a856:	4654      	mov	r4, sl
 802a858:	2000      	movs	r0, #0
 802a85a:	f04f 0c0a 	mov.w	ip, #10
 802a85e:	4621      	mov	r1, r4
 802a860:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a864:	3b30      	subs	r3, #48	; 0x30
 802a866:	2b09      	cmp	r3, #9
 802a868:	d94e      	bls.n	802a908 <_vfiprintf_r+0x1c4>
 802a86a:	b1b0      	cbz	r0, 802a89a <_vfiprintf_r+0x156>
 802a86c:	9207      	str	r2, [sp, #28]
 802a86e:	e014      	b.n	802a89a <_vfiprintf_r+0x156>
 802a870:	eba0 0308 	sub.w	r3, r0, r8
 802a874:	fa09 f303 	lsl.w	r3, r9, r3
 802a878:	4313      	orrs	r3, r2
 802a87a:	9304      	str	r3, [sp, #16]
 802a87c:	46a2      	mov	sl, r4
 802a87e:	e7d2      	b.n	802a826 <_vfiprintf_r+0xe2>
 802a880:	9b03      	ldr	r3, [sp, #12]
 802a882:	1d19      	adds	r1, r3, #4
 802a884:	681b      	ldr	r3, [r3, #0]
 802a886:	9103      	str	r1, [sp, #12]
 802a888:	2b00      	cmp	r3, #0
 802a88a:	bfbb      	ittet	lt
 802a88c:	425b      	neglt	r3, r3
 802a88e:	f042 0202 	orrlt.w	r2, r2, #2
 802a892:	9307      	strge	r3, [sp, #28]
 802a894:	9307      	strlt	r3, [sp, #28]
 802a896:	bfb8      	it	lt
 802a898:	9204      	strlt	r2, [sp, #16]
 802a89a:	7823      	ldrb	r3, [r4, #0]
 802a89c:	2b2e      	cmp	r3, #46	; 0x2e
 802a89e:	d10c      	bne.n	802a8ba <_vfiprintf_r+0x176>
 802a8a0:	7863      	ldrb	r3, [r4, #1]
 802a8a2:	2b2a      	cmp	r3, #42	; 0x2a
 802a8a4:	d135      	bne.n	802a912 <_vfiprintf_r+0x1ce>
 802a8a6:	9b03      	ldr	r3, [sp, #12]
 802a8a8:	1d1a      	adds	r2, r3, #4
 802a8aa:	681b      	ldr	r3, [r3, #0]
 802a8ac:	9203      	str	r2, [sp, #12]
 802a8ae:	2b00      	cmp	r3, #0
 802a8b0:	bfb8      	it	lt
 802a8b2:	f04f 33ff 	movlt.w	r3, #4294967295
 802a8b6:	3402      	adds	r4, #2
 802a8b8:	9305      	str	r3, [sp, #20]
 802a8ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a9a0 <_vfiprintf_r+0x25c>
 802a8be:	7821      	ldrb	r1, [r4, #0]
 802a8c0:	2203      	movs	r2, #3
 802a8c2:	4650      	mov	r0, sl
 802a8c4:	f7d5 fcac 	bl	8000220 <memchr>
 802a8c8:	b140      	cbz	r0, 802a8dc <_vfiprintf_r+0x198>
 802a8ca:	2340      	movs	r3, #64	; 0x40
 802a8cc:	eba0 000a 	sub.w	r0, r0, sl
 802a8d0:	fa03 f000 	lsl.w	r0, r3, r0
 802a8d4:	9b04      	ldr	r3, [sp, #16]
 802a8d6:	4303      	orrs	r3, r0
 802a8d8:	3401      	adds	r4, #1
 802a8da:	9304      	str	r3, [sp, #16]
 802a8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a8e0:	482c      	ldr	r0, [pc, #176]	; (802a994 <_vfiprintf_r+0x250>)
 802a8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a8e6:	2206      	movs	r2, #6
 802a8e8:	f7d5 fc9a 	bl	8000220 <memchr>
 802a8ec:	2800      	cmp	r0, #0
 802a8ee:	d03f      	beq.n	802a970 <_vfiprintf_r+0x22c>
 802a8f0:	4b29      	ldr	r3, [pc, #164]	; (802a998 <_vfiprintf_r+0x254>)
 802a8f2:	bb1b      	cbnz	r3, 802a93c <_vfiprintf_r+0x1f8>
 802a8f4:	9b03      	ldr	r3, [sp, #12]
 802a8f6:	3307      	adds	r3, #7
 802a8f8:	f023 0307 	bic.w	r3, r3, #7
 802a8fc:	3308      	adds	r3, #8
 802a8fe:	9303      	str	r3, [sp, #12]
 802a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a902:	443b      	add	r3, r7
 802a904:	9309      	str	r3, [sp, #36]	; 0x24
 802a906:	e767      	b.n	802a7d8 <_vfiprintf_r+0x94>
 802a908:	fb0c 3202 	mla	r2, ip, r2, r3
 802a90c:	460c      	mov	r4, r1
 802a90e:	2001      	movs	r0, #1
 802a910:	e7a5      	b.n	802a85e <_vfiprintf_r+0x11a>
 802a912:	2300      	movs	r3, #0
 802a914:	3401      	adds	r4, #1
 802a916:	9305      	str	r3, [sp, #20]
 802a918:	4619      	mov	r1, r3
 802a91a:	f04f 0c0a 	mov.w	ip, #10
 802a91e:	4620      	mov	r0, r4
 802a920:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a924:	3a30      	subs	r2, #48	; 0x30
 802a926:	2a09      	cmp	r2, #9
 802a928:	d903      	bls.n	802a932 <_vfiprintf_r+0x1ee>
 802a92a:	2b00      	cmp	r3, #0
 802a92c:	d0c5      	beq.n	802a8ba <_vfiprintf_r+0x176>
 802a92e:	9105      	str	r1, [sp, #20]
 802a930:	e7c3      	b.n	802a8ba <_vfiprintf_r+0x176>
 802a932:	fb0c 2101 	mla	r1, ip, r1, r2
 802a936:	4604      	mov	r4, r0
 802a938:	2301      	movs	r3, #1
 802a93a:	e7f0      	b.n	802a91e <_vfiprintf_r+0x1da>
 802a93c:	ab03      	add	r3, sp, #12
 802a93e:	9300      	str	r3, [sp, #0]
 802a940:	462a      	mov	r2, r5
 802a942:	4b16      	ldr	r3, [pc, #88]	; (802a99c <_vfiprintf_r+0x258>)
 802a944:	a904      	add	r1, sp, #16
 802a946:	4630      	mov	r0, r6
 802a948:	f3af 8000 	nop.w
 802a94c:	4607      	mov	r7, r0
 802a94e:	1c78      	adds	r0, r7, #1
 802a950:	d1d6      	bne.n	802a900 <_vfiprintf_r+0x1bc>
 802a952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a954:	07d9      	lsls	r1, r3, #31
 802a956:	d405      	bmi.n	802a964 <_vfiprintf_r+0x220>
 802a958:	89ab      	ldrh	r3, [r5, #12]
 802a95a:	059a      	lsls	r2, r3, #22
 802a95c:	d402      	bmi.n	802a964 <_vfiprintf_r+0x220>
 802a95e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a960:	f7ff fddc 	bl	802a51c <__retarget_lock_release_recursive>
 802a964:	89ab      	ldrh	r3, [r5, #12]
 802a966:	065b      	lsls	r3, r3, #25
 802a968:	f53f af12 	bmi.w	802a790 <_vfiprintf_r+0x4c>
 802a96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a96e:	e711      	b.n	802a794 <_vfiprintf_r+0x50>
 802a970:	ab03      	add	r3, sp, #12
 802a972:	9300      	str	r3, [sp, #0]
 802a974:	462a      	mov	r2, r5
 802a976:	4b09      	ldr	r3, [pc, #36]	; (802a99c <_vfiprintf_r+0x258>)
 802a978:	a904      	add	r1, sp, #16
 802a97a:	4630      	mov	r0, r6
 802a97c:	f000 f880 	bl	802aa80 <_printf_i>
 802a980:	e7e4      	b.n	802a94c <_vfiprintf_r+0x208>
 802a982:	bf00      	nop
 802a984:	08037bd8 	.word	0x08037bd8
 802a988:	08037bf8 	.word	0x08037bf8
 802a98c:	08037bb8 	.word	0x08037bb8
 802a990:	08037c1c 	.word	0x08037c1c
 802a994:	08037c26 	.word	0x08037c26
 802a998:	00000000 	.word	0x00000000
 802a99c:	0802a71f 	.word	0x0802a71f
 802a9a0:	08037c22 	.word	0x08037c22

0802a9a4 <_printf_common>:
 802a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a9a8:	4616      	mov	r6, r2
 802a9aa:	4699      	mov	r9, r3
 802a9ac:	688a      	ldr	r2, [r1, #8]
 802a9ae:	690b      	ldr	r3, [r1, #16]
 802a9b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a9b4:	4293      	cmp	r3, r2
 802a9b6:	bfb8      	it	lt
 802a9b8:	4613      	movlt	r3, r2
 802a9ba:	6033      	str	r3, [r6, #0]
 802a9bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a9c0:	4607      	mov	r7, r0
 802a9c2:	460c      	mov	r4, r1
 802a9c4:	b10a      	cbz	r2, 802a9ca <_printf_common+0x26>
 802a9c6:	3301      	adds	r3, #1
 802a9c8:	6033      	str	r3, [r6, #0]
 802a9ca:	6823      	ldr	r3, [r4, #0]
 802a9cc:	0699      	lsls	r1, r3, #26
 802a9ce:	bf42      	ittt	mi
 802a9d0:	6833      	ldrmi	r3, [r6, #0]
 802a9d2:	3302      	addmi	r3, #2
 802a9d4:	6033      	strmi	r3, [r6, #0]
 802a9d6:	6825      	ldr	r5, [r4, #0]
 802a9d8:	f015 0506 	ands.w	r5, r5, #6
 802a9dc:	d106      	bne.n	802a9ec <_printf_common+0x48>
 802a9de:	f104 0a19 	add.w	sl, r4, #25
 802a9e2:	68e3      	ldr	r3, [r4, #12]
 802a9e4:	6832      	ldr	r2, [r6, #0]
 802a9e6:	1a9b      	subs	r3, r3, r2
 802a9e8:	42ab      	cmp	r3, r5
 802a9ea:	dc26      	bgt.n	802aa3a <_printf_common+0x96>
 802a9ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a9f0:	1e13      	subs	r3, r2, #0
 802a9f2:	6822      	ldr	r2, [r4, #0]
 802a9f4:	bf18      	it	ne
 802a9f6:	2301      	movne	r3, #1
 802a9f8:	0692      	lsls	r2, r2, #26
 802a9fa:	d42b      	bmi.n	802aa54 <_printf_common+0xb0>
 802a9fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aa00:	4649      	mov	r1, r9
 802aa02:	4638      	mov	r0, r7
 802aa04:	47c0      	blx	r8
 802aa06:	3001      	adds	r0, #1
 802aa08:	d01e      	beq.n	802aa48 <_printf_common+0xa4>
 802aa0a:	6823      	ldr	r3, [r4, #0]
 802aa0c:	68e5      	ldr	r5, [r4, #12]
 802aa0e:	6832      	ldr	r2, [r6, #0]
 802aa10:	f003 0306 	and.w	r3, r3, #6
 802aa14:	2b04      	cmp	r3, #4
 802aa16:	bf08      	it	eq
 802aa18:	1aad      	subeq	r5, r5, r2
 802aa1a:	68a3      	ldr	r3, [r4, #8]
 802aa1c:	6922      	ldr	r2, [r4, #16]
 802aa1e:	bf0c      	ite	eq
 802aa20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802aa24:	2500      	movne	r5, #0
 802aa26:	4293      	cmp	r3, r2
 802aa28:	bfc4      	itt	gt
 802aa2a:	1a9b      	subgt	r3, r3, r2
 802aa2c:	18ed      	addgt	r5, r5, r3
 802aa2e:	2600      	movs	r6, #0
 802aa30:	341a      	adds	r4, #26
 802aa32:	42b5      	cmp	r5, r6
 802aa34:	d11a      	bne.n	802aa6c <_printf_common+0xc8>
 802aa36:	2000      	movs	r0, #0
 802aa38:	e008      	b.n	802aa4c <_printf_common+0xa8>
 802aa3a:	2301      	movs	r3, #1
 802aa3c:	4652      	mov	r2, sl
 802aa3e:	4649      	mov	r1, r9
 802aa40:	4638      	mov	r0, r7
 802aa42:	47c0      	blx	r8
 802aa44:	3001      	adds	r0, #1
 802aa46:	d103      	bne.n	802aa50 <_printf_common+0xac>
 802aa48:	f04f 30ff 	mov.w	r0, #4294967295
 802aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aa50:	3501      	adds	r5, #1
 802aa52:	e7c6      	b.n	802a9e2 <_printf_common+0x3e>
 802aa54:	18e1      	adds	r1, r4, r3
 802aa56:	1c5a      	adds	r2, r3, #1
 802aa58:	2030      	movs	r0, #48	; 0x30
 802aa5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802aa5e:	4422      	add	r2, r4
 802aa60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802aa64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802aa68:	3302      	adds	r3, #2
 802aa6a:	e7c7      	b.n	802a9fc <_printf_common+0x58>
 802aa6c:	2301      	movs	r3, #1
 802aa6e:	4622      	mov	r2, r4
 802aa70:	4649      	mov	r1, r9
 802aa72:	4638      	mov	r0, r7
 802aa74:	47c0      	blx	r8
 802aa76:	3001      	adds	r0, #1
 802aa78:	d0e6      	beq.n	802aa48 <_printf_common+0xa4>
 802aa7a:	3601      	adds	r6, #1
 802aa7c:	e7d9      	b.n	802aa32 <_printf_common+0x8e>
	...

0802aa80 <_printf_i>:
 802aa80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802aa84:	460c      	mov	r4, r1
 802aa86:	4691      	mov	r9, r2
 802aa88:	7e27      	ldrb	r7, [r4, #24]
 802aa8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802aa8c:	2f78      	cmp	r7, #120	; 0x78
 802aa8e:	4680      	mov	r8, r0
 802aa90:	469a      	mov	sl, r3
 802aa92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aa96:	d807      	bhi.n	802aaa8 <_printf_i+0x28>
 802aa98:	2f62      	cmp	r7, #98	; 0x62
 802aa9a:	d80a      	bhi.n	802aab2 <_printf_i+0x32>
 802aa9c:	2f00      	cmp	r7, #0
 802aa9e:	f000 80d8 	beq.w	802ac52 <_printf_i+0x1d2>
 802aaa2:	2f58      	cmp	r7, #88	; 0x58
 802aaa4:	f000 80a3 	beq.w	802abee <_printf_i+0x16e>
 802aaa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802aaac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802aab0:	e03a      	b.n	802ab28 <_printf_i+0xa8>
 802aab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802aab6:	2b15      	cmp	r3, #21
 802aab8:	d8f6      	bhi.n	802aaa8 <_printf_i+0x28>
 802aaba:	a001      	add	r0, pc, #4	; (adr r0, 802aac0 <_printf_i+0x40>)
 802aabc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802aac0:	0802ab19 	.word	0x0802ab19
 802aac4:	0802ab2d 	.word	0x0802ab2d
 802aac8:	0802aaa9 	.word	0x0802aaa9
 802aacc:	0802aaa9 	.word	0x0802aaa9
 802aad0:	0802aaa9 	.word	0x0802aaa9
 802aad4:	0802aaa9 	.word	0x0802aaa9
 802aad8:	0802ab2d 	.word	0x0802ab2d
 802aadc:	0802aaa9 	.word	0x0802aaa9
 802aae0:	0802aaa9 	.word	0x0802aaa9
 802aae4:	0802aaa9 	.word	0x0802aaa9
 802aae8:	0802aaa9 	.word	0x0802aaa9
 802aaec:	0802ac39 	.word	0x0802ac39
 802aaf0:	0802ab5d 	.word	0x0802ab5d
 802aaf4:	0802ac1b 	.word	0x0802ac1b
 802aaf8:	0802aaa9 	.word	0x0802aaa9
 802aafc:	0802aaa9 	.word	0x0802aaa9
 802ab00:	0802ac5b 	.word	0x0802ac5b
 802ab04:	0802aaa9 	.word	0x0802aaa9
 802ab08:	0802ab5d 	.word	0x0802ab5d
 802ab0c:	0802aaa9 	.word	0x0802aaa9
 802ab10:	0802aaa9 	.word	0x0802aaa9
 802ab14:	0802ac23 	.word	0x0802ac23
 802ab18:	680b      	ldr	r3, [r1, #0]
 802ab1a:	1d1a      	adds	r2, r3, #4
 802ab1c:	681b      	ldr	r3, [r3, #0]
 802ab1e:	600a      	str	r2, [r1, #0]
 802ab20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802ab24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ab28:	2301      	movs	r3, #1
 802ab2a:	e0a3      	b.n	802ac74 <_printf_i+0x1f4>
 802ab2c:	6825      	ldr	r5, [r4, #0]
 802ab2e:	6808      	ldr	r0, [r1, #0]
 802ab30:	062e      	lsls	r6, r5, #24
 802ab32:	f100 0304 	add.w	r3, r0, #4
 802ab36:	d50a      	bpl.n	802ab4e <_printf_i+0xce>
 802ab38:	6805      	ldr	r5, [r0, #0]
 802ab3a:	600b      	str	r3, [r1, #0]
 802ab3c:	2d00      	cmp	r5, #0
 802ab3e:	da03      	bge.n	802ab48 <_printf_i+0xc8>
 802ab40:	232d      	movs	r3, #45	; 0x2d
 802ab42:	426d      	negs	r5, r5
 802ab44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ab48:	485e      	ldr	r0, [pc, #376]	; (802acc4 <_printf_i+0x244>)
 802ab4a:	230a      	movs	r3, #10
 802ab4c:	e019      	b.n	802ab82 <_printf_i+0x102>
 802ab4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 802ab52:	6805      	ldr	r5, [r0, #0]
 802ab54:	600b      	str	r3, [r1, #0]
 802ab56:	bf18      	it	ne
 802ab58:	b22d      	sxthne	r5, r5
 802ab5a:	e7ef      	b.n	802ab3c <_printf_i+0xbc>
 802ab5c:	680b      	ldr	r3, [r1, #0]
 802ab5e:	6825      	ldr	r5, [r4, #0]
 802ab60:	1d18      	adds	r0, r3, #4
 802ab62:	6008      	str	r0, [r1, #0]
 802ab64:	0628      	lsls	r0, r5, #24
 802ab66:	d501      	bpl.n	802ab6c <_printf_i+0xec>
 802ab68:	681d      	ldr	r5, [r3, #0]
 802ab6a:	e002      	b.n	802ab72 <_printf_i+0xf2>
 802ab6c:	0669      	lsls	r1, r5, #25
 802ab6e:	d5fb      	bpl.n	802ab68 <_printf_i+0xe8>
 802ab70:	881d      	ldrh	r5, [r3, #0]
 802ab72:	4854      	ldr	r0, [pc, #336]	; (802acc4 <_printf_i+0x244>)
 802ab74:	2f6f      	cmp	r7, #111	; 0x6f
 802ab76:	bf0c      	ite	eq
 802ab78:	2308      	moveq	r3, #8
 802ab7a:	230a      	movne	r3, #10
 802ab7c:	2100      	movs	r1, #0
 802ab7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ab82:	6866      	ldr	r6, [r4, #4]
 802ab84:	60a6      	str	r6, [r4, #8]
 802ab86:	2e00      	cmp	r6, #0
 802ab88:	bfa2      	ittt	ge
 802ab8a:	6821      	ldrge	r1, [r4, #0]
 802ab8c:	f021 0104 	bicge.w	r1, r1, #4
 802ab90:	6021      	strge	r1, [r4, #0]
 802ab92:	b90d      	cbnz	r5, 802ab98 <_printf_i+0x118>
 802ab94:	2e00      	cmp	r6, #0
 802ab96:	d04d      	beq.n	802ac34 <_printf_i+0x1b4>
 802ab98:	4616      	mov	r6, r2
 802ab9a:	fbb5 f1f3 	udiv	r1, r5, r3
 802ab9e:	fb03 5711 	mls	r7, r3, r1, r5
 802aba2:	5dc7      	ldrb	r7, [r0, r7]
 802aba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802aba8:	462f      	mov	r7, r5
 802abaa:	42bb      	cmp	r3, r7
 802abac:	460d      	mov	r5, r1
 802abae:	d9f4      	bls.n	802ab9a <_printf_i+0x11a>
 802abb0:	2b08      	cmp	r3, #8
 802abb2:	d10b      	bne.n	802abcc <_printf_i+0x14c>
 802abb4:	6823      	ldr	r3, [r4, #0]
 802abb6:	07df      	lsls	r7, r3, #31
 802abb8:	d508      	bpl.n	802abcc <_printf_i+0x14c>
 802abba:	6923      	ldr	r3, [r4, #16]
 802abbc:	6861      	ldr	r1, [r4, #4]
 802abbe:	4299      	cmp	r1, r3
 802abc0:	bfde      	ittt	le
 802abc2:	2330      	movle	r3, #48	; 0x30
 802abc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 802abc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 802abcc:	1b92      	subs	r2, r2, r6
 802abce:	6122      	str	r2, [r4, #16]
 802abd0:	f8cd a000 	str.w	sl, [sp]
 802abd4:	464b      	mov	r3, r9
 802abd6:	aa03      	add	r2, sp, #12
 802abd8:	4621      	mov	r1, r4
 802abda:	4640      	mov	r0, r8
 802abdc:	f7ff fee2 	bl	802a9a4 <_printf_common>
 802abe0:	3001      	adds	r0, #1
 802abe2:	d14c      	bne.n	802ac7e <_printf_i+0x1fe>
 802abe4:	f04f 30ff 	mov.w	r0, #4294967295
 802abe8:	b004      	add	sp, #16
 802abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802abee:	4835      	ldr	r0, [pc, #212]	; (802acc4 <_printf_i+0x244>)
 802abf0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802abf4:	6823      	ldr	r3, [r4, #0]
 802abf6:	680e      	ldr	r6, [r1, #0]
 802abf8:	061f      	lsls	r7, r3, #24
 802abfa:	f856 5b04 	ldr.w	r5, [r6], #4
 802abfe:	600e      	str	r6, [r1, #0]
 802ac00:	d514      	bpl.n	802ac2c <_printf_i+0x1ac>
 802ac02:	07d9      	lsls	r1, r3, #31
 802ac04:	bf44      	itt	mi
 802ac06:	f043 0320 	orrmi.w	r3, r3, #32
 802ac0a:	6023      	strmi	r3, [r4, #0]
 802ac0c:	b91d      	cbnz	r5, 802ac16 <_printf_i+0x196>
 802ac0e:	6823      	ldr	r3, [r4, #0]
 802ac10:	f023 0320 	bic.w	r3, r3, #32
 802ac14:	6023      	str	r3, [r4, #0]
 802ac16:	2310      	movs	r3, #16
 802ac18:	e7b0      	b.n	802ab7c <_printf_i+0xfc>
 802ac1a:	6823      	ldr	r3, [r4, #0]
 802ac1c:	f043 0320 	orr.w	r3, r3, #32
 802ac20:	6023      	str	r3, [r4, #0]
 802ac22:	2378      	movs	r3, #120	; 0x78
 802ac24:	4828      	ldr	r0, [pc, #160]	; (802acc8 <_printf_i+0x248>)
 802ac26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ac2a:	e7e3      	b.n	802abf4 <_printf_i+0x174>
 802ac2c:	065e      	lsls	r6, r3, #25
 802ac2e:	bf48      	it	mi
 802ac30:	b2ad      	uxthmi	r5, r5
 802ac32:	e7e6      	b.n	802ac02 <_printf_i+0x182>
 802ac34:	4616      	mov	r6, r2
 802ac36:	e7bb      	b.n	802abb0 <_printf_i+0x130>
 802ac38:	680b      	ldr	r3, [r1, #0]
 802ac3a:	6826      	ldr	r6, [r4, #0]
 802ac3c:	6960      	ldr	r0, [r4, #20]
 802ac3e:	1d1d      	adds	r5, r3, #4
 802ac40:	600d      	str	r5, [r1, #0]
 802ac42:	0635      	lsls	r5, r6, #24
 802ac44:	681b      	ldr	r3, [r3, #0]
 802ac46:	d501      	bpl.n	802ac4c <_printf_i+0x1cc>
 802ac48:	6018      	str	r0, [r3, #0]
 802ac4a:	e002      	b.n	802ac52 <_printf_i+0x1d2>
 802ac4c:	0671      	lsls	r1, r6, #25
 802ac4e:	d5fb      	bpl.n	802ac48 <_printf_i+0x1c8>
 802ac50:	8018      	strh	r0, [r3, #0]
 802ac52:	2300      	movs	r3, #0
 802ac54:	6123      	str	r3, [r4, #16]
 802ac56:	4616      	mov	r6, r2
 802ac58:	e7ba      	b.n	802abd0 <_printf_i+0x150>
 802ac5a:	680b      	ldr	r3, [r1, #0]
 802ac5c:	1d1a      	adds	r2, r3, #4
 802ac5e:	600a      	str	r2, [r1, #0]
 802ac60:	681e      	ldr	r6, [r3, #0]
 802ac62:	6862      	ldr	r2, [r4, #4]
 802ac64:	2100      	movs	r1, #0
 802ac66:	4630      	mov	r0, r6
 802ac68:	f7d5 fada 	bl	8000220 <memchr>
 802ac6c:	b108      	cbz	r0, 802ac72 <_printf_i+0x1f2>
 802ac6e:	1b80      	subs	r0, r0, r6
 802ac70:	6060      	str	r0, [r4, #4]
 802ac72:	6863      	ldr	r3, [r4, #4]
 802ac74:	6123      	str	r3, [r4, #16]
 802ac76:	2300      	movs	r3, #0
 802ac78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ac7c:	e7a8      	b.n	802abd0 <_printf_i+0x150>
 802ac7e:	6923      	ldr	r3, [r4, #16]
 802ac80:	4632      	mov	r2, r6
 802ac82:	4649      	mov	r1, r9
 802ac84:	4640      	mov	r0, r8
 802ac86:	47d0      	blx	sl
 802ac88:	3001      	adds	r0, #1
 802ac8a:	d0ab      	beq.n	802abe4 <_printf_i+0x164>
 802ac8c:	6823      	ldr	r3, [r4, #0]
 802ac8e:	079b      	lsls	r3, r3, #30
 802ac90:	d413      	bmi.n	802acba <_printf_i+0x23a>
 802ac92:	68e0      	ldr	r0, [r4, #12]
 802ac94:	9b03      	ldr	r3, [sp, #12]
 802ac96:	4298      	cmp	r0, r3
 802ac98:	bfb8      	it	lt
 802ac9a:	4618      	movlt	r0, r3
 802ac9c:	e7a4      	b.n	802abe8 <_printf_i+0x168>
 802ac9e:	2301      	movs	r3, #1
 802aca0:	4632      	mov	r2, r6
 802aca2:	4649      	mov	r1, r9
 802aca4:	4640      	mov	r0, r8
 802aca6:	47d0      	blx	sl
 802aca8:	3001      	adds	r0, #1
 802acaa:	d09b      	beq.n	802abe4 <_printf_i+0x164>
 802acac:	3501      	adds	r5, #1
 802acae:	68e3      	ldr	r3, [r4, #12]
 802acb0:	9903      	ldr	r1, [sp, #12]
 802acb2:	1a5b      	subs	r3, r3, r1
 802acb4:	42ab      	cmp	r3, r5
 802acb6:	dcf2      	bgt.n	802ac9e <_printf_i+0x21e>
 802acb8:	e7eb      	b.n	802ac92 <_printf_i+0x212>
 802acba:	2500      	movs	r5, #0
 802acbc:	f104 0619 	add.w	r6, r4, #25
 802acc0:	e7f5      	b.n	802acae <_printf_i+0x22e>
 802acc2:	bf00      	nop
 802acc4:	08037c2d 	.word	0x08037c2d
 802acc8:	08037c3e 	.word	0x08037c3e

0802accc <iprintf>:
 802accc:	b40f      	push	{r0, r1, r2, r3}
 802acce:	4b0a      	ldr	r3, [pc, #40]	; (802acf8 <iprintf+0x2c>)
 802acd0:	b513      	push	{r0, r1, r4, lr}
 802acd2:	681c      	ldr	r4, [r3, #0]
 802acd4:	b124      	cbz	r4, 802ace0 <iprintf+0x14>
 802acd6:	69a3      	ldr	r3, [r4, #24]
 802acd8:	b913      	cbnz	r3, 802ace0 <iprintf+0x14>
 802acda:	4620      	mov	r0, r4
 802acdc:	f7ff fb48 	bl	802a370 <__sinit>
 802ace0:	ab05      	add	r3, sp, #20
 802ace2:	9a04      	ldr	r2, [sp, #16]
 802ace4:	68a1      	ldr	r1, [r4, #8]
 802ace6:	9301      	str	r3, [sp, #4]
 802ace8:	4620      	mov	r0, r4
 802acea:	f7ff fd2b 	bl	802a744 <_vfiprintf_r>
 802acee:	b002      	add	sp, #8
 802acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802acf4:	b004      	add	sp, #16
 802acf6:	4770      	bx	lr
 802acf8:	20000054 	.word	0x20000054

0802acfc <_puts_r>:
 802acfc:	b570      	push	{r4, r5, r6, lr}
 802acfe:	460e      	mov	r6, r1
 802ad00:	4605      	mov	r5, r0
 802ad02:	b118      	cbz	r0, 802ad0c <_puts_r+0x10>
 802ad04:	6983      	ldr	r3, [r0, #24]
 802ad06:	b90b      	cbnz	r3, 802ad0c <_puts_r+0x10>
 802ad08:	f7ff fb32 	bl	802a370 <__sinit>
 802ad0c:	69ab      	ldr	r3, [r5, #24]
 802ad0e:	68ac      	ldr	r4, [r5, #8]
 802ad10:	b913      	cbnz	r3, 802ad18 <_puts_r+0x1c>
 802ad12:	4628      	mov	r0, r5
 802ad14:	f7ff fb2c 	bl	802a370 <__sinit>
 802ad18:	4b2c      	ldr	r3, [pc, #176]	; (802adcc <_puts_r+0xd0>)
 802ad1a:	429c      	cmp	r4, r3
 802ad1c:	d120      	bne.n	802ad60 <_puts_r+0x64>
 802ad1e:	686c      	ldr	r4, [r5, #4]
 802ad20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ad22:	07db      	lsls	r3, r3, #31
 802ad24:	d405      	bmi.n	802ad32 <_puts_r+0x36>
 802ad26:	89a3      	ldrh	r3, [r4, #12]
 802ad28:	0598      	lsls	r0, r3, #22
 802ad2a:	d402      	bmi.n	802ad32 <_puts_r+0x36>
 802ad2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ad2e:	f7ff fbf4 	bl	802a51a <__retarget_lock_acquire_recursive>
 802ad32:	89a3      	ldrh	r3, [r4, #12]
 802ad34:	0719      	lsls	r1, r3, #28
 802ad36:	d51d      	bpl.n	802ad74 <_puts_r+0x78>
 802ad38:	6923      	ldr	r3, [r4, #16]
 802ad3a:	b1db      	cbz	r3, 802ad74 <_puts_r+0x78>
 802ad3c:	3e01      	subs	r6, #1
 802ad3e:	68a3      	ldr	r3, [r4, #8]
 802ad40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802ad44:	3b01      	subs	r3, #1
 802ad46:	60a3      	str	r3, [r4, #8]
 802ad48:	bb39      	cbnz	r1, 802ad9a <_puts_r+0x9e>
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	da38      	bge.n	802adc0 <_puts_r+0xc4>
 802ad4e:	4622      	mov	r2, r4
 802ad50:	210a      	movs	r1, #10
 802ad52:	4628      	mov	r0, r5
 802ad54:	f000 fa68 	bl	802b228 <__swbuf_r>
 802ad58:	3001      	adds	r0, #1
 802ad5a:	d011      	beq.n	802ad80 <_puts_r+0x84>
 802ad5c:	250a      	movs	r5, #10
 802ad5e:	e011      	b.n	802ad84 <_puts_r+0x88>
 802ad60:	4b1b      	ldr	r3, [pc, #108]	; (802add0 <_puts_r+0xd4>)
 802ad62:	429c      	cmp	r4, r3
 802ad64:	d101      	bne.n	802ad6a <_puts_r+0x6e>
 802ad66:	68ac      	ldr	r4, [r5, #8]
 802ad68:	e7da      	b.n	802ad20 <_puts_r+0x24>
 802ad6a:	4b1a      	ldr	r3, [pc, #104]	; (802add4 <_puts_r+0xd8>)
 802ad6c:	429c      	cmp	r4, r3
 802ad6e:	bf08      	it	eq
 802ad70:	68ec      	ldreq	r4, [r5, #12]
 802ad72:	e7d5      	b.n	802ad20 <_puts_r+0x24>
 802ad74:	4621      	mov	r1, r4
 802ad76:	4628      	mov	r0, r5
 802ad78:	f000 faba 	bl	802b2f0 <__swsetup_r>
 802ad7c:	2800      	cmp	r0, #0
 802ad7e:	d0dd      	beq.n	802ad3c <_puts_r+0x40>
 802ad80:	f04f 35ff 	mov.w	r5, #4294967295
 802ad84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ad86:	07da      	lsls	r2, r3, #31
 802ad88:	d405      	bmi.n	802ad96 <_puts_r+0x9a>
 802ad8a:	89a3      	ldrh	r3, [r4, #12]
 802ad8c:	059b      	lsls	r3, r3, #22
 802ad8e:	d402      	bmi.n	802ad96 <_puts_r+0x9a>
 802ad90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ad92:	f7ff fbc3 	bl	802a51c <__retarget_lock_release_recursive>
 802ad96:	4628      	mov	r0, r5
 802ad98:	bd70      	pop	{r4, r5, r6, pc}
 802ad9a:	2b00      	cmp	r3, #0
 802ad9c:	da04      	bge.n	802ada8 <_puts_r+0xac>
 802ad9e:	69a2      	ldr	r2, [r4, #24]
 802ada0:	429a      	cmp	r2, r3
 802ada2:	dc06      	bgt.n	802adb2 <_puts_r+0xb6>
 802ada4:	290a      	cmp	r1, #10
 802ada6:	d004      	beq.n	802adb2 <_puts_r+0xb6>
 802ada8:	6823      	ldr	r3, [r4, #0]
 802adaa:	1c5a      	adds	r2, r3, #1
 802adac:	6022      	str	r2, [r4, #0]
 802adae:	7019      	strb	r1, [r3, #0]
 802adb0:	e7c5      	b.n	802ad3e <_puts_r+0x42>
 802adb2:	4622      	mov	r2, r4
 802adb4:	4628      	mov	r0, r5
 802adb6:	f000 fa37 	bl	802b228 <__swbuf_r>
 802adba:	3001      	adds	r0, #1
 802adbc:	d1bf      	bne.n	802ad3e <_puts_r+0x42>
 802adbe:	e7df      	b.n	802ad80 <_puts_r+0x84>
 802adc0:	6823      	ldr	r3, [r4, #0]
 802adc2:	250a      	movs	r5, #10
 802adc4:	1c5a      	adds	r2, r3, #1
 802adc6:	6022      	str	r2, [r4, #0]
 802adc8:	701d      	strb	r5, [r3, #0]
 802adca:	e7db      	b.n	802ad84 <_puts_r+0x88>
 802adcc:	08037bd8 	.word	0x08037bd8
 802add0:	08037bf8 	.word	0x08037bf8
 802add4:	08037bb8 	.word	0x08037bb8

0802add8 <puts>:
 802add8:	4b02      	ldr	r3, [pc, #8]	; (802ade4 <puts+0xc>)
 802adda:	4601      	mov	r1, r0
 802addc:	6818      	ldr	r0, [r3, #0]
 802adde:	f7ff bf8d 	b.w	802acfc <_puts_r>
 802ade2:	bf00      	nop
 802ade4:	20000054 	.word	0x20000054

0802ade8 <srand>:
 802ade8:	b538      	push	{r3, r4, r5, lr}
 802adea:	4b10      	ldr	r3, [pc, #64]	; (802ae2c <srand+0x44>)
 802adec:	681d      	ldr	r5, [r3, #0]
 802adee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802adf0:	4604      	mov	r4, r0
 802adf2:	b9b3      	cbnz	r3, 802ae22 <srand+0x3a>
 802adf4:	2018      	movs	r0, #24
 802adf6:	f000 fba5 	bl	802b544 <malloc>
 802adfa:	4602      	mov	r2, r0
 802adfc:	63a8      	str	r0, [r5, #56]	; 0x38
 802adfe:	b920      	cbnz	r0, 802ae0a <srand+0x22>
 802ae00:	4b0b      	ldr	r3, [pc, #44]	; (802ae30 <srand+0x48>)
 802ae02:	480c      	ldr	r0, [pc, #48]	; (802ae34 <srand+0x4c>)
 802ae04:	2142      	movs	r1, #66	; 0x42
 802ae06:	f000 fae1 	bl	802b3cc <__assert_func>
 802ae0a:	490b      	ldr	r1, [pc, #44]	; (802ae38 <srand+0x50>)
 802ae0c:	4b0b      	ldr	r3, [pc, #44]	; (802ae3c <srand+0x54>)
 802ae0e:	e9c0 1300 	strd	r1, r3, [r0]
 802ae12:	4b0b      	ldr	r3, [pc, #44]	; (802ae40 <srand+0x58>)
 802ae14:	6083      	str	r3, [r0, #8]
 802ae16:	230b      	movs	r3, #11
 802ae18:	8183      	strh	r3, [r0, #12]
 802ae1a:	2100      	movs	r1, #0
 802ae1c:	2001      	movs	r0, #1
 802ae1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802ae22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802ae24:	2200      	movs	r2, #0
 802ae26:	611c      	str	r4, [r3, #16]
 802ae28:	615a      	str	r2, [r3, #20]
 802ae2a:	bd38      	pop	{r3, r4, r5, pc}
 802ae2c:	20000054 	.word	0x20000054
 802ae30:	08037c4f 	.word	0x08037c4f
 802ae34:	08037c66 	.word	0x08037c66
 802ae38:	abcd330e 	.word	0xabcd330e
 802ae3c:	e66d1234 	.word	0xe66d1234
 802ae40:	0005deec 	.word	0x0005deec

0802ae44 <rand>:
 802ae44:	4b17      	ldr	r3, [pc, #92]	; (802aea4 <rand+0x60>)
 802ae46:	b510      	push	{r4, lr}
 802ae48:	681c      	ldr	r4, [r3, #0]
 802ae4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802ae4c:	b9b3      	cbnz	r3, 802ae7c <rand+0x38>
 802ae4e:	2018      	movs	r0, #24
 802ae50:	f000 fb78 	bl	802b544 <malloc>
 802ae54:	63a0      	str	r0, [r4, #56]	; 0x38
 802ae56:	b928      	cbnz	r0, 802ae64 <rand+0x20>
 802ae58:	4602      	mov	r2, r0
 802ae5a:	4b13      	ldr	r3, [pc, #76]	; (802aea8 <rand+0x64>)
 802ae5c:	4813      	ldr	r0, [pc, #76]	; (802aeac <rand+0x68>)
 802ae5e:	214e      	movs	r1, #78	; 0x4e
 802ae60:	f000 fab4 	bl	802b3cc <__assert_func>
 802ae64:	4a12      	ldr	r2, [pc, #72]	; (802aeb0 <rand+0x6c>)
 802ae66:	4b13      	ldr	r3, [pc, #76]	; (802aeb4 <rand+0x70>)
 802ae68:	e9c0 2300 	strd	r2, r3, [r0]
 802ae6c:	4b12      	ldr	r3, [pc, #72]	; (802aeb8 <rand+0x74>)
 802ae6e:	6083      	str	r3, [r0, #8]
 802ae70:	230b      	movs	r3, #11
 802ae72:	8183      	strh	r3, [r0, #12]
 802ae74:	2201      	movs	r2, #1
 802ae76:	2300      	movs	r3, #0
 802ae78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802ae7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802ae7e:	480f      	ldr	r0, [pc, #60]	; (802aebc <rand+0x78>)
 802ae80:	690a      	ldr	r2, [r1, #16]
 802ae82:	694b      	ldr	r3, [r1, #20]
 802ae84:	4c0e      	ldr	r4, [pc, #56]	; (802aec0 <rand+0x7c>)
 802ae86:	4350      	muls	r0, r2
 802ae88:	fb04 0003 	mla	r0, r4, r3, r0
 802ae8c:	fba2 3404 	umull	r3, r4, r2, r4
 802ae90:	1c5a      	adds	r2, r3, #1
 802ae92:	4404      	add	r4, r0
 802ae94:	f144 0000 	adc.w	r0, r4, #0
 802ae98:	e9c1 2004 	strd	r2, r0, [r1, #16]
 802ae9c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802aea0:	bd10      	pop	{r4, pc}
 802aea2:	bf00      	nop
 802aea4:	20000054 	.word	0x20000054
 802aea8:	08037c4f 	.word	0x08037c4f
 802aeac:	08037c66 	.word	0x08037c66
 802aeb0:	abcd330e 	.word	0xabcd330e
 802aeb4:	e66d1234 	.word	0xe66d1234
 802aeb8:	0005deec 	.word	0x0005deec
 802aebc:	5851f42d 	.word	0x5851f42d
 802aec0:	4c957f2d 	.word	0x4c957f2d

0802aec4 <_sbrk_r>:
 802aec4:	b538      	push	{r3, r4, r5, lr}
 802aec6:	4d06      	ldr	r5, [pc, #24]	; (802aee0 <_sbrk_r+0x1c>)
 802aec8:	2300      	movs	r3, #0
 802aeca:	4604      	mov	r4, r0
 802aecc:	4608      	mov	r0, r1
 802aece:	602b      	str	r3, [r5, #0]
 802aed0:	f7ff f8c8 	bl	802a064 <_sbrk>
 802aed4:	1c43      	adds	r3, r0, #1
 802aed6:	d102      	bne.n	802aede <_sbrk_r+0x1a>
 802aed8:	682b      	ldr	r3, [r5, #0]
 802aeda:	b103      	cbz	r3, 802aede <_sbrk_r+0x1a>
 802aedc:	6023      	str	r3, [r4, #0]
 802aede:	bd38      	pop	{r3, r4, r5, pc}
 802aee0:	20014684 	.word	0x20014684

0802aee4 <sniprintf>:
 802aee4:	b40c      	push	{r2, r3}
 802aee6:	b530      	push	{r4, r5, lr}
 802aee8:	4b17      	ldr	r3, [pc, #92]	; (802af48 <sniprintf+0x64>)
 802aeea:	1e0c      	subs	r4, r1, #0
 802aeec:	681d      	ldr	r5, [r3, #0]
 802aeee:	b09d      	sub	sp, #116	; 0x74
 802aef0:	da08      	bge.n	802af04 <sniprintf+0x20>
 802aef2:	238b      	movs	r3, #139	; 0x8b
 802aef4:	602b      	str	r3, [r5, #0]
 802aef6:	f04f 30ff 	mov.w	r0, #4294967295
 802aefa:	b01d      	add	sp, #116	; 0x74
 802aefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802af00:	b002      	add	sp, #8
 802af02:	4770      	bx	lr
 802af04:	f44f 7302 	mov.w	r3, #520	; 0x208
 802af08:	f8ad 3014 	strh.w	r3, [sp, #20]
 802af0c:	bf14      	ite	ne
 802af0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 802af12:	4623      	moveq	r3, r4
 802af14:	9304      	str	r3, [sp, #16]
 802af16:	9307      	str	r3, [sp, #28]
 802af18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802af1c:	9002      	str	r0, [sp, #8]
 802af1e:	9006      	str	r0, [sp, #24]
 802af20:	f8ad 3016 	strh.w	r3, [sp, #22]
 802af24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802af26:	ab21      	add	r3, sp, #132	; 0x84
 802af28:	a902      	add	r1, sp, #8
 802af2a:	4628      	mov	r0, r5
 802af2c:	9301      	str	r3, [sp, #4]
 802af2e:	f000 fb9f 	bl	802b670 <_svfiprintf_r>
 802af32:	1c43      	adds	r3, r0, #1
 802af34:	bfbc      	itt	lt
 802af36:	238b      	movlt	r3, #139	; 0x8b
 802af38:	602b      	strlt	r3, [r5, #0]
 802af3a:	2c00      	cmp	r4, #0
 802af3c:	d0dd      	beq.n	802aefa <sniprintf+0x16>
 802af3e:	9b02      	ldr	r3, [sp, #8]
 802af40:	2200      	movs	r2, #0
 802af42:	701a      	strb	r2, [r3, #0]
 802af44:	e7d9      	b.n	802aefa <sniprintf+0x16>
 802af46:	bf00      	nop
 802af48:	20000054 	.word	0x20000054

0802af4c <siprintf>:
 802af4c:	b40e      	push	{r1, r2, r3}
 802af4e:	b500      	push	{lr}
 802af50:	b09c      	sub	sp, #112	; 0x70
 802af52:	ab1d      	add	r3, sp, #116	; 0x74
 802af54:	9002      	str	r0, [sp, #8]
 802af56:	9006      	str	r0, [sp, #24]
 802af58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802af5c:	4809      	ldr	r0, [pc, #36]	; (802af84 <siprintf+0x38>)
 802af5e:	9107      	str	r1, [sp, #28]
 802af60:	9104      	str	r1, [sp, #16]
 802af62:	4909      	ldr	r1, [pc, #36]	; (802af88 <siprintf+0x3c>)
 802af64:	f853 2b04 	ldr.w	r2, [r3], #4
 802af68:	9105      	str	r1, [sp, #20]
 802af6a:	6800      	ldr	r0, [r0, #0]
 802af6c:	9301      	str	r3, [sp, #4]
 802af6e:	a902      	add	r1, sp, #8
 802af70:	f000 fb7e 	bl	802b670 <_svfiprintf_r>
 802af74:	9b02      	ldr	r3, [sp, #8]
 802af76:	2200      	movs	r2, #0
 802af78:	701a      	strb	r2, [r3, #0]
 802af7a:	b01c      	add	sp, #112	; 0x70
 802af7c:	f85d eb04 	ldr.w	lr, [sp], #4
 802af80:	b003      	add	sp, #12
 802af82:	4770      	bx	lr
 802af84:	20000054 	.word	0x20000054
 802af88:	ffff0208 	.word	0xffff0208

0802af8c <__sread>:
 802af8c:	b510      	push	{r4, lr}
 802af8e:	460c      	mov	r4, r1
 802af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802af94:	f000 fc6c 	bl	802b870 <_read_r>
 802af98:	2800      	cmp	r0, #0
 802af9a:	bfab      	itete	ge
 802af9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802af9e:	89a3      	ldrhlt	r3, [r4, #12]
 802afa0:	181b      	addge	r3, r3, r0
 802afa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802afa6:	bfac      	ite	ge
 802afa8:	6563      	strge	r3, [r4, #84]	; 0x54
 802afaa:	81a3      	strhlt	r3, [r4, #12]
 802afac:	bd10      	pop	{r4, pc}

0802afae <__swrite>:
 802afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802afb2:	461f      	mov	r7, r3
 802afb4:	898b      	ldrh	r3, [r1, #12]
 802afb6:	05db      	lsls	r3, r3, #23
 802afb8:	4605      	mov	r5, r0
 802afba:	460c      	mov	r4, r1
 802afbc:	4616      	mov	r6, r2
 802afbe:	d505      	bpl.n	802afcc <__swrite+0x1e>
 802afc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802afc4:	2302      	movs	r3, #2
 802afc6:	2200      	movs	r2, #0
 802afc8:	f000 fa46 	bl	802b458 <_lseek_r>
 802afcc:	89a3      	ldrh	r3, [r4, #12]
 802afce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802afd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802afd6:	81a3      	strh	r3, [r4, #12]
 802afd8:	4632      	mov	r2, r6
 802afda:	463b      	mov	r3, r7
 802afdc:	4628      	mov	r0, r5
 802afde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802afe2:	f000 b973 	b.w	802b2cc <_write_r>

0802afe6 <__sseek>:
 802afe6:	b510      	push	{r4, lr}
 802afe8:	460c      	mov	r4, r1
 802afea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802afee:	f000 fa33 	bl	802b458 <_lseek_r>
 802aff2:	1c43      	adds	r3, r0, #1
 802aff4:	89a3      	ldrh	r3, [r4, #12]
 802aff6:	bf15      	itete	ne
 802aff8:	6560      	strne	r0, [r4, #84]	; 0x54
 802affa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802affe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b002:	81a3      	strheq	r3, [r4, #12]
 802b004:	bf18      	it	ne
 802b006:	81a3      	strhne	r3, [r4, #12]
 802b008:	bd10      	pop	{r4, pc}

0802b00a <__sclose>:
 802b00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b00e:	f000 b9fb 	b.w	802b408 <_close_r>

0802b012 <strncmp>:
 802b012:	b510      	push	{r4, lr}
 802b014:	b16a      	cbz	r2, 802b032 <strncmp+0x20>
 802b016:	3901      	subs	r1, #1
 802b018:	1884      	adds	r4, r0, r2
 802b01a:	f810 3b01 	ldrb.w	r3, [r0], #1
 802b01e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802b022:	4293      	cmp	r3, r2
 802b024:	d103      	bne.n	802b02e <strncmp+0x1c>
 802b026:	42a0      	cmp	r0, r4
 802b028:	d001      	beq.n	802b02e <strncmp+0x1c>
 802b02a:	2b00      	cmp	r3, #0
 802b02c:	d1f5      	bne.n	802b01a <strncmp+0x8>
 802b02e:	1a98      	subs	r0, r3, r2
 802b030:	bd10      	pop	{r4, pc}
 802b032:	4610      	mov	r0, r2
 802b034:	e7fc      	b.n	802b030 <strncmp+0x1e>

0802b036 <strstr>:
 802b036:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b038:	780c      	ldrb	r4, [r1, #0]
 802b03a:	b164      	cbz	r4, 802b056 <strstr+0x20>
 802b03c:	4603      	mov	r3, r0
 802b03e:	781a      	ldrb	r2, [r3, #0]
 802b040:	4618      	mov	r0, r3
 802b042:	1c5e      	adds	r6, r3, #1
 802b044:	b90a      	cbnz	r2, 802b04a <strstr+0x14>
 802b046:	4610      	mov	r0, r2
 802b048:	e005      	b.n	802b056 <strstr+0x20>
 802b04a:	4294      	cmp	r4, r2
 802b04c:	d108      	bne.n	802b060 <strstr+0x2a>
 802b04e:	460d      	mov	r5, r1
 802b050:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802b054:	b902      	cbnz	r2, 802b058 <strstr+0x22>
 802b056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b058:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802b05c:	4297      	cmp	r7, r2
 802b05e:	d0f7      	beq.n	802b050 <strstr+0x1a>
 802b060:	4633      	mov	r3, r6
 802b062:	e7ec      	b.n	802b03e <strstr+0x8>

0802b064 <_strtol_l.isra.0>:
 802b064:	2b01      	cmp	r3, #1
 802b066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b06a:	d001      	beq.n	802b070 <_strtol_l.isra.0+0xc>
 802b06c:	2b24      	cmp	r3, #36	; 0x24
 802b06e:	d906      	bls.n	802b07e <_strtol_l.isra.0+0x1a>
 802b070:	f000 f9da 	bl	802b428 <__errno>
 802b074:	2316      	movs	r3, #22
 802b076:	6003      	str	r3, [r0, #0]
 802b078:	2000      	movs	r0, #0
 802b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b07e:	4f3a      	ldr	r7, [pc, #232]	; (802b168 <_strtol_l.isra.0+0x104>)
 802b080:	468e      	mov	lr, r1
 802b082:	4676      	mov	r6, lr
 802b084:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802b088:	5de5      	ldrb	r5, [r4, r7]
 802b08a:	f015 0508 	ands.w	r5, r5, #8
 802b08e:	d1f8      	bne.n	802b082 <_strtol_l.isra.0+0x1e>
 802b090:	2c2d      	cmp	r4, #45	; 0x2d
 802b092:	d134      	bne.n	802b0fe <_strtol_l.isra.0+0x9a>
 802b094:	f89e 4000 	ldrb.w	r4, [lr]
 802b098:	f04f 0801 	mov.w	r8, #1
 802b09c:	f106 0e02 	add.w	lr, r6, #2
 802b0a0:	2b00      	cmp	r3, #0
 802b0a2:	d05c      	beq.n	802b15e <_strtol_l.isra.0+0xfa>
 802b0a4:	2b10      	cmp	r3, #16
 802b0a6:	d10c      	bne.n	802b0c2 <_strtol_l.isra.0+0x5e>
 802b0a8:	2c30      	cmp	r4, #48	; 0x30
 802b0aa:	d10a      	bne.n	802b0c2 <_strtol_l.isra.0+0x5e>
 802b0ac:	f89e 4000 	ldrb.w	r4, [lr]
 802b0b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802b0b4:	2c58      	cmp	r4, #88	; 0x58
 802b0b6:	d14d      	bne.n	802b154 <_strtol_l.isra.0+0xf0>
 802b0b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 802b0bc:	2310      	movs	r3, #16
 802b0be:	f10e 0e02 	add.w	lr, lr, #2
 802b0c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802b0c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 802b0ca:	2600      	movs	r6, #0
 802b0cc:	fbbc f9f3 	udiv	r9, ip, r3
 802b0d0:	4635      	mov	r5, r6
 802b0d2:	fb03 ca19 	mls	sl, r3, r9, ip
 802b0d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802b0da:	2f09      	cmp	r7, #9
 802b0dc:	d818      	bhi.n	802b110 <_strtol_l.isra.0+0xac>
 802b0de:	463c      	mov	r4, r7
 802b0e0:	42a3      	cmp	r3, r4
 802b0e2:	dd24      	ble.n	802b12e <_strtol_l.isra.0+0xca>
 802b0e4:	2e00      	cmp	r6, #0
 802b0e6:	db1f      	blt.n	802b128 <_strtol_l.isra.0+0xc4>
 802b0e8:	45a9      	cmp	r9, r5
 802b0ea:	d31d      	bcc.n	802b128 <_strtol_l.isra.0+0xc4>
 802b0ec:	d101      	bne.n	802b0f2 <_strtol_l.isra.0+0x8e>
 802b0ee:	45a2      	cmp	sl, r4
 802b0f0:	db1a      	blt.n	802b128 <_strtol_l.isra.0+0xc4>
 802b0f2:	fb05 4503 	mla	r5, r5, r3, r4
 802b0f6:	2601      	movs	r6, #1
 802b0f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802b0fc:	e7eb      	b.n	802b0d6 <_strtol_l.isra.0+0x72>
 802b0fe:	2c2b      	cmp	r4, #43	; 0x2b
 802b100:	bf08      	it	eq
 802b102:	f89e 4000 	ldrbeq.w	r4, [lr]
 802b106:	46a8      	mov	r8, r5
 802b108:	bf08      	it	eq
 802b10a:	f106 0e02 	addeq.w	lr, r6, #2
 802b10e:	e7c7      	b.n	802b0a0 <_strtol_l.isra.0+0x3c>
 802b110:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802b114:	2f19      	cmp	r7, #25
 802b116:	d801      	bhi.n	802b11c <_strtol_l.isra.0+0xb8>
 802b118:	3c37      	subs	r4, #55	; 0x37
 802b11a:	e7e1      	b.n	802b0e0 <_strtol_l.isra.0+0x7c>
 802b11c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802b120:	2f19      	cmp	r7, #25
 802b122:	d804      	bhi.n	802b12e <_strtol_l.isra.0+0xca>
 802b124:	3c57      	subs	r4, #87	; 0x57
 802b126:	e7db      	b.n	802b0e0 <_strtol_l.isra.0+0x7c>
 802b128:	f04f 36ff 	mov.w	r6, #4294967295
 802b12c:	e7e4      	b.n	802b0f8 <_strtol_l.isra.0+0x94>
 802b12e:	2e00      	cmp	r6, #0
 802b130:	da05      	bge.n	802b13e <_strtol_l.isra.0+0xda>
 802b132:	2322      	movs	r3, #34	; 0x22
 802b134:	6003      	str	r3, [r0, #0]
 802b136:	4665      	mov	r5, ip
 802b138:	b942      	cbnz	r2, 802b14c <_strtol_l.isra.0+0xe8>
 802b13a:	4628      	mov	r0, r5
 802b13c:	e79d      	b.n	802b07a <_strtol_l.isra.0+0x16>
 802b13e:	f1b8 0f00 	cmp.w	r8, #0
 802b142:	d000      	beq.n	802b146 <_strtol_l.isra.0+0xe2>
 802b144:	426d      	negs	r5, r5
 802b146:	2a00      	cmp	r2, #0
 802b148:	d0f7      	beq.n	802b13a <_strtol_l.isra.0+0xd6>
 802b14a:	b10e      	cbz	r6, 802b150 <_strtol_l.isra.0+0xec>
 802b14c:	f10e 31ff 	add.w	r1, lr, #4294967295
 802b150:	6011      	str	r1, [r2, #0]
 802b152:	e7f2      	b.n	802b13a <_strtol_l.isra.0+0xd6>
 802b154:	2430      	movs	r4, #48	; 0x30
 802b156:	2b00      	cmp	r3, #0
 802b158:	d1b3      	bne.n	802b0c2 <_strtol_l.isra.0+0x5e>
 802b15a:	2308      	movs	r3, #8
 802b15c:	e7b1      	b.n	802b0c2 <_strtol_l.isra.0+0x5e>
 802b15e:	2c30      	cmp	r4, #48	; 0x30
 802b160:	d0a4      	beq.n	802b0ac <_strtol_l.isra.0+0x48>
 802b162:	230a      	movs	r3, #10
 802b164:	e7ad      	b.n	802b0c2 <_strtol_l.isra.0+0x5e>
 802b166:	bf00      	nop
 802b168:	08037ab5 	.word	0x08037ab5

0802b16c <strtol>:
 802b16c:	4613      	mov	r3, r2
 802b16e:	460a      	mov	r2, r1
 802b170:	4601      	mov	r1, r0
 802b172:	4802      	ldr	r0, [pc, #8]	; (802b17c <strtol+0x10>)
 802b174:	6800      	ldr	r0, [r0, #0]
 802b176:	f7ff bf75 	b.w	802b064 <_strtol_l.isra.0>
 802b17a:	bf00      	nop
 802b17c:	20000054 	.word	0x20000054

0802b180 <time>:
 802b180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b182:	4b0b      	ldr	r3, [pc, #44]	; (802b1b0 <time+0x30>)
 802b184:	2200      	movs	r2, #0
 802b186:	4669      	mov	r1, sp
 802b188:	4604      	mov	r4, r0
 802b18a:	6818      	ldr	r0, [r3, #0]
 802b18c:	f000 f952 	bl	802b434 <_gettimeofday_r>
 802b190:	2800      	cmp	r0, #0
 802b192:	bfbe      	ittt	lt
 802b194:	f04f 32ff 	movlt.w	r2, #4294967295
 802b198:	f04f 33ff 	movlt.w	r3, #4294967295
 802b19c:	e9cd 2300 	strdlt	r2, r3, [sp]
 802b1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b1a4:	b10c      	cbz	r4, 802b1aa <time+0x2a>
 802b1a6:	e9c4 0100 	strd	r0, r1, [r4]
 802b1aa:	b004      	add	sp, #16
 802b1ac:	bd10      	pop	{r4, pc}
 802b1ae:	bf00      	nop
 802b1b0:	20000054 	.word	0x20000054

0802b1b4 <_vsniprintf_r>:
 802b1b4:	b530      	push	{r4, r5, lr}
 802b1b6:	1e14      	subs	r4, r2, #0
 802b1b8:	4605      	mov	r5, r0
 802b1ba:	b09b      	sub	sp, #108	; 0x6c
 802b1bc:	4618      	mov	r0, r3
 802b1be:	da05      	bge.n	802b1cc <_vsniprintf_r+0x18>
 802b1c0:	238b      	movs	r3, #139	; 0x8b
 802b1c2:	602b      	str	r3, [r5, #0]
 802b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 802b1c8:	b01b      	add	sp, #108	; 0x6c
 802b1ca:	bd30      	pop	{r4, r5, pc}
 802b1cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 802b1d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b1d4:	bf14      	ite	ne
 802b1d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 802b1da:	4623      	moveq	r3, r4
 802b1dc:	9302      	str	r3, [sp, #8]
 802b1de:	9305      	str	r3, [sp, #20]
 802b1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b1e4:	9100      	str	r1, [sp, #0]
 802b1e6:	9104      	str	r1, [sp, #16]
 802b1e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b1ec:	4602      	mov	r2, r0
 802b1ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802b1f0:	4669      	mov	r1, sp
 802b1f2:	4628      	mov	r0, r5
 802b1f4:	f000 fa3c 	bl	802b670 <_svfiprintf_r>
 802b1f8:	1c43      	adds	r3, r0, #1
 802b1fa:	bfbc      	itt	lt
 802b1fc:	238b      	movlt	r3, #139	; 0x8b
 802b1fe:	602b      	strlt	r3, [r5, #0]
 802b200:	2c00      	cmp	r4, #0
 802b202:	d0e1      	beq.n	802b1c8 <_vsniprintf_r+0x14>
 802b204:	9b00      	ldr	r3, [sp, #0]
 802b206:	2200      	movs	r2, #0
 802b208:	701a      	strb	r2, [r3, #0]
 802b20a:	e7dd      	b.n	802b1c8 <_vsniprintf_r+0x14>

0802b20c <vsniprintf>:
 802b20c:	b507      	push	{r0, r1, r2, lr}
 802b20e:	9300      	str	r3, [sp, #0]
 802b210:	4613      	mov	r3, r2
 802b212:	460a      	mov	r2, r1
 802b214:	4601      	mov	r1, r0
 802b216:	4803      	ldr	r0, [pc, #12]	; (802b224 <vsniprintf+0x18>)
 802b218:	6800      	ldr	r0, [r0, #0]
 802b21a:	f7ff ffcb 	bl	802b1b4 <_vsniprintf_r>
 802b21e:	b003      	add	sp, #12
 802b220:	f85d fb04 	ldr.w	pc, [sp], #4
 802b224:	20000054 	.word	0x20000054

0802b228 <__swbuf_r>:
 802b228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b22a:	460e      	mov	r6, r1
 802b22c:	4614      	mov	r4, r2
 802b22e:	4605      	mov	r5, r0
 802b230:	b118      	cbz	r0, 802b23a <__swbuf_r+0x12>
 802b232:	6983      	ldr	r3, [r0, #24]
 802b234:	b90b      	cbnz	r3, 802b23a <__swbuf_r+0x12>
 802b236:	f7ff f89b 	bl	802a370 <__sinit>
 802b23a:	4b21      	ldr	r3, [pc, #132]	; (802b2c0 <__swbuf_r+0x98>)
 802b23c:	429c      	cmp	r4, r3
 802b23e:	d12b      	bne.n	802b298 <__swbuf_r+0x70>
 802b240:	686c      	ldr	r4, [r5, #4]
 802b242:	69a3      	ldr	r3, [r4, #24]
 802b244:	60a3      	str	r3, [r4, #8]
 802b246:	89a3      	ldrh	r3, [r4, #12]
 802b248:	071a      	lsls	r2, r3, #28
 802b24a:	d52f      	bpl.n	802b2ac <__swbuf_r+0x84>
 802b24c:	6923      	ldr	r3, [r4, #16]
 802b24e:	b36b      	cbz	r3, 802b2ac <__swbuf_r+0x84>
 802b250:	6923      	ldr	r3, [r4, #16]
 802b252:	6820      	ldr	r0, [r4, #0]
 802b254:	1ac0      	subs	r0, r0, r3
 802b256:	6963      	ldr	r3, [r4, #20]
 802b258:	b2f6      	uxtb	r6, r6
 802b25a:	4283      	cmp	r3, r0
 802b25c:	4637      	mov	r7, r6
 802b25e:	dc04      	bgt.n	802b26a <__swbuf_r+0x42>
 802b260:	4621      	mov	r1, r4
 802b262:	4628      	mov	r0, r5
 802b264:	f7fe ffde 	bl	802a224 <_fflush_r>
 802b268:	bb30      	cbnz	r0, 802b2b8 <__swbuf_r+0x90>
 802b26a:	68a3      	ldr	r3, [r4, #8]
 802b26c:	3b01      	subs	r3, #1
 802b26e:	60a3      	str	r3, [r4, #8]
 802b270:	6823      	ldr	r3, [r4, #0]
 802b272:	1c5a      	adds	r2, r3, #1
 802b274:	6022      	str	r2, [r4, #0]
 802b276:	701e      	strb	r6, [r3, #0]
 802b278:	6963      	ldr	r3, [r4, #20]
 802b27a:	3001      	adds	r0, #1
 802b27c:	4283      	cmp	r3, r0
 802b27e:	d004      	beq.n	802b28a <__swbuf_r+0x62>
 802b280:	89a3      	ldrh	r3, [r4, #12]
 802b282:	07db      	lsls	r3, r3, #31
 802b284:	d506      	bpl.n	802b294 <__swbuf_r+0x6c>
 802b286:	2e0a      	cmp	r6, #10
 802b288:	d104      	bne.n	802b294 <__swbuf_r+0x6c>
 802b28a:	4621      	mov	r1, r4
 802b28c:	4628      	mov	r0, r5
 802b28e:	f7fe ffc9 	bl	802a224 <_fflush_r>
 802b292:	b988      	cbnz	r0, 802b2b8 <__swbuf_r+0x90>
 802b294:	4638      	mov	r0, r7
 802b296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b298:	4b0a      	ldr	r3, [pc, #40]	; (802b2c4 <__swbuf_r+0x9c>)
 802b29a:	429c      	cmp	r4, r3
 802b29c:	d101      	bne.n	802b2a2 <__swbuf_r+0x7a>
 802b29e:	68ac      	ldr	r4, [r5, #8]
 802b2a0:	e7cf      	b.n	802b242 <__swbuf_r+0x1a>
 802b2a2:	4b09      	ldr	r3, [pc, #36]	; (802b2c8 <__swbuf_r+0xa0>)
 802b2a4:	429c      	cmp	r4, r3
 802b2a6:	bf08      	it	eq
 802b2a8:	68ec      	ldreq	r4, [r5, #12]
 802b2aa:	e7ca      	b.n	802b242 <__swbuf_r+0x1a>
 802b2ac:	4621      	mov	r1, r4
 802b2ae:	4628      	mov	r0, r5
 802b2b0:	f000 f81e 	bl	802b2f0 <__swsetup_r>
 802b2b4:	2800      	cmp	r0, #0
 802b2b6:	d0cb      	beq.n	802b250 <__swbuf_r+0x28>
 802b2b8:	f04f 37ff 	mov.w	r7, #4294967295
 802b2bc:	e7ea      	b.n	802b294 <__swbuf_r+0x6c>
 802b2be:	bf00      	nop
 802b2c0:	08037bd8 	.word	0x08037bd8
 802b2c4:	08037bf8 	.word	0x08037bf8
 802b2c8:	08037bb8 	.word	0x08037bb8

0802b2cc <_write_r>:
 802b2cc:	b538      	push	{r3, r4, r5, lr}
 802b2ce:	4d07      	ldr	r5, [pc, #28]	; (802b2ec <_write_r+0x20>)
 802b2d0:	4604      	mov	r4, r0
 802b2d2:	4608      	mov	r0, r1
 802b2d4:	4611      	mov	r1, r2
 802b2d6:	2200      	movs	r2, #0
 802b2d8:	602a      	str	r2, [r5, #0]
 802b2da:	461a      	mov	r2, r3
 802b2dc:	f7fe fbb0 	bl	8029a40 <_write>
 802b2e0:	1c43      	adds	r3, r0, #1
 802b2e2:	d102      	bne.n	802b2ea <_write_r+0x1e>
 802b2e4:	682b      	ldr	r3, [r5, #0]
 802b2e6:	b103      	cbz	r3, 802b2ea <_write_r+0x1e>
 802b2e8:	6023      	str	r3, [r4, #0]
 802b2ea:	bd38      	pop	{r3, r4, r5, pc}
 802b2ec:	20014684 	.word	0x20014684

0802b2f0 <__swsetup_r>:
 802b2f0:	4b32      	ldr	r3, [pc, #200]	; (802b3bc <__swsetup_r+0xcc>)
 802b2f2:	b570      	push	{r4, r5, r6, lr}
 802b2f4:	681d      	ldr	r5, [r3, #0]
 802b2f6:	4606      	mov	r6, r0
 802b2f8:	460c      	mov	r4, r1
 802b2fa:	b125      	cbz	r5, 802b306 <__swsetup_r+0x16>
 802b2fc:	69ab      	ldr	r3, [r5, #24]
 802b2fe:	b913      	cbnz	r3, 802b306 <__swsetup_r+0x16>
 802b300:	4628      	mov	r0, r5
 802b302:	f7ff f835 	bl	802a370 <__sinit>
 802b306:	4b2e      	ldr	r3, [pc, #184]	; (802b3c0 <__swsetup_r+0xd0>)
 802b308:	429c      	cmp	r4, r3
 802b30a:	d10f      	bne.n	802b32c <__swsetup_r+0x3c>
 802b30c:	686c      	ldr	r4, [r5, #4]
 802b30e:	89a3      	ldrh	r3, [r4, #12]
 802b310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b314:	0719      	lsls	r1, r3, #28
 802b316:	d42c      	bmi.n	802b372 <__swsetup_r+0x82>
 802b318:	06dd      	lsls	r5, r3, #27
 802b31a:	d411      	bmi.n	802b340 <__swsetup_r+0x50>
 802b31c:	2309      	movs	r3, #9
 802b31e:	6033      	str	r3, [r6, #0]
 802b320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802b324:	81a3      	strh	r3, [r4, #12]
 802b326:	f04f 30ff 	mov.w	r0, #4294967295
 802b32a:	e03e      	b.n	802b3aa <__swsetup_r+0xba>
 802b32c:	4b25      	ldr	r3, [pc, #148]	; (802b3c4 <__swsetup_r+0xd4>)
 802b32e:	429c      	cmp	r4, r3
 802b330:	d101      	bne.n	802b336 <__swsetup_r+0x46>
 802b332:	68ac      	ldr	r4, [r5, #8]
 802b334:	e7eb      	b.n	802b30e <__swsetup_r+0x1e>
 802b336:	4b24      	ldr	r3, [pc, #144]	; (802b3c8 <__swsetup_r+0xd8>)
 802b338:	429c      	cmp	r4, r3
 802b33a:	bf08      	it	eq
 802b33c:	68ec      	ldreq	r4, [r5, #12]
 802b33e:	e7e6      	b.n	802b30e <__swsetup_r+0x1e>
 802b340:	0758      	lsls	r0, r3, #29
 802b342:	d512      	bpl.n	802b36a <__swsetup_r+0x7a>
 802b344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b346:	b141      	cbz	r1, 802b35a <__swsetup_r+0x6a>
 802b348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b34c:	4299      	cmp	r1, r3
 802b34e:	d002      	beq.n	802b356 <__swsetup_r+0x66>
 802b350:	4630      	mov	r0, r6
 802b352:	f7ff f923 	bl	802a59c <_free_r>
 802b356:	2300      	movs	r3, #0
 802b358:	6363      	str	r3, [r4, #52]	; 0x34
 802b35a:	89a3      	ldrh	r3, [r4, #12]
 802b35c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b360:	81a3      	strh	r3, [r4, #12]
 802b362:	2300      	movs	r3, #0
 802b364:	6063      	str	r3, [r4, #4]
 802b366:	6923      	ldr	r3, [r4, #16]
 802b368:	6023      	str	r3, [r4, #0]
 802b36a:	89a3      	ldrh	r3, [r4, #12]
 802b36c:	f043 0308 	orr.w	r3, r3, #8
 802b370:	81a3      	strh	r3, [r4, #12]
 802b372:	6923      	ldr	r3, [r4, #16]
 802b374:	b94b      	cbnz	r3, 802b38a <__swsetup_r+0x9a>
 802b376:	89a3      	ldrh	r3, [r4, #12]
 802b378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b380:	d003      	beq.n	802b38a <__swsetup_r+0x9a>
 802b382:	4621      	mov	r1, r4
 802b384:	4630      	mov	r0, r6
 802b386:	f000 f89d 	bl	802b4c4 <__smakebuf_r>
 802b38a:	89a0      	ldrh	r0, [r4, #12]
 802b38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802b390:	f010 0301 	ands.w	r3, r0, #1
 802b394:	d00a      	beq.n	802b3ac <__swsetup_r+0xbc>
 802b396:	2300      	movs	r3, #0
 802b398:	60a3      	str	r3, [r4, #8]
 802b39a:	6963      	ldr	r3, [r4, #20]
 802b39c:	425b      	negs	r3, r3
 802b39e:	61a3      	str	r3, [r4, #24]
 802b3a0:	6923      	ldr	r3, [r4, #16]
 802b3a2:	b943      	cbnz	r3, 802b3b6 <__swsetup_r+0xc6>
 802b3a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802b3a8:	d1ba      	bne.n	802b320 <__swsetup_r+0x30>
 802b3aa:	bd70      	pop	{r4, r5, r6, pc}
 802b3ac:	0781      	lsls	r1, r0, #30
 802b3ae:	bf58      	it	pl
 802b3b0:	6963      	ldrpl	r3, [r4, #20]
 802b3b2:	60a3      	str	r3, [r4, #8]
 802b3b4:	e7f4      	b.n	802b3a0 <__swsetup_r+0xb0>
 802b3b6:	2000      	movs	r0, #0
 802b3b8:	e7f7      	b.n	802b3aa <__swsetup_r+0xba>
 802b3ba:	bf00      	nop
 802b3bc:	20000054 	.word	0x20000054
 802b3c0:	08037bd8 	.word	0x08037bd8
 802b3c4:	08037bf8 	.word	0x08037bf8
 802b3c8:	08037bb8 	.word	0x08037bb8

0802b3cc <__assert_func>:
 802b3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802b3ce:	4614      	mov	r4, r2
 802b3d0:	461a      	mov	r2, r3
 802b3d2:	4b09      	ldr	r3, [pc, #36]	; (802b3f8 <__assert_func+0x2c>)
 802b3d4:	681b      	ldr	r3, [r3, #0]
 802b3d6:	4605      	mov	r5, r0
 802b3d8:	68d8      	ldr	r0, [r3, #12]
 802b3da:	b14c      	cbz	r4, 802b3f0 <__assert_func+0x24>
 802b3dc:	4b07      	ldr	r3, [pc, #28]	; (802b3fc <__assert_func+0x30>)
 802b3de:	9100      	str	r1, [sp, #0]
 802b3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802b3e4:	4906      	ldr	r1, [pc, #24]	; (802b400 <__assert_func+0x34>)
 802b3e6:	462b      	mov	r3, r5
 802b3e8:	f7ff f840 	bl	802a46c <fiprintf>
 802b3ec:	f000 fa52 	bl	802b894 <abort>
 802b3f0:	4b04      	ldr	r3, [pc, #16]	; (802b404 <__assert_func+0x38>)
 802b3f2:	461c      	mov	r4, r3
 802b3f4:	e7f3      	b.n	802b3de <__assert_func+0x12>
 802b3f6:	bf00      	nop
 802b3f8:	20000054 	.word	0x20000054
 802b3fc:	08037cc5 	.word	0x08037cc5
 802b400:	08037cd2 	.word	0x08037cd2
 802b404:	08037d00 	.word	0x08037d00

0802b408 <_close_r>:
 802b408:	b538      	push	{r3, r4, r5, lr}
 802b40a:	4d06      	ldr	r5, [pc, #24]	; (802b424 <_close_r+0x1c>)
 802b40c:	2300      	movs	r3, #0
 802b40e:	4604      	mov	r4, r0
 802b410:	4608      	mov	r0, r1
 802b412:	602b      	str	r3, [r5, #0]
 802b414:	f7fe fe19 	bl	802a04a <_close>
 802b418:	1c43      	adds	r3, r0, #1
 802b41a:	d102      	bne.n	802b422 <_close_r+0x1a>
 802b41c:	682b      	ldr	r3, [r5, #0]
 802b41e:	b103      	cbz	r3, 802b422 <_close_r+0x1a>
 802b420:	6023      	str	r3, [r4, #0]
 802b422:	bd38      	pop	{r3, r4, r5, pc}
 802b424:	20014684 	.word	0x20014684

0802b428 <__errno>:
 802b428:	4b01      	ldr	r3, [pc, #4]	; (802b430 <__errno+0x8>)
 802b42a:	6818      	ldr	r0, [r3, #0]
 802b42c:	4770      	bx	lr
 802b42e:	bf00      	nop
 802b430:	20000054 	.word	0x20000054

0802b434 <_gettimeofday_r>:
 802b434:	b538      	push	{r3, r4, r5, lr}
 802b436:	4d07      	ldr	r5, [pc, #28]	; (802b454 <_gettimeofday_r+0x20>)
 802b438:	2300      	movs	r3, #0
 802b43a:	4604      	mov	r4, r0
 802b43c:	4608      	mov	r0, r1
 802b43e:	4611      	mov	r1, r2
 802b440:	602b      	str	r3, [r5, #0]
 802b442:	f000 fa9d 	bl	802b980 <_gettimeofday>
 802b446:	1c43      	adds	r3, r0, #1
 802b448:	d102      	bne.n	802b450 <_gettimeofday_r+0x1c>
 802b44a:	682b      	ldr	r3, [r5, #0]
 802b44c:	b103      	cbz	r3, 802b450 <_gettimeofday_r+0x1c>
 802b44e:	6023      	str	r3, [r4, #0]
 802b450:	bd38      	pop	{r3, r4, r5, pc}
 802b452:	bf00      	nop
 802b454:	20014684 	.word	0x20014684

0802b458 <_lseek_r>:
 802b458:	b538      	push	{r3, r4, r5, lr}
 802b45a:	4d07      	ldr	r5, [pc, #28]	; (802b478 <_lseek_r+0x20>)
 802b45c:	4604      	mov	r4, r0
 802b45e:	4608      	mov	r0, r1
 802b460:	4611      	mov	r1, r2
 802b462:	2200      	movs	r2, #0
 802b464:	602a      	str	r2, [r5, #0]
 802b466:	461a      	mov	r2, r3
 802b468:	f7fe fdf9 	bl	802a05e <_lseek>
 802b46c:	1c43      	adds	r3, r0, #1
 802b46e:	d102      	bne.n	802b476 <_lseek_r+0x1e>
 802b470:	682b      	ldr	r3, [r5, #0]
 802b472:	b103      	cbz	r3, 802b476 <_lseek_r+0x1e>
 802b474:	6023      	str	r3, [r4, #0]
 802b476:	bd38      	pop	{r3, r4, r5, pc}
 802b478:	20014684 	.word	0x20014684

0802b47c <__swhatbuf_r>:
 802b47c:	b570      	push	{r4, r5, r6, lr}
 802b47e:	460e      	mov	r6, r1
 802b480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b484:	2900      	cmp	r1, #0
 802b486:	b096      	sub	sp, #88	; 0x58
 802b488:	4614      	mov	r4, r2
 802b48a:	461d      	mov	r5, r3
 802b48c:	da07      	bge.n	802b49e <__swhatbuf_r+0x22>
 802b48e:	2300      	movs	r3, #0
 802b490:	602b      	str	r3, [r5, #0]
 802b492:	89b3      	ldrh	r3, [r6, #12]
 802b494:	061a      	lsls	r2, r3, #24
 802b496:	d410      	bmi.n	802b4ba <__swhatbuf_r+0x3e>
 802b498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b49c:	e00e      	b.n	802b4bc <__swhatbuf_r+0x40>
 802b49e:	466a      	mov	r2, sp
 802b4a0:	f000 fa00 	bl	802b8a4 <_fstat_r>
 802b4a4:	2800      	cmp	r0, #0
 802b4a6:	dbf2      	blt.n	802b48e <__swhatbuf_r+0x12>
 802b4a8:	9a01      	ldr	r2, [sp, #4]
 802b4aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b4ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b4b2:	425a      	negs	r2, r3
 802b4b4:	415a      	adcs	r2, r3
 802b4b6:	602a      	str	r2, [r5, #0]
 802b4b8:	e7ee      	b.n	802b498 <__swhatbuf_r+0x1c>
 802b4ba:	2340      	movs	r3, #64	; 0x40
 802b4bc:	2000      	movs	r0, #0
 802b4be:	6023      	str	r3, [r4, #0]
 802b4c0:	b016      	add	sp, #88	; 0x58
 802b4c2:	bd70      	pop	{r4, r5, r6, pc}

0802b4c4 <__smakebuf_r>:
 802b4c4:	898b      	ldrh	r3, [r1, #12]
 802b4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b4c8:	079d      	lsls	r5, r3, #30
 802b4ca:	4606      	mov	r6, r0
 802b4cc:	460c      	mov	r4, r1
 802b4ce:	d507      	bpl.n	802b4e0 <__smakebuf_r+0x1c>
 802b4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b4d4:	6023      	str	r3, [r4, #0]
 802b4d6:	6123      	str	r3, [r4, #16]
 802b4d8:	2301      	movs	r3, #1
 802b4da:	6163      	str	r3, [r4, #20]
 802b4dc:	b002      	add	sp, #8
 802b4de:	bd70      	pop	{r4, r5, r6, pc}
 802b4e0:	ab01      	add	r3, sp, #4
 802b4e2:	466a      	mov	r2, sp
 802b4e4:	f7ff ffca 	bl	802b47c <__swhatbuf_r>
 802b4e8:	9900      	ldr	r1, [sp, #0]
 802b4ea:	4605      	mov	r5, r0
 802b4ec:	4630      	mov	r0, r6
 802b4ee:	f7ff f8a5 	bl	802a63c <_malloc_r>
 802b4f2:	b948      	cbnz	r0, 802b508 <__smakebuf_r+0x44>
 802b4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b4f8:	059a      	lsls	r2, r3, #22
 802b4fa:	d4ef      	bmi.n	802b4dc <__smakebuf_r+0x18>
 802b4fc:	f023 0303 	bic.w	r3, r3, #3
 802b500:	f043 0302 	orr.w	r3, r3, #2
 802b504:	81a3      	strh	r3, [r4, #12]
 802b506:	e7e3      	b.n	802b4d0 <__smakebuf_r+0xc>
 802b508:	4b0d      	ldr	r3, [pc, #52]	; (802b540 <__smakebuf_r+0x7c>)
 802b50a:	62b3      	str	r3, [r6, #40]	; 0x28
 802b50c:	89a3      	ldrh	r3, [r4, #12]
 802b50e:	6020      	str	r0, [r4, #0]
 802b510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b514:	81a3      	strh	r3, [r4, #12]
 802b516:	9b00      	ldr	r3, [sp, #0]
 802b518:	6163      	str	r3, [r4, #20]
 802b51a:	9b01      	ldr	r3, [sp, #4]
 802b51c:	6120      	str	r0, [r4, #16]
 802b51e:	b15b      	cbz	r3, 802b538 <__smakebuf_r+0x74>
 802b520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b524:	4630      	mov	r0, r6
 802b526:	f000 f9cf 	bl	802b8c8 <_isatty_r>
 802b52a:	b128      	cbz	r0, 802b538 <__smakebuf_r+0x74>
 802b52c:	89a3      	ldrh	r3, [r4, #12]
 802b52e:	f023 0303 	bic.w	r3, r3, #3
 802b532:	f043 0301 	orr.w	r3, r3, #1
 802b536:	81a3      	strh	r3, [r4, #12]
 802b538:	89a0      	ldrh	r0, [r4, #12]
 802b53a:	4305      	orrs	r5, r0
 802b53c:	81a5      	strh	r5, [r4, #12]
 802b53e:	e7cd      	b.n	802b4dc <__smakebuf_r+0x18>
 802b540:	0802a309 	.word	0x0802a309

0802b544 <malloc>:
 802b544:	4b02      	ldr	r3, [pc, #8]	; (802b550 <malloc+0xc>)
 802b546:	4601      	mov	r1, r0
 802b548:	6818      	ldr	r0, [r3, #0]
 802b54a:	f7ff b877 	b.w	802a63c <_malloc_r>
 802b54e:	bf00      	nop
 802b550:	20000054 	.word	0x20000054

0802b554 <__malloc_lock>:
 802b554:	4801      	ldr	r0, [pc, #4]	; (802b55c <__malloc_lock+0x8>)
 802b556:	f7fe bfe0 	b.w	802a51a <__retarget_lock_acquire_recursive>
 802b55a:	bf00      	nop
 802b55c:	20018a18 	.word	0x20018a18

0802b560 <__malloc_unlock>:
 802b560:	4801      	ldr	r0, [pc, #4]	; (802b568 <__malloc_unlock+0x8>)
 802b562:	f7fe bfdb 	b.w	802a51c <__retarget_lock_release_recursive>
 802b566:	bf00      	nop
 802b568:	20018a18 	.word	0x20018a18

0802b56c <_realloc_r>:
 802b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b56e:	4607      	mov	r7, r0
 802b570:	4614      	mov	r4, r2
 802b572:	460e      	mov	r6, r1
 802b574:	b921      	cbnz	r1, 802b580 <_realloc_r+0x14>
 802b576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802b57a:	4611      	mov	r1, r2
 802b57c:	f7ff b85e 	b.w	802a63c <_malloc_r>
 802b580:	b922      	cbnz	r2, 802b58c <_realloc_r+0x20>
 802b582:	f7ff f80b 	bl	802a59c <_free_r>
 802b586:	4625      	mov	r5, r4
 802b588:	4628      	mov	r0, r5
 802b58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b58c:	f000 f9ac 	bl	802b8e8 <_malloc_usable_size_r>
 802b590:	42a0      	cmp	r0, r4
 802b592:	d20f      	bcs.n	802b5b4 <_realloc_r+0x48>
 802b594:	4621      	mov	r1, r4
 802b596:	4638      	mov	r0, r7
 802b598:	f7ff f850 	bl	802a63c <_malloc_r>
 802b59c:	4605      	mov	r5, r0
 802b59e:	2800      	cmp	r0, #0
 802b5a0:	d0f2      	beq.n	802b588 <_realloc_r+0x1c>
 802b5a2:	4631      	mov	r1, r6
 802b5a4:	4622      	mov	r2, r4
 802b5a6:	f7fe ffc8 	bl	802a53a <memcpy>
 802b5aa:	4631      	mov	r1, r6
 802b5ac:	4638      	mov	r0, r7
 802b5ae:	f7fe fff5 	bl	802a59c <_free_r>
 802b5b2:	e7e9      	b.n	802b588 <_realloc_r+0x1c>
 802b5b4:	4635      	mov	r5, r6
 802b5b6:	e7e7      	b.n	802b588 <_realloc_r+0x1c>

0802b5b8 <__ssputs_r>:
 802b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b5bc:	688e      	ldr	r6, [r1, #8]
 802b5be:	429e      	cmp	r6, r3
 802b5c0:	4682      	mov	sl, r0
 802b5c2:	460c      	mov	r4, r1
 802b5c4:	4690      	mov	r8, r2
 802b5c6:	461f      	mov	r7, r3
 802b5c8:	d838      	bhi.n	802b63c <__ssputs_r+0x84>
 802b5ca:	898a      	ldrh	r2, [r1, #12]
 802b5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802b5d0:	d032      	beq.n	802b638 <__ssputs_r+0x80>
 802b5d2:	6825      	ldr	r5, [r4, #0]
 802b5d4:	6909      	ldr	r1, [r1, #16]
 802b5d6:	eba5 0901 	sub.w	r9, r5, r1
 802b5da:	6965      	ldr	r5, [r4, #20]
 802b5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b5e4:	3301      	adds	r3, #1
 802b5e6:	444b      	add	r3, r9
 802b5e8:	106d      	asrs	r5, r5, #1
 802b5ea:	429d      	cmp	r5, r3
 802b5ec:	bf38      	it	cc
 802b5ee:	461d      	movcc	r5, r3
 802b5f0:	0553      	lsls	r3, r2, #21
 802b5f2:	d531      	bpl.n	802b658 <__ssputs_r+0xa0>
 802b5f4:	4629      	mov	r1, r5
 802b5f6:	f7ff f821 	bl	802a63c <_malloc_r>
 802b5fa:	4606      	mov	r6, r0
 802b5fc:	b950      	cbnz	r0, 802b614 <__ssputs_r+0x5c>
 802b5fe:	230c      	movs	r3, #12
 802b600:	f8ca 3000 	str.w	r3, [sl]
 802b604:	89a3      	ldrh	r3, [r4, #12]
 802b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b60a:	81a3      	strh	r3, [r4, #12]
 802b60c:	f04f 30ff 	mov.w	r0, #4294967295
 802b610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b614:	6921      	ldr	r1, [r4, #16]
 802b616:	464a      	mov	r2, r9
 802b618:	f7fe ff8f 	bl	802a53a <memcpy>
 802b61c:	89a3      	ldrh	r3, [r4, #12]
 802b61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802b622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b626:	81a3      	strh	r3, [r4, #12]
 802b628:	6126      	str	r6, [r4, #16]
 802b62a:	6165      	str	r5, [r4, #20]
 802b62c:	444e      	add	r6, r9
 802b62e:	eba5 0509 	sub.w	r5, r5, r9
 802b632:	6026      	str	r6, [r4, #0]
 802b634:	60a5      	str	r5, [r4, #8]
 802b636:	463e      	mov	r6, r7
 802b638:	42be      	cmp	r6, r7
 802b63a:	d900      	bls.n	802b63e <__ssputs_r+0x86>
 802b63c:	463e      	mov	r6, r7
 802b63e:	4632      	mov	r2, r6
 802b640:	6820      	ldr	r0, [r4, #0]
 802b642:	4641      	mov	r1, r8
 802b644:	f7fe ff87 	bl	802a556 <memmove>
 802b648:	68a3      	ldr	r3, [r4, #8]
 802b64a:	6822      	ldr	r2, [r4, #0]
 802b64c:	1b9b      	subs	r3, r3, r6
 802b64e:	4432      	add	r2, r6
 802b650:	60a3      	str	r3, [r4, #8]
 802b652:	6022      	str	r2, [r4, #0]
 802b654:	2000      	movs	r0, #0
 802b656:	e7db      	b.n	802b610 <__ssputs_r+0x58>
 802b658:	462a      	mov	r2, r5
 802b65a:	f7ff ff87 	bl	802b56c <_realloc_r>
 802b65e:	4606      	mov	r6, r0
 802b660:	2800      	cmp	r0, #0
 802b662:	d1e1      	bne.n	802b628 <__ssputs_r+0x70>
 802b664:	6921      	ldr	r1, [r4, #16]
 802b666:	4650      	mov	r0, sl
 802b668:	f7fe ff98 	bl	802a59c <_free_r>
 802b66c:	e7c7      	b.n	802b5fe <__ssputs_r+0x46>
	...

0802b670 <_svfiprintf_r>:
 802b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b674:	4698      	mov	r8, r3
 802b676:	898b      	ldrh	r3, [r1, #12]
 802b678:	061b      	lsls	r3, r3, #24
 802b67a:	b09d      	sub	sp, #116	; 0x74
 802b67c:	4607      	mov	r7, r0
 802b67e:	460d      	mov	r5, r1
 802b680:	4614      	mov	r4, r2
 802b682:	d50e      	bpl.n	802b6a2 <_svfiprintf_r+0x32>
 802b684:	690b      	ldr	r3, [r1, #16]
 802b686:	b963      	cbnz	r3, 802b6a2 <_svfiprintf_r+0x32>
 802b688:	2140      	movs	r1, #64	; 0x40
 802b68a:	f7fe ffd7 	bl	802a63c <_malloc_r>
 802b68e:	6028      	str	r0, [r5, #0]
 802b690:	6128      	str	r0, [r5, #16]
 802b692:	b920      	cbnz	r0, 802b69e <_svfiprintf_r+0x2e>
 802b694:	230c      	movs	r3, #12
 802b696:	603b      	str	r3, [r7, #0]
 802b698:	f04f 30ff 	mov.w	r0, #4294967295
 802b69c:	e0d1      	b.n	802b842 <_svfiprintf_r+0x1d2>
 802b69e:	2340      	movs	r3, #64	; 0x40
 802b6a0:	616b      	str	r3, [r5, #20]
 802b6a2:	2300      	movs	r3, #0
 802b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 802b6a6:	2320      	movs	r3, #32
 802b6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 802b6b0:	2330      	movs	r3, #48	; 0x30
 802b6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b85c <_svfiprintf_r+0x1ec>
 802b6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b6ba:	f04f 0901 	mov.w	r9, #1
 802b6be:	4623      	mov	r3, r4
 802b6c0:	469a      	mov	sl, r3
 802b6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b6c6:	b10a      	cbz	r2, 802b6cc <_svfiprintf_r+0x5c>
 802b6c8:	2a25      	cmp	r2, #37	; 0x25
 802b6ca:	d1f9      	bne.n	802b6c0 <_svfiprintf_r+0x50>
 802b6cc:	ebba 0b04 	subs.w	fp, sl, r4
 802b6d0:	d00b      	beq.n	802b6ea <_svfiprintf_r+0x7a>
 802b6d2:	465b      	mov	r3, fp
 802b6d4:	4622      	mov	r2, r4
 802b6d6:	4629      	mov	r1, r5
 802b6d8:	4638      	mov	r0, r7
 802b6da:	f7ff ff6d 	bl	802b5b8 <__ssputs_r>
 802b6de:	3001      	adds	r0, #1
 802b6e0:	f000 80aa 	beq.w	802b838 <_svfiprintf_r+0x1c8>
 802b6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b6e6:	445a      	add	r2, fp
 802b6e8:	9209      	str	r2, [sp, #36]	; 0x24
 802b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 802b6ee:	2b00      	cmp	r3, #0
 802b6f0:	f000 80a2 	beq.w	802b838 <_svfiprintf_r+0x1c8>
 802b6f4:	2300      	movs	r3, #0
 802b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 802b6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b6fe:	f10a 0a01 	add.w	sl, sl, #1
 802b702:	9304      	str	r3, [sp, #16]
 802b704:	9307      	str	r3, [sp, #28]
 802b706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b70a:	931a      	str	r3, [sp, #104]	; 0x68
 802b70c:	4654      	mov	r4, sl
 802b70e:	2205      	movs	r2, #5
 802b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b714:	4851      	ldr	r0, [pc, #324]	; (802b85c <_svfiprintf_r+0x1ec>)
 802b716:	f7d4 fd83 	bl	8000220 <memchr>
 802b71a:	9a04      	ldr	r2, [sp, #16]
 802b71c:	b9d8      	cbnz	r0, 802b756 <_svfiprintf_r+0xe6>
 802b71e:	06d0      	lsls	r0, r2, #27
 802b720:	bf44      	itt	mi
 802b722:	2320      	movmi	r3, #32
 802b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b728:	0711      	lsls	r1, r2, #28
 802b72a:	bf44      	itt	mi
 802b72c:	232b      	movmi	r3, #43	; 0x2b
 802b72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b732:	f89a 3000 	ldrb.w	r3, [sl]
 802b736:	2b2a      	cmp	r3, #42	; 0x2a
 802b738:	d015      	beq.n	802b766 <_svfiprintf_r+0xf6>
 802b73a:	9a07      	ldr	r2, [sp, #28]
 802b73c:	4654      	mov	r4, sl
 802b73e:	2000      	movs	r0, #0
 802b740:	f04f 0c0a 	mov.w	ip, #10
 802b744:	4621      	mov	r1, r4
 802b746:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b74a:	3b30      	subs	r3, #48	; 0x30
 802b74c:	2b09      	cmp	r3, #9
 802b74e:	d94e      	bls.n	802b7ee <_svfiprintf_r+0x17e>
 802b750:	b1b0      	cbz	r0, 802b780 <_svfiprintf_r+0x110>
 802b752:	9207      	str	r2, [sp, #28]
 802b754:	e014      	b.n	802b780 <_svfiprintf_r+0x110>
 802b756:	eba0 0308 	sub.w	r3, r0, r8
 802b75a:	fa09 f303 	lsl.w	r3, r9, r3
 802b75e:	4313      	orrs	r3, r2
 802b760:	9304      	str	r3, [sp, #16]
 802b762:	46a2      	mov	sl, r4
 802b764:	e7d2      	b.n	802b70c <_svfiprintf_r+0x9c>
 802b766:	9b03      	ldr	r3, [sp, #12]
 802b768:	1d19      	adds	r1, r3, #4
 802b76a:	681b      	ldr	r3, [r3, #0]
 802b76c:	9103      	str	r1, [sp, #12]
 802b76e:	2b00      	cmp	r3, #0
 802b770:	bfbb      	ittet	lt
 802b772:	425b      	neglt	r3, r3
 802b774:	f042 0202 	orrlt.w	r2, r2, #2
 802b778:	9307      	strge	r3, [sp, #28]
 802b77a:	9307      	strlt	r3, [sp, #28]
 802b77c:	bfb8      	it	lt
 802b77e:	9204      	strlt	r2, [sp, #16]
 802b780:	7823      	ldrb	r3, [r4, #0]
 802b782:	2b2e      	cmp	r3, #46	; 0x2e
 802b784:	d10c      	bne.n	802b7a0 <_svfiprintf_r+0x130>
 802b786:	7863      	ldrb	r3, [r4, #1]
 802b788:	2b2a      	cmp	r3, #42	; 0x2a
 802b78a:	d135      	bne.n	802b7f8 <_svfiprintf_r+0x188>
 802b78c:	9b03      	ldr	r3, [sp, #12]
 802b78e:	1d1a      	adds	r2, r3, #4
 802b790:	681b      	ldr	r3, [r3, #0]
 802b792:	9203      	str	r2, [sp, #12]
 802b794:	2b00      	cmp	r3, #0
 802b796:	bfb8      	it	lt
 802b798:	f04f 33ff 	movlt.w	r3, #4294967295
 802b79c:	3402      	adds	r4, #2
 802b79e:	9305      	str	r3, [sp, #20]
 802b7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802b86c <_svfiprintf_r+0x1fc>
 802b7a4:	7821      	ldrb	r1, [r4, #0]
 802b7a6:	2203      	movs	r2, #3
 802b7a8:	4650      	mov	r0, sl
 802b7aa:	f7d4 fd39 	bl	8000220 <memchr>
 802b7ae:	b140      	cbz	r0, 802b7c2 <_svfiprintf_r+0x152>
 802b7b0:	2340      	movs	r3, #64	; 0x40
 802b7b2:	eba0 000a 	sub.w	r0, r0, sl
 802b7b6:	fa03 f000 	lsl.w	r0, r3, r0
 802b7ba:	9b04      	ldr	r3, [sp, #16]
 802b7bc:	4303      	orrs	r3, r0
 802b7be:	3401      	adds	r4, #1
 802b7c0:	9304      	str	r3, [sp, #16]
 802b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b7c6:	4826      	ldr	r0, [pc, #152]	; (802b860 <_svfiprintf_r+0x1f0>)
 802b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b7cc:	2206      	movs	r2, #6
 802b7ce:	f7d4 fd27 	bl	8000220 <memchr>
 802b7d2:	2800      	cmp	r0, #0
 802b7d4:	d038      	beq.n	802b848 <_svfiprintf_r+0x1d8>
 802b7d6:	4b23      	ldr	r3, [pc, #140]	; (802b864 <_svfiprintf_r+0x1f4>)
 802b7d8:	bb1b      	cbnz	r3, 802b822 <_svfiprintf_r+0x1b2>
 802b7da:	9b03      	ldr	r3, [sp, #12]
 802b7dc:	3307      	adds	r3, #7
 802b7de:	f023 0307 	bic.w	r3, r3, #7
 802b7e2:	3308      	adds	r3, #8
 802b7e4:	9303      	str	r3, [sp, #12]
 802b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b7e8:	4433      	add	r3, r6
 802b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 802b7ec:	e767      	b.n	802b6be <_svfiprintf_r+0x4e>
 802b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 802b7f2:	460c      	mov	r4, r1
 802b7f4:	2001      	movs	r0, #1
 802b7f6:	e7a5      	b.n	802b744 <_svfiprintf_r+0xd4>
 802b7f8:	2300      	movs	r3, #0
 802b7fa:	3401      	adds	r4, #1
 802b7fc:	9305      	str	r3, [sp, #20]
 802b7fe:	4619      	mov	r1, r3
 802b800:	f04f 0c0a 	mov.w	ip, #10
 802b804:	4620      	mov	r0, r4
 802b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b80a:	3a30      	subs	r2, #48	; 0x30
 802b80c:	2a09      	cmp	r2, #9
 802b80e:	d903      	bls.n	802b818 <_svfiprintf_r+0x1a8>
 802b810:	2b00      	cmp	r3, #0
 802b812:	d0c5      	beq.n	802b7a0 <_svfiprintf_r+0x130>
 802b814:	9105      	str	r1, [sp, #20]
 802b816:	e7c3      	b.n	802b7a0 <_svfiprintf_r+0x130>
 802b818:	fb0c 2101 	mla	r1, ip, r1, r2
 802b81c:	4604      	mov	r4, r0
 802b81e:	2301      	movs	r3, #1
 802b820:	e7f0      	b.n	802b804 <_svfiprintf_r+0x194>
 802b822:	ab03      	add	r3, sp, #12
 802b824:	9300      	str	r3, [sp, #0]
 802b826:	462a      	mov	r2, r5
 802b828:	4b0f      	ldr	r3, [pc, #60]	; (802b868 <_svfiprintf_r+0x1f8>)
 802b82a:	a904      	add	r1, sp, #16
 802b82c:	4638      	mov	r0, r7
 802b82e:	f3af 8000 	nop.w
 802b832:	1c42      	adds	r2, r0, #1
 802b834:	4606      	mov	r6, r0
 802b836:	d1d6      	bne.n	802b7e6 <_svfiprintf_r+0x176>
 802b838:	89ab      	ldrh	r3, [r5, #12]
 802b83a:	065b      	lsls	r3, r3, #25
 802b83c:	f53f af2c 	bmi.w	802b698 <_svfiprintf_r+0x28>
 802b840:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b842:	b01d      	add	sp, #116	; 0x74
 802b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b848:	ab03      	add	r3, sp, #12
 802b84a:	9300      	str	r3, [sp, #0]
 802b84c:	462a      	mov	r2, r5
 802b84e:	4b06      	ldr	r3, [pc, #24]	; (802b868 <_svfiprintf_r+0x1f8>)
 802b850:	a904      	add	r1, sp, #16
 802b852:	4638      	mov	r0, r7
 802b854:	f7ff f914 	bl	802aa80 <_printf_i>
 802b858:	e7eb      	b.n	802b832 <_svfiprintf_r+0x1c2>
 802b85a:	bf00      	nop
 802b85c:	08037c1c 	.word	0x08037c1c
 802b860:	08037c26 	.word	0x08037c26
 802b864:	00000000 	.word	0x00000000
 802b868:	0802b5b9 	.word	0x0802b5b9
 802b86c:	08037c22 	.word	0x08037c22

0802b870 <_read_r>:
 802b870:	b538      	push	{r3, r4, r5, lr}
 802b872:	4d07      	ldr	r5, [pc, #28]	; (802b890 <_read_r+0x20>)
 802b874:	4604      	mov	r4, r0
 802b876:	4608      	mov	r0, r1
 802b878:	4611      	mov	r1, r2
 802b87a:	2200      	movs	r2, #0
 802b87c:	602a      	str	r2, [r5, #0]
 802b87e:	461a      	mov	r2, r3
 802b880:	f7fe fbd6 	bl	802a030 <_read>
 802b884:	1c43      	adds	r3, r0, #1
 802b886:	d102      	bne.n	802b88e <_read_r+0x1e>
 802b888:	682b      	ldr	r3, [r5, #0]
 802b88a:	b103      	cbz	r3, 802b88e <_read_r+0x1e>
 802b88c:	6023      	str	r3, [r4, #0]
 802b88e:	bd38      	pop	{r3, r4, r5, pc}
 802b890:	20014684 	.word	0x20014684

0802b894 <abort>:
 802b894:	b508      	push	{r3, lr}
 802b896:	2006      	movs	r0, #6
 802b898:	f000 f856 	bl	802b948 <raise>
 802b89c:	2001      	movs	r0, #1
 802b89e:	f7fe fbc1 	bl	802a024 <_exit>
	...

0802b8a4 <_fstat_r>:
 802b8a4:	b538      	push	{r3, r4, r5, lr}
 802b8a6:	4d07      	ldr	r5, [pc, #28]	; (802b8c4 <_fstat_r+0x20>)
 802b8a8:	2300      	movs	r3, #0
 802b8aa:	4604      	mov	r4, r0
 802b8ac:	4608      	mov	r0, r1
 802b8ae:	4611      	mov	r1, r2
 802b8b0:	602b      	str	r3, [r5, #0]
 802b8b2:	f7fe fbcd 	bl	802a050 <_fstat>
 802b8b6:	1c43      	adds	r3, r0, #1
 802b8b8:	d102      	bne.n	802b8c0 <_fstat_r+0x1c>
 802b8ba:	682b      	ldr	r3, [r5, #0]
 802b8bc:	b103      	cbz	r3, 802b8c0 <_fstat_r+0x1c>
 802b8be:	6023      	str	r3, [r4, #0]
 802b8c0:	bd38      	pop	{r3, r4, r5, pc}
 802b8c2:	bf00      	nop
 802b8c4:	20014684 	.word	0x20014684

0802b8c8 <_isatty_r>:
 802b8c8:	b538      	push	{r3, r4, r5, lr}
 802b8ca:	4d06      	ldr	r5, [pc, #24]	; (802b8e4 <_isatty_r+0x1c>)
 802b8cc:	2300      	movs	r3, #0
 802b8ce:	4604      	mov	r4, r0
 802b8d0:	4608      	mov	r0, r1
 802b8d2:	602b      	str	r3, [r5, #0]
 802b8d4:	f7fe fbc1 	bl	802a05a <_isatty>
 802b8d8:	1c43      	adds	r3, r0, #1
 802b8da:	d102      	bne.n	802b8e2 <_isatty_r+0x1a>
 802b8dc:	682b      	ldr	r3, [r5, #0]
 802b8de:	b103      	cbz	r3, 802b8e2 <_isatty_r+0x1a>
 802b8e0:	6023      	str	r3, [r4, #0]
 802b8e2:	bd38      	pop	{r3, r4, r5, pc}
 802b8e4:	20014684 	.word	0x20014684

0802b8e8 <_malloc_usable_size_r>:
 802b8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b8ec:	1f18      	subs	r0, r3, #4
 802b8ee:	2b00      	cmp	r3, #0
 802b8f0:	bfbc      	itt	lt
 802b8f2:	580b      	ldrlt	r3, [r1, r0]
 802b8f4:	18c0      	addlt	r0, r0, r3
 802b8f6:	4770      	bx	lr

0802b8f8 <_raise_r>:
 802b8f8:	291f      	cmp	r1, #31
 802b8fa:	b538      	push	{r3, r4, r5, lr}
 802b8fc:	4604      	mov	r4, r0
 802b8fe:	460d      	mov	r5, r1
 802b900:	d904      	bls.n	802b90c <_raise_r+0x14>
 802b902:	2316      	movs	r3, #22
 802b904:	6003      	str	r3, [r0, #0]
 802b906:	f04f 30ff 	mov.w	r0, #4294967295
 802b90a:	bd38      	pop	{r3, r4, r5, pc}
 802b90c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802b90e:	b112      	cbz	r2, 802b916 <_raise_r+0x1e>
 802b910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b914:	b94b      	cbnz	r3, 802b92a <_raise_r+0x32>
 802b916:	4620      	mov	r0, r4
 802b918:	f000 f830 	bl	802b97c <_getpid_r>
 802b91c:	462a      	mov	r2, r5
 802b91e:	4601      	mov	r1, r0
 802b920:	4620      	mov	r0, r4
 802b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b926:	f000 b817 	b.w	802b958 <_kill_r>
 802b92a:	2b01      	cmp	r3, #1
 802b92c:	d00a      	beq.n	802b944 <_raise_r+0x4c>
 802b92e:	1c59      	adds	r1, r3, #1
 802b930:	d103      	bne.n	802b93a <_raise_r+0x42>
 802b932:	2316      	movs	r3, #22
 802b934:	6003      	str	r3, [r0, #0]
 802b936:	2001      	movs	r0, #1
 802b938:	e7e7      	b.n	802b90a <_raise_r+0x12>
 802b93a:	2400      	movs	r4, #0
 802b93c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b940:	4628      	mov	r0, r5
 802b942:	4798      	blx	r3
 802b944:	2000      	movs	r0, #0
 802b946:	e7e0      	b.n	802b90a <_raise_r+0x12>

0802b948 <raise>:
 802b948:	4b02      	ldr	r3, [pc, #8]	; (802b954 <raise+0xc>)
 802b94a:	4601      	mov	r1, r0
 802b94c:	6818      	ldr	r0, [r3, #0]
 802b94e:	f7ff bfd3 	b.w	802b8f8 <_raise_r>
 802b952:	bf00      	nop
 802b954:	20000054 	.word	0x20000054

0802b958 <_kill_r>:
 802b958:	b538      	push	{r3, r4, r5, lr}
 802b95a:	4d07      	ldr	r5, [pc, #28]	; (802b978 <_kill_r+0x20>)
 802b95c:	2300      	movs	r3, #0
 802b95e:	4604      	mov	r4, r0
 802b960:	4608      	mov	r0, r1
 802b962:	4611      	mov	r1, r2
 802b964:	602b      	str	r3, [r5, #0]
 802b966:	f7fe fb55 	bl	802a014 <_kill>
 802b96a:	1c43      	adds	r3, r0, #1
 802b96c:	d102      	bne.n	802b974 <_kill_r+0x1c>
 802b96e:	682b      	ldr	r3, [r5, #0]
 802b970:	b103      	cbz	r3, 802b974 <_kill_r+0x1c>
 802b972:	6023      	str	r3, [r4, #0]
 802b974:	bd38      	pop	{r3, r4, r5, pc}
 802b976:	bf00      	nop
 802b978:	20014684 	.word	0x20014684

0802b97c <_getpid_r>:
 802b97c:	f7fe bb48 	b.w	802a010 <_getpid>

0802b980 <_gettimeofday>:
 802b980:	4b02      	ldr	r3, [pc, #8]	; (802b98c <_gettimeofday+0xc>)
 802b982:	2258      	movs	r2, #88	; 0x58
 802b984:	601a      	str	r2, [r3, #0]
 802b986:	f04f 30ff 	mov.w	r0, #4294967295
 802b98a:	4770      	bx	lr
 802b98c:	20014684 	.word	0x20014684

0802b990 <_init>:
 802b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b992:	bf00      	nop
 802b994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b996:	bc08      	pop	{r3}
 802b998:	469e      	mov	lr, r3
 802b99a:	4770      	bx	lr

0802b99c <_fini>:
 802b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b99e:	bf00      	nop
 802b9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b9a2:	bc08      	pop	{r3}
 802b9a4:	469e      	mov	lr, r3
 802b9a6:	4770      	bx	lr
